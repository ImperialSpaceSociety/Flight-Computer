
Flash_STM32F303K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e10  08007b54  08007b54  00017b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008964  08008964  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008964  08008964  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008964  08008964  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008968  08008968  00018968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800896c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000012fc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000136c  2000136c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001434f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000289c  00000000  00000000  000343ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00036c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001098  00000000  00000000  00037e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003dbc  00000000  00000000  00038ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017910  00000000  00000000  0003cc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a91ef  00000000  00000000  00054594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fd783  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005048  00000000  00000000  000fd7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b3c 	.word	0x08007b3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007b3c 	.word	0x08007b3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <a_w25qxx_spi_write_read>:
 *             - 0 success
 *             - 1 write read failed
 * @note       none
 */
static uint8_t a_w25qxx_spi_write_read(w25qxx_handle_t *handle, uint8_t *in_buf, uint32_t in_len, uint8_t *out_buf, uint32_t out_len)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b08f      	sub	sp, #60	; 0x3c
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
    if (handle->spi_qspi_write_read(0x00, 0x00, 0x00000000, 0x00, 0x00,                /* write read data */
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	689c      	ldr	r4, [r3, #8]
 8000292:	2301      	movs	r3, #1
 8000294:	9309      	str	r3, [sp, #36]	; 0x24
 8000296:	6a3b      	ldr	r3, [r7, #32]
 8000298:	9308      	str	r3, [sp, #32]
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	9307      	str	r3, [sp, #28]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	9306      	str	r3, [sp, #24]
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	9305      	str	r3, [sp, #20]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9304      	str	r3, [sp, #16]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9303      	str	r3, [sp, #12]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9302      	str	r3, [sp, #8]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9301      	str	r3, [sp, #4]
 80002b6:	2300      	movs	r3, #0
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2300      	movs	r3, #0
 80002bc:	2200      	movs	r2, #0
 80002be:	2100      	movs	r1, #0
 80002c0:	2000      	movs	r0, #0
 80002c2:	47a0      	blx	r4
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <a_w25qxx_spi_write_read+0x4e>
                                    0x00000000, 0x00, 0x00, 
                                    0x00, in_buf, in_len, out_buf, out_len, 1) != 0)
    {
        return 1;                                                                      /* return error */
 80002ca:	2301      	movs	r3, #1
 80002cc:	e000      	b.n	80002d0 <a_w25qxx_spi_write_read+0x50>
    }
    else
    {
        return 0;                                                                      /* success return 0 */
 80002ce:	2300      	movs	r3, #0
    }
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd90      	pop	{r4, r7, pc}

080002d8 <a_w25qxx_qspi_write_read>:
static uint8_t a_w25qxx_qspi_write_read(w25qxx_handle_t *handle, uint8_t instruction, uint8_t instruction_line,
                                        uint32_t address, uint8_t address_line, uint8_t address_len,
                                        uint32_t alternate, uint8_t alternate_line, uint8_t alternate_len,
                                        uint8_t dummy, uint8_t *in_buf, uint32_t in_len,
                                        uint8_t *out_buf, uint32_t out_len, uint8_t data_line)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b08f      	sub	sp, #60	; 0x3c
 80002dc:	af0a      	add	r7, sp, #40	; 0x28
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	460b      	mov	r3, r1
 80002e4:	72fb      	strb	r3, [r7, #11]
 80002e6:	4613      	mov	r3, r2
 80002e8:	72bb      	strb	r3, [r7, #10]
    if (handle->spi_qspi_write_read(instruction, instruction_line, address, address_line, address_len,        /* write read data */
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	689c      	ldr	r4, [r3, #8]
 80002ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80002f2:	7ab9      	ldrb	r1, [r7, #10]
 80002f4:	7af8      	ldrb	r0, [r7, #11]
 80002f6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80002fa:	9309      	str	r3, [sp, #36]	; 0x24
 80002fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002fe:	9308      	str	r3, [sp, #32]
 8000300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000302:	9307      	str	r3, [sp, #28]
 8000304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000306:	9306      	str	r3, [sp, #24]
 8000308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800030a:	9305      	str	r3, [sp, #20]
 800030c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000310:	9304      	str	r3, [sp, #16]
 8000312:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000316:	9303      	str	r3, [sp, #12]
 8000318:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800031c:	9302      	str	r3, [sp, #8]
 800031e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	4613      	mov	r3, r2
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	47a0      	blx	r4
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <a_w25qxx_qspi_write_read+0x60>
                                    alternate, alternate_line, alternate_len, 
                                    dummy, in_buf, in_len, out_buf, out_len, data_line) != 0)
    {
        return 1;                                                                                             /* return error */
 8000334:	2301      	movs	r3, #1
 8000336:	e000      	b.n	800033a <a_w25qxx_qspi_write_read+0x62>
    }
    else
    {
        return 0;                                                                                             /* success return 0 */
 8000338:	2300      	movs	r3, #0
    }
}
 800033a:	4618      	mov	r0, r3
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bd90      	pop	{r4, r7, pc}

08000342 <w25qxx_set_dual_quad_spi>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t w25qxx_set_dual_quad_spi(w25qxx_handle_t *handle, w25qxx_bool_t enable)
{
 8000342:	b480      	push	{r7}
 8000344:	b083      	sub	sp, #12
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
 800034a:	460b      	mov	r3, r1
 800034c:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                                    /* check handle */
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d101      	bne.n	8000358 <w25qxx_set_dual_quad_spi+0x16>
    {
        return 2;                                          /* return error */
 8000354:	2302      	movs	r3, #2
 8000356:	e003      	b.n	8000360 <w25qxx_set_dual_quad_spi+0x1e>
    }

    handle->dual_quad_spi_enable = (uint8_t)enable;        /* set enable */
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	78fa      	ldrb	r2, [r7, #3]
 800035c:	77da      	strb	r2, [r3, #31]
    
    return 0;                                              /* success return 0 */
 800035e:	2300      	movs	r3, #0
}
 8000360:	4618      	mov	r0, r3
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <w25qxx_set_type>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t w25qxx_set_type(w25qxx_handle_t *handle, w25qxx_type_t type)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	807b      	strh	r3, [r7, #2]
    if (handle == NULL)                  /* check handle */
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d101      	bne.n	8000382 <w25qxx_set_type+0x16>
    {
        return 2;                        /* return error */
 800037e:	2302      	movs	r3, #2
 8000380:	e003      	b.n	800038a <w25qxx_set_type+0x1e>
    }

    handle->type = (uint16_t)type;       /* set type */
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	887a      	ldrh	r2, [r7, #2]
 8000386:	835a      	strh	r2, [r3, #26]
    
    return 0;                            /* success return 0 */
 8000388:	2300      	movs	r3, #0
}
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <w25qxx_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t w25qxx_set_interface(w25qxx_handle_t *handle, w25qxx_interface_t interface)
{
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
 800039e:	460b      	mov	r3, r1
 80003a0:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                           /* check handle */
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d101      	bne.n	80003ac <w25qxx_set_interface+0x16>
    {
        return 2;                                 /* return error */
 80003a8:	2302      	movs	r3, #2
 80003aa:	e004      	b.n	80003b6 <w25qxx_set_interface+0x20>
    }

    handle->spi_qspi = (uint8_t)interface;        /* set interface */
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	78fa      	ldrb	r2, [r7, #3]
 80003b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return 0;                                     /* success return 0 */
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
	...

080003c4 <w25qxx_set_address_mode>:
 *             - 3 handle is not initialized
 *             - 4 current type can't use this function
 * @note      none
 */
uint8_t w25qxx_set_address_mode(w25qxx_handle_t *handle, w25qxx_address_mode_t mode)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b090      	sub	sp, #64	; 0x40
 80003c8:	af0c      	add	r7, sp, #48	; 0x30
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t buf[1];
    
    if (handle == NULL)                                                               /* check handle */
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d101      	bne.n	80003da <w25qxx_set_address_mode+0x16>
    {
        return 2;                                                                     /* return error */
 80003d6:	2302      	movs	r3, #2
 80003d8:	e098      	b.n	800050c <w25qxx_set_address_mode+0x148>
    }   
    if (handle->inited != 1)                                                          /* check handle initialization */
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	7e1b      	ldrb	r3, [r3, #24]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d001      	beq.n	80003e6 <w25qxx_set_address_mode+0x22>
    {
        return 3;                                                                     /* return error */
 80003e2:	2303      	movs	r3, #3
 80003e4:	e092      	b.n	800050c <w25qxx_set_address_mode+0x148>
    }
    if (handle->type < W25Q256)                                                       /* check type */
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	8b5b      	ldrh	r3, [r3, #26]
 80003ea:	f64e 7217 	movw	r2, #61207	; 0xef17
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d805      	bhi.n	80003fe <w25qxx_set_address_mode+0x3a>
    {
        handle->debug_print("w25qxx: current type can't use this function.\n");       /* current type can't use this function */
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4847      	ldr	r0, [pc, #284]	; (8000514 <w25qxx_set_address_mode+0x150>)
 80003f8:	4798      	blx	r3
       
        return 4;                                                                     /* return error */
 80003fa:	2304      	movs	r3, #4
 80003fc:	e086      	b.n	800050c <w25qxx_set_address_mode+0x148>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                     /* spi interface */
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d14e      	bne.n	80004a6 <w25qxx_set_address_mode+0xe2>
    {
        if (handle->dual_quad_spi_enable != 0)                                        /* enable dual quad spi */
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	7fdb      	ldrb	r3, [r3, #31]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d02e      	beq.n	800046e <w25qxx_set_address_mode+0xaa>
        {
            if (mode == W25QXX_ADDRESS_MODE_3_BYTE)                                   /* address 3 mode byte */
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d102      	bne.n	800041c <w25qxx_set_address_mode+0x58>
            {
                buf[0] = 0xE9;                                                        /* 3 byte mode */
 8000416:	23e9      	movs	r3, #233	; 0xe9
 8000418:	733b      	strb	r3, [r7, #12]
 800041a:	e001      	b.n	8000420 <w25qxx_set_address_mode+0x5c>
            }
            else                                                                      /* address 4 mode byte */
            {
                buf[0] = 0xB7;                                                        /* 4 byte mode */
 800041c:	23b7      	movs	r3, #183	; 0xb7
 800041e:	733b      	strb	r3, [r7, #12]
            }
            res = a_w25qxx_qspi_write_read(handle, buf[0], 1,
 8000420:	7b39      	ldrb	r1, [r7, #12]
 8000422:	2300      	movs	r3, #0
 8000424:	930a      	str	r3, [sp, #40]	; 0x28
 8000426:	2300      	movs	r3, #0
 8000428:	9309      	str	r3, [sp, #36]	; 0x24
 800042a:	2300      	movs	r3, #0
 800042c:	9308      	str	r3, [sp, #32]
 800042e:	2300      	movs	r3, #0
 8000430:	9307      	str	r3, [sp, #28]
 8000432:	2300      	movs	r3, #0
 8000434:	9306      	str	r3, [sp, #24]
 8000436:	2300      	movs	r3, #0
 8000438:	9305      	str	r3, [sp, #20]
 800043a:	2300      	movs	r3, #0
 800043c:	9304      	str	r3, [sp, #16]
 800043e:	2300      	movs	r3, #0
 8000440:	9303      	str	r3, [sp, #12]
 8000442:	2300      	movs	r3, #0
 8000444:	9302      	str	r3, [sp, #8]
 8000446:	2300      	movs	r3, #0
 8000448:	9301      	str	r3, [sp, #4]
 800044a:	2300      	movs	r3, #0
 800044c:	9300      	str	r3, [sp, #0]
 800044e:	2300      	movs	r3, #0
 8000450:	2201      	movs	r2, #1
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f7ff ff40 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000458:	4603      	mov	r3, r0
 800045a:	73fb      	strb	r3, [r7, #15]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                         /* qspi write read */
            if (res != 0)                                                             /* check result */
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d050      	beq.n	8000504 <w25qxx_set_address_mode+0x140>
            {
                handle->debug_print("w25qxx: set address mode failed.\n");            /* set address mode failed */
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	482c      	ldr	r0, [pc, #176]	; (8000518 <w25qxx_set_address_mode+0x154>)
 8000468:	4798      	blx	r3
               
                return 1;                                                             /* return error */
 800046a:	2301      	movs	r3, #1
 800046c:	e04e      	b.n	800050c <w25qxx_set_address_mode+0x148>
            }
        }
        else                                                                          /* single spi */
        {
            if (mode == W25QXX_ADDRESS_MODE_3_BYTE)                                   /* address 3 mode byte */
 800046e:	78fb      	ldrb	r3, [r7, #3]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d102      	bne.n	800047a <w25qxx_set_address_mode+0xb6>
            {
                buf[0] = 0xE9;                                                        /* 3 byte mode */
 8000474:	23e9      	movs	r3, #233	; 0xe9
 8000476:	733b      	strb	r3, [r7, #12]
 8000478:	e001      	b.n	800047e <w25qxx_set_address_mode+0xba>
            }
            else                                                                      /* address 4 mode byte */
            {
                buf[0] = 0xB7;                                                        /* 4 byte mode */
 800047a:	23b7      	movs	r3, #183	; 0xb7
 800047c:	733b      	strb	r3, [r7, #12]
            }
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);        /* spi write read */
 800047e:	f107 010c 	add.w	r1, r7, #12
 8000482:	2300      	movs	r3, #0
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	2300      	movs	r3, #0
 8000488:	2201      	movs	r2, #1
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f7ff fef8 	bl	8000280 <a_w25qxx_spi_write_read>
 8000490:	4603      	mov	r3, r0
 8000492:	73fb      	strb	r3, [r7, #15]
            if (res != 0)                                                             /* check result */
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d034      	beq.n	8000504 <w25qxx_set_address_mode+0x140>
            {
                handle->debug_print("w25qxx: set address mode failed.\n");            /* set address mode failed */
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	481e      	ldr	r0, [pc, #120]	; (8000518 <w25qxx_set_address_mode+0x154>)
 80004a0:	4798      	blx	r3
               
                return 1;                                                             /* return error */
 80004a2:	2301      	movs	r3, #1
 80004a4:	e032      	b.n	800050c <w25qxx_set_address_mode+0x148>
            }
        }
    }
    else                                                                              /* qspi interface */
    {
        if (mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* address 3 mode byte */
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d102      	bne.n	80004b2 <w25qxx_set_address_mode+0xee>
        {
            buf[0] = 0xE9;                                                            /* 3 byte mode */
 80004ac:	23e9      	movs	r3, #233	; 0xe9
 80004ae:	733b      	strb	r3, [r7, #12]
 80004b0:	e001      	b.n	80004b6 <w25qxx_set_address_mode+0xf2>
        }
        else                                                                          /* address 4 mode byte */
        {
            buf[0] = 0xB7;                                                            /* 4 byte mode */
 80004b2:	23b7      	movs	r3, #183	; 0xb7
 80004b4:	733b      	strb	r3, [r7, #12]
        }
        res = a_w25qxx_qspi_write_read(handle, buf[0], 4,
 80004b6:	7b39      	ldrb	r1, [r7, #12]
 80004b8:	2300      	movs	r3, #0
 80004ba:	930a      	str	r3, [sp, #40]	; 0x28
 80004bc:	2300      	movs	r3, #0
 80004be:	9309      	str	r3, [sp, #36]	; 0x24
 80004c0:	2300      	movs	r3, #0
 80004c2:	9308      	str	r3, [sp, #32]
 80004c4:	2300      	movs	r3, #0
 80004c6:	9307      	str	r3, [sp, #28]
 80004c8:	2300      	movs	r3, #0
 80004ca:	9306      	str	r3, [sp, #24]
 80004cc:	2300      	movs	r3, #0
 80004ce:	9305      	str	r3, [sp, #20]
 80004d0:	2300      	movs	r3, #0
 80004d2:	9304      	str	r3, [sp, #16]
 80004d4:	2300      	movs	r3, #0
 80004d6:	9303      	str	r3, [sp, #12]
 80004d8:	2300      	movs	r3, #0
 80004da:	9302      	str	r3, [sp, #8]
 80004dc:	2300      	movs	r3, #0
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2300      	movs	r3, #0
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2300      	movs	r3, #0
 80004e6:	2204      	movs	r2, #4
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff fef5 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80004ee:	4603      	mov	r3, r0
 80004f0:	73fb      	strb	r3, [r7, #15]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                             /* qspi write read */
        if (res != 0)                                                                 /* check result */
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d005      	beq.n	8000504 <w25qxx_set_address_mode+0x140>
        {
            handle->debug_print("w25qxx: set address mode failed.\n");                /* set address mode failed */
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <w25qxx_set_address_mode+0x154>)
 80004fe:	4798      	blx	r3
           
            return 1;                                                                 /* return error */
 8000500:	2301      	movs	r3, #1
 8000502:	e003      	b.n	800050c <w25qxx_set_address_mode+0x148>
        }
    }
    
    handle->address_mode = (uint8_t)mode;                                             /* set address mode */
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	78fa      	ldrb	r2, [r7, #3]
 8000508:	771a      	strb	r2, [r3, #28]
    
    return 0;                                                                         /* success return 0 */
 800050a:	2300      	movs	r3, #0
}
 800050c:	4618      	mov	r0, r3
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	08007b54 	.word	0x08007b54
 8000518:	08007b84 	.word	0x08007b84

0800051c <w25qxx_init>:
 *            - 7 reset failed
 *            - 8 set address mode failed
 * @note      none
 */
uint8_t w25qxx_init(w25qxx_handle_t *handle)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b092      	sub	sp, #72	; 0x48
 8000520:	af0c      	add	r7, sp, #48	; 0x30
 8000522:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t buf[4];
    uint8_t out[2];
    uint16_t id;
    
    if (handle == NULL)                                                                    /* check handle */
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d102      	bne.n	8000530 <w25qxx_init+0x14>
    {
        return 2;                                                                          /* return error */
 800052a:	2302      	movs	r3, #2
 800052c:	f000 bc0e 	b.w	8000d4c <w25qxx_init+0x830>
    }
    if (handle->debug_print == NULL)                                                       /* check debug_print */
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d102      	bne.n	800053e <w25qxx_init+0x22>
    {
        return 3;                                                                          /* return error */
 8000538:	2303      	movs	r3, #3
 800053a:	f000 bc07 	b.w	8000d4c <w25qxx_init+0x830>
    }
    if (handle->spi_qspi_init == NULL)                                                     /* check spi_qspi_init */
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d105      	bne.n	8000552 <w25qxx_init+0x36>
    {
        handle->debug_print("w25qxx: spi_qspi_init is null.\n");                           /* spi_qspi_init is null */
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4885      	ldr	r0, [pc, #532]	; (8000760 <w25qxx_init+0x244>)
 800054c:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800054e:	2303      	movs	r3, #3
 8000550:	e3fc      	b.n	8000d4c <w25qxx_init+0x830>
    }
    if (handle->spi_qspi_deinit == NULL)                                                   /* check spi_qspi_deinit */
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d105      	bne.n	8000566 <w25qxx_init+0x4a>
    {
        handle->debug_print("w25qxx: spi_qspi_deinit is null.\n");                         /* spi_qspi_deinit is null */
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4881      	ldr	r0, [pc, #516]	; (8000764 <w25qxx_init+0x248>)
 8000560:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8000562:	2303      	movs	r3, #3
 8000564:	e3f2      	b.n	8000d4c <w25qxx_init+0x830>
    }
    if (handle->spi_qspi_write_read == NULL)                                               /* check spi_qspi_write_read */
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d105      	bne.n	800057a <w25qxx_init+0x5e>
    {
        handle->debug_print("w25qxx: spi_qspi_write_read is null.\n");                     /* spi_qspi_write_read is null */
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	487d      	ldr	r0, [pc, #500]	; (8000768 <w25qxx_init+0x24c>)
 8000574:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8000576:	2303      	movs	r3, #3
 8000578:	e3e8      	b.n	8000d4c <w25qxx_init+0x830>
    }
    if (handle->delay_us == NULL)                                                          /* check delay_us */
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	691b      	ldr	r3, [r3, #16]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d105      	bne.n	800058e <w25qxx_init+0x72>
    {
        handle->debug_print("w25qxx: delay_us is null.\n");                                /* delay_us is null */
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4879      	ldr	r0, [pc, #484]	; (800076c <w25qxx_init+0x250>)
 8000588:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800058a:	2303      	movs	r3, #3
 800058c:	e3de      	b.n	8000d4c <w25qxx_init+0x830>
    }
    if (handle->delay_ms == NULL)                                                          /* check delay_ms */
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d105      	bne.n	80005a2 <w25qxx_init+0x86>
    {
        handle->debug_print("w25qxx: delay_ms is null.\n");                                /* delay_ms is null */
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4875      	ldr	r0, [pc, #468]	; (8000770 <w25qxx_init+0x254>)
 800059c:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800059e:	2303      	movs	r3, #3
 80005a0:	e3d4      	b.n	8000d4c <w25qxx_init+0x830>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                          /* spi interface */
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	f040 81cf 	bne.w	800094c <w25qxx_init+0x430>
    {
        res = handle->spi_qspi_init();                                                     /* spi init */
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4798      	blx	r3
 80005b4:	4603      	mov	r3, r0
 80005b6:	75fb      	strb	r3, [r7, #23]
        if (res != 0)                                                                      /* check result */
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d005      	beq.n	80005ca <w25qxx_init+0xae>
        {
            handle->debug_print("w25qxx: spi init failed.\n");                             /* spi init failed */
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	486c      	ldr	r0, [pc, #432]	; (8000774 <w25qxx_init+0x258>)
 80005c4:	4798      	blx	r3
           
            return 1;                                                                      /* return error */
 80005c6:	2301      	movs	r3, #1
 80005c8:	e3c0      	b.n	8000d4c <w25qxx_init+0x830>
        }
        if (handle->dual_quad_spi_enable != 0)                                             /* enable dual quad spi */
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7fdb      	ldrb	r3, [r3, #31]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	f000 810e 	beq.w	80007f0 <w25qxx_init+0x2d4>
        {
            res = a_w25qxx_qspi_write_read(handle,
 80005d4:	2301      	movs	r3, #1
 80005d6:	930a      	str	r3, [sp, #40]	; 0x28
 80005d8:	2301      	movs	r3, #1
 80005da:	9309      	str	r3, [sp, #36]	; 0x24
 80005dc:	f107 030a 	add.w	r3, r7, #10
 80005e0:	9308      	str	r3, [sp, #32]
 80005e2:	2300      	movs	r3, #0
 80005e4:	9307      	str	r3, [sp, #28]
 80005e6:	2300      	movs	r3, #0
 80005e8:	9306      	str	r3, [sp, #24]
 80005ea:	2318      	movs	r3, #24
 80005ec:	9305      	str	r3, [sp, #20]
 80005ee:	2300      	movs	r3, #0
 80005f0:	9304      	str	r3, [sp, #16]
 80005f2:	2300      	movs	r3, #0
 80005f4:	9303      	str	r3, [sp, #12]
 80005f6:	2300      	movs	r3, #0
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2300      	movs	r3, #0
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2300      	movs	r3, #0
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	2201      	movs	r2, #1
 8000606:	21ab      	movs	r1, #171	; 0xab
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff fe65 	bl	80002d8 <a_w25qxx_qspi_write_read>
 800060e:	4603      	mov	r3, r0
 8000610:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_RELEASE_POWER_DOWN, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           3 * 8, NULL, 0x00,
                                          (uint8_t *)&id, 1, 1);                           /* spi write read */
            if (res != 0)                                                                  /* check result */
 8000612:	7dfb      	ldrb	r3, [r7, #23]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d008      	beq.n	800062a <w25qxx_init+0x10e>
            {
                handle->debug_print("w25qxx: release power down failed.\n");               /* release power down failed */
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4856      	ldr	r0, [pc, #344]	; (8000778 <w25qxx_init+0x25c>)
 800061e:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 8000626:	2301      	movs	r3, #1
 8000628:	e390      	b.n	8000d4c <w25qxx_init+0x830>
            }
            res = a_w25qxx_qspi_write_read(handle,
 800062a:	2300      	movs	r3, #0
 800062c:	930a      	str	r3, [sp, #40]	; 0x28
 800062e:	2300      	movs	r3, #0
 8000630:	9309      	str	r3, [sp, #36]	; 0x24
 8000632:	2300      	movs	r3, #0
 8000634:	9308      	str	r3, [sp, #32]
 8000636:	2300      	movs	r3, #0
 8000638:	9307      	str	r3, [sp, #28]
 800063a:	2300      	movs	r3, #0
 800063c:	9306      	str	r3, [sp, #24]
 800063e:	2300      	movs	r3, #0
 8000640:	9305      	str	r3, [sp, #20]
 8000642:	2300      	movs	r3, #0
 8000644:	9304      	str	r3, [sp, #16]
 8000646:	2300      	movs	r3, #0
 8000648:	9303      	str	r3, [sp, #12]
 800064a:	2300      	movs	r3, #0
 800064c:	9302      	str	r3, [sp, #8]
 800064e:	2300      	movs	r3, #0
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2300      	movs	r3, #0
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2300      	movs	r3, #0
 8000658:	2201      	movs	r2, #1
 800065a:	2166      	movs	r1, #102	; 0x66
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff fe3b 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000662:	4603      	mov	r3, r0
 8000664:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_ENABLE_RESET, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 8000666:	7dfb      	ldrb	r3, [r7, #23]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <w25qxx_init+0x162>
            {
                handle->debug_print("w25qxx: enable reset failed.\n");                     /* enable reset failed */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4842      	ldr	r0, [pc, #264]	; (800077c <w25qxx_init+0x260>)
 8000672:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 800067a:	2307      	movs	r3, #7
 800067c:	e366      	b.n	8000d4c <w25qxx_init+0x830>
            }
            res = a_w25qxx_qspi_write_read(handle,
 800067e:	2300      	movs	r3, #0
 8000680:	930a      	str	r3, [sp, #40]	; 0x28
 8000682:	2300      	movs	r3, #0
 8000684:	9309      	str	r3, [sp, #36]	; 0x24
 8000686:	2300      	movs	r3, #0
 8000688:	9308      	str	r3, [sp, #32]
 800068a:	2300      	movs	r3, #0
 800068c:	9307      	str	r3, [sp, #28]
 800068e:	2300      	movs	r3, #0
 8000690:	9306      	str	r3, [sp, #24]
 8000692:	2300      	movs	r3, #0
 8000694:	9305      	str	r3, [sp, #20]
 8000696:	2300      	movs	r3, #0
 8000698:	9304      	str	r3, [sp, #16]
 800069a:	2300      	movs	r3, #0
 800069c:	9303      	str	r3, [sp, #12]
 800069e:	2300      	movs	r3, #0
 80006a0:	9302      	str	r3, [sp, #8]
 80006a2:	2300      	movs	r3, #0
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2300      	movs	r3, #0
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2300      	movs	r3, #0
 80006ac:	2201      	movs	r2, #1
 80006ae:	2199      	movs	r1, #153	; 0x99
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff fe11 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80006b6:	4603      	mov	r3, r0
 80006b8:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_RESET_DEVICE, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d008      	beq.n	80006d2 <w25qxx_init+0x1b6>
            {
                handle->debug_print("w25qxx: reset device failed.\n");                     /* reset device failed */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	482e      	ldr	r0, [pc, #184]	; (8000780 <w25qxx_init+0x264>)
 80006c6:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 80006ce:	2307      	movs	r3, #7
 80006d0:	e33c      	b.n	8000d4c <w25qxx_init+0x830>
            }
            handle->delay_ms(10);                                                          /* delay 10 ms */
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	200a      	movs	r0, #10
 80006d8:	4798      	blx	r3
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_MANUFACTURER, 1,
 80006da:	2301      	movs	r3, #1
 80006dc:	930a      	str	r3, [sp, #40]	; 0x28
 80006de:	2302      	movs	r3, #2
 80006e0:	9309      	str	r3, [sp, #36]	; 0x24
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	9308      	str	r3, [sp, #32]
 80006e8:	2300      	movs	r3, #0
 80006ea:	9307      	str	r3, [sp, #28]
 80006ec:	2300      	movs	r3, #0
 80006ee:	9306      	str	r3, [sp, #24]
 80006f0:	2300      	movs	r3, #0
 80006f2:	9305      	str	r3, [sp, #20]
 80006f4:	2300      	movs	r3, #0
 80006f6:	9304      	str	r3, [sp, #16]
 80006f8:	2300      	movs	r3, #0
 80006fa:	9303      	str	r3, [sp, #12]
 80006fc:	2300      	movs	r3, #0
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	2303      	movs	r3, #3
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2301      	movs	r3, #1
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	2201      	movs	r2, #1
 800070c:	2190      	movs	r1, #144	; 0x90
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff fde2 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000714:	4603      	mov	r3, r0
 8000716:	75fb      	strb	r3, [r7, #23]
                                           0x00000000, 1, 3,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                          (uint8_t *)out, 2, 1);                           /* qspi write read */
            if (res != 0)                                                                  /* check result */
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d008      	beq.n	8000730 <w25qxx_init+0x214>
            {
                handle->debug_print("w25qxx: get manufacturer device id failed.\n");       /* get manufacturer device id failed */
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <w25qxx_init+0x268>)
 8000724:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 800072c:	2301      	movs	r3, #1
 800072e:	e30d      	b.n	8000d4c <w25qxx_init+0x830>
            }
            id = (uint16_t)out[0] << 8 | out[1];                                           /* set id */
 8000730:	7b3b      	ldrb	r3, [r7, #12]
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	b21a      	sxth	r2, r3
 8000736:	7b7b      	ldrb	r3, [r7, #13]
 8000738:	b21b      	sxth	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b21b      	sxth	r3, r3
 800073e:	b29b      	uxth	r3, r3
 8000740:	817b      	strh	r3, [r7, #10]
            if (id != handle->type)                                                        /* check id */
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	8b5a      	ldrh	r2, [r3, #26]
 8000746:	897b      	ldrh	r3, [r7, #10]
 8000748:	429a      	cmp	r2, r3
 800074a:	d01f      	beq.n	800078c <w25qxx_init+0x270>
            {
                handle->debug_print("w25qxx: id is invalid.\n");                           /* id is invalid */
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <w25qxx_init+0x26c>)
 8000752:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	4798      	blx	r3
                
                return 6;                                                                  /* return error */
 800075a:	2306      	movs	r3, #6
 800075c:	e2f6      	b.n	8000d4c <w25qxx_init+0x830>
 800075e:	bf00      	nop
 8000760:	08008568 	.word	0x08008568
 8000764:	08008588 	.word	0x08008588
 8000768:	080085ac 	.word	0x080085ac
 800076c:	080085d4 	.word	0x080085d4
 8000770:	080085f0 	.word	0x080085f0
 8000774:	0800860c 	.word	0x0800860c
 8000778:	08007df8 	.word	0x08007df8
 800077c:	08008050 	.word	0x08008050
 8000780:	08008070 	.word	0x08008070
 8000784:	08007e1c 	.word	0x08007e1c
 8000788:	08008628 	.word	0x08008628
            }
            if (handle->type >= W25Q256)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	8b5b      	ldrh	r3, [r3, #26]
 8000790:	f64e 7217 	movw	r2, #61207	; 0xef17
 8000794:	4293      	cmp	r3, r2
 8000796:	f240 82d2 	bls.w	8000d3e <w25qxx_init+0x822>
            {
                res = a_w25qxx_qspi_write_read(handle, 0xE9, 1,
 800079a:	2300      	movs	r3, #0
 800079c:	930a      	str	r3, [sp, #40]	; 0x28
 800079e:	2300      	movs	r3, #0
 80007a0:	9309      	str	r3, [sp, #36]	; 0x24
 80007a2:	2300      	movs	r3, #0
 80007a4:	9308      	str	r3, [sp, #32]
 80007a6:	2300      	movs	r3, #0
 80007a8:	9307      	str	r3, [sp, #28]
 80007aa:	2300      	movs	r3, #0
 80007ac:	9306      	str	r3, [sp, #24]
 80007ae:	2300      	movs	r3, #0
 80007b0:	9305      	str	r3, [sp, #20]
 80007b2:	2300      	movs	r3, #0
 80007b4:	9304      	str	r3, [sp, #16]
 80007b6:	2300      	movs	r3, #0
 80007b8:	9303      	str	r3, [sp, #12]
 80007ba:	2300      	movs	r3, #0
 80007bc:	9302      	str	r3, [sp, #8]
 80007be:	2300      	movs	r3, #0
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	2300      	movs	r3, #0
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2300      	movs	r3, #0
 80007c8:	2201      	movs	r2, #1
 80007ca:	21e9      	movs	r1, #233	; 0xe9
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fd83 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80007d2:	4603      	mov	r3, r0
 80007d4:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0, 0,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0x00,
                                               NULL, 0, 0);                                /* qspi write read */
                if (res != 0)                                                              /* check result */
 80007d6:	7dfb      	ldrb	r3, [r7, #23]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f000 82b0 	beq.w	8000d3e <w25qxx_init+0x822>
                {
                    handle->debug_print("w25qxx: enter 3 byte mode failed.\n");            /* enter 3 byte mode failed */
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	48a1      	ldr	r0, [pc, #644]	; (8000a68 <w25qxx_init+0x54c>)
 80007e4:	4798      	blx	r3
                    (void)handle->spi_qspi_deinit();                                       /** deinit */
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	4798      	blx	r3
                    
                    return 1;                                                              /* return error */
 80007ec:	2301      	movs	r3, #1
 80007ee:	e2ad      	b.n	8000d4c <w25qxx_init+0x830>
                }
            }
        }
        else                                                                               /* single spi */
        {
            buf[0] = W25QXX_COMMAND_RELEASE_POWER_DOWN;                                    /* release power down command */
 80007f0:	23ab      	movs	r3, #171	; 0xab
 80007f2:	743b      	strb	r3, [r7, #16]
            buf[1] = 0xFF;                                                                 /* dummy */
 80007f4:	23ff      	movs	r3, #255	; 0xff
 80007f6:	747b      	strb	r3, [r7, #17]
            buf[2] = 0xFF;                                                                 /* dummy */
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	74bb      	strb	r3, [r7, #18]
            buf[3] = 0xFF;                                                                 /* dummy */
 80007fc:	23ff      	movs	r3, #255	; 0xff
 80007fe:	74fb      	strb	r3, [r7, #19]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 4,
 8000800:	f107 030a 	add.w	r3, r7, #10
 8000804:	f107 0110 	add.w	r1, r7, #16
 8000808:	2201      	movs	r2, #1
 800080a:	9200      	str	r2, [sp, #0]
 800080c:	2204      	movs	r2, #4
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fd36 	bl	8000280 <a_w25qxx_spi_write_read>
 8000814:	4603      	mov	r3, r0
 8000816:	75fb      	strb	r3, [r7, #23]
                                         (uint8_t *)&id, 1);                               /* spi write read */
            if (res != 0)                                                                  /* check result */
 8000818:	7dfb      	ldrb	r3, [r7, #23]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d008      	beq.n	8000830 <w25qxx_init+0x314>
            {
                handle->debug_print("w25qxx: release power down failed.\n");               /* release power down failed */
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	4892      	ldr	r0, [pc, #584]	; (8000a6c <w25qxx_init+0x550>)
 8000824:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 800082c:	2301      	movs	r3, #1
 800082e:	e28d      	b.n	8000d4c <w25qxx_init+0x830>
            }
            buf[0] = W25QXX_COMMAND_ENABLE_RESET;                                          /* enable reset command */
 8000830:	2366      	movs	r3, #102	; 0x66
 8000832:	743b      	strb	r3, [r7, #16]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);             /* spi write read */
 8000834:	f107 0110 	add.w	r1, r7, #16
 8000838:	2300      	movs	r3, #0
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2300      	movs	r3, #0
 800083e:	2201      	movs	r2, #1
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fd1d 	bl	8000280 <a_w25qxx_spi_write_read>
 8000846:	4603      	mov	r3, r0
 8000848:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                  /* check result */
 800084a:	7dfb      	ldrb	r3, [r7, #23]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d008      	beq.n	8000862 <w25qxx_init+0x346>
            {
                handle->debug_print("w25qxx: enable reset failed.\n");                     /* enable reset failed */
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4886      	ldr	r0, [pc, #536]	; (8000a70 <w25qxx_init+0x554>)
 8000856:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 800085e:	2307      	movs	r3, #7
 8000860:	e274      	b.n	8000d4c <w25qxx_init+0x830>
            }
            buf[0] = W25QXX_COMMAND_RESET_DEVICE;                                          /* reset device command */
 8000862:	2399      	movs	r3, #153	; 0x99
 8000864:	743b      	strb	r3, [r7, #16]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);             /* spi write read */
 8000866:	f107 0110 	add.w	r1, r7, #16
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2300      	movs	r3, #0
 8000870:	2201      	movs	r2, #1
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff fd04 	bl	8000280 <a_w25qxx_spi_write_read>
 8000878:	4603      	mov	r3, r0
 800087a:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                  /* check result */
 800087c:	7dfb      	ldrb	r3, [r7, #23]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d008      	beq.n	8000894 <w25qxx_init+0x378>
            {
                handle->debug_print("w25qxx: reset device failed.\n");                     /* reset device failed */
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	487b      	ldr	r0, [pc, #492]	; (8000a74 <w25qxx_init+0x558>)
 8000888:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 8000890:	2307      	movs	r3, #7
 8000892:	e25b      	b.n	8000d4c <w25qxx_init+0x830>
            }
            handle->delay_ms(10);                                                          /* delay 10 ms */
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	200a      	movs	r0, #10
 800089a:	4798      	blx	r3
            buf[0] = W25QXX_COMMAND_READ_MANUFACTURER;                                     /* read manufacturer command */
 800089c:	2390      	movs	r3, #144	; 0x90
 800089e:	743b      	strb	r3, [r7, #16]
            buf[1] = 0x00;                                                                 /* dummy */
 80008a0:	2300      	movs	r3, #0
 80008a2:	747b      	strb	r3, [r7, #17]
            buf[2] = 0x00;                                                                 /* dummy */
 80008a4:	2300      	movs	r3, #0
 80008a6:	74bb      	strb	r3, [r7, #18]
            buf[3] = 0x00;                                                                 /* dummy */
 80008a8:	2300      	movs	r3, #0
 80008aa:	74fb      	strb	r3, [r7, #19]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 4,
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	f107 0110 	add.w	r1, r7, #16
 80008b4:	2202      	movs	r2, #2
 80008b6:	9200      	str	r2, [sp, #0]
 80008b8:	2204      	movs	r2, #4
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fce0 	bl	8000280 <a_w25qxx_spi_write_read>
 80008c0:	4603      	mov	r3, r0
 80008c2:	75fb      	strb	r3, [r7, #23]
                                         (uint8_t *)out, 2);                               /* spi write read */
            if (res != 0)                                                                  /* check result */
 80008c4:	7dfb      	ldrb	r3, [r7, #23]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d008      	beq.n	80008dc <w25qxx_init+0x3c0>
            {
                handle->debug_print("w25qxx: get manufacturer device id failed.\n");       /* get manufacturer device id failed */
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	486a      	ldr	r0, [pc, #424]	; (8000a78 <w25qxx_init+0x55c>)
 80008d0:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	4798      	blx	r3
                
                return 4;                                                                  /* return error */
 80008d8:	2304      	movs	r3, #4
 80008da:	e237      	b.n	8000d4c <w25qxx_init+0x830>
            }
            id = (uint16_t)out[0] << 8 | out[1];                                           /* set id */
 80008dc:	7b3b      	ldrb	r3, [r7, #12]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b21a      	sxth	r2, r3
 80008e2:	7b7b      	ldrb	r3, [r7, #13]
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b21b      	sxth	r3, r3
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	817b      	strh	r3, [r7, #10]
            if (id != handle->type)                                                        /* check id */
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	8b5a      	ldrh	r2, [r3, #26]
 80008f2:	897b      	ldrh	r3, [r7, #10]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d008      	beq.n	800090a <w25qxx_init+0x3ee>
            {
                handle->debug_print("w25qxx: id is invalid.\n");                           /* id is invalid */
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	485f      	ldr	r0, [pc, #380]	; (8000a7c <w25qxx_init+0x560>)
 80008fe:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4798      	blx	r3
                
                return 6;                                                                  /* return error */
 8000906:	2306      	movs	r3, #6
 8000908:	e220      	b.n	8000d4c <w25qxx_init+0x830>
            }
            if (handle->type >= W25Q256)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	8b5b      	ldrh	r3, [r3, #26]
 800090e:	f64e 7217 	movw	r2, #61207	; 0xef17
 8000912:	4293      	cmp	r3, r2
 8000914:	f240 8213 	bls.w	8000d3e <w25qxx_init+0x822>
            {
                buf[0] = 0xE9;                                                             /* 3 byte mode */
 8000918:	23e9      	movs	r3, #233	; 0xe9
 800091a:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);         /* spi write read */
 800091c:	f107 0110 	add.w	r1, r7, #16
 8000920:	2300      	movs	r3, #0
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2300      	movs	r3, #0
 8000926:	2201      	movs	r2, #1
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fca9 	bl	8000280 <a_w25qxx_spi_write_read>
 800092e:	4603      	mov	r3, r0
 8000930:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                              /* check result */
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 8202 	beq.w	8000d3e <w25qxx_init+0x822>
                {
                    handle->debug_print("w25qxx: set address mode failed.\n");             /* set address mode failed */
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4850      	ldr	r0, [pc, #320]	; (8000a80 <w25qxx_init+0x564>)
 8000940:	4798      	blx	r3
                    (void)handle->spi_qspi_deinit();                                       /** deinit */
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	4798      	blx	r3
                    
                    return 8;                                                              /* return error */
 8000948:	2308      	movs	r3, #8
 800094a:	e1ff      	b.n	8000d4c <w25qxx_init+0x830>
            }
        }
    }
    else
    {
        res = handle->spi_qspi_init();                                                     /* qspi init */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4798      	blx	r3
 8000952:	4603      	mov	r3, r0
 8000954:	75fb      	strb	r3, [r7, #23]
        if (res != 0)                                                                      /* check result */
 8000956:	7dfb      	ldrb	r3, [r7, #23]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d005      	beq.n	8000968 <w25qxx_init+0x44c>
        {
            handle->debug_print("w25qxx: qspi init failed.\n");                            /* qspi init failed */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4848      	ldr	r0, [pc, #288]	; (8000a84 <w25qxx_init+0x568>)
 8000962:	4798      	blx	r3
           
            return 1;                                                                      /* return error */
 8000964:	2301      	movs	r3, #1
 8000966:	e1f1      	b.n	8000d4c <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle,
 8000968:	2301      	movs	r3, #1
 800096a:	930a      	str	r3, [sp, #40]	; 0x28
 800096c:	2301      	movs	r3, #1
 800096e:	9309      	str	r3, [sp, #36]	; 0x24
 8000970:	f107 030a 	add.w	r3, r7, #10
 8000974:	9308      	str	r3, [sp, #32]
 8000976:	2300      	movs	r3, #0
 8000978:	9307      	str	r3, [sp, #28]
 800097a:	2300      	movs	r3, #0
 800097c:	9306      	str	r3, [sp, #24]
 800097e:	2318      	movs	r3, #24
 8000980:	9305      	str	r3, [sp, #20]
 8000982:	2300      	movs	r3, #0
 8000984:	9304      	str	r3, [sp, #16]
 8000986:	2300      	movs	r3, #0
 8000988:	9303      	str	r3, [sp, #12]
 800098a:	2300      	movs	r3, #0
 800098c:	9302      	str	r3, [sp, #8]
 800098e:	2300      	movs	r3, #0
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	2300      	movs	r3, #0
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	2201      	movs	r2, #1
 800099a:	21ab      	movs	r1, #171	; 0xab
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff fc9b 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80009a2:	4603      	mov	r3, r0
 80009a4:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_RELEASE_POWER_DOWN, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       3 * 8, NULL, 0x00,
                                      (uint8_t *)&id, 1, 1);                               /* spi write read */
        if (res != 0)                                                                      /* check result */
 80009a6:	7dfb      	ldrb	r3, [r7, #23]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d008      	beq.n	80009be <w25qxx_init+0x4a2>
        {
            handle->debug_print("w25qxx: release power down failed.\n");                   /* release power down failed */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	482e      	ldr	r0, [pc, #184]	; (8000a6c <w25qxx_init+0x550>)
 80009b2:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	4798      	blx	r3
            
            return 1;                                                                      /* return error */
 80009ba:	2301      	movs	r3, #1
 80009bc:	e1c6      	b.n	8000d4c <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle,
 80009be:	2300      	movs	r3, #0
 80009c0:	930a      	str	r3, [sp, #40]	; 0x28
 80009c2:	2300      	movs	r3, #0
 80009c4:	9309      	str	r3, [sp, #36]	; 0x24
 80009c6:	2300      	movs	r3, #0
 80009c8:	9308      	str	r3, [sp, #32]
 80009ca:	2300      	movs	r3, #0
 80009cc:	9307      	str	r3, [sp, #28]
 80009ce:	2300      	movs	r3, #0
 80009d0:	9306      	str	r3, [sp, #24]
 80009d2:	2300      	movs	r3, #0
 80009d4:	9305      	str	r3, [sp, #20]
 80009d6:	2300      	movs	r3, #0
 80009d8:	9304      	str	r3, [sp, #16]
 80009da:	2300      	movs	r3, #0
 80009dc:	9303      	str	r3, [sp, #12]
 80009de:	2300      	movs	r3, #0
 80009e0:	9302      	str	r3, [sp, #8]
 80009e2:	2300      	movs	r3, #0
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	2300      	movs	r3, #0
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2300      	movs	r3, #0
 80009ec:	2201      	movs	r2, #1
 80009ee:	2166      	movs	r1, #102	; 0x66
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fc71 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80009f6:	4603      	mov	r3, r0
 80009f8:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_ENABLE_RESET, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                  /* spi write read */
        if (res != 0)                                                                      /* check result */
 80009fa:	7dfb      	ldrb	r3, [r7, #23]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d008      	beq.n	8000a12 <w25qxx_init+0x4f6>
        {
            handle->debug_print("w25qxx: enable reset failed.\n");                         /* enable reset failed */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	481a      	ldr	r0, [pc, #104]	; (8000a70 <w25qxx_init+0x554>)
 8000a06:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	4798      	blx	r3
            
            return 7;                                                                      /* return error */
 8000a0e:	2307      	movs	r3, #7
 8000a10:	e19c      	b.n	8000d4c <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle,
 8000a12:	2300      	movs	r3, #0
 8000a14:	930a      	str	r3, [sp, #40]	; 0x28
 8000a16:	2300      	movs	r3, #0
 8000a18:	9309      	str	r3, [sp, #36]	; 0x24
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	9308      	str	r3, [sp, #32]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	9307      	str	r3, [sp, #28]
 8000a22:	2300      	movs	r3, #0
 8000a24:	9306      	str	r3, [sp, #24]
 8000a26:	2300      	movs	r3, #0
 8000a28:	9305      	str	r3, [sp, #20]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9304      	str	r3, [sp, #16]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	9303      	str	r3, [sp, #12]
 8000a32:	2300      	movs	r3, #0
 8000a34:	9302      	str	r3, [sp, #8]
 8000a36:	2300      	movs	r3, #0
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2201      	movs	r2, #1
 8000a42:	2199      	movs	r1, #153	; 0x99
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fc47 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_RESET_DEVICE, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                  /* spi write read */
        if (res != 0)                                                                      /* check result */
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d019      	beq.n	8000a88 <w25qxx_init+0x56c>
        {
            handle->debug_print("w25qxx: reset device failed.\n");                         /* reset device failed */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <w25qxx_init+0x558>)
 8000a5a:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4798      	blx	r3
            
            return 7;                                                                      /* return error */
 8000a62:	2307      	movs	r3, #7
 8000a64:	e172      	b.n	8000d4c <w25qxx_init+0x830>
 8000a66:	bf00      	nop
 8000a68:	08008640 	.word	0x08008640
 8000a6c:	08007df8 	.word	0x08007df8
 8000a70:	08008050 	.word	0x08008050
 8000a74:	08008070 	.word	0x08008070
 8000a78:	08007e1c 	.word	0x08007e1c
 8000a7c:	08008628 	.word	0x08008628
 8000a80:	08007b84 	.word	0x08007b84
 8000a84:	08008664 	.word	0x08008664
        }
        handle->delay_ms(10);                                                              /* delay 10 ms */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	200a      	movs	r0, #10
 8000a8e:	4798      	blx	r3
        res = a_w25qxx_qspi_write_read(handle,
 8000a90:	2301      	movs	r3, #1
 8000a92:	930a      	str	r3, [sp, #40]	; 0x28
 8000a94:	2301      	movs	r3, #1
 8000a96:	9309      	str	r3, [sp, #36]	; 0x24
 8000a98:	f107 0316 	add.w	r3, r7, #22
 8000a9c:	9308      	str	r3, [sp, #32]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9307      	str	r3, [sp, #28]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9306      	str	r3, [sp, #24]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9305      	str	r3, [sp, #20]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	9304      	str	r3, [sp, #16]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9303      	str	r3, [sp, #12]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9302      	str	r3, [sp, #8]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	2300      	movs	r3, #0
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2135      	movs	r1, #53	; 0x35
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fc07 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000aca:	4603      	mov	r3, r0
 8000acc:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_READ_STATUS_REG2, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                      (uint8_t *)&status, 1, 1);                           /* spi write read */
        if (res != 0)                                                                      /* check result */
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d008      	beq.n	8000ae6 <w25qxx_init+0x5ca>
        {
            handle->debug_print("w25qxx: read status 2 failed.\n");                        /* read status 2 failed */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	489e      	ldr	r0, [pc, #632]	; (8000d54 <w25qxx_init+0x838>)
 8000ada:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4798      	blx	r3
            
            return 5;                                                                      /* return error */
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	e132      	b.n	8000d4c <w25qxx_init+0x830>
        }
        if ((status & 0x02) == 0)                                                          /* check status */
 8000ae6:	7dbb      	ldrb	r3, [r7, #22]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d153      	bne.n	8000b98 <w25qxx_init+0x67c>
        {
            res = a_w25qxx_qspi_write_read(handle,
 8000af0:	2300      	movs	r3, #0
 8000af2:	930a      	str	r3, [sp, #40]	; 0x28
 8000af4:	2300      	movs	r3, #0
 8000af6:	9309      	str	r3, [sp, #36]	; 0x24
 8000af8:	2300      	movs	r3, #0
 8000afa:	9308      	str	r3, [sp, #32]
 8000afc:	2300      	movs	r3, #0
 8000afe:	9307      	str	r3, [sp, #28]
 8000b00:	2300      	movs	r3, #0
 8000b02:	9306      	str	r3, [sp, #24]
 8000b04:	2300      	movs	r3, #0
 8000b06:	9305      	str	r3, [sp, #20]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9304      	str	r3, [sp, #16]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9303      	str	r3, [sp, #12]
 8000b10:	2300      	movs	r3, #0
 8000b12:	9302      	str	r3, [sp, #8]
 8000b14:	2300      	movs	r3, #0
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2150      	movs	r1, #80	; 0x50
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fbd8 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_VOLATILE_SR_WRITE_ENABLE, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 8000b2c:	7dfb      	ldrb	r3, [r7, #23]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d008      	beq.n	8000b44 <w25qxx_init+0x628>
            {
                handle->debug_print("w25qxx: set sr write enable failed.\n");              /* set sr write enable failed */
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4888      	ldr	r0, [pc, #544]	; (8000d58 <w25qxx_init+0x83c>)
 8000b38:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	4798      	blx	r3
                
                return 5;                                                                  /* return error */
 8000b40:	2305      	movs	r3, #5
 8000b42:	e103      	b.n	8000d4c <w25qxx_init+0x830>
            }
            res = a_w25qxx_qspi_write_read(handle,
 8000b44:	2300      	movs	r3, #0
 8000b46:	930a      	str	r3, [sp, #40]	; 0x28
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9308      	str	r3, [sp, #32]
 8000b50:	2300      	movs	r3, #0
 8000b52:	9307      	str	r3, [sp, #28]
 8000b54:	2300      	movs	r3, #0
 8000b56:	9306      	str	r3, [sp, #24]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9305      	str	r3, [sp, #20]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9304      	str	r3, [sp, #16]
 8000b60:	2300      	movs	r3, #0
 8000b62:	9303      	str	r3, [sp, #12]
 8000b64:	2300      	movs	r3, #0
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2300      	movs	r3, #0
 8000b72:	2201      	movs	r2, #1
 8000b74:	2131      	movs	r1, #49	; 0x31
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff fbae 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_WRITE_STATUS_REG2, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d008      	beq.n	8000b98 <w25qxx_init+0x67c>
            {
                handle->debug_print("w25qxx: write status 2 failed.\n");                   /* write status 2 failed */
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4874      	ldr	r0, [pc, #464]	; (8000d5c <w25qxx_init+0x840>)
 8000b8c:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	4798      	blx	r3
                
                return 5;                                                                  /* return error */
 8000b94:	2305      	movs	r3, #5
 8000b96:	e0d9      	b.n	8000d4c <w25qxx_init+0x830>
            }
        }
        res = a_w25qxx_qspi_write_read(handle,
 8000b98:	2300      	movs	r3, #0
 8000b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9308      	str	r3, [sp, #32]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	9307      	str	r3, [sp, #28]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	9306      	str	r3, [sp, #24]
 8000bac:	2300      	movs	r3, #0
 8000bae:	9305      	str	r3, [sp, #20]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	9304      	str	r3, [sp, #16]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	9303      	str	r3, [sp, #12]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2138      	movs	r1, #56	; 0x38
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff fb84 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_ENTER_QSPI_MODE, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                  /* spi write read */
        if (res != 0)                                                                      /* check result */
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <w25qxx_init+0x6d0>
        {
            handle->debug_print("w25qxx: enter qspi failed.\n");                           /* enter qspi failed */
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4860      	ldr	r0, [pc, #384]	; (8000d60 <w25qxx_init+0x844>)
 8000be0:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4798      	blx	r3
            
            return 5;                                                                      /* return error */
 8000be8:	2305      	movs	r3, #5
 8000bea:	e0af      	b.n	8000d4c <w25qxx_init+0x830>
        }
        handle->delay_ms(10);                                                              /* delay 10 ms */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	4798      	blx	r3
        buf[0] = 3 << 4;                                                                   /* set 8 read dummy */
 8000bf4:	2330      	movs	r3, #48	; 0x30
 8000bf6:	743b      	strb	r3, [r7, #16]
        handle->param = buf[0];                                                            /* set param */
 8000bf8:	7c3a      	ldrb	r2, [r7, #16]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	775a      	strb	r2, [r3, #29]
        handle->dummy = 8;                                                                 /* set dummy */
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2208      	movs	r2, #8
 8000c02:	779a      	strb	r2, [r3, #30]
        res = a_w25qxx_qspi_write_read(handle, 0xC0, 4,
 8000c04:	2304      	movs	r3, #4
 8000c06:	930a      	str	r3, [sp, #40]	; 0x28
 8000c08:	2300      	movs	r3, #0
 8000c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9308      	str	r3, [sp, #32]
 8000c10:	2301      	movs	r3, #1
 8000c12:	9307      	str	r3, [sp, #28]
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	9306      	str	r3, [sp, #24]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	9305      	str	r3, [sp, #20]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9304      	str	r3, [sp, #16]
 8000c22:	2300      	movs	r3, #0
 8000c24:	9303      	str	r3, [sp, #12]
 8000c26:	2300      	movs	r3, #0
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	2300      	movs	r3, #0
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2300      	movs	r3, #0
 8000c34:	2204      	movs	r2, #4
 8000c36:	21c0      	movs	r1, #192	; 0xc0
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff fb4d 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	75fb      	strb	r3, [r7, #23]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0, (uint8_t *)buf, 1,
                                       NULL, 0x00, 4);                                     /* qspi write read */
        if (res != 0)                                                                      /* check result */
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d008      	beq.n	8000c5a <w25qxx_init+0x73e>
        {
            handle->debug_print("w25qxx: set read parameters failed.\n");                  /* set read parameters failed */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	4845      	ldr	r0, [pc, #276]	; (8000d64 <w25qxx_init+0x848>)
 8000c4e:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4798      	blx	r3
            
            return 5;                                                                      /* return error */
 8000c56:	2305      	movs	r3, #5
 8000c58:	e078      	b.n	8000d4c <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_MANUFACTURER, 4,
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8000c5e:	2302      	movs	r3, #2
 8000c60:	9309      	str	r3, [sp, #36]	; 0x24
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	9308      	str	r3, [sp, #32]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9307      	str	r3, [sp, #28]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9306      	str	r3, [sp, #24]
 8000c70:	2300      	movs	r3, #0
 8000c72:	9305      	str	r3, [sp, #20]
 8000c74:	2300      	movs	r3, #0
 8000c76:	9304      	str	r3, [sp, #16]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	9303      	str	r3, [sp, #12]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	9302      	str	r3, [sp, #8]
 8000c80:	2303      	movs	r3, #3
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	2304      	movs	r3, #4
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	2190      	movs	r1, #144	; 0x90
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fb22 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000c94:	4603      	mov	r3, r0
 8000c96:	75fb      	strb	r3, [r7, #23]
                                       0x00000000, 4, 3,
                                       0x00000000, 0x00, 0x00,
                                       0, NULL, 0x00,
                                      (uint8_t *)out, 2, 4);                               /* qspi write read */
        if (res != 0)                                                                      /* check result */
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d008      	beq.n	8000cb0 <w25qxx_init+0x794>
        {
            handle->debug_print("w25qxx: get manufacturer device id failed.\n");           /* get manufacturer device id failed */
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4831      	ldr	r0, [pc, #196]	; (8000d68 <w25qxx_init+0x84c>)
 8000ca4:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4798      	blx	r3
            
            return 1;                                                                      /* return error */
 8000cac:	2301      	movs	r3, #1
 8000cae:	e04d      	b.n	8000d4c <w25qxx_init+0x830>
        }
        id = (uint16_t)out[0] << 8 | out[1];                                               /* set id */
 8000cb0:	7b3b      	ldrb	r3, [r7, #12]
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	b21a      	sxth	r2, r3
 8000cb6:	7b7b      	ldrb	r3, [r7, #13]
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	817b      	strh	r3, [r7, #10]
        if (id != handle->type)                                                            /* check id */
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	8b5a      	ldrh	r2, [r3, #26]
 8000cc6:	897b      	ldrh	r3, [r7, #10]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d008      	beq.n	8000cde <w25qxx_init+0x7c2>
        {
            handle->debug_print("w25qxx: id is invalid.\n");                               /* id is invalid */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	4826      	ldr	r0, [pc, #152]	; (8000d6c <w25qxx_init+0x850>)
 8000cd2:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4798      	blx	r3
            
            return 6;                                                                      /* return error */
 8000cda:	2306      	movs	r3, #6
 8000cdc:	e036      	b.n	8000d4c <w25qxx_init+0x830>
        }
        if (handle->type >= W25Q256)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	8b5b      	ldrh	r3, [r3, #26]
 8000ce2:	f64e 7217 	movw	r2, #61207	; 0xef17
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d929      	bls.n	8000d3e <w25qxx_init+0x822>
        {
            res = a_w25qxx_qspi_write_read(handle, 0xE9, 4,
 8000cea:	2300      	movs	r3, #0
 8000cec:	930a      	str	r3, [sp, #40]	; 0x28
 8000cee:	2300      	movs	r3, #0
 8000cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	9308      	str	r3, [sp, #32]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9307      	str	r3, [sp, #28]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9306      	str	r3, [sp, #24]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9305      	str	r3, [sp, #20]
 8000d02:	2300      	movs	r3, #0
 8000d04:	9304      	str	r3, [sp, #16]
 8000d06:	2300      	movs	r3, #0
 8000d08:	9303      	str	r3, [sp, #12]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	2300      	movs	r3, #0
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2300      	movs	r3, #0
 8000d18:	2204      	movs	r2, #4
 8000d1a:	21e9      	movs	r1, #233	; 0xe9
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fadb 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000d22:	4603      	mov	r3, r0
 8000d24:	75fb      	strb	r3, [r7, #23]
                                           0x00000000, 0, 0,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0, 0);                                    /* qspi write read */
            if (res != 0)                                                                  /* check result */
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d008      	beq.n	8000d3e <w25qxx_init+0x822>
            {
                handle->debug_print("w25qxx: enter 3 byte mode failed.\n");                /* enter 3 byte mode failed */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	480f      	ldr	r0, [pc, #60]	; (8000d70 <w25qxx_init+0x854>)
 8000d32:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e006      	b.n	8000d4c <w25qxx_init+0x830>
            }
        }
    }
    handle->address_mode = W25QXX_ADDRESS_MODE_3_BYTE;                                     /* set address mode */
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	771a      	strb	r2, [r3, #28]
    handle->inited = 1;                                                                    /* initialize inited */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	761a      	strb	r2, [r3, #24]
    
    return 0;                                                                              /* success return 0 */
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	08008680 	.word	0x08008680
 8000d58:	080086a0 	.word	0x080086a0
 8000d5c:	080086c8 	.word	0x080086c8
 8000d60:	080086e8 	.word	0x080086e8
 8000d64:	08007fd0 	.word	0x08007fd0
 8000d68:	08007e1c 	.word	0x08007e1c
 8000d6c:	08008628 	.word	0x08008628
 8000d70:	08008640 	.word	0x08008640

08000d74 <w25qxx_deinit>:
 *            - 3 handle is not initialized
 *            - 4 power down failed
 * @note      none
 */
uint8_t w25qxx_deinit(w25qxx_handle_t *handle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b090      	sub	sp, #64	; 0x40
 8000d78:	af0c      	add	r7, sp, #48	; 0x30
 8000d7a:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t buf[1];
    
    if (handle == NULL)                                                            /* check handle */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <w25qxx_deinit+0x12>
    {
        return 2;                                                                  /* return error */
 8000d82:	2302      	movs	r3, #2
 8000d84:	e0ac      	b.n	8000ee0 <w25qxx_deinit+0x16c>
    }   
    if (handle->inited != 1)                                                       /* check handle initialization */
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7e1b      	ldrb	r3, [r3, #24]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d001      	beq.n	8000d92 <w25qxx_deinit+0x1e>
    {
        return 3;                                                                  /* return error */
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e0a6      	b.n	8000ee0 <w25qxx_deinit+0x16c>
    }

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                  /* spi interface */
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d140      	bne.n	8000e1e <w25qxx_deinit+0xaa>
    {
        if (handle->dual_quad_spi_enable != 0)                                     /* enable dual quad spi */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7fdb      	ldrb	r3, [r3, #31]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d026      	beq.n	8000df2 <w25qxx_deinit+0x7e>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_POWER_DOWN, 1,
 8000da4:	2300      	movs	r3, #0
 8000da6:	930a      	str	r3, [sp, #40]	; 0x28
 8000da8:	2300      	movs	r3, #0
 8000daa:	9309      	str	r3, [sp, #36]	; 0x24
 8000dac:	2300      	movs	r3, #0
 8000dae:	9308      	str	r3, [sp, #32]
 8000db0:	2300      	movs	r3, #0
 8000db2:	9307      	str	r3, [sp, #28]
 8000db4:	2300      	movs	r3, #0
 8000db6:	9306      	str	r3, [sp, #24]
 8000db8:	2300      	movs	r3, #0
 8000dba:	9305      	str	r3, [sp, #20]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9304      	str	r3, [sp, #16]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	9303      	str	r3, [sp, #12]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9302      	str	r3, [sp, #8]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	21b9      	movs	r1, #185	; 0xb9
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fa7e 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	73fb      	strb	r3, [r7, #15]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0x00, 0);                         /* spi write read */
            if (res != 0)                                                          /* check result */
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d06d      	beq.n	8000ec2 <w25qxx_deinit+0x14e>
            {
                handle->debug_print("w25qxx: power down failed.\n");               /* power down failed */
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	483f      	ldr	r0, [pc, #252]	; (8000ee8 <w25qxx_deinit+0x174>)
 8000dec:	4798      	blx	r3
               
                return 4;                                                          /* return error */
 8000dee:	2304      	movs	r3, #4
 8000df0:	e076      	b.n	8000ee0 <w25qxx_deinit+0x16c>
            }
        }
        else                                                                       /* single spi */
        {
            buf[0] = W25QXX_COMMAND_POWER_DOWN;                                    /* power down command */
 8000df2:	23b9      	movs	r3, #185	; 0xb9
 8000df4:	733b      	strb	r3, [r7, #12]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf,
 8000df6:	f107 010c 	add.w	r1, r7, #12
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	2201      	movs	r2, #1
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff fa3c 	bl	8000280 <a_w25qxx_spi_write_read>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]
                                          1, NULL, 0);                             /* spi write read */
            if (res != 0)                                                          /* check result */
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d057      	beq.n	8000ec2 <w25qxx_deinit+0x14e>
            {
                handle->debug_print("w25qxx: power down failed.\n");               /* power down failed */
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4834      	ldr	r0, [pc, #208]	; (8000ee8 <w25qxx_deinit+0x174>)
 8000e18:	4798      	blx	r3
               
                return 4;                                                          /* return error */
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	e060      	b.n	8000ee0 <w25qxx_deinit+0x16c>
            }
        }
    }
    else                                                                           /* qspi interface */
    {
        res = a_w25qxx_qspi_write_read(handle, 0xFF, 4,
 8000e1e:	2300      	movs	r3, #0
 8000e20:	930a      	str	r3, [sp, #40]	; 0x28
 8000e22:	2300      	movs	r3, #0
 8000e24:	9309      	str	r3, [sp, #36]	; 0x24
 8000e26:	2300      	movs	r3, #0
 8000e28:	9308      	str	r3, [sp, #32]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9307      	str	r3, [sp, #28]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9306      	str	r3, [sp, #24]
 8000e32:	2300      	movs	r3, #0
 8000e34:	9305      	str	r3, [sp, #20]
 8000e36:	2300      	movs	r3, #0
 8000e38:	9304      	str	r3, [sp, #16]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9303      	str	r3, [sp, #12]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	2300      	movs	r3, #0
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	21ff      	movs	r1, #255	; 0xff
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff fa41 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0, NULL, 0x00,
                                       NULL, 0x00, 0);                             /* spi write read */
        if (res != 0)                                                              /* check result */
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <w25qxx_deinit+0xf8>
        {
            handle->debug_print("w25qxx: exit qspi mode failed.\n");               /* exit qspi mode failed */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	4821      	ldr	r0, [pc, #132]	; (8000eec <w25qxx_deinit+0x178>)
 8000e66:	4798      	blx	r3
           
            return 1;                                                              /* return error */
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e039      	b.n	8000ee0 <w25qxx_deinit+0x16c>
        }
        handle->delay_ms(10);                                                      /* delay 10 ms */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	200a      	movs	r0, #10
 8000e72:	4798      	blx	r3
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_POWER_DOWN, 1,
 8000e74:	2300      	movs	r3, #0
 8000e76:	930a      	str	r3, [sp, #40]	; 0x28
 8000e78:	2300      	movs	r3, #0
 8000e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9308      	str	r3, [sp, #32]
 8000e80:	2300      	movs	r3, #0
 8000e82:	9307      	str	r3, [sp, #28]
 8000e84:	2300      	movs	r3, #0
 8000e86:	9306      	str	r3, [sp, #24]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9305      	str	r3, [sp, #20]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	9304      	str	r3, [sp, #16]
 8000e90:	2300      	movs	r3, #0
 8000e92:	9303      	str	r3, [sp, #12]
 8000e94:	2300      	movs	r3, #0
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	21b9      	movs	r1, #185	; 0xb9
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fa16 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000eac:	4603      	mov	r3, r0
 8000eae:	73fb      	strb	r3, [r7, #15]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0, NULL, 0x00,
                                       NULL, 0x00, 0);                             /* spi write read */
        if (res != 0)                                                              /* check result */
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <w25qxx_deinit+0x14e>
        {
            handle->debug_print("w25qxx: power down failed.\n");                   /* power down failed */
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <w25qxx_deinit+0x174>)
 8000ebc:	4798      	blx	r3
           
            return 4;                                                              /* return error */
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	e00e      	b.n	8000ee0 <w25qxx_deinit+0x16c>
        }
    }
    res = handle->spi_qspi_deinit();                                               /* qspi deinit */
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4798      	blx	r3
 8000ec8:	4603      	mov	r3, r0
 8000eca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d005      	beq.n	8000ede <w25qxx_deinit+0x16a>
    {
        handle->debug_print("w25qxx: spi or qspi deinit failed.\n");               /* spi or qspi deinit failed */
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <w25qxx_deinit+0x17c>)
 8000ed8:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <w25qxx_deinit+0x16c>
    }
    
    return 0;                                                                      /* success return 0 */
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	08007dbc 	.word	0x08007dbc
 8000eec:	08007dd8 	.word	0x08007dd8
 8000ef0:	08008704 	.word	0x08008704

08000ef4 <w25qxx_read>:
 *             - 3 handle is not initialized
 *             - 4 address mode is invalid
 * @note       none
 */
uint8_t w25qxx_read(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b092      	sub	sp, #72	; 0x48
 8000ef8:	af0c      	add	r7, sp, #48	; 0x30
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t buf[6];
    
    if (handle == NULL)                                                                                   /* check handle */
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <w25qxx_read+0x18>
    {
        return 2;                                                                                         /* return error */
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e22c      	b.n	8001366 <w25qxx_read+0x472>
    }   
    if (handle->inited != 1)                                                                              /* check handle initialization */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	7e1b      	ldrb	r3, [r3, #24]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d001      	beq.n	8000f18 <w25qxx_read+0x24>
    {
        return 3;                                                                                         /* return error */
 8000f14:	2303      	movs	r3, #3
 8000f16:	e226      	b.n	8001366 <w25qxx_read+0x472>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                         /* spi interface */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f040 8162 	bne.w	80011e8 <w25qxx_read+0x2f4>
    {
        if (handle->dual_quad_spi_enable != 0)                                                            /* enable dual quad spi */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	7fdb      	ldrb	r3, [r3, #31]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80be 	beq.w	80010aa <w25qxx_read+0x1b6>
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	7f1b      	ldrb	r3, [r3, #28]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f040 8081 	bne.w	800103a <w25qxx_read+0x146>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	8b5b      	ldrh	r3, [r3, #26]
 8000f3c:	f64e 7217 	movw	r2, #61207	; 0xef17
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d952      	bls.n	8000fea <w25qxx_read+0xf6>
                {
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 8000f44:	2300      	movs	r3, #0
 8000f46:	930a      	str	r3, [sp, #40]	; 0x28
 8000f48:	2300      	movs	r3, #0
 8000f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	9308      	str	r3, [sp, #32]
 8000f50:	2300      	movs	r3, #0
 8000f52:	9307      	str	r3, [sp, #28]
 8000f54:	2300      	movs	r3, #0
 8000f56:	9306      	str	r3, [sp, #24]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	9305      	str	r3, [sp, #20]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9304      	str	r3, [sp, #16]
 8000f60:	2300      	movs	r3, #0
 8000f62:	9303      	str	r3, [sp, #12]
 8000f64:	2300      	movs	r3, #0
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	2201      	movs	r2, #1
 8000f74:	2106      	movs	r1, #6
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f7ff f9ae 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                     /* qspi write read */
                    if (res != 0)                                                                         /* check result */
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d005      	beq.n	8000f92 <w25qxx_read+0x9e>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4893      	ldr	r0, [pc, #588]	; (80011d8 <w25qxx_read+0x2e4>)
 8000f8c:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e1e9      	b.n	8001366 <w25qxx_read+0x472>
                    }
                    buf[0] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	0e1b      	lsrs	r3, r3, #24
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9308      	str	r3, [sp, #32]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	9307      	str	r3, [sp, #28]
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	9306      	str	r3, [sp, #24]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9305      	str	r3, [sp, #20]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9304      	str	r3, [sp, #16]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	9303      	str	r3, [sp, #12]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	2201      	movs	r2, #1
 8000fcc:	21c5      	movs	r1, #197	; 0xc5
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff f982 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                        /* spi write read */
                    if (res != 0)                                                                         /* check result */
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <w25qxx_read+0xf6>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	487e      	ldr	r0, [pc, #504]	; (80011dc <w25qxx_read+0x2e8>)
 8000fe4:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e1bd      	b.n	8001366 <w25qxx_read+0x472>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 8000fea:	2301      	movs	r3, #1
 8000fec:	930a      	str	r3, [sp, #40]	; 0x28
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	9308      	str	r3, [sp, #32]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	9307      	str	r3, [sp, #28]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9306      	str	r3, [sp, #24]
 8000ffe:	2308      	movs	r3, #8
 8001000:	9305      	str	r3, [sp, #20]
 8001002:	2300      	movs	r3, #0
 8001004:	9304      	str	r3, [sp, #16]
 8001006:	2300      	movs	r3, #0
 8001008:	9303      	str	r3, [sp, #12]
 800100a:	2300      	movs	r3, #0
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2303      	movs	r3, #3
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	2301      	movs	r3, #1
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2201      	movs	r2, #1
 800101a:	210b      	movs	r1, #11
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f7ff f95b 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001022:	4603      	mov	r3, r0
 8001024:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,                                             /* spi write */
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 819b 	beq.w	8001364 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	486b      	ldr	r0, [pc, #428]	; (80011e0 <w25qxx_read+0x2ec>)
 8001034:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001036:	2301      	movs	r3, #1
 8001038:	e195      	b.n	8001366 <w25qxx_read+0x472>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	7f1b      	ldrb	r3, [r3, #28]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d12d      	bne.n	800109e <w25qxx_read+0x1aa>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	8b5b      	ldrh	r3, [r3, #26]
 8001046:	f64e 7217 	movw	r2, #61207	; 0xef17
 800104a:	4293      	cmp	r3, r2
 800104c:	d927      	bls.n	800109e <w25qxx_read+0x1aa>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 800104e:	2301      	movs	r3, #1
 8001050:	930a      	str	r3, [sp, #40]	; 0x28
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	9309      	str	r3, [sp, #36]	; 0x24
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	9308      	str	r3, [sp, #32]
 800105a:	2300      	movs	r3, #0
 800105c:	9307      	str	r3, [sp, #28]
 800105e:	2300      	movs	r3, #0
 8001060:	9306      	str	r3, [sp, #24]
 8001062:	2308      	movs	r3, #8
 8001064:	9305      	str	r3, [sp, #20]
 8001066:	2300      	movs	r3, #0
 8001068:	9304      	str	r3, [sp, #16]
 800106a:	2300      	movs	r3, #0
 800106c:	9303      	str	r3, [sp, #12]
 800106e:	2300      	movs	r3, #0
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	2304      	movs	r3, #4
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	2301      	movs	r3, #1
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	2201      	movs	r2, #1
 800107e:	210b      	movs	r1, #11
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f7ff f929 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001086:	4603      	mov	r3, r0
 8001088:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,                                             /* spi write */
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8169 	beq.w	8001364 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4852      	ldr	r0, [pc, #328]	; (80011e0 <w25qxx_read+0x2ec>)
 8001098:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 800109a:	2301      	movs	r3, #1
 800109c:	e163      	b.n	8001366 <w25qxx_read+0x472>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4850      	ldr	r0, [pc, #320]	; (80011e4 <w25qxx_read+0x2f0>)
 80010a4:	4798      	blx	r3
               
                return 4;                                                                                 /* return error */
 80010a6:	2304      	movs	r3, #4
 80010a8:	e15d      	b.n	8001366 <w25qxx_read+0x472>
            }
        }
        else                                                                                              /* single spi */
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	7f1b      	ldrb	r3, [r3, #28]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d159      	bne.n	8001166 <w25qxx_read+0x272>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8b5b      	ldrh	r3, [r3, #26]
 80010b6:	f64e 7217 	movw	r2, #61207	; 0xef17
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d92f      	bls.n	800111e <w25qxx_read+0x22a>
                {
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                 /* write enable command */
 80010be:	2306      	movs	r3, #6
 80010c0:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                    /* spi write read */
 80010c2:	f107 0110 	add.w	r1, r7, #16
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	2201      	movs	r2, #1
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff f8d6 	bl	8000280 <a_w25qxx_spi_write_read>
 80010d4:	4603      	mov	r3, r0
 80010d6:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <w25qxx_read+0x1f6>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	483d      	ldr	r0, [pc, #244]	; (80011d8 <w25qxx_read+0x2e4>)
 80010e4:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e13d      	b.n	8001366 <w25qxx_read+0x472>
                    }
                    buf[0] = 0xC5;                                                                        /* write extended addr register command */
 80010ea:	23c5      	movs	r3, #197	; 0xc5
 80010ec:	743b      	strb	r3, [r7, #16]
                    buf[1] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	0e1b      	lsrs	r3, r3, #24
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	747b      	strb	r3, [r7, #17]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                    /* spi write read */
 80010f6:	f107 0110 	add.w	r1, r7, #16
 80010fa:	2300      	movs	r3, #0
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	2202      	movs	r2, #2
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff f8bc 	bl	8000280 <a_w25qxx_spi_write_read>
 8001108:	4603      	mov	r3, r0
 800110a:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d005      	beq.n	800111e <w25qxx_read+0x22a>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	4831      	ldr	r0, [pc, #196]	; (80011dc <w25qxx_read+0x2e8>)
 8001118:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 800111a:	2301      	movs	r3, #1
 800111c:	e123      	b.n	8001366 <w25qxx_read+0x472>
                    }
                }
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 800111e:	230b      	movs	r3, #11
 8001120:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	0c1b      	lsrs	r3, r3, #16
 8001126:	b2db      	uxtb	r3, r3
 8001128:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b2db      	uxtb	r3, r3
 8001130:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	74fb      	strb	r3, [r7, #19]
                buf[4] = 0x00;                                                                            /* dummy */
 8001138:	2300      	movs	r3, #0
 800113a:	753b      	strb	r3, [r7, #20]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 5, (uint8_t *)data, (uint32_t)len); /* spi write read */
 800113c:	f107 0110 	add.w	r1, r7, #16
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2205      	movs	r2, #5
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff f899 	bl	8000280 <a_w25qxx_spi_write_read>
 800114e:	4603      	mov	r3, r0
 8001150:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 8105 	beq.w	8001364 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	4820      	ldr	r0, [pc, #128]	; (80011e0 <w25qxx_read+0x2ec>)
 8001160:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001162:	2301      	movs	r3, #1
 8001164:	e0ff      	b.n	8001366 <w25qxx_read+0x472>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	7f1b      	ldrb	r3, [r3, #28]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d12d      	bne.n	80011ca <w25qxx_read+0x2d6>
                    && (handle->type >= W25Q256))                                                         /* check address mode */
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8b5b      	ldrh	r3, [r3, #26]
 8001172:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001176:	4293      	cmp	r3, r2
 8001178:	d927      	bls.n	80011ca <w25qxx_read+0x2d6>
            {
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 800117a:	230b      	movs	r3, #11
 800117c:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	0e1b      	lsrs	r3, r3, #24
 8001182:	b2db      	uxtb	r3, r3
 8001184:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	0c1b      	lsrs	r3, r3, #16
 800118a:	b2db      	uxtb	r3, r3
 800118c:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	b2db      	uxtb	r3, r3
 8001194:	74fb      	strb	r3, [r7, #19]
                buf[4] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	753b      	strb	r3, [r7, #20]
                buf[5] = 0x00;                                                                            /* dummy */
 800119c:	2300      	movs	r3, #0
 800119e:	757b      	strb	r3, [r7, #21]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 6, (uint8_t *)data, (uint32_t)len); /* spi write read */
 80011a0:	f107 0110 	add.w	r1, r7, #16
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2206      	movs	r2, #6
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff f867 	bl	8000280 <a_w25qxx_spi_write_read>
 80011b2:	4603      	mov	r3, r0
 80011b4:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 80d3 	beq.w	8001364 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <w25qxx_read+0x2ec>)
 80011c4:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0cd      	b.n	8001366 <w25qxx_read+0x472>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <w25qxx_read+0x2f0>)
 80011d0:	4798      	blx	r3
               
                return 4;                                                                                 /* return error */
 80011d2:	2304      	movs	r3, #4
 80011d4:	e0c7      	b.n	8001366 <w25qxx_read+0x472>
 80011d6:	bf00      	nop
 80011d8:	08007ba8 	.word	0x08007ba8
 80011dc:	080081a4 	.word	0x080081a4
 80011e0:	08008228 	.word	0x08008228
 80011e4:	08007eb4 	.word	0x08007eb4
            }
        }
    }
    else                                                                                                  /* qspi interface */
    {
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                           /* 3 address mode */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	7f1b      	ldrb	r3, [r3, #28]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f040 8081 	bne.w	80012f4 <w25qxx_read+0x400>
        {
            if (handle->type >= W25Q256)                                                                  /* >128Mb */
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	8b5b      	ldrh	r3, [r3, #26]
 80011f6:	f64e 7217 	movw	r2, #61207	; 0xef17
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d952      	bls.n	80012a4 <w25qxx_read+0x3b0>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 80011fe:	2300      	movs	r3, #0
 8001200:	930a      	str	r3, [sp, #40]	; 0x28
 8001202:	2300      	movs	r3, #0
 8001204:	9309      	str	r3, [sp, #36]	; 0x24
 8001206:	2300      	movs	r3, #0
 8001208:	9308      	str	r3, [sp, #32]
 800120a:	2300      	movs	r3, #0
 800120c:	9307      	str	r3, [sp, #28]
 800120e:	2300      	movs	r3, #0
 8001210:	9306      	str	r3, [sp, #24]
 8001212:	2300      	movs	r3, #0
 8001214:	9305      	str	r3, [sp, #20]
 8001216:	2300      	movs	r3, #0
 8001218:	9304      	str	r3, [sp, #16]
 800121a:	2300      	movs	r3, #0
 800121c:	9303      	str	r3, [sp, #12]
 800121e:	2300      	movs	r3, #0
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	2300      	movs	r3, #0
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	2300      	movs	r3, #0
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2300      	movs	r3, #0
 800122c:	2204      	movs	r2, #4
 800122e:	2106      	movs	r1, #6
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff f851 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001236:	4603      	mov	r3, r0
 8001238:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                         /* qspi write read */
                if (res != 0)                                                                             /* check result */
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <w25qxx_read+0x358>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                /* write enable failed */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	484a      	ldr	r0, [pc, #296]	; (8001370 <w25qxx_read+0x47c>)
 8001246:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001248:	2301      	movs	r3, #1
 800124a:	e08c      	b.n	8001366 <w25qxx_read+0x472>
                }
                buf[0] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	0e1b      	lsrs	r3, r3, #24
 8001250:	b2db      	uxtb	r3, r3
 8001252:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 8001254:	2304      	movs	r3, #4
 8001256:	930a      	str	r3, [sp, #40]	; 0x28
 8001258:	2300      	movs	r3, #0
 800125a:	9309      	str	r3, [sp, #36]	; 0x24
 800125c:	2300      	movs	r3, #0
 800125e:	9308      	str	r3, [sp, #32]
 8001260:	2301      	movs	r3, #1
 8001262:	9307      	str	r3, [sp, #28]
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	9306      	str	r3, [sp, #24]
 800126a:	2300      	movs	r3, #0
 800126c:	9305      	str	r3, [sp, #20]
 800126e:	2300      	movs	r3, #0
 8001270:	9304      	str	r3, [sp, #16]
 8001272:	2300      	movs	r3, #0
 8001274:	9303      	str	r3, [sp, #12]
 8001276:	2300      	movs	r3, #0
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	2300      	movs	r3, #0
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	2300      	movs	r3, #0
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2300      	movs	r3, #0
 8001284:	2204      	movs	r2, #4
 8001286:	21c5      	movs	r1, #197	; 0xc5
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff f825 	bl	80002d8 <a_w25qxx_qspi_write_read>
 800128e:	4603      	mov	r3, r0
 8001290:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                            /* spi write read */
                if (res != 0)                                                                             /* check result */
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <w25qxx_read+0x3b0>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                /* write extended addr register failed */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4835      	ldr	r0, [pc, #212]	; (8001374 <w25qxx_read+0x480>)
 800129e:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 80012a0:	2301      	movs	r3, #1
 80012a2:	e060      	b.n	8001366 <w25qxx_read+0x472>
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	7f9b      	ldrb	r3, [r3, #30]
 80012a8:	2204      	movs	r2, #4
 80012aa:	920a      	str	r2, [sp, #40]	; 0x28
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	9209      	str	r2, [sp, #36]	; 0x24
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	9208      	str	r2, [sp, #32]
 80012b4:	2200      	movs	r2, #0
 80012b6:	9207      	str	r2, [sp, #28]
 80012b8:	2200      	movs	r2, #0
 80012ba:	9206      	str	r2, [sp, #24]
 80012bc:	9305      	str	r3, [sp, #20]
 80012be:	2300      	movs	r3, #0
 80012c0:	9304      	str	r3, [sp, #16]
 80012c2:	2300      	movs	r3, #0
 80012c4:	9303      	str	r3, [sp, #12]
 80012c6:	2300      	movs	r3, #0
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2303      	movs	r3, #3
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2304      	movs	r3, #4
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2204      	movs	r2, #4
 80012d6:	210b      	movs	r1, #11
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f7fe fffd 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80012de:	4603      	mov	r3, r0
 80012e0:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d03d      	beq.n	8001364 <w25qxx_read+0x470>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	4822      	ldr	r0, [pc, #136]	; (8001378 <w25qxx_read+0x484>)
 80012ee:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 80012f0:	2301      	movs	r3, #1
 80012f2:	e038      	b.n	8001366 <w25qxx_read+0x472>
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	7f1b      	ldrb	r3, [r3, #28]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d12d      	bne.n	8001358 <w25qxx_read+0x464>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8b5b      	ldrh	r3, [r3, #26]
 8001300:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001304:	4293      	cmp	r3, r2
 8001306:	d927      	bls.n	8001358 <w25qxx_read+0x464>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	7f9b      	ldrb	r3, [r3, #30]
 800130c:	2204      	movs	r2, #4
 800130e:	920a      	str	r2, [sp, #40]	; 0x28
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	9209      	str	r2, [sp, #36]	; 0x24
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	9208      	str	r2, [sp, #32]
 8001318:	2200      	movs	r2, #0
 800131a:	9207      	str	r2, [sp, #28]
 800131c:	2200      	movs	r2, #0
 800131e:	9206      	str	r2, [sp, #24]
 8001320:	9305      	str	r3, [sp, #20]
 8001322:	2300      	movs	r3, #0
 8001324:	9304      	str	r3, [sp, #16]
 8001326:	2300      	movs	r3, #0
 8001328:	9303      	str	r3, [sp, #12]
 800132a:	2300      	movs	r3, #0
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2304      	movs	r3, #4
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	2304      	movs	r3, #4
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	2204      	movs	r2, #4
 800133a:	210b      	movs	r1, #11
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f7fe ffcb 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001342:	4603      	mov	r3, r0
 8001344:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00b      	beq.n	8001364 <w25qxx_read+0x470>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <w25qxx_read+0x484>)
 8001352:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8001354:	2301      	movs	r3, #1
 8001356:	e006      	b.n	8001366 <w25qxx_read+0x472>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                    /* address mode is invalid */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <w25qxx_read+0x488>)
 800135e:	4798      	blx	r3
           
            return 4;                                                                                     /* return error */
 8001360:	2304      	movs	r3, #4
 8001362:	e000      	b.n	8001366 <w25qxx_read+0x472>
        }
    }
    
    return 0;                                                                                             /* success return 0 */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	08007ba8 	.word	0x08007ba8
 8001374:	080081a4 	.word	0x080081a4
 8001378:	08008228 	.word	0x08008228
 800137c:	08007eb4 	.word	0x08007eb4

08001380 <a_w25qxx_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_w25qxx_read(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b092      	sub	sp, #72	; 0x48
 8001384:	af0c      	add	r7, sp, #48	; 0x30
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t buf[6];

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                         /* spi interface */
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 8161 	bne.w	800165c <a_w25qxx_read+0x2dc>
    {
        if (handle->dual_quad_spi_enable != 0)                                                            /* enable dual quad spi */
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	7fdb      	ldrb	r3, [r3, #31]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 80be 	beq.w	8001520 <a_w25qxx_read+0x1a0>
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	7f1b      	ldrb	r3, [r3, #28]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f040 8081 	bne.w	80014b0 <a_w25qxx_read+0x130>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8b5b      	ldrh	r3, [r3, #26]
 80013b2:	f64e 7217 	movw	r2, #61207	; 0xef17
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d952      	bls.n	8001460 <a_w25qxx_read+0xe0>
                {
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 80013ba:	2300      	movs	r3, #0
 80013bc:	930a      	str	r3, [sp, #40]	; 0x28
 80013be:	2300      	movs	r3, #0
 80013c0:	9309      	str	r3, [sp, #36]	; 0x24
 80013c2:	2300      	movs	r3, #0
 80013c4:	9308      	str	r3, [sp, #32]
 80013c6:	2300      	movs	r3, #0
 80013c8:	9307      	str	r3, [sp, #28]
 80013ca:	2300      	movs	r3, #0
 80013cc:	9306      	str	r3, [sp, #24]
 80013ce:	2300      	movs	r3, #0
 80013d0:	9305      	str	r3, [sp, #20]
 80013d2:	2300      	movs	r3, #0
 80013d4:	9304      	str	r3, [sp, #16]
 80013d6:	2300      	movs	r3, #0
 80013d8:	9303      	str	r3, [sp, #12]
 80013da:	2300      	movs	r3, #0
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	2300      	movs	r3, #0
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	2300      	movs	r3, #0
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2300      	movs	r3, #0
 80013e8:	2201      	movs	r2, #1
 80013ea:	2106      	movs	r1, #6
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f7fe ff73 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80013f2:	4603      	mov	r3, r0
 80013f4:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                     /* qspi write read */
                    if (res != 0)                                                                         /* check result */
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <a_w25qxx_read+0x88>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	4892      	ldr	r0, [pc, #584]	; (800164c <a_w25qxx_read+0x2cc>)
 8001402:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8001404:	2301      	movs	r3, #1
 8001406:	e1e8      	b.n	80017da <a_w25qxx_read+0x45a>
                    }
                    buf[0] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	0e1b      	lsrs	r3, r3, #24
 800140c:	b2db      	uxtb	r3, r3
 800140e:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 8001410:	2301      	movs	r3, #1
 8001412:	930a      	str	r3, [sp, #40]	; 0x28
 8001414:	2300      	movs	r3, #0
 8001416:	9309      	str	r3, [sp, #36]	; 0x24
 8001418:	2300      	movs	r3, #0
 800141a:	9308      	str	r3, [sp, #32]
 800141c:	2301      	movs	r3, #1
 800141e:	9307      	str	r3, [sp, #28]
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	9306      	str	r3, [sp, #24]
 8001426:	2300      	movs	r3, #0
 8001428:	9305      	str	r3, [sp, #20]
 800142a:	2300      	movs	r3, #0
 800142c:	9304      	str	r3, [sp, #16]
 800142e:	2300      	movs	r3, #0
 8001430:	9303      	str	r3, [sp, #12]
 8001432:	2300      	movs	r3, #0
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	2300      	movs	r3, #0
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	2300      	movs	r3, #0
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	2201      	movs	r2, #1
 8001442:	21c5      	movs	r1, #197	; 0xc5
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f7fe ff47 	bl	80002d8 <a_w25qxx_qspi_write_read>
 800144a:	4603      	mov	r3, r0
 800144c:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                        /* spi write read */
                    if (res != 0)                                                                         /* check result */
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <a_w25qxx_read+0xe0>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	487d      	ldr	r0, [pc, #500]	; (8001650 <a_w25qxx_read+0x2d0>)
 800145a:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 800145c:	2301      	movs	r3, #1
 800145e:	e1bc      	b.n	80017da <a_w25qxx_read+0x45a>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 8001460:	2301      	movs	r3, #1
 8001462:	930a      	str	r3, [sp, #40]	; 0x28
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	9309      	str	r3, [sp, #36]	; 0x24
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	9308      	str	r3, [sp, #32]
 800146c:	2300      	movs	r3, #0
 800146e:	9307      	str	r3, [sp, #28]
 8001470:	2300      	movs	r3, #0
 8001472:	9306      	str	r3, [sp, #24]
 8001474:	2308      	movs	r3, #8
 8001476:	9305      	str	r3, [sp, #20]
 8001478:	2300      	movs	r3, #0
 800147a:	9304      	str	r3, [sp, #16]
 800147c:	2300      	movs	r3, #0
 800147e:	9303      	str	r3, [sp, #12]
 8001480:	2300      	movs	r3, #0
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2303      	movs	r3, #3
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	2301      	movs	r3, #1
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2201      	movs	r2, #1
 8001490:	210b      	movs	r1, #11
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f7fe ff20 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001498:	4603      	mov	r3, r0
 800149a:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 819a 	beq.w	80017d8 <a_w25qxx_read+0x458>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	486a      	ldr	r0, [pc, #424]	; (8001654 <a_w25qxx_read+0x2d4>)
 80014aa:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 80014ac:	2301      	movs	r3, #1
 80014ae:	e194      	b.n	80017da <a_w25qxx_read+0x45a>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	7f1b      	ldrb	r3, [r3, #28]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d12d      	bne.n	8001514 <a_w25qxx_read+0x194>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8b5b      	ldrh	r3, [r3, #26]
 80014bc:	f64e 7217 	movw	r2, #61207	; 0xef17
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d927      	bls.n	8001514 <a_w25qxx_read+0x194>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 80014c4:	2301      	movs	r3, #1
 80014c6:	930a      	str	r3, [sp, #40]	; 0x28
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	9309      	str	r3, [sp, #36]	; 0x24
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	9308      	str	r3, [sp, #32]
 80014d0:	2300      	movs	r3, #0
 80014d2:	9307      	str	r3, [sp, #28]
 80014d4:	2300      	movs	r3, #0
 80014d6:	9306      	str	r3, [sp, #24]
 80014d8:	2308      	movs	r3, #8
 80014da:	9305      	str	r3, [sp, #20]
 80014dc:	2300      	movs	r3, #0
 80014de:	9304      	str	r3, [sp, #16]
 80014e0:	2300      	movs	r3, #0
 80014e2:	9303      	str	r3, [sp, #12]
 80014e4:	2300      	movs	r3, #0
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	2304      	movs	r3, #4
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	2301      	movs	r3, #1
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2201      	movs	r2, #1
 80014f4:	210b      	movs	r1, #11
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7fe feee 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80014fc:	4603      	mov	r3, r0
 80014fe:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8168 	beq.w	80017d8 <a_w25qxx_read+0x458>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	4851      	ldr	r0, [pc, #324]	; (8001654 <a_w25qxx_read+0x2d4>)
 800150e:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001510:	2301      	movs	r3, #1
 8001512:	e162      	b.n	80017da <a_w25qxx_read+0x45a>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	484f      	ldr	r0, [pc, #316]	; (8001658 <a_w25qxx_read+0x2d8>)
 800151a:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 800151c:	2301      	movs	r3, #1
 800151e:	e15c      	b.n	80017da <a_w25qxx_read+0x45a>
            }
        }
        else
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	7f1b      	ldrb	r3, [r3, #28]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d159      	bne.n	80015dc <a_w25qxx_read+0x25c>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8b5b      	ldrh	r3, [r3, #26]
 800152c:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001530:	4293      	cmp	r3, r2
 8001532:	d92f      	bls.n	8001594 <a_w25qxx_read+0x214>
                {
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                 /* write enable command */
 8001534:	2306      	movs	r3, #6
 8001536:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                    /* spi write read */
 8001538:	f107 0110 	add.w	r1, r7, #16
 800153c:	2300      	movs	r3, #0
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2300      	movs	r3, #0
 8001542:	2201      	movs	r2, #1
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f7fe fe9b 	bl	8000280 <a_w25qxx_spi_write_read>
 800154a:	4603      	mov	r3, r0
 800154c:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <a_w25qxx_read+0x1e0>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	483c      	ldr	r0, [pc, #240]	; (800164c <a_w25qxx_read+0x2cc>)
 800155a:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 800155c:	2301      	movs	r3, #1
 800155e:	e13c      	b.n	80017da <a_w25qxx_read+0x45a>
                    }
                    buf[0] = 0xC5;                                                                        /* write extended addr register command */
 8001560:	23c5      	movs	r3, #197	; 0xc5
 8001562:	743b      	strb	r3, [r7, #16]
                    buf[1] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	0e1b      	lsrs	r3, r3, #24
 8001568:	b2db      	uxtb	r3, r3
 800156a:	747b      	strb	r3, [r7, #17]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                    /* spi write read */
 800156c:	f107 0110 	add.w	r1, r7, #16
 8001570:	2300      	movs	r3, #0
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2300      	movs	r3, #0
 8001576:	2202      	movs	r2, #2
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7fe fe81 	bl	8000280 <a_w25qxx_spi_write_read>
 800157e:	4603      	mov	r3, r0
 8001580:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <a_w25qxx_read+0x214>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4830      	ldr	r0, [pc, #192]	; (8001650 <a_w25qxx_read+0x2d0>)
 800158e:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8001590:	2301      	movs	r3, #1
 8001592:	e122      	b.n	80017da <a_w25qxx_read+0x45a>
                    }
                }
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 8001594:	230b      	movs	r3, #11
 8001596:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	b2db      	uxtb	r3, r3
 800159e:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	0a1b      	lsrs	r3, r3, #8
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	74fb      	strb	r3, [r7, #19]
                buf[4] = 0x00;                                                                            /* dummy */
 80015ae:	2300      	movs	r3, #0
 80015b0:	753b      	strb	r3, [r7, #20]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 5, (uint8_t *)data, (uint32_t)len); /* spi write read */
 80015b2:	f107 0110 	add.w	r1, r7, #16
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2205      	movs	r2, #5
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f7fe fe5e 	bl	8000280 <a_w25qxx_spi_write_read>
 80015c4:	4603      	mov	r3, r0
 80015c6:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8104 	beq.w	80017d8 <a_w25qxx_read+0x458>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	481f      	ldr	r0, [pc, #124]	; (8001654 <a_w25qxx_read+0x2d4>)
 80015d6:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 80015d8:	2301      	movs	r3, #1
 80015da:	e0fe      	b.n	80017da <a_w25qxx_read+0x45a>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))   /* check address mode */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	7f1b      	ldrb	r3, [r3, #28]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d12d      	bne.n	8001640 <a_w25qxx_read+0x2c0>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8b5b      	ldrh	r3, [r3, #26]
 80015e8:	f64e 7217 	movw	r2, #61207	; 0xef17
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d927      	bls.n	8001640 <a_w25qxx_read+0x2c0>
            {
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 80015f0:	230b      	movs	r3, #11
 80015f2:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	0e1b      	lsrs	r3, r3, #24
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	0c1b      	lsrs	r3, r3, #16
 8001600:	b2db      	uxtb	r3, r3
 8001602:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	b2db      	uxtb	r3, r3
 800160a:	74fb      	strb	r3, [r7, #19]
                buf[4] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	753b      	strb	r3, [r7, #20]
                buf[5] = 0x00;                                                                            /* dummy */
 8001612:	2300      	movs	r3, #0
 8001614:	757b      	strb	r3, [r7, #21]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 6, (uint8_t *)data, (uint32_t)len); /* spi write read */
 8001616:	f107 0110 	add.w	r1, r7, #16
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2206      	movs	r2, #6
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7fe fe2c 	bl	8000280 <a_w25qxx_spi_write_read>
 8001628:	4603      	mov	r3, r0
 800162a:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 80d2 	beq.w	80017d8 <a_w25qxx_read+0x458>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <a_w25qxx_read+0x2d4>)
 800163a:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 800163c:	2301      	movs	r3, #1
 800163e:	e0cc      	b.n	80017da <a_w25qxx_read+0x45a>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <a_w25qxx_read+0x2d8>)
 8001646:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8001648:	2301      	movs	r3, #1
 800164a:	e0c6      	b.n	80017da <a_w25qxx_read+0x45a>
 800164c:	08007ba8 	.word	0x08007ba8
 8001650:	080081a4 	.word	0x080081a4
 8001654:	08008228 	.word	0x08008228
 8001658:	08007eb4 	.word	0x08007eb4
            }
        }
    }
    else                                                                                                  /* qspi interface */
    {
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                           /* 3 address mode */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	7f1b      	ldrb	r3, [r3, #28]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f040 8081 	bne.w	8001768 <a_w25qxx_read+0x3e8>
        {
            if (handle->type >= W25Q256)                                                                  /* >128Mb */
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8b5b      	ldrh	r3, [r3, #26]
 800166a:	f64e 7217 	movw	r2, #61207	; 0xef17
 800166e:	4293      	cmp	r3, r2
 8001670:	d952      	bls.n	8001718 <a_w25qxx_read+0x398>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8001672:	2300      	movs	r3, #0
 8001674:	930a      	str	r3, [sp, #40]	; 0x28
 8001676:	2300      	movs	r3, #0
 8001678:	9309      	str	r3, [sp, #36]	; 0x24
 800167a:	2300      	movs	r3, #0
 800167c:	9308      	str	r3, [sp, #32]
 800167e:	2300      	movs	r3, #0
 8001680:	9307      	str	r3, [sp, #28]
 8001682:	2300      	movs	r3, #0
 8001684:	9306      	str	r3, [sp, #24]
 8001686:	2300      	movs	r3, #0
 8001688:	9305      	str	r3, [sp, #20]
 800168a:	2300      	movs	r3, #0
 800168c:	9304      	str	r3, [sp, #16]
 800168e:	2300      	movs	r3, #0
 8001690:	9303      	str	r3, [sp, #12]
 8001692:	2300      	movs	r3, #0
 8001694:	9302      	str	r3, [sp, #8]
 8001696:	2300      	movs	r3, #0
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	2300      	movs	r3, #0
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2300      	movs	r3, #0
 80016a0:	2204      	movs	r2, #4
 80016a2:	2106      	movs	r1, #6
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7fe fe17 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80016aa:	4603      	mov	r3, r0
 80016ac:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                         /* qspi write read */
                if (res != 0)                                                                             /* check result */
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <a_w25qxx_read+0x340>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                /* write enable failed */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	484a      	ldr	r0, [pc, #296]	; (80017e4 <a_w25qxx_read+0x464>)
 80016ba:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 80016bc:	2301      	movs	r3, #1
 80016be:	e08c      	b.n	80017da <a_w25qxx_read+0x45a>
                }
                buf[0] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	0e1b      	lsrs	r3, r3, #24
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 80016c8:	2304      	movs	r3, #4
 80016ca:	930a      	str	r3, [sp, #40]	; 0x28
 80016cc:	2300      	movs	r3, #0
 80016ce:	9309      	str	r3, [sp, #36]	; 0x24
 80016d0:	2300      	movs	r3, #0
 80016d2:	9308      	str	r3, [sp, #32]
 80016d4:	2301      	movs	r3, #1
 80016d6:	9307      	str	r3, [sp, #28]
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	9306      	str	r3, [sp, #24]
 80016de:	2300      	movs	r3, #0
 80016e0:	9305      	str	r3, [sp, #20]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9304      	str	r3, [sp, #16]
 80016e6:	2300      	movs	r3, #0
 80016e8:	9303      	str	r3, [sp, #12]
 80016ea:	2300      	movs	r3, #0
 80016ec:	9302      	str	r3, [sp, #8]
 80016ee:	2300      	movs	r3, #0
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	2300      	movs	r3, #0
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2300      	movs	r3, #0
 80016f8:	2204      	movs	r2, #4
 80016fa:	21c5      	movs	r1, #197	; 0xc5
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7fe fdeb 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001702:	4603      	mov	r3, r0
 8001704:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                            /* spi write read */
                if (res != 0)                                                                             /* check result */
 8001706:	7dfb      	ldrb	r3, [r7, #23]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <a_w25qxx_read+0x398>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                /* write extended addr register failed */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	4835      	ldr	r0, [pc, #212]	; (80017e8 <a_w25qxx_read+0x468>)
 8001712:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001714:	2301      	movs	r3, #1
 8001716:	e060      	b.n	80017da <a_w25qxx_read+0x45a>
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	7f9b      	ldrb	r3, [r3, #30]
 800171c:	2204      	movs	r2, #4
 800171e:	920a      	str	r2, [sp, #40]	; 0x28
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	9209      	str	r2, [sp, #36]	; 0x24
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	9208      	str	r2, [sp, #32]
 8001728:	2200      	movs	r2, #0
 800172a:	9207      	str	r2, [sp, #28]
 800172c:	2200      	movs	r2, #0
 800172e:	9206      	str	r2, [sp, #24]
 8001730:	9305      	str	r3, [sp, #20]
 8001732:	2300      	movs	r3, #0
 8001734:	9304      	str	r3, [sp, #16]
 8001736:	2300      	movs	r3, #0
 8001738:	9303      	str	r3, [sp, #12]
 800173a:	2300      	movs	r3, #0
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	2303      	movs	r3, #3
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	2304      	movs	r3, #4
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2204      	movs	r2, #4
 800174a:	210b      	movs	r1, #11
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7fe fdc3 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001752:	4603      	mov	r3, r0
 8001754:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 8001756:	7dfb      	ldrb	r3, [r7, #23]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d03d      	beq.n	80017d8 <a_w25qxx_read+0x458>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	4822      	ldr	r0, [pc, #136]	; (80017ec <a_w25qxx_read+0x46c>)
 8001762:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8001764:	2301      	movs	r3, #1
 8001766:	e038      	b.n	80017da <a_w25qxx_read+0x45a>
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	7f1b      	ldrb	r3, [r3, #28]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d12d      	bne.n	80017cc <a_w25qxx_read+0x44c>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8b5b      	ldrh	r3, [r3, #26]
 8001774:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001778:	4293      	cmp	r3, r2
 800177a:	d927      	bls.n	80017cc <a_w25qxx_read+0x44c>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	7f9b      	ldrb	r3, [r3, #30]
 8001780:	2204      	movs	r2, #4
 8001782:	920a      	str	r2, [sp, #40]	; 0x28
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	9209      	str	r2, [sp, #36]	; 0x24
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	9208      	str	r2, [sp, #32]
 800178c:	2200      	movs	r2, #0
 800178e:	9207      	str	r2, [sp, #28]
 8001790:	2200      	movs	r2, #0
 8001792:	9206      	str	r2, [sp, #24]
 8001794:	9305      	str	r3, [sp, #20]
 8001796:	2300      	movs	r3, #0
 8001798:	9304      	str	r3, [sp, #16]
 800179a:	2300      	movs	r3, #0
 800179c:	9303      	str	r3, [sp, #12]
 800179e:	2300      	movs	r3, #0
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	2304      	movs	r3, #4
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	2304      	movs	r3, #4
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2204      	movs	r2, #4
 80017ae:	210b      	movs	r1, #11
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7fe fd91 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80017b6:	4603      	mov	r3, r0
 80017b8:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00b      	beq.n	80017d8 <a_w25qxx_read+0x458>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <a_w25qxx_read+0x46c>)
 80017c6:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 80017c8:	2301      	movs	r3, #1
 80017ca:	e006      	b.n	80017da <a_w25qxx_read+0x45a>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                    /* address mode is invalid */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	4807      	ldr	r0, [pc, #28]	; (80017f0 <a_w25qxx_read+0x470>)
 80017d2:	4798      	blx	r3
           
            return 1;                                                                                     /* return error */
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <a_w25qxx_read+0x45a>
        }
    }
    
    return 0;                                                                                             /* success return 0 */
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	08007ba8 	.word	0x08007ba8
 80017e8:	080081a4 	.word	0x080081a4
 80017ec:	08008228 	.word	0x08008228
 80017f0:	08007eb4 	.word	0x08007eb4

080017f4 <a_w25qxx_erase_sector>:
 *            - 0 success
 *            - 1 sector erase failed
 * @note      none
 */
static uint8_t a_w25qxx_erase_sector(w25qxx_handle_t *handle, uint32_t addr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b092      	sub	sp, #72	; 0x48
 80017f8:	af0c      	add	r7, sp, #48	; 0x30
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
    uint8_t res;
    uint8_t status;
    uint32_t timeout;
    uint8_t buf[5];

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                           /* spi interface */
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001804:	2b00      	cmp	r3, #0
 8001806:	f040 8217 	bne.w	8001c38 <a_w25qxx_erase_sector+0x444>
    {
        if (handle->dual_quad_spi_enable != 0)                                                              /* enable dual quad spi */
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7fdb      	ldrb	r3, [r3, #31]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8129 	beq.w	8001a66 <a_w25qxx_erase_sector+0x272>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 8001814:	2300      	movs	r3, #0
 8001816:	930a      	str	r3, [sp, #40]	; 0x28
 8001818:	2300      	movs	r3, #0
 800181a:	9309      	str	r3, [sp, #36]	; 0x24
 800181c:	2300      	movs	r3, #0
 800181e:	9308      	str	r3, [sp, #32]
 8001820:	2300      	movs	r3, #0
 8001822:	9307      	str	r3, [sp, #28]
 8001824:	2300      	movs	r3, #0
 8001826:	9306      	str	r3, [sp, #24]
 8001828:	2300      	movs	r3, #0
 800182a:	9305      	str	r3, [sp, #20]
 800182c:	2300      	movs	r3, #0
 800182e:	9304      	str	r3, [sp, #16]
 8001830:	2300      	movs	r3, #0
 8001832:	9303      	str	r3, [sp, #12]
 8001834:	2300      	movs	r3, #0
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2300      	movs	r3, #0
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	2300      	movs	r3, #0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	2201      	movs	r2, #1
 8001844:	2106      	movs	r1, #6
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7fe fd46 	bl	80002d8 <a_w25qxx_qspi_write_read>
 800184c:	4603      	mov	r3, r0
 800184e:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* qspi write read */
            if (res != 0)                                                                                   /* check result */
 8001850:	7cfb      	ldrb	r3, [r7, #19]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <a_w25qxx_erase_sector+0x6e>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	48a0      	ldr	r0, [pc, #640]	; (8001adc <a_w25qxx_erase_sector+0x2e8>)
 800185c:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 800185e:	2301      	movs	r3, #1
 8001860:	e320      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7f1b      	ldrb	r3, [r3, #28]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d17f      	bne.n	800196a <a_w25qxx_erase_sector+0x176>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	8b5b      	ldrh	r3, [r3, #26]
 800186e:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001872:	4293      	cmp	r3, r2
 8001874:	d952      	bls.n	800191c <a_w25qxx_erase_sector+0x128>
                {
                    buf[0] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	0e1b      	lsrs	r3, r3, #24
 800187a:	b2db      	uxtb	r3, r3
 800187c:	733b      	strb	r3, [r7, #12]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 800187e:	2301      	movs	r3, #1
 8001880:	930a      	str	r3, [sp, #40]	; 0x28
 8001882:	2300      	movs	r3, #0
 8001884:	9309      	str	r3, [sp, #36]	; 0x24
 8001886:	2300      	movs	r3, #0
 8001888:	9308      	str	r3, [sp, #32]
 800188a:	2301      	movs	r3, #1
 800188c:	9307      	str	r3, [sp, #28]
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	9306      	str	r3, [sp, #24]
 8001894:	2300      	movs	r3, #0
 8001896:	9305      	str	r3, [sp, #20]
 8001898:	2300      	movs	r3, #0
 800189a:	9304      	str	r3, [sp, #16]
 800189c:	2300      	movs	r3, #0
 800189e:	9303      	str	r3, [sp, #12]
 80018a0:	2300      	movs	r3, #0
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	2300      	movs	r3, #0
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	2300      	movs	r3, #0
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2300      	movs	r3, #0
 80018ae:	2201      	movs	r2, #1
 80018b0:	21c5      	movs	r1, #197	; 0xc5
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7fe fd10 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80018b8:	4603      	mov	r3, r0
 80018ba:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                          /* spi write read */
                    if (res != 0)                                                                           /* check result */
 80018bc:	7cfb      	ldrb	r3, [r7, #19]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <a_w25qxx_erase_sector+0xda>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	4886      	ldr	r0, [pc, #536]	; (8001ae0 <a_w25qxx_erase_sector+0x2ec>)
 80018c8:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e2ea      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
                    }
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 80018ce:	2300      	movs	r3, #0
 80018d0:	930a      	str	r3, [sp, #40]	; 0x28
 80018d2:	2300      	movs	r3, #0
 80018d4:	9309      	str	r3, [sp, #36]	; 0x24
 80018d6:	2300      	movs	r3, #0
 80018d8:	9308      	str	r3, [sp, #32]
 80018da:	2300      	movs	r3, #0
 80018dc:	9307      	str	r3, [sp, #28]
 80018de:	2300      	movs	r3, #0
 80018e0:	9306      	str	r3, [sp, #24]
 80018e2:	2300      	movs	r3, #0
 80018e4:	9305      	str	r3, [sp, #20]
 80018e6:	2300      	movs	r3, #0
 80018e8:	9304      	str	r3, [sp, #16]
 80018ea:	2300      	movs	r3, #0
 80018ec:	9303      	str	r3, [sp, #12]
 80018ee:	2300      	movs	r3, #0
 80018f0:	9302      	str	r3, [sp, #8]
 80018f2:	2300      	movs	r3, #0
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	2300      	movs	r3, #0
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2300      	movs	r3, #0
 80018fc:	2201      	movs	r2, #1
 80018fe:	2106      	movs	r1, #6
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7fe fce9 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001906:	4603      	mov	r3, r0
 8001908:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                       /* qspi write read */
                    if (res != 0)                                                                           /* check result */
 800190a:	7cfb      	ldrb	r3, [r7, #19]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <a_w25qxx_erase_sector+0x128>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	4871      	ldr	r0, [pc, #452]	; (8001adc <a_w25qxx_erase_sector+0x2e8>)
 8001916:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8001918:	2301      	movs	r3, #1
 800191a:	e2c3      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 1,
 800191c:	2300      	movs	r3, #0
 800191e:	930a      	str	r3, [sp, #40]	; 0x28
 8001920:	2300      	movs	r3, #0
 8001922:	9309      	str	r3, [sp, #36]	; 0x24
 8001924:	2300      	movs	r3, #0
 8001926:	9308      	str	r3, [sp, #32]
 8001928:	2300      	movs	r3, #0
 800192a:	9307      	str	r3, [sp, #28]
 800192c:	2300      	movs	r3, #0
 800192e:	9306      	str	r3, [sp, #24]
 8001930:	2300      	movs	r3, #0
 8001932:	9305      	str	r3, [sp, #20]
 8001934:	2300      	movs	r3, #0
 8001936:	9304      	str	r3, [sp, #16]
 8001938:	2300      	movs	r3, #0
 800193a:	9303      	str	r3, [sp, #12]
 800193c:	2300      	movs	r3, #0
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	2303      	movs	r3, #3
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	2301      	movs	r3, #1
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2201      	movs	r2, #1
 800194c:	2120      	movs	r1, #32
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7fe fcc2 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001954:	4603      	mov	r3, r0
 8001956:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* spi write read */
                if (res != 0)                                                                               /* check result */
 8001958:	7cfb      	ldrb	r3, [r7, #19]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d03c      	beq.n	80019d8 <a_w25qxx_erase_sector+0x1e4>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	4860      	ldr	r0, [pc, #384]	; (8001ae4 <a_w25qxx_erase_sector+0x2f0>)
 8001964:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8001966:	2301      	movs	r3, #1
 8001968:	e29c      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7f1b      	ldrb	r3, [r3, #28]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d12c      	bne.n	80019cc <a_w25qxx_erase_sector+0x1d8>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	8b5b      	ldrh	r3, [r3, #26]
 8001976:	f64e 7217 	movw	r2, #61207	; 0xef17
 800197a:	4293      	cmp	r3, r2
 800197c:	d926      	bls.n	80019cc <a_w25qxx_erase_sector+0x1d8>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 1,
 800197e:	2300      	movs	r3, #0
 8001980:	930a      	str	r3, [sp, #40]	; 0x28
 8001982:	2300      	movs	r3, #0
 8001984:	9309      	str	r3, [sp, #36]	; 0x24
 8001986:	2300      	movs	r3, #0
 8001988:	9308      	str	r3, [sp, #32]
 800198a:	2300      	movs	r3, #0
 800198c:	9307      	str	r3, [sp, #28]
 800198e:	2300      	movs	r3, #0
 8001990:	9306      	str	r3, [sp, #24]
 8001992:	2300      	movs	r3, #0
 8001994:	9305      	str	r3, [sp, #20]
 8001996:	2300      	movs	r3, #0
 8001998:	9304      	str	r3, [sp, #16]
 800199a:	2300      	movs	r3, #0
 800199c:	9303      	str	r3, [sp, #12]
 800199e:	2300      	movs	r3, #0
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	2304      	movs	r3, #4
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	2301      	movs	r3, #1
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	2120      	movs	r1, #32
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7fe fc91 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80019b6:	4603      	mov	r3, r0
 80019b8:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* spi write read */
                if (res != 0)                                                                               /* check result */
 80019ba:	7cfb      	ldrb	r3, [r7, #19]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00b      	beq.n	80019d8 <a_w25qxx_erase_sector+0x1e4>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	4847      	ldr	r0, [pc, #284]	; (8001ae4 <a_w25qxx_erase_sector+0x2f0>)
 80019c6:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80019c8:	2301      	movs	r3, #1
 80019ca:	e26b      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	4845      	ldr	r0, [pc, #276]	; (8001ae8 <a_w25qxx_erase_sector+0x2f4>)
 80019d2:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 80019d4:	2301      	movs	r3, #1
 80019d6:	e265      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
            }
            
            timeout = 400;                                                                                  /* max 400 ms */
 80019d8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80019dc:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 80019de:	e033      	b.n	8001a48 <a_w25qxx_erase_sector+0x254>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 1,
 80019e0:	2301      	movs	r3, #1
 80019e2:	930a      	str	r3, [sp, #40]	; 0x28
 80019e4:	2301      	movs	r3, #1
 80019e6:	9309      	str	r3, [sp, #36]	; 0x24
 80019e8:	f107 0312 	add.w	r3, r7, #18
 80019ec:	9308      	str	r3, [sp, #32]
 80019ee:	2300      	movs	r3, #0
 80019f0:	9307      	str	r3, [sp, #28]
 80019f2:	2300      	movs	r3, #0
 80019f4:	9306      	str	r3, [sp, #24]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9305      	str	r3, [sp, #20]
 80019fa:	2300      	movs	r3, #0
 80019fc:	9304      	str	r3, [sp, #16]
 80019fe:	2300      	movs	r3, #0
 8001a00:	9303      	str	r3, [sp, #12]
 8001a02:	2300      	movs	r3, #0
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2300      	movs	r3, #0
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2201      	movs	r2, #1
 8001a12:	2105      	movs	r1, #5
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7fe fc5f 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0,
                                              (uint8_t *)&status, 1, 1);                                    /* spi write read */
                if (res != 0)                                                                               /* check result */
 8001a1e:	7cfb      	ldrb	r3, [r7, #19]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <a_w25qxx_erase_sector+0x23c>
                {
                    handle->debug_print("w25qxx: get status1 failed.\n");                                   /* get status1 failed */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	4830      	ldr	r0, [pc, #192]	; (8001aec <a_w25qxx_erase_sector+0x2f8>)
 8001a2a:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e239      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 8001a30:	7cbb      	ldrb	r3, [r7, #18]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00a      	beq.n	8001a50 <a_w25qxx_erase_sector+0x25c>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
                handle->delay_ms(1);                                                                        /* delay 1 ms */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2001      	movs	r0, #1
 8001a46:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1c8      	bne.n	80019e0 <a_w25qxx_erase_sector+0x1ec>
 8001a4e:	e000      	b.n	8001a52 <a_w25qxx_erase_sector+0x25e>
                    break;                                                                                  /* break */
 8001a50:	bf00      	nop
            }
            if (timeout == 0)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f040 8224 	bne.w	8001ea2 <a_w25qxx_erase_sector+0x6ae>
            {
                handle->debug_print("w25qxx: sector erase 4k timeout.\n");                                  /* sector erase 4k timeout */
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4824      	ldr	r0, [pc, #144]	; (8001af0 <a_w25qxx_erase_sector+0x2fc>)
 8001a60:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e21e      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
            }
        }
        else                                                                                                /* single spi */
        {
            buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                           /* write enable command */
 8001a66:	2306      	movs	r3, #6
 8001a68:	733b      	strb	r3, [r7, #12]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                              /* spi write read */
 8001a6a:	f107 010c 	add.w	r1, r7, #12
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2300      	movs	r3, #0
 8001a74:	2201      	movs	r2, #1
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7fe fc02 	bl	8000280 <a_w25qxx_spi_write_read>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	74fb      	strb	r3, [r7, #19]
            if (res != 0)                                                                                   /* check result */
 8001a80:	7cfb      	ldrb	r3, [r7, #19]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <a_w25qxx_erase_sector+0x29e>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	4814      	ldr	r0, [pc, #80]	; (8001adc <a_w25qxx_erase_sector+0x2e8>)
 8001a8c:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e208      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7f1b      	ldrb	r3, [r3, #28]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d163      	bne.n	8001b62 <a_w25qxx_erase_sector+0x36e>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	8b5b      	ldrh	r3, [r3, #26]
 8001a9e:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d93c      	bls.n	8001b20 <a_w25qxx_erase_sector+0x32c>
                {
                    buf[0] = 0xC5;                                                                          /* write extended addr register command */
 8001aa6:	23c5      	movs	r3, #197	; 0xc5
 8001aa8:	733b      	strb	r3, [r7, #12]
                    buf[1] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	0e1b      	lsrs	r3, r3, #24
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	737b      	strb	r3, [r7, #13]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                      /* spi write read */
 8001ab2:	f107 010c 	add.w	r1, r7, #12
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2300      	movs	r3, #0
 8001abc:	2202      	movs	r2, #2
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7fe fbde 	bl	8000280 <a_w25qxx_spi_write_read>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 8001ac8:	7cfb      	ldrb	r3, [r7, #19]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d012      	beq.n	8001af4 <a_w25qxx_erase_sector+0x300>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <a_w25qxx_erase_sector+0x2ec>)
 8001ad4:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e1e4      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
 8001ada:	bf00      	nop
 8001adc:	08007ba8 	.word	0x08007ba8
 8001ae0:	080081a4 	.word	0x080081a4
 8001ae4:	080083f0 	.word	0x080083f0
 8001ae8:	08007eb4 	.word	0x08007eb4
 8001aec:	08007c0c 	.word	0x08007c0c
 8001af0:	08008414 	.word	0x08008414
                    }
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                   /* write enable command */
 8001af4:	2306      	movs	r3, #6
 8001af6:	733b      	strb	r3, [r7, #12]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                      /* spi write read */
 8001af8:	f107 010c 	add.w	r1, r7, #12
 8001afc:	2300      	movs	r3, #0
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2300      	movs	r3, #0
 8001b02:	2201      	movs	r2, #1
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7fe fbbb 	bl	8000280 <a_w25qxx_spi_write_read>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 8001b0e:	7cfb      	ldrb	r3, [r7, #19]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <a_w25qxx_erase_sector+0x32c>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	489d      	ldr	r0, [pc, #628]	; (8001d90 <a_w25qxx_erase_sector+0x59c>)
 8001b1a:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e1c1      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
                    }
                }
                buf[0] = W25QXX_COMMAND_SECTOR_ERASE_4K;                                                    /* sector erase 4k command */
 8001b20:	2320      	movs	r3, #32
 8001b22:	733b      	strb	r3, [r7, #12]
                buf[1] = (addr >> 16) & 0xFF;                                                               /* 23 - 16 bits */
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	0c1b      	lsrs	r3, r3, #16
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	737b      	strb	r3, [r7, #13]
                buf[2] = (addr >> 8) & 0xFF;                                                                /* 15 - 8  bits */
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	73bb      	strb	r3, [r7, #14]
                buf[3] = (addr >> 0) & 0xFF;                                                                /* 7 - 0 bits */
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	73fb      	strb	r3, [r7, #15]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 4, NULL, 0);                          /* spi write read */
 8001b3a:	f107 010c 	add.w	r1, r7, #12
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2300      	movs	r3, #0
 8001b44:	2204      	movs	r2, #4
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe fb9a 	bl	8000280 <a_w25qxx_spi_write_read>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8001b50:	7cfb      	ldrb	r3, [r7, #19]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d03a      	beq.n	8001bcc <a_w25qxx_erase_sector+0x3d8>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	488e      	ldr	r0, [pc, #568]	; (8001d94 <a_w25qxx_erase_sector+0x5a0>)
 8001b5c:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e1a0      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7f1b      	ldrb	r3, [r3, #28]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d12a      	bne.n	8001bc0 <a_w25qxx_erase_sector+0x3cc>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	8b5b      	ldrh	r3, [r3, #26]
 8001b6e:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d924      	bls.n	8001bc0 <a_w25qxx_erase_sector+0x3cc>
            {
                buf[0] = W25QXX_COMMAND_SECTOR_ERASE_4K;                                                    /* sector erase 4k command */
 8001b76:	2320      	movs	r3, #32
 8001b78:	733b      	strb	r3, [r7, #12]
                buf[1] = (addr >> 24) & 0xFF;                                                               /* 31 - 24 bits */
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	0e1b      	lsrs	r3, r3, #24
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	737b      	strb	r3, [r7, #13]
                buf[2] = (addr >> 16) & 0xFF;                                                               /* 23 - 16 bits */
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	73bb      	strb	r3, [r7, #14]
                buf[3] = (addr >> 8) & 0xFF;                                                                /* 15 - 8  bits */
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	73fb      	strb	r3, [r7, #15]
                buf[4] = (addr >> 0) & 0xFF;                                                                /* 7 - 0 bits */
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 5, NULL, 0);                          /* spi write read */
 8001b98:	f107 010c 	add.w	r1, r7, #12
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2205      	movs	r2, #5
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7fe fb6b 	bl	8000280 <a_w25qxx_spi_write_read>
 8001baa:	4603      	mov	r3, r0
 8001bac:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8001bae:	7cfb      	ldrb	r3, [r7, #19]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00b      	beq.n	8001bcc <a_w25qxx_erase_sector+0x3d8>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	4876      	ldr	r0, [pc, #472]	; (8001d94 <a_w25qxx_erase_sector+0x5a0>)
 8001bba:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e171      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4874      	ldr	r0, [pc, #464]	; (8001d98 <a_w25qxx_erase_sector+0x5a4>)
 8001bc6:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e16b      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
            }
            
            timeout = 400;                                                                                  /* max 400 ms */
 8001bcc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001bd0:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 8001bd2:	e022      	b.n	8001c1a <a_w25qxx_erase_sector+0x426>
            {
                buf[0] = W25QXX_COMMAND_READ_STATUS_REG1;                                                   /* read status1 command */
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	733b      	strb	r3, [r7, #12]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, (uint8_t *)&status, 1);            /* spi write read */
 8001bd8:	f107 0312 	add.w	r3, r7, #18
 8001bdc:	f107 010c 	add.w	r1, r7, #12
 8001be0:	2201      	movs	r2, #1
 8001be2:	9200      	str	r2, [sp, #0]
 8001be4:	2201      	movs	r2, #1
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7fe fb4a 	bl	8000280 <a_w25qxx_spi_write_read>
 8001bec:	4603      	mov	r3, r0
 8001bee:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8001bf0:	7cfb      	ldrb	r3, [r7, #19]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <a_w25qxx_erase_sector+0x40e>
                {
                    handle->debug_print("w25qxx: get status1 failed.\n");                                   /* get status1 failed */
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	4868      	ldr	r0, [pc, #416]	; (8001d9c <a_w25qxx_erase_sector+0x5a8>)
 8001bfc:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e150      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 8001c02:	7cbb      	ldrb	r3, [r7, #18]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00a      	beq.n	8001c22 <a_w25qxx_erase_sector+0x42e>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
                handle->delay_ms(1);                                                                        /* delay 1 ms */
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2001      	movs	r0, #1
 8001c18:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1d9      	bne.n	8001bd4 <a_w25qxx_erase_sector+0x3e0>
 8001c20:	e000      	b.n	8001c24 <a_w25qxx_erase_sector+0x430>
                    break;                                                                                  /* break */
 8001c22:	bf00      	nop
            }
            if (timeout == 0)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 813b 	bne.w	8001ea2 <a_w25qxx_erase_sector+0x6ae>
            {
                handle->debug_print("w25qxx: sector erase 4k timeout.\n");                                  /* sector erase 4k timeout */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	485b      	ldr	r0, [pc, #364]	; (8001da0 <a_w25qxx_erase_sector+0x5ac>)
 8001c32:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8001c34:	2301      	movs	r3, #1
 8001c36:	e135      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
            }
        }
    }
    else
    {
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8001c38:	2300      	movs	r3, #0
 8001c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8001c40:	2300      	movs	r3, #0
 8001c42:	9308      	str	r3, [sp, #32]
 8001c44:	2300      	movs	r3, #0
 8001c46:	9307      	str	r3, [sp, #28]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9306      	str	r3, [sp, #24]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9305      	str	r3, [sp, #20]
 8001c50:	2300      	movs	r3, #0
 8001c52:	9304      	str	r3, [sp, #16]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9303      	str	r3, [sp, #12]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9302      	str	r3, [sp, #8]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	2300      	movs	r3, #0
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	2204      	movs	r2, #4
 8001c68:	2106      	movs	r1, #6
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7fe fb34 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001c70:	4603      	mov	r3, r0
 8001c72:	74fb      	strb	r3, [r7, #19]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                                   /* qspi write read */
        if (res != 0)                                                                                       /* check result */
 8001c74:	7cfb      	ldrb	r3, [r7, #19]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <a_w25qxx_erase_sector+0x492>
        {
            handle->debug_print("w25qxx: write enable failed.\n");                                          /* write enable failed */
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4844      	ldr	r0, [pc, #272]	; (8001d90 <a_w25qxx_erase_sector+0x59c>)
 8001c80:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e10e      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
        }
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                             /* 3 address mode */
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7f1b      	ldrb	r3, [r3, #28]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 808c 	bne.w	8001da8 <a_w25qxx_erase_sector+0x5b4>
        {
            if (handle->type >= W25Q256)                                                                    /* >128Mb */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	8b5b      	ldrh	r3, [r3, #26]
 8001c94:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d952      	bls.n	8001d42 <a_w25qxx_erase_sector+0x54e>
            {
                buf[0] = (addr >> 24) & 0xFF;                                                               /* 31 - 24 bits */
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	0e1b      	lsrs	r3, r3, #24
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	733b      	strb	r3, [r7, #12]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9309      	str	r3, [sp, #36]	; 0x24
 8001cac:	2300      	movs	r3, #0
 8001cae:	9308      	str	r3, [sp, #32]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9307      	str	r3, [sp, #28]
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	9306      	str	r3, [sp, #24]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9305      	str	r3, [sp, #20]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	9304      	str	r3, [sp, #16]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	9303      	str	r3, [sp, #12]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9302      	str	r3, [sp, #8]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	21c5      	movs	r1, #197	; 0xc5
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7fe fafd 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 8001ce2:	7cfb      	ldrb	r3, [r7, #19]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <a_w25qxx_erase_sector+0x500>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                  /* write extended addr register failed */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	482d      	ldr	r0, [pc, #180]	; (8001da4 <a_w25qxx_erase_sector+0x5b0>)
 8001cee:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0d7      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9308      	str	r3, [sp, #32]
 8001d00:	2300      	movs	r3, #0
 8001d02:	9307      	str	r3, [sp, #28]
 8001d04:	2300      	movs	r3, #0
 8001d06:	9306      	str	r3, [sp, #24]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9305      	str	r3, [sp, #20]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9304      	str	r3, [sp, #16]
 8001d10:	2300      	movs	r3, #0
 8001d12:	9303      	str	r3, [sp, #12]
 8001d14:	2300      	movs	r3, #0
 8001d16:	9302      	str	r3, [sp, #8]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2300      	movs	r3, #0
 8001d22:	2204      	movs	r2, #4
 8001d24:	2106      	movs	r1, #6
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fad6 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* qspi write read */
                if (res != 0)                                                                               /* check result */
 8001d30:	7cfb      	ldrb	r3, [r7, #19]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <a_w25qxx_erase_sector+0x54e>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                  /* write enable failed */
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4815      	ldr	r0, [pc, #84]	; (8001d90 <a_w25qxx_erase_sector+0x59c>)
 8001d3c:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0b0      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 4,
 8001d42:	2300      	movs	r3, #0
 8001d44:	930a      	str	r3, [sp, #40]	; 0x28
 8001d46:	2300      	movs	r3, #0
 8001d48:	9309      	str	r3, [sp, #36]	; 0x24
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	9308      	str	r3, [sp, #32]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9307      	str	r3, [sp, #28]
 8001d52:	2300      	movs	r3, #0
 8001d54:	9306      	str	r3, [sp, #24]
 8001d56:	2300      	movs	r3, #0
 8001d58:	9305      	str	r3, [sp, #20]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9304      	str	r3, [sp, #16]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	9303      	str	r3, [sp, #12]
 8001d62:	2300      	movs	r3, #0
 8001d64:	9302      	str	r3, [sp, #8]
 8001d66:	2303      	movs	r3, #3
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2204      	movs	r2, #4
 8001d72:	2120      	movs	r1, #32
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7fe faaf 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8001d7e:	7cfb      	ldrb	r3, [r7, #19]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d048      	beq.n	8001e16 <a_w25qxx_erase_sector+0x622>
            {
                handle->debug_print("w25qxx: sector erase 4k failed.\n");                                   /* sector erase 4k failed */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <a_w25qxx_erase_sector+0x5a0>)
 8001d8a:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e089      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
 8001d90:	08007ba8 	.word	0x08007ba8
 8001d94:	080083f0 	.word	0x080083f0
 8001d98:	08007eb4 	.word	0x08007eb4
 8001d9c:	08007c0c 	.word	0x08007c0c
 8001da0:	08008414 	.word	0x08008414
 8001da4:	080081a4 	.word	0x080081a4
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7f1b      	ldrb	r3, [r3, #28]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d12c      	bne.n	8001e0a <a_w25qxx_erase_sector+0x616>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8b5b      	ldrh	r3, [r3, #26]
 8001db4:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d926      	bls.n	8001e0a <a_w25qxx_erase_sector+0x616>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 4,
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9308      	str	r3, [sp, #32]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9307      	str	r3, [sp, #28]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9306      	str	r3, [sp, #24]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9305      	str	r3, [sp, #20]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9304      	str	r3, [sp, #16]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	9303      	str	r3, [sp, #12]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9302      	str	r3, [sp, #8]
 8001de0:	2304      	movs	r3, #4
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	2304      	movs	r3, #4
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	2204      	movs	r2, #4
 8001dec:	2120      	movs	r1, #32
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe fa72 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001df4:	4603      	mov	r3, r0
 8001df6:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8001df8:	7cfb      	ldrb	r3, [r7, #19]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <a_w25qxx_erase_sector+0x622>
            {
                handle->debug_print("w25qxx: sector erase 4k failed.\n");                                   /* sector erase 4k failed */
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	482a      	ldr	r0, [pc, #168]	; (8001eac <a_w25qxx_erase_sector+0x6b8>)
 8001e04:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e04c      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                      /* address mode is invalid */
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	4828      	ldr	r0, [pc, #160]	; (8001eb0 <a_w25qxx_erase_sector+0x6bc>)
 8001e10:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e046      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
        }
        
        timeout = 400;                                                                                      /* max 400 ms */
 8001e16:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001e1a:	617b      	str	r3, [r7, #20]
        while (timeout != 0)                                                                                /* check timeout */
 8001e1c:	e033      	b.n	8001e86 <a_w25qxx_erase_sector+0x692>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 4,
 8001e1e:	2304      	movs	r3, #4
 8001e20:	930a      	str	r3, [sp, #40]	; 0x28
 8001e22:	2301      	movs	r3, #1
 8001e24:	9309      	str	r3, [sp, #36]	; 0x24
 8001e26:	f107 0312 	add.w	r3, r7, #18
 8001e2a:	9308      	str	r3, [sp, #32]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9307      	str	r3, [sp, #28]
 8001e30:	2300      	movs	r3, #0
 8001e32:	9306      	str	r3, [sp, #24]
 8001e34:	2300      	movs	r3, #0
 8001e36:	9305      	str	r3, [sp, #20]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9304      	str	r3, [sp, #16]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9303      	str	r3, [sp, #12]
 8001e40:	2300      	movs	r3, #0
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	2300      	movs	r3, #0
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	2204      	movs	r2, #4
 8001e50:	2105      	movs	r1, #5
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fa40 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0,
                                          (uint8_t *)&status, 1, 4);                                        /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8001e5c:	7cfb      	ldrb	r3, [r7, #19]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <a_w25qxx_erase_sector+0x67a>
            {
                handle->debug_print("w25qxx: get status1 failed.\n");                                       /* get status1 failed */
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	4813      	ldr	r0, [pc, #76]	; (8001eb4 <a_w25qxx_erase_sector+0x6c0>)
 8001e68:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e01a      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
            }
            if ((status & 0x01) == 0x00)                                                                    /* check status */
 8001e6e:	7cbb      	ldrb	r3, [r7, #18]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <a_w25qxx_erase_sector+0x69a>
            {
                break;                                                                                      /* break */
            }
            timeout--;                                                                                      /* timeout-- */
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
            handle->delay_ms(1);                                                                            /* delay 1 ms */
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2001      	movs	r0, #1
 8001e84:	4798      	blx	r3
        while (timeout != 0)                                                                                /* check timeout */
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1c8      	bne.n	8001e1e <a_w25qxx_erase_sector+0x62a>
 8001e8c:	e000      	b.n	8001e90 <a_w25qxx_erase_sector+0x69c>
                break;                                                                                      /* break */
 8001e8e:	bf00      	nop
        }
        if (timeout == 0)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <a_w25qxx_erase_sector+0x6ae>
        {
            handle->debug_print("w25qxx: sector erase 4k timeout.\n");                                      /* sector erase 4k timeout */
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <a_w25qxx_erase_sector+0x6c4>)
 8001e9c:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <a_w25qxx_erase_sector+0x6b0>
        }
    }
    
    return 0;                                                                                               /* success return 0 */
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	080083f0 	.word	0x080083f0
 8001eb0:	08007eb4 	.word	0x08007eb4
 8001eb4:	08007c0c 	.word	0x08007c0c
 8001eb8:	08008414 	.word	0x08008414

08001ebc <a_w25qxx_page_program>:
 *            - 0 success
 *            - 1 page program failed
 * @note      none
 */
static uint8_t a_w25qxx_page_program(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint16_t len)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b092      	sub	sp, #72	; 0x48
 8001ec0:	af0c      	add	r7, sp, #48	; 0x30
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t status;
    uint32_t timeout;
    uint8_t buf[2];

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                           /* spi interface */
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f040 823b 	bne.w	800234c <a_w25qxx_page_program+0x490>
    {
        if (handle->dual_quad_spi_enable != 0)                                                              /* enable dual quad spi */
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	7fdb      	ldrb	r3, [r3, #31]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8129 	beq.w	8002132 <a_w25qxx_page_program+0x276>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9308      	str	r3, [sp, #32]
 8001eec:	2300      	movs	r3, #0
 8001eee:	9307      	str	r3, [sp, #28]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9306      	str	r3, [sp, #24]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9305      	str	r3, [sp, #20]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	9304      	str	r3, [sp, #16]
 8001efc:	2300      	movs	r3, #0
 8001efe:	9303      	str	r3, [sp, #12]
 8001f00:	2300      	movs	r3, #0
 8001f02:	9302      	str	r3, [sp, #8]
 8001f04:	2300      	movs	r3, #0
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2201      	movs	r2, #1
 8001f10:	2106      	movs	r1, #6
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f7fe f9e0 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* qspi write read */
            if (res != 0)                                                                                   /* check result */
 8001f1c:	7cfb      	ldrb	r3, [r7, #19]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <a_w25qxx_page_program+0x72>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	48a0      	ldr	r0, [pc, #640]	; (80021a8 <a_w25qxx_page_program+0x2ec>)
 8001f28:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e345      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	7f1b      	ldrb	r3, [r3, #28]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d17f      	bne.n	8002036 <a_w25qxx_page_program+0x17a>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8b5b      	ldrh	r3, [r3, #26]
 8001f3a:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d952      	bls.n	8001fe8 <a_w25qxx_page_program+0x12c>
                {
                    buf[0] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	0e1b      	lsrs	r3, r3, #24
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8001f4e:	2300      	movs	r3, #0
 8001f50:	9309      	str	r3, [sp, #36]	; 0x24
 8001f52:	2300      	movs	r3, #0
 8001f54:	9308      	str	r3, [sp, #32]
 8001f56:	2301      	movs	r3, #1
 8001f58:	9307      	str	r3, [sp, #28]
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	9306      	str	r3, [sp, #24]
 8001f60:	2300      	movs	r3, #0
 8001f62:	9305      	str	r3, [sp, #20]
 8001f64:	2300      	movs	r3, #0
 8001f66:	9304      	str	r3, [sp, #16]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9303      	str	r3, [sp, #12]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	2300      	movs	r3, #0
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2300      	movs	r3, #0
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	21c5      	movs	r1, #197	; 0xc5
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7fe f9aa 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001f84:	4603      	mov	r3, r0
 8001f86:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                          /* spi write read */
                    if (res != 0)                                                                           /* check result */
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <a_w25qxx_page_program+0xde>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4886      	ldr	r0, [pc, #536]	; (80021ac <a_w25qxx_page_program+0x2f0>)
 8001f94:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e30f      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
                    }
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9308      	str	r3, [sp, #32]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	9307      	str	r3, [sp, #28]
 8001faa:	2300      	movs	r3, #0
 8001fac:	9306      	str	r3, [sp, #24]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9305      	str	r3, [sp, #20]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	9304      	str	r3, [sp, #16]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9303      	str	r3, [sp, #12]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	9302      	str	r3, [sp, #8]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2106      	movs	r1, #6
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7fe f983 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                       /* qspi write read */
                    if (res != 0)                                                                           /* check result */
 8001fd6:	7cfb      	ldrb	r3, [r7, #19]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <a_w25qxx_page_program+0x12c>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	4871      	ldr	r0, [pc, #452]	; (80021a8 <a_w25qxx_page_program+0x2ec>)
 8001fe2:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e2e8      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_PAGE_PROGRAM, 1,
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	2201      	movs	r2, #1
 8001fec:	920a      	str	r2, [sp, #40]	; 0x28
 8001fee:	2200      	movs	r2, #0
 8001ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	9208      	str	r2, [sp, #32]
 8001ff6:	9307      	str	r3, [sp, #28]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	9306      	str	r3, [sp, #24]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9305      	str	r3, [sp, #20]
 8002000:	2300      	movs	r3, #0
 8002002:	9304      	str	r3, [sp, #16]
 8002004:	2300      	movs	r3, #0
 8002006:	9303      	str	r3, [sp, #12]
 8002008:	2300      	movs	r3, #0
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	2303      	movs	r3, #3
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2301      	movs	r3, #1
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2201      	movs	r2, #1
 8002018:	2102      	movs	r1, #2
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f7fe f95c 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8002020:	4603      	mov	r3, r0
 8002022:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               0, data, len,
                                               NULL, 0x00, 1);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03c      	beq.n	80020a4 <a_w25qxx_page_program+0x1e8>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	4860      	ldr	r0, [pc, #384]	; (80021b0 <a_w25qxx_page_program+0x2f4>)
 8002030:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002032:	2301      	movs	r3, #1
 8002034:	e2c1      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	7f1b      	ldrb	r3, [r3, #28]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d12c      	bne.n	8002098 <a_w25qxx_page_program+0x1dc>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8b5b      	ldrh	r3, [r3, #26]
 8002042:	f64e 7217 	movw	r2, #61207	; 0xef17
 8002046:	4293      	cmp	r3, r2
 8002048:	d926      	bls.n	8002098 <a_w25qxx_page_program+0x1dc>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_PAGE_PROGRAM, 1,
 800204a:	887b      	ldrh	r3, [r7, #2]
 800204c:	2201      	movs	r2, #1
 800204e:	920a      	str	r2, [sp, #40]	; 0x28
 8002050:	2200      	movs	r2, #0
 8002052:	9209      	str	r2, [sp, #36]	; 0x24
 8002054:	2200      	movs	r2, #0
 8002056:	9208      	str	r2, [sp, #32]
 8002058:	9307      	str	r3, [sp, #28]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	9306      	str	r3, [sp, #24]
 800205e:	2300      	movs	r3, #0
 8002060:	9305      	str	r3, [sp, #20]
 8002062:	2300      	movs	r3, #0
 8002064:	9304      	str	r3, [sp, #16]
 8002066:	2300      	movs	r3, #0
 8002068:	9303      	str	r3, [sp, #12]
 800206a:	2300      	movs	r3, #0
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	2304      	movs	r3, #4
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2301      	movs	r3, #1
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2201      	movs	r2, #1
 800207a:	2102      	movs	r1, #2
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7fe f92b 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8002082:	4603      	mov	r3, r0
 8002084:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               0, data, len,
                                               NULL, 0x00, 1);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 8002086:	7cfb      	ldrb	r3, [r7, #19]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00b      	beq.n	80020a4 <a_w25qxx_page_program+0x1e8>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	4847      	ldr	r0, [pc, #284]	; (80021b0 <a_w25qxx_page_program+0x2f4>)
 8002092:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002094:	2301      	movs	r3, #1
 8002096:	e290      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	4845      	ldr	r0, [pc, #276]	; (80021b4 <a_w25qxx_page_program+0x2f8>)
 800209e:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 80020a0:	2301      	movs	r3, #1
 80020a2:	e28a      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
            }
            
            timeout = 3 * 100;                                                                              /* max 3 ms */
 80020a4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80020a8:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 80020aa:	e033      	b.n	8002114 <a_w25qxx_page_program+0x258>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 1,
 80020ac:	2301      	movs	r3, #1
 80020ae:	930a      	str	r3, [sp, #40]	; 0x28
 80020b0:	2301      	movs	r3, #1
 80020b2:	9309      	str	r3, [sp, #36]	; 0x24
 80020b4:	f107 0312 	add.w	r3, r7, #18
 80020b8:	9308      	str	r3, [sp, #32]
 80020ba:	2300      	movs	r3, #0
 80020bc:	9307      	str	r3, [sp, #28]
 80020be:	2300      	movs	r3, #0
 80020c0:	9306      	str	r3, [sp, #24]
 80020c2:	2300      	movs	r3, #0
 80020c4:	9305      	str	r3, [sp, #20]
 80020c6:	2300      	movs	r3, #0
 80020c8:	9304      	str	r3, [sp, #16]
 80020ca:	2300      	movs	r3, #0
 80020cc:	9303      	str	r3, [sp, #12]
 80020ce:	2300      	movs	r3, #0
 80020d0:	9302      	str	r3, [sp, #8]
 80020d2:	2300      	movs	r3, #0
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	2300      	movs	r3, #0
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2300      	movs	r3, #0
 80020dc:	2201      	movs	r2, #1
 80020de:	2105      	movs	r1, #5
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7fe f8f9 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80020e6:	4603      	mov	r3, r0
 80020e8:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0,
                                              (uint8_t *)&status, 1, 1);                                    /* spi write read */
                if (res != 0)                                                                               /* check result */
 80020ea:	7cfb      	ldrb	r3, [r7, #19]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <a_w25qxx_page_program+0x240>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	482e      	ldr	r0, [pc, #184]	; (80021b0 <a_w25qxx_page_program+0x2f4>)
 80020f6:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80020f8:	2301      	movs	r3, #1
 80020fa:	e25e      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 80020fc:	7cbb      	ldrb	r3, [r7, #18]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <a_w25qxx_page_program+0x260>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3b01      	subs	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
                handle->delay_us(10);                                                                       /* delay 10 us */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	200a      	movs	r0, #10
 8002112:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1c8      	bne.n	80020ac <a_w25qxx_page_program+0x1f0>
 800211a:	e000      	b.n	800211e <a_w25qxx_page_program+0x262>
                    break;                                                                                  /* break */
 800211c:	bf00      	nop
            }
            if (timeout == 0)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	f040 8249 	bne.w	80025b8 <a_w25qxx_page_program+0x6fc>
            {
                handle->debug_print("w25qxx: page program timeout.\n");                                     /* page program timeout */
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	4823      	ldr	r0, [pc, #140]	; (80021b8 <a_w25qxx_page_program+0x2fc>)
 800212c:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 800212e:	2301      	movs	r3, #1
 8002130:	e243      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
            }
        }
        else                                                                                                /* single spi */
        {
            buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                           /* write enable command */
 8002132:	2306      	movs	r3, #6
 8002134:	743b      	strb	r3, [r7, #16]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                              /* spi write read */
 8002136:	f107 0110 	add.w	r1, r7, #16
 800213a:	2300      	movs	r3, #0
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2300      	movs	r3, #0
 8002140:	2201      	movs	r2, #1
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7fe f89c 	bl	8000280 <a_w25qxx_spi_write_read>
 8002148:	4603      	mov	r3, r0
 800214a:	74fb      	strb	r3, [r7, #19]
            if (res != 0)                                                                                   /* check result */
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <a_w25qxx_page_program+0x2a2>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4814      	ldr	r0, [pc, #80]	; (80021a8 <a_w25qxx_page_program+0x2ec>)
 8002158:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 800215a:	2301      	movs	r3, #1
 800215c:	e22d      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	7f1b      	ldrb	r3, [r3, #28]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d173      	bne.n	800224e <a_w25qxx_page_program+0x392>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8b5b      	ldrh	r3, [r3, #26]
 800216a:	f64e 7217 	movw	r2, #61207	; 0xef17
 800216e:	4293      	cmp	r3, r2
 8002170:	d93a      	bls.n	80021e8 <a_w25qxx_page_program+0x32c>
                {
                    buf[0] = 0xC5;                                                                          /* write extended addr register command */
 8002172:	23c5      	movs	r3, #197	; 0xc5
 8002174:	743b      	strb	r3, [r7, #16]
                    buf[1] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	0e1b      	lsrs	r3, r3, #24
 800217a:	b2db      	uxtb	r3, r3
 800217c:	747b      	strb	r3, [r7, #17]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                      /* spi write read */
 800217e:	f107 0110 	add.w	r1, r7, #16
 8002182:	2300      	movs	r3, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2300      	movs	r3, #0
 8002188:	2202      	movs	r2, #2
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f7fe f878 	bl	8000280 <a_w25qxx_spi_write_read>
 8002190:	4603      	mov	r3, r0
 8002192:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d010      	beq.n	80021bc <a_w25qxx_page_program+0x300>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	4803      	ldr	r0, [pc, #12]	; (80021ac <a_w25qxx_page_program+0x2f0>)
 80021a0:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 80021a2:	2301      	movs	r3, #1
 80021a4:	e209      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
 80021a6:	bf00      	nop
 80021a8:	08007ba8 	.word	0x08007ba8
 80021ac:	080081a4 	.word	0x080081a4
 80021b0:	08008368 	.word	0x08008368
 80021b4:	08007eb4 	.word	0x08007eb4
 80021b8:	08008388 	.word	0x08008388
                    }
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                   /* write enable command */
 80021bc:	2306      	movs	r3, #6
 80021be:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                      /* spi write read */
 80021c0:	f107 0110 	add.w	r1, r7, #16
 80021c4:	2300      	movs	r3, #0
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2300      	movs	r3, #0
 80021ca:	2201      	movs	r2, #1
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7fe f857 	bl	8000280 <a_w25qxx_spi_write_read>
 80021d2:	4603      	mov	r3, r0
 80021d4:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <a_w25qxx_page_program+0x32c>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	489d      	ldr	r0, [pc, #628]	; (8002458 <a_w25qxx_page_program+0x59c>)
 80021e2:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 80021e4:	2301      	movs	r3, #1
 80021e6:	e1e8      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
                    }
                }
                handle->buf[0] = W25QXX_COMMAND_PAGE_PROGRAM;                                               /* page program command */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                handle->buf[1] = (addr >> 16) & 0xFF;                                                       /* 23 - 16 bits */
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	0c1b      	lsrs	r3, r3, #16
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                handle->buf[2] = (addr >> 8) & 0xFF;                                                        /* 15 - 8  bits */
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
                handle->buf[3] = (addr >> 0) & 0xFF;                                                        /* 7 - 0 bits */
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                memcpy(&handle->buf[4], data, len);                                                         /* copy data */
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3325      	adds	r3, #37	; 0x25
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4618      	mov	r0, r3
 800221c:	f004 ffde 	bl	80071dc <memcpy>
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)handle->buf, 4 + len, NULL, 0);            /* spi write read */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	3304      	adds	r3, #4
 800222a:	461a      	mov	r2, r3
 800222c:	2300      	movs	r3, #0
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2300      	movs	r3, #0
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7fe f824 	bl	8000280 <a_w25qxx_spi_write_read>
 8002238:	4603      	mov	r3, r0
 800223a:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d04e      	beq.n	80022e0 <a_w25qxx_page_program+0x424>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4885      	ldr	r0, [pc, #532]	; (800245c <a_w25qxx_page_program+0x5a0>)
 8002248:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 800224a:	2301      	movs	r3, #1
 800224c:	e1b5      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	7f1b      	ldrb	r3, [r3, #28]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d13e      	bne.n	80022d4 <a_w25qxx_page_program+0x418>
                     && (handle->type >= W25Q256))                                                          /* 4 address mode */
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8b5b      	ldrh	r3, [r3, #26]
 800225a:	f64e 7217 	movw	r2, #61207	; 0xef17
 800225e:	4293      	cmp	r3, r2
 8002260:	d938      	bls.n	80022d4 <a_w25qxx_page_program+0x418>
            {
                handle->buf[0] = W25QXX_COMMAND_PAGE_PROGRAM;                                               /* page program command */
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2202      	movs	r2, #2
 8002266:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                handle->buf[1] = (addr >> 24) & 0xFF;                                                       /* 31 - 24 bits */
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	0e1b      	lsrs	r3, r3, #24
 800226e:	b2da      	uxtb	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                handle->buf[2] = (addr >> 16) & 0xFF;                                                       /* 23 - 16 bits */
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	b2da      	uxtb	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
                handle->buf[3] = (addr >> 8) & 0xFF;                                                        /* 15 - 8  bits */
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	b2da      	uxtb	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                handle->buf[4] = (addr >> 0) & 0xFF;                                                        /* 7 - 0 bits */
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                memcpy(&handle->buf[5], data, len);                                                         /* copy data */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3326      	adds	r3, #38	; 0x26
 800229c:	887a      	ldrh	r2, [r7, #2]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f004 ff9b 	bl	80071dc <memcpy>
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)handle->buf, 5 + len, NULL, 0);            /* spi write read */
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f103 0121 	add.w	r1, r3, #33	; 0x21
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	3305      	adds	r3, #5
 80022b0:	461a      	mov	r2, r3
 80022b2:	2300      	movs	r3, #0
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2300      	movs	r3, #0
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7fd ffe1 	bl	8000280 <a_w25qxx_spi_write_read>
 80022be:	4603      	mov	r3, r0
 80022c0:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 80022c2:	7cfb      	ldrb	r3, [r7, #19]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00b      	beq.n	80022e0 <a_w25qxx_page_program+0x424>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	4863      	ldr	r0, [pc, #396]	; (800245c <a_w25qxx_page_program+0x5a0>)
 80022ce:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80022d0:	2301      	movs	r3, #1
 80022d2:	e172      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	4861      	ldr	r0, [pc, #388]	; (8002460 <a_w25qxx_page_program+0x5a4>)
 80022da:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 80022dc:	2301      	movs	r3, #1
 80022de:	e16c      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
            }
            
            timeout = 3 * 100;                                                                              /* max 3 ms */
 80022e0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80022e4:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 80022e6:	e022      	b.n	800232e <a_w25qxx_page_program+0x472>
            {
                buf[0] = W25QXX_COMMAND_READ_STATUS_REG1;                                                   /* read status1 command */
 80022e8:	2305      	movs	r3, #5
 80022ea:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, (uint8_t *)&status, 1);            /* spi write read */
 80022ec:	f107 0312 	add.w	r3, r7, #18
 80022f0:	f107 0110 	add.w	r1, r7, #16
 80022f4:	2201      	movs	r2, #1
 80022f6:	9200      	str	r2, [sp, #0]
 80022f8:	2201      	movs	r2, #1
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7fd ffc0 	bl	8000280 <a_w25qxx_spi_write_read>
 8002300:	4603      	mov	r3, r0
 8002302:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <a_w25qxx_page_program+0x45a>
                {
                    handle->debug_print("w25qxx: get status1 failed.\n");                                   /* get status1 failed */
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4855      	ldr	r0, [pc, #340]	; (8002464 <a_w25qxx_page_program+0x5a8>)
 8002310:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002312:	2301      	movs	r3, #1
 8002314:	e151      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 8002316:	7cbb      	ldrb	r3, [r7, #18]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <a_w25qxx_page_program+0x47a>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3b01      	subs	r3, #1
 8002324:	617b      	str	r3, [r7, #20]
                handle->delay_us(10);                                                                       /* delay 10 us */
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	200a      	movs	r0, #10
 800232c:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1d9      	bne.n	80022e8 <a_w25qxx_page_program+0x42c>
 8002334:	e000      	b.n	8002338 <a_w25qxx_page_program+0x47c>
                    break;                                                                                  /* break */
 8002336:	bf00      	nop
            }
            if (timeout == 0)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 813c 	bne.w	80025b8 <a_w25qxx_page_program+0x6fc>
            {
                handle->debug_print("w25qxx: page program timeout.\n");                                     /* page program timeout */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	4848      	ldr	r0, [pc, #288]	; (8002468 <a_w25qxx_page_program+0x5ac>)
 8002346:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8002348:	2301      	movs	r3, #1
 800234a:	e136      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
            }
        }
    }
    else
    {
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 800234c:	2300      	movs	r3, #0
 800234e:	930a      	str	r3, [sp, #40]	; 0x28
 8002350:	2300      	movs	r3, #0
 8002352:	9309      	str	r3, [sp, #36]	; 0x24
 8002354:	2300      	movs	r3, #0
 8002356:	9308      	str	r3, [sp, #32]
 8002358:	2300      	movs	r3, #0
 800235a:	9307      	str	r3, [sp, #28]
 800235c:	2300      	movs	r3, #0
 800235e:	9306      	str	r3, [sp, #24]
 8002360:	2300      	movs	r3, #0
 8002362:	9305      	str	r3, [sp, #20]
 8002364:	2300      	movs	r3, #0
 8002366:	9304      	str	r3, [sp, #16]
 8002368:	2300      	movs	r3, #0
 800236a:	9303      	str	r3, [sp, #12]
 800236c:	2300      	movs	r3, #0
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	2300      	movs	r3, #0
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	2300      	movs	r3, #0
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2300      	movs	r3, #0
 800237a:	2204      	movs	r2, #4
 800237c:	2106      	movs	r1, #6
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7fd ffaa 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8002384:	4603      	mov	r3, r0
 8002386:	74fb      	strb	r3, [r7, #19]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                                   /* qspi write read */
        if (res != 0)                                                                                       /* check result */
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <a_w25qxx_page_program+0x4de>
        {
            handle->debug_print("w25qxx: write enable failed.\n");                                          /* write enable failed */
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	4831      	ldr	r0, [pc, #196]	; (8002458 <a_w25qxx_page_program+0x59c>)
 8002394:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8002396:	2301      	movs	r3, #1
 8002398:	e10f      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
        }
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                             /* 3 address mode */
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	7f1b      	ldrb	r3, [r3, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 808d 	bne.w	80024be <a_w25qxx_page_program+0x602>
        {
            if (handle->type >= W25Q256)                                                                    /* >128Mb */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8b5b      	ldrh	r3, [r3, #26]
 80023a8:	f64e 7217 	movw	r2, #61207	; 0xef17
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d95f      	bls.n	8002470 <a_w25qxx_page_program+0x5b4>
            {
                buf[0] = (addr >> 24) & 0xFF;                                                               /* 31 - 24 bits */
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	0e1b      	lsrs	r3, r3, #24
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 80023b8:	2304      	movs	r3, #4
 80023ba:	930a      	str	r3, [sp, #40]	; 0x28
 80023bc:	2300      	movs	r3, #0
 80023be:	9309      	str	r3, [sp, #36]	; 0x24
 80023c0:	2300      	movs	r3, #0
 80023c2:	9308      	str	r3, [sp, #32]
 80023c4:	2301      	movs	r3, #1
 80023c6:	9307      	str	r3, [sp, #28]
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	9306      	str	r3, [sp, #24]
 80023ce:	2300      	movs	r3, #0
 80023d0:	9305      	str	r3, [sp, #20]
 80023d2:	2300      	movs	r3, #0
 80023d4:	9304      	str	r3, [sp, #16]
 80023d6:	2300      	movs	r3, #0
 80023d8:	9303      	str	r3, [sp, #12]
 80023da:	2300      	movs	r3, #0
 80023dc:	9302      	str	r3, [sp, #8]
 80023de:	2300      	movs	r3, #0
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	2300      	movs	r3, #0
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2300      	movs	r3, #0
 80023e8:	2204      	movs	r2, #4
 80023ea:	21c5      	movs	r1, #197	; 0xc5
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7fd ff73 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80023f2:	4603      	mov	r3, r0
 80023f4:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <a_w25qxx_page_program+0x54c>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                  /* write extended addr register failed */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	481a      	ldr	r0, [pc, #104]	; (800246c <a_w25qxx_page_program+0x5b0>)
 8002402:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002404:	2301      	movs	r3, #1
 8002406:	e0d8      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8002408:	2300      	movs	r3, #0
 800240a:	930a      	str	r3, [sp, #40]	; 0x28
 800240c:	2300      	movs	r3, #0
 800240e:	9309      	str	r3, [sp, #36]	; 0x24
 8002410:	2300      	movs	r3, #0
 8002412:	9308      	str	r3, [sp, #32]
 8002414:	2300      	movs	r3, #0
 8002416:	9307      	str	r3, [sp, #28]
 8002418:	2300      	movs	r3, #0
 800241a:	9306      	str	r3, [sp, #24]
 800241c:	2300      	movs	r3, #0
 800241e:	9305      	str	r3, [sp, #20]
 8002420:	2300      	movs	r3, #0
 8002422:	9304      	str	r3, [sp, #16]
 8002424:	2300      	movs	r3, #0
 8002426:	9303      	str	r3, [sp, #12]
 8002428:	2300      	movs	r3, #0
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	2300      	movs	r3, #0
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	2300      	movs	r3, #0
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2300      	movs	r3, #0
 8002436:	2204      	movs	r2, #4
 8002438:	2106      	movs	r1, #6
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f7fd ff4c 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8002440:	4603      	mov	r3, r0
 8002442:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* qspi write read */
                if (res != 0)                                                                               /* check result */
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d012      	beq.n	8002470 <a_w25qxx_page_program+0x5b4>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                  /* write enable failed */
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	4802      	ldr	r0, [pc, #8]	; (8002458 <a_w25qxx_page_program+0x59c>)
 8002450:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002452:	2301      	movs	r3, #1
 8002454:	e0b1      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
 8002456:	bf00      	nop
 8002458:	08007ba8 	.word	0x08007ba8
 800245c:	08008368 	.word	0x08008368
 8002460:	08007eb4 	.word	0x08007eb4
 8002464:	08007c0c 	.word	0x08007c0c
 8002468:	08008388 	.word	0x08008388
 800246c:	080081a4 	.word	0x080081a4
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_PAGE_PROGRAM, 4,
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	2204      	movs	r2, #4
 8002474:	920a      	str	r2, [sp, #40]	; 0x28
 8002476:	2200      	movs	r2, #0
 8002478:	9209      	str	r2, [sp, #36]	; 0x24
 800247a:	2200      	movs	r2, #0
 800247c:	9208      	str	r2, [sp, #32]
 800247e:	9307      	str	r3, [sp, #28]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	9306      	str	r3, [sp, #24]
 8002484:	2300      	movs	r3, #0
 8002486:	9305      	str	r3, [sp, #20]
 8002488:	2300      	movs	r3, #0
 800248a:	9304      	str	r3, [sp, #16]
 800248c:	2300      	movs	r3, #0
 800248e:	9303      	str	r3, [sp, #12]
 8002490:	2300      	movs	r3, #0
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	2303      	movs	r3, #3
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2304      	movs	r3, #4
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2204      	movs	r2, #4
 80024a0:	2102      	movs	r1, #2
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f7fd ff18 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80024a8:	4603      	mov	r3, r0
 80024aa:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           0, data, len,
                                           NULL, 0x00, 4);                                                  /* spi write read */
            if (res != 0)                                                                                   /* check result */
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d03c      	beq.n	800252c <a_w25qxx_page_program+0x670>
            {
                handle->debug_print("w25qxx: page program failed.\n");                                      /* page program failed */
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	4843      	ldr	r0, [pc, #268]	; (80025c4 <a_w25qxx_page_program+0x708>)
 80024b8:	4798      	blx	r3
               
                  return 1;                                                                                 /* return error */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e07d      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	7f1b      	ldrb	r3, [r3, #28]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d12c      	bne.n	8002520 <a_w25qxx_page_program+0x664>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8b5b      	ldrh	r3, [r3, #26]
 80024ca:	f64e 7217 	movw	r2, #61207	; 0xef17
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d926      	bls.n	8002520 <a_w25qxx_page_program+0x664>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_PAGE_PROGRAM, 4,
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	2204      	movs	r2, #4
 80024d6:	920a      	str	r2, [sp, #40]	; 0x28
 80024d8:	2200      	movs	r2, #0
 80024da:	9209      	str	r2, [sp, #36]	; 0x24
 80024dc:	2200      	movs	r2, #0
 80024de:	9208      	str	r2, [sp, #32]
 80024e0:	9307      	str	r3, [sp, #28]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	9306      	str	r3, [sp, #24]
 80024e6:	2300      	movs	r3, #0
 80024e8:	9305      	str	r3, [sp, #20]
 80024ea:	2300      	movs	r3, #0
 80024ec:	9304      	str	r3, [sp, #16]
 80024ee:	2300      	movs	r3, #0
 80024f0:	9303      	str	r3, [sp, #12]
 80024f2:	2300      	movs	r3, #0
 80024f4:	9302      	str	r3, [sp, #8]
 80024f6:	2304      	movs	r3, #4
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	2304      	movs	r3, #4
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2204      	movs	r2, #4
 8002502:	2102      	movs	r1, #2
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f7fd fee7 	bl	80002d8 <a_w25qxx_qspi_write_read>
 800250a:	4603      	mov	r3, r0
 800250c:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           0, data, len,
                                           NULL, 0x00, 4);                                                  /* spi write read */
            if (res != 0)                                                                                   /* check result */
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00b      	beq.n	800252c <a_w25qxx_page_program+0x670>
            {
                handle->debug_print("w25qxx: page program failed.\n");                                      /* page program failed */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	482a      	ldr	r0, [pc, #168]	; (80025c4 <a_w25qxx_page_program+0x708>)
 800251a:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 800251c:	2301      	movs	r3, #1
 800251e:	e04c      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                      /* address mode is invalid */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	4828      	ldr	r0, [pc, #160]	; (80025c8 <a_w25qxx_page_program+0x70c>)
 8002526:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8002528:	2301      	movs	r3, #1
 800252a:	e046      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
        }
        
        timeout = 3 * 100;                                                                                  /* max 3 ms */
 800252c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002530:	617b      	str	r3, [r7, #20]
        while (timeout != 0)                                                                                /* check timeout */
 8002532:	e033      	b.n	800259c <a_w25qxx_page_program+0x6e0>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 4,
 8002534:	2304      	movs	r3, #4
 8002536:	930a      	str	r3, [sp, #40]	; 0x28
 8002538:	2301      	movs	r3, #1
 800253a:	9309      	str	r3, [sp, #36]	; 0x24
 800253c:	f107 0312 	add.w	r3, r7, #18
 8002540:	9308      	str	r3, [sp, #32]
 8002542:	2300      	movs	r3, #0
 8002544:	9307      	str	r3, [sp, #28]
 8002546:	2300      	movs	r3, #0
 8002548:	9306      	str	r3, [sp, #24]
 800254a:	2300      	movs	r3, #0
 800254c:	9305      	str	r3, [sp, #20]
 800254e:	2300      	movs	r3, #0
 8002550:	9304      	str	r3, [sp, #16]
 8002552:	2300      	movs	r3, #0
 8002554:	9303      	str	r3, [sp, #12]
 8002556:	2300      	movs	r3, #0
 8002558:	9302      	str	r3, [sp, #8]
 800255a:	2300      	movs	r3, #0
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	2300      	movs	r3, #0
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2300      	movs	r3, #0
 8002564:	2204      	movs	r2, #4
 8002566:	2105      	movs	r1, #5
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7fd feb5 	bl	80002d8 <a_w25qxx_qspi_write_read>
 800256e:	4603      	mov	r3, r0
 8002570:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0,
                                          (uint8_t *)&status, 1, 4);                                        /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <a_w25qxx_page_program+0x6c8>
            {
                handle->debug_print("w25qxx: page program failed.\n");                                      /* page program failed */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	4811      	ldr	r0, [pc, #68]	; (80025c4 <a_w25qxx_page_program+0x708>)
 800257e:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8002580:	2301      	movs	r3, #1
 8002582:	e01a      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
            }
            if ((status & 0x01) == 0x00)                                                                    /* check status */
 8002584:	7cbb      	ldrb	r3, [r7, #18]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <a_w25qxx_page_program+0x6e8>
            {
                break;                                                                                      /* break */
            }
            timeout--;                                                                                      /* timeout-- */
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3b01      	subs	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
            handle->delay_us(10);                                                                           /* delay 10 us */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	200a      	movs	r0, #10
 800259a:	4798      	blx	r3
        while (timeout != 0)                                                                                /* check timeout */
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1c8      	bne.n	8002534 <a_w25qxx_page_program+0x678>
 80025a2:	e000      	b.n	80025a6 <a_w25qxx_page_program+0x6ea>
                break;                                                                                      /* break */
 80025a4:	bf00      	nop
        }
        if (timeout == 0)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <a_w25qxx_page_program+0x6fc>
        {
            handle->debug_print("w25qxx: page program timeout.\n");                                         /* page program timeout */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	4806      	ldr	r0, [pc, #24]	; (80025cc <a_w25qxx_page_program+0x710>)
 80025b2:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <a_w25qxx_page_program+0x6fe>
        }
    }
    
    return 0;                                                                                               /* success return 0 */
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	08008368 	.word	0x08008368
 80025c8:	08007eb4 	.word	0x08007eb4
 80025cc:	08008388 	.word	0x08008388

080025d0 <a_w25qxx_write_no_check>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_w25qxx_write_no_check(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint16_t page_remain;
    
    page_remain = 256 - addr % 256;                                         /* get remain */
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80025ea:	82fb      	strh	r3, [r7, #22]
    if (len <= page_remain)                                                 /* check length */
 80025ec:	8afb      	ldrh	r3, [r7, #22]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d801      	bhi.n	80025f8 <a_w25qxx_write_no_check+0x28>
    {
        page_remain = (uint16_t)len;                                        /* page remain */
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	82fb      	strh	r3, [r7, #22]
    }
    while( 1)                                                               /* loop */
    { 
        res = a_w25qxx_page_program(handle, addr, data, page_remain);       /* page program */
 80025f8:	8afb      	ldrh	r3, [r7, #22]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f7ff fc5c 	bl	8001ebc <a_w25qxx_page_program>
 8002604:	4603      	mov	r3, r0
 8002606:	757b      	strb	r3, [r7, #21]
        if (res != 0)
 8002608:	7d7b      	ldrb	r3, [r7, #21]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <a_w25qxx_write_no_check+0x4a>
        {
            handle->debug_print("w25qxx: page program failed.\n");          /* page program failed */
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	4812      	ldr	r0, [pc, #72]	; (800265c <a_w25qxx_write_no_check+0x8c>)
 8002614:	4798      	blx	r3
           
            return 1;                                                       /* return error */
 8002616:	2301      	movs	r3, #1
 8002618:	e01c      	b.n	8002654 <a_w25qxx_write_no_check+0x84>
        }
        if (len == page_remain)                                             /* check length */
 800261a:	8afb      	ldrh	r3, [r7, #22]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d016      	beq.n	8002650 <a_w25qxx_write_no_check+0x80>
        {
            break;                                                          /* break loop */
        }
        else
        {
            data += page_remain;                                            /* data + page_remain */
 8002622:	8afb      	ldrh	r3, [r7, #22]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	4413      	add	r3, r2
 8002628:	607b      	str	r3, [r7, #4]
            addr += page_remain;                                            /* address + page_remain */
 800262a:	8afb      	ldrh	r3, [r7, #22]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	4413      	add	r3, r2
 8002630:	60bb      	str	r3, [r7, #8]
            len -= page_remain;                                             /* length - page_remain */
 8002632:	8afb      	ldrh	r3, [r7, #22]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	603b      	str	r3, [r7, #0]
            if (len > 256)                                                  /* check length */
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002640:	d903      	bls.n	800264a <a_w25qxx_write_no_check+0x7a>
            {
                page_remain = 256;                                          /* set page remain */
 8002642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002646:	82fb      	strh	r3, [r7, #22]
 8002648:	e7d6      	b.n	80025f8 <a_w25qxx_write_no_check+0x28>
            }
            else
            {
                page_remain = (uint16_t)len;                                /* set length */
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	82fb      	strh	r3, [r7, #22]
        res = a_w25qxx_page_program(handle, addr, data, page_remain);       /* page program */
 800264e:	e7d3      	b.n	80025f8 <a_w25qxx_write_no_check+0x28>
            break;                                                          /* break loop */
 8002650:	bf00      	nop
            }
        }
    }
    
    return 0;                                                               /* success return 0 */
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	08008368 	.word	0x08008368

08002660 <w25qxx_write>:
 *            - 4 read failed
 *            - 5 erase sector failed
 * @note      none
 */
uint8_t w25qxx_write(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
    uint32_t sec_pos;
    uint32_t sec_off;
    uint32_t sec_remain;
    uint32_t i;
    
    if (handle == NULL)                                                                        /* check handle */
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <w25qxx_write+0x18>
    {
        return 2;                                                                              /* return error */
 8002674:	2302      	movs	r3, #2
 8002676:	e0b3      	b.n	80027e0 <w25qxx_write+0x180>
    }   
    if (handle->inited != 1)                                                                   /* check handle initialization */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	7e1b      	ldrb	r3, [r3, #24]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d001      	beq.n	8002684 <w25qxx_write+0x24>
    {
        return 3;                                                                              /* return error */
 8002680:	2303      	movs	r3, #3
 8002682:	e0ad      	b.n	80027e0 <w25qxx_write+0x180>
    }

    sec_pos = addr / 4096;                                                                     /* get sector position */
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	0b1b      	lsrs	r3, r3, #12
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
    sec_off = addr % 4096;                                                                     /* get sector offset */
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002690:	623b      	str	r3, [r7, #32]
    sec_remain = 4096 - sec_off;                                                               /* get sector remain */
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002698:	61fb      	str	r3, [r7, #28]
    if (len <= sec_remain)                                                                     /* check length */
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d801      	bhi.n	80026a6 <w25qxx_write+0x46>
    {
        sec_remain = len;                                                                      /* set remain */
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	61fb      	str	r3, [r7, #28]
    }
    while(1)                                                                                   /* loop */
    {    
        res = a_w25qxx_read(handle, sec_pos * 4096, handle->buf_4k, 4096);                     /* read 4k data */
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	0319      	lsls	r1, r3, #12
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f203 1227 	addw	r2, r3, #295	; 0x127
 80026b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7fe fe63 	bl	8001380 <a_w25qxx_read>
 80026ba:	4603      	mov	r3, r0
 80026bc:	75fb      	strb	r3, [r7, #23]
        if (res != 0)
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <w25qxx_write+0x70>
        {
            handle->debug_print("w25qxx: read failed.\n");                                     /* read failed */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	4847      	ldr	r0, [pc, #284]	; (80027e8 <w25qxx_write+0x188>)
 80026ca:	4798      	blx	r3
           
            return 4;                                                                          /* return error */
 80026cc:	2304      	movs	r3, #4
 80026ce:	e087      	b.n	80027e0 <w25qxx_write+0x180>
        }
        for (i = 0; i< sec_remain; i++)                                                        /* sec_remain length */
 80026d0:	2300      	movs	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	e00b      	b.n	80026ee <w25qxx_write+0x8e>
        {
            if (handle->buf_4k[sec_off + i] != 0xFF)                                           /* check 0xFF */
 80026d6:	6a3a      	ldr	r2, [r7, #32]
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80026e4:	2bff      	cmp	r3, #255	; 0xff
 80026e6:	d107      	bne.n	80026f8 <w25qxx_write+0x98>
        for (i = 0; i< sec_remain; i++)                                                        /* sec_remain length */
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	3301      	adds	r3, #1
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d3ef      	bcc.n	80026d6 <w25qxx_write+0x76>
 80026f6:	e000      	b.n	80026fa <w25qxx_write+0x9a>
            {
                break;                                                                         /* break loop */
 80026f8:	bf00      	nop
            }
        }
        if (i < sec_remain)                                                                    /* not all is 0xFF */
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d23b      	bcs.n	800277a <w25qxx_write+0x11a>
        {
            res = a_w25qxx_erase_sector(handle, sec_pos * 4096);                               /* erase sector */
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	031b      	lsls	r3, r3, #12
 8002706:	4619      	mov	r1, r3
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff f873 	bl	80017f4 <a_w25qxx_erase_sector>
 800270e:	4603      	mov	r3, r0
 8002710:	75fb      	strb	r3, [r7, #23]
            if (res != 0)
 8002712:	7dfb      	ldrb	r3, [r7, #23]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <w25qxx_write+0xc4>
            {
                handle->debug_print("w25qxx: erase sector failed.\n");                         /* erase sector failed */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	4833      	ldr	r0, [pc, #204]	; (80027ec <w25qxx_write+0x18c>)
 800271e:	4798      	blx	r3
               
                return 5;                                                                      /* return error */
 8002720:	2305      	movs	r3, #5
 8002722:	e05d      	b.n	80027e0 <w25qxx_write+0x180>
            }
            for (i = 0; i<sec_remain; i++)                                                     /* sec_remain length */
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e00e      	b.n	8002748 <w25qxx_write+0xe8>
            {
                handle->buf_4k[i + sec_off] = data[i];                                         /* copy data */
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	441a      	add	r2, r3
 8002730:	69b9      	ldr	r1, [r7, #24]
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	440b      	add	r3, r1
 8002736:	7811      	ldrb	r1, [r2, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	460a      	mov	r2, r1
 800273e:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
            for (i = 0; i<sec_remain; i++)                                                     /* sec_remain length */
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	3301      	adds	r3, #1
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	429a      	cmp	r2, r3
 800274e:	d3ec      	bcc.n	800272a <w25qxx_write+0xca>
            }
            res = a_w25qxx_write_no_check(handle, sec_pos * 4096, handle->buf_4k, 4096);       /* write data no check */
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	0319      	lsls	r1, r3, #12
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f203 1227 	addw	r2, r3, #295	; 0x127
 800275a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff ff36 	bl	80025d0 <a_w25qxx_write_no_check>
 8002764:	4603      	mov	r3, r0
 8002766:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                      /* check result */
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d016      	beq.n	800279c <w25qxx_write+0x13c>
            {
                handle->debug_print("w25qxx: write failed.\n");                                /* write failed */
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	481f      	ldr	r0, [pc, #124]	; (80027f0 <w25qxx_write+0x190>)
 8002774:	4798      	blx	r3
               
                return 1;                                                                      /* return error */
 8002776:	2301      	movs	r3, #1
 8002778:	e032      	b.n	80027e0 <w25qxx_write+0x180>
            }
        }
        else
        {
            res = a_w25qxx_write_no_check(handle, addr, data, sec_remain);                     /* write data */
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f7ff ff25 	bl	80025d0 <a_w25qxx_write_no_check>
 8002786:	4603      	mov	r3, r0
 8002788:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                      /* check result */
 800278a:	7dfb      	ldrb	r3, [r7, #23]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <w25qxx_write+0x13c>
            {
                handle->debug_print("w25qxx: write failed.\n");                                /* write failed */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	4816      	ldr	r0, [pc, #88]	; (80027f0 <w25qxx_write+0x190>)
 8002796:	4798      	blx	r3
               
                return 1;                                                                      /* return error */
 8002798:	2301      	movs	r3, #1
 800279a:	e021      	b.n	80027e0 <w25qxx_write+0x180>
            }
        }    
        if (len == sec_remain)                                                                 /* check length length*/
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d01b      	beq.n	80027dc <w25qxx_write+0x17c>
        {
            break;                                                                             /* break loop */
        }
        else
        {
            sec_pos++;                                                                         /* sector++ */
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	3301      	adds	r3, #1
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
            sec_off = 0;                                                                       /* set offset */
 80027aa:	2300      	movs	r3, #0
 80027ac:	623b      	str	r3, [r7, #32]
            data += sec_remain;                                                                /* data + remain */
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	4413      	add	r3, r2
 80027b4:	607b      	str	r3, [r7, #4]
            addr += sec_remain;                                                                /* addr + remain */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	4413      	add	r3, r2
 80027bc:	60bb      	str	r3, [r7, #8]
            len -= sec_remain;                                                                 /* len - remain */
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	603b      	str	r3, [r7, #0]
            if (len > 4096)                                                                    /* check length */
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027cc:	d903      	bls.n	80027d6 <w25qxx_write+0x176>
            {
                sec_remain = 4096;                                                             /* set 4096 */
 80027ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	e767      	b.n	80026a6 <w25qxx_write+0x46>
            }
            else
            {
                sec_remain = len;                                                              /* set length */
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	61fb      	str	r3, [r7, #28]
        res = a_w25qxx_read(handle, sec_pos * 4096, handle->buf_4k, 4096);                     /* read 4k data */
 80027da:	e764      	b.n	80026a6 <w25qxx_write+0x46>
            break;                                                                             /* break loop */
 80027dc:	bf00      	nop
            }
        }
    }
    
    return 0;                                                                                  /* success return 0 */
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3728      	adds	r7, #40	; 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	08008728 	.word	0x08008728
 80027ec:	08008740 	.word	0x08008740
 80027f0:	08008760 	.word	0x08008760

080027f4 <w25qxx_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      none
 */
uint8_t w25qxx_basic_init(w25qxx_type_t type, w25qxx_interface_t interface, w25qxx_bool_t dual_quad_spi_enable)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	80fb      	strh	r3, [r7, #6]
 80027fe:	460b      	mov	r3, r1
 8002800:	717b      	strb	r3, [r7, #5]
 8002802:	4613      	mov	r3, r2
 8002804:	713b      	strb	r3, [r7, #4]
    uint8_t res;
    
    /* link interface function */
    DRIVER_W25QXX_LINK_INIT(&gs_handle, w25qxx_handle_t);
 8002806:	f241 1228 	movw	r2, #4392	; 0x1128
 800280a:	2100      	movs	r1, #0
 800280c:	4836      	ldr	r0, [pc, #216]	; (80028e8 <w25qxx_basic_init+0xf4>)
 800280e:	f004 fcf3 	bl	80071f8 <memset>
    DRIVER_W25QXX_LINK_SPI_QSPI_INIT(&gs_handle, w25qxx_interface_spi_qspi_init);
 8002812:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <w25qxx_basic_init+0xf4>)
 8002814:	4a35      	ldr	r2, [pc, #212]	; (80028ec <w25qxx_basic_init+0xf8>)
 8002816:	601a      	str	r2, [r3, #0]
    DRIVER_W25QXX_LINK_SPI_QSPI_DEINIT(&gs_handle, w25qxx_interface_spi_qspi_deinit);
 8002818:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <w25qxx_basic_init+0xf4>)
 800281a:	4a35      	ldr	r2, [pc, #212]	; (80028f0 <w25qxx_basic_init+0xfc>)
 800281c:	605a      	str	r2, [r3, #4]
    DRIVER_W25QXX_LINK_SPI_QSPI_WRITE_READ(&gs_handle, w25qxx_interface_spi_qspi_write_read);
 800281e:	4b32      	ldr	r3, [pc, #200]	; (80028e8 <w25qxx_basic_init+0xf4>)
 8002820:	4a34      	ldr	r2, [pc, #208]	; (80028f4 <w25qxx_basic_init+0x100>)
 8002822:	609a      	str	r2, [r3, #8]
    DRIVER_W25QXX_LINK_DELAY_MS(&gs_handle, w25qxx_interface_delay_ms);
 8002824:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <w25qxx_basic_init+0xf4>)
 8002826:	4a34      	ldr	r2, [pc, #208]	; (80028f8 <w25qxx_basic_init+0x104>)
 8002828:	60da      	str	r2, [r3, #12]
    DRIVER_W25QXX_LINK_DELAY_US(&gs_handle, w25qxx_interface_delay_us);
 800282a:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <w25qxx_basic_init+0xf4>)
 800282c:	4a33      	ldr	r2, [pc, #204]	; (80028fc <w25qxx_basic_init+0x108>)
 800282e:	611a      	str	r2, [r3, #16]
    DRIVER_W25QXX_LINK_DEBUG_PRINT(&gs_handle, w25qxx_interface_debug_print);
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <w25qxx_basic_init+0xf4>)
 8002832:	4a33      	ldr	r2, [pc, #204]	; (8002900 <w25qxx_basic_init+0x10c>)
 8002834:	615a      	str	r2, [r3, #20]
    
    /* set chip type */
    res = w25qxx_set_type(&gs_handle, type);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	4619      	mov	r1, r3
 800283a:	482b      	ldr	r0, [pc, #172]	; (80028e8 <w25qxx_basic_init+0xf4>)
 800283c:	f7fd fd96 	bl	800036c <w25qxx_set_type>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d004      	beq.n	8002854 <w25qxx_basic_init+0x60>
    {
        w25qxx_interface_debug_print("w25qxx: set type failed.\n");
 800284a:	482e      	ldr	r0, [pc, #184]	; (8002904 <w25qxx_basic_init+0x110>)
 800284c:	f000 f900 	bl	8002a50 <w25qxx_interface_debug_print>
       
        return 1;
 8002850:	2301      	movs	r3, #1
 8002852:	e044      	b.n	80028de <w25qxx_basic_init+0xea>
    }
    
    /* set chip interface */
    res = w25qxx_set_interface(&gs_handle, interface);
 8002854:	797b      	ldrb	r3, [r7, #5]
 8002856:	4619      	mov	r1, r3
 8002858:	4823      	ldr	r0, [pc, #140]	; (80028e8 <w25qxx_basic_init+0xf4>)
 800285a:	f7fd fd9c 	bl	8000396 <w25qxx_set_interface>
 800285e:	4603      	mov	r3, r0
 8002860:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <w25qxx_basic_init+0x7e>
    {
        w25qxx_interface_debug_print("w25qxx: set interface failed.\n");
 8002868:	4827      	ldr	r0, [pc, #156]	; (8002908 <w25qxx_basic_init+0x114>)
 800286a:	f000 f8f1 	bl	8002a50 <w25qxx_interface_debug_print>
       
        return 1;
 800286e:	2301      	movs	r3, #1
 8002870:	e035      	b.n	80028de <w25qxx_basic_init+0xea>
    }
    
    /* set dual quad spi */
    res = w25qxx_set_dual_quad_spi(&gs_handle, dual_quad_spi_enable);
 8002872:	793b      	ldrb	r3, [r7, #4]
 8002874:	4619      	mov	r1, r3
 8002876:	481c      	ldr	r0, [pc, #112]	; (80028e8 <w25qxx_basic_init+0xf4>)
 8002878:	f7fd fd63 	bl	8000342 <w25qxx_set_dual_quad_spi>
 800287c:	4603      	mov	r3, r0
 800287e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <w25qxx_basic_init+0xa2>
    {
        w25qxx_interface_debug_print("w25qxx: set dual quad spi failed.\n");
 8002886:	4821      	ldr	r0, [pc, #132]	; (800290c <w25qxx_basic_init+0x118>)
 8002888:	f000 f8e2 	bl	8002a50 <w25qxx_interface_debug_print>
        (void)w25qxx_deinit(&gs_handle);
 800288c:	4816      	ldr	r0, [pc, #88]	; (80028e8 <w25qxx_basic_init+0xf4>)
 800288e:	f7fe fa71 	bl	8000d74 <w25qxx_deinit>
       
        return 1;
 8002892:	2301      	movs	r3, #1
 8002894:	e023      	b.n	80028de <w25qxx_basic_init+0xea>
    }
    
    /* chip init */
    res = w25qxx_init(&gs_handle);
 8002896:	4814      	ldr	r0, [pc, #80]	; (80028e8 <w25qxx_basic_init+0xf4>)
 8002898:	f7fd fe40 	bl	800051c <w25qxx_init>
 800289c:	4603      	mov	r3, r0
 800289e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d004      	beq.n	80028b0 <w25qxx_basic_init+0xbc>
    {
        w25qxx_interface_debug_print("w25qxx: init failed.\n");
 80028a6:	481a      	ldr	r0, [pc, #104]	; (8002910 <w25qxx_basic_init+0x11c>)
 80028a8:	f000 f8d2 	bl	8002a50 <w25qxx_interface_debug_print>
       
        return 1;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e016      	b.n	80028de <w25qxx_basic_init+0xea>
    }
    else
    {
        if (type >= W25Q256)
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	f64e 7217 	movw	r2, #61207	; 0xef17
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d910      	bls.n	80028dc <w25qxx_basic_init+0xe8>
        {
            res = w25qxx_set_address_mode(&gs_handle, W25QXX_ADDRESS_MODE_4_BYTE);
 80028ba:	2101      	movs	r1, #1
 80028bc:	480a      	ldr	r0, [pc, #40]	; (80028e8 <w25qxx_basic_init+0xf4>)
 80028be:	f7fd fd81 	bl	80003c4 <w25qxx_set_address_mode>
 80028c2:	4603      	mov	r3, r0
 80028c4:	73fb      	strb	r3, [r7, #15]
            if (res != 0)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <w25qxx_basic_init+0xe8>
            {
                w25qxx_interface_debug_print("w25qxx: set address mode failed.\n");
 80028cc:	4811      	ldr	r0, [pc, #68]	; (8002914 <w25qxx_basic_init+0x120>)
 80028ce:	f000 f8bf 	bl	8002a50 <w25qxx_interface_debug_print>
                (void)w25qxx_deinit(&gs_handle);
 80028d2:	4805      	ldr	r0, [pc, #20]	; (80028e8 <w25qxx_basic_init+0xf4>)
 80028d4:	f7fe fa4e 	bl	8000d74 <w25qxx_deinit>
               
                return 1;
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <w25qxx_basic_init+0xea>
            }
        }
        
        return 0;
 80028dc:	2300      	movs	r3, #0
    }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	2000008c 	.word	0x2000008c
 80028ec:	08002999 	.word	0x08002999
 80028f0:	080029a9 	.word	0x080029a9
 80028f4:	080029b7 	.word	0x080029b7
 80028f8:	08002a09 	.word	0x08002a09
 80028fc:	08002a21 	.word	0x08002a21
 8002900:	08002a51 	.word	0x08002a51
 8002904:	0800879c 	.word	0x0800879c
 8002908:	080087b8 	.word	0x080087b8
 800290c:	080087d8 	.word	0x080087d8
 8002910:	080087fc 	.word	0x080087fc
 8002914:	08008814 	.word	0x08008814

08002918 <w25qxx_basic_deinit>:
 *         - 0 success
 *         - 1 deinit failed
 * @note   none
 */
uint8_t w25qxx_basic_deinit(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
    if (w25qxx_deinit(&gs_handle) != 0)
 800291c:	4805      	ldr	r0, [pc, #20]	; (8002934 <w25qxx_basic_deinit+0x1c>)
 800291e:	f7fe fa29 	bl	8000d74 <w25qxx_deinit>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <w25qxx_basic_deinit+0x14>
    {
        return 1;
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <w25qxx_basic_deinit+0x16>
    }
    else
    {
        return 0;
 800292c:	2300      	movs	r3, #0
    }
}
 800292e:	4618      	mov	r0, r3
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2000008c 	.word	0x2000008c

08002938 <w25qxx_basic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t w25qxx_basic_write(uint32_t addr, uint8_t *data, uint32_t len)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
    if (w25qxx_write(&gs_handle, addr, data, len) != 0)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	68f9      	ldr	r1, [r7, #12]
 800294a:	4806      	ldr	r0, [pc, #24]	; (8002964 <w25qxx_basic_write+0x2c>)
 800294c:	f7ff fe88 	bl	8002660 <w25qxx_write>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <w25qxx_basic_write+0x22>
    {
        return 1;
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <w25qxx_basic_write+0x24>
    }
    else
    {
        return 0;
 800295a:	2300      	movs	r3, #0
    }
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	2000008c 	.word	0x2000008c

08002968 <w25qxx_basic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t w25qxx_basic_read(uint32_t addr, uint8_t *data, uint32_t len)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
    if (w25qxx_read(&gs_handle, addr, data, len) != 0)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	68f9      	ldr	r1, [r7, #12]
 800297a:	4806      	ldr	r0, [pc, #24]	; (8002994 <w25qxx_basic_read+0x2c>)
 800297c:	f7fe faba 	bl	8000ef4 <w25qxx_read>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <w25qxx_basic_read+0x22>
    {
        return 1;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <w25qxx_basic_read+0x24>
    }
    else
    {
        return 0;
 800298a:	2300      	movs	r3, #0
    }
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	2000008c 	.word	0x2000008c

08002998 <w25qxx_interface_spi_qspi_init>:
 *         - 0 success
 *         - 1 spi qspi init failed
 * @note   none
 */
uint8_t w25qxx_interface_spi_qspi_init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
    return spi_init(SPI_MODE_3);
 800299c:	2003      	movs	r0, #3
 800299e:	f000 fae5 	bl	8002f6c <spi_init>
 80029a2:	4603      	mov	r3, r0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <w25qxx_interface_spi_qspi_deinit>:
 *         - 0 success
 *         - 1 spi qspi deinit failed
 * @note   none
 */
uint8_t w25qxx_interface_spi_qspi_deinit(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	return spi_deinit();
 80029ac:	f000 fb3c 	bl	8003028 <spi_deinit>
 80029b0:	4603      	mov	r3, r0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <w25qxx_interface_spi_qspi_write_read>:
uint8_t w25qxx_interface_spi_qspi_write_read(uint8_t instruction, uint8_t instruction_line,
                                             uint32_t address, uint8_t address_line, uint8_t address_len,
                                             uint32_t alternate, uint8_t alternate_line, uint8_t alternate_len,
                                             uint8_t dummy, uint8_t *in_buf, uint32_t in_len,
                                             uint8_t *out_buf, uint32_t out_len, uint8_t data_line)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	603a      	str	r2, [r7, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
 80029c4:	460b      	mov	r3, r1
 80029c6:	71bb      	strb	r3, [r7, #6]
 80029c8:	4613      	mov	r3, r2
 80029ca:	717b      	strb	r3, [r7, #5]
    if ((instruction_line != 0) || (address_line != 0) || (alternate_line != 0) || (dummy != 0) || (data_line != 1))
 80029cc:	79bb      	ldrb	r3, [r7, #6]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10d      	bne.n	80029ee <w25qxx_interface_spi_qspi_write_read+0x38>
 80029d2:	797b      	ldrb	r3, [r7, #5]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <w25qxx_interface_spi_qspi_write_read+0x38>
 80029d8:	7e3b      	ldrb	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d107      	bne.n	80029ee <w25qxx_interface_spi_qspi_write_read+0x38>
 80029de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <w25qxx_interface_spi_qspi_write_read+0x38>
 80029e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d001      	beq.n	80029f2 <w25qxx_interface_spi_qspi_write_read+0x3c>
    {
        return 1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e006      	b.n	8002a00 <w25qxx_interface_spi_qspi_write_read+0x4a>
    }

    return spi_write_read(in_buf, in_len, out_buf, out_len);
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029fa:	f000 fb29 	bl	8003050 <spi_write_read>
 80029fe:	4603      	mov	r3, r0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <w25qxx_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void w25qxx_interface_delay_ms(uint32_t ms)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fd83 	bl	800351c <HAL_Delay>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <w25qxx_interface_delay_us>:
 * @brief     interface delay us
 * @param[in] us
 * @note      none
 */
void w25qxx_interface_delay_us(uint32_t us)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <w25qxx_interface_delay_us+0x2c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002a30:	bf00      	nop
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <w25qxx_interface_delay_us+0x2c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d8f9      	bhi.n	8002a32 <w25qxx_interface_delay_us+0x12>
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	20001218 	.word	0x20001218

08002a50 <w25qxx_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void w25qxx_interface_debug_print(const char *const fmt, ...)
{
 8002a50:	b40f      	push	{r0, r1, r2, r3}
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b0c2      	sub	sp, #264	; 0x108
 8002a56:	af00      	add	r7, sp, #0
    char str[256];
    uint16_t len;
    va_list args;

    memset((char *)str, 0, sizeof(char) * 256);
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 fbc9 	bl	80071f8 <memset>
    va_start(args, fmt);
 8002a66:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a72:	601a      	str	r2, [r3, #0]
    vsnprintf((char *)str, 255, (char const *)fmt, args);
 8002a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a7c:	1d38      	adds	r0, r7, #4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002a84:	21ff      	movs	r1, #255	; 0xff
 8002a86:	f004 fc0b 	bl	80072a0 <vsniprintf>
    va_end(args);

    len = strlen((char *)str);
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fb9f 	bl	80001d0 <strlen>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    (void)uart2_write((uint8_t *)str, len);
 8002a98:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fc77 	bl	8003394 <uart2_write>
}
 8002aa6:	bf00      	nop
 8002aa8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002aac:	46bd      	mov	sp, r7
 8002aae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ab2:	b004      	add	sp, #16
 8002ab4:	4770      	bx	lr
	...

08002ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b096      	sub	sp, #88	; 0x58
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002abe:	f000 fcc7 	bl	8003450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ac2:	f000 f8bf 	bl	8002c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ac6:	f000 f9d3 	bl	8002e70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002aca:	f000 f9a1 	bl	8002e10 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002ace:	f000 f90d 	bl	8002cec <MX_SPI1_Init>
  MX_TIM1_Init();
 8002ad2:	f000 f949 	bl	8002d68 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //uart2_init(115200);

  uint8_t data[32] = "HELLO\n";
 8002ad6:	4a55      	ldr	r2, [pc, #340]	; (8002c2c <main+0x174>)
 8002ad8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ae0:	6018      	str	r0, [r3, #0]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	8019      	strh	r1, [r3, #0]
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	0c0a      	lsrs	r2, r1, #16
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
 8002afc:	615a      	str	r2, [r3, #20]
 8002afe:	761a      	strb	r2, [r3, #24]
  uint8_t dat;
  uint8_t res;
  char print_message[32];

  res = w25qxx_basic_init(W25Q64, W25QXX_INTERFACE_SPI, W25QXX_BOOL_FALSE);
 8002b00:	2200      	movs	r2, #0
 8002b02:	2100      	movs	r1, #0
 8002b04:	f64e 7016 	movw	r0, #61206	; 0xef16
 8002b08:	f7ff fe74 	bl	80027f4 <w25qxx_basic_init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if (res != 0)
 8002b12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00f      	beq.n	8002b3a <main+0x82>
  {
      memcpy(data, "Failed to initialise!", 32);
 8002b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b1e:	2220      	movs	r2, #32
 8002b20:	4943      	ldr	r1, [pc, #268]	; (8002c30 <main+0x178>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 fb5a 	bl	80071dc <memcpy>
      HAL_UART_Transmit(&huart2, data, sizeof(data), 10);
 8002b28:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002b2c:	230a      	movs	r3, #10
 8002b2e:	2220      	movs	r2, #32
 8002b30:	4840      	ldr	r0, [pc, #256]	; (8002c34 <main+0x17c>)
 8002b32:	f003 fe39 	bl	80067a8 <HAL_UART_Transmit>
      return 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e073      	b.n	8002c22 <main+0x16a>

  //(void)w25qxx_basic_deinit();

  //return 0;

	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <main+0x180>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
	int counterman = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	657b      	str	r3, [r7, #84]	; 0x54
	int cntval = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	64bb      	str	r3, [r7, #72]	; 0x48
	while (__HAL_TIM_GET_COUNTER(&htim1) < 10){
 8002b4a:	e006      	b.n	8002b5a <main+0xa2>
		counterman++;
 8002b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b4e:	3301      	adds	r3, #1
 8002b50:	657b      	str	r3, [r7, #84]	; 0x54
		cntval = __HAL_TIM_GET_COUNTER(&htim1);
 8002b52:	4b39      	ldr	r3, [pc, #228]	; (8002c38 <main+0x180>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	64bb      	str	r3, [r7, #72]	; 0x48
	while (__HAL_TIM_GET_COUNTER(&htim1) < 10){
 8002b5a:	4b37      	ldr	r3, [pc, #220]	; (8002c38 <main+0x180>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2b09      	cmp	r3, #9
 8002b62:	d9f3      	bls.n	8002b4c <main+0x94>
		// wait for the counter to reach the us input in the parameter
	}

  int address = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	653b      	str	r3, [r7, #80]	; 0x50
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      dat = (address % 256) & 0xFF;
 8002b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b6a:	425a      	negs	r2, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	bf58      	it	pl
 8002b72:	4253      	negpl	r3, r2
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      res = w25qxx_basic_write(address, (uint8_t *)&dat, 1);
 8002b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b7c:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002b80:	2201      	movs	r2, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fed8 	bl	8002938 <w25qxx_basic_write>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      if (res != 0)
 8002b8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <main+0xe6>
      {
          (void)w25qxx_basic_deinit();
 8002b96:	f7ff febf 	bl	8002918 <w25qxx_basic_deinit>

          return 1;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e041      	b.n	8002c22 <main+0x16a>
      }
      else
      {
		  sprintf(print_message,"w25qxx: addr %d is %d.\n", address, dat);
 8002b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ba2:	1d38      	adds	r0, r7, #4
 8002ba4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ba6:	4925      	ldr	r1, [pc, #148]	; (8002c3c <main+0x184>)
 8002ba8:	f004 fb2e 	bl	8007208 <siprintf>
		  HAL_UART_Transmit(&huart2, print_message, sizeof(print_message), 10);
 8002bac:	1d39      	adds	r1, r7, #4
 8002bae:	230a      	movs	r3, #10
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	4820      	ldr	r0, [pc, #128]	; (8002c34 <main+0x17c>)
 8002bb4:	f003 fdf8 	bl	80067a8 <HAL_UART_Transmit>
      }

	  res = w25qxx_basic_read(0x0, (uint8_t *)&dat, 1);
 8002bb8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7ff fed1 	bl	8002968 <w25qxx_basic_read>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  if (res != 0)
 8002bcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d011      	beq.n	8002bf8 <main+0x140>
	  {
	      (void)w25qxx_basic_deinit();
 8002bd4:	f7ff fea0 	bl	8002918 <w25qxx_basic_deinit>
	      memcpy(data, "Failed to read!", 32);
 8002bd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bdc:	2220      	movs	r2, #32
 8002bde:	4918      	ldr	r1, [pc, #96]	; (8002c40 <main+0x188>)
 8002be0:	4618      	mov	r0, r3
 8002be2:	f004 fafb 	bl	80071dc <memcpy>
	      HAL_UART_Transmit(&huart2, data, sizeof(data), 10);
 8002be6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002bea:	230a      	movs	r3, #10
 8002bec:	2220      	movs	r2, #32
 8002bee:	4811      	ldr	r0, [pc, #68]	; (8002c34 <main+0x17c>)
 8002bf0:	f003 fdda 	bl	80067a8 <HAL_UART_Transmit>
	      return 1;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e014      	b.n	8002c22 <main+0x16a>
	  }
	  else
	  {
		  sprintf(print_message,"w25qxx: addr %d is %d.\n", address, dat);
 8002bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bfc:	1d38      	adds	r0, r7, #4
 8002bfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c00:	490e      	ldr	r1, [pc, #56]	; (8002c3c <main+0x184>)
 8002c02:	f004 fb01 	bl	8007208 <siprintf>
		  HAL_UART_Transmit(&huart2, print_message, sizeof(print_message), 10);
 8002c06:	1d39      	adds	r1, r7, #4
 8002c08:	230a      	movs	r3, #10
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	4809      	ldr	r0, [pc, #36]	; (8002c34 <main+0x17c>)
 8002c0e:	f003 fdcb 	bl	80067a8 <HAL_UART_Transmit>
		  //w25qxx_interface_debug_print("w25qxx: addr %d is %d.\n", 0x0, dat);
	  }
	  address++;
 8002c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c14:	3301      	adds	r3, #1
 8002c16:	653b      	str	r3, [r7, #80]	; 0x50
	//HAL_UART_Transmit(&huart2, data, sizeof(data), 10);
	HAL_Delay(1000);
 8002c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c1c:	f000 fc7e 	bl	800351c <HAL_Delay>
      dat = (address % 256) & 0xFF;
 8002c20:	e7a2      	b.n	8002b68 <main+0xb0>
  }
  /* USER CODE END 3 */
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3758      	adds	r7, #88	; 0x58
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	08008878 	.word	0x08008878
 8002c30:	08008838 	.word	0x08008838
 8002c34:	20001264 	.word	0x20001264
 8002c38:	20001218 	.word	0x20001218
 8002c3c:	08008850 	.word	0x08008850
 8002c40:	08008868 	.word	0x08008868

08002c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b096      	sub	sp, #88	; 0x58
 8002c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c4e:	2228      	movs	r2, #40	; 0x28
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f004 fad0 	bl	80071f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	60da      	str	r2, [r3, #12]
 8002c74:	611a      	str	r2, [r3, #16]
 8002c76:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c80:	2310      	movs	r3, #16
 8002c82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 ffad 	bl	8003bec <HAL_RCC_OscConfig>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002c98:	f000 f928 	bl	8002eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c9c:	230f      	movs	r3, #15
 8002c9e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cb0:	f107 031c 	add.w	r3, r7, #28
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 ffd6 	bl	8004c68 <HAL_RCC_ClockConfig>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002cc2:	f000 f913 	bl	8002eec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 f9fe 	bl	80050d4 <HAL_RCCEx_PeriphCLKConfig>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002cde:	f000 f905 	bl	8002eec <Error_Handler>
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	3758      	adds	r7, #88	; 0x58
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002cf2:	4a1c      	ldr	r2, [pc, #112]	; (8002d64 <MX_SPI1_Init+0x78>)
 8002cf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cfe:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002d04:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d06:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002d0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d46:	2208      	movs	r2, #8
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d4a:	4805      	ldr	r0, [pc, #20]	; (8002d60 <MX_SPI1_Init+0x74>)
 8002d4c:	f002 fae8 	bl	8005320 <HAL_SPI_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d56:	f000 f8c9 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	200011b4 	.word	0x200011b4
 8002d64:	40013000 	.word	0x40013000

08002d68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d6e:	f107 0310 	add.w	r3, r7, #16
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d7c:	1d3b      	adds	r3, r7, #4
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <MX_TIM1_Init+0xa0>)
 8002d88:	4a20      	ldr	r2, [pc, #128]	; (8002e0c <MX_TIM1_Init+0xa4>)
 8002d8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8002d8c:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <MX_TIM1_Init+0xa0>)
 8002d8e:	2207      	movs	r2, #7
 8002d90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <MX_TIM1_Init+0xa0>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <MX_TIM1_Init+0xa0>)
 8002d9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002d9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <MX_TIM1_Init+0xa0>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002da6:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <MX_TIM1_Init+0xa0>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <MX_TIM1_Init+0xa0>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002db2:	4815      	ldr	r0, [pc, #84]	; (8002e08 <MX_TIM1_Init+0xa0>)
 8002db4:	f003 fa0a 	bl	80061cc <HAL_TIM_Base_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002dbe:	f000 f895 	bl	8002eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dc8:	f107 0310 	add.w	r3, r7, #16
 8002dcc:	4619      	mov	r1, r3
 8002dce:	480e      	ldr	r0, [pc, #56]	; (8002e08 <MX_TIM1_Init+0xa0>)
 8002dd0:	f003 fa53 	bl	800627a <HAL_TIM_ConfigClockSource>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002dda:	f000 f887 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4806      	ldr	r0, [pc, #24]	; (8002e08 <MX_TIM1_Init+0xa0>)
 8002df0:	f003 fc1e 	bl	8006630 <HAL_TIMEx_MasterConfigSynchronization>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002dfa:	f000 f877 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20001218 	.word	0x20001218
 8002e0c:	40012c00 	.word	0x40012c00

08002e10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <MX_USART2_UART_Init+0x58>)
 8002e16:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <MX_USART2_UART_Init+0x5c>)
 8002e18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <MX_USART2_UART_Init+0x58>)
 8002e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <MX_USART2_UART_Init+0x58>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <MX_USART2_UART_Init+0x58>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <MX_USART2_UART_Init+0x58>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <MX_USART2_UART_Init+0x58>)
 8002e36:	220c      	movs	r2, #12
 8002e38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <MX_USART2_UART_Init+0x58>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <MX_USART2_UART_Init+0x58>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <MX_USART2_UART_Init+0x58>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <MX_USART2_UART_Init+0x58>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e52:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_USART2_UART_Init+0x58>)
 8002e54:	f003 fc5a 	bl	800670c <HAL_UART_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e5e:	f000 f845 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20001264 	.word	0x20001264
 8002e6c:	40004400 	.word	0x40004400

08002e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e76:	f107 030c 	add.w	r3, r7, #12
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
 8002e84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e86:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <MX_GPIO_Init+0x78>)
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <MX_GPIO_Init+0x78>)
 8002e8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e90:	6153      	str	r3, [r2, #20]
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <MX_GPIO_Init+0x78>)
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <MX_GPIO_Init+0x78>)
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	4a11      	ldr	r2, [pc, #68]	; (8002ee8 <MX_GPIO_Init+0x78>)
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	6153      	str	r3, [r2, #20]
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <MX_GPIO_Init+0x78>)
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2101      	movs	r1, #1
 8002eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ebe:	f000 fe7d 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002ed2:	f107 030c 	add.w	r3, r7, #12
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002edc:	f000 fc28 	bl	8003730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ee0:	bf00      	nop
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000

08002eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef0:	b672      	cpsid	i
}
 8002ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <Error_Handler+0x8>
	...

08002ef8 <a_spi_cs_init>:
 * @return status code
 *         - 0 success
 * @note   none
 */
static uint8_t a_spi_cs_init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efe:	f107 030c 	add.w	r3, r7, #12
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
 8002f0c:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <a_spi_cs_init+0x70>)
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <a_spi_cs_init+0x70>)
 8002f14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f18:	6153      	str	r3, [r2, #20]
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <a_spi_cs_init+0x70>)
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <a_spi_cs_init+0x70>)
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	4a0f      	ldr	r2, [pc, #60]	; (8002f68 <a_spi_cs_init+0x70>)
 8002f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f30:	6153      	str	r3, [r2, #20]
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <a_spi_cs_init+0x70>)
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
    
    /* gpio init */
    GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f42:	2301      	movs	r3, #1
 8002f44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f46:	2301      	movs	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002f4e:	f107 030c 	add.w	r3, r7, #12
 8002f52:	4619      	mov	r1, r3
 8002f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f58:	f000 fbea 	bl	8003730 <HAL_GPIO_Init>
    
    return 0;
 8002f5c:	2300      	movs	r3, #0

}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000

08002f6c <spi_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      SCLK is PA5, MOSI is PA7 MISO is PA6 and CS is PA4
 */
uint8_t spi_init(spi_mode_t mode)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
    g_spi_handle.Instance = SPI1;
 8002f76:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <spi_init+0xb4>)
 8002f78:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <spi_init+0xb8>)
 8002f7a:	601a      	str	r2, [r3, #0]
    g_spi_handle.Init.Mode = SPI_MODE_MASTER;
 8002f7c:	4b28      	ldr	r3, [pc, #160]	; (8003020 <spi_init+0xb4>)
 8002f7e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f82:	605a      	str	r2, [r3, #4]
    g_spi_handle.Init.Direction = SPI_DIRECTION_2LINES;
 8002f84:	4b26      	ldr	r3, [pc, #152]	; (8003020 <spi_init+0xb4>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
    g_spi_handle.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f8a:	4b25      	ldr	r3, [pc, #148]	; (8003020 <spi_init+0xb4>)
 8002f8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f90:	60da      	str	r2, [r3, #12]
    
    /* set the mode */
    if (mode == SPI_MODE_0)
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <spi_init+0x3a>
    {
        g_spi_handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f98:	4b21      	ldr	r3, [pc, #132]	; (8003020 <spi_init+0xb4>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
        g_spi_handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <spi_init+0xb4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	615a      	str	r2, [r3, #20]
 8002fa4:	e019      	b.n	8002fda <spi_init+0x6e>
    }
    else if (mode == SPI_MODE_1)
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d106      	bne.n	8002fba <spi_init+0x4e>
    {
        g_spi_handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fac:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <spi_init+0xb4>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	611a      	str	r2, [r3, #16]
        g_spi_handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <spi_init+0xb4>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	615a      	str	r2, [r3, #20]
 8002fb8:	e00f      	b.n	8002fda <spi_init+0x6e>
    }
    else if (mode == SPI_MODE_2)
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d106      	bne.n	8002fce <spi_init+0x62>
    {
        g_spi_handle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <spi_init+0xb4>)
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	611a      	str	r2, [r3, #16]
        g_spi_handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fc6:	4b16      	ldr	r3, [pc, #88]	; (8003020 <spi_init+0xb4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	615a      	str	r2, [r3, #20]
 8002fcc:	e005      	b.n	8002fda <spi_init+0x6e>
    }
    else
    {
        g_spi_handle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002fce:	4b14      	ldr	r3, [pc, #80]	; (8003020 <spi_init+0xb4>)
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	611a      	str	r2, [r3, #16]
        g_spi_handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <spi_init+0xb4>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	615a      	str	r2, [r3, #20]
    }
    g_spi_handle.Init.NSS = SPI_NSS_SOFT;
 8002fda:	4b11      	ldr	r3, [pc, #68]	; (8003020 <spi_init+0xb4>)
 8002fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe0:	619a      	str	r2, [r3, #24]
    g_spi_handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002fe2:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <spi_init+0xb4>)
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	61da      	str	r2, [r3, #28]
    g_spi_handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <spi_init+0xb4>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	621a      	str	r2, [r3, #32]
    g_spi_handle.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <spi_init+0xb4>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24
    g_spi_handle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <spi_init+0xb4>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
    g_spi_handle.Init.CRCPolynomial = 10;
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <spi_init+0xb4>)
 8002ffc:	220a      	movs	r2, #10
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* spi init */
    if (HAL_SPI_Init(&g_spi_handle) != HAL_OK)
 8003000:	4807      	ldr	r0, [pc, #28]	; (8003020 <spi_init+0xb4>)
 8003002:	f002 f98d 	bl	8005320 <HAL_SPI_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <spi_init+0xa4>
    {
        return 1;
 800300c:	2301      	movs	r3, #1
 800300e:	e002      	b.n	8003016 <spi_init+0xaa>
    }
    
    return a_spi_cs_init();
 8003010:	f7ff ff72 	bl	8002ef8 <a_spi_cs_init>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	200012ec 	.word	0x200012ec
 8003024:	40013000 	.word	0x40013000

08003028 <spi_deinit>:
 *         - 0 success
 *         - 1 deinit failed
 * @note   none
 */
uint8_t spi_deinit(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
    /* cs deinit */
    HAL_GPIO_DeInit(SPI_CS_GPIO_Port, SPI_CS_Pin);
 800302c:	2101      	movs	r1, #1
 800302e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003032:	f000 fcef 	bl	8003a14 <HAL_GPIO_DeInit>
    
    /* spi deinit */
    if (HAL_SPI_DeInit(&g_spi_handle) != HAL_OK)
 8003036:	4805      	ldr	r0, [pc, #20]	; (800304c <spi_deinit+0x24>)
 8003038:	f002 fa15 	bl	8005466 <HAL_SPI_DeInit>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <spi_deinit+0x1e>
    {
        return 1;
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <spi_deinit+0x20>
    }
    
    return 0;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200012ec 	.word	0x200012ec

08003050 <spi_write_read>:
 *             - 0 success
 *             - 1 write read failed
 * @note       none
 */
uint8_t spi_write_read(uint8_t *in_buf, uint32_t in_len, uint8_t *out_buf, uint32_t out_len)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
    uint8_t res;
    
    /* set cs low */
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800305e:	2200      	movs	r2, #0
 8003060:	2101      	movs	r1, #1
 8003062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003066:	f000 fda9 	bl	8003bbc <HAL_GPIO_WritePin>
    
    /* if in_len > 0 */
    if (in_len > 0)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d014      	beq.n	800309a <spi_write_read+0x4a>
    {
        /* transmit the input buffer */
        res = HAL_SPI_Transmit(&g_spi_handle, in_buf, in_len, 1000);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	b29a      	uxth	r2, r3
 8003074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003078:	68f9      	ldr	r1, [r7, #12]
 800307a:	4819      	ldr	r0, [pc, #100]	; (80030e0 <spi_write_read+0x90>)
 800307c:	f002 fa1b 	bl	80054b6 <HAL_SPI_Transmit>
 8003080:	4603      	mov	r3, r0
 8003082:	75fb      	strb	r3, [r7, #23]
        if (res != HAL_OK)
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <spi_write_read+0x4a>
        {
            /* set cs high */
            HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800308a:	2201      	movs	r2, #1
 800308c:	2101      	movs	r1, #1
 800308e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003092:	f000 fd93 	bl	8003bbc <HAL_GPIO_WritePin>
           
            return 1;
 8003096:	2301      	movs	r3, #1
 8003098:	e01e      	b.n	80030d8 <spi_write_read+0x88>
        }
    }
    
    /* if out_len > 0 */
    if (out_len > 0)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d014      	beq.n	80030ca <spi_write_read+0x7a>
    {
        /* transmit to the output buffer */
        res = HAL_SPI_Receive(&g_spi_handle, out_buf, out_len, 1000);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	480d      	ldr	r0, [pc, #52]	; (80030e0 <spi_write_read+0x90>)
 80030ac:	f002 fb78 	bl	80057a0 <HAL_SPI_Receive>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]
        if (res != HAL_OK)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <spi_write_read+0x7a>
        {
            /* set cs high */
            HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80030ba:	2201      	movs	r2, #1
 80030bc:	2101      	movs	r1, #1
 80030be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c2:	f000 fd7b 	bl	8003bbc <HAL_GPIO_WritePin>
           
            return 1;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e006      	b.n	80030d8 <spi_write_read+0x88>
        }
    }
    
    /* set cs high */
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80030ca:	2201      	movs	r2, #1
 80030cc:	2101      	movs	r1, #1
 80030ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d2:	f000 fd73 	bl	8003bbc <HAL_GPIO_WritePin>
    
    return 0;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	200012ec 	.word	0x200012ec

080030e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ea:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <HAL_MspInit+0x44>)
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	4a0e      	ldr	r2, [pc, #56]	; (8003128 <HAL_MspInit+0x44>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6193      	str	r3, [r2, #24]
 80030f6:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <HAL_MspInit+0x44>)
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_MspInit+0x44>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4a08      	ldr	r2, [pc, #32]	; (8003128 <HAL_MspInit+0x44>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310c:	61d3      	str	r3, [r2, #28]
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_MspInit+0x44>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000

0800312c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <HAL_SPI_MspInit+0x7c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d128      	bne.n	80031a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800314e:	4b17      	ldr	r3, [pc, #92]	; (80031ac <HAL_SPI_MspInit+0x80>)
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_SPI_MspInit+0x80>)
 8003154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003158:	6193      	str	r3, [r2, #24]
 800315a:	4b14      	ldr	r3, [pc, #80]	; (80031ac <HAL_SPI_MspInit+0x80>)
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <HAL_SPI_MspInit+0x80>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <HAL_SPI_MspInit+0x80>)
 800316c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003170:	6153      	str	r3, [r2, #20]
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_SPI_MspInit+0x80>)
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800317e:	23e0      	movs	r3, #224	; 0xe0
 8003180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800318a:	2303      	movs	r3, #3
 800318c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800318e:	2305      	movs	r3, #5
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003192:	f107 0314 	add.w	r3, r7, #20
 8003196:	4619      	mov	r1, r3
 8003198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800319c:	f000 fac8 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031a0:	bf00      	nop
 80031a2:	3728      	adds	r7, #40	; 0x28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40013000 	.word	0x40013000
 80031ac:	40021000 	.word	0x40021000

080031b0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <HAL_SPI_MspDeInit+0x30>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10a      	bne.n	80031d8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_SPI_MspDeInit+0x34>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_SPI_MspDeInit+0x34>)
 80031c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031cc:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80031ce:	21e0      	movs	r1, #224	; 0xe0
 80031d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031d4:	f000 fc1e 	bl	8003a14 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40013000 	.word	0x40013000
 80031e4:	40021000 	.word	0x40021000

080031e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <HAL_TIM_Base_MspInit+0x38>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10b      	bne.n	8003212 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <HAL_TIM_Base_MspInit+0x3c>)
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	4a09      	ldr	r2, [pc, #36]	; (8003224 <HAL_TIM_Base_MspInit+0x3c>)
 8003200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003204:	6193      	str	r3, [r2, #24]
 8003206:	4b07      	ldr	r3, [pc, #28]	; (8003224 <HAL_TIM_Base_MspInit+0x3c>)
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40021000 	.word	0x40021000

08003228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a18      	ldr	r2, [pc, #96]	; (80032a8 <HAL_UART_MspInit+0x80>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d129      	bne.n	800329e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800324a:	4b18      	ldr	r3, [pc, #96]	; (80032ac <HAL_UART_MspInit+0x84>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4a17      	ldr	r2, [pc, #92]	; (80032ac <HAL_UART_MspInit+0x84>)
 8003250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003254:	61d3      	str	r3, [r2, #28]
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_UART_MspInit+0x84>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_UART_MspInit+0x84>)
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	4a11      	ldr	r2, [pc, #68]	; (80032ac <HAL_UART_MspInit+0x84>)
 8003268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326c:	6153      	str	r3, [r2, #20]
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_UART_MspInit+0x84>)
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800327a:	f248 0304 	movw	r3, #32772	; 0x8004
 800327e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003280:	2302      	movs	r3, #2
 8003282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003288:	2303      	movs	r3, #3
 800328a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800328c:	2307      	movs	r3, #7
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003290:	f107 0314 	add.w	r3, r7, #20
 8003294:	4619      	mov	r1, r3
 8003296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800329a:	f000 fa49 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800329e:	bf00      	nop
 80032a0:	3728      	adds	r7, #40	; 0x28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40004400 	.word	0x40004400
 80032ac:	40021000 	.word	0x40021000

080032b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032b4:	e7fe      	b.n	80032b4 <NMI_Handler+0x4>

080032b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ba:	e7fe      	b.n	80032ba <HardFault_Handler+0x4>

080032bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <MemManage_Handler+0x4>

080032c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032c6:	e7fe      	b.n	80032c6 <BusFault_Handler+0x4>

080032c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032cc:	e7fe      	b.n	80032cc <UsageFault_Handler+0x4>

080032ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ce:	b480      	push	{r7}
 80032d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032fc:	f000 f8ee 	bl	80034dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}

08003304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <_sbrk+0x5c>)
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <_sbrk+0x60>)
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <_sbrk+0x64>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <_sbrk+0x64>)
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <_sbrk+0x68>)
 8003324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <_sbrk+0x64>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d207      	bcs.n	8003344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003334:	f003 ff28 	bl	8007188 <__errno>
 8003338:	4603      	mov	r3, r0
 800333a:	220c      	movs	r2, #12
 800333c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	e009      	b.n	8003358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <_sbrk+0x64>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <_sbrk+0x64>)
 8003354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003356:	68fb      	ldr	r3, [r7, #12]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20003000 	.word	0x20003000
 8003364:	00000400 	.word	0x00000400
 8003368:	20001350 	.word	0x20001350
 800336c:	20001370 	.word	0x20001370

08003370 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <SystemInit+0x20>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <SystemInit+0x20>)
 800337c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <uart2_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t uart2_write(uint8_t *buf, uint16_t len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
    uint16_t timeout = 1000;
 80033a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033a4:	81fb      	strh	r3, [r7, #14]
    
    /* set tx done 0 */
    g_uart2_tx_done = 0;
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <uart2_write+0x60>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
    
    /* transmit */
    if (HAL_UART_Transmit_IT(&huart2, (uint8_t *)buf, len) != HAL_OK)
 80033ac:	887b      	ldrh	r3, [r7, #2]
 80033ae:	461a      	mov	r2, r3
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4811      	ldr	r0, [pc, #68]	; (80033f8 <uart2_write+0x64>)
 80033b4:	f003 fa82 	bl	80068bc <HAL_UART_Transmit_IT>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <uart2_write+0x3a>
    {
        return 1;
 80033be:	2301      	movs	r3, #1
 80033c0:	e013      	b.n	80033ea <uart2_write+0x56>
    }
    
    /* wait for events */
    while ((g_uart2_tx_done == 0) && (timeout != 0))
    {
        HAL_Delay(1);
 80033c2:	2001      	movs	r0, #1
 80033c4:	f000 f8aa 	bl	800351c <HAL_Delay>
        timeout--;
 80033c8:	89fb      	ldrh	r3, [r7, #14]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	81fb      	strh	r3, [r7, #14]
    while ((g_uart2_tx_done == 0) && (timeout != 0))
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <uart2_write+0x60>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <uart2_write+0x4a>
 80033d8:	89fb      	ldrh	r3, [r7, #14]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f1      	bne.n	80033c2 <uart2_write+0x2e>
    }
    
    /* check the timeout */
    if (timeout != 0)
 80033de:	89fb      	ldrh	r3, [r7, #14]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <uart2_write+0x54>
    {
        return 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <uart2_write+0x56>
    }
    else
    {
        return 1;
 80033e8:	2301      	movs	r3, #1
    }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20001354 	.word	0x20001354
 80033f8:	20001264 	.word	0x20001264

080033fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003434 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003400:	f7ff ffb6 	bl	8003370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003404:	480c      	ldr	r0, [pc, #48]	; (8003438 <LoopForever+0x6>)
  ldr r1, =_edata
 8003406:	490d      	ldr	r1, [pc, #52]	; (800343c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003408:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <LoopForever+0xe>)
  movs r3, #0
 800340a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800340c:	e002      	b.n	8003414 <LoopCopyDataInit>

0800340e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800340e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003412:	3304      	adds	r3, #4

08003414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003418:	d3f9      	bcc.n	800340e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800341c:	4c0a      	ldr	r4, [pc, #40]	; (8003448 <LoopForever+0x16>)
  movs r3, #0
 800341e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003420:	e001      	b.n	8003426 <LoopFillZerobss>

08003422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003424:	3204      	adds	r2, #4

08003426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003428:	d3fb      	bcc.n	8003422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800342a:	f003 feb3 	bl	8007194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800342e:	f7ff fb43 	bl	8002ab8 <main>

08003432 <LoopForever>:

LoopForever:
    b LoopForever
 8003432:	e7fe      	b.n	8003432 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003434:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800343c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003440:	0800896c 	.word	0x0800896c
  ldr r2, =_sbss
 8003444:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003448:	2000136c 	.word	0x2000136c

0800344c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800344c:	e7fe      	b.n	800344c <ADC1_2_IRQHandler>
	...

08003450 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_Init+0x28>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a07      	ldr	r2, [pc, #28]	; (8003478 <HAL_Init+0x28>)
 800345a:	f043 0310 	orr.w	r3, r3, #16
 800345e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003460:	2003      	movs	r0, #3
 8003462:	f000 f931 	bl	80036c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003466:	2000      	movs	r0, #0
 8003468:	f000 f808 	bl	800347c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800346c:	f7ff fe3a 	bl	80030e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40022000 	.word	0x40022000

0800347c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_InitTick+0x54>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_InitTick+0x58>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4619      	mov	r1, r3
 800348e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003492:	fbb3 f3f1 	udiv	r3, r3, r1
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f93b 	bl	8003716 <HAL_SYSTICK_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e00e      	b.n	80034c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b0f      	cmp	r3, #15
 80034ae:	d80a      	bhi.n	80034c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b0:	2200      	movs	r2, #0
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295
 80034b8:	f000 f911 	bl	80036de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034bc:	4a06      	ldr	r2, [pc, #24]	; (80034d8 <HAL_InitTick+0x5c>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e000      	b.n	80034c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000000 	.word	0x20000000
 80034d4:	20000008 	.word	0x20000008
 80034d8:	20000004 	.word	0x20000004

080034dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_IncTick+0x20>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_IncTick+0x24>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_IncTick+0x24>)
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000008 	.word	0x20000008
 8003500:	20001358 	.word	0x20001358

08003504 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return uwTick;  
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_GetTick+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20001358 	.word	0x20001358

0800351c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff ffee 	bl	8003504 <HAL_GetTick>
 8003528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d005      	beq.n	8003542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_Delay+0x44>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003542:	bf00      	nop
 8003544:	f7ff ffde 	bl	8003504 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	429a      	cmp	r2, r3
 8003552:	d8f7      	bhi.n	8003544 <HAL_Delay+0x28>
  {
  }
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000008 	.word	0x20000008

08003564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003580:	4013      	ands	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800358c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003596:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	60d3      	str	r3, [r2, #12]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <__NVIC_GetPriorityGrouping+0x18>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	f003 0307 	and.w	r3, r3, #7
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	db0a      	blt.n	80035f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	490c      	ldr	r1, [pc, #48]	; (8003614 <__NVIC_SetPriority+0x4c>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	0112      	lsls	r2, r2, #4
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	440b      	add	r3, r1
 80035ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f0:	e00a      	b.n	8003608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4908      	ldr	r1, [pc, #32]	; (8003618 <__NVIC_SetPriority+0x50>)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	3b04      	subs	r3, #4
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	440b      	add	r3, r1
 8003606:	761a      	strb	r2, [r3, #24]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000e100 	.word	0xe000e100
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f1c3 0307 	rsb	r3, r3, #7
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf28      	it	cs
 800363a:	2304      	movcs	r3, #4
 800363c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3304      	adds	r3, #4
 8003642:	2b06      	cmp	r3, #6
 8003644:	d902      	bls.n	800364c <NVIC_EncodePriority+0x30>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3b03      	subs	r3, #3
 800364a:	e000      	b.n	800364e <NVIC_EncodePriority+0x32>
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	401a      	ands	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003664:	f04f 31ff 	mov.w	r1, #4294967295
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	43d9      	mvns	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	4313      	orrs	r3, r2
         );
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	; 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3b01      	subs	r3, #1
 8003690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003694:	d301      	bcc.n	800369a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003696:	2301      	movs	r3, #1
 8003698:	e00f      	b.n	80036ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <SysTick_Config+0x40>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a2:	210f      	movs	r1, #15
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f7ff ff8e 	bl	80035c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <SysTick_Config+0x40>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b2:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <SysTick_Config+0x40>)
 80036b4:	2207      	movs	r2, #7
 80036b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000e010 	.word	0xe000e010

080036c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff47 	bl	8003564 <__NVIC_SetPriorityGrouping>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036f0:	f7ff ff5c 	bl	80035ac <__NVIC_GetPriorityGrouping>
 80036f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f7ff ff8e 	bl	800361c <NVIC_EncodePriority>
 8003700:	4602      	mov	r2, r0
 8003702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff5d 	bl	80035c8 <__NVIC_SetPriority>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ffb0 	bl	8003684 <SysTick_Config>
 8003724:	4603      	mov	r3, r0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800373e:	e14e      	b.n	80039de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	2101      	movs	r1, #1
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	4013      	ands	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8140 	beq.w	80039d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d005      	beq.n	8003770 <HAL_GPIO_Init+0x40>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d130      	bne.n	80037d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037a6:	2201      	movs	r2, #1
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 0201 	and.w	r2, r3, #1
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d017      	beq.n	800380e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	2203      	movs	r2, #3
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d123      	bne.n	8003862 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	220f      	movs	r2, #15
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	08da      	lsrs	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3208      	adds	r2, #8
 800385c:	6939      	ldr	r1, [r7, #16]
 800385e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	2203      	movs	r2, #3
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0203 	and.w	r2, r3, #3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 809a 	beq.w	80039d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a4:	4b55      	ldr	r3, [pc, #340]	; (80039fc <HAL_GPIO_Init+0x2cc>)
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	4a54      	ldr	r2, [pc, #336]	; (80039fc <HAL_GPIO_Init+0x2cc>)
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6193      	str	r3, [r2, #24]
 80038b0:	4b52      	ldr	r3, [pc, #328]	; (80039fc <HAL_GPIO_Init+0x2cc>)
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038bc:	4a50      	ldr	r2, [pc, #320]	; (8003a00 <HAL_GPIO_Init+0x2d0>)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	089b      	lsrs	r3, r3, #2
 80038c2:	3302      	adds	r3, #2
 80038c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	220f      	movs	r2, #15
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038e6:	d013      	beq.n	8003910 <HAL_GPIO_Init+0x1e0>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a46      	ldr	r2, [pc, #280]	; (8003a04 <HAL_GPIO_Init+0x2d4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00d      	beq.n	800390c <HAL_GPIO_Init+0x1dc>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a45      	ldr	r2, [pc, #276]	; (8003a08 <HAL_GPIO_Init+0x2d8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d007      	beq.n	8003908 <HAL_GPIO_Init+0x1d8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a44      	ldr	r2, [pc, #272]	; (8003a0c <HAL_GPIO_Init+0x2dc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d101      	bne.n	8003904 <HAL_GPIO_Init+0x1d4>
 8003900:	2303      	movs	r3, #3
 8003902:	e006      	b.n	8003912 <HAL_GPIO_Init+0x1e2>
 8003904:	2305      	movs	r3, #5
 8003906:	e004      	b.n	8003912 <HAL_GPIO_Init+0x1e2>
 8003908:	2302      	movs	r3, #2
 800390a:	e002      	b.n	8003912 <HAL_GPIO_Init+0x1e2>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_GPIO_Init+0x1e2>
 8003910:	2300      	movs	r3, #0
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	f002 0203 	and.w	r2, r2, #3
 8003918:	0092      	lsls	r2, r2, #2
 800391a:	4093      	lsls	r3, r2
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003922:	4937      	ldr	r1, [pc, #220]	; (8003a00 <HAL_GPIO_Init+0x2d0>)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	3302      	adds	r3, #2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003930:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <HAL_GPIO_Init+0x2e0>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	43db      	mvns	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003954:	4a2e      	ldr	r2, [pc, #184]	; (8003a10 <HAL_GPIO_Init+0x2e0>)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800395a:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <HAL_GPIO_Init+0x2e0>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	43db      	mvns	r3, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800397e:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <HAL_GPIO_Init+0x2e0>)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003984:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <HAL_GPIO_Init+0x2e0>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	43db      	mvns	r3, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039a8:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <HAL_GPIO_Init+0x2e0>)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ae:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <HAL_GPIO_Init+0x2e0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <HAL_GPIO_Init+0x2e0>)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f aea9 	bne.w	8003740 <HAL_GPIO_Init+0x10>
  }
}
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40010000 	.word	0x40010000
 8003a04:	48000400 	.word	0x48000400
 8003a08:	48000800 	.word	0x48000800
 8003a0c:	48000c00 	.word	0x48000c00
 8003a10:	40010400 	.word	0x40010400

08003a14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003a22:	e0b2      	b.n	8003b8a <HAL_GPIO_DeInit+0x176>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003a24:	2201      	movs	r2, #1
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80a5 	beq.w	8003b84 <HAL_GPIO_DeInit+0x170>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003a3a:	4a5b      	ldr	r2, [pc, #364]	; (8003ba8 <HAL_GPIO_DeInit+0x194>)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a46:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a62:	d013      	beq.n	8003a8c <HAL_GPIO_DeInit+0x78>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a51      	ldr	r2, [pc, #324]	; (8003bac <HAL_GPIO_DeInit+0x198>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00d      	beq.n	8003a88 <HAL_GPIO_DeInit+0x74>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a50      	ldr	r2, [pc, #320]	; (8003bb0 <HAL_GPIO_DeInit+0x19c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d007      	beq.n	8003a84 <HAL_GPIO_DeInit+0x70>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a4f      	ldr	r2, [pc, #316]	; (8003bb4 <HAL_GPIO_DeInit+0x1a0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <HAL_GPIO_DeInit+0x6c>
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e006      	b.n	8003a8e <HAL_GPIO_DeInit+0x7a>
 8003a80:	2305      	movs	r3, #5
 8003a82:	e004      	b.n	8003a8e <HAL_GPIO_DeInit+0x7a>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e002      	b.n	8003a8e <HAL_GPIO_DeInit+0x7a>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <HAL_GPIO_DeInit+0x7a>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	f002 0203 	and.w	r2, r2, #3
 8003a94:	0092      	lsls	r2, r2, #2
 8003a96:	4093      	lsls	r3, r2
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d132      	bne.n	8003b04 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a9e:	4b46      	ldr	r3, [pc, #280]	; (8003bb8 <HAL_GPIO_DeInit+0x1a4>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	4944      	ldr	r1, [pc, #272]	; (8003bb8 <HAL_GPIO_DeInit+0x1a4>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <HAL_GPIO_DeInit+0x1a4>)
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	4940      	ldr	r1, [pc, #256]	; (8003bb8 <HAL_GPIO_DeInit+0x1a4>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003aba:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <HAL_GPIO_DeInit+0x1a4>)
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	493d      	ldr	r1, [pc, #244]	; (8003bb8 <HAL_GPIO_DeInit+0x1a4>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ac8:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <HAL_GPIO_DeInit+0x1a4>)
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	4939      	ldr	r1, [pc, #228]	; (8003bb8 <HAL_GPIO_DeInit+0x1a4>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	220f      	movs	r2, #15
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003ae6:	4a30      	ldr	r2, [pc, #192]	; (8003ba8 <HAL_GPIO_DeInit+0x194>)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	3302      	adds	r3, #2
 8003aee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	43da      	mvns	r2, r3
 8003af6:	482c      	ldr	r0, [pc, #176]	; (8003ba8 <HAL_GPIO_DeInit+0x194>)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	400a      	ands	r2, r1
 8003afe:	3302      	adds	r3, #2
 8003b00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2103      	movs	r1, #3
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	401a      	ands	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	08da      	lsrs	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3208      	adds	r2, #8
 8003b22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	220f      	movs	r2, #15
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	08d2      	lsrs	r2, r2, #3
 8003b3a:	4019      	ands	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3208      	adds	r2, #8
 8003b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	2103      	movs	r1, #3
 8003b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	401a      	ands	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	2101      	movs	r1, #1
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	fa01 f303 	lsl.w	r3, r1, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	401a      	ands	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	2103      	movs	r1, #3
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	401a      	ands	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3301      	adds	r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f47f af46 	bne.w	8003a24 <HAL_GPIO_DeInit+0x10>
  }
}
 8003b98:	bf00      	nop
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	48000400 	.word	0x48000400
 8003bb0:	48000800 	.word	0x48000800
 8003bb4:	48000c00 	.word	0x48000c00
 8003bb8:	40010400 	.word	0x40010400

08003bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bcc:	787b      	ldrb	r3, [r7, #1]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bd2:	887a      	ldrh	r2, [r7, #2]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bd8:	e002      	b.n	8003be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bfc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f001 b823 	b.w	8004c58 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 817d 	beq.w	8003f22 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c28:	4bbc      	ldr	r3, [pc, #752]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d00c      	beq.n	8003c4e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c34:	4bb9      	ldr	r3, [pc, #740]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d15c      	bne.n	8003cfa <HAL_RCC_OscConfig+0x10e>
 8003c40:	4bb6      	ldr	r3, [pc, #728]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4c:	d155      	bne.n	8003cfa <HAL_RCC_OscConfig+0x10e>
 8003c4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c52:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c62:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d102      	bne.n	8003c80 <HAL_RCC_OscConfig+0x94>
 8003c7a:	4ba8      	ldr	r3, [pc, #672]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	e015      	b.n	8003cac <HAL_RCC_OscConfig+0xc0>
 8003c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c84:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c98:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003c9c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003ca8:	4b9c      	ldr	r3, [pc, #624]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cb0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003cb4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003cb8:	fa92 f2a2 	rbit	r2, r2
 8003cbc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003cc0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003cc4:	fab2 f282 	clz	r2, r2
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	f042 0220 	orr.w	r2, r2, #32
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	f002 021f 	and.w	r2, r2, #31
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 811f 	beq.w	8003f20 <HAL_RCC_OscConfig+0x334>
 8003ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f040 8116 	bne.w	8003f20 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f000 bfaf 	b.w	8004c58 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12e>
 8003d0c:	4b83      	ldr	r3, [pc, #524]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a82      	ldr	r2, [pc, #520]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	e036      	b.n	8003d88 <HAL_RCC_OscConfig+0x19c>
 8003d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x158>
 8003d2a:	4b7c      	ldr	r3, [pc, #496]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7b      	ldr	r2, [pc, #492]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b79      	ldr	r3, [pc, #484]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a78      	ldr	r2, [pc, #480]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e021      	b.n	8003d88 <HAL_RCC_OscConfig+0x19c>
 8003d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x184>
 8003d56:	4b71      	ldr	r3, [pc, #452]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a70      	ldr	r2, [pc, #448]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4b6e      	ldr	r3, [pc, #440]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a6d      	ldr	r2, [pc, #436]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e00b      	b.n	8003d88 <HAL_RCC_OscConfig+0x19c>
 8003d70:	4b6a      	ldr	r3, [pc, #424]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a69      	ldr	r2, [pc, #420]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b67      	ldr	r3, [pc, #412]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a66      	ldr	r2, [pc, #408]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d86:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d88:	4b64      	ldr	r3, [pc, #400]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	f023 020f 	bic.w	r2, r3, #15
 8003d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	495f      	ldr	r1, [pc, #380]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d059      	beq.n	8003e66 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7ff fba7 	bl	8003504 <HAL_GetTick>
 8003db6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7ff fba2 	bl	8003504 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b64      	cmp	r3, #100	; 0x64
 8003dca:	d902      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	f000 bf43 	b.w	8004c58 <HAL_RCC_OscConfig+0x106c>
 8003dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dd6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003de6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d102      	bne.n	8003e04 <HAL_RCC_OscConfig+0x218>
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	e015      	b.n	8003e30 <HAL_RCC_OscConfig+0x244>
 8003e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e08:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e1c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003e20:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e34:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003e38:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003e3c:	fa92 f2a2 	rbit	r2, r2
 8003e40:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003e44:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003e48:	fab2 f282 	clz	r2, r2
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	f042 0220 	orr.w	r2, r2, #32
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	f002 021f 	and.w	r2, r2, #31
 8003e58:	2101      	movs	r1, #1
 8003e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ab      	beq.n	8003dbc <HAL_RCC_OscConfig+0x1d0>
 8003e64:	e05d      	b.n	8003f22 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e66:	f7ff fb4d 	bl	8003504 <HAL_GetTick>
 8003e6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e70:	f7ff fb48 	bl	8003504 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b64      	cmp	r3, #100	; 0x64
 8003e7e:	d902      	bls.n	8003e86 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	f000 bee9 	b.w	8004c58 <HAL_RCC_OscConfig+0x106c>
 8003e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e8a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003e9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d102      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x2cc>
 8003eb2:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	e015      	b.n	8003ee4 <HAL_RCC_OscConfig+0x2f8>
 8003eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ebc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ed0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003ed4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003ed8:	fa93 f3a3 	rbit	r3, r3
 8003edc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ee8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003eec:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003ef0:	fa92 f2a2 	rbit	r2, r2
 8003ef4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003ef8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003efc:	fab2 f282 	clz	r2, r2
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	f042 0220 	orr.w	r2, r2, #32
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	f002 021f 	and.w	r2, r2, #31
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ab      	bne.n	8003e70 <HAL_RCC_OscConfig+0x284>
 8003f18:	e003      	b.n	8003f22 <HAL_RCC_OscConfig+0x336>
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 817d 	beq.w	8004232 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f38:	4ba6      	ldr	r3, [pc, #664]	; (80041d4 <HAL_RCC_OscConfig+0x5e8>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00b      	beq.n	8003f5c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f44:	4ba3      	ldr	r3, [pc, #652]	; (80041d4 <HAL_RCC_OscConfig+0x5e8>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d172      	bne.n	8004036 <HAL_RCC_OscConfig+0x44a>
 8003f50:	4ba0      	ldr	r3, [pc, #640]	; (80041d4 <HAL_RCC_OscConfig+0x5e8>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d16c      	bne.n	8004036 <HAL_RCC_OscConfig+0x44a>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003f6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f72:	fab3 f383 	clz	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d102      	bne.n	8003f8c <HAL_RCC_OscConfig+0x3a0>
 8003f86:	4b93      	ldr	r3, [pc, #588]	; (80041d4 <HAL_RCC_OscConfig+0x5e8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	e013      	b.n	8003fb4 <HAL_RCC_OscConfig+0x3c8>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003f96:	fa93 f3a3 	rbit	r3, r3
 8003f9a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003fa4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003fa8:	fa93 f3a3 	rbit	r3, r3
 8003fac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003fb0:	4b88      	ldr	r3, [pc, #544]	; (80041d4 <HAL_RCC_OscConfig+0x5e8>)
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003fba:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003fbe:	fa92 f2a2 	rbit	r2, r2
 8003fc2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003fc6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003fca:	fab2 f282 	clz	r2, r2
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	f042 0220 	orr.w	r2, r2, #32
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	f002 021f 	and.w	r2, r2, #31
 8003fda:	2101      	movs	r1, #1
 8003fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCC_OscConfig+0x410>
 8003fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d002      	beq.n	8003ffc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f000 be2e 	b.w	8004c58 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffc:	4b75      	ldr	r3, [pc, #468]	; (80041d4 <HAL_RCC_OscConfig+0x5e8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004008:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	21f8      	movs	r1, #248	; 0xf8
 8004012:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800401a:	fa91 f1a1 	rbit	r1, r1
 800401e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004022:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004026:	fab1 f181 	clz	r1, r1
 800402a:	b2c9      	uxtb	r1, r1
 800402c:	408b      	lsls	r3, r1
 800402e:	4969      	ldr	r1, [pc, #420]	; (80041d4 <HAL_RCC_OscConfig+0x5e8>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004034:	e0fd      	b.n	8004232 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8088 	beq.w	8004158 <HAL_RCC_OscConfig+0x56c>
 8004048:	2301      	movs	r3, #1
 800404a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004052:	fa93 f3a3 	rbit	r3, r3
 8004056:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800405a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004068:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	461a      	mov	r2, r3
 8004070:	2301      	movs	r3, #1
 8004072:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7ff fa46 	bl	8003504 <HAL_GetTick>
 8004078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407e:	f7ff fa41 	bl	8003504 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d902      	bls.n	8004094 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	f000 bde2 	b.w	8004c58 <HAL_RCC_OscConfig+0x106c>
 8004094:	2302      	movs	r3, #2
 8004096:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80040a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d102      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4d8>
 80040be:	4b45      	ldr	r3, [pc, #276]	; (80041d4 <HAL_RCC_OscConfig+0x5e8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	e013      	b.n	80040ec <HAL_RCC_OscConfig+0x500>
 80040c4:	2302      	movs	r3, #2
 80040c6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80040d6:	2302      	movs	r3, #2
 80040d8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80040dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80040e0:	fa93 f3a3 	rbit	r3, r3
 80040e4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80040e8:	4b3a      	ldr	r3, [pc, #232]	; (80041d4 <HAL_RCC_OscConfig+0x5e8>)
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	2202      	movs	r2, #2
 80040ee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80040f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80040f6:	fa92 f2a2 	rbit	r2, r2
 80040fa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80040fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004102:	fab2 f282 	clz	r2, r2
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	f042 0220 	orr.w	r2, r2, #32
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	f002 021f 	and.w	r2, r2, #31
 8004112:	2101      	movs	r1, #1
 8004114:	fa01 f202 	lsl.w	r2, r1, r2
 8004118:	4013      	ands	r3, r2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0af      	beq.n	800407e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411e:	4b2d      	ldr	r3, [pc, #180]	; (80041d4 <HAL_RCC_OscConfig+0x5e8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	21f8      	movs	r1, #248	; 0xf8
 8004134:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800413c:	fa91 f1a1 	rbit	r1, r1
 8004140:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004144:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004148:	fab1 f181 	clz	r1, r1
 800414c:	b2c9      	uxtb	r1, r1
 800414e:	408b      	lsls	r3, r1
 8004150:	4920      	ldr	r1, [pc, #128]	; (80041d4 <HAL_RCC_OscConfig+0x5e8>)
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]
 8004156:	e06c      	b.n	8004232 <HAL_RCC_OscConfig+0x646>
 8004158:	2301      	movs	r3, #1
 800415a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800416a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004178:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	461a      	mov	r2, r3
 8004180:	2300      	movs	r3, #0
 8004182:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7ff f9be 	bl	8003504 <HAL_GetTick>
 8004188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418e:	f7ff f9b9 	bl	8003504 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d902      	bls.n	80041a4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	f000 bd5a 	b.w	8004c58 <HAL_RCC_OscConfig+0x106c>
 80041a4:	2302      	movs	r3, #2
 80041a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80041b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d104      	bne.n	80041d8 <HAL_RCC_OscConfig+0x5ec>
 80041ce:	4b01      	ldr	r3, [pc, #4]	; (80041d4 <HAL_RCC_OscConfig+0x5e8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	e015      	b.n	8004200 <HAL_RCC_OscConfig+0x614>
 80041d4:	40021000 	.word	0x40021000
 80041d8:	2302      	movs	r3, #2
 80041da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041ea:	2302      	movs	r3, #2
 80041ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80041f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80041fc:	4bc8      	ldr	r3, [pc, #800]	; (8004520 <HAL_RCC_OscConfig+0x934>)
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	2202      	movs	r2, #2
 8004202:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004206:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800420a:	fa92 f2a2 	rbit	r2, r2
 800420e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004212:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004216:	fab2 f282 	clz	r2, r2
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	f042 0220 	orr.w	r2, r2, #32
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	f002 021f 	and.w	r2, r2, #31
 8004226:	2101      	movs	r1, #1
 8004228:	fa01 f202 	lsl.w	r2, r1, r2
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1ad      	bne.n	800418e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8110 	beq.w	8004468 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d079      	beq.n	800434c <HAL_RCC_OscConfig+0x760>
 8004258:	2301      	movs	r3, #1
 800425a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800426a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	4bab      	ldr	r3, [pc, #684]	; (8004524 <HAL_RCC_OscConfig+0x938>)
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	461a      	mov	r2, r3
 800427e:	2301      	movs	r3, #1
 8004280:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004282:	f7ff f93f 	bl	8003504 <HAL_GetTick>
 8004286:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800428c:	f7ff f93a 	bl	8003504 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d902      	bls.n	80042a2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	f000 bcdb 	b.w	8004c58 <HAL_RCC_OscConfig+0x106c>
 80042a2:	2302      	movs	r3, #2
 80042a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042ac:	fa93 f3a3 	rbit	r3, r3
 80042b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80042b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042bc:	2202      	movs	r2, #2
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	fa93 f2a3 	rbit	r2, r3
 80042ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042e0:	2202      	movs	r2, #2
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	fa93 f2a3 	rbit	r2, r3
 80042f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fc:	4b88      	ldr	r3, [pc, #544]	; (8004520 <HAL_RCC_OscConfig+0x934>)
 80042fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004304:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004308:	2102      	movs	r1, #2
 800430a:	6019      	str	r1, [r3, #0]
 800430c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004310:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	fa93 f1a3 	rbit	r1, r3
 800431a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004322:	6019      	str	r1, [r3, #0]
  return result;
 8004324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004328:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004338:	b2db      	uxtb	r3, r3
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	2101      	movs	r1, #1
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	4013      	ands	r3, r2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0a0      	beq.n	800428c <HAL_RCC_OscConfig+0x6a0>
 800434a:	e08d      	b.n	8004468 <HAL_RCC_OscConfig+0x87c>
 800434c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004350:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004354:	2201      	movs	r2, #1
 8004356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	fa93 f2a3 	rbit	r2, r3
 8004366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800436e:	601a      	str	r2, [r3, #0]
  return result;
 8004370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004374:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004378:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800437a:	fab3 f383 	clz	r3, r3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	4b68      	ldr	r3, [pc, #416]	; (8004524 <HAL_RCC_OscConfig+0x938>)
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	461a      	mov	r2, r3
 800438a:	2300      	movs	r3, #0
 800438c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438e:	f7ff f8b9 	bl	8003504 <HAL_GetTick>
 8004392:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004396:	e00a      	b.n	80043ae <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004398:	f7ff f8b4 	bl	8003504 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d902      	bls.n	80043ae <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	f000 bc55 	b.w	8004c58 <HAL_RCC_OscConfig+0x106c>
 80043ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043b6:	2202      	movs	r2, #2
 80043b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	fa93 f2a3 	rbit	r2, r3
 80043c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043da:	2202      	movs	r2, #2
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	fa93 f2a3 	rbit	r2, r3
 80043ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043fe:	2202      	movs	r2, #2
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	fa93 f2a3 	rbit	r2, r3
 8004410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004414:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004418:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800441a:	4b41      	ldr	r3, [pc, #260]	; (8004520 <HAL_RCC_OscConfig+0x934>)
 800441c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800441e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004422:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004426:	2102      	movs	r1, #2
 8004428:	6019      	str	r1, [r3, #0]
 800442a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	fa93 f1a3 	rbit	r1, r3
 8004438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004440:	6019      	str	r1, [r3, #0]
  return result;
 8004442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004446:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	fab3 f383 	clz	r3, r3
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	2101      	movs	r1, #1
 800445e:	fa01 f303 	lsl.w	r3, r1, r3
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d197      	bne.n	8004398 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 81a1 	beq.w	80047c0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800447e:	2300      	movs	r3, #0
 8004480:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004484:	4b26      	ldr	r3, [pc, #152]	; (8004520 <HAL_RCC_OscConfig+0x934>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d116      	bne.n	80044be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	4b23      	ldr	r3, [pc, #140]	; (8004520 <HAL_RCC_OscConfig+0x934>)
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	4a22      	ldr	r2, [pc, #136]	; (8004520 <HAL_RCC_OscConfig+0x934>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449a:	61d3      	str	r3, [r2, #28]
 800449c:	4b20      	ldr	r3, [pc, #128]	; (8004520 <HAL_RCC_OscConfig+0x934>)
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80044a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80044b6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044be:	4b1a      	ldr	r3, [pc, #104]	; (8004528 <HAL_RCC_OscConfig+0x93c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11a      	bne.n	8004500 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ca:	4b17      	ldr	r3, [pc, #92]	; (8004528 <HAL_RCC_OscConfig+0x93c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a16      	ldr	r2, [pc, #88]	; (8004528 <HAL_RCC_OscConfig+0x93c>)
 80044d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d6:	f7ff f815 	bl	8003504 <HAL_GetTick>
 80044da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044de:	e009      	b.n	80044f4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e0:	f7ff f810 	bl	8003504 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b64      	cmp	r3, #100	; 0x64
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e3b1      	b.n	8004c58 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f4:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <HAL_RCC_OscConfig+0x93c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0ef      	beq.n	80044e0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004504:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10d      	bne.n	800452c <HAL_RCC_OscConfig+0x940>
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <HAL_RCC_OscConfig+0x934>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	4a02      	ldr	r2, [pc, #8]	; (8004520 <HAL_RCC_OscConfig+0x934>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6213      	str	r3, [r2, #32]
 800451c:	e03c      	b.n	8004598 <HAL_RCC_OscConfig+0x9ac>
 800451e:	bf00      	nop
 8004520:	40021000 	.word	0x40021000
 8004524:	10908120 	.word	0x10908120
 8004528:	40007000 	.word	0x40007000
 800452c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004530:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10c      	bne.n	8004556 <HAL_RCC_OscConfig+0x96a>
 800453c:	4bc1      	ldr	r3, [pc, #772]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	4ac0      	ldr	r2, [pc, #768]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	6213      	str	r3, [r2, #32]
 8004548:	4bbe      	ldr	r3, [pc, #760]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	4abd      	ldr	r2, [pc, #756]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 800454e:	f023 0304 	bic.w	r3, r3, #4
 8004552:	6213      	str	r3, [r2, #32]
 8004554:	e020      	b.n	8004598 <HAL_RCC_OscConfig+0x9ac>
 8004556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800455a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b05      	cmp	r3, #5
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x994>
 8004566:	4bb7      	ldr	r3, [pc, #732]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	4ab6      	ldr	r2, [pc, #728]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 800456c:	f043 0304 	orr.w	r3, r3, #4
 8004570:	6213      	str	r3, [r2, #32]
 8004572:	4bb4      	ldr	r3, [pc, #720]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4ab3      	ldr	r2, [pc, #716]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6213      	str	r3, [r2, #32]
 800457e:	e00b      	b.n	8004598 <HAL_RCC_OscConfig+0x9ac>
 8004580:	4bb0      	ldr	r3, [pc, #704]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	4aaf      	ldr	r2, [pc, #700]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	6213      	str	r3, [r2, #32]
 800458c:	4bad      	ldr	r3, [pc, #692]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	4aac      	ldr	r2, [pc, #688]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 8004592:	f023 0304 	bic.w	r3, r3, #4
 8004596:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800459c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8081 	beq.w	80046ac <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045aa:	f7fe ffab 	bl	8003504 <HAL_GetTick>
 80045ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b2:	e00b      	b.n	80045cc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b4:	f7fe ffa6 	bl	8003504 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e345      	b.n	8004c58 <HAL_RCC_OscConfig+0x106c>
 80045cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045d4:	2202      	movs	r2, #2
 80045d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	fa93 f2a3 	rbit	r2, r3
 80045e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045f8:	2202      	movs	r2, #2
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004600:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	fa93 f2a3 	rbit	r2, r3
 800460a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004612:	601a      	str	r2, [r3, #0]
  return result;
 8004614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004618:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800461c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f043 0302 	orr.w	r3, r3, #2
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d102      	bne.n	8004638 <HAL_RCC_OscConfig+0xa4c>
 8004632:	4b84      	ldr	r3, [pc, #528]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	e013      	b.n	8004660 <HAL_RCC_OscConfig+0xa74>
 8004638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004640:	2202      	movs	r2, #2
 8004642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004648:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	fa93 f2a3 	rbit	r2, r3
 8004652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004656:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	4b79      	ldr	r3, [pc, #484]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004664:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004668:	2102      	movs	r1, #2
 800466a:	6011      	str	r1, [r2, #0]
 800466c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004670:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	fa92 f1a2 	rbit	r1, r2
 800467a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800467e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004682:	6011      	str	r1, [r2, #0]
  return result;
 8004684:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004688:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	fab2 f282 	clz	r2, r2
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	f002 021f 	and.w	r2, r2, #31
 800469e:	2101      	movs	r1, #1
 80046a0:	fa01 f202 	lsl.w	r2, r1, r2
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d084      	beq.n	80045b4 <HAL_RCC_OscConfig+0x9c8>
 80046aa:	e07f      	b.n	80047ac <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ac:	f7fe ff2a 	bl	8003504 <HAL_GetTick>
 80046b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b4:	e00b      	b.n	80046ce <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b6:	f7fe ff25 	bl	8003504 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e2c4      	b.n	8004c58 <HAL_RCC_OscConfig+0x106c>
 80046ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046d6:	2202      	movs	r2, #2
 80046d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046de:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	fa93 f2a3 	rbit	r2, r3
 80046e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046fa:	2202      	movs	r2, #2
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004702:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	fa93 f2a3 	rbit	r2, r3
 800470c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004710:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004714:	601a      	str	r2, [r3, #0]
  return result;
 8004716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800471a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800471e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004720:	fab3 f383 	clz	r3, r3
 8004724:	b2db      	uxtb	r3, r3
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	b2db      	uxtb	r3, r3
 800472a:	f043 0302 	orr.w	r3, r3, #2
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d102      	bne.n	800473a <HAL_RCC_OscConfig+0xb4e>
 8004734:	4b43      	ldr	r3, [pc, #268]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	e013      	b.n	8004762 <HAL_RCC_OscConfig+0xb76>
 800473a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004742:	2202      	movs	r2, #2
 8004744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800474a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	fa93 f2a3 	rbit	r2, r3
 8004754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004758:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	4b39      	ldr	r3, [pc, #228]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004766:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800476a:	2102      	movs	r1, #2
 800476c:	6011      	str	r1, [r2, #0]
 800476e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004772:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	fa92 f1a2 	rbit	r1, r2
 800477c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004780:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004784:	6011      	str	r1, [r2, #0]
  return result;
 8004786:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800478a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	fab2 f282 	clz	r2, r2
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	f002 021f 	and.w	r2, r2, #31
 80047a0:	2101      	movs	r1, #1
 80047a2:	fa01 f202 	lsl.w	r2, r1, r2
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d184      	bne.n	80046b6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047ac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b4:	4b23      	ldr	r3, [pc, #140]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	4a22      	ldr	r2, [pc, #136]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 80047ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8242 	beq.w	8004c56 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047d2:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <HAL_RCC_OscConfig+0xc58>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	2b08      	cmp	r3, #8
 80047dc:	f000 8213 	beq.w	8004c06 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	f040 8162 	bne.w	8004ab6 <HAL_RCC_OscConfig+0xeca>
 80047f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004804:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	fa93 f2a3 	rbit	r2, r3
 800480e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004812:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004816:	601a      	str	r2, [r3, #0]
  return result;
 8004818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004820:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004822:	fab3 f383 	clz	r3, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800482c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	461a      	mov	r2, r3
 8004834:	2300      	movs	r3, #0
 8004836:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fe fe64 	bl	8003504 <HAL_GetTick>
 800483c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004840:	e00c      	b.n	800485c <HAL_RCC_OscConfig+0xc70>
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004848:	f7fe fe5c 	bl	8003504 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e1fd      	b.n	8004c58 <HAL_RCC_OscConfig+0x106c>
 800485c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004860:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004864:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	fa93 f2a3 	rbit	r2, r3
 8004878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004880:	601a      	str	r2, [r3, #0]
  return result;
 8004882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004886:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800488a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800488c:	fab3 f383 	clz	r3, r3
 8004890:	b2db      	uxtb	r3, r3
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d102      	bne.n	80048a6 <HAL_RCC_OscConfig+0xcba>
 80048a0:	4bb0      	ldr	r3, [pc, #704]	; (8004b64 <HAL_RCC_OscConfig+0xf78>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	e027      	b.n	80048f6 <HAL_RCC_OscConfig+0xd0a>
 80048a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048aa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	fa93 f2a3 	rbit	r2, r3
 80048c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048de:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	fa93 f2a3 	rbit	r2, r3
 80048e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	4b9c      	ldr	r3, [pc, #624]	; (8004b64 <HAL_RCC_OscConfig+0xf78>)
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048fa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004902:	6011      	str	r1, [r2, #0]
 8004904:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004908:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	fa92 f1a2 	rbit	r1, r2
 8004912:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004916:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800491a:	6011      	str	r1, [r2, #0]
  return result;
 800491c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004920:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	fab2 f282 	clz	r2, r2
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	f042 0220 	orr.w	r2, r2, #32
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	f002 021f 	and.w	r2, r2, #31
 8004936:	2101      	movs	r1, #1
 8004938:	fa01 f202 	lsl.w	r2, r1, r2
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d182      	bne.n	8004848 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004942:	4b88      	ldr	r3, [pc, #544]	; (8004b64 <HAL_RCC_OscConfig+0xf78>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800494a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800494e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	430b      	orrs	r3, r1
 8004964:	497f      	ldr	r1, [pc, #508]	; (8004b64 <HAL_RCC_OscConfig+0xf78>)
 8004966:	4313      	orrs	r3, r2
 8004968:	604b      	str	r3, [r1, #4]
 800496a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004972:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	fa93 f2a3 	rbit	r2, r3
 8004986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800498e:	601a      	str	r2, [r3, #0]
  return result;
 8004990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004994:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004998:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	461a      	mov	r2, r3
 80049ac:	2301      	movs	r3, #1
 80049ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7fe fda8 	bl	8003504 <HAL_GetTick>
 80049b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049b8:	e009      	b.n	80049ce <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fe fda3 	bl	8003504 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e144      	b.n	8004c58 <HAL_RCC_OscConfig+0x106c>
 80049ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	fa93 f2a3 	rbit	r2, r3
 80049ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049f2:	601a      	str	r2, [r3, #0]
  return result;
 80049f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d102      	bne.n	8004a18 <HAL_RCC_OscConfig+0xe2c>
 8004a12:	4b54      	ldr	r3, [pc, #336]	; (8004b64 <HAL_RCC_OscConfig+0xf78>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	e027      	b.n	8004a68 <HAL_RCC_OscConfig+0xe7c>
 8004a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	fa93 f2a3 	rbit	r2, r3
 8004a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a38:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a42:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a50:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	fa93 f2a3 	rbit	r2, r3
 8004a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a5e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	4b3f      	ldr	r3, [pc, #252]	; (8004b64 <HAL_RCC_OscConfig+0xf78>)
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a6c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a74:	6011      	str	r1, [r2, #0]
 8004a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a7a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	fa92 f1a2 	rbit	r1, r2
 8004a84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a88:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a8c:	6011      	str	r1, [r2, #0]
  return result;
 8004a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a92:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	fab2 f282 	clz	r2, r2
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	f042 0220 	orr.w	r2, r2, #32
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	f002 021f 	and.w	r2, r2, #31
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8004aae:	4013      	ands	r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d082      	beq.n	80049ba <HAL_RCC_OscConfig+0xdce>
 8004ab4:	e0cf      	b.n	8004c56 <HAL_RCC_OscConfig+0x106a>
 8004ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aba:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004abe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	fa93 f2a3 	rbit	r2, r3
 8004ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004ada:	601a      	str	r2, [r3, #0]
  return result;
 8004adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004ae4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae6:	fab3 f383 	clz	r3, r3
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004af0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	461a      	mov	r2, r3
 8004af8:	2300      	movs	r3, #0
 8004afa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fe fd02 	bl	8003504 <HAL_GetTick>
 8004b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b04:	e009      	b.n	8004b1a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fe fcfd 	bl	8003504 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e09e      	b.n	8004c58 <HAL_RCC_OscConfig+0x106c>
 8004b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b1e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	fa93 f2a3 	rbit	r2, r3
 8004b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b3e:	601a      	str	r2, [r3, #0]
  return result;
 8004b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b44:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b4a:	fab3 f383 	clz	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d104      	bne.n	8004b68 <HAL_RCC_OscConfig+0xf7c>
 8004b5e:	4b01      	ldr	r3, [pc, #4]	; (8004b64 <HAL_RCC_OscConfig+0xf78>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	e029      	b.n	8004bb8 <HAL_RCC_OscConfig+0xfcc>
 8004b64:	40021000 	.word	0x40021000
 8004b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	fa93 f2a3 	rbit	r2, r3
 8004b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b88:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b92:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	fa93 f2a3 	rbit	r2, r3
 8004baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <HAL_RCC_OscConfig+0x1078>)
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bbc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004bc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004bc4:	6011      	str	r1, [r2, #0]
 8004bc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bca:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004bce:	6812      	ldr	r2, [r2, #0]
 8004bd0:	fa92 f1a2 	rbit	r1, r2
 8004bd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bd8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004bdc:	6011      	str	r1, [r2, #0]
  return result;
 8004bde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004be2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	fab2 f282 	clz	r2, r2
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	f042 0220 	orr.w	r2, r2, #32
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	f002 021f 	and.w	r2, r2, #31
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d180      	bne.n	8004b06 <HAL_RCC_OscConfig+0xf1a>
 8004c04:	e027      	b.n	8004c56 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e01e      	b.n	8004c58 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <HAL_RCC_OscConfig+0x1078>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c26:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d10b      	bne.n	8004c52 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d001      	beq.n	8004c56 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40021000 	.word	0x40021000

08004c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b09e      	sub	sp, #120	; 0x78
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e162      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c80:	4b90      	ldr	r3, [pc, #576]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d910      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b8d      	ldr	r3, [pc, #564]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 0207 	bic.w	r2, r3, #7
 8004c96:	498b      	ldr	r1, [pc, #556]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b89      	ldr	r3, [pc, #548]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e14a      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cbc:	4b82      	ldr	r3, [pc, #520]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	497f      	ldr	r1, [pc, #508]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 80dc 	beq.w	8004e94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d13c      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xf6>
 8004ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ce8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cec:	fa93 f3a3 	rbit	r3, r3
 8004cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf4:	fab3 f383 	clz	r3, r3
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d102      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xa6>
 8004d08:	4b6f      	ldr	r3, [pc, #444]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	e00f      	b.n	8004d2e <HAL_RCC_ClockConfig+0xc6>
 8004d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d16:	fa93 f3a3 	rbit	r3, r3
 8004d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8004d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d20:	663b      	str	r3, [r7, #96]	; 0x60
 8004d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d24:	fa93 f3a3 	rbit	r3, r3
 8004d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d2a:	4b67      	ldr	r3, [pc, #412]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d32:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d36:	fa92 f2a2 	rbit	r2, r2
 8004d3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d3e:	fab2 f282 	clz	r2, r2
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	f042 0220 	orr.w	r2, r2, #32
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	f002 021f 	and.w	r2, r2, #31
 8004d4e:	2101      	movs	r1, #1
 8004d50:	fa01 f202 	lsl.w	r2, r1, r2
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d17b      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0f3      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d13c      	bne.n	8004de0 <HAL_RCC_ClockConfig+0x178>
 8004d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d102      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x128>
 8004d8a:	4b4f      	ldr	r3, [pc, #316]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	e00f      	b.n	8004db0 <HAL_RCC_ClockConfig+0x148>
 8004d90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004da2:	643b      	str	r3, [r7, #64]	; 0x40
 8004da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dac:	4b46      	ldr	r3, [pc, #280]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004db4:	63ba      	str	r2, [r7, #56]	; 0x38
 8004db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004db8:	fa92 f2a2 	rbit	r2, r2
 8004dbc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc0:	fab2 f282 	clz	r2, r2
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	f042 0220 	orr.w	r2, r2, #32
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	f002 021f 	and.w	r2, r2, #31
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d13a      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0b2      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
 8004de0:	2302      	movs	r3, #2
 8004de2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	fa93 f3a3 	rbit	r3, r3
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dee:	fab3 f383 	clz	r3, r3
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d102      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x1a0>
 8004e02:	4b31      	ldr	r3, [pc, #196]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	e00d      	b.n	8004e24 <HAL_RCC_ClockConfig+0x1bc>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	fa93 f3a3 	rbit	r3, r3
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
 8004e14:	2302      	movs	r3, #2
 8004e16:	623b      	str	r3, [r7, #32]
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	fa93 f3a3 	rbit	r3, r3
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	4b29      	ldr	r3, [pc, #164]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	2202      	movs	r2, #2
 8004e26:	61ba      	str	r2, [r7, #24]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	fa92 f2a2 	rbit	r2, r2
 8004e2e:	617a      	str	r2, [r7, #20]
  return result;
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	fab2 f282 	clz	r2, r2
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	f042 0220 	orr.w	r2, r2, #32
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	f002 021f 	and.w	r2, r2, #31
 8004e42:	2101      	movs	r1, #1
 8004e44:	fa01 f202 	lsl.w	r2, r1, r2
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e079      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e52:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f023 0203 	bic.w	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	491a      	ldr	r1, [pc, #104]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e64:	f7fe fb4e 	bl	8003504 <HAL_GetTick>
 8004e68:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e6c:	f7fe fb4a 	bl	8003504 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e061      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 020c 	and.w	r2, r3, #12
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d1eb      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d214      	bcs.n	8004ecc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 0207 	bic.w	r2, r3, #7
 8004eaa:	4906      	ldr	r1, [pc, #24]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d005      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e040      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
 8004ec4:	40022000 	.word	0x40022000
 8004ec8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	491a      	ldr	r1, [pc, #104]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ef6:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4912      	ldr	r1, [pc, #72]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f0a:	f000 f829 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8004f0e:	4601      	mov	r1, r0
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f18:	22f0      	movs	r2, #240	; 0xf0
 8004f1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	fa92 f2a2 	rbit	r2, r2
 8004f22:	60fa      	str	r2, [r7, #12]
  return result;
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	fab2 f282 	clz	r2, r2
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	40d3      	lsrs	r3, r2
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <HAL_RCC_ClockConfig+0x2ec>)
 8004f30:	5cd3      	ldrb	r3, [r2, r3]
 8004f32:	fa21 f303 	lsr.w	r3, r1, r3
 8004f36:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <HAL_RCC_ClockConfig+0x2f0>)
 8004f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f3a:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <HAL_RCC_ClockConfig+0x2f4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe fa9c 	bl	800347c <HAL_InitTick>
  
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3778      	adds	r7, #120	; 0x78
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000
 8004f54:	08008898 	.word	0x08008898
 8004f58:	20000000 	.word	0x20000000
 8004f5c:	20000004 	.word	0x20000004

08004f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b08b      	sub	sp, #44	; 0x2c
 8004f64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004f7a:	4b29      	ldr	r3, [pc, #164]	; (8005020 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d002      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x30>
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x36>
 8004f8e:	e03c      	b.n	800500a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f90:	4b24      	ldr	r3, [pc, #144]	; (8005024 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f92:	623b      	str	r3, [r7, #32]
      break;
 8004f94:	e03c      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004f9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004fa0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	fa92 f2a2 	rbit	r2, r2
 8004fa8:	607a      	str	r2, [r7, #4]
  return result;
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	fab2 f282 	clz	r2, r2
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	40d3      	lsrs	r3, r2
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004fb6:	5cd3      	ldrb	r3, [r2, r3]
 8004fb8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004fba:	4b19      	ldr	r3, [pc, #100]	; (8005020 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	220f      	movs	r2, #15
 8004fc4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	fa92 f2a2 	rbit	r2, r2
 8004fcc:	60fa      	str	r2, [r7, #12]
  return result;
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	fab2 f282 	clz	r2, r2
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	40d3      	lsrs	r3, r2
 8004fd8:	4a14      	ldr	r2, [pc, #80]	; (800502c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fda:	5cd3      	ldrb	r3, [r2, r3]
 8004fdc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004fe8:	4a0e      	ldr	r2, [pc, #56]	; (8005024 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff8:	e004      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	4a0c      	ldr	r2, [pc, #48]	; (8005030 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	623b      	str	r3, [r7, #32]
      break;
 8005008:	e002      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800500a:	4b06      	ldr	r3, [pc, #24]	; (8005024 <HAL_RCC_GetSysClockFreq+0xc4>)
 800500c:	623b      	str	r3, [r7, #32]
      break;
 800500e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005010:	6a3b      	ldr	r3, [r7, #32]
}
 8005012:	4618      	mov	r0, r3
 8005014:	372c      	adds	r7, #44	; 0x2c
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40021000 	.word	0x40021000
 8005024:	007a1200 	.word	0x007a1200
 8005028:	080088b0 	.word	0x080088b0
 800502c:	080088c0 	.word	0x080088c0
 8005030:	003d0900 	.word	0x003d0900

08005034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005038:	4b03      	ldr	r3, [pc, #12]	; (8005048 <HAL_RCC_GetHCLKFreq+0x14>)
 800503a:	681b      	ldr	r3, [r3, #0]
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000000 	.word	0x20000000

0800504c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005052:	f7ff ffef 	bl	8005034 <HAL_RCC_GetHCLKFreq>
 8005056:	4601      	mov	r1, r0
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005060:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005064:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	fa92 f2a2 	rbit	r2, r2
 800506c:	603a      	str	r2, [r7, #0]
  return result;
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	fab2 f282 	clz	r2, r2
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	40d3      	lsrs	r3, r2
 8005078:	4a04      	ldr	r2, [pc, #16]	; (800508c <HAL_RCC_GetPCLK1Freq+0x40>)
 800507a:	5cd3      	ldrb	r3, [r2, r3]
 800507c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40021000 	.word	0x40021000
 800508c:	080088a8 	.word	0x080088a8

08005090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005096:	f7ff ffcd 	bl	8005034 <HAL_RCC_GetHCLKFreq>
 800509a:	4601      	mov	r1, r0
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80050a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80050a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	fa92 f2a2 	rbit	r2, r2
 80050b0:	603a      	str	r2, [r7, #0]
  return result;
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	fab2 f282 	clz	r2, r2
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	40d3      	lsrs	r3, r2
 80050bc:	4a04      	ldr	r2, [pc, #16]	; (80050d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80050be:	5cd3      	ldrb	r3, [r2, r3]
 80050c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40021000 	.word	0x40021000
 80050d0:	080088a8 	.word	0x080088a8

080050d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b092      	sub	sp, #72	; 0x48
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 80cd 	beq.w	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f8:	4b86      	ldr	r3, [pc, #536]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10e      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005104:	4b83      	ldr	r3, [pc, #524]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	4a82      	ldr	r2, [pc, #520]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800510a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510e:	61d3      	str	r3, [r2, #28]
 8005110:	4b80      	ldr	r3, [pc, #512]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511c:	2301      	movs	r3, #1
 800511e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005122:	4b7d      	ldr	r3, [pc, #500]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d118      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512e:	4b7a      	ldr	r3, [pc, #488]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a79      	ldr	r2, [pc, #484]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005138:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513a:	f7fe f9e3 	bl	8003504 <HAL_GetTick>
 800513e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	e008      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005142:	f7fe f9df 	bl	8003504 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b64      	cmp	r3, #100	; 0x64
 800514e:	d901      	bls.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e0db      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005154:	4b70      	ldr	r3, [pc, #448]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005160:	4b6c      	ldr	r3, [pc, #432]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005168:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800516a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d07d      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800517a:	429a      	cmp	r2, r3
 800517c:	d076      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800517e:	4b65      	ldr	r3, [pc, #404]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800518c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	fa93 f3a3 	rbit	r3, r3
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005198:	fab3 f383 	clz	r3, r3
 800519c:	b2db      	uxtb	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	4b5e      	ldr	r3, [pc, #376]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	461a      	mov	r2, r3
 80051a8:	2301      	movs	r3, #1
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	fa93 f3a3 	rbit	r3, r3
 80051b8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80051ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051bc:	fab3 f383 	clz	r3, r3
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	4b55      	ldr	r3, [pc, #340]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	461a      	mov	r2, r3
 80051cc:	2300      	movs	r3, #0
 80051ce:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051d0:	4a50      	ldr	r2, [pc, #320]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80051d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d045      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e0:	f7fe f990 	bl	8003504 <HAL_GetTick>
 80051e4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e6:	e00a      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e8:	f7fe f98c 	bl	8003504 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d901      	bls.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e086      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x238>
 80051fe:	2302      	movs	r3, #2
 8005200:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	fa93 f3a3 	rbit	r3, r3
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
 800520a:	2302      	movs	r3, #2
 800520c:	623b      	str	r3, [r7, #32]
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	fa93 f3a3 	rbit	r3, r3
 8005214:	61fb      	str	r3, [r7, #28]
  return result;
 8005216:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005218:	fab3 f383 	clz	r3, r3
 800521c:	b2db      	uxtb	r3, r3
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	b2db      	uxtb	r3, r3
 8005222:	f043 0302 	orr.w	r3, r3, #2
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d102      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800522c:	4b39      	ldr	r3, [pc, #228]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	e007      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005232:	2302      	movs	r3, #2
 8005234:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	fa93 f3a3 	rbit	r3, r3
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	4b35      	ldr	r3, [pc, #212]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2202      	movs	r2, #2
 8005244:	613a      	str	r2, [r7, #16]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	fa92 f2a2 	rbit	r2, r2
 800524c:	60fa      	str	r2, [r7, #12]
  return result;
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	fab2 f282 	clz	r2, r2
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	f002 021f 	and.w	r2, r2, #31
 8005260:	2101      	movs	r1, #1
 8005262:	fa01 f202 	lsl.w	r2, r1, r2
 8005266:	4013      	ands	r3, r2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0bd      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800526c:	4b29      	ldr	r3, [pc, #164]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	4926      	ldr	r1, [pc, #152]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800527a:	4313      	orrs	r3, r2
 800527c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800527e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005282:	2b01      	cmp	r3, #1
 8005284:	d105      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005286:	4b23      	ldr	r3, [pc, #140]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	4a22      	ldr	r2, [pc, #136]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800528c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005290:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d008      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800529e:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f023 0203 	bic.w	r2, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	491a      	ldr	r1, [pc, #104]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052bc:	4b15      	ldr	r3, [pc, #84]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	f023 0210 	bic.w	r2, r3, #16
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4912      	ldr	r1, [pc, #72]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052da:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	490b      	ldr	r1, [pc, #44]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	4903      	ldr	r1, [pc, #12]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005306:	4313      	orrs	r3, r2
 8005308:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3748      	adds	r7, #72	; 0x48
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40021000 	.word	0x40021000
 8005318:	40007000 	.word	0x40007000
 800531c:	10908100 	.word	0x10908100

08005320 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e095      	b.n	800545e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d108      	bne.n	800534c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005342:	d009      	beq.n	8005358 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	61da      	str	r2, [r3, #28]
 800534a:	e005      	b.n	8005358 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fd feda 	bl	800312c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005398:	d902      	bls.n	80053a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e002      	b.n	80053a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053ae:	d007      	beq.n	80053c0 <HAL_SPI_Init+0xa0>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053b8:	d002      	beq.n	80053c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005402:	ea42 0103 	orr.w	r1, r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	0c1b      	lsrs	r3, r3, #16
 800541c:	f003 0204 	and.w	r2, r3, #4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800543c:	ea42 0103 	orr.w	r1, r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e01a      	b.n	80054ae <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800548e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fd fe8d 	bl	80031b0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b088      	sub	sp, #32
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	603b      	str	r3, [r7, #0]
 80054c2:	4613      	mov	r3, r2
 80054c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_SPI_Transmit+0x22>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e15f      	b.n	8005798 <HAL_SPI_Transmit+0x2e2>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e0:	f7fe f810 	bl	8003504 <HAL_GetTick>
 80054e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d002      	beq.n	80054fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054f6:	2302      	movs	r3, #2
 80054f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054fa:	e148      	b.n	800578e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_SPI_Transmit+0x52>
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d102      	bne.n	800550e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800550c:	e13f      	b.n	800578e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2203      	movs	r2, #3
 8005512:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	88fa      	ldrh	r2, [r7, #6]
 8005526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005558:	d10f      	bne.n	800557a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005568:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005578:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d007      	beq.n	8005598 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055a0:	d94f      	bls.n	8005642 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_SPI_Transmit+0xfa>
 80055aa:	8afb      	ldrh	r3, [r7, #22]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d142      	bne.n	8005636 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	881a      	ldrh	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	1c9a      	adds	r2, r3, #2
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055d4:	e02f      	b.n	8005636 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d112      	bne.n	800560a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	881a      	ldrh	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	1c9a      	adds	r2, r3, #2
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005608:	e015      	b.n	8005636 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800560a:	f7fd ff7b 	bl	8003504 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d803      	bhi.n	8005622 <HAL_SPI_Transmit+0x16c>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d102      	bne.n	8005628 <HAL_SPI_Transmit+0x172>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005634:	e0ab      	b.n	800578e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1ca      	bne.n	80055d6 <HAL_SPI_Transmit+0x120>
 8005640:	e080      	b.n	8005744 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_SPI_Transmit+0x19a>
 800564a:	8afb      	ldrh	r3, [r7, #22]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d174      	bne.n	800573a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	d912      	bls.n	8005680 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	881a      	ldrh	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	1c9a      	adds	r2, r3, #2
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b02      	subs	r3, #2
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800567e:	e05c      	b.n	800573a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	7812      	ldrb	r2, [r2, #0]
 800568c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80056a6:	e048      	b.n	800573a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d12b      	bne.n	800570e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d912      	bls.n	80056e6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	881a      	ldrh	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	1c9a      	adds	r2, r3, #2
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b02      	subs	r3, #2
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056e4:	e029      	b.n	800573a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	7812      	ldrb	r2, [r2, #0]
 80056f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005702:	b29b      	uxth	r3, r3
 8005704:	3b01      	subs	r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800570c:	e015      	b.n	800573a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800570e:	f7fd fef9 	bl	8003504 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d803      	bhi.n	8005726 <HAL_SPI_Transmit+0x270>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005724:	d102      	bne.n	800572c <HAL_SPI_Transmit+0x276>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005738:	e029      	b.n	800578e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1b1      	bne.n	80056a8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fcf9 	bl	8006140 <SPI_EndRxTxTransaction>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005762:	2300      	movs	r3, #0
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e003      	b.n	800578e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005796:	7ffb      	ldrb	r3, [r7, #31]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	4613      	mov	r3, r2
 80057ae:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d002      	beq.n	80057c6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
 80057c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057c4:	e11a      	b.n	80059fc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ce:	d112      	bne.n	80057f6 <HAL_SPI_Receive+0x56>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10e      	bne.n	80057f6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2204      	movs	r2, #4
 80057dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057e0:	88fa      	ldrh	r2, [r7, #6]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	4613      	mov	r3, r2
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f90e 	bl	8005a0e <HAL_SPI_TransmitReceive>
 80057f2:	4603      	mov	r3, r0
 80057f4:	e107      	b.n	8005a06 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_SPI_Receive+0x64>
 8005800:	2302      	movs	r3, #2
 8005802:	e100      	b.n	8005a06 <HAL_SPI_Receive+0x266>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800580c:	f7fd fe7a 	bl	8003504 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_SPI_Receive+0x7e>
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005822:	e0eb      	b.n	80059fc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2204      	movs	r2, #4
 8005828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	88fa      	ldrh	r2, [r7, #6]
 8005844:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800586e:	d908      	bls.n	8005882 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800587e:	605a      	str	r2, [r3, #4]
 8005880:	e007      	b.n	8005892 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005890:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589a:	d10f      	bne.n	80058bc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c6:	2b40      	cmp	r3, #64	; 0x40
 80058c8:	d007      	beq.n	80058da <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058e2:	d86f      	bhi.n	80059c4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058e4:	e034      	b.n	8005950 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d117      	bne.n	8005924 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f103 020c 	add.w	r2, r3, #12
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	7812      	ldrb	r2, [r2, #0]
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005922:	e015      	b.n	8005950 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005924:	f7fd fdee 	bl	8003504 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d803      	bhi.n	800593c <HAL_SPI_Receive+0x19c>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d102      	bne.n	8005942 <HAL_SPI_Receive+0x1a2>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800594e:	e055      	b.n	80059fc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005956:	b29b      	uxth	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1c4      	bne.n	80058e6 <HAL_SPI_Receive+0x146>
 800595c:	e038      	b.n	80059d0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b01      	cmp	r3, #1
 800596a:	d115      	bne.n	8005998 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	b292      	uxth	r2, r2
 8005978:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	1c9a      	adds	r2, r3, #2
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005996:	e015      	b.n	80059c4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005998:	f7fd fdb4 	bl	8003504 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d803      	bhi.n	80059b0 <HAL_SPI_Receive+0x210>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ae:	d102      	bne.n	80059b6 <HAL_SPI_Receive+0x216>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80059c2:	e01b      	b.n	80059fc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1c6      	bne.n	800595e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fb5b 	bl	8006090 <SPI_EndRxTransaction>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	75fb      	strb	r3, [r7, #23]
 80059f2:	e003      	b.n	80059fc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b08a      	sub	sp, #40	; 0x28
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x26>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e20a      	b.n	8005e4a <HAL_SPI_TransmitReceive+0x43c>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a3c:	f7fd fd62 	bl	8003504 <HAL_GetTick>
 8005a40:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a48:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a50:	887b      	ldrh	r3, [r7, #2]
 8005a52:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a54:	887b      	ldrh	r3, [r7, #2]
 8005a56:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a58:	7efb      	ldrb	r3, [r7, #27]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d00e      	beq.n	8005a7c <HAL_SPI_TransmitReceive+0x6e>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a64:	d106      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d102      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x66>
 8005a6e:	7efb      	ldrb	r3, [r7, #27]
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d003      	beq.n	8005a7c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a74:	2302      	movs	r3, #2
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a7a:	e1e0      	b.n	8005e3e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <HAL_SPI_TransmitReceive+0x80>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_SPI_TransmitReceive+0x80>
 8005a88:	887b      	ldrh	r3, [r7, #2]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d103      	bne.n	8005a96 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a94:	e1d3      	b.n	8005e3e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d003      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2205      	movs	r2, #5
 8005aa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	887a      	ldrh	r2, [r7, #2]
 8005aba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	887a      	ldrh	r2, [r7, #2]
 8005ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	887a      	ldrh	r2, [r7, #2]
 8005ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	887a      	ldrh	r2, [r7, #2]
 8005ad6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aec:	d802      	bhi.n	8005af4 <HAL_SPI_TransmitReceive+0xe6>
 8005aee:	8a3b      	ldrh	r3, [r7, #16]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d908      	bls.n	8005b06 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	e007      	b.n	8005b16 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b14:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d007      	beq.n	8005b34 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b3c:	f240 8081 	bls.w	8005c42 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_SPI_TransmitReceive+0x140>
 8005b48:	8a7b      	ldrh	r3, [r7, #18]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d16d      	bne.n	8005c2a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	881a      	ldrh	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	1c9a      	adds	r2, r3, #2
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b72:	e05a      	b.n	8005c2a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d11b      	bne.n	8005bba <HAL_SPI_TransmitReceive+0x1ac>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d016      	beq.n	8005bba <HAL_SPI_TransmitReceive+0x1ac>
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d113      	bne.n	8005bba <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	881a      	ldrh	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	1c9a      	adds	r2, r3, #2
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d11c      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x1f4>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d016      	beq.n	8005c02 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	b292      	uxth	r2, r2
 8005be0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	1c9a      	adds	r2, r3, #2
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c02:	f7fd fc7f 	bl	8003504 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d80b      	bhi.n	8005c2a <HAL_SPI_TransmitReceive+0x21c>
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c18:	d007      	beq.n	8005c2a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005c28:	e109      	b.n	8005e3e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d19f      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x166>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d199      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x166>
 8005c40:	e0e3      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_SPI_TransmitReceive+0x244>
 8005c4a:	8a7b      	ldrh	r3, [r7, #18]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	f040 80cf 	bne.w	8005df0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d912      	bls.n	8005c82 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	881a      	ldrh	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	1c9a      	adds	r2, r3, #2
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b02      	subs	r3, #2
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c80:	e0b6      	b.n	8005df0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca8:	e0a2      	b.n	8005df0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d134      	bne.n	8005d22 <HAL_SPI_TransmitReceive+0x314>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d02f      	beq.n	8005d22 <HAL_SPI_TransmitReceive+0x314>
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d12c      	bne.n	8005d22 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d912      	bls.n	8005cf8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	881a      	ldrh	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	1c9a      	adds	r2, r3, #2
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b02      	subs	r3, #2
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cf6:	e012      	b.n	8005d1e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	7812      	ldrb	r2, [r2, #0]
 8005d04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d148      	bne.n	8005dc2 <HAL_SPI_TransmitReceive+0x3b4>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d042      	beq.n	8005dc2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d923      	bls.n	8005d90 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	b292      	uxth	r2, r2
 8005d54:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	1c9a      	adds	r2, r3, #2
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b02      	subs	r3, #2
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d81f      	bhi.n	8005dbe <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d8c:	605a      	str	r2, [r3, #4]
 8005d8e:	e016      	b.n	8005dbe <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f103 020c 	add.w	r2, r3, #12
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005dc2:	f7fd fb9f 	bl	8003504 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d803      	bhi.n	8005dda <HAL_SPI_TransmitReceive+0x3cc>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d102      	bne.n	8005de0 <HAL_SPI_TransmitReceive+0x3d2>
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d107      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005dee:	e026      	b.n	8005e3e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f47f af57 	bne.w	8005caa <HAL_SPI_TransmitReceive+0x29c>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f47f af50 	bne.w	8005caa <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 f996 	bl	8006140 <SPI_EndRxTxTransaction>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e34:	e003      	b.n	8005e3e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3728      	adds	r7, #40	; 0x28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	4613      	mov	r3, r2
 8005e62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e64:	f7fd fb4e 	bl	8003504 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	4413      	add	r3, r2
 8005e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e74:	f7fd fb46 	bl	8003504 <HAL_GetTick>
 8005e78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e7a:	4b39      	ldr	r3, [pc, #228]	; (8005f60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	015b      	lsls	r3, r3, #5
 8005e80:	0d1b      	lsrs	r3, r3, #20
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	fb02 f303 	mul.w	r3, r2, r3
 8005e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e8a:	e054      	b.n	8005f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e92:	d050      	beq.n	8005f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e94:	f7fd fb36 	bl	8003504 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d902      	bls.n	8005eaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d13d      	bne.n	8005f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec2:	d111      	bne.n	8005ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ecc:	d004      	beq.n	8005ed8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed6:	d107      	bne.n	8005ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef0:	d10f      	bne.n	8005f12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e017      	b.n	8005f56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	bf0c      	ite	eq
 8005f46:	2301      	moveq	r3, #1
 8005f48:	2300      	movne	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d19b      	bne.n	8005e8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000000 	.word	0x20000000

08005f64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08a      	sub	sp, #40	; 0x28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f76:	f7fd fac5 	bl	8003504 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	4413      	add	r3, r2
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f86:	f7fd fabd 	bl	8003504 <HAL_GetTick>
 8005f8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	330c      	adds	r3, #12
 8005f92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f94:	4b3d      	ldr	r3, [pc, #244]	; (800608c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	00da      	lsls	r2, r3, #3
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	0d1b      	lsrs	r3, r3, #20
 8005fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fac:	e060      	b.n	8006070 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fb4:	d107      	bne.n	8005fc6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d104      	bne.n	8005fc6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fcc:	d050      	beq.n	8006070 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fce:	f7fd fa99 	bl	8003504 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d902      	bls.n	8005fe4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d13d      	bne.n	8006060 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ff2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ffc:	d111      	bne.n	8006022 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006006:	d004      	beq.n	8006012 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006010:	d107      	bne.n	8006022 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006020:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602a:	d10f      	bne.n	800604c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800604a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e010      	b.n	8006082 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	3b01      	subs	r3, #1
 800606e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4013      	ands	r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	d196      	bne.n	8005fae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3728      	adds	r7, #40	; 0x28
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000000 	.word	0x20000000

08006090 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af02      	add	r7, sp, #8
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060a4:	d111      	bne.n	80060ca <SPI_EndRxTransaction+0x3a>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ae:	d004      	beq.n	80060ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b8:	d107      	bne.n	80060ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	2180      	movs	r1, #128	; 0x80
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f7ff febd 	bl	8005e54 <SPI_WaitFlagStateUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d007      	beq.n	80060f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e4:	f043 0220 	orr.w	r2, r3, #32
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e023      	b.n	8006138 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060f8:	d11d      	bne.n	8006136 <SPI_EndRxTransaction+0xa6>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006102:	d004      	beq.n	800610e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610c:	d113      	bne.n	8006136 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2200      	movs	r2, #0
 8006116:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff ff22 	bl	8005f64 <SPI_WaitFifoStateUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d007      	beq.n	8006136 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e000      	b.n	8006138 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2200      	movs	r2, #0
 8006154:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f7ff ff03 	bl	8005f64 <SPI_WaitFifoStateUntilTimeout>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006168:	f043 0220 	orr.w	r2, r3, #32
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e027      	b.n	80061c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2200      	movs	r2, #0
 800617c:	2180      	movs	r1, #128	; 0x80
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff fe68 	bl	8005e54 <SPI_WaitFlagStateUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618e:	f043 0220 	orr.w	r2, r3, #32
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e014      	b.n	80061c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f7ff fedc 	bl	8005f64 <SPI_WaitFifoStateUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d007      	beq.n	80061c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b6:	f043 0220 	orr.w	r2, r3, #32
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e000      	b.n	80061c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e049      	b.n	8006272 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fc fff8 	bl	80031e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3304      	adds	r3, #4
 8006208:	4619      	mov	r1, r3
 800620a:	4610      	mov	r0, r2
 800620c:	f000 f8fe 	bl	800640c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_TIM_ConfigClockSource+0x1c>
 8006292:	2302      	movs	r3, #2
 8006294:	e0b6      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x18a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2202      	movs	r2, #2
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d2:	d03e      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0xd8>
 80062d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d8:	f200 8087 	bhi.w	80063ea <HAL_TIM_ConfigClockSource+0x170>
 80062dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e0:	f000 8086 	beq.w	80063f0 <HAL_TIM_ConfigClockSource+0x176>
 80062e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e8:	d87f      	bhi.n	80063ea <HAL_TIM_ConfigClockSource+0x170>
 80062ea:	2b70      	cmp	r3, #112	; 0x70
 80062ec:	d01a      	beq.n	8006324 <HAL_TIM_ConfigClockSource+0xaa>
 80062ee:	2b70      	cmp	r3, #112	; 0x70
 80062f0:	d87b      	bhi.n	80063ea <HAL_TIM_ConfigClockSource+0x170>
 80062f2:	2b60      	cmp	r3, #96	; 0x60
 80062f4:	d050      	beq.n	8006398 <HAL_TIM_ConfigClockSource+0x11e>
 80062f6:	2b60      	cmp	r3, #96	; 0x60
 80062f8:	d877      	bhi.n	80063ea <HAL_TIM_ConfigClockSource+0x170>
 80062fa:	2b50      	cmp	r3, #80	; 0x50
 80062fc:	d03c      	beq.n	8006378 <HAL_TIM_ConfigClockSource+0xfe>
 80062fe:	2b50      	cmp	r3, #80	; 0x50
 8006300:	d873      	bhi.n	80063ea <HAL_TIM_ConfigClockSource+0x170>
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d058      	beq.n	80063b8 <HAL_TIM_ConfigClockSource+0x13e>
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d86f      	bhi.n	80063ea <HAL_TIM_ConfigClockSource+0x170>
 800630a:	2b30      	cmp	r3, #48	; 0x30
 800630c:	d064      	beq.n	80063d8 <HAL_TIM_ConfigClockSource+0x15e>
 800630e:	2b30      	cmp	r3, #48	; 0x30
 8006310:	d86b      	bhi.n	80063ea <HAL_TIM_ConfigClockSource+0x170>
 8006312:	2b20      	cmp	r3, #32
 8006314:	d060      	beq.n	80063d8 <HAL_TIM_ConfigClockSource+0x15e>
 8006316:	2b20      	cmp	r3, #32
 8006318:	d867      	bhi.n	80063ea <HAL_TIM_ConfigClockSource+0x170>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d05c      	beq.n	80063d8 <HAL_TIM_ConfigClockSource+0x15e>
 800631e:	2b10      	cmp	r3, #16
 8006320:	d05a      	beq.n	80063d8 <HAL_TIM_ConfigClockSource+0x15e>
 8006322:	e062      	b.n	80063ea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	6899      	ldr	r1, [r3, #8]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f000 f95c 	bl	80065f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006346:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	609a      	str	r2, [r3, #8]
      break;
 8006350:	e04f      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6899      	ldr	r1, [r3, #8]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f000 f945 	bl	80065f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006374:	609a      	str	r2, [r3, #8]
      break;
 8006376:	e03c      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	6859      	ldr	r1, [r3, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	461a      	mov	r2, r3
 8006386:	f000 f8b9 	bl	80064fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2150      	movs	r1, #80	; 0x50
 8006390:	4618      	mov	r0, r3
 8006392:	f000 f912 	bl	80065ba <TIM_ITRx_SetConfig>
      break;
 8006396:	e02c      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	6859      	ldr	r1, [r3, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	461a      	mov	r2, r3
 80063a6:	f000 f8d8 	bl	800655a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2160      	movs	r1, #96	; 0x60
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 f902 	bl	80065ba <TIM_ITRx_SetConfig>
      break;
 80063b6:	e01c      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	6859      	ldr	r1, [r3, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	461a      	mov	r2, r3
 80063c6:	f000 f899 	bl	80064fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2140      	movs	r1, #64	; 0x40
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 f8f2 	bl	80065ba <TIM_ITRx_SetConfig>
      break;
 80063d6:	e00c      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4619      	mov	r1, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	f000 f8e9 	bl	80065ba <TIM_ITRx_SetConfig>
      break;
 80063e8:	e003      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]
      break;
 80063ee:	e000      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80063f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a32      	ldr	r2, [pc, #200]	; (80064e8 <TIM_Base_SetConfig+0xdc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d007      	beq.n	8006434 <TIM_Base_SetConfig+0x28>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642a:	d003      	beq.n	8006434 <TIM_Base_SetConfig+0x28>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a2f      	ldr	r2, [pc, #188]	; (80064ec <TIM_Base_SetConfig+0xe0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d108      	bne.n	8006446 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a27      	ldr	r2, [pc, #156]	; (80064e8 <TIM_Base_SetConfig+0xdc>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <TIM_Base_SetConfig+0x6a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006454:	d00f      	beq.n	8006476 <TIM_Base_SetConfig+0x6a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a24      	ldr	r2, [pc, #144]	; (80064ec <TIM_Base_SetConfig+0xe0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00b      	beq.n	8006476 <TIM_Base_SetConfig+0x6a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a23      	ldr	r2, [pc, #140]	; (80064f0 <TIM_Base_SetConfig+0xe4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d007      	beq.n	8006476 <TIM_Base_SetConfig+0x6a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a22      	ldr	r2, [pc, #136]	; (80064f4 <TIM_Base_SetConfig+0xe8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d003      	beq.n	8006476 <TIM_Base_SetConfig+0x6a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a21      	ldr	r2, [pc, #132]	; (80064f8 <TIM_Base_SetConfig+0xec>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d108      	bne.n	8006488 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a0e      	ldr	r2, [pc, #56]	; (80064e8 <TIM_Base_SetConfig+0xdc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00b      	beq.n	80064cc <TIM_Base_SetConfig+0xc0>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a0e      	ldr	r2, [pc, #56]	; (80064f0 <TIM_Base_SetConfig+0xe4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d007      	beq.n	80064cc <TIM_Base_SetConfig+0xc0>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a0d      	ldr	r2, [pc, #52]	; (80064f4 <TIM_Base_SetConfig+0xe8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_Base_SetConfig+0xc0>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a0c      	ldr	r2, [pc, #48]	; (80064f8 <TIM_Base_SetConfig+0xec>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d103      	bne.n	80064d4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691a      	ldr	r2, [r3, #16]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	615a      	str	r2, [r3, #20]
}
 80064da:	bf00      	nop
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40012c00 	.word	0x40012c00
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40014000 	.word	0x40014000
 80064f4:	40014400 	.word	0x40014400
 80064f8:	40014800 	.word	0x40014800

080064fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f023 0201 	bic.w	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f023 030a 	bic.w	r3, r3, #10
 8006538:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800655a:	b480      	push	{r7}
 800655c:	b087      	sub	sp, #28
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0210 	bic.w	r2, r3, #16
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006584:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	031b      	lsls	r3, r3, #12
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006596:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f043 0307 	orr.w	r3, r3, #7
 80065dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	609a      	str	r2, [r3, #8]
}
 80065e4:	bf00      	nop
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800660a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	021a      	lsls	r2, r3, #8
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	431a      	orrs	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4313      	orrs	r3, r2
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	609a      	str	r2, [r3, #8]
}
 8006624:	bf00      	nop
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006644:	2302      	movs	r3, #2
 8006646:	e054      	b.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a24      	ldr	r2, [pc, #144]	; (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d108      	bne.n	8006684 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006678:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a17      	ldr	r2, [pc, #92]	; (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00e      	beq.n	80066c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b0:	d009      	beq.n	80066c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a13      	ldr	r2, [pc, #76]	; (8006704 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d004      	beq.n	80066c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a11      	ldr	r2, [pc, #68]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d10c      	bne.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40000400 	.word	0x40000400
 8006708:	40014000 	.word	0x40014000

0800670c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e040      	b.n	80067a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fc fd7a 	bl	8003228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2224      	movs	r2, #36	; 0x24
 8006738:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0201 	bic.w	r2, r2, #1
 8006748:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f914 	bl	8006978 <UART_SetConfig>
 8006750:	4603      	mov	r3, r0
 8006752:	2b01      	cmp	r3, #1
 8006754:	d101      	bne.n	800675a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e022      	b.n	80067a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa3e 	bl	8006be4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0201 	orr.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fac5 	bl	8006d28 <UART_CheckIdleState>
 800679e:	4603      	mov	r3, r0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	4613      	mov	r3, r2
 80067b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d178      	bne.n	80068b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_UART_Transmit+0x24>
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e071      	b.n	80068b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2221      	movs	r2, #33	; 0x21
 80067dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067de:	f7fc fe91 	bl	8003504 <HAL_GetTick>
 80067e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fc:	d108      	bne.n	8006810 <HAL_UART_Transmit+0x68>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d104      	bne.n	8006810 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	e003      	b.n	8006818 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006818:	e030      	b.n	800687c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2200      	movs	r2, #0
 8006822:	2180      	movs	r1, #128	; 0x80
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 fb27 	bl	8006e78 <UART_WaitOnFlagUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d004      	beq.n	800683a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e03c      	b.n	80068b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10b      	bne.n	8006858 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	881a      	ldrh	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800684c:	b292      	uxth	r2, r2
 800684e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	3302      	adds	r3, #2
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	e008      	b.n	800686a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	b292      	uxth	r2, r2
 8006862:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	3301      	adds	r3, #1
 8006868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1c8      	bne.n	800681a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2200      	movs	r2, #0
 8006890:	2140      	movs	r1, #64	; 0x40
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 faf0 	bl	8006e78 <UART_WaitOnFlagUntilTimeout>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2220      	movs	r2, #32
 80068a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e005      	b.n	80068b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	e000      	b.n	80068b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80068b2:	2302      	movs	r3, #2
  }
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3720      	adds	r7, #32
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80068bc:	b480      	push	{r7}
 80068be:	b08b      	sub	sp, #44	; 0x2c
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	d147      	bne.n	8006962 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <HAL_UART_Transmit_IT+0x22>
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e040      	b.n	8006964 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	88fa      	ldrh	r2, [r7, #6]
 80068f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2221      	movs	r2, #33	; 0x21
 800690a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006914:	d107      	bne.n	8006926 <HAL_UART_Transmit_IT+0x6a>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d103      	bne.n	8006926 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4a13      	ldr	r2, [pc, #76]	; (8006970 <HAL_UART_Transmit_IT+0xb4>)
 8006922:	66da      	str	r2, [r3, #108]	; 0x6c
 8006924:	e002      	b.n	800692c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4a12      	ldr	r2, [pc, #72]	; (8006974 <HAL_UART_Transmit_IT+0xb8>)
 800692a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	613b      	str	r3, [r7, #16]
   return(result);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	623b      	str	r3, [r7, #32]
 800694c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	69f9      	ldr	r1, [r7, #28]
 8006950:	6a3a      	ldr	r2, [r7, #32]
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	61bb      	str	r3, [r7, #24]
   return(result);
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e6      	bne.n	800692c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	e000      	b.n	8006964 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006962:	2302      	movs	r3, #2
  }
}
 8006964:	4618      	mov	r0, r3
 8006966:	372c      	adds	r7, #44	; 0x2c
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	080070c7 	.word	0x080070c7
 8006974:	0800700f 	.word	0x0800700f

08006978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	431a      	orrs	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b8a      	ldr	r3, [pc, #552]	; (8006bcc <UART_SetConfig+0x254>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	6979      	ldr	r1, [r7, #20]
 80069ac:	430b      	orrs	r3, r1
 80069ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a78      	ldr	r2, [pc, #480]	; (8006bd0 <UART_SetConfig+0x258>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d120      	bne.n	8006a36 <UART_SetConfig+0xbe>
 80069f4:	4b77      	ldr	r3, [pc, #476]	; (8006bd4 <UART_SetConfig+0x25c>)
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	f003 0303 	and.w	r3, r3, #3
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d817      	bhi.n	8006a30 <UART_SetConfig+0xb8>
 8006a00:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <UART_SetConfig+0x90>)
 8006a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a06:	bf00      	nop
 8006a08:	08006a19 	.word	0x08006a19
 8006a0c:	08006a25 	.word	0x08006a25
 8006a10:	08006a2b 	.word	0x08006a2b
 8006a14:	08006a1f 	.word	0x08006a1f
 8006a18:	2300      	movs	r3, #0
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	e01d      	b.n	8006a5a <UART_SetConfig+0xe2>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	77fb      	strb	r3, [r7, #31]
 8006a22:	e01a      	b.n	8006a5a <UART_SetConfig+0xe2>
 8006a24:	2304      	movs	r3, #4
 8006a26:	77fb      	strb	r3, [r7, #31]
 8006a28:	e017      	b.n	8006a5a <UART_SetConfig+0xe2>
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	77fb      	strb	r3, [r7, #31]
 8006a2e:	e014      	b.n	8006a5a <UART_SetConfig+0xe2>
 8006a30:	2310      	movs	r3, #16
 8006a32:	77fb      	strb	r3, [r7, #31]
 8006a34:	e011      	b.n	8006a5a <UART_SetConfig+0xe2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a67      	ldr	r2, [pc, #412]	; (8006bd8 <UART_SetConfig+0x260>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d102      	bne.n	8006a46 <UART_SetConfig+0xce>
 8006a40:	2300      	movs	r3, #0
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	e009      	b.n	8006a5a <UART_SetConfig+0xe2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a64      	ldr	r2, [pc, #400]	; (8006bdc <UART_SetConfig+0x264>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d102      	bne.n	8006a56 <UART_SetConfig+0xde>
 8006a50:	2300      	movs	r3, #0
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e001      	b.n	8006a5a <UART_SetConfig+0xe2>
 8006a56:	2310      	movs	r3, #16
 8006a58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a62:	d15a      	bne.n	8006b1a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006a64:	7ffb      	ldrb	r3, [r7, #31]
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d827      	bhi.n	8006aba <UART_SetConfig+0x142>
 8006a6a:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <UART_SetConfig+0xf8>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006a95 	.word	0x08006a95
 8006a74:	08006a9d 	.word	0x08006a9d
 8006a78:	08006aa5 	.word	0x08006aa5
 8006a7c:	08006abb 	.word	0x08006abb
 8006a80:	08006aab 	.word	0x08006aab
 8006a84:	08006abb 	.word	0x08006abb
 8006a88:	08006abb 	.word	0x08006abb
 8006a8c:	08006abb 	.word	0x08006abb
 8006a90:	08006ab3 	.word	0x08006ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a94:	f7fe fada 	bl	800504c <HAL_RCC_GetPCLK1Freq>
 8006a98:	61b8      	str	r0, [r7, #24]
        break;
 8006a9a:	e013      	b.n	8006ac4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a9c:	f7fe faf8 	bl	8005090 <HAL_RCC_GetPCLK2Freq>
 8006aa0:	61b8      	str	r0, [r7, #24]
        break;
 8006aa2:	e00f      	b.n	8006ac4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aa4:	4b4e      	ldr	r3, [pc, #312]	; (8006be0 <UART_SetConfig+0x268>)
 8006aa6:	61bb      	str	r3, [r7, #24]
        break;
 8006aa8:	e00c      	b.n	8006ac4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aaa:	f7fe fa59 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8006aae:	61b8      	str	r0, [r7, #24]
        break;
 8006ab0:	e008      	b.n	8006ac4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ab6:	61bb      	str	r3, [r7, #24]
        break;
 8006ab8:	e004      	b.n	8006ac4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	77bb      	strb	r3, [r7, #30]
        break;
 8006ac2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d074      	beq.n	8006bb4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	005a      	lsls	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	085b      	lsrs	r3, r3, #1
 8006ad4:	441a      	add	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ade:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	2b0f      	cmp	r3, #15
 8006ae4:	d916      	bls.n	8006b14 <UART_SetConfig+0x19c>
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aec:	d212      	bcs.n	8006b14 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f023 030f 	bic.w	r3, r3, #15
 8006af6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	085b      	lsrs	r3, r3, #1
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	89fb      	ldrh	r3, [r7, #14]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	89fa      	ldrh	r2, [r7, #14]
 8006b10:	60da      	str	r2, [r3, #12]
 8006b12:	e04f      	b.n	8006bb4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	77bb      	strb	r3, [r7, #30]
 8006b18:	e04c      	b.n	8006bb4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b1a:	7ffb      	ldrb	r3, [r7, #31]
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d828      	bhi.n	8006b72 <UART_SetConfig+0x1fa>
 8006b20:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <UART_SetConfig+0x1b0>)
 8006b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b26:	bf00      	nop
 8006b28:	08006b4d 	.word	0x08006b4d
 8006b2c:	08006b55 	.word	0x08006b55
 8006b30:	08006b5d 	.word	0x08006b5d
 8006b34:	08006b73 	.word	0x08006b73
 8006b38:	08006b63 	.word	0x08006b63
 8006b3c:	08006b73 	.word	0x08006b73
 8006b40:	08006b73 	.word	0x08006b73
 8006b44:	08006b73 	.word	0x08006b73
 8006b48:	08006b6b 	.word	0x08006b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b4c:	f7fe fa7e 	bl	800504c <HAL_RCC_GetPCLK1Freq>
 8006b50:	61b8      	str	r0, [r7, #24]
        break;
 8006b52:	e013      	b.n	8006b7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b54:	f7fe fa9c 	bl	8005090 <HAL_RCC_GetPCLK2Freq>
 8006b58:	61b8      	str	r0, [r7, #24]
        break;
 8006b5a:	e00f      	b.n	8006b7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b5c:	4b20      	ldr	r3, [pc, #128]	; (8006be0 <UART_SetConfig+0x268>)
 8006b5e:	61bb      	str	r3, [r7, #24]
        break;
 8006b60:	e00c      	b.n	8006b7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b62:	f7fe f9fd 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8006b66:	61b8      	str	r0, [r7, #24]
        break;
 8006b68:	e008      	b.n	8006b7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b6e:	61bb      	str	r3, [r7, #24]
        break;
 8006b70:	e004      	b.n	8006b7c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	77bb      	strb	r3, [r7, #30]
        break;
 8006b7a:	bf00      	nop
    }

    if (pclk != 0U)
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d018      	beq.n	8006bb4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	085a      	lsrs	r2, r3, #1
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	441a      	add	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b0f      	cmp	r3, #15
 8006b9a:	d909      	bls.n	8006bb0 <UART_SetConfig+0x238>
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba2:	d205      	bcs.n	8006bb0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60da      	str	r2, [r3, #12]
 8006bae:	e001      	b.n	8006bb4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006bc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	efff69f3 	.word	0xefff69f3
 8006bd0:	40013800 	.word	0x40013800
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	40004400 	.word	0x40004400
 8006bdc:	40004800 	.word	0x40004800
 8006be0:	007a1200 	.word	0x007a1200

08006be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01a      	beq.n	8006cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ce2:	d10a      	bne.n	8006cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	605a      	str	r2, [r3, #4]
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b098      	sub	sp, #96	; 0x60
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d38:	f7fc fbe4 	bl	8003504 <HAL_GetTick>
 8006d3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d12e      	bne.n	8006daa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d54:	2200      	movs	r2, #0
 8006d56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f88c 	bl	8006e78 <UART_WaitOnFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d021      	beq.n	8006daa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d84:	647b      	str	r3, [r7, #68]	; 0x44
 8006d86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e6      	bne.n	8006d66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e062      	b.n	8006e70 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d149      	bne.n	8006e4c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f856 	bl	8006e78 <UART_WaitOnFlagUntilTimeout>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d03c      	beq.n	8006e4c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	623b      	str	r3, [r7, #32]
   return(result);
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df0:	633b      	str	r3, [r7, #48]	; 0x30
 8006df2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e6      	bne.n	8006dd2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0301 	bic.w	r3, r3, #1
 8006e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e24:	61fa      	str	r2, [r7, #28]
 8006e26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	69b9      	ldr	r1, [r7, #24]
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	617b      	str	r3, [r7, #20]
   return(result);
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e5      	bne.n	8006e04 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e011      	b.n	8006e70 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3758      	adds	r7, #88	; 0x58
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e88:	e049      	b.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d045      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e92:	f7fc fb37 	bl	8003504 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d302      	bcc.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e048      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d031      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d110      	bne.n	8006eea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f838 	bl	8006f46 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2208      	movs	r2, #8
 8006eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e029      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef8:	d111      	bne.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f81e 	bl	8006f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e00f      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69da      	ldr	r2, [r3, #28]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	4013      	ands	r3, r2
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	bf0c      	ite	eq
 8006f2e:	2301      	moveq	r3, #1
 8006f30:	2300      	movne	r3, #0
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	461a      	mov	r2, r3
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d0a6      	beq.n	8006e8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b095      	sub	sp, #84	; 0x54
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8006f6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e6      	bne.n	8006f4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3308      	adds	r3, #8
 8006f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f023 0301 	bic.w	r3, r3, #1
 8006f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e5      	bne.n	8006f80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d118      	bne.n	8006fee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f023 0310 	bic.w	r3, r3, #16
 8006fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fda:	61bb      	str	r3, [r7, #24]
 8006fdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	6979      	ldr	r1, [r7, #20]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e6      	bne.n	8006fbc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007002:	bf00      	nop
 8007004:	3754      	adds	r7, #84	; 0x54
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800700e:	b480      	push	{r7}
 8007010:	b08f      	sub	sp, #60	; 0x3c
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800701a:	2b21      	cmp	r3, #33	; 0x21
 800701c:	d14d      	bne.n	80070ba <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d132      	bne.n	8007090 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	61fb      	str	r3, [r7, #28]
   return(result);
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800703e:	637b      	str	r3, [r7, #52]	; 0x34
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800704a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800704e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e6      	bne.n	800702a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	60bb      	str	r3, [r7, #8]
   return(result);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007070:	633b      	str	r3, [r7, #48]	; 0x30
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	61bb      	str	r3, [r7, #24]
 800707c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6979      	ldr	r1, [r7, #20]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	613b      	str	r3, [r7, #16]
   return(result);
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e6      	bne.n	800705c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800708e:	e014      	b.n	80070ba <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007094:	781a      	ldrb	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	b292      	uxth	r2, r2
 800709c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80070ba:	bf00      	nop
 80070bc:	373c      	adds	r7, #60	; 0x3c
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b091      	sub	sp, #68	; 0x44
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070d2:	2b21      	cmp	r3, #33	; 0x21
 80070d4:	d151      	bne.n	800717a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d132      	bne.n	8007148 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	623b      	str	r3, [r7, #32]
   return(result);
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007100:	633b      	str	r3, [r7, #48]	; 0x30
 8007102:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e6      	bne.n	80070e2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	60fb      	str	r3, [r7, #12]
   return(result);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	61fb      	str	r3, [r7, #28]
 8007134:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	69b9      	ldr	r1, [r7, #24]
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	617b      	str	r3, [r7, #20]
   return(result);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e6      	bne.n	8007114 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007146:	e018      	b.n	800717a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800714e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007150:	881a      	ldrh	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800715a:	b292      	uxth	r2, r2
 800715c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007162:	1c9a      	adds	r2, r3, #2
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800716e:	b29b      	uxth	r3, r3
 8007170:	3b01      	subs	r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800717a:	bf00      	nop
 800717c:	3744      	adds	r7, #68	; 0x44
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
	...

08007188 <__errno>:
 8007188:	4b01      	ldr	r3, [pc, #4]	; (8007190 <__errno+0x8>)
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	2000000c 	.word	0x2000000c

08007194 <__libc_init_array>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	4d0d      	ldr	r5, [pc, #52]	; (80071cc <__libc_init_array+0x38>)
 8007198:	4c0d      	ldr	r4, [pc, #52]	; (80071d0 <__libc_init_array+0x3c>)
 800719a:	1b64      	subs	r4, r4, r5
 800719c:	10a4      	asrs	r4, r4, #2
 800719e:	2600      	movs	r6, #0
 80071a0:	42a6      	cmp	r6, r4
 80071a2:	d109      	bne.n	80071b8 <__libc_init_array+0x24>
 80071a4:	4d0b      	ldr	r5, [pc, #44]	; (80071d4 <__libc_init_array+0x40>)
 80071a6:	4c0c      	ldr	r4, [pc, #48]	; (80071d8 <__libc_init_array+0x44>)
 80071a8:	f000 fcc8 	bl	8007b3c <_init>
 80071ac:	1b64      	subs	r4, r4, r5
 80071ae:	10a4      	asrs	r4, r4, #2
 80071b0:	2600      	movs	r6, #0
 80071b2:	42a6      	cmp	r6, r4
 80071b4:	d105      	bne.n	80071c2 <__libc_init_array+0x2e>
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071bc:	4798      	blx	r3
 80071be:	3601      	adds	r6, #1
 80071c0:	e7ee      	b.n	80071a0 <__libc_init_array+0xc>
 80071c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c6:	4798      	blx	r3
 80071c8:	3601      	adds	r6, #1
 80071ca:	e7f2      	b.n	80071b2 <__libc_init_array+0x1e>
 80071cc:	08008964 	.word	0x08008964
 80071d0:	08008964 	.word	0x08008964
 80071d4:	08008964 	.word	0x08008964
 80071d8:	08008968 	.word	0x08008968

080071dc <memcpy>:
 80071dc:	440a      	add	r2, r1
 80071de:	4291      	cmp	r1, r2
 80071e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80071e4:	d100      	bne.n	80071e8 <memcpy+0xc>
 80071e6:	4770      	bx	lr
 80071e8:	b510      	push	{r4, lr}
 80071ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071f2:	4291      	cmp	r1, r2
 80071f4:	d1f9      	bne.n	80071ea <memcpy+0xe>
 80071f6:	bd10      	pop	{r4, pc}

080071f8 <memset>:
 80071f8:	4402      	add	r2, r0
 80071fa:	4603      	mov	r3, r0
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d100      	bne.n	8007202 <memset+0xa>
 8007200:	4770      	bx	lr
 8007202:	f803 1b01 	strb.w	r1, [r3], #1
 8007206:	e7f9      	b.n	80071fc <memset+0x4>

08007208 <siprintf>:
 8007208:	b40e      	push	{r1, r2, r3}
 800720a:	b500      	push	{lr}
 800720c:	b09c      	sub	sp, #112	; 0x70
 800720e:	ab1d      	add	r3, sp, #116	; 0x74
 8007210:	9002      	str	r0, [sp, #8]
 8007212:	9006      	str	r0, [sp, #24]
 8007214:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007218:	4809      	ldr	r0, [pc, #36]	; (8007240 <siprintf+0x38>)
 800721a:	9107      	str	r1, [sp, #28]
 800721c:	9104      	str	r1, [sp, #16]
 800721e:	4909      	ldr	r1, [pc, #36]	; (8007244 <siprintf+0x3c>)
 8007220:	f853 2b04 	ldr.w	r2, [r3], #4
 8007224:	9105      	str	r1, [sp, #20]
 8007226:	6800      	ldr	r0, [r0, #0]
 8007228:	9301      	str	r3, [sp, #4]
 800722a:	a902      	add	r1, sp, #8
 800722c:	f000 f982 	bl	8007534 <_svfiprintf_r>
 8007230:	9b02      	ldr	r3, [sp, #8]
 8007232:	2200      	movs	r2, #0
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	b01c      	add	sp, #112	; 0x70
 8007238:	f85d eb04 	ldr.w	lr, [sp], #4
 800723c:	b003      	add	sp, #12
 800723e:	4770      	bx	lr
 8007240:	2000000c 	.word	0x2000000c
 8007244:	ffff0208 	.word	0xffff0208

08007248 <_vsniprintf_r>:
 8007248:	b530      	push	{r4, r5, lr}
 800724a:	4614      	mov	r4, r2
 800724c:	2c00      	cmp	r4, #0
 800724e:	b09b      	sub	sp, #108	; 0x6c
 8007250:	4605      	mov	r5, r0
 8007252:	461a      	mov	r2, r3
 8007254:	da05      	bge.n	8007262 <_vsniprintf_r+0x1a>
 8007256:	238b      	movs	r3, #139	; 0x8b
 8007258:	6003      	str	r3, [r0, #0]
 800725a:	f04f 30ff 	mov.w	r0, #4294967295
 800725e:	b01b      	add	sp, #108	; 0x6c
 8007260:	bd30      	pop	{r4, r5, pc}
 8007262:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007266:	f8ad 300c 	strh.w	r3, [sp, #12]
 800726a:	bf14      	ite	ne
 800726c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007270:	4623      	moveq	r3, r4
 8007272:	9302      	str	r3, [sp, #8]
 8007274:	9305      	str	r3, [sp, #20]
 8007276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800727a:	9100      	str	r1, [sp, #0]
 800727c:	9104      	str	r1, [sp, #16]
 800727e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007282:	4669      	mov	r1, sp
 8007284:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007286:	f000 f955 	bl	8007534 <_svfiprintf_r>
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	bfbc      	itt	lt
 800728e:	238b      	movlt	r3, #139	; 0x8b
 8007290:	602b      	strlt	r3, [r5, #0]
 8007292:	2c00      	cmp	r4, #0
 8007294:	d0e3      	beq.n	800725e <_vsniprintf_r+0x16>
 8007296:	9b00      	ldr	r3, [sp, #0]
 8007298:	2200      	movs	r2, #0
 800729a:	701a      	strb	r2, [r3, #0]
 800729c:	e7df      	b.n	800725e <_vsniprintf_r+0x16>
	...

080072a0 <vsniprintf>:
 80072a0:	b507      	push	{r0, r1, r2, lr}
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	4613      	mov	r3, r2
 80072a6:	460a      	mov	r2, r1
 80072a8:	4601      	mov	r1, r0
 80072aa:	4803      	ldr	r0, [pc, #12]	; (80072b8 <vsniprintf+0x18>)
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f7ff ffcb 	bl	8007248 <_vsniprintf_r>
 80072b2:	b003      	add	sp, #12
 80072b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80072b8:	2000000c 	.word	0x2000000c

080072bc <_free_r>:
 80072bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072be:	2900      	cmp	r1, #0
 80072c0:	d044      	beq.n	800734c <_free_r+0x90>
 80072c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c6:	9001      	str	r0, [sp, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f1a1 0404 	sub.w	r4, r1, #4
 80072ce:	bfb8      	it	lt
 80072d0:	18e4      	addlt	r4, r4, r3
 80072d2:	f000 fbef 	bl	8007ab4 <__malloc_lock>
 80072d6:	4a1e      	ldr	r2, [pc, #120]	; (8007350 <_free_r+0x94>)
 80072d8:	9801      	ldr	r0, [sp, #4]
 80072da:	6813      	ldr	r3, [r2, #0]
 80072dc:	b933      	cbnz	r3, 80072ec <_free_r+0x30>
 80072de:	6063      	str	r3, [r4, #4]
 80072e0:	6014      	str	r4, [r2, #0]
 80072e2:	b003      	add	sp, #12
 80072e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072e8:	f000 bbea 	b.w	8007ac0 <__malloc_unlock>
 80072ec:	42a3      	cmp	r3, r4
 80072ee:	d908      	bls.n	8007302 <_free_r+0x46>
 80072f0:	6825      	ldr	r5, [r4, #0]
 80072f2:	1961      	adds	r1, r4, r5
 80072f4:	428b      	cmp	r3, r1
 80072f6:	bf01      	itttt	eq
 80072f8:	6819      	ldreq	r1, [r3, #0]
 80072fa:	685b      	ldreq	r3, [r3, #4]
 80072fc:	1949      	addeq	r1, r1, r5
 80072fe:	6021      	streq	r1, [r4, #0]
 8007300:	e7ed      	b.n	80072de <_free_r+0x22>
 8007302:	461a      	mov	r2, r3
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	b10b      	cbz	r3, 800730c <_free_r+0x50>
 8007308:	42a3      	cmp	r3, r4
 800730a:	d9fa      	bls.n	8007302 <_free_r+0x46>
 800730c:	6811      	ldr	r1, [r2, #0]
 800730e:	1855      	adds	r5, r2, r1
 8007310:	42a5      	cmp	r5, r4
 8007312:	d10b      	bne.n	800732c <_free_r+0x70>
 8007314:	6824      	ldr	r4, [r4, #0]
 8007316:	4421      	add	r1, r4
 8007318:	1854      	adds	r4, r2, r1
 800731a:	42a3      	cmp	r3, r4
 800731c:	6011      	str	r1, [r2, #0]
 800731e:	d1e0      	bne.n	80072e2 <_free_r+0x26>
 8007320:	681c      	ldr	r4, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	6053      	str	r3, [r2, #4]
 8007326:	4421      	add	r1, r4
 8007328:	6011      	str	r1, [r2, #0]
 800732a:	e7da      	b.n	80072e2 <_free_r+0x26>
 800732c:	d902      	bls.n	8007334 <_free_r+0x78>
 800732e:	230c      	movs	r3, #12
 8007330:	6003      	str	r3, [r0, #0]
 8007332:	e7d6      	b.n	80072e2 <_free_r+0x26>
 8007334:	6825      	ldr	r5, [r4, #0]
 8007336:	1961      	adds	r1, r4, r5
 8007338:	428b      	cmp	r3, r1
 800733a:	bf04      	itt	eq
 800733c:	6819      	ldreq	r1, [r3, #0]
 800733e:	685b      	ldreq	r3, [r3, #4]
 8007340:	6063      	str	r3, [r4, #4]
 8007342:	bf04      	itt	eq
 8007344:	1949      	addeq	r1, r1, r5
 8007346:	6021      	streq	r1, [r4, #0]
 8007348:	6054      	str	r4, [r2, #4]
 800734a:	e7ca      	b.n	80072e2 <_free_r+0x26>
 800734c:	b003      	add	sp, #12
 800734e:	bd30      	pop	{r4, r5, pc}
 8007350:	2000135c 	.word	0x2000135c

08007354 <sbrk_aligned>:
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	4e0e      	ldr	r6, [pc, #56]	; (8007390 <sbrk_aligned+0x3c>)
 8007358:	460c      	mov	r4, r1
 800735a:	6831      	ldr	r1, [r6, #0]
 800735c:	4605      	mov	r5, r0
 800735e:	b911      	cbnz	r1, 8007366 <sbrk_aligned+0x12>
 8007360:	f000 fb7c 	bl	8007a5c <_sbrk_r>
 8007364:	6030      	str	r0, [r6, #0]
 8007366:	4621      	mov	r1, r4
 8007368:	4628      	mov	r0, r5
 800736a:	f000 fb77 	bl	8007a5c <_sbrk_r>
 800736e:	1c43      	adds	r3, r0, #1
 8007370:	d00a      	beq.n	8007388 <sbrk_aligned+0x34>
 8007372:	1cc4      	adds	r4, r0, #3
 8007374:	f024 0403 	bic.w	r4, r4, #3
 8007378:	42a0      	cmp	r0, r4
 800737a:	d007      	beq.n	800738c <sbrk_aligned+0x38>
 800737c:	1a21      	subs	r1, r4, r0
 800737e:	4628      	mov	r0, r5
 8007380:	f000 fb6c 	bl	8007a5c <_sbrk_r>
 8007384:	3001      	adds	r0, #1
 8007386:	d101      	bne.n	800738c <sbrk_aligned+0x38>
 8007388:	f04f 34ff 	mov.w	r4, #4294967295
 800738c:	4620      	mov	r0, r4
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	20001360 	.word	0x20001360

08007394 <_malloc_r>:
 8007394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007398:	1ccd      	adds	r5, r1, #3
 800739a:	f025 0503 	bic.w	r5, r5, #3
 800739e:	3508      	adds	r5, #8
 80073a0:	2d0c      	cmp	r5, #12
 80073a2:	bf38      	it	cc
 80073a4:	250c      	movcc	r5, #12
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	4607      	mov	r7, r0
 80073aa:	db01      	blt.n	80073b0 <_malloc_r+0x1c>
 80073ac:	42a9      	cmp	r1, r5
 80073ae:	d905      	bls.n	80073bc <_malloc_r+0x28>
 80073b0:	230c      	movs	r3, #12
 80073b2:	603b      	str	r3, [r7, #0]
 80073b4:	2600      	movs	r6, #0
 80073b6:	4630      	mov	r0, r6
 80073b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073bc:	4e2e      	ldr	r6, [pc, #184]	; (8007478 <_malloc_r+0xe4>)
 80073be:	f000 fb79 	bl	8007ab4 <__malloc_lock>
 80073c2:	6833      	ldr	r3, [r6, #0]
 80073c4:	461c      	mov	r4, r3
 80073c6:	bb34      	cbnz	r4, 8007416 <_malloc_r+0x82>
 80073c8:	4629      	mov	r1, r5
 80073ca:	4638      	mov	r0, r7
 80073cc:	f7ff ffc2 	bl	8007354 <sbrk_aligned>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	4604      	mov	r4, r0
 80073d4:	d14d      	bne.n	8007472 <_malloc_r+0xde>
 80073d6:	6834      	ldr	r4, [r6, #0]
 80073d8:	4626      	mov	r6, r4
 80073da:	2e00      	cmp	r6, #0
 80073dc:	d140      	bne.n	8007460 <_malloc_r+0xcc>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	4631      	mov	r1, r6
 80073e2:	4638      	mov	r0, r7
 80073e4:	eb04 0803 	add.w	r8, r4, r3
 80073e8:	f000 fb38 	bl	8007a5c <_sbrk_r>
 80073ec:	4580      	cmp	r8, r0
 80073ee:	d13a      	bne.n	8007466 <_malloc_r+0xd2>
 80073f0:	6821      	ldr	r1, [r4, #0]
 80073f2:	3503      	adds	r5, #3
 80073f4:	1a6d      	subs	r5, r5, r1
 80073f6:	f025 0503 	bic.w	r5, r5, #3
 80073fa:	3508      	adds	r5, #8
 80073fc:	2d0c      	cmp	r5, #12
 80073fe:	bf38      	it	cc
 8007400:	250c      	movcc	r5, #12
 8007402:	4629      	mov	r1, r5
 8007404:	4638      	mov	r0, r7
 8007406:	f7ff ffa5 	bl	8007354 <sbrk_aligned>
 800740a:	3001      	adds	r0, #1
 800740c:	d02b      	beq.n	8007466 <_malloc_r+0xd2>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	442b      	add	r3, r5
 8007412:	6023      	str	r3, [r4, #0]
 8007414:	e00e      	b.n	8007434 <_malloc_r+0xa0>
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	1b52      	subs	r2, r2, r5
 800741a:	d41e      	bmi.n	800745a <_malloc_r+0xc6>
 800741c:	2a0b      	cmp	r2, #11
 800741e:	d916      	bls.n	800744e <_malloc_r+0xba>
 8007420:	1961      	adds	r1, r4, r5
 8007422:	42a3      	cmp	r3, r4
 8007424:	6025      	str	r5, [r4, #0]
 8007426:	bf18      	it	ne
 8007428:	6059      	strne	r1, [r3, #4]
 800742a:	6863      	ldr	r3, [r4, #4]
 800742c:	bf08      	it	eq
 800742e:	6031      	streq	r1, [r6, #0]
 8007430:	5162      	str	r2, [r4, r5]
 8007432:	604b      	str	r3, [r1, #4]
 8007434:	4638      	mov	r0, r7
 8007436:	f104 060b 	add.w	r6, r4, #11
 800743a:	f000 fb41 	bl	8007ac0 <__malloc_unlock>
 800743e:	f026 0607 	bic.w	r6, r6, #7
 8007442:	1d23      	adds	r3, r4, #4
 8007444:	1af2      	subs	r2, r6, r3
 8007446:	d0b6      	beq.n	80073b6 <_malloc_r+0x22>
 8007448:	1b9b      	subs	r3, r3, r6
 800744a:	50a3      	str	r3, [r4, r2]
 800744c:	e7b3      	b.n	80073b6 <_malloc_r+0x22>
 800744e:	6862      	ldr	r2, [r4, #4]
 8007450:	42a3      	cmp	r3, r4
 8007452:	bf0c      	ite	eq
 8007454:	6032      	streq	r2, [r6, #0]
 8007456:	605a      	strne	r2, [r3, #4]
 8007458:	e7ec      	b.n	8007434 <_malloc_r+0xa0>
 800745a:	4623      	mov	r3, r4
 800745c:	6864      	ldr	r4, [r4, #4]
 800745e:	e7b2      	b.n	80073c6 <_malloc_r+0x32>
 8007460:	4634      	mov	r4, r6
 8007462:	6876      	ldr	r6, [r6, #4]
 8007464:	e7b9      	b.n	80073da <_malloc_r+0x46>
 8007466:	230c      	movs	r3, #12
 8007468:	603b      	str	r3, [r7, #0]
 800746a:	4638      	mov	r0, r7
 800746c:	f000 fb28 	bl	8007ac0 <__malloc_unlock>
 8007470:	e7a1      	b.n	80073b6 <_malloc_r+0x22>
 8007472:	6025      	str	r5, [r4, #0]
 8007474:	e7de      	b.n	8007434 <_malloc_r+0xa0>
 8007476:	bf00      	nop
 8007478:	2000135c 	.word	0x2000135c

0800747c <__ssputs_r>:
 800747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007480:	688e      	ldr	r6, [r1, #8]
 8007482:	429e      	cmp	r6, r3
 8007484:	4682      	mov	sl, r0
 8007486:	460c      	mov	r4, r1
 8007488:	4690      	mov	r8, r2
 800748a:	461f      	mov	r7, r3
 800748c:	d838      	bhi.n	8007500 <__ssputs_r+0x84>
 800748e:	898a      	ldrh	r2, [r1, #12]
 8007490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007494:	d032      	beq.n	80074fc <__ssputs_r+0x80>
 8007496:	6825      	ldr	r5, [r4, #0]
 8007498:	6909      	ldr	r1, [r1, #16]
 800749a:	eba5 0901 	sub.w	r9, r5, r1
 800749e:	6965      	ldr	r5, [r4, #20]
 80074a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074a8:	3301      	adds	r3, #1
 80074aa:	444b      	add	r3, r9
 80074ac:	106d      	asrs	r5, r5, #1
 80074ae:	429d      	cmp	r5, r3
 80074b0:	bf38      	it	cc
 80074b2:	461d      	movcc	r5, r3
 80074b4:	0553      	lsls	r3, r2, #21
 80074b6:	d531      	bpl.n	800751c <__ssputs_r+0xa0>
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7ff ff6b 	bl	8007394 <_malloc_r>
 80074be:	4606      	mov	r6, r0
 80074c0:	b950      	cbnz	r0, 80074d8 <__ssputs_r+0x5c>
 80074c2:	230c      	movs	r3, #12
 80074c4:	f8ca 3000 	str.w	r3, [sl]
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d8:	6921      	ldr	r1, [r4, #16]
 80074da:	464a      	mov	r2, r9
 80074dc:	f7ff fe7e 	bl	80071dc <memcpy>
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ea:	81a3      	strh	r3, [r4, #12]
 80074ec:	6126      	str	r6, [r4, #16]
 80074ee:	6165      	str	r5, [r4, #20]
 80074f0:	444e      	add	r6, r9
 80074f2:	eba5 0509 	sub.w	r5, r5, r9
 80074f6:	6026      	str	r6, [r4, #0]
 80074f8:	60a5      	str	r5, [r4, #8]
 80074fa:	463e      	mov	r6, r7
 80074fc:	42be      	cmp	r6, r7
 80074fe:	d900      	bls.n	8007502 <__ssputs_r+0x86>
 8007500:	463e      	mov	r6, r7
 8007502:	6820      	ldr	r0, [r4, #0]
 8007504:	4632      	mov	r2, r6
 8007506:	4641      	mov	r1, r8
 8007508:	f000 faba 	bl	8007a80 <memmove>
 800750c:	68a3      	ldr	r3, [r4, #8]
 800750e:	1b9b      	subs	r3, r3, r6
 8007510:	60a3      	str	r3, [r4, #8]
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	4433      	add	r3, r6
 8007516:	6023      	str	r3, [r4, #0]
 8007518:	2000      	movs	r0, #0
 800751a:	e7db      	b.n	80074d4 <__ssputs_r+0x58>
 800751c:	462a      	mov	r2, r5
 800751e:	f000 fad5 	bl	8007acc <_realloc_r>
 8007522:	4606      	mov	r6, r0
 8007524:	2800      	cmp	r0, #0
 8007526:	d1e1      	bne.n	80074ec <__ssputs_r+0x70>
 8007528:	6921      	ldr	r1, [r4, #16]
 800752a:	4650      	mov	r0, sl
 800752c:	f7ff fec6 	bl	80072bc <_free_r>
 8007530:	e7c7      	b.n	80074c2 <__ssputs_r+0x46>
	...

08007534 <_svfiprintf_r>:
 8007534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	4698      	mov	r8, r3
 800753a:	898b      	ldrh	r3, [r1, #12]
 800753c:	061b      	lsls	r3, r3, #24
 800753e:	b09d      	sub	sp, #116	; 0x74
 8007540:	4607      	mov	r7, r0
 8007542:	460d      	mov	r5, r1
 8007544:	4614      	mov	r4, r2
 8007546:	d50e      	bpl.n	8007566 <_svfiprintf_r+0x32>
 8007548:	690b      	ldr	r3, [r1, #16]
 800754a:	b963      	cbnz	r3, 8007566 <_svfiprintf_r+0x32>
 800754c:	2140      	movs	r1, #64	; 0x40
 800754e:	f7ff ff21 	bl	8007394 <_malloc_r>
 8007552:	6028      	str	r0, [r5, #0]
 8007554:	6128      	str	r0, [r5, #16]
 8007556:	b920      	cbnz	r0, 8007562 <_svfiprintf_r+0x2e>
 8007558:	230c      	movs	r3, #12
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	e0d1      	b.n	8007706 <_svfiprintf_r+0x1d2>
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	616b      	str	r3, [r5, #20]
 8007566:	2300      	movs	r3, #0
 8007568:	9309      	str	r3, [sp, #36]	; 0x24
 800756a:	2320      	movs	r3, #32
 800756c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007570:	f8cd 800c 	str.w	r8, [sp, #12]
 8007574:	2330      	movs	r3, #48	; 0x30
 8007576:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007720 <_svfiprintf_r+0x1ec>
 800757a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800757e:	f04f 0901 	mov.w	r9, #1
 8007582:	4623      	mov	r3, r4
 8007584:	469a      	mov	sl, r3
 8007586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800758a:	b10a      	cbz	r2, 8007590 <_svfiprintf_r+0x5c>
 800758c:	2a25      	cmp	r2, #37	; 0x25
 800758e:	d1f9      	bne.n	8007584 <_svfiprintf_r+0x50>
 8007590:	ebba 0b04 	subs.w	fp, sl, r4
 8007594:	d00b      	beq.n	80075ae <_svfiprintf_r+0x7a>
 8007596:	465b      	mov	r3, fp
 8007598:	4622      	mov	r2, r4
 800759a:	4629      	mov	r1, r5
 800759c:	4638      	mov	r0, r7
 800759e:	f7ff ff6d 	bl	800747c <__ssputs_r>
 80075a2:	3001      	adds	r0, #1
 80075a4:	f000 80aa 	beq.w	80076fc <_svfiprintf_r+0x1c8>
 80075a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075aa:	445a      	add	r2, fp
 80075ac:	9209      	str	r2, [sp, #36]	; 0x24
 80075ae:	f89a 3000 	ldrb.w	r3, [sl]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 80a2 	beq.w	80076fc <_svfiprintf_r+0x1c8>
 80075b8:	2300      	movs	r3, #0
 80075ba:	f04f 32ff 	mov.w	r2, #4294967295
 80075be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075c2:	f10a 0a01 	add.w	sl, sl, #1
 80075c6:	9304      	str	r3, [sp, #16]
 80075c8:	9307      	str	r3, [sp, #28]
 80075ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075ce:	931a      	str	r3, [sp, #104]	; 0x68
 80075d0:	4654      	mov	r4, sl
 80075d2:	2205      	movs	r2, #5
 80075d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d8:	4851      	ldr	r0, [pc, #324]	; (8007720 <_svfiprintf_r+0x1ec>)
 80075da:	f7f8 fe01 	bl	80001e0 <memchr>
 80075de:	9a04      	ldr	r2, [sp, #16]
 80075e0:	b9d8      	cbnz	r0, 800761a <_svfiprintf_r+0xe6>
 80075e2:	06d0      	lsls	r0, r2, #27
 80075e4:	bf44      	itt	mi
 80075e6:	2320      	movmi	r3, #32
 80075e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ec:	0711      	lsls	r1, r2, #28
 80075ee:	bf44      	itt	mi
 80075f0:	232b      	movmi	r3, #43	; 0x2b
 80075f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075f6:	f89a 3000 	ldrb.w	r3, [sl]
 80075fa:	2b2a      	cmp	r3, #42	; 0x2a
 80075fc:	d015      	beq.n	800762a <_svfiprintf_r+0xf6>
 80075fe:	9a07      	ldr	r2, [sp, #28]
 8007600:	4654      	mov	r4, sl
 8007602:	2000      	movs	r0, #0
 8007604:	f04f 0c0a 	mov.w	ip, #10
 8007608:	4621      	mov	r1, r4
 800760a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800760e:	3b30      	subs	r3, #48	; 0x30
 8007610:	2b09      	cmp	r3, #9
 8007612:	d94e      	bls.n	80076b2 <_svfiprintf_r+0x17e>
 8007614:	b1b0      	cbz	r0, 8007644 <_svfiprintf_r+0x110>
 8007616:	9207      	str	r2, [sp, #28]
 8007618:	e014      	b.n	8007644 <_svfiprintf_r+0x110>
 800761a:	eba0 0308 	sub.w	r3, r0, r8
 800761e:	fa09 f303 	lsl.w	r3, r9, r3
 8007622:	4313      	orrs	r3, r2
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	46a2      	mov	sl, r4
 8007628:	e7d2      	b.n	80075d0 <_svfiprintf_r+0x9c>
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	1d19      	adds	r1, r3, #4
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	9103      	str	r1, [sp, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	bfbb      	ittet	lt
 8007636:	425b      	neglt	r3, r3
 8007638:	f042 0202 	orrlt.w	r2, r2, #2
 800763c:	9307      	strge	r3, [sp, #28]
 800763e:	9307      	strlt	r3, [sp, #28]
 8007640:	bfb8      	it	lt
 8007642:	9204      	strlt	r2, [sp, #16]
 8007644:	7823      	ldrb	r3, [r4, #0]
 8007646:	2b2e      	cmp	r3, #46	; 0x2e
 8007648:	d10c      	bne.n	8007664 <_svfiprintf_r+0x130>
 800764a:	7863      	ldrb	r3, [r4, #1]
 800764c:	2b2a      	cmp	r3, #42	; 0x2a
 800764e:	d135      	bne.n	80076bc <_svfiprintf_r+0x188>
 8007650:	9b03      	ldr	r3, [sp, #12]
 8007652:	1d1a      	adds	r2, r3, #4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	9203      	str	r2, [sp, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	bfb8      	it	lt
 800765c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007660:	3402      	adds	r4, #2
 8007662:	9305      	str	r3, [sp, #20]
 8007664:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007730 <_svfiprintf_r+0x1fc>
 8007668:	7821      	ldrb	r1, [r4, #0]
 800766a:	2203      	movs	r2, #3
 800766c:	4650      	mov	r0, sl
 800766e:	f7f8 fdb7 	bl	80001e0 <memchr>
 8007672:	b140      	cbz	r0, 8007686 <_svfiprintf_r+0x152>
 8007674:	2340      	movs	r3, #64	; 0x40
 8007676:	eba0 000a 	sub.w	r0, r0, sl
 800767a:	fa03 f000 	lsl.w	r0, r3, r0
 800767e:	9b04      	ldr	r3, [sp, #16]
 8007680:	4303      	orrs	r3, r0
 8007682:	3401      	adds	r4, #1
 8007684:	9304      	str	r3, [sp, #16]
 8007686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800768a:	4826      	ldr	r0, [pc, #152]	; (8007724 <_svfiprintf_r+0x1f0>)
 800768c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007690:	2206      	movs	r2, #6
 8007692:	f7f8 fda5 	bl	80001e0 <memchr>
 8007696:	2800      	cmp	r0, #0
 8007698:	d038      	beq.n	800770c <_svfiprintf_r+0x1d8>
 800769a:	4b23      	ldr	r3, [pc, #140]	; (8007728 <_svfiprintf_r+0x1f4>)
 800769c:	bb1b      	cbnz	r3, 80076e6 <_svfiprintf_r+0x1b2>
 800769e:	9b03      	ldr	r3, [sp, #12]
 80076a0:	3307      	adds	r3, #7
 80076a2:	f023 0307 	bic.w	r3, r3, #7
 80076a6:	3308      	adds	r3, #8
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ac:	4433      	add	r3, r6
 80076ae:	9309      	str	r3, [sp, #36]	; 0x24
 80076b0:	e767      	b.n	8007582 <_svfiprintf_r+0x4e>
 80076b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80076b6:	460c      	mov	r4, r1
 80076b8:	2001      	movs	r0, #1
 80076ba:	e7a5      	b.n	8007608 <_svfiprintf_r+0xd4>
 80076bc:	2300      	movs	r3, #0
 80076be:	3401      	adds	r4, #1
 80076c0:	9305      	str	r3, [sp, #20]
 80076c2:	4619      	mov	r1, r3
 80076c4:	f04f 0c0a 	mov.w	ip, #10
 80076c8:	4620      	mov	r0, r4
 80076ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076ce:	3a30      	subs	r2, #48	; 0x30
 80076d0:	2a09      	cmp	r2, #9
 80076d2:	d903      	bls.n	80076dc <_svfiprintf_r+0x1a8>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d0c5      	beq.n	8007664 <_svfiprintf_r+0x130>
 80076d8:	9105      	str	r1, [sp, #20]
 80076da:	e7c3      	b.n	8007664 <_svfiprintf_r+0x130>
 80076dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80076e0:	4604      	mov	r4, r0
 80076e2:	2301      	movs	r3, #1
 80076e4:	e7f0      	b.n	80076c8 <_svfiprintf_r+0x194>
 80076e6:	ab03      	add	r3, sp, #12
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	462a      	mov	r2, r5
 80076ec:	4b0f      	ldr	r3, [pc, #60]	; (800772c <_svfiprintf_r+0x1f8>)
 80076ee:	a904      	add	r1, sp, #16
 80076f0:	4638      	mov	r0, r7
 80076f2:	f3af 8000 	nop.w
 80076f6:	1c42      	adds	r2, r0, #1
 80076f8:	4606      	mov	r6, r0
 80076fa:	d1d6      	bne.n	80076aa <_svfiprintf_r+0x176>
 80076fc:	89ab      	ldrh	r3, [r5, #12]
 80076fe:	065b      	lsls	r3, r3, #25
 8007700:	f53f af2c 	bmi.w	800755c <_svfiprintf_r+0x28>
 8007704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007706:	b01d      	add	sp, #116	; 0x74
 8007708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770c:	ab03      	add	r3, sp, #12
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	462a      	mov	r2, r5
 8007712:	4b06      	ldr	r3, [pc, #24]	; (800772c <_svfiprintf_r+0x1f8>)
 8007714:	a904      	add	r1, sp, #16
 8007716:	4638      	mov	r0, r7
 8007718:	f000 f87a 	bl	8007810 <_printf_i>
 800771c:	e7eb      	b.n	80076f6 <_svfiprintf_r+0x1c2>
 800771e:	bf00      	nop
 8007720:	080088d0 	.word	0x080088d0
 8007724:	080088da 	.word	0x080088da
 8007728:	00000000 	.word	0x00000000
 800772c:	0800747d 	.word	0x0800747d
 8007730:	080088d6 	.word	0x080088d6

08007734 <_printf_common>:
 8007734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007738:	4616      	mov	r6, r2
 800773a:	4699      	mov	r9, r3
 800773c:	688a      	ldr	r2, [r1, #8]
 800773e:	690b      	ldr	r3, [r1, #16]
 8007740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007744:	4293      	cmp	r3, r2
 8007746:	bfb8      	it	lt
 8007748:	4613      	movlt	r3, r2
 800774a:	6033      	str	r3, [r6, #0]
 800774c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007750:	4607      	mov	r7, r0
 8007752:	460c      	mov	r4, r1
 8007754:	b10a      	cbz	r2, 800775a <_printf_common+0x26>
 8007756:	3301      	adds	r3, #1
 8007758:	6033      	str	r3, [r6, #0]
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	0699      	lsls	r1, r3, #26
 800775e:	bf42      	ittt	mi
 8007760:	6833      	ldrmi	r3, [r6, #0]
 8007762:	3302      	addmi	r3, #2
 8007764:	6033      	strmi	r3, [r6, #0]
 8007766:	6825      	ldr	r5, [r4, #0]
 8007768:	f015 0506 	ands.w	r5, r5, #6
 800776c:	d106      	bne.n	800777c <_printf_common+0x48>
 800776e:	f104 0a19 	add.w	sl, r4, #25
 8007772:	68e3      	ldr	r3, [r4, #12]
 8007774:	6832      	ldr	r2, [r6, #0]
 8007776:	1a9b      	subs	r3, r3, r2
 8007778:	42ab      	cmp	r3, r5
 800777a:	dc26      	bgt.n	80077ca <_printf_common+0x96>
 800777c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007780:	1e13      	subs	r3, r2, #0
 8007782:	6822      	ldr	r2, [r4, #0]
 8007784:	bf18      	it	ne
 8007786:	2301      	movne	r3, #1
 8007788:	0692      	lsls	r2, r2, #26
 800778a:	d42b      	bmi.n	80077e4 <_printf_common+0xb0>
 800778c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007790:	4649      	mov	r1, r9
 8007792:	4638      	mov	r0, r7
 8007794:	47c0      	blx	r8
 8007796:	3001      	adds	r0, #1
 8007798:	d01e      	beq.n	80077d8 <_printf_common+0xa4>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	68e5      	ldr	r5, [r4, #12]
 800779e:	6832      	ldr	r2, [r6, #0]
 80077a0:	f003 0306 	and.w	r3, r3, #6
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	bf08      	it	eq
 80077a8:	1aad      	subeq	r5, r5, r2
 80077aa:	68a3      	ldr	r3, [r4, #8]
 80077ac:	6922      	ldr	r2, [r4, #16]
 80077ae:	bf0c      	ite	eq
 80077b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b4:	2500      	movne	r5, #0
 80077b6:	4293      	cmp	r3, r2
 80077b8:	bfc4      	itt	gt
 80077ba:	1a9b      	subgt	r3, r3, r2
 80077bc:	18ed      	addgt	r5, r5, r3
 80077be:	2600      	movs	r6, #0
 80077c0:	341a      	adds	r4, #26
 80077c2:	42b5      	cmp	r5, r6
 80077c4:	d11a      	bne.n	80077fc <_printf_common+0xc8>
 80077c6:	2000      	movs	r0, #0
 80077c8:	e008      	b.n	80077dc <_printf_common+0xa8>
 80077ca:	2301      	movs	r3, #1
 80077cc:	4652      	mov	r2, sl
 80077ce:	4649      	mov	r1, r9
 80077d0:	4638      	mov	r0, r7
 80077d2:	47c0      	blx	r8
 80077d4:	3001      	adds	r0, #1
 80077d6:	d103      	bne.n	80077e0 <_printf_common+0xac>
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295
 80077dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e0:	3501      	adds	r5, #1
 80077e2:	e7c6      	b.n	8007772 <_printf_common+0x3e>
 80077e4:	18e1      	adds	r1, r4, r3
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	2030      	movs	r0, #48	; 0x30
 80077ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077ee:	4422      	add	r2, r4
 80077f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077f8:	3302      	adds	r3, #2
 80077fa:	e7c7      	b.n	800778c <_printf_common+0x58>
 80077fc:	2301      	movs	r3, #1
 80077fe:	4622      	mov	r2, r4
 8007800:	4649      	mov	r1, r9
 8007802:	4638      	mov	r0, r7
 8007804:	47c0      	blx	r8
 8007806:	3001      	adds	r0, #1
 8007808:	d0e6      	beq.n	80077d8 <_printf_common+0xa4>
 800780a:	3601      	adds	r6, #1
 800780c:	e7d9      	b.n	80077c2 <_printf_common+0x8e>
	...

08007810 <_printf_i>:
 8007810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007814:	7e0f      	ldrb	r7, [r1, #24]
 8007816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007818:	2f78      	cmp	r7, #120	; 0x78
 800781a:	4691      	mov	r9, r2
 800781c:	4680      	mov	r8, r0
 800781e:	460c      	mov	r4, r1
 8007820:	469a      	mov	sl, r3
 8007822:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007826:	d807      	bhi.n	8007838 <_printf_i+0x28>
 8007828:	2f62      	cmp	r7, #98	; 0x62
 800782a:	d80a      	bhi.n	8007842 <_printf_i+0x32>
 800782c:	2f00      	cmp	r7, #0
 800782e:	f000 80d8 	beq.w	80079e2 <_printf_i+0x1d2>
 8007832:	2f58      	cmp	r7, #88	; 0x58
 8007834:	f000 80a3 	beq.w	800797e <_printf_i+0x16e>
 8007838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800783c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007840:	e03a      	b.n	80078b8 <_printf_i+0xa8>
 8007842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007846:	2b15      	cmp	r3, #21
 8007848:	d8f6      	bhi.n	8007838 <_printf_i+0x28>
 800784a:	a101      	add	r1, pc, #4	; (adr r1, 8007850 <_printf_i+0x40>)
 800784c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007850:	080078a9 	.word	0x080078a9
 8007854:	080078bd 	.word	0x080078bd
 8007858:	08007839 	.word	0x08007839
 800785c:	08007839 	.word	0x08007839
 8007860:	08007839 	.word	0x08007839
 8007864:	08007839 	.word	0x08007839
 8007868:	080078bd 	.word	0x080078bd
 800786c:	08007839 	.word	0x08007839
 8007870:	08007839 	.word	0x08007839
 8007874:	08007839 	.word	0x08007839
 8007878:	08007839 	.word	0x08007839
 800787c:	080079c9 	.word	0x080079c9
 8007880:	080078ed 	.word	0x080078ed
 8007884:	080079ab 	.word	0x080079ab
 8007888:	08007839 	.word	0x08007839
 800788c:	08007839 	.word	0x08007839
 8007890:	080079eb 	.word	0x080079eb
 8007894:	08007839 	.word	0x08007839
 8007898:	080078ed 	.word	0x080078ed
 800789c:	08007839 	.word	0x08007839
 80078a0:	08007839 	.word	0x08007839
 80078a4:	080079b3 	.word	0x080079b3
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	1d1a      	adds	r2, r3, #4
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	602a      	str	r2, [r5, #0]
 80078b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0a3      	b.n	8007a04 <_printf_i+0x1f4>
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	6829      	ldr	r1, [r5, #0]
 80078c0:	0606      	lsls	r6, r0, #24
 80078c2:	f101 0304 	add.w	r3, r1, #4
 80078c6:	d50a      	bpl.n	80078de <_printf_i+0xce>
 80078c8:	680e      	ldr	r6, [r1, #0]
 80078ca:	602b      	str	r3, [r5, #0]
 80078cc:	2e00      	cmp	r6, #0
 80078ce:	da03      	bge.n	80078d8 <_printf_i+0xc8>
 80078d0:	232d      	movs	r3, #45	; 0x2d
 80078d2:	4276      	negs	r6, r6
 80078d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d8:	485e      	ldr	r0, [pc, #376]	; (8007a54 <_printf_i+0x244>)
 80078da:	230a      	movs	r3, #10
 80078dc:	e019      	b.n	8007912 <_printf_i+0x102>
 80078de:	680e      	ldr	r6, [r1, #0]
 80078e0:	602b      	str	r3, [r5, #0]
 80078e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078e6:	bf18      	it	ne
 80078e8:	b236      	sxthne	r6, r6
 80078ea:	e7ef      	b.n	80078cc <_printf_i+0xbc>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	6820      	ldr	r0, [r4, #0]
 80078f0:	1d19      	adds	r1, r3, #4
 80078f2:	6029      	str	r1, [r5, #0]
 80078f4:	0601      	lsls	r1, r0, #24
 80078f6:	d501      	bpl.n	80078fc <_printf_i+0xec>
 80078f8:	681e      	ldr	r6, [r3, #0]
 80078fa:	e002      	b.n	8007902 <_printf_i+0xf2>
 80078fc:	0646      	lsls	r6, r0, #25
 80078fe:	d5fb      	bpl.n	80078f8 <_printf_i+0xe8>
 8007900:	881e      	ldrh	r6, [r3, #0]
 8007902:	4854      	ldr	r0, [pc, #336]	; (8007a54 <_printf_i+0x244>)
 8007904:	2f6f      	cmp	r7, #111	; 0x6f
 8007906:	bf0c      	ite	eq
 8007908:	2308      	moveq	r3, #8
 800790a:	230a      	movne	r3, #10
 800790c:	2100      	movs	r1, #0
 800790e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007912:	6865      	ldr	r5, [r4, #4]
 8007914:	60a5      	str	r5, [r4, #8]
 8007916:	2d00      	cmp	r5, #0
 8007918:	bfa2      	ittt	ge
 800791a:	6821      	ldrge	r1, [r4, #0]
 800791c:	f021 0104 	bicge.w	r1, r1, #4
 8007920:	6021      	strge	r1, [r4, #0]
 8007922:	b90e      	cbnz	r6, 8007928 <_printf_i+0x118>
 8007924:	2d00      	cmp	r5, #0
 8007926:	d04d      	beq.n	80079c4 <_printf_i+0x1b4>
 8007928:	4615      	mov	r5, r2
 800792a:	fbb6 f1f3 	udiv	r1, r6, r3
 800792e:	fb03 6711 	mls	r7, r3, r1, r6
 8007932:	5dc7      	ldrb	r7, [r0, r7]
 8007934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007938:	4637      	mov	r7, r6
 800793a:	42bb      	cmp	r3, r7
 800793c:	460e      	mov	r6, r1
 800793e:	d9f4      	bls.n	800792a <_printf_i+0x11a>
 8007940:	2b08      	cmp	r3, #8
 8007942:	d10b      	bne.n	800795c <_printf_i+0x14c>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	07de      	lsls	r6, r3, #31
 8007948:	d508      	bpl.n	800795c <_printf_i+0x14c>
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	6861      	ldr	r1, [r4, #4]
 800794e:	4299      	cmp	r1, r3
 8007950:	bfde      	ittt	le
 8007952:	2330      	movle	r3, #48	; 0x30
 8007954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800795c:	1b52      	subs	r2, r2, r5
 800795e:	6122      	str	r2, [r4, #16]
 8007960:	f8cd a000 	str.w	sl, [sp]
 8007964:	464b      	mov	r3, r9
 8007966:	aa03      	add	r2, sp, #12
 8007968:	4621      	mov	r1, r4
 800796a:	4640      	mov	r0, r8
 800796c:	f7ff fee2 	bl	8007734 <_printf_common>
 8007970:	3001      	adds	r0, #1
 8007972:	d14c      	bne.n	8007a0e <_printf_i+0x1fe>
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	b004      	add	sp, #16
 800797a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797e:	4835      	ldr	r0, [pc, #212]	; (8007a54 <_printf_i+0x244>)
 8007980:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007984:	6829      	ldr	r1, [r5, #0]
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	f851 6b04 	ldr.w	r6, [r1], #4
 800798c:	6029      	str	r1, [r5, #0]
 800798e:	061d      	lsls	r5, r3, #24
 8007990:	d514      	bpl.n	80079bc <_printf_i+0x1ac>
 8007992:	07df      	lsls	r7, r3, #31
 8007994:	bf44      	itt	mi
 8007996:	f043 0320 	orrmi.w	r3, r3, #32
 800799a:	6023      	strmi	r3, [r4, #0]
 800799c:	b91e      	cbnz	r6, 80079a6 <_printf_i+0x196>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	f023 0320 	bic.w	r3, r3, #32
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	2310      	movs	r3, #16
 80079a8:	e7b0      	b.n	800790c <_printf_i+0xfc>
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	f043 0320 	orr.w	r3, r3, #32
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	2378      	movs	r3, #120	; 0x78
 80079b4:	4828      	ldr	r0, [pc, #160]	; (8007a58 <_printf_i+0x248>)
 80079b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079ba:	e7e3      	b.n	8007984 <_printf_i+0x174>
 80079bc:	0659      	lsls	r1, r3, #25
 80079be:	bf48      	it	mi
 80079c0:	b2b6      	uxthmi	r6, r6
 80079c2:	e7e6      	b.n	8007992 <_printf_i+0x182>
 80079c4:	4615      	mov	r5, r2
 80079c6:	e7bb      	b.n	8007940 <_printf_i+0x130>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	6826      	ldr	r6, [r4, #0]
 80079cc:	6961      	ldr	r1, [r4, #20]
 80079ce:	1d18      	adds	r0, r3, #4
 80079d0:	6028      	str	r0, [r5, #0]
 80079d2:	0635      	lsls	r5, r6, #24
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	d501      	bpl.n	80079dc <_printf_i+0x1cc>
 80079d8:	6019      	str	r1, [r3, #0]
 80079da:	e002      	b.n	80079e2 <_printf_i+0x1d2>
 80079dc:	0670      	lsls	r0, r6, #25
 80079de:	d5fb      	bpl.n	80079d8 <_printf_i+0x1c8>
 80079e0:	8019      	strh	r1, [r3, #0]
 80079e2:	2300      	movs	r3, #0
 80079e4:	6123      	str	r3, [r4, #16]
 80079e6:	4615      	mov	r5, r2
 80079e8:	e7ba      	b.n	8007960 <_printf_i+0x150>
 80079ea:	682b      	ldr	r3, [r5, #0]
 80079ec:	1d1a      	adds	r2, r3, #4
 80079ee:	602a      	str	r2, [r5, #0]
 80079f0:	681d      	ldr	r5, [r3, #0]
 80079f2:	6862      	ldr	r2, [r4, #4]
 80079f4:	2100      	movs	r1, #0
 80079f6:	4628      	mov	r0, r5
 80079f8:	f7f8 fbf2 	bl	80001e0 <memchr>
 80079fc:	b108      	cbz	r0, 8007a02 <_printf_i+0x1f2>
 80079fe:	1b40      	subs	r0, r0, r5
 8007a00:	6060      	str	r0, [r4, #4]
 8007a02:	6863      	ldr	r3, [r4, #4]
 8007a04:	6123      	str	r3, [r4, #16]
 8007a06:	2300      	movs	r3, #0
 8007a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a0c:	e7a8      	b.n	8007960 <_printf_i+0x150>
 8007a0e:	6923      	ldr	r3, [r4, #16]
 8007a10:	462a      	mov	r2, r5
 8007a12:	4649      	mov	r1, r9
 8007a14:	4640      	mov	r0, r8
 8007a16:	47d0      	blx	sl
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d0ab      	beq.n	8007974 <_printf_i+0x164>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	079b      	lsls	r3, r3, #30
 8007a20:	d413      	bmi.n	8007a4a <_printf_i+0x23a>
 8007a22:	68e0      	ldr	r0, [r4, #12]
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	4298      	cmp	r0, r3
 8007a28:	bfb8      	it	lt
 8007a2a:	4618      	movlt	r0, r3
 8007a2c:	e7a4      	b.n	8007978 <_printf_i+0x168>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4632      	mov	r2, r6
 8007a32:	4649      	mov	r1, r9
 8007a34:	4640      	mov	r0, r8
 8007a36:	47d0      	blx	sl
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d09b      	beq.n	8007974 <_printf_i+0x164>
 8007a3c:	3501      	adds	r5, #1
 8007a3e:	68e3      	ldr	r3, [r4, #12]
 8007a40:	9903      	ldr	r1, [sp, #12]
 8007a42:	1a5b      	subs	r3, r3, r1
 8007a44:	42ab      	cmp	r3, r5
 8007a46:	dcf2      	bgt.n	8007a2e <_printf_i+0x21e>
 8007a48:	e7eb      	b.n	8007a22 <_printf_i+0x212>
 8007a4a:	2500      	movs	r5, #0
 8007a4c:	f104 0619 	add.w	r6, r4, #25
 8007a50:	e7f5      	b.n	8007a3e <_printf_i+0x22e>
 8007a52:	bf00      	nop
 8007a54:	080088e1 	.word	0x080088e1
 8007a58:	080088f2 	.word	0x080088f2

08007a5c <_sbrk_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d06      	ldr	r5, [pc, #24]	; (8007a78 <_sbrk_r+0x1c>)
 8007a60:	2300      	movs	r3, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	602b      	str	r3, [r5, #0]
 8007a68:	f7fb fc4c 	bl	8003304 <_sbrk>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_sbrk_r+0x1a>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_sbrk_r+0x1a>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	20001368 	.word	0x20001368

08007a7c <__retarget_lock_acquire_recursive>:
 8007a7c:	4770      	bx	lr

08007a7e <__retarget_lock_release_recursive>:
 8007a7e:	4770      	bx	lr

08007a80 <memmove>:
 8007a80:	4288      	cmp	r0, r1
 8007a82:	b510      	push	{r4, lr}
 8007a84:	eb01 0402 	add.w	r4, r1, r2
 8007a88:	d902      	bls.n	8007a90 <memmove+0x10>
 8007a8a:	4284      	cmp	r4, r0
 8007a8c:	4623      	mov	r3, r4
 8007a8e:	d807      	bhi.n	8007aa0 <memmove+0x20>
 8007a90:	1e43      	subs	r3, r0, #1
 8007a92:	42a1      	cmp	r1, r4
 8007a94:	d008      	beq.n	8007aa8 <memmove+0x28>
 8007a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a9e:	e7f8      	b.n	8007a92 <memmove+0x12>
 8007aa0:	4402      	add	r2, r0
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	428a      	cmp	r2, r1
 8007aa6:	d100      	bne.n	8007aaa <memmove+0x2a>
 8007aa8:	bd10      	pop	{r4, pc}
 8007aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ab2:	e7f7      	b.n	8007aa4 <memmove+0x24>

08007ab4 <__malloc_lock>:
 8007ab4:	4801      	ldr	r0, [pc, #4]	; (8007abc <__malloc_lock+0x8>)
 8007ab6:	f7ff bfe1 	b.w	8007a7c <__retarget_lock_acquire_recursive>
 8007aba:	bf00      	nop
 8007abc:	20001364 	.word	0x20001364

08007ac0 <__malloc_unlock>:
 8007ac0:	4801      	ldr	r0, [pc, #4]	; (8007ac8 <__malloc_unlock+0x8>)
 8007ac2:	f7ff bfdc 	b.w	8007a7e <__retarget_lock_release_recursive>
 8007ac6:	bf00      	nop
 8007ac8:	20001364 	.word	0x20001364

08007acc <_realloc_r>:
 8007acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad0:	4680      	mov	r8, r0
 8007ad2:	4614      	mov	r4, r2
 8007ad4:	460e      	mov	r6, r1
 8007ad6:	b921      	cbnz	r1, 8007ae2 <_realloc_r+0x16>
 8007ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007adc:	4611      	mov	r1, r2
 8007ade:	f7ff bc59 	b.w	8007394 <_malloc_r>
 8007ae2:	b92a      	cbnz	r2, 8007af0 <_realloc_r+0x24>
 8007ae4:	f7ff fbea 	bl	80072bc <_free_r>
 8007ae8:	4625      	mov	r5, r4
 8007aea:	4628      	mov	r0, r5
 8007aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af0:	f000 f81b 	bl	8007b2a <_malloc_usable_size_r>
 8007af4:	4284      	cmp	r4, r0
 8007af6:	4607      	mov	r7, r0
 8007af8:	d802      	bhi.n	8007b00 <_realloc_r+0x34>
 8007afa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007afe:	d812      	bhi.n	8007b26 <_realloc_r+0x5a>
 8007b00:	4621      	mov	r1, r4
 8007b02:	4640      	mov	r0, r8
 8007b04:	f7ff fc46 	bl	8007394 <_malloc_r>
 8007b08:	4605      	mov	r5, r0
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d0ed      	beq.n	8007aea <_realloc_r+0x1e>
 8007b0e:	42bc      	cmp	r4, r7
 8007b10:	4622      	mov	r2, r4
 8007b12:	4631      	mov	r1, r6
 8007b14:	bf28      	it	cs
 8007b16:	463a      	movcs	r2, r7
 8007b18:	f7ff fb60 	bl	80071dc <memcpy>
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4640      	mov	r0, r8
 8007b20:	f7ff fbcc 	bl	80072bc <_free_r>
 8007b24:	e7e1      	b.n	8007aea <_realloc_r+0x1e>
 8007b26:	4635      	mov	r5, r6
 8007b28:	e7df      	b.n	8007aea <_realloc_r+0x1e>

08007b2a <_malloc_usable_size_r>:
 8007b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b2e:	1f18      	subs	r0, r3, #4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bfbc      	itt	lt
 8007b34:	580b      	ldrlt	r3, [r1, r0]
 8007b36:	18c0      	addlt	r0, r0, r3
 8007b38:	4770      	bx	lr
	...

08007b3c <_init>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	bf00      	nop
 8007b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b42:	bc08      	pop	{r3}
 8007b44:	469e      	mov	lr, r3
 8007b46:	4770      	bx	lr

08007b48 <_fini>:
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	bf00      	nop
 8007b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4e:	bc08      	pop	{r3}
 8007b50:	469e      	mov	lr, r3
 8007b52:	4770      	bx	lr
