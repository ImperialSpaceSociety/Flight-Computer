
Flash_STM32F303K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006438  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e10  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073d8  080073d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080073d8  080073d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073d8  080073d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d8  080073d8  000173d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073dc  080073dc  000173dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080073e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00001384  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200013f4  200013f4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000142c8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028b8  00000000  00000000  00034368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00036c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001098  00000000  00000000  00037dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003dbc  00000000  00000000  00038e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000178d5  00000000  00000000  0003cc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a91d6  00000000  00000000  000544e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fd6bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fdc  00000000  00000000  000fd710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065b0 	.word	0x080065b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080065b0 	.word	0x080065b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <a_w25qxx_spi_write_read>:
 *             - 0 success
 *             - 1 write read failed
 * @note       none
 */
static uint8_t a_w25qxx_spi_write_read(w25qxx_handle_t *handle, uint8_t *in_buf, uint32_t in_len, uint8_t *out_buf, uint32_t out_len)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b08f      	sub	sp, #60	; 0x3c
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
    if (handle->spi_qspi_write_read(0x00, 0x00, 0x00000000, 0x00, 0x00,                /* write read data */
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	689c      	ldr	r4, [r3, #8]
 8000292:	2301      	movs	r3, #1
 8000294:	9309      	str	r3, [sp, #36]	; 0x24
 8000296:	6a3b      	ldr	r3, [r7, #32]
 8000298:	9308      	str	r3, [sp, #32]
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	9307      	str	r3, [sp, #28]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	9306      	str	r3, [sp, #24]
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	9305      	str	r3, [sp, #20]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9304      	str	r3, [sp, #16]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9303      	str	r3, [sp, #12]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9302      	str	r3, [sp, #8]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9301      	str	r3, [sp, #4]
 80002b6:	2300      	movs	r3, #0
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2300      	movs	r3, #0
 80002bc:	2200      	movs	r2, #0
 80002be:	2100      	movs	r1, #0
 80002c0:	2000      	movs	r0, #0
 80002c2:	47a0      	blx	r4
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <a_w25qxx_spi_write_read+0x4e>
                                    0x00000000, 0x00, 0x00, 
                                    0x00, in_buf, in_len, out_buf, out_len, 1) != 0)
    {
        return 1;                                                                      /* return error */
 80002ca:	2301      	movs	r3, #1
 80002cc:	e000      	b.n	80002d0 <a_w25qxx_spi_write_read+0x50>
    }
    else
    {
        return 0;                                                                      /* success return 0 */
 80002ce:	2300      	movs	r3, #0
    }
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd90      	pop	{r4, r7, pc}

080002d8 <a_w25qxx_qspi_write_read>:
static uint8_t a_w25qxx_qspi_write_read(w25qxx_handle_t *handle, uint8_t instruction, uint8_t instruction_line,
                                        uint32_t address, uint8_t address_line, uint8_t address_len,
                                        uint32_t alternate, uint8_t alternate_line, uint8_t alternate_len,
                                        uint8_t dummy, uint8_t *in_buf, uint32_t in_len,
                                        uint8_t *out_buf, uint32_t out_len, uint8_t data_line)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b08f      	sub	sp, #60	; 0x3c
 80002dc:	af0a      	add	r7, sp, #40	; 0x28
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	460b      	mov	r3, r1
 80002e4:	72fb      	strb	r3, [r7, #11]
 80002e6:	4613      	mov	r3, r2
 80002e8:	72bb      	strb	r3, [r7, #10]
    if (handle->spi_qspi_write_read(instruction, instruction_line, address, address_line, address_len,        /* write read data */
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	689c      	ldr	r4, [r3, #8]
 80002ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80002f2:	7ab9      	ldrb	r1, [r7, #10]
 80002f4:	7af8      	ldrb	r0, [r7, #11]
 80002f6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80002fa:	9309      	str	r3, [sp, #36]	; 0x24
 80002fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002fe:	9308      	str	r3, [sp, #32]
 8000300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000302:	9307      	str	r3, [sp, #28]
 8000304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000306:	9306      	str	r3, [sp, #24]
 8000308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800030a:	9305      	str	r3, [sp, #20]
 800030c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000310:	9304      	str	r3, [sp, #16]
 8000312:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000316:	9303      	str	r3, [sp, #12]
 8000318:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800031c:	9302      	str	r3, [sp, #8]
 800031e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	4613      	mov	r3, r2
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	47a0      	blx	r4
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <a_w25qxx_qspi_write_read+0x60>
                                    alternate, alternate_line, alternate_len, 
                                    dummy, in_buf, in_len, out_buf, out_len, data_line) != 0)
    {
        return 1;                                                                                             /* return error */
 8000334:	2301      	movs	r3, #1
 8000336:	e000      	b.n	800033a <a_w25qxx_qspi_write_read+0x62>
    }
    else
    {
        return 0;                                                                                             /* success return 0 */
 8000338:	2300      	movs	r3, #0
    }
}
 800033a:	4618      	mov	r0, r3
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bd90      	pop	{r4, r7, pc}

08000342 <w25qxx_set_dual_quad_spi>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t w25qxx_set_dual_quad_spi(w25qxx_handle_t *handle, w25qxx_bool_t enable)
{
 8000342:	b480      	push	{r7}
 8000344:	b083      	sub	sp, #12
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
 800034a:	460b      	mov	r3, r1
 800034c:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                                    /* check handle */
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d101      	bne.n	8000358 <w25qxx_set_dual_quad_spi+0x16>
    {
        return 2;                                          /* return error */
 8000354:	2302      	movs	r3, #2
 8000356:	e003      	b.n	8000360 <w25qxx_set_dual_quad_spi+0x1e>
    }

    handle->dual_quad_spi_enable = (uint8_t)enable;        /* set enable */
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	78fa      	ldrb	r2, [r7, #3]
 800035c:	77da      	strb	r2, [r3, #31]
    
    return 0;                                              /* success return 0 */
 800035e:	2300      	movs	r3, #0
}
 8000360:	4618      	mov	r0, r3
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <w25qxx_set_type>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t w25qxx_set_type(w25qxx_handle_t *handle, w25qxx_type_t type)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	807b      	strh	r3, [r7, #2]
    if (handle == NULL)                  /* check handle */
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d101      	bne.n	8000382 <w25qxx_set_type+0x16>
    {
        return 2;                        /* return error */
 800037e:	2302      	movs	r3, #2
 8000380:	e003      	b.n	800038a <w25qxx_set_type+0x1e>
    }

    handle->type = (uint16_t)type;       /* set type */
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	887a      	ldrh	r2, [r7, #2]
 8000386:	835a      	strh	r2, [r3, #26]
    
    return 0;                            /* success return 0 */
 8000388:	2300      	movs	r3, #0
}
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <w25qxx_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t w25qxx_set_interface(w25qxx_handle_t *handle, w25qxx_interface_t interface)
{
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
 800039e:	460b      	mov	r3, r1
 80003a0:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                           /* check handle */
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d101      	bne.n	80003ac <w25qxx_set_interface+0x16>
    {
        return 2;                                 /* return error */
 80003a8:	2302      	movs	r3, #2
 80003aa:	e004      	b.n	80003b6 <w25qxx_set_interface+0x20>
    }

    handle->spi_qspi = (uint8_t)interface;        /* set interface */
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	78fa      	ldrb	r2, [r7, #3]
 80003b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return 0;                                     /* success return 0 */
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
	...

080003c4 <w25qxx_set_address_mode>:
 *             - 3 handle is not initialized
 *             - 4 current type can't use this function
 * @note      none
 */
uint8_t w25qxx_set_address_mode(w25qxx_handle_t *handle, w25qxx_address_mode_t mode)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b090      	sub	sp, #64	; 0x40
 80003c8:	af0c      	add	r7, sp, #48	; 0x30
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t buf[1];
    
    if (handle == NULL)                                                               /* check handle */
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d101      	bne.n	80003da <w25qxx_set_address_mode+0x16>
    {
        return 2;                                                                     /* return error */
 80003d6:	2302      	movs	r3, #2
 80003d8:	e098      	b.n	800050c <w25qxx_set_address_mode+0x148>
    }   
    if (handle->inited != 1)                                                          /* check handle initialization */
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	7e1b      	ldrb	r3, [r3, #24]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d001      	beq.n	80003e6 <w25qxx_set_address_mode+0x22>
    {
        return 3;                                                                     /* return error */
 80003e2:	2303      	movs	r3, #3
 80003e4:	e092      	b.n	800050c <w25qxx_set_address_mode+0x148>
    }
    if (handle->type < W25Q256)                                                       /* check type */
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	8b5b      	ldrh	r3, [r3, #26]
 80003ea:	f64e 7217 	movw	r2, #61207	; 0xef17
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d805      	bhi.n	80003fe <w25qxx_set_address_mode+0x3a>
    {
        handle->debug_print("w25qxx: current type can't use this function.\n");       /* current type can't use this function */
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4847      	ldr	r0, [pc, #284]	; (8000514 <w25qxx_set_address_mode+0x150>)
 80003f8:	4798      	blx	r3
       
        return 4;                                                                     /* return error */
 80003fa:	2304      	movs	r3, #4
 80003fc:	e086      	b.n	800050c <w25qxx_set_address_mode+0x148>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                     /* spi interface */
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d14e      	bne.n	80004a6 <w25qxx_set_address_mode+0xe2>
    {
        if (handle->dual_quad_spi_enable != 0)                                        /* enable dual quad spi */
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	7fdb      	ldrb	r3, [r3, #31]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d02e      	beq.n	800046e <w25qxx_set_address_mode+0xaa>
        {
            if (mode == W25QXX_ADDRESS_MODE_3_BYTE)                                   /* address 3 mode byte */
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d102      	bne.n	800041c <w25qxx_set_address_mode+0x58>
            {
                buf[0] = 0xE9;                                                        /* 3 byte mode */
 8000416:	23e9      	movs	r3, #233	; 0xe9
 8000418:	733b      	strb	r3, [r7, #12]
 800041a:	e001      	b.n	8000420 <w25qxx_set_address_mode+0x5c>
            }
            else                                                                      /* address 4 mode byte */
            {
                buf[0] = 0xB7;                                                        /* 4 byte mode */
 800041c:	23b7      	movs	r3, #183	; 0xb7
 800041e:	733b      	strb	r3, [r7, #12]
            }
            res = a_w25qxx_qspi_write_read(handle, buf[0], 1,
 8000420:	7b39      	ldrb	r1, [r7, #12]
 8000422:	2300      	movs	r3, #0
 8000424:	930a      	str	r3, [sp, #40]	; 0x28
 8000426:	2300      	movs	r3, #0
 8000428:	9309      	str	r3, [sp, #36]	; 0x24
 800042a:	2300      	movs	r3, #0
 800042c:	9308      	str	r3, [sp, #32]
 800042e:	2300      	movs	r3, #0
 8000430:	9307      	str	r3, [sp, #28]
 8000432:	2300      	movs	r3, #0
 8000434:	9306      	str	r3, [sp, #24]
 8000436:	2300      	movs	r3, #0
 8000438:	9305      	str	r3, [sp, #20]
 800043a:	2300      	movs	r3, #0
 800043c:	9304      	str	r3, [sp, #16]
 800043e:	2300      	movs	r3, #0
 8000440:	9303      	str	r3, [sp, #12]
 8000442:	2300      	movs	r3, #0
 8000444:	9302      	str	r3, [sp, #8]
 8000446:	2300      	movs	r3, #0
 8000448:	9301      	str	r3, [sp, #4]
 800044a:	2300      	movs	r3, #0
 800044c:	9300      	str	r3, [sp, #0]
 800044e:	2300      	movs	r3, #0
 8000450:	2201      	movs	r2, #1
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f7ff ff40 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000458:	4603      	mov	r3, r0
 800045a:	73fb      	strb	r3, [r7, #15]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                         /* qspi write read */
            if (res != 0)                                                             /* check result */
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d050      	beq.n	8000504 <w25qxx_set_address_mode+0x140>
            {
                handle->debug_print("w25qxx: set address mode failed.\n");            /* set address mode failed */
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	482c      	ldr	r0, [pc, #176]	; (8000518 <w25qxx_set_address_mode+0x154>)
 8000468:	4798      	blx	r3
               
                return 1;                                                             /* return error */
 800046a:	2301      	movs	r3, #1
 800046c:	e04e      	b.n	800050c <w25qxx_set_address_mode+0x148>
            }
        }
        else                                                                          /* single spi */
        {
            if (mode == W25QXX_ADDRESS_MODE_3_BYTE)                                   /* address 3 mode byte */
 800046e:	78fb      	ldrb	r3, [r7, #3]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d102      	bne.n	800047a <w25qxx_set_address_mode+0xb6>
            {
                buf[0] = 0xE9;                                                        /* 3 byte mode */
 8000474:	23e9      	movs	r3, #233	; 0xe9
 8000476:	733b      	strb	r3, [r7, #12]
 8000478:	e001      	b.n	800047e <w25qxx_set_address_mode+0xba>
            }
            else                                                                      /* address 4 mode byte */
            {
                buf[0] = 0xB7;                                                        /* 4 byte mode */
 800047a:	23b7      	movs	r3, #183	; 0xb7
 800047c:	733b      	strb	r3, [r7, #12]
            }
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);        /* spi write read */
 800047e:	f107 010c 	add.w	r1, r7, #12
 8000482:	2300      	movs	r3, #0
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	2300      	movs	r3, #0
 8000488:	2201      	movs	r2, #1
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f7ff fef8 	bl	8000280 <a_w25qxx_spi_write_read>
 8000490:	4603      	mov	r3, r0
 8000492:	73fb      	strb	r3, [r7, #15]
            if (res != 0)                                                             /* check result */
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d034      	beq.n	8000504 <w25qxx_set_address_mode+0x140>
            {
                handle->debug_print("w25qxx: set address mode failed.\n");            /* set address mode failed */
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	481e      	ldr	r0, [pc, #120]	; (8000518 <w25qxx_set_address_mode+0x154>)
 80004a0:	4798      	blx	r3
               
                return 1;                                                             /* return error */
 80004a2:	2301      	movs	r3, #1
 80004a4:	e032      	b.n	800050c <w25qxx_set_address_mode+0x148>
            }
        }
    }
    else                                                                              /* qspi interface */
    {
        if (mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* address 3 mode byte */
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d102      	bne.n	80004b2 <w25qxx_set_address_mode+0xee>
        {
            buf[0] = 0xE9;                                                            /* 3 byte mode */
 80004ac:	23e9      	movs	r3, #233	; 0xe9
 80004ae:	733b      	strb	r3, [r7, #12]
 80004b0:	e001      	b.n	80004b6 <w25qxx_set_address_mode+0xf2>
        }
        else                                                                          /* address 4 mode byte */
        {
            buf[0] = 0xB7;                                                            /* 4 byte mode */
 80004b2:	23b7      	movs	r3, #183	; 0xb7
 80004b4:	733b      	strb	r3, [r7, #12]
        }
        res = a_w25qxx_qspi_write_read(handle, buf[0], 4,
 80004b6:	7b39      	ldrb	r1, [r7, #12]
 80004b8:	2300      	movs	r3, #0
 80004ba:	930a      	str	r3, [sp, #40]	; 0x28
 80004bc:	2300      	movs	r3, #0
 80004be:	9309      	str	r3, [sp, #36]	; 0x24
 80004c0:	2300      	movs	r3, #0
 80004c2:	9308      	str	r3, [sp, #32]
 80004c4:	2300      	movs	r3, #0
 80004c6:	9307      	str	r3, [sp, #28]
 80004c8:	2300      	movs	r3, #0
 80004ca:	9306      	str	r3, [sp, #24]
 80004cc:	2300      	movs	r3, #0
 80004ce:	9305      	str	r3, [sp, #20]
 80004d0:	2300      	movs	r3, #0
 80004d2:	9304      	str	r3, [sp, #16]
 80004d4:	2300      	movs	r3, #0
 80004d6:	9303      	str	r3, [sp, #12]
 80004d8:	2300      	movs	r3, #0
 80004da:	9302      	str	r3, [sp, #8]
 80004dc:	2300      	movs	r3, #0
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2300      	movs	r3, #0
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2300      	movs	r3, #0
 80004e6:	2204      	movs	r2, #4
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff fef5 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80004ee:	4603      	mov	r3, r0
 80004f0:	73fb      	strb	r3, [r7, #15]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                             /* qspi write read */
        if (res != 0)                                                                 /* check result */
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d005      	beq.n	8000504 <w25qxx_set_address_mode+0x140>
        {
            handle->debug_print("w25qxx: set address mode failed.\n");                /* set address mode failed */
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <w25qxx_set_address_mode+0x154>)
 80004fe:	4798      	blx	r3
           
            return 1;                                                                 /* return error */
 8000500:	2301      	movs	r3, #1
 8000502:	e003      	b.n	800050c <w25qxx_set_address_mode+0x148>
        }
    }
    
    handle->address_mode = (uint8_t)mode;                                             /* set address mode */
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	78fa      	ldrb	r2, [r7, #3]
 8000508:	771a      	strb	r2, [r3, #28]
    
    return 0;                                                                         /* success return 0 */
 800050a:	2300      	movs	r3, #0
}
 800050c:	4618      	mov	r0, r3
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	080065c8 	.word	0x080065c8
 8000518:	080065f8 	.word	0x080065f8

0800051c <w25qxx_init>:
 *            - 7 reset failed
 *            - 8 set address mode failed
 * @note      none
 */
uint8_t w25qxx_init(w25qxx_handle_t *handle)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b092      	sub	sp, #72	; 0x48
 8000520:	af0c      	add	r7, sp, #48	; 0x30
 8000522:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t buf[4];
    uint8_t out[2];
    uint16_t id;
    
    if (handle == NULL)                                                                    /* check handle */
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d102      	bne.n	8000530 <w25qxx_init+0x14>
    {
        return 2;                                                                          /* return error */
 800052a:	2302      	movs	r3, #2
 800052c:	f000 bc0e 	b.w	8000d4c <w25qxx_init+0x830>
    }
    if (handle->debug_print == NULL)                                                       /* check debug_print */
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d102      	bne.n	800053e <w25qxx_init+0x22>
    {
        return 3;                                                                          /* return error */
 8000538:	2303      	movs	r3, #3
 800053a:	f000 bc07 	b.w	8000d4c <w25qxx_init+0x830>
    }
    if (handle->spi_qspi_init == NULL)                                                     /* check spi_qspi_init */
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d105      	bne.n	8000552 <w25qxx_init+0x36>
    {
        handle->debug_print("w25qxx: spi_qspi_init is null.\n");                           /* spi_qspi_init is null */
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4885      	ldr	r0, [pc, #532]	; (8000760 <w25qxx_init+0x244>)
 800054c:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800054e:	2303      	movs	r3, #3
 8000550:	e3fc      	b.n	8000d4c <w25qxx_init+0x830>
    }
    if (handle->spi_qspi_deinit == NULL)                                                   /* check spi_qspi_deinit */
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d105      	bne.n	8000566 <w25qxx_init+0x4a>
    {
        handle->debug_print("w25qxx: spi_qspi_deinit is null.\n");                         /* spi_qspi_deinit is null */
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4881      	ldr	r0, [pc, #516]	; (8000764 <w25qxx_init+0x248>)
 8000560:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8000562:	2303      	movs	r3, #3
 8000564:	e3f2      	b.n	8000d4c <w25qxx_init+0x830>
    }
    if (handle->spi_qspi_write_read == NULL)                                               /* check spi_qspi_write_read */
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d105      	bne.n	800057a <w25qxx_init+0x5e>
    {
        handle->debug_print("w25qxx: spi_qspi_write_read is null.\n");                     /* spi_qspi_write_read is null */
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	487d      	ldr	r0, [pc, #500]	; (8000768 <w25qxx_init+0x24c>)
 8000574:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8000576:	2303      	movs	r3, #3
 8000578:	e3e8      	b.n	8000d4c <w25qxx_init+0x830>
    }
    if (handle->delay_us == NULL)                                                          /* check delay_us */
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	691b      	ldr	r3, [r3, #16]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d105      	bne.n	800058e <w25qxx_init+0x72>
    {
        handle->debug_print("w25qxx: delay_us is null.\n");                                /* delay_us is null */
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4879      	ldr	r0, [pc, #484]	; (800076c <w25qxx_init+0x250>)
 8000588:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800058a:	2303      	movs	r3, #3
 800058c:	e3de      	b.n	8000d4c <w25qxx_init+0x830>
    }
    if (handle->delay_ms == NULL)                                                          /* check delay_ms */
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d105      	bne.n	80005a2 <w25qxx_init+0x86>
    {
        handle->debug_print("w25qxx: delay_ms is null.\n");                                /* delay_ms is null */
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4875      	ldr	r0, [pc, #468]	; (8000770 <w25qxx_init+0x254>)
 800059c:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800059e:	2303      	movs	r3, #3
 80005a0:	e3d4      	b.n	8000d4c <w25qxx_init+0x830>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                          /* spi interface */
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	f040 81cf 	bne.w	800094c <w25qxx_init+0x430>
    {
        res = handle->spi_qspi_init();                                                     /* spi init */
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4798      	blx	r3
 80005b4:	4603      	mov	r3, r0
 80005b6:	75fb      	strb	r3, [r7, #23]
        if (res != 0)                                                                      /* check result */
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d005      	beq.n	80005ca <w25qxx_init+0xae>
        {
            handle->debug_print("w25qxx: spi init failed.\n");                             /* spi init failed */
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	486c      	ldr	r0, [pc, #432]	; (8000774 <w25qxx_init+0x258>)
 80005c4:	4798      	blx	r3
           
            return 1;                                                                      /* return error */
 80005c6:	2301      	movs	r3, #1
 80005c8:	e3c0      	b.n	8000d4c <w25qxx_init+0x830>
        }
        if (handle->dual_quad_spi_enable != 0)                                             /* enable dual quad spi */
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7fdb      	ldrb	r3, [r3, #31]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	f000 810e 	beq.w	80007f0 <w25qxx_init+0x2d4>
        {
            res = a_w25qxx_qspi_write_read(handle,
 80005d4:	2301      	movs	r3, #1
 80005d6:	930a      	str	r3, [sp, #40]	; 0x28
 80005d8:	2301      	movs	r3, #1
 80005da:	9309      	str	r3, [sp, #36]	; 0x24
 80005dc:	f107 030a 	add.w	r3, r7, #10
 80005e0:	9308      	str	r3, [sp, #32]
 80005e2:	2300      	movs	r3, #0
 80005e4:	9307      	str	r3, [sp, #28]
 80005e6:	2300      	movs	r3, #0
 80005e8:	9306      	str	r3, [sp, #24]
 80005ea:	2318      	movs	r3, #24
 80005ec:	9305      	str	r3, [sp, #20]
 80005ee:	2300      	movs	r3, #0
 80005f0:	9304      	str	r3, [sp, #16]
 80005f2:	2300      	movs	r3, #0
 80005f4:	9303      	str	r3, [sp, #12]
 80005f6:	2300      	movs	r3, #0
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2300      	movs	r3, #0
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2300      	movs	r3, #0
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	2201      	movs	r2, #1
 8000606:	21ab      	movs	r1, #171	; 0xab
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff fe65 	bl	80002d8 <a_w25qxx_qspi_write_read>
 800060e:	4603      	mov	r3, r0
 8000610:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_RELEASE_POWER_DOWN, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           3 * 8, NULL, 0x00,
                                          (uint8_t *)&id, 1, 1);                           /* spi write read */
            if (res != 0)                                                                  /* check result */
 8000612:	7dfb      	ldrb	r3, [r7, #23]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d008      	beq.n	800062a <w25qxx_init+0x10e>
            {
                handle->debug_print("w25qxx: release power down failed.\n");               /* release power down failed */
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4856      	ldr	r0, [pc, #344]	; (8000778 <w25qxx_init+0x25c>)
 800061e:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 8000626:	2301      	movs	r3, #1
 8000628:	e390      	b.n	8000d4c <w25qxx_init+0x830>
            }
            res = a_w25qxx_qspi_write_read(handle,
 800062a:	2300      	movs	r3, #0
 800062c:	930a      	str	r3, [sp, #40]	; 0x28
 800062e:	2300      	movs	r3, #0
 8000630:	9309      	str	r3, [sp, #36]	; 0x24
 8000632:	2300      	movs	r3, #0
 8000634:	9308      	str	r3, [sp, #32]
 8000636:	2300      	movs	r3, #0
 8000638:	9307      	str	r3, [sp, #28]
 800063a:	2300      	movs	r3, #0
 800063c:	9306      	str	r3, [sp, #24]
 800063e:	2300      	movs	r3, #0
 8000640:	9305      	str	r3, [sp, #20]
 8000642:	2300      	movs	r3, #0
 8000644:	9304      	str	r3, [sp, #16]
 8000646:	2300      	movs	r3, #0
 8000648:	9303      	str	r3, [sp, #12]
 800064a:	2300      	movs	r3, #0
 800064c:	9302      	str	r3, [sp, #8]
 800064e:	2300      	movs	r3, #0
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2300      	movs	r3, #0
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2300      	movs	r3, #0
 8000658:	2201      	movs	r2, #1
 800065a:	2166      	movs	r1, #102	; 0x66
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff fe3b 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000662:	4603      	mov	r3, r0
 8000664:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_ENABLE_RESET, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 8000666:	7dfb      	ldrb	r3, [r7, #23]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <w25qxx_init+0x162>
            {
                handle->debug_print("w25qxx: enable reset failed.\n");                     /* enable reset failed */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4842      	ldr	r0, [pc, #264]	; (800077c <w25qxx_init+0x260>)
 8000672:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 800067a:	2307      	movs	r3, #7
 800067c:	e366      	b.n	8000d4c <w25qxx_init+0x830>
            }
            res = a_w25qxx_qspi_write_read(handle,
 800067e:	2300      	movs	r3, #0
 8000680:	930a      	str	r3, [sp, #40]	; 0x28
 8000682:	2300      	movs	r3, #0
 8000684:	9309      	str	r3, [sp, #36]	; 0x24
 8000686:	2300      	movs	r3, #0
 8000688:	9308      	str	r3, [sp, #32]
 800068a:	2300      	movs	r3, #0
 800068c:	9307      	str	r3, [sp, #28]
 800068e:	2300      	movs	r3, #0
 8000690:	9306      	str	r3, [sp, #24]
 8000692:	2300      	movs	r3, #0
 8000694:	9305      	str	r3, [sp, #20]
 8000696:	2300      	movs	r3, #0
 8000698:	9304      	str	r3, [sp, #16]
 800069a:	2300      	movs	r3, #0
 800069c:	9303      	str	r3, [sp, #12]
 800069e:	2300      	movs	r3, #0
 80006a0:	9302      	str	r3, [sp, #8]
 80006a2:	2300      	movs	r3, #0
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2300      	movs	r3, #0
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2300      	movs	r3, #0
 80006ac:	2201      	movs	r2, #1
 80006ae:	2199      	movs	r1, #153	; 0x99
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff fe11 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80006b6:	4603      	mov	r3, r0
 80006b8:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_RESET_DEVICE, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d008      	beq.n	80006d2 <w25qxx_init+0x1b6>
            {
                handle->debug_print("w25qxx: reset device failed.\n");                     /* reset device failed */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	482e      	ldr	r0, [pc, #184]	; (8000780 <w25qxx_init+0x264>)
 80006c6:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 80006ce:	2307      	movs	r3, #7
 80006d0:	e33c      	b.n	8000d4c <w25qxx_init+0x830>
            }
            handle->delay_ms(10);                                                          /* delay 10 ms */
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	200a      	movs	r0, #10
 80006d8:	4798      	blx	r3
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_MANUFACTURER, 1,
 80006da:	2301      	movs	r3, #1
 80006dc:	930a      	str	r3, [sp, #40]	; 0x28
 80006de:	2302      	movs	r3, #2
 80006e0:	9309      	str	r3, [sp, #36]	; 0x24
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	9308      	str	r3, [sp, #32]
 80006e8:	2300      	movs	r3, #0
 80006ea:	9307      	str	r3, [sp, #28]
 80006ec:	2300      	movs	r3, #0
 80006ee:	9306      	str	r3, [sp, #24]
 80006f0:	2300      	movs	r3, #0
 80006f2:	9305      	str	r3, [sp, #20]
 80006f4:	2300      	movs	r3, #0
 80006f6:	9304      	str	r3, [sp, #16]
 80006f8:	2300      	movs	r3, #0
 80006fa:	9303      	str	r3, [sp, #12]
 80006fc:	2300      	movs	r3, #0
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	2303      	movs	r3, #3
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2301      	movs	r3, #1
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	2201      	movs	r2, #1
 800070c:	2190      	movs	r1, #144	; 0x90
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff fde2 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000714:	4603      	mov	r3, r0
 8000716:	75fb      	strb	r3, [r7, #23]
                                           0x00000000, 1, 3,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                          (uint8_t *)out, 2, 1);                           /* qspi write read */
            if (res != 0)                                                                  /* check result */
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d008      	beq.n	8000730 <w25qxx_init+0x214>
            {
                handle->debug_print("w25qxx: get manufacturer device id failed.\n");       /* get manufacturer device id failed */
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <w25qxx_init+0x268>)
 8000724:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 800072c:	2301      	movs	r3, #1
 800072e:	e30d      	b.n	8000d4c <w25qxx_init+0x830>
            }
            id = (uint16_t)out[0] << 8 | out[1];                                           /* set id */
 8000730:	7b3b      	ldrb	r3, [r7, #12]
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	b21a      	sxth	r2, r3
 8000736:	7b7b      	ldrb	r3, [r7, #13]
 8000738:	b21b      	sxth	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b21b      	sxth	r3, r3
 800073e:	b29b      	uxth	r3, r3
 8000740:	817b      	strh	r3, [r7, #10]
            if (id != handle->type)                                                        /* check id */
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	8b5a      	ldrh	r2, [r3, #26]
 8000746:	897b      	ldrh	r3, [r7, #10]
 8000748:	429a      	cmp	r2, r3
 800074a:	d01f      	beq.n	800078c <w25qxx_init+0x270>
            {
                handle->debug_print("w25qxx: id is invalid.\n");                           /* id is invalid */
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <w25qxx_init+0x26c>)
 8000752:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	4798      	blx	r3
                
                return 6;                                                                  /* return error */
 800075a:	2306      	movs	r3, #6
 800075c:	e2f6      	b.n	8000d4c <w25qxx_init+0x830>
 800075e:	bf00      	nop
 8000760:	08006fdc 	.word	0x08006fdc
 8000764:	08006ffc 	.word	0x08006ffc
 8000768:	08007020 	.word	0x08007020
 800076c:	08007048 	.word	0x08007048
 8000770:	08007064 	.word	0x08007064
 8000774:	08007080 	.word	0x08007080
 8000778:	0800686c 	.word	0x0800686c
 800077c:	08006ac4 	.word	0x08006ac4
 8000780:	08006ae4 	.word	0x08006ae4
 8000784:	08006890 	.word	0x08006890
 8000788:	0800709c 	.word	0x0800709c
            }
            if (handle->type >= W25Q256)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	8b5b      	ldrh	r3, [r3, #26]
 8000790:	f64e 7217 	movw	r2, #61207	; 0xef17
 8000794:	4293      	cmp	r3, r2
 8000796:	f240 82d2 	bls.w	8000d3e <w25qxx_init+0x822>
            {
                res = a_w25qxx_qspi_write_read(handle, 0xE9, 1,
 800079a:	2300      	movs	r3, #0
 800079c:	930a      	str	r3, [sp, #40]	; 0x28
 800079e:	2300      	movs	r3, #0
 80007a0:	9309      	str	r3, [sp, #36]	; 0x24
 80007a2:	2300      	movs	r3, #0
 80007a4:	9308      	str	r3, [sp, #32]
 80007a6:	2300      	movs	r3, #0
 80007a8:	9307      	str	r3, [sp, #28]
 80007aa:	2300      	movs	r3, #0
 80007ac:	9306      	str	r3, [sp, #24]
 80007ae:	2300      	movs	r3, #0
 80007b0:	9305      	str	r3, [sp, #20]
 80007b2:	2300      	movs	r3, #0
 80007b4:	9304      	str	r3, [sp, #16]
 80007b6:	2300      	movs	r3, #0
 80007b8:	9303      	str	r3, [sp, #12]
 80007ba:	2300      	movs	r3, #0
 80007bc:	9302      	str	r3, [sp, #8]
 80007be:	2300      	movs	r3, #0
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	2300      	movs	r3, #0
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2300      	movs	r3, #0
 80007c8:	2201      	movs	r2, #1
 80007ca:	21e9      	movs	r1, #233	; 0xe9
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fd83 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80007d2:	4603      	mov	r3, r0
 80007d4:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0, 0,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0x00,
                                               NULL, 0, 0);                                /* qspi write read */
                if (res != 0)                                                              /* check result */
 80007d6:	7dfb      	ldrb	r3, [r7, #23]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f000 82b0 	beq.w	8000d3e <w25qxx_init+0x822>
                {
                    handle->debug_print("w25qxx: enter 3 byte mode failed.\n");            /* enter 3 byte mode failed */
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	48a1      	ldr	r0, [pc, #644]	; (8000a68 <w25qxx_init+0x54c>)
 80007e4:	4798      	blx	r3
                    (void)handle->spi_qspi_deinit();                                       /** deinit */
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	4798      	blx	r3
                    
                    return 1;                                                              /* return error */
 80007ec:	2301      	movs	r3, #1
 80007ee:	e2ad      	b.n	8000d4c <w25qxx_init+0x830>
                }
            }
        }
        else                                                                               /* single spi */
        {
            buf[0] = W25QXX_COMMAND_RELEASE_POWER_DOWN;                                    /* release power down command */
 80007f0:	23ab      	movs	r3, #171	; 0xab
 80007f2:	743b      	strb	r3, [r7, #16]
            buf[1] = 0xFF;                                                                 /* dummy */
 80007f4:	23ff      	movs	r3, #255	; 0xff
 80007f6:	747b      	strb	r3, [r7, #17]
            buf[2] = 0xFF;                                                                 /* dummy */
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	74bb      	strb	r3, [r7, #18]
            buf[3] = 0xFF;                                                                 /* dummy */
 80007fc:	23ff      	movs	r3, #255	; 0xff
 80007fe:	74fb      	strb	r3, [r7, #19]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 4,
 8000800:	f107 030a 	add.w	r3, r7, #10
 8000804:	f107 0110 	add.w	r1, r7, #16
 8000808:	2201      	movs	r2, #1
 800080a:	9200      	str	r2, [sp, #0]
 800080c:	2204      	movs	r2, #4
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fd36 	bl	8000280 <a_w25qxx_spi_write_read>
 8000814:	4603      	mov	r3, r0
 8000816:	75fb      	strb	r3, [r7, #23]
                                         (uint8_t *)&id, 1);                               /* spi write read */
            if (res != 0)                                                                  /* check result */
 8000818:	7dfb      	ldrb	r3, [r7, #23]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d008      	beq.n	8000830 <w25qxx_init+0x314>
            {
                handle->debug_print("w25qxx: release power down failed.\n");               /* release power down failed */
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	4892      	ldr	r0, [pc, #584]	; (8000a6c <w25qxx_init+0x550>)
 8000824:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 800082c:	2301      	movs	r3, #1
 800082e:	e28d      	b.n	8000d4c <w25qxx_init+0x830>
            }
            buf[0] = W25QXX_COMMAND_ENABLE_RESET;                                          /* enable reset command */
 8000830:	2366      	movs	r3, #102	; 0x66
 8000832:	743b      	strb	r3, [r7, #16]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);             /* spi write read */
 8000834:	f107 0110 	add.w	r1, r7, #16
 8000838:	2300      	movs	r3, #0
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2300      	movs	r3, #0
 800083e:	2201      	movs	r2, #1
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fd1d 	bl	8000280 <a_w25qxx_spi_write_read>
 8000846:	4603      	mov	r3, r0
 8000848:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                  /* check result */
 800084a:	7dfb      	ldrb	r3, [r7, #23]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d008      	beq.n	8000862 <w25qxx_init+0x346>
            {
                handle->debug_print("w25qxx: enable reset failed.\n");                     /* enable reset failed */
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4886      	ldr	r0, [pc, #536]	; (8000a70 <w25qxx_init+0x554>)
 8000856:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 800085e:	2307      	movs	r3, #7
 8000860:	e274      	b.n	8000d4c <w25qxx_init+0x830>
            }
            buf[0] = W25QXX_COMMAND_RESET_DEVICE;                                          /* reset device command */
 8000862:	2399      	movs	r3, #153	; 0x99
 8000864:	743b      	strb	r3, [r7, #16]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);             /* spi write read */
 8000866:	f107 0110 	add.w	r1, r7, #16
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2300      	movs	r3, #0
 8000870:	2201      	movs	r2, #1
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff fd04 	bl	8000280 <a_w25qxx_spi_write_read>
 8000878:	4603      	mov	r3, r0
 800087a:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                  /* check result */
 800087c:	7dfb      	ldrb	r3, [r7, #23]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d008      	beq.n	8000894 <w25qxx_init+0x378>
            {
                handle->debug_print("w25qxx: reset device failed.\n");                     /* reset device failed */
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	487b      	ldr	r0, [pc, #492]	; (8000a74 <w25qxx_init+0x558>)
 8000888:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 8000890:	2307      	movs	r3, #7
 8000892:	e25b      	b.n	8000d4c <w25qxx_init+0x830>
            }
            handle->delay_ms(10);                                                          /* delay 10 ms */
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	200a      	movs	r0, #10
 800089a:	4798      	blx	r3
            buf[0] = W25QXX_COMMAND_READ_MANUFACTURER;                                     /* read manufacturer command */
 800089c:	2390      	movs	r3, #144	; 0x90
 800089e:	743b      	strb	r3, [r7, #16]
            buf[1] = 0x00;                                                                 /* dummy */
 80008a0:	2300      	movs	r3, #0
 80008a2:	747b      	strb	r3, [r7, #17]
            buf[2] = 0x00;                                                                 /* dummy */
 80008a4:	2300      	movs	r3, #0
 80008a6:	74bb      	strb	r3, [r7, #18]
            buf[3] = 0x00;                                                                 /* dummy */
 80008a8:	2300      	movs	r3, #0
 80008aa:	74fb      	strb	r3, [r7, #19]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 4,
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	f107 0110 	add.w	r1, r7, #16
 80008b4:	2202      	movs	r2, #2
 80008b6:	9200      	str	r2, [sp, #0]
 80008b8:	2204      	movs	r2, #4
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fce0 	bl	8000280 <a_w25qxx_spi_write_read>
 80008c0:	4603      	mov	r3, r0
 80008c2:	75fb      	strb	r3, [r7, #23]
                                         (uint8_t *)out, 2);                               /* spi write read */
            if (res != 0)                                                                  /* check result */
 80008c4:	7dfb      	ldrb	r3, [r7, #23]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d008      	beq.n	80008dc <w25qxx_init+0x3c0>
            {
                handle->debug_print("w25qxx: get manufacturer device id failed.\n");       /* get manufacturer device id failed */
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	486a      	ldr	r0, [pc, #424]	; (8000a78 <w25qxx_init+0x55c>)
 80008d0:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	4798      	blx	r3
                
                return 4;                                                                  /* return error */
 80008d8:	2304      	movs	r3, #4
 80008da:	e237      	b.n	8000d4c <w25qxx_init+0x830>
            }
            id = (uint16_t)out[0] << 8 | out[1];                                           /* set id */
 80008dc:	7b3b      	ldrb	r3, [r7, #12]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b21a      	sxth	r2, r3
 80008e2:	7b7b      	ldrb	r3, [r7, #13]
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b21b      	sxth	r3, r3
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	817b      	strh	r3, [r7, #10]
            if (id != handle->type)                                                        /* check id */
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	8b5a      	ldrh	r2, [r3, #26]
 80008f2:	897b      	ldrh	r3, [r7, #10]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d008      	beq.n	800090a <w25qxx_init+0x3ee>
            {
                handle->debug_print("w25qxx: id is invalid.\n");                           /* id is invalid */
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	485f      	ldr	r0, [pc, #380]	; (8000a7c <w25qxx_init+0x560>)
 80008fe:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4798      	blx	r3
                
                return 6;                                                                  /* return error */
 8000906:	2306      	movs	r3, #6
 8000908:	e220      	b.n	8000d4c <w25qxx_init+0x830>
            }
            if (handle->type >= W25Q256)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	8b5b      	ldrh	r3, [r3, #26]
 800090e:	f64e 7217 	movw	r2, #61207	; 0xef17
 8000912:	4293      	cmp	r3, r2
 8000914:	f240 8213 	bls.w	8000d3e <w25qxx_init+0x822>
            {
                buf[0] = 0xE9;                                                             /* 3 byte mode */
 8000918:	23e9      	movs	r3, #233	; 0xe9
 800091a:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);         /* spi write read */
 800091c:	f107 0110 	add.w	r1, r7, #16
 8000920:	2300      	movs	r3, #0
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2300      	movs	r3, #0
 8000926:	2201      	movs	r2, #1
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fca9 	bl	8000280 <a_w25qxx_spi_write_read>
 800092e:	4603      	mov	r3, r0
 8000930:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                              /* check result */
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 8202 	beq.w	8000d3e <w25qxx_init+0x822>
                {
                    handle->debug_print("w25qxx: set address mode failed.\n");             /* set address mode failed */
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4850      	ldr	r0, [pc, #320]	; (8000a80 <w25qxx_init+0x564>)
 8000940:	4798      	blx	r3
                    (void)handle->spi_qspi_deinit();                                       /** deinit */
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	4798      	blx	r3
                    
                    return 8;                                                              /* return error */
 8000948:	2308      	movs	r3, #8
 800094a:	e1ff      	b.n	8000d4c <w25qxx_init+0x830>
            }
        }
    }
    else
    {
        res = handle->spi_qspi_init();                                                     /* qspi init */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4798      	blx	r3
 8000952:	4603      	mov	r3, r0
 8000954:	75fb      	strb	r3, [r7, #23]
        if (res != 0)                                                                      /* check result */
 8000956:	7dfb      	ldrb	r3, [r7, #23]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d005      	beq.n	8000968 <w25qxx_init+0x44c>
        {
            handle->debug_print("w25qxx: qspi init failed.\n");                            /* qspi init failed */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4848      	ldr	r0, [pc, #288]	; (8000a84 <w25qxx_init+0x568>)
 8000962:	4798      	blx	r3
           
            return 1;                                                                      /* return error */
 8000964:	2301      	movs	r3, #1
 8000966:	e1f1      	b.n	8000d4c <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle,
 8000968:	2301      	movs	r3, #1
 800096a:	930a      	str	r3, [sp, #40]	; 0x28
 800096c:	2301      	movs	r3, #1
 800096e:	9309      	str	r3, [sp, #36]	; 0x24
 8000970:	f107 030a 	add.w	r3, r7, #10
 8000974:	9308      	str	r3, [sp, #32]
 8000976:	2300      	movs	r3, #0
 8000978:	9307      	str	r3, [sp, #28]
 800097a:	2300      	movs	r3, #0
 800097c:	9306      	str	r3, [sp, #24]
 800097e:	2318      	movs	r3, #24
 8000980:	9305      	str	r3, [sp, #20]
 8000982:	2300      	movs	r3, #0
 8000984:	9304      	str	r3, [sp, #16]
 8000986:	2300      	movs	r3, #0
 8000988:	9303      	str	r3, [sp, #12]
 800098a:	2300      	movs	r3, #0
 800098c:	9302      	str	r3, [sp, #8]
 800098e:	2300      	movs	r3, #0
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	2300      	movs	r3, #0
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	2201      	movs	r2, #1
 800099a:	21ab      	movs	r1, #171	; 0xab
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff fc9b 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80009a2:	4603      	mov	r3, r0
 80009a4:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_RELEASE_POWER_DOWN, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       3 * 8, NULL, 0x00,
                                      (uint8_t *)&id, 1, 1);                               /* spi write read */
        if (res != 0)                                                                      /* check result */
 80009a6:	7dfb      	ldrb	r3, [r7, #23]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d008      	beq.n	80009be <w25qxx_init+0x4a2>
        {
            handle->debug_print("w25qxx: release power down failed.\n");                   /* release power down failed */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	482e      	ldr	r0, [pc, #184]	; (8000a6c <w25qxx_init+0x550>)
 80009b2:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	4798      	blx	r3
            
            return 1;                                                                      /* return error */
 80009ba:	2301      	movs	r3, #1
 80009bc:	e1c6      	b.n	8000d4c <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle,
 80009be:	2300      	movs	r3, #0
 80009c0:	930a      	str	r3, [sp, #40]	; 0x28
 80009c2:	2300      	movs	r3, #0
 80009c4:	9309      	str	r3, [sp, #36]	; 0x24
 80009c6:	2300      	movs	r3, #0
 80009c8:	9308      	str	r3, [sp, #32]
 80009ca:	2300      	movs	r3, #0
 80009cc:	9307      	str	r3, [sp, #28]
 80009ce:	2300      	movs	r3, #0
 80009d0:	9306      	str	r3, [sp, #24]
 80009d2:	2300      	movs	r3, #0
 80009d4:	9305      	str	r3, [sp, #20]
 80009d6:	2300      	movs	r3, #0
 80009d8:	9304      	str	r3, [sp, #16]
 80009da:	2300      	movs	r3, #0
 80009dc:	9303      	str	r3, [sp, #12]
 80009de:	2300      	movs	r3, #0
 80009e0:	9302      	str	r3, [sp, #8]
 80009e2:	2300      	movs	r3, #0
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	2300      	movs	r3, #0
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2300      	movs	r3, #0
 80009ec:	2201      	movs	r2, #1
 80009ee:	2166      	movs	r1, #102	; 0x66
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fc71 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80009f6:	4603      	mov	r3, r0
 80009f8:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_ENABLE_RESET, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                  /* spi write read */
        if (res != 0)                                                                      /* check result */
 80009fa:	7dfb      	ldrb	r3, [r7, #23]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d008      	beq.n	8000a12 <w25qxx_init+0x4f6>
        {
            handle->debug_print("w25qxx: enable reset failed.\n");                         /* enable reset failed */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	481a      	ldr	r0, [pc, #104]	; (8000a70 <w25qxx_init+0x554>)
 8000a06:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	4798      	blx	r3
            
            return 7;                                                                      /* return error */
 8000a0e:	2307      	movs	r3, #7
 8000a10:	e19c      	b.n	8000d4c <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle,
 8000a12:	2300      	movs	r3, #0
 8000a14:	930a      	str	r3, [sp, #40]	; 0x28
 8000a16:	2300      	movs	r3, #0
 8000a18:	9309      	str	r3, [sp, #36]	; 0x24
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	9308      	str	r3, [sp, #32]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	9307      	str	r3, [sp, #28]
 8000a22:	2300      	movs	r3, #0
 8000a24:	9306      	str	r3, [sp, #24]
 8000a26:	2300      	movs	r3, #0
 8000a28:	9305      	str	r3, [sp, #20]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9304      	str	r3, [sp, #16]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	9303      	str	r3, [sp, #12]
 8000a32:	2300      	movs	r3, #0
 8000a34:	9302      	str	r3, [sp, #8]
 8000a36:	2300      	movs	r3, #0
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2201      	movs	r2, #1
 8000a42:	2199      	movs	r1, #153	; 0x99
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fc47 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_RESET_DEVICE, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                  /* spi write read */
        if (res != 0)                                                                      /* check result */
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d019      	beq.n	8000a88 <w25qxx_init+0x56c>
        {
            handle->debug_print("w25qxx: reset device failed.\n");                         /* reset device failed */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <w25qxx_init+0x558>)
 8000a5a:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4798      	blx	r3
            
            return 7;                                                                      /* return error */
 8000a62:	2307      	movs	r3, #7
 8000a64:	e172      	b.n	8000d4c <w25qxx_init+0x830>
 8000a66:	bf00      	nop
 8000a68:	080070b4 	.word	0x080070b4
 8000a6c:	0800686c 	.word	0x0800686c
 8000a70:	08006ac4 	.word	0x08006ac4
 8000a74:	08006ae4 	.word	0x08006ae4
 8000a78:	08006890 	.word	0x08006890
 8000a7c:	0800709c 	.word	0x0800709c
 8000a80:	080065f8 	.word	0x080065f8
 8000a84:	080070d8 	.word	0x080070d8
        }
        handle->delay_ms(10);                                                              /* delay 10 ms */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	200a      	movs	r0, #10
 8000a8e:	4798      	blx	r3
        res = a_w25qxx_qspi_write_read(handle,
 8000a90:	2301      	movs	r3, #1
 8000a92:	930a      	str	r3, [sp, #40]	; 0x28
 8000a94:	2301      	movs	r3, #1
 8000a96:	9309      	str	r3, [sp, #36]	; 0x24
 8000a98:	f107 0316 	add.w	r3, r7, #22
 8000a9c:	9308      	str	r3, [sp, #32]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9307      	str	r3, [sp, #28]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9306      	str	r3, [sp, #24]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9305      	str	r3, [sp, #20]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	9304      	str	r3, [sp, #16]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9303      	str	r3, [sp, #12]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9302      	str	r3, [sp, #8]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	2300      	movs	r3, #0
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2135      	movs	r1, #53	; 0x35
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fc07 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000aca:	4603      	mov	r3, r0
 8000acc:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_READ_STATUS_REG2, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                      (uint8_t *)&status, 1, 1);                           /* spi write read */
        if (res != 0)                                                                      /* check result */
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d008      	beq.n	8000ae6 <w25qxx_init+0x5ca>
        {
            handle->debug_print("w25qxx: read status 2 failed.\n");                        /* read status 2 failed */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	489e      	ldr	r0, [pc, #632]	; (8000d54 <w25qxx_init+0x838>)
 8000ada:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4798      	blx	r3
            
            return 5;                                                                      /* return error */
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	e132      	b.n	8000d4c <w25qxx_init+0x830>
        }
        if ((status & 0x02) == 0)                                                          /* check status */
 8000ae6:	7dbb      	ldrb	r3, [r7, #22]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d153      	bne.n	8000b98 <w25qxx_init+0x67c>
        {
            res = a_w25qxx_qspi_write_read(handle,
 8000af0:	2300      	movs	r3, #0
 8000af2:	930a      	str	r3, [sp, #40]	; 0x28
 8000af4:	2300      	movs	r3, #0
 8000af6:	9309      	str	r3, [sp, #36]	; 0x24
 8000af8:	2300      	movs	r3, #0
 8000afa:	9308      	str	r3, [sp, #32]
 8000afc:	2300      	movs	r3, #0
 8000afe:	9307      	str	r3, [sp, #28]
 8000b00:	2300      	movs	r3, #0
 8000b02:	9306      	str	r3, [sp, #24]
 8000b04:	2300      	movs	r3, #0
 8000b06:	9305      	str	r3, [sp, #20]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9304      	str	r3, [sp, #16]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9303      	str	r3, [sp, #12]
 8000b10:	2300      	movs	r3, #0
 8000b12:	9302      	str	r3, [sp, #8]
 8000b14:	2300      	movs	r3, #0
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2150      	movs	r1, #80	; 0x50
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fbd8 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_VOLATILE_SR_WRITE_ENABLE, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 8000b2c:	7dfb      	ldrb	r3, [r7, #23]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d008      	beq.n	8000b44 <w25qxx_init+0x628>
            {
                handle->debug_print("w25qxx: set sr write enable failed.\n");              /* set sr write enable failed */
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4888      	ldr	r0, [pc, #544]	; (8000d58 <w25qxx_init+0x83c>)
 8000b38:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	4798      	blx	r3
                
                return 5;                                                                  /* return error */
 8000b40:	2305      	movs	r3, #5
 8000b42:	e103      	b.n	8000d4c <w25qxx_init+0x830>
            }
            res = a_w25qxx_qspi_write_read(handle,
 8000b44:	2300      	movs	r3, #0
 8000b46:	930a      	str	r3, [sp, #40]	; 0x28
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9308      	str	r3, [sp, #32]
 8000b50:	2300      	movs	r3, #0
 8000b52:	9307      	str	r3, [sp, #28]
 8000b54:	2300      	movs	r3, #0
 8000b56:	9306      	str	r3, [sp, #24]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9305      	str	r3, [sp, #20]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9304      	str	r3, [sp, #16]
 8000b60:	2300      	movs	r3, #0
 8000b62:	9303      	str	r3, [sp, #12]
 8000b64:	2300      	movs	r3, #0
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2300      	movs	r3, #0
 8000b72:	2201      	movs	r2, #1
 8000b74:	2131      	movs	r1, #49	; 0x31
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff fbae 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_WRITE_STATUS_REG2, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d008      	beq.n	8000b98 <w25qxx_init+0x67c>
            {
                handle->debug_print("w25qxx: write status 2 failed.\n");                   /* write status 2 failed */
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4874      	ldr	r0, [pc, #464]	; (8000d5c <w25qxx_init+0x840>)
 8000b8c:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	4798      	blx	r3
                
                return 5;                                                                  /* return error */
 8000b94:	2305      	movs	r3, #5
 8000b96:	e0d9      	b.n	8000d4c <w25qxx_init+0x830>
            }
        }
        res = a_w25qxx_qspi_write_read(handle,
 8000b98:	2300      	movs	r3, #0
 8000b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9308      	str	r3, [sp, #32]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	9307      	str	r3, [sp, #28]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	9306      	str	r3, [sp, #24]
 8000bac:	2300      	movs	r3, #0
 8000bae:	9305      	str	r3, [sp, #20]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	9304      	str	r3, [sp, #16]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	9303      	str	r3, [sp, #12]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2138      	movs	r1, #56	; 0x38
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff fb84 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_ENTER_QSPI_MODE, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                  /* spi write read */
        if (res != 0)                                                                      /* check result */
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <w25qxx_init+0x6d0>
        {
            handle->debug_print("w25qxx: enter qspi failed.\n");                           /* enter qspi failed */
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4860      	ldr	r0, [pc, #384]	; (8000d60 <w25qxx_init+0x844>)
 8000be0:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4798      	blx	r3
            
            return 5;                                                                      /* return error */
 8000be8:	2305      	movs	r3, #5
 8000bea:	e0af      	b.n	8000d4c <w25qxx_init+0x830>
        }
        handle->delay_ms(10);                                                              /* delay 10 ms */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	4798      	blx	r3
        buf[0] = 3 << 4;                                                                   /* set 8 read dummy */
 8000bf4:	2330      	movs	r3, #48	; 0x30
 8000bf6:	743b      	strb	r3, [r7, #16]
        handle->param = buf[0];                                                            /* set param */
 8000bf8:	7c3a      	ldrb	r2, [r7, #16]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	775a      	strb	r2, [r3, #29]
        handle->dummy = 8;                                                                 /* set dummy */
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2208      	movs	r2, #8
 8000c02:	779a      	strb	r2, [r3, #30]
        res = a_w25qxx_qspi_write_read(handle, 0xC0, 4,
 8000c04:	2304      	movs	r3, #4
 8000c06:	930a      	str	r3, [sp, #40]	; 0x28
 8000c08:	2300      	movs	r3, #0
 8000c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9308      	str	r3, [sp, #32]
 8000c10:	2301      	movs	r3, #1
 8000c12:	9307      	str	r3, [sp, #28]
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	9306      	str	r3, [sp, #24]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	9305      	str	r3, [sp, #20]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9304      	str	r3, [sp, #16]
 8000c22:	2300      	movs	r3, #0
 8000c24:	9303      	str	r3, [sp, #12]
 8000c26:	2300      	movs	r3, #0
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	2300      	movs	r3, #0
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2300      	movs	r3, #0
 8000c34:	2204      	movs	r2, #4
 8000c36:	21c0      	movs	r1, #192	; 0xc0
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff fb4d 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	75fb      	strb	r3, [r7, #23]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0, (uint8_t *)buf, 1,
                                       NULL, 0x00, 4);                                     /* qspi write read */
        if (res != 0)                                                                      /* check result */
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d008      	beq.n	8000c5a <w25qxx_init+0x73e>
        {
            handle->debug_print("w25qxx: set read parameters failed.\n");                  /* set read parameters failed */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	4845      	ldr	r0, [pc, #276]	; (8000d64 <w25qxx_init+0x848>)
 8000c4e:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4798      	blx	r3
            
            return 5;                                                                      /* return error */
 8000c56:	2305      	movs	r3, #5
 8000c58:	e078      	b.n	8000d4c <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_MANUFACTURER, 4,
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8000c5e:	2302      	movs	r3, #2
 8000c60:	9309      	str	r3, [sp, #36]	; 0x24
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	9308      	str	r3, [sp, #32]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9307      	str	r3, [sp, #28]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9306      	str	r3, [sp, #24]
 8000c70:	2300      	movs	r3, #0
 8000c72:	9305      	str	r3, [sp, #20]
 8000c74:	2300      	movs	r3, #0
 8000c76:	9304      	str	r3, [sp, #16]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	9303      	str	r3, [sp, #12]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	9302      	str	r3, [sp, #8]
 8000c80:	2303      	movs	r3, #3
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	2304      	movs	r3, #4
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	2190      	movs	r1, #144	; 0x90
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fb22 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000c94:	4603      	mov	r3, r0
 8000c96:	75fb      	strb	r3, [r7, #23]
                                       0x00000000, 4, 3,
                                       0x00000000, 0x00, 0x00,
                                       0, NULL, 0x00,
                                      (uint8_t *)out, 2, 4);                               /* qspi write read */
        if (res != 0)                                                                      /* check result */
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d008      	beq.n	8000cb0 <w25qxx_init+0x794>
        {
            handle->debug_print("w25qxx: get manufacturer device id failed.\n");           /* get manufacturer device id failed */
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4831      	ldr	r0, [pc, #196]	; (8000d68 <w25qxx_init+0x84c>)
 8000ca4:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4798      	blx	r3
            
            return 1;                                                                      /* return error */
 8000cac:	2301      	movs	r3, #1
 8000cae:	e04d      	b.n	8000d4c <w25qxx_init+0x830>
        }
        id = (uint16_t)out[0] << 8 | out[1];                                               /* set id */
 8000cb0:	7b3b      	ldrb	r3, [r7, #12]
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	b21a      	sxth	r2, r3
 8000cb6:	7b7b      	ldrb	r3, [r7, #13]
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	817b      	strh	r3, [r7, #10]
        if (id != handle->type)                                                            /* check id */
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	8b5a      	ldrh	r2, [r3, #26]
 8000cc6:	897b      	ldrh	r3, [r7, #10]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d008      	beq.n	8000cde <w25qxx_init+0x7c2>
        {
            handle->debug_print("w25qxx: id is invalid.\n");                               /* id is invalid */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	4826      	ldr	r0, [pc, #152]	; (8000d6c <w25qxx_init+0x850>)
 8000cd2:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4798      	blx	r3
            
            return 6;                                                                      /* return error */
 8000cda:	2306      	movs	r3, #6
 8000cdc:	e036      	b.n	8000d4c <w25qxx_init+0x830>
        }
        if (handle->type >= W25Q256)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	8b5b      	ldrh	r3, [r3, #26]
 8000ce2:	f64e 7217 	movw	r2, #61207	; 0xef17
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d929      	bls.n	8000d3e <w25qxx_init+0x822>
        {
            res = a_w25qxx_qspi_write_read(handle, 0xE9, 4,
 8000cea:	2300      	movs	r3, #0
 8000cec:	930a      	str	r3, [sp, #40]	; 0x28
 8000cee:	2300      	movs	r3, #0
 8000cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	9308      	str	r3, [sp, #32]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9307      	str	r3, [sp, #28]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9306      	str	r3, [sp, #24]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9305      	str	r3, [sp, #20]
 8000d02:	2300      	movs	r3, #0
 8000d04:	9304      	str	r3, [sp, #16]
 8000d06:	2300      	movs	r3, #0
 8000d08:	9303      	str	r3, [sp, #12]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	2300      	movs	r3, #0
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2300      	movs	r3, #0
 8000d18:	2204      	movs	r2, #4
 8000d1a:	21e9      	movs	r1, #233	; 0xe9
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fadb 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000d22:	4603      	mov	r3, r0
 8000d24:	75fb      	strb	r3, [r7, #23]
                                           0x00000000, 0, 0,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0, 0);                                    /* qspi write read */
            if (res != 0)                                                                  /* check result */
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d008      	beq.n	8000d3e <w25qxx_init+0x822>
            {
                handle->debug_print("w25qxx: enter 3 byte mode failed.\n");                /* enter 3 byte mode failed */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	480f      	ldr	r0, [pc, #60]	; (8000d70 <w25qxx_init+0x854>)
 8000d32:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e006      	b.n	8000d4c <w25qxx_init+0x830>
            }
        }
    }
    handle->address_mode = W25QXX_ADDRESS_MODE_3_BYTE;                                     /* set address mode */
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	771a      	strb	r2, [r3, #28]
    handle->inited = 1;                                                                    /* initialize inited */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	761a      	strb	r2, [r3, #24]
    
    return 0;                                                                              /* success return 0 */
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	080070f4 	.word	0x080070f4
 8000d58:	08007114 	.word	0x08007114
 8000d5c:	0800713c 	.word	0x0800713c
 8000d60:	0800715c 	.word	0x0800715c
 8000d64:	08006a44 	.word	0x08006a44
 8000d68:	08006890 	.word	0x08006890
 8000d6c:	0800709c 	.word	0x0800709c
 8000d70:	080070b4 	.word	0x080070b4

08000d74 <w25qxx_deinit>:
 *            - 3 handle is not initialized
 *            - 4 power down failed
 * @note      none
 */
uint8_t w25qxx_deinit(w25qxx_handle_t *handle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b090      	sub	sp, #64	; 0x40
 8000d78:	af0c      	add	r7, sp, #48	; 0x30
 8000d7a:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t buf[1];
    
    if (handle == NULL)                                                            /* check handle */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <w25qxx_deinit+0x12>
    {
        return 2;                                                                  /* return error */
 8000d82:	2302      	movs	r3, #2
 8000d84:	e0ac      	b.n	8000ee0 <w25qxx_deinit+0x16c>
    }   
    if (handle->inited != 1)                                                       /* check handle initialization */
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7e1b      	ldrb	r3, [r3, #24]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d001      	beq.n	8000d92 <w25qxx_deinit+0x1e>
    {
        return 3;                                                                  /* return error */
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e0a6      	b.n	8000ee0 <w25qxx_deinit+0x16c>
    }

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                  /* spi interface */
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d140      	bne.n	8000e1e <w25qxx_deinit+0xaa>
    {
        if (handle->dual_quad_spi_enable != 0)                                     /* enable dual quad spi */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7fdb      	ldrb	r3, [r3, #31]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d026      	beq.n	8000df2 <w25qxx_deinit+0x7e>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_POWER_DOWN, 1,
 8000da4:	2300      	movs	r3, #0
 8000da6:	930a      	str	r3, [sp, #40]	; 0x28
 8000da8:	2300      	movs	r3, #0
 8000daa:	9309      	str	r3, [sp, #36]	; 0x24
 8000dac:	2300      	movs	r3, #0
 8000dae:	9308      	str	r3, [sp, #32]
 8000db0:	2300      	movs	r3, #0
 8000db2:	9307      	str	r3, [sp, #28]
 8000db4:	2300      	movs	r3, #0
 8000db6:	9306      	str	r3, [sp, #24]
 8000db8:	2300      	movs	r3, #0
 8000dba:	9305      	str	r3, [sp, #20]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9304      	str	r3, [sp, #16]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	9303      	str	r3, [sp, #12]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9302      	str	r3, [sp, #8]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	21b9      	movs	r1, #185	; 0xb9
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fa7e 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	73fb      	strb	r3, [r7, #15]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0x00, 0);                         /* spi write read */
            if (res != 0)                                                          /* check result */
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d06d      	beq.n	8000ec2 <w25qxx_deinit+0x14e>
            {
                handle->debug_print("w25qxx: power down failed.\n");               /* power down failed */
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	483f      	ldr	r0, [pc, #252]	; (8000ee8 <w25qxx_deinit+0x174>)
 8000dec:	4798      	blx	r3
               
                return 4;                                                          /* return error */
 8000dee:	2304      	movs	r3, #4
 8000df0:	e076      	b.n	8000ee0 <w25qxx_deinit+0x16c>
            }
        }
        else                                                                       /* single spi */
        {
            buf[0] = W25QXX_COMMAND_POWER_DOWN;                                    /* power down command */
 8000df2:	23b9      	movs	r3, #185	; 0xb9
 8000df4:	733b      	strb	r3, [r7, #12]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf,
 8000df6:	f107 010c 	add.w	r1, r7, #12
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	2201      	movs	r2, #1
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff fa3c 	bl	8000280 <a_w25qxx_spi_write_read>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]
                                          1, NULL, 0);                             /* spi write read */
            if (res != 0)                                                          /* check result */
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d057      	beq.n	8000ec2 <w25qxx_deinit+0x14e>
            {
                handle->debug_print("w25qxx: power down failed.\n");               /* power down failed */
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4834      	ldr	r0, [pc, #208]	; (8000ee8 <w25qxx_deinit+0x174>)
 8000e18:	4798      	blx	r3
               
                return 4;                                                          /* return error */
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	e060      	b.n	8000ee0 <w25qxx_deinit+0x16c>
            }
        }
    }
    else                                                                           /* qspi interface */
    {
        res = a_w25qxx_qspi_write_read(handle, 0xFF, 4,
 8000e1e:	2300      	movs	r3, #0
 8000e20:	930a      	str	r3, [sp, #40]	; 0x28
 8000e22:	2300      	movs	r3, #0
 8000e24:	9309      	str	r3, [sp, #36]	; 0x24
 8000e26:	2300      	movs	r3, #0
 8000e28:	9308      	str	r3, [sp, #32]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9307      	str	r3, [sp, #28]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9306      	str	r3, [sp, #24]
 8000e32:	2300      	movs	r3, #0
 8000e34:	9305      	str	r3, [sp, #20]
 8000e36:	2300      	movs	r3, #0
 8000e38:	9304      	str	r3, [sp, #16]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9303      	str	r3, [sp, #12]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	2300      	movs	r3, #0
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	21ff      	movs	r1, #255	; 0xff
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff fa41 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0, NULL, 0x00,
                                       NULL, 0x00, 0);                             /* spi write read */
        if (res != 0)                                                              /* check result */
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <w25qxx_deinit+0xf8>
        {
            handle->debug_print("w25qxx: exit qspi mode failed.\n");               /* exit qspi mode failed */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	4821      	ldr	r0, [pc, #132]	; (8000eec <w25qxx_deinit+0x178>)
 8000e66:	4798      	blx	r3
           
            return 1;                                                              /* return error */
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e039      	b.n	8000ee0 <w25qxx_deinit+0x16c>
        }
        handle->delay_ms(10);                                                      /* delay 10 ms */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	200a      	movs	r0, #10
 8000e72:	4798      	blx	r3
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_POWER_DOWN, 1,
 8000e74:	2300      	movs	r3, #0
 8000e76:	930a      	str	r3, [sp, #40]	; 0x28
 8000e78:	2300      	movs	r3, #0
 8000e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9308      	str	r3, [sp, #32]
 8000e80:	2300      	movs	r3, #0
 8000e82:	9307      	str	r3, [sp, #28]
 8000e84:	2300      	movs	r3, #0
 8000e86:	9306      	str	r3, [sp, #24]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9305      	str	r3, [sp, #20]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	9304      	str	r3, [sp, #16]
 8000e90:	2300      	movs	r3, #0
 8000e92:	9303      	str	r3, [sp, #12]
 8000e94:	2300      	movs	r3, #0
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	21b9      	movs	r1, #185	; 0xb9
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fa16 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000eac:	4603      	mov	r3, r0
 8000eae:	73fb      	strb	r3, [r7, #15]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0, NULL, 0x00,
                                       NULL, 0x00, 0);                             /* spi write read */
        if (res != 0)                                                              /* check result */
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <w25qxx_deinit+0x14e>
        {
            handle->debug_print("w25qxx: power down failed.\n");                   /* power down failed */
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <w25qxx_deinit+0x174>)
 8000ebc:	4798      	blx	r3
           
            return 4;                                                              /* return error */
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	e00e      	b.n	8000ee0 <w25qxx_deinit+0x16c>
        }
    }
    res = handle->spi_qspi_deinit();                                               /* qspi deinit */
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4798      	blx	r3
 8000ec8:	4603      	mov	r3, r0
 8000eca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d005      	beq.n	8000ede <w25qxx_deinit+0x16a>
    {
        handle->debug_print("w25qxx: spi or qspi deinit failed.\n");               /* spi or qspi deinit failed */
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <w25qxx_deinit+0x17c>)
 8000ed8:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <w25qxx_deinit+0x16c>
    }
    
    return 0;                                                                      /* success return 0 */
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	08006830 	.word	0x08006830
 8000eec:	0800684c 	.word	0x0800684c
 8000ef0:	08007178 	.word	0x08007178

08000ef4 <w25qxx_read>:
 *             - 3 handle is not initialized
 *             - 4 address mode is invalid
 * @note       none
 */
uint8_t w25qxx_read(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b092      	sub	sp, #72	; 0x48
 8000ef8:	af0c      	add	r7, sp, #48	; 0x30
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t buf[6];
    
    if (handle == NULL)                                                                                   /* check handle */
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <w25qxx_read+0x18>
    {
        return 2;                                                                                         /* return error */
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e22c      	b.n	8001366 <w25qxx_read+0x472>
    }   
    if (handle->inited != 1)                                                                              /* check handle initialization */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	7e1b      	ldrb	r3, [r3, #24]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d001      	beq.n	8000f18 <w25qxx_read+0x24>
    {
        return 3;                                                                                         /* return error */
 8000f14:	2303      	movs	r3, #3
 8000f16:	e226      	b.n	8001366 <w25qxx_read+0x472>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                         /* spi interface */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f040 8162 	bne.w	80011e8 <w25qxx_read+0x2f4>
    {
        if (handle->dual_quad_spi_enable != 0)                                                            /* enable dual quad spi */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	7fdb      	ldrb	r3, [r3, #31]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80be 	beq.w	80010aa <w25qxx_read+0x1b6>
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	7f1b      	ldrb	r3, [r3, #28]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f040 8081 	bne.w	800103a <w25qxx_read+0x146>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	8b5b      	ldrh	r3, [r3, #26]
 8000f3c:	f64e 7217 	movw	r2, #61207	; 0xef17
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d952      	bls.n	8000fea <w25qxx_read+0xf6>
                {
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 8000f44:	2300      	movs	r3, #0
 8000f46:	930a      	str	r3, [sp, #40]	; 0x28
 8000f48:	2300      	movs	r3, #0
 8000f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	9308      	str	r3, [sp, #32]
 8000f50:	2300      	movs	r3, #0
 8000f52:	9307      	str	r3, [sp, #28]
 8000f54:	2300      	movs	r3, #0
 8000f56:	9306      	str	r3, [sp, #24]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	9305      	str	r3, [sp, #20]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9304      	str	r3, [sp, #16]
 8000f60:	2300      	movs	r3, #0
 8000f62:	9303      	str	r3, [sp, #12]
 8000f64:	2300      	movs	r3, #0
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	2201      	movs	r2, #1
 8000f74:	2106      	movs	r1, #6
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f7ff f9ae 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                     /* qspi write read */
                    if (res != 0)                                                                         /* check result */
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d005      	beq.n	8000f92 <w25qxx_read+0x9e>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4893      	ldr	r0, [pc, #588]	; (80011d8 <w25qxx_read+0x2e4>)
 8000f8c:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e1e9      	b.n	8001366 <w25qxx_read+0x472>
                    }
                    buf[0] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	0e1b      	lsrs	r3, r3, #24
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9308      	str	r3, [sp, #32]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	9307      	str	r3, [sp, #28]
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	9306      	str	r3, [sp, #24]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9305      	str	r3, [sp, #20]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9304      	str	r3, [sp, #16]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	9303      	str	r3, [sp, #12]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	2201      	movs	r2, #1
 8000fcc:	21c5      	movs	r1, #197	; 0xc5
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff f982 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                        /* spi write read */
                    if (res != 0)                                                                         /* check result */
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <w25qxx_read+0xf6>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	487e      	ldr	r0, [pc, #504]	; (80011dc <w25qxx_read+0x2e8>)
 8000fe4:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e1bd      	b.n	8001366 <w25qxx_read+0x472>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 8000fea:	2301      	movs	r3, #1
 8000fec:	930a      	str	r3, [sp, #40]	; 0x28
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	9308      	str	r3, [sp, #32]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	9307      	str	r3, [sp, #28]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9306      	str	r3, [sp, #24]
 8000ffe:	2308      	movs	r3, #8
 8001000:	9305      	str	r3, [sp, #20]
 8001002:	2300      	movs	r3, #0
 8001004:	9304      	str	r3, [sp, #16]
 8001006:	2300      	movs	r3, #0
 8001008:	9303      	str	r3, [sp, #12]
 800100a:	2300      	movs	r3, #0
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2303      	movs	r3, #3
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	2301      	movs	r3, #1
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2201      	movs	r2, #1
 800101a:	210b      	movs	r1, #11
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f7ff f95b 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001022:	4603      	mov	r3, r0
 8001024:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,                                             /* spi write */
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 819b 	beq.w	8001364 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	486b      	ldr	r0, [pc, #428]	; (80011e0 <w25qxx_read+0x2ec>)
 8001034:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001036:	2301      	movs	r3, #1
 8001038:	e195      	b.n	8001366 <w25qxx_read+0x472>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	7f1b      	ldrb	r3, [r3, #28]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d12d      	bne.n	800109e <w25qxx_read+0x1aa>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	8b5b      	ldrh	r3, [r3, #26]
 8001046:	f64e 7217 	movw	r2, #61207	; 0xef17
 800104a:	4293      	cmp	r3, r2
 800104c:	d927      	bls.n	800109e <w25qxx_read+0x1aa>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 800104e:	2301      	movs	r3, #1
 8001050:	930a      	str	r3, [sp, #40]	; 0x28
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	9309      	str	r3, [sp, #36]	; 0x24
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	9308      	str	r3, [sp, #32]
 800105a:	2300      	movs	r3, #0
 800105c:	9307      	str	r3, [sp, #28]
 800105e:	2300      	movs	r3, #0
 8001060:	9306      	str	r3, [sp, #24]
 8001062:	2308      	movs	r3, #8
 8001064:	9305      	str	r3, [sp, #20]
 8001066:	2300      	movs	r3, #0
 8001068:	9304      	str	r3, [sp, #16]
 800106a:	2300      	movs	r3, #0
 800106c:	9303      	str	r3, [sp, #12]
 800106e:	2300      	movs	r3, #0
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	2304      	movs	r3, #4
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	2301      	movs	r3, #1
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	2201      	movs	r2, #1
 800107e:	210b      	movs	r1, #11
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f7ff f929 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001086:	4603      	mov	r3, r0
 8001088:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,                                             /* spi write */
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8169 	beq.w	8001364 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4852      	ldr	r0, [pc, #328]	; (80011e0 <w25qxx_read+0x2ec>)
 8001098:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 800109a:	2301      	movs	r3, #1
 800109c:	e163      	b.n	8001366 <w25qxx_read+0x472>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4850      	ldr	r0, [pc, #320]	; (80011e4 <w25qxx_read+0x2f0>)
 80010a4:	4798      	blx	r3
               
                return 4;                                                                                 /* return error */
 80010a6:	2304      	movs	r3, #4
 80010a8:	e15d      	b.n	8001366 <w25qxx_read+0x472>
            }
        }
        else                                                                                              /* single spi */
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	7f1b      	ldrb	r3, [r3, #28]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d159      	bne.n	8001166 <w25qxx_read+0x272>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8b5b      	ldrh	r3, [r3, #26]
 80010b6:	f64e 7217 	movw	r2, #61207	; 0xef17
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d92f      	bls.n	800111e <w25qxx_read+0x22a>
                {
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                 /* write enable command */
 80010be:	2306      	movs	r3, #6
 80010c0:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                    /* spi write read */
 80010c2:	f107 0110 	add.w	r1, r7, #16
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	2201      	movs	r2, #1
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff f8d6 	bl	8000280 <a_w25qxx_spi_write_read>
 80010d4:	4603      	mov	r3, r0
 80010d6:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <w25qxx_read+0x1f6>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	483d      	ldr	r0, [pc, #244]	; (80011d8 <w25qxx_read+0x2e4>)
 80010e4:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e13d      	b.n	8001366 <w25qxx_read+0x472>
                    }
                    buf[0] = 0xC5;                                                                        /* write extended addr register command */
 80010ea:	23c5      	movs	r3, #197	; 0xc5
 80010ec:	743b      	strb	r3, [r7, #16]
                    buf[1] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	0e1b      	lsrs	r3, r3, #24
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	747b      	strb	r3, [r7, #17]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                    /* spi write read */
 80010f6:	f107 0110 	add.w	r1, r7, #16
 80010fa:	2300      	movs	r3, #0
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	2202      	movs	r2, #2
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff f8bc 	bl	8000280 <a_w25qxx_spi_write_read>
 8001108:	4603      	mov	r3, r0
 800110a:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d005      	beq.n	800111e <w25qxx_read+0x22a>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	4831      	ldr	r0, [pc, #196]	; (80011dc <w25qxx_read+0x2e8>)
 8001118:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 800111a:	2301      	movs	r3, #1
 800111c:	e123      	b.n	8001366 <w25qxx_read+0x472>
                    }
                }
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 800111e:	230b      	movs	r3, #11
 8001120:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	0c1b      	lsrs	r3, r3, #16
 8001126:	b2db      	uxtb	r3, r3
 8001128:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b2db      	uxtb	r3, r3
 8001130:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	74fb      	strb	r3, [r7, #19]
                buf[4] = 0x00;                                                                            /* dummy */
 8001138:	2300      	movs	r3, #0
 800113a:	753b      	strb	r3, [r7, #20]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 5, (uint8_t *)data, (uint32_t)len); /* spi write read */
 800113c:	f107 0110 	add.w	r1, r7, #16
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2205      	movs	r2, #5
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff f899 	bl	8000280 <a_w25qxx_spi_write_read>
 800114e:	4603      	mov	r3, r0
 8001150:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 8105 	beq.w	8001364 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	4820      	ldr	r0, [pc, #128]	; (80011e0 <w25qxx_read+0x2ec>)
 8001160:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001162:	2301      	movs	r3, #1
 8001164:	e0ff      	b.n	8001366 <w25qxx_read+0x472>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	7f1b      	ldrb	r3, [r3, #28]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d12d      	bne.n	80011ca <w25qxx_read+0x2d6>
                    && (handle->type >= W25Q256))                                                         /* check address mode */
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8b5b      	ldrh	r3, [r3, #26]
 8001172:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001176:	4293      	cmp	r3, r2
 8001178:	d927      	bls.n	80011ca <w25qxx_read+0x2d6>
            {
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 800117a:	230b      	movs	r3, #11
 800117c:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	0e1b      	lsrs	r3, r3, #24
 8001182:	b2db      	uxtb	r3, r3
 8001184:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	0c1b      	lsrs	r3, r3, #16
 800118a:	b2db      	uxtb	r3, r3
 800118c:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	b2db      	uxtb	r3, r3
 8001194:	74fb      	strb	r3, [r7, #19]
                buf[4] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	753b      	strb	r3, [r7, #20]
                buf[5] = 0x00;                                                                            /* dummy */
 800119c:	2300      	movs	r3, #0
 800119e:	757b      	strb	r3, [r7, #21]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 6, (uint8_t *)data, (uint32_t)len); /* spi write read */
 80011a0:	f107 0110 	add.w	r1, r7, #16
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2206      	movs	r2, #6
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff f867 	bl	8000280 <a_w25qxx_spi_write_read>
 80011b2:	4603      	mov	r3, r0
 80011b4:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 80d3 	beq.w	8001364 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <w25qxx_read+0x2ec>)
 80011c4:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0cd      	b.n	8001366 <w25qxx_read+0x472>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <w25qxx_read+0x2f0>)
 80011d0:	4798      	blx	r3
               
                return 4;                                                                                 /* return error */
 80011d2:	2304      	movs	r3, #4
 80011d4:	e0c7      	b.n	8001366 <w25qxx_read+0x472>
 80011d6:	bf00      	nop
 80011d8:	0800661c 	.word	0x0800661c
 80011dc:	08006c18 	.word	0x08006c18
 80011e0:	08006c9c 	.word	0x08006c9c
 80011e4:	08006928 	.word	0x08006928
            }
        }
    }
    else                                                                                                  /* qspi interface */
    {
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                           /* 3 address mode */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	7f1b      	ldrb	r3, [r3, #28]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f040 8081 	bne.w	80012f4 <w25qxx_read+0x400>
        {
            if (handle->type >= W25Q256)                                                                  /* >128Mb */
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	8b5b      	ldrh	r3, [r3, #26]
 80011f6:	f64e 7217 	movw	r2, #61207	; 0xef17
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d952      	bls.n	80012a4 <w25qxx_read+0x3b0>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 80011fe:	2300      	movs	r3, #0
 8001200:	930a      	str	r3, [sp, #40]	; 0x28
 8001202:	2300      	movs	r3, #0
 8001204:	9309      	str	r3, [sp, #36]	; 0x24
 8001206:	2300      	movs	r3, #0
 8001208:	9308      	str	r3, [sp, #32]
 800120a:	2300      	movs	r3, #0
 800120c:	9307      	str	r3, [sp, #28]
 800120e:	2300      	movs	r3, #0
 8001210:	9306      	str	r3, [sp, #24]
 8001212:	2300      	movs	r3, #0
 8001214:	9305      	str	r3, [sp, #20]
 8001216:	2300      	movs	r3, #0
 8001218:	9304      	str	r3, [sp, #16]
 800121a:	2300      	movs	r3, #0
 800121c:	9303      	str	r3, [sp, #12]
 800121e:	2300      	movs	r3, #0
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	2300      	movs	r3, #0
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	2300      	movs	r3, #0
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2300      	movs	r3, #0
 800122c:	2204      	movs	r2, #4
 800122e:	2106      	movs	r1, #6
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff f851 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001236:	4603      	mov	r3, r0
 8001238:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                         /* qspi write read */
                if (res != 0)                                                                             /* check result */
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <w25qxx_read+0x358>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                /* write enable failed */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	484a      	ldr	r0, [pc, #296]	; (8001370 <w25qxx_read+0x47c>)
 8001246:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001248:	2301      	movs	r3, #1
 800124a:	e08c      	b.n	8001366 <w25qxx_read+0x472>
                }
                buf[0] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	0e1b      	lsrs	r3, r3, #24
 8001250:	b2db      	uxtb	r3, r3
 8001252:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 8001254:	2304      	movs	r3, #4
 8001256:	930a      	str	r3, [sp, #40]	; 0x28
 8001258:	2300      	movs	r3, #0
 800125a:	9309      	str	r3, [sp, #36]	; 0x24
 800125c:	2300      	movs	r3, #0
 800125e:	9308      	str	r3, [sp, #32]
 8001260:	2301      	movs	r3, #1
 8001262:	9307      	str	r3, [sp, #28]
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	9306      	str	r3, [sp, #24]
 800126a:	2300      	movs	r3, #0
 800126c:	9305      	str	r3, [sp, #20]
 800126e:	2300      	movs	r3, #0
 8001270:	9304      	str	r3, [sp, #16]
 8001272:	2300      	movs	r3, #0
 8001274:	9303      	str	r3, [sp, #12]
 8001276:	2300      	movs	r3, #0
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	2300      	movs	r3, #0
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	2300      	movs	r3, #0
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2300      	movs	r3, #0
 8001284:	2204      	movs	r2, #4
 8001286:	21c5      	movs	r1, #197	; 0xc5
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff f825 	bl	80002d8 <a_w25qxx_qspi_write_read>
 800128e:	4603      	mov	r3, r0
 8001290:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                            /* spi write read */
                if (res != 0)                                                                             /* check result */
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <w25qxx_read+0x3b0>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                /* write extended addr register failed */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4835      	ldr	r0, [pc, #212]	; (8001374 <w25qxx_read+0x480>)
 800129e:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 80012a0:	2301      	movs	r3, #1
 80012a2:	e060      	b.n	8001366 <w25qxx_read+0x472>
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	7f9b      	ldrb	r3, [r3, #30]
 80012a8:	2204      	movs	r2, #4
 80012aa:	920a      	str	r2, [sp, #40]	; 0x28
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	9209      	str	r2, [sp, #36]	; 0x24
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	9208      	str	r2, [sp, #32]
 80012b4:	2200      	movs	r2, #0
 80012b6:	9207      	str	r2, [sp, #28]
 80012b8:	2200      	movs	r2, #0
 80012ba:	9206      	str	r2, [sp, #24]
 80012bc:	9305      	str	r3, [sp, #20]
 80012be:	2300      	movs	r3, #0
 80012c0:	9304      	str	r3, [sp, #16]
 80012c2:	2300      	movs	r3, #0
 80012c4:	9303      	str	r3, [sp, #12]
 80012c6:	2300      	movs	r3, #0
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2303      	movs	r3, #3
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2304      	movs	r3, #4
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2204      	movs	r2, #4
 80012d6:	210b      	movs	r1, #11
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f7fe fffd 	bl	80002d8 <a_w25qxx_qspi_write_read>
 80012de:	4603      	mov	r3, r0
 80012e0:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d03d      	beq.n	8001364 <w25qxx_read+0x470>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	4822      	ldr	r0, [pc, #136]	; (8001378 <w25qxx_read+0x484>)
 80012ee:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 80012f0:	2301      	movs	r3, #1
 80012f2:	e038      	b.n	8001366 <w25qxx_read+0x472>
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	7f1b      	ldrb	r3, [r3, #28]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d12d      	bne.n	8001358 <w25qxx_read+0x464>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8b5b      	ldrh	r3, [r3, #26]
 8001300:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001304:	4293      	cmp	r3, r2
 8001306:	d927      	bls.n	8001358 <w25qxx_read+0x464>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	7f9b      	ldrb	r3, [r3, #30]
 800130c:	2204      	movs	r2, #4
 800130e:	920a      	str	r2, [sp, #40]	; 0x28
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	9209      	str	r2, [sp, #36]	; 0x24
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	9208      	str	r2, [sp, #32]
 8001318:	2200      	movs	r2, #0
 800131a:	9207      	str	r2, [sp, #28]
 800131c:	2200      	movs	r2, #0
 800131e:	9206      	str	r2, [sp, #24]
 8001320:	9305      	str	r3, [sp, #20]
 8001322:	2300      	movs	r3, #0
 8001324:	9304      	str	r3, [sp, #16]
 8001326:	2300      	movs	r3, #0
 8001328:	9303      	str	r3, [sp, #12]
 800132a:	2300      	movs	r3, #0
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2304      	movs	r3, #4
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	2304      	movs	r3, #4
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	2204      	movs	r2, #4
 800133a:	210b      	movs	r1, #11
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f7fe ffcb 	bl	80002d8 <a_w25qxx_qspi_write_read>
 8001342:	4603      	mov	r3, r0
 8001344:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00b      	beq.n	8001364 <w25qxx_read+0x470>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <w25qxx_read+0x484>)
 8001352:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8001354:	2301      	movs	r3, #1
 8001356:	e006      	b.n	8001366 <w25qxx_read+0x472>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                    /* address mode is invalid */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <w25qxx_read+0x488>)
 800135e:	4798      	blx	r3
           
            return 4;                                                                                     /* return error */
 8001360:	2304      	movs	r3, #4
 8001362:	e000      	b.n	8001366 <w25qxx_read+0x472>
        }
    }
    
    return 0;                                                                                             /* success return 0 */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	0800661c 	.word	0x0800661c
 8001374:	08006c18 	.word	0x08006c18
 8001378:	08006c9c 	.word	0x08006c9c
 800137c:	08006928 	.word	0x08006928

08001380 <w25qxx_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      none
 */
uint8_t w25qxx_basic_init(w25qxx_type_t type, w25qxx_interface_t interface, w25qxx_bool_t dual_quad_spi_enable)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
 800138a:	460b      	mov	r3, r1
 800138c:	717b      	strb	r3, [r7, #5]
 800138e:	4613      	mov	r3, r2
 8001390:	713b      	strb	r3, [r7, #4]
    uint8_t res;
    
    /* link interface function */
    DRIVER_W25QXX_LINK_INIT(&gs_handle, w25qxx_handle_t);
 8001392:	f241 1228 	movw	r2, #4392	; 0x1128
 8001396:	2100      	movs	r1, #0
 8001398:	4836      	ldr	r0, [pc, #216]	; (8001474 <w25qxx_basic_init+0xf4>)
 800139a:	f004 fc87 	bl	8005cac <memset>
    DRIVER_W25QXX_LINK_SPI_QSPI_INIT(&gs_handle, w25qxx_interface_spi_qspi_init);
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <w25qxx_basic_init+0xf4>)
 80013a0:	4a35      	ldr	r2, [pc, #212]	; (8001478 <w25qxx_basic_init+0xf8>)
 80013a2:	601a      	str	r2, [r3, #0]
    DRIVER_W25QXX_LINK_SPI_QSPI_DEINIT(&gs_handle, w25qxx_interface_spi_qspi_deinit);
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <w25qxx_basic_init+0xf4>)
 80013a6:	4a35      	ldr	r2, [pc, #212]	; (800147c <w25qxx_basic_init+0xfc>)
 80013a8:	605a      	str	r2, [r3, #4]
    DRIVER_W25QXX_LINK_SPI_QSPI_WRITE_READ(&gs_handle, w25qxx_interface_spi_qspi_write_read);
 80013aa:	4b32      	ldr	r3, [pc, #200]	; (8001474 <w25qxx_basic_init+0xf4>)
 80013ac:	4a34      	ldr	r2, [pc, #208]	; (8001480 <w25qxx_basic_init+0x100>)
 80013ae:	609a      	str	r2, [r3, #8]
    DRIVER_W25QXX_LINK_DELAY_MS(&gs_handle, w25qxx_interface_delay_ms);
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <w25qxx_basic_init+0xf4>)
 80013b2:	4a34      	ldr	r2, [pc, #208]	; (8001484 <w25qxx_basic_init+0x104>)
 80013b4:	60da      	str	r2, [r3, #12]
    DRIVER_W25QXX_LINK_DELAY_US(&gs_handle, w25qxx_interface_delay_us);
 80013b6:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <w25qxx_basic_init+0xf4>)
 80013b8:	4a33      	ldr	r2, [pc, #204]	; (8001488 <w25qxx_basic_init+0x108>)
 80013ba:	611a      	str	r2, [r3, #16]
    DRIVER_W25QXX_LINK_DEBUG_PRINT(&gs_handle, w25qxx_interface_debug_print);
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <w25qxx_basic_init+0xf4>)
 80013be:	4a33      	ldr	r2, [pc, #204]	; (800148c <w25qxx_basic_init+0x10c>)
 80013c0:	615a      	str	r2, [r3, #20]
    
    /* set chip type */
    res = w25qxx_set_type(&gs_handle, type);
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	4619      	mov	r1, r3
 80013c6:	482b      	ldr	r0, [pc, #172]	; (8001474 <w25qxx_basic_init+0xf4>)
 80013c8:	f7fe ffd0 	bl	800036c <w25qxx_set_type>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <w25qxx_basic_init+0x60>
    {
        w25qxx_interface_debug_print("w25qxx: set type failed.\n");
 80013d6:	482e      	ldr	r0, [pc, #184]	; (8001490 <w25qxx_basic_init+0x110>)
 80013d8:	f000 f8e8 	bl	80015ac <w25qxx_interface_debug_print>
       
        return 1;
 80013dc:	2301      	movs	r3, #1
 80013de:	e044      	b.n	800146a <w25qxx_basic_init+0xea>
    }
    
    /* set chip interface */
    res = w25qxx_set_interface(&gs_handle, interface);
 80013e0:	797b      	ldrb	r3, [r7, #5]
 80013e2:	4619      	mov	r1, r3
 80013e4:	4823      	ldr	r0, [pc, #140]	; (8001474 <w25qxx_basic_init+0xf4>)
 80013e6:	f7fe ffd6 	bl	8000396 <w25qxx_set_interface>
 80013ea:	4603      	mov	r3, r0
 80013ec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <w25qxx_basic_init+0x7e>
    {
        w25qxx_interface_debug_print("w25qxx: set interface failed.\n");
 80013f4:	4827      	ldr	r0, [pc, #156]	; (8001494 <w25qxx_basic_init+0x114>)
 80013f6:	f000 f8d9 	bl	80015ac <w25qxx_interface_debug_print>
       
        return 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e035      	b.n	800146a <w25qxx_basic_init+0xea>
    }
    
    /* set dual quad spi */
    res = w25qxx_set_dual_quad_spi(&gs_handle, dual_quad_spi_enable);
 80013fe:	793b      	ldrb	r3, [r7, #4]
 8001400:	4619      	mov	r1, r3
 8001402:	481c      	ldr	r0, [pc, #112]	; (8001474 <w25qxx_basic_init+0xf4>)
 8001404:	f7fe ff9d 	bl	8000342 <w25qxx_set_dual_quad_spi>
 8001408:	4603      	mov	r3, r0
 800140a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <w25qxx_basic_init+0xa2>
    {
        w25qxx_interface_debug_print("w25qxx: set dual quad spi failed.\n");
 8001412:	4821      	ldr	r0, [pc, #132]	; (8001498 <w25qxx_basic_init+0x118>)
 8001414:	f000 f8ca 	bl	80015ac <w25qxx_interface_debug_print>
        (void)w25qxx_deinit(&gs_handle);
 8001418:	4816      	ldr	r0, [pc, #88]	; (8001474 <w25qxx_basic_init+0xf4>)
 800141a:	f7ff fcab 	bl	8000d74 <w25qxx_deinit>
       
        return 1;
 800141e:	2301      	movs	r3, #1
 8001420:	e023      	b.n	800146a <w25qxx_basic_init+0xea>
    }
    
    /* chip init */
    res = w25qxx_init(&gs_handle);
 8001422:	4814      	ldr	r0, [pc, #80]	; (8001474 <w25qxx_basic_init+0xf4>)
 8001424:	f7ff f87a 	bl	800051c <w25qxx_init>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <w25qxx_basic_init+0xbc>
    {
        w25qxx_interface_debug_print("w25qxx: init failed.\n");
 8001432:	481a      	ldr	r0, [pc, #104]	; (800149c <w25qxx_basic_init+0x11c>)
 8001434:	f000 f8ba 	bl	80015ac <w25qxx_interface_debug_print>
       
        return 1;
 8001438:	2301      	movs	r3, #1
 800143a:	e016      	b.n	800146a <w25qxx_basic_init+0xea>
    }
    else
    {
        if (type >= W25Q256)
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001442:	4293      	cmp	r3, r2
 8001444:	d910      	bls.n	8001468 <w25qxx_basic_init+0xe8>
        {
            res = w25qxx_set_address_mode(&gs_handle, W25QXX_ADDRESS_MODE_4_BYTE);
 8001446:	2101      	movs	r1, #1
 8001448:	480a      	ldr	r0, [pc, #40]	; (8001474 <w25qxx_basic_init+0xf4>)
 800144a:	f7fe ffbb 	bl	80003c4 <w25qxx_set_address_mode>
 800144e:	4603      	mov	r3, r0
 8001450:	73fb      	strb	r3, [r7, #15]
            if (res != 0)
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d007      	beq.n	8001468 <w25qxx_basic_init+0xe8>
            {
                w25qxx_interface_debug_print("w25qxx: set address mode failed.\n");
 8001458:	4811      	ldr	r0, [pc, #68]	; (80014a0 <w25qxx_basic_init+0x120>)
 800145a:	f000 f8a7 	bl	80015ac <w25qxx_interface_debug_print>
                (void)w25qxx_deinit(&gs_handle);
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <w25qxx_basic_init+0xf4>)
 8001460:	f7ff fc88 	bl	8000d74 <w25qxx_deinit>
               
                return 1;
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <w25qxx_basic_init+0xea>
            }
        }
        
        return 0;
 8001468:	2300      	movs	r3, #0
    }
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000008c 	.word	0x2000008c
 8001478:	080014f5 	.word	0x080014f5
 800147c:	08001505 	.word	0x08001505
 8001480:	08001513 	.word	0x08001513
 8001484:	08001565 	.word	0x08001565
 8001488:	0800157d 	.word	0x0800157d
 800148c:	080015ad 	.word	0x080015ad
 8001490:	08007210 	.word	0x08007210
 8001494:	0800722c 	.word	0x0800722c
 8001498:	0800724c 	.word	0x0800724c
 800149c:	08007270 	.word	0x08007270
 80014a0:	08007288 	.word	0x08007288

080014a4 <w25qxx_basic_deinit>:
 *         - 0 success
 *         - 1 deinit failed
 * @note   none
 */
uint8_t w25qxx_basic_deinit(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
    if (w25qxx_deinit(&gs_handle) != 0)
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <w25qxx_basic_deinit+0x1c>)
 80014aa:	f7ff fc63 	bl	8000d74 <w25qxx_deinit>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <w25qxx_basic_deinit+0x14>
    {
        return 1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <w25qxx_basic_deinit+0x16>
    }
    else
    {
        return 0;
 80014b8:	2300      	movs	r3, #0
    }
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000008c 	.word	0x2000008c

080014c4 <w25qxx_basic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t w25qxx_basic_read(uint32_t addr, uint8_t *data, uint32_t len)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
    if (w25qxx_read(&gs_handle, addr, data, len) != 0)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	68f9      	ldr	r1, [r7, #12]
 80014d6:	4806      	ldr	r0, [pc, #24]	; (80014f0 <w25qxx_basic_read+0x2c>)
 80014d8:	f7ff fd0c 	bl	8000ef4 <w25qxx_read>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <w25qxx_basic_read+0x22>
    {
        return 1;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <w25qxx_basic_read+0x24>
    }
    else
    {
        return 0;
 80014e6:	2300      	movs	r3, #0
    }
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000008c 	.word	0x2000008c

080014f4 <w25qxx_interface_spi_qspi_init>:
 *         - 0 success
 *         - 1 spi qspi init failed
 * @note   none
 */
uint8_t w25qxx_interface_spi_qspi_init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
    return spi_init(SPI_MODE_3);
 80014f8:	2003      	movs	r0, #3
 80014fa:	f000 fa91 	bl	8001a20 <spi_init>
 80014fe:	4603      	mov	r3, r0
}
 8001500:	4618      	mov	r0, r3
 8001502:	bd80      	pop	{r7, pc}

08001504 <w25qxx_interface_spi_qspi_deinit>:
 *         - 0 success
 *         - 1 spi qspi deinit failed
 * @note   none
 */
uint8_t w25qxx_interface_spi_qspi_deinit(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	return spi_deinit();
 8001508:	f000 fae8 	bl	8001adc <spi_deinit>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}

08001512 <w25qxx_interface_spi_qspi_write_read>:
uint8_t w25qxx_interface_spi_qspi_write_read(uint8_t instruction, uint8_t instruction_line,
                                             uint32_t address, uint8_t address_line, uint8_t address_len,
                                             uint32_t alternate, uint8_t alternate_line, uint8_t alternate_len,
                                             uint8_t dummy, uint8_t *in_buf, uint32_t in_len,
                                             uint8_t *out_buf, uint32_t out_len, uint8_t data_line)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	603a      	str	r2, [r7, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	460b      	mov	r3, r1
 8001522:	71bb      	strb	r3, [r7, #6]
 8001524:	4613      	mov	r3, r2
 8001526:	717b      	strb	r3, [r7, #5]
    if ((instruction_line != 0) || (address_line != 0) || (alternate_line != 0) || (dummy != 0) || (data_line != 1))
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10d      	bne.n	800154a <w25qxx_interface_spi_qspi_write_read+0x38>
 800152e:	797b      	ldrb	r3, [r7, #5]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10a      	bne.n	800154a <w25qxx_interface_spi_qspi_write_read+0x38>
 8001534:	7e3b      	ldrb	r3, [r7, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d107      	bne.n	800154a <w25qxx_interface_spi_qspi_write_read+0x38>
 800153a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d103      	bne.n	800154a <w25qxx_interface_spi_qspi_write_read+0x38>
 8001542:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001546:	2b01      	cmp	r3, #1
 8001548:	d001      	beq.n	800154e <w25qxx_interface_spi_qspi_write_read+0x3c>
    {
        return 1;
 800154a:	2301      	movs	r3, #1
 800154c:	e006      	b.n	800155c <w25qxx_interface_spi_qspi_write_read+0x4a>
    }

    return spi_write_read(in_buf, in_len, out_buf, out_len);
 800154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001556:	f000 fad5 	bl	8001b04 <spi_write_read>
 800155a:	4603      	mov	r3, r0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <w25qxx_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void w25qxx_interface_delay_ms(uint32_t ms)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fd2f 	bl	8001fd0 <HAL_Delay>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <w25qxx_interface_delay_us>:
 * @brief     interface delay us
 * @param[in] us
 * @note      none
 */
void w25qxx_interface_delay_us(uint32_t us)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <w25qxx_interface_delay_us+0x2c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800158c:	bf00      	nop
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <w25qxx_interface_delay_us+0x2c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	d8f9      	bhi.n	800158e <w25qxx_interface_delay_us+0x12>
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	20001218 	.word	0x20001218

080015ac <w25qxx_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void w25qxx_interface_debug_print(const char *const fmt, ...)
{
 80015ac:	b40f      	push	{r0, r1, r2, r3}
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b0c2      	sub	sp, #264	; 0x108
 80015b2:	af00      	add	r7, sp, #0
    char str[256];
    uint16_t len;
    va_list args;

    memset((char *)str, 0, sizeof(char) * 256);
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 fb75 	bl	8005cac <memset>
    va_start(args, fmt);
 80015c2:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80015c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015ce:	601a      	str	r2, [r3, #0]
    vsnprintf((char *)str, 255, (char const *)fmt, args);
 80015d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015d8:	1d38      	adds	r0, r7, #4
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80015e0:	21ff      	movs	r1, #255	; 0xff
 80015e2:	f004 fb97 	bl	8005d14 <vsniprintf>
    va_end(args);

    len = strlen((char *)str);
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe fdf1 	bl	80001d0 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    (void)uart2_write((uint8_t *)str, len);
 80015f4:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fc23 	bl	8001e48 <uart2_write>
}
 8001602:	bf00      	nop
 8001604:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001608:	46bd      	mov	sp, r7
 800160a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800160e:	b004      	add	sp, #16
 8001610:	4770      	bx	lr
	...

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161a:	f000 fc73 	bl	8001f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161e:	f000 f86b 	bl	80016f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f000 f97f 	bl	8001924 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001626:	f000 f94d 	bl	80018c4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800162a:	f000 f8b9 	bl	80017a0 <MX_SPI1_Init>
  MX_TIM1_Init();
 800162e:	f000 f8f5 	bl	800181c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t data[32] = "HELLO\n";
 8001632:	4a2c      	ldr	r2, [pc, #176]	; (80016e4 <main+0xd0>)
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	e892 0003 	ldmia.w	r2, {r0, r1}
 800163a:	6018      	str	r0, [r3, #0]
 800163c:	3304      	adds	r3, #4
 800163e:	8019      	strh	r1, [r3, #0]
 8001640:	3302      	adds	r3, #2
 8001642:	0c0a      	lsrs	r2, r1, #16
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	f107 030b 	add.w	r3, r7, #11
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	761a      	strb	r2, [r3, #24]
  uint8_t dat;
  uint8_t res;

  /* basic init */
  res = w25qxx_basic_init(W25Q64, W25QXX_INTERFACE_SPI, W25QXX_BOOL_FALSE);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	f64e 7016 	movw	r0, #61206	; 0xef16
 8001662:	f7ff fe8d 	bl	8001380 <w25qxx_basic_init>
 8001666:	4603      	mov	r3, r0
 8001668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (res != 0)
 800166c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00d      	beq.n	8001690 <main+0x7c>
  {
      memcpy(data, "Failed to initialise!", 32);
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2220      	movs	r2, #32
 8001678:	491b      	ldr	r1, [pc, #108]	; (80016e8 <main+0xd4>)
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fb08 	bl	8005c90 <memcpy>
      HAL_UART_Transmit(&huart2, data, sizeof(data), 10);
 8001680:	1d39      	adds	r1, r7, #4
 8001682:	230a      	movs	r3, #10
 8001684:	2220      	movs	r2, #32
 8001686:	4819      	ldr	r0, [pc, #100]	; (80016ec <main+0xd8>)
 8001688:	f003 fde8 	bl	800525c <HAL_UART_Transmit>
      return 1;
 800168c:	2301      	movs	r3, #1
 800168e:	e025      	b.n	80016dc <main+0xc8>
  }

  /* read */
  res = w25qxx_basic_read(0x0, (uint8_t *)&dat, 1);
 8001690:	1cfb      	adds	r3, r7, #3
 8001692:	2201      	movs	r2, #1
 8001694:	4619      	mov	r1, r3
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff ff14 	bl	80014c4 <w25qxx_basic_read>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (res != 0)
 80016a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00f      	beq.n	80016ca <main+0xb6>
  {
      (void)w25qxx_basic_deinit();
 80016aa:	f7ff fefb 	bl	80014a4 <w25qxx_basic_deinit>
      memcpy(data, "Failed to read!", 32);
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2220      	movs	r2, #32
 80016b2:	490f      	ldr	r1, [pc, #60]	; (80016f0 <main+0xdc>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f004 faeb 	bl	8005c90 <memcpy>
      HAL_UART_Transmit(&huart2, data, sizeof(data), 10);
 80016ba:	1d39      	adds	r1, r7, #4
 80016bc:	230a      	movs	r3, #10
 80016be:	2220      	movs	r2, #32
 80016c0:	480a      	ldr	r0, [pc, #40]	; (80016ec <main+0xd8>)
 80016c2:	f003 fdcb 	bl	800525c <HAL_UART_Transmit>
      return 1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e008      	b.n	80016dc <main+0xc8>
  }
  else
  {
      w25qxx_interface_debug_print("w25qxx: addr %d is %d.\n", 0x0, dat);
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	461a      	mov	r2, r3
 80016ce:	2100      	movs	r1, #0
 80016d0:	4808      	ldr	r0, [pc, #32]	; (80016f4 <main+0xe0>)
 80016d2:	f7ff ff6b 	bl	80015ac <w25qxx_interface_debug_print>
  }

  /* basic deinit */
  (void)w25qxx_basic_deinit();
 80016d6:	f7ff fee5 	bl	80014a4 <w25qxx_basic_deinit>

  return 0;
 80016da:	2300      	movs	r3, #0
    /* USER CODE BEGIN 3 */
	HAL_UART_Transmit(&huart2, data, sizeof(data), 10);
	HAL_Delay(1000);
  }
  /* USER CODE END 3 */
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	080072ec 	.word	0x080072ec
 80016e8:	080072ac 	.word	0x080072ac
 80016ec:	20001264 	.word	0x20001264
 80016f0:	080072c4 	.word	0x080072c4
 80016f4:	080072d4 	.word	0x080072d4

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b096      	sub	sp, #88	; 0x58
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001702:	2228      	movs	r2, #40	; 0x28
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f004 fad0 	bl	8005cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
 800172a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800172c:	2302      	movs	r3, #2
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001730:	2301      	movs	r3, #1
 8001732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001734:	2310      	movs	r3, #16
 8001736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001738:	2300      	movs	r3, #0
 800173a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001740:	4618      	mov	r0, r3
 8001742:	f000 ffad 	bl	80026a0 <HAL_RCC_OscConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800174c:	f000 f928 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001750:	230f      	movs	r3, #15
 8001752:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f001 ffd6 	bl	800371c <HAL_RCC_ClockConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001776:	f000 f913 	bl	80019a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800177a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f002 f9fe 	bl	8003b88 <HAL_RCCEx_PeriphCLKConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001792:	f000 f905 	bl	80019a0 <Error_Handler>
  }
}
 8001796:	bf00      	nop
 8001798:	3758      	adds	r7, #88	; 0x58
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_SPI1_Init+0x74>)
 80017a6:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <MX_SPI1_Init+0x78>)
 80017a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_SPI1_Init+0x74>)
 80017ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_SPI1_Init+0x74>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_SPI1_Init+0x74>)
 80017ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_SPI1_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_SPI1_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_SPI1_Init+0x74>)
 80017ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_SPI1_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_SPI1_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_SPI1_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_SPI1_Init+0x74>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_SPI1_Init+0x74>)
 80017ee:	2207      	movs	r2, #7
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_SPI1_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_SPI1_Init+0x74>)
 80017fa:	2208      	movs	r2, #8
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_SPI1_Init+0x74>)
 8001800:	f002 fae8 	bl	8003dd4 <HAL_SPI_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800180a:	f000 f8c9 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200011b4 	.word	0x200011b4
 8001818:	40013000 	.word	0x40013000

0800181c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <MX_TIM1_Init+0xa0>)
 800183c:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <MX_TIM1_Init+0xa4>)
 800183e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MX_TIM1_Init+0xa0>)
 8001842:	2207      	movs	r2, #7
 8001844:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_TIM1_Init+0xa0>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MX_TIM1_Init+0xa0>)
 800184e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001852:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_TIM1_Init+0xa0>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_TIM1_Init+0xa0>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_TIM1_Init+0xa0>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001866:	4815      	ldr	r0, [pc, #84]	; (80018bc <MX_TIM1_Init+0xa0>)
 8001868:	f003 fa0a 	bl	8004c80 <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001872:	f000 f895 	bl	80019a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4619      	mov	r1, r3
 8001882:	480e      	ldr	r0, [pc, #56]	; (80018bc <MX_TIM1_Init+0xa0>)
 8001884:	f003 fa53 	bl	8004d2e <HAL_TIM_ConfigClockSource>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800188e:	f000 f887 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <MX_TIM1_Init+0xa0>)
 80018a4:	f003 fc1e 	bl	80050e4 <HAL_TIMEx_MasterConfigSynchronization>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018ae:	f000 f877 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20001218 	.word	0x20001218
 80018c0:	40012c00 	.word	0x40012c00

080018c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <MX_USART2_UART_Init+0x5c>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_USART2_UART_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_USART2_UART_Init+0x58>)
 8001908:	f003 fc5a 	bl	80051c0 <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001912:	f000 f845 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20001264 	.word	0x20001264
 8001920:	40004400 	.word	0x40004400

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <MX_GPIO_Init+0x78>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <MX_GPIO_Init+0x78>)
 8001940:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001944:	6153      	str	r3, [r2, #20]
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <MX_GPIO_Init+0x78>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <MX_GPIO_Init+0x78>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	4a11      	ldr	r2, [pc, #68]	; (800199c <MX_GPIO_Init+0x78>)
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	6153      	str	r3, [r2, #20]
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <MX_GPIO_Init+0x78>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2101      	movs	r1, #1
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f000 fe7d 	bl	8002670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001976:	2301      	movs	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001990:	f000 fc28 	bl	80021e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <a_spi_cs_init>:
 * @return status code
 *         - 0 success
 * @note   none
 */
static uint8_t a_spi_cs_init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <a_spi_cs_init+0x70>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <a_spi_cs_init+0x70>)
 80019c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019cc:	6153      	str	r3, [r2, #20]
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <a_spi_cs_init+0x70>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <a_spi_cs_init+0x70>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <a_spi_cs_init+0x70>)
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	6153      	str	r3, [r2, #20]
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <a_spi_cs_init+0x70>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
    
    /* gpio init */
    GPIO_InitStruct.Pin = SPI_CS_Pin;
 80019f2:	2301      	movs	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0c:	f000 fbea 	bl	80021e4 <HAL_GPIO_Init>
    
    return 0;
 8001a10:	2300      	movs	r3, #0

}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <spi_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      SCLK is PA5, MOSI is PA7 MISO is PA6 and CS is PA4
 */
uint8_t spi_init(spi_mode_t mode)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
    g_spi_handle.Instance = SPI1;
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <spi_init+0xb4>)
 8001a2c:	4a2a      	ldr	r2, [pc, #168]	; (8001ad8 <spi_init+0xb8>)
 8001a2e:	601a      	str	r2, [r3, #0]
    g_spi_handle.Init.Mode = SPI_MODE_MASTER;
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <spi_init+0xb4>)
 8001a32:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a36:	605a      	str	r2, [r3, #4]
    g_spi_handle.Init.Direction = SPI_DIRECTION_2LINES;
 8001a38:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <spi_init+0xb4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
    g_spi_handle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <spi_init+0xb4>)
 8001a40:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a44:	60da      	str	r2, [r3, #12]
    
    /* set the mode */
    if (mode == SPI_MODE_0)
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d106      	bne.n	8001a5a <spi_init+0x3a>
    {
        g_spi_handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <spi_init+0xb4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
        g_spi_handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <spi_init+0xb4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
 8001a58:	e019      	b.n	8001a8e <spi_init+0x6e>
    }
    else if (mode == SPI_MODE_1)
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d106      	bne.n	8001a6e <spi_init+0x4e>
    {
        g_spi_handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <spi_init+0xb4>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
        g_spi_handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <spi_init+0xb4>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	615a      	str	r2, [r3, #20]
 8001a6c:	e00f      	b.n	8001a8e <spi_init+0x6e>
    }
    else if (mode == SPI_MODE_2)
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d106      	bne.n	8001a82 <spi_init+0x62>
    {
        g_spi_handle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <spi_init+0xb4>)
 8001a76:	2202      	movs	r2, #2
 8001a78:	611a      	str	r2, [r3, #16]
        g_spi_handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <spi_init+0xb4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
 8001a80:	e005      	b.n	8001a8e <spi_init+0x6e>
    }
    else
    {
        g_spi_handle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <spi_init+0xb4>)
 8001a84:	2202      	movs	r2, #2
 8001a86:	611a      	str	r2, [r3, #16]
        g_spi_handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <spi_init+0xb4>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	615a      	str	r2, [r3, #20]
    }
    g_spi_handle.Init.NSS = SPI_NSS_SOFT;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <spi_init+0xb4>)
 8001a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a94:	619a      	str	r2, [r3, #24]
    g_spi_handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <spi_init+0xb4>)
 8001a98:	2210      	movs	r2, #16
 8001a9a:	61da      	str	r2, [r3, #28]
    g_spi_handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <spi_init+0xb4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	621a      	str	r2, [r3, #32]
    g_spi_handle.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <spi_init+0xb4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24
    g_spi_handle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <spi_init+0xb4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
    g_spi_handle.Init.CRCPolynomial = 10;
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <spi_init+0xb4>)
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* spi init */
    if (HAL_SPI_Init(&g_spi_handle) != HAL_OK)
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <spi_init+0xb4>)
 8001ab6:	f002 f98d 	bl	8003dd4 <HAL_SPI_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <spi_init+0xa4>
    {
        return 1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e002      	b.n	8001aca <spi_init+0xaa>
    }
    
    return a_spi_cs_init();
 8001ac4:	f7ff ff72 	bl	80019ac <a_spi_cs_init>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200012ec 	.word	0x200012ec
 8001ad8:	40013000 	.word	0x40013000

08001adc <spi_deinit>:
 *         - 0 success
 *         - 1 deinit failed
 * @note   none
 */
uint8_t spi_deinit(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
    /* cs deinit */
    HAL_GPIO_DeInit(SPI_CS_GPIO_Port, SPI_CS_Pin);
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae6:	f000 fcef 	bl	80024c8 <HAL_GPIO_DeInit>
    
    /* spi deinit */
    if (HAL_SPI_DeInit(&g_spi_handle) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <spi_deinit+0x24>)
 8001aec:	f002 fa15 	bl	8003f1a <HAL_SPI_DeInit>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <spi_deinit+0x1e>
    {
        return 1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <spi_deinit+0x20>
    }
    
    return 0;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200012ec 	.word	0x200012ec

08001b04 <spi_write_read>:
 *             - 0 success
 *             - 1 write read failed
 * @note       none
 */
uint8_t spi_write_read(uint8_t *in_buf, uint32_t in_len, uint8_t *out_buf, uint32_t out_len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
    uint8_t res;
    
    /* set cs low */
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2101      	movs	r1, #1
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1a:	f000 fda9 	bl	8002670 <HAL_GPIO_WritePin>
    
    /* if in_len > 0 */
    if (in_len > 0)
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d014      	beq.n	8001b4e <spi_write_read+0x4a>
    {
        /* transmit the input buffer */
        res = HAL_SPI_Transmit(&g_spi_handle, in_buf, in_len, 1000);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	4819      	ldr	r0, [pc, #100]	; (8001b94 <spi_write_read+0x90>)
 8001b30:	f002 fa1b 	bl	8003f6a <HAL_SPI_Transmit>
 8001b34:	4603      	mov	r3, r0
 8001b36:	75fb      	strb	r3, [r7, #23]
        if (res != HAL_OK)
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <spi_write_read+0x4a>
        {
            /* set cs high */
            HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2101      	movs	r1, #1
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f000 fd93 	bl	8002670 <HAL_GPIO_WritePin>
           
            return 1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e01e      	b.n	8001b8c <spi_write_read+0x88>
        }
    }
    
    /* if out_len > 0 */
    if (out_len > 0)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d014      	beq.n	8001b7e <spi_write_read+0x7a>
    {
        /* transmit to the output buffer */
        res = HAL_SPI_Receive(&g_spi_handle, out_buf, out_len, 1000);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <spi_write_read+0x90>)
 8001b60:	f002 fb78 	bl	8004254 <HAL_SPI_Receive>
 8001b64:	4603      	mov	r3, r0
 8001b66:	75fb      	strb	r3, [r7, #23]
        if (res != HAL_OK)
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <spi_write_read+0x7a>
        {
            /* set cs high */
            HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2101      	movs	r1, #1
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b76:	f000 fd7b 	bl	8002670 <HAL_GPIO_WritePin>
           
            return 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e006      	b.n	8001b8c <spi_write_read+0x88>
        }
    }
    
    /* set cs high */
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2101      	movs	r1, #1
 8001b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b86:	f000 fd73 	bl	8002670 <HAL_GPIO_WritePin>
    
    return 0;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200012ec 	.word	0x200012ec

08001b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_MspInit+0x44>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_MspInit+0x44>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6193      	str	r3, [r2, #24]
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_MspInit+0x44>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_MspInit+0x44>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_MspInit+0x44>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_MspInit+0x44>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_SPI_MspInit+0x7c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d128      	bne.n	8001c54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c0c:	6193      	str	r3, [r2, #24]
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	6153      	str	r3, [r2, #20]
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c32:	23e0      	movs	r3, #224	; 0xe0
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c42:	2305      	movs	r3, #5
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c50:	f000 fac8 	bl	80021e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40013000 	.word	0x40013000
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_SPI_MspDeInit+0x30>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d10a      	bne.n	8001c8c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_SPI_MspDeInit+0x34>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_SPI_MspDeInit+0x34>)
 8001c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c80:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001c82:	21e0      	movs	r1, #224	; 0xe0
 8001c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c88:	f000 fc1e 	bl	80024c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40013000 	.word	0x40013000
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <HAL_TIM_Base_MspInit+0x38>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d10b      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cb8:	6193      	str	r3, [r2, #24]
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40021000 	.word	0x40021000

08001cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <HAL_UART_MspInit+0x80>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d129      	bne.n	8001d52 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_UART_MspInit+0x84>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <HAL_UART_MspInit+0x84>)
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_UART_MspInit+0x84>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_UART_MspInit+0x84>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_UART_MspInit+0x84>)
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d20:	6153      	str	r3, [r2, #20]
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <HAL_UART_MspInit+0x84>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001d2e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d40:	2307      	movs	r3, #7
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4e:	f000 fa49 	bl	80021e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	; 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40004400 	.word	0x40004400
 8001d60:	40021000 	.word	0x40021000

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <NMI_Handler+0x4>

08001d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <MemManage_Handler+0x4>

08001d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db0:	f000 f8ee 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <_sbrk+0x5c>)
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <_sbrk+0x60>)
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <_sbrk+0x64>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <_sbrk+0x68>)
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d207      	bcs.n	8001df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de8:	f003 ff28 	bl	8005c3c <__errno>
 8001dec:	4603      	mov	r3, r0
 8001dee:	220c      	movs	r2, #12
 8001df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	e009      	b.n	8001e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <_sbrk+0x64>)
 8001e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20003000 	.word	0x20003000
 8001e18:	00000400 	.word	0x00000400
 8001e1c:	20001350 	.word	0x20001350
 8001e20:	200013f8 	.word	0x200013f8

08001e24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <SystemInit+0x20>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <SystemInit+0x20>)
 8001e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <uart2_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t uart2_write(uint8_t *buf, uint16_t len)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
    uint16_t timeout = 1000;
 8001e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e58:	81fb      	strh	r3, [r7, #14]
    
    /* set tx done 0 */
    g_uart2_tx_done = 0;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <uart2_write+0x60>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
    
    /* transmit */
    if (HAL_UART_Transmit_IT(&g_uart2_handle, (uint8_t *)buf, len) != HAL_OK)
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	461a      	mov	r2, r3
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4811      	ldr	r0, [pc, #68]	; (8001eac <uart2_write+0x64>)
 8001e68:	f003 fa82 	bl	8005370 <HAL_UART_Transmit_IT>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <uart2_write+0x3a>
    {
        return 1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e013      	b.n	8001e9e <uart2_write+0x56>
    }
    
    /* wait for events */
    while ((g_uart2_tx_done == 0) && (timeout != 0))
    {
        HAL_Delay(1);
 8001e76:	2001      	movs	r0, #1
 8001e78:	f000 f8aa 	bl	8001fd0 <HAL_Delay>
        timeout--;
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	81fb      	strh	r3, [r7, #14]
    while ((g_uart2_tx_done == 0) && (timeout != 0))
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <uart2_write+0x60>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <uart2_write+0x4a>
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f1      	bne.n	8001e76 <uart2_write+0x2e>
    }
    
    /* check the timeout */
    if (timeout != 0)
 8001e92:	89fb      	ldrh	r3, [r7, #14]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <uart2_write+0x54>
    {
        return 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <uart2_write+0x56>
    }
    else
    {
        return 1;
 8001e9c:	2301      	movs	r3, #1
    }
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200013dc 	.word	0x200013dc
 8001eac:	20001354 	.word	0x20001354

08001eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb4:	f7ff ffb6 	bl	8001e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb8:	480c      	ldr	r0, [pc, #48]	; (8001eec <LoopForever+0x6>)
  ldr r1, =_edata
 8001eba:	490d      	ldr	r1, [pc, #52]	; (8001ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <LoopForever+0xe>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed0:	4c0a      	ldr	r4, [pc, #40]	; (8001efc <LoopForever+0x16>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ede:	f003 feb3 	bl	8005c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ee2:	f7ff fb97 	bl	8001614 <main>

08001ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ee6:	e7fe      	b.n	8001ee6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ee8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ef4:	080073e0 	.word	0x080073e0
  ldr r2, =_sbss
 8001ef8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001efc:	200013f4 	.word	0x200013f4

08001f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC1_2_IRQHandler>
	...

08001f04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_Init+0x28>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <HAL_Init+0x28>)
 8001f0e:	f043 0310 	orr.w	r3, r3, #16
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f931 	bl	800217c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 f808 	bl	8001f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f7ff fe3a 	bl	8001b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40022000 	.word	0x40022000

08001f30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_InitTick+0x54>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x58>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f93b 	bl	80021ca <HAL_SYSTICK_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00e      	b.n	8001f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d80a      	bhi.n	8001f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f000 f911 	bl	8002192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f70:	4a06      	ldr	r2, [pc, #24]	; (8001f8c <HAL_InitTick+0x5c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20000004 	.word	0x20000004

08001f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_IncTick+0x20>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_IncTick+0x24>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_IncTick+0x24>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	200013e0 	.word	0x200013e0

08001fb8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_GetTick+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	200013e0 	.word	0x200013e0

08001fd0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff ffee 	bl	8001fb8 <HAL_GetTick>
 8001fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d005      	beq.n	8001ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_Delay+0x44>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ff6:	bf00      	nop
 8001ff8:	f7ff ffde 	bl	8001fb8 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d8f7      	bhi.n	8001ff8 <HAL_Delay+0x28>
  {
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000008 	.word	0x20000008

08002018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002034:	4013      	ands	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204a:	4a04      	ldr	r2, [pc, #16]	; (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	60d3      	str	r3, [r2, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <__NVIC_GetPriorityGrouping+0x18>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 0307 	and.w	r3, r3, #7
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	490c      	ldr	r1, [pc, #48]	; (80020c8 <__NVIC_SetPriority+0x4c>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	440b      	add	r3, r1
 80020a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a4:	e00a      	b.n	80020bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4908      	ldr	r1, [pc, #32]	; (80020cc <__NVIC_SetPriority+0x50>)
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3b04      	subs	r3, #4
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	761a      	strb	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000e100 	.word	0xe000e100
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f1c3 0307 	rsb	r3, r3, #7
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf28      	it	cs
 80020ee:	2304      	movcs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d902      	bls.n	8002100 <NVIC_EncodePriority+0x30>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3b03      	subs	r3, #3
 80020fe:	e000      	b.n	8002102 <NVIC_EncodePriority+0x32>
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 32ff 	mov.w	r2, #4294967295
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	4313      	orrs	r3, r2
         );
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002148:	d301      	bcc.n	800214e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214a:	2301      	movs	r3, #1
 800214c:	e00f      	b.n	800216e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <SysTick_Config+0x40>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002156:	210f      	movs	r1, #15
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f7ff ff8e 	bl	800207c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <SysTick_Config+0x40>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <SysTick_Config+0x40>)
 8002168:	2207      	movs	r2, #7
 800216a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	e000e010 	.word	0xe000e010

0800217c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff47 	bl	8002018 <__NVIC_SetPriorityGrouping>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a4:	f7ff ff5c 	bl	8002060 <__NVIC_GetPriorityGrouping>
 80021a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	6978      	ldr	r0, [r7, #20]
 80021b0:	f7ff ff8e 	bl	80020d0 <NVIC_EncodePriority>
 80021b4:	4602      	mov	r2, r0
 80021b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff5d 	bl	800207c <__NVIC_SetPriority>
}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ffb0 	bl	8002138 <SysTick_Config>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f2:	e14e      	b.n	8002492 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	4013      	ands	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8140 	beq.w	800248c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d005      	beq.n	8002224 <HAL_GPIO_Init+0x40>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d130      	bne.n	8002286 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225a:	2201      	movs	r2, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f003 0201 	and.w	r2, r3, #1
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b03      	cmp	r3, #3
 8002290:	d017      	beq.n	80022c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d123      	bne.n	8002316 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	08da      	lsrs	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3208      	adds	r2, #8
 8002310:	6939      	ldr	r1, [r7, #16]
 8002312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0203 	and.w	r2, r3, #3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 809a 	beq.w	800248c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002358:	4b55      	ldr	r3, [pc, #340]	; (80024b0 <HAL_GPIO_Init+0x2cc>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a54      	ldr	r2, [pc, #336]	; (80024b0 <HAL_GPIO_Init+0x2cc>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <HAL_GPIO_Init+0x2cc>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002370:	4a50      	ldr	r2, [pc, #320]	; (80024b4 <HAL_GPIO_Init+0x2d0>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800239a:	d013      	beq.n	80023c4 <HAL_GPIO_Init+0x1e0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a46      	ldr	r2, [pc, #280]	; (80024b8 <HAL_GPIO_Init+0x2d4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00d      	beq.n	80023c0 <HAL_GPIO_Init+0x1dc>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a45      	ldr	r2, [pc, #276]	; (80024bc <HAL_GPIO_Init+0x2d8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d007      	beq.n	80023bc <HAL_GPIO_Init+0x1d8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a44      	ldr	r2, [pc, #272]	; (80024c0 <HAL_GPIO_Init+0x2dc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_GPIO_Init+0x1d4>
 80023b4:	2303      	movs	r3, #3
 80023b6:	e006      	b.n	80023c6 <HAL_GPIO_Init+0x1e2>
 80023b8:	2305      	movs	r3, #5
 80023ba:	e004      	b.n	80023c6 <HAL_GPIO_Init+0x1e2>
 80023bc:	2302      	movs	r3, #2
 80023be:	e002      	b.n	80023c6 <HAL_GPIO_Init+0x1e2>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_GPIO_Init+0x1e2>
 80023c4:	2300      	movs	r3, #0
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	f002 0203 	and.w	r2, r2, #3
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	4093      	lsls	r3, r2
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023d6:	4937      	ldr	r1, [pc, #220]	; (80024b4 <HAL_GPIO_Init+0x2d0>)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e4:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002408:	4a2e      	ldr	r2, [pc, #184]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002432:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002438:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002486:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3301      	adds	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	f47f aea9 	bne.w	80021f4 <HAL_GPIO_Init+0x10>
  }
}
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010000 	.word	0x40010000
 80024b8:	48000400 	.word	0x48000400
 80024bc:	48000800 	.word	0x48000800
 80024c0:	48000c00 	.word	0x48000c00
 80024c4:	40010400 	.word	0x40010400

080024c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80024d6:	e0b2      	b.n	800263e <HAL_GPIO_DeInit+0x176>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024d8:	2201      	movs	r2, #1
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a5 	beq.w	8002638 <HAL_GPIO_DeInit+0x170>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80024ee:	4a5b      	ldr	r2, [pc, #364]	; (800265c <HAL_GPIO_DeInit+0x194>)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002516:	d013      	beq.n	8002540 <HAL_GPIO_DeInit+0x78>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a51      	ldr	r2, [pc, #324]	; (8002660 <HAL_GPIO_DeInit+0x198>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00d      	beq.n	800253c <HAL_GPIO_DeInit+0x74>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a50      	ldr	r2, [pc, #320]	; (8002664 <HAL_GPIO_DeInit+0x19c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d007      	beq.n	8002538 <HAL_GPIO_DeInit+0x70>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <HAL_GPIO_DeInit+0x1a0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d101      	bne.n	8002534 <HAL_GPIO_DeInit+0x6c>
 8002530:	2303      	movs	r3, #3
 8002532:	e006      	b.n	8002542 <HAL_GPIO_DeInit+0x7a>
 8002534:	2305      	movs	r3, #5
 8002536:	e004      	b.n	8002542 <HAL_GPIO_DeInit+0x7a>
 8002538:	2302      	movs	r3, #2
 800253a:	e002      	b.n	8002542 <HAL_GPIO_DeInit+0x7a>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_GPIO_DeInit+0x7a>
 8002540:	2300      	movs	r3, #0
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	f002 0203 	and.w	r2, r2, #3
 8002548:	0092      	lsls	r2, r2, #2
 800254a:	4093      	lsls	r3, r2
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	429a      	cmp	r2, r3
 8002550:	d132      	bne.n	80025b8 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002552:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_GPIO_DeInit+0x1a4>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	4944      	ldr	r1, [pc, #272]	; (800266c <HAL_GPIO_DeInit+0x1a4>)
 800255c:	4013      	ands	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002560:	4b42      	ldr	r3, [pc, #264]	; (800266c <HAL_GPIO_DeInit+0x1a4>)
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	4940      	ldr	r1, [pc, #256]	; (800266c <HAL_GPIO_DeInit+0x1a4>)
 800256a:	4013      	ands	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800256e:	4b3f      	ldr	r3, [pc, #252]	; (800266c <HAL_GPIO_DeInit+0x1a4>)
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	493d      	ldr	r1, [pc, #244]	; (800266c <HAL_GPIO_DeInit+0x1a4>)
 8002578:	4013      	ands	r3, r2
 800257a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800257c:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_GPIO_DeInit+0x1a4>)
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	4939      	ldr	r1, [pc, #228]	; (800266c <HAL_GPIO_DeInit+0x1a4>)
 8002586:	4013      	ands	r3, r2
 8002588:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800259a:	4a30      	ldr	r2, [pc, #192]	; (800265c <HAL_GPIO_DeInit+0x194>)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43da      	mvns	r2, r3
 80025aa:	482c      	ldr	r0, [pc, #176]	; (800265c <HAL_GPIO_DeInit+0x194>)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	400a      	ands	r2, r1
 80025b2:	3302      	adds	r3, #2
 80025b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2103      	movs	r1, #3
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	401a      	ands	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	08da      	lsrs	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3208      	adds	r2, #8
 80025d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	08d2      	lsrs	r2, r2, #3
 80025ee:	4019      	ands	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2103      	movs	r1, #3
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	401a      	ands	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	2101      	movs	r1, #1
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	401a      	ands	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2103      	movs	r1, #3
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	f47f af46 	bne.w	80024d8 <HAL_GPIO_DeInit+0x10>
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40010000 	.word	0x40010000
 8002660:	48000400 	.word	0x48000400
 8002664:	48000800 	.word	0x48000800
 8002668:	48000c00 	.word	0x48000c00
 800266c:	40010400 	.word	0x40010400

08002670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
 800267c:	4613      	mov	r3, r2
 800267e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800268c:	e002      	b.n	8002694 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	f001 b823 	b.w	800370c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 817d 	beq.w	80029d6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026dc:	4bbc      	ldr	r3, [pc, #752]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d00c      	beq.n	8002702 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026e8:	4bb9      	ldr	r3, [pc, #740]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d15c      	bne.n	80027ae <HAL_RCC_OscConfig+0x10e>
 80026f4:	4bb6      	ldr	r3, [pc, #728]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002700:	d155      	bne.n	80027ae <HAL_RCC_OscConfig+0x10e>
 8002702:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002706:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002716:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d102      	bne.n	8002734 <HAL_RCC_OscConfig+0x94>
 800272e:	4ba8      	ldr	r3, [pc, #672]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	e015      	b.n	8002760 <HAL_RCC_OscConfig+0xc0>
 8002734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002738:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002750:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800275c:	4b9c      	ldr	r3, [pc, #624]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002764:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002768:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800276c:	fa92 f2a2 	rbit	r2, r2
 8002770:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002774:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002778:	fab2 f282 	clz	r2, r2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f042 0220 	orr.w	r2, r2, #32
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f002 021f 	and.w	r2, r2, #31
 8002788:	2101      	movs	r1, #1
 800278a:	fa01 f202 	lsl.w	r2, r1, r2
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 811f 	beq.w	80029d4 <HAL_RCC_OscConfig+0x334>
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 8116 	bne.w	80029d4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f000 bfaf 	b.w	800370c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027be:	d106      	bne.n	80027ce <HAL_RCC_OscConfig+0x12e>
 80027c0:	4b83      	ldr	r3, [pc, #524]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a82      	ldr	r2, [pc, #520]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 80027c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	e036      	b.n	800283c <HAL_RCC_OscConfig+0x19c>
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x158>
 80027de:	4b7c      	ldr	r3, [pc, #496]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a7b      	ldr	r2, [pc, #492]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b79      	ldr	r3, [pc, #484]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a78      	ldr	r2, [pc, #480]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 80027f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e021      	b.n	800283c <HAL_RCC_OscConfig+0x19c>
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x184>
 800280a:	4b71      	ldr	r3, [pc, #452]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a70      	ldr	r2, [pc, #448]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b6e      	ldr	r3, [pc, #440]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6d      	ldr	r2, [pc, #436]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0x19c>
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a69      	ldr	r2, [pc, #420]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a66      	ldr	r2, [pc, #408]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f023 020f 	bic.w	r2, r3, #15
 8002844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002848:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	495f      	ldr	r1, [pc, #380]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 8002852:	4313      	orrs	r3, r2
 8002854:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d059      	beq.n	800291a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7ff fba7 	bl	8001fb8 <HAL_GetTick>
 800286a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	e00a      	b.n	8002886 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002870:	f7ff fba2 	bl	8001fb8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b64      	cmp	r3, #100	; 0x64
 800287e:	d902      	bls.n	8002886 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	f000 bf43 	b.w	800370c <HAL_RCC_OscConfig+0x106c>
 8002886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800288a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800289a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_OscConfig+0x218>
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	e015      	b.n	80028e4 <HAL_RCC_OscConfig+0x244>
 80028b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028bc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80028cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028d0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80028d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80028e0:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028e8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80028ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80028f0:	fa92 f2a2 	rbit	r2, r2
 80028f4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80028f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80028fc:	fab2 f282 	clz	r2, r2
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	f042 0220 	orr.w	r2, r2, #32
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	f002 021f 	and.w	r2, r2, #31
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f202 	lsl.w	r2, r1, r2
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ab      	beq.n	8002870 <HAL_RCC_OscConfig+0x1d0>
 8002918:	e05d      	b.n	80029d6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7ff fb4d 	bl	8001fb8 <HAL_GetTick>
 800291e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff fb48 	bl	8001fb8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	; 0x64
 8002932:	d902      	bls.n	800293a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	f000 bee9 	b.w	800370c <HAL_RCC_OscConfig+0x106c>
 800293a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800294e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d102      	bne.n	800296c <HAL_RCC_OscConfig+0x2cc>
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	e015      	b.n	8002998 <HAL_RCC_OscConfig+0x2f8>
 800296c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002970:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002984:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002988:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <HAL_RCC_OscConfig+0x330>)
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800299c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80029a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80029a4:	fa92 f2a2 	rbit	r2, r2
 80029a8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80029ac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80029b0:	fab2 f282 	clz	r2, r2
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f042 0220 	orr.w	r2, r2, #32
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	f002 021f 	and.w	r2, r2, #31
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f202 	lsl.w	r2, r1, r2
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1ab      	bne.n	8002924 <HAL_RCC_OscConfig+0x284>
 80029cc:	e003      	b.n	80029d6 <HAL_RCC_OscConfig+0x336>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 817d 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029ec:	4ba6      	ldr	r3, [pc, #664]	; (8002c88 <HAL_RCC_OscConfig+0x5e8>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029f8:	4ba3      	ldr	r3, [pc, #652]	; (8002c88 <HAL_RCC_OscConfig+0x5e8>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d172      	bne.n	8002aea <HAL_RCC_OscConfig+0x44a>
 8002a04:	4ba0      	ldr	r3, [pc, #640]	; (8002c88 <HAL_RCC_OscConfig+0x5e8>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d16c      	bne.n	8002aea <HAL_RCC_OscConfig+0x44a>
 8002a10:	2302      	movs	r3, #2
 8002a12:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002a22:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d102      	bne.n	8002a40 <HAL_RCC_OscConfig+0x3a0>
 8002a3a:	4b93      	ldr	r3, [pc, #588]	; (8002c88 <HAL_RCC_OscConfig+0x5e8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	e013      	b.n	8002a68 <HAL_RCC_OscConfig+0x3c8>
 8002a40:	2302      	movs	r3, #2
 8002a42:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a52:	2302      	movs	r3, #2
 8002a54:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a64:	4b88      	ldr	r3, [pc, #544]	; (8002c88 <HAL_RCC_OscConfig+0x5e8>)
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	2202      	movs	r2, #2
 8002a6a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002a6e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a72:	fa92 f2a2 	rbit	r2, r2
 8002a76:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002a7a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002a7e:	fab2 f282 	clz	r2, r2
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f042 0220 	orr.w	r2, r2, #32
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	f002 021f 	and.w	r2, r2, #31
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f202 	lsl.w	r2, r1, r2
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x410>
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d002      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f000 be2e 	b.w	800370c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b75      	ldr	r3, [pc, #468]	; (8002c88 <HAL_RCC_OscConfig+0x5e8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	21f8      	movs	r1, #248	; 0xf8
 8002ac6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ace:	fa91 f1a1 	rbit	r1, r1
 8002ad2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ad6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ada:	fab1 f181 	clz	r1, r1
 8002ade:	b2c9      	uxtb	r1, r1
 8002ae0:	408b      	lsls	r3, r1
 8002ae2:	4969      	ldr	r1, [pc, #420]	; (8002c88 <HAL_RCC_OscConfig+0x5e8>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae8:	e0fd      	b.n	8002ce6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8088 	beq.w	8002c0c <HAL_RCC_OscConfig+0x56c>
 8002afc:	2301      	movs	r3, #1
 8002afe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	461a      	mov	r2, r3
 8002b24:	2301      	movs	r3, #1
 8002b26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7ff fa46 	bl	8001fb8 <HAL_GetTick>
 8002b2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b32:	f7ff fa41 	bl	8001fb8 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d902      	bls.n	8002b48 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	f000 bde2 	b.w	800370c <HAL_RCC_OscConfig+0x106c>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002b5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d102      	bne.n	8002b78 <HAL_RCC_OscConfig+0x4d8>
 8002b72:	4b45      	ldr	r3, [pc, #276]	; (8002c88 <HAL_RCC_OscConfig+0x5e8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	e013      	b.n	8002ba0 <HAL_RCC_OscConfig+0x500>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002b9c:	4b3a      	ldr	r3, [pc, #232]	; (8002c88 <HAL_RCC_OscConfig+0x5e8>)
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ba6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002baa:	fa92 f2a2 	rbit	r2, r2
 8002bae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002bb2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002bb6:	fab2 f282 	clz	r2, r2
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	f042 0220 	orr.w	r2, r2, #32
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	f002 021f 	and.w	r2, r2, #31
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0af      	beq.n	8002b32 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <HAL_RCC_OscConfig+0x5e8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	21f8      	movs	r1, #248	; 0xf8
 8002be8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002bf0:	fa91 f1a1 	rbit	r1, r1
 8002bf4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002bf8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002bfc:	fab1 f181 	clz	r1, r1
 8002c00:	b2c9      	uxtb	r1, r1
 8002c02:	408b      	lsls	r3, r1
 8002c04:	4920      	ldr	r1, [pc, #128]	; (8002c88 <HAL_RCC_OscConfig+0x5e8>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]
 8002c0a:	e06c      	b.n	8002ce6 <HAL_RCC_OscConfig+0x646>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002c1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	461a      	mov	r2, r3
 8002c34:	2300      	movs	r3, #0
 8002c36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7ff f9be 	bl	8001fb8 <HAL_GetTick>
 8002c3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c42:	f7ff f9b9 	bl	8001fb8 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d902      	bls.n	8002c58 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	f000 bd5a 	b.w	800370c <HAL_RCC_OscConfig+0x106c>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d104      	bne.n	8002c8c <HAL_RCC_OscConfig+0x5ec>
 8002c82:	4b01      	ldr	r3, [pc, #4]	; (8002c88 <HAL_RCC_OscConfig+0x5e8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	e015      	b.n	8002cb4 <HAL_RCC_OscConfig+0x614>
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ca4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002cb0:	4bc8      	ldr	r3, [pc, #800]	; (8002fd4 <HAL_RCC_OscConfig+0x934>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002cba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002cbe:	fa92 f2a2 	rbit	r2, r2
 8002cc2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002cc6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002cca:	fab2 f282 	clz	r2, r2
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	f042 0220 	orr.w	r2, r2, #32
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	f002 021f 	and.w	r2, r2, #31
 8002cda:	2101      	movs	r1, #1
 8002cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1ad      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8110 	beq.w	8002f1c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d079      	beq.n	8002e00 <HAL_RCC_OscConfig+0x760>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4bab      	ldr	r3, [pc, #684]	; (8002fd8 <HAL_RCC_OscConfig+0x938>)
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	461a      	mov	r2, r3
 8002d32:	2301      	movs	r3, #1
 8002d34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7ff f93f 	bl	8001fb8 <HAL_GetTick>
 8002d3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d40:	f7ff f93a 	bl	8001fb8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d902      	bls.n	8002d56 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	f000 bcdb 	b.w	800370c <HAL_RCC_OscConfig+0x106c>
 8002d56:	2302      	movs	r3, #2
 8002d58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d70:	2202      	movs	r2, #2
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	fa93 f2a3 	rbit	r2, r3
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d94:	2202      	movs	r2, #2
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002dae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db0:	4b88      	ldr	r3, [pc, #544]	; (8002fd4 <HAL_RCC_OscConfig+0x934>)
 8002db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	6019      	str	r1, [r3, #0]
 8002dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	fa93 f1a3 	rbit	r1, r3
 8002dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002dd6:	6019      	str	r1, [r3, #0]
  return result;
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	2101      	movs	r1, #1
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0a0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x6a0>
 8002dfe:	e08d      	b.n	8002f1c <HAL_RCC_OscConfig+0x87c>
 8002e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	fa93 f2a3 	rbit	r2, r3
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e22:	601a      	str	r2, [r3, #0]
  return result;
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e2c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b68      	ldr	r3, [pc, #416]	; (8002fd8 <HAL_RCC_OscConfig+0x938>)
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2300      	movs	r3, #0
 8002e40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7ff f8b9 	bl	8001fb8 <HAL_GetTick>
 8002e46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7ff f8b4 	bl	8001fb8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d902      	bls.n	8002e62 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	f000 bc55 	b.w	800370c <HAL_RCC_OscConfig+0x106c>
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	fa93 f2a3 	rbit	r2, r3
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e8e:	2202      	movs	r2, #2
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	fa93 f2a3 	rbit	r2, r3
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	fa93 f2a3 	rbit	r2, r3
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ecc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ece:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <HAL_RCC_OscConfig+0x934>)
 8002ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002eda:	2102      	movs	r1, #2
 8002edc:	6019      	str	r1, [r3, #0]
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	fa93 f1a3 	rbit	r1, r3
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ef4:	6019      	str	r1, [r3, #0]
  return result;
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	fab3 f383 	clz	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2101      	movs	r1, #1
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d197      	bne.n	8002e4c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 81a1 	beq.w	8003274 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f38:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <HAL_RCC_OscConfig+0x934>)
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d116      	bne.n	8002f72 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f44:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <HAL_RCC_OscConfig+0x934>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <HAL_RCC_OscConfig+0x934>)
 8002f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	61d3      	str	r3, [r2, #28]
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_RCC_OscConfig+0x934>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f66:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f6a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f72:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <HAL_RCC_OscConfig+0x93c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11a      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7e:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <HAL_RCC_OscConfig+0x93c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <HAL_RCC_OscConfig+0x93c>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8a:	f7ff f815 	bl	8001fb8 <HAL_GetTick>
 8002f8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	e009      	b.n	8002fa8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f94:	f7ff f810 	bl	8001fb8 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b64      	cmp	r3, #100	; 0x64
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e3b1      	b.n	800370c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <HAL_RCC_OscConfig+0x93c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d10d      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x940>
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_RCC_OscConfig+0x934>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4a02      	ldr	r2, [pc, #8]	; (8002fd4 <HAL_RCC_OscConfig+0x934>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6213      	str	r3, [r2, #32]
 8002fd0:	e03c      	b.n	800304c <HAL_RCC_OscConfig+0x9ac>
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	10908120 	.word	0x10908120
 8002fdc:	40007000 	.word	0x40007000
 8002fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10c      	bne.n	800300a <HAL_RCC_OscConfig+0x96a>
 8002ff0:	4bc1      	ldr	r3, [pc, #772]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4ac0      	ldr	r2, [pc, #768]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	6213      	str	r3, [r2, #32]
 8002ffc:	4bbe      	ldr	r3, [pc, #760]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	4abd      	ldr	r2, [pc, #756]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 8003002:	f023 0304 	bic.w	r3, r3, #4
 8003006:	6213      	str	r3, [r2, #32]
 8003008:	e020      	b.n	800304c <HAL_RCC_OscConfig+0x9ac>
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b05      	cmp	r3, #5
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0x994>
 800301a:	4bb7      	ldr	r3, [pc, #732]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4ab6      	ldr	r2, [pc, #728]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 8003020:	f043 0304 	orr.w	r3, r3, #4
 8003024:	6213      	str	r3, [r2, #32]
 8003026:	4bb4      	ldr	r3, [pc, #720]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4ab3      	ldr	r2, [pc, #716]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6213      	str	r3, [r2, #32]
 8003032:	e00b      	b.n	800304c <HAL_RCC_OscConfig+0x9ac>
 8003034:	4bb0      	ldr	r3, [pc, #704]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4aaf      	ldr	r2, [pc, #700]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	6213      	str	r3, [r2, #32]
 8003040:	4bad      	ldr	r3, [pc, #692]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4aac      	ldr	r2, [pc, #688]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 8003046:	f023 0304 	bic.w	r3, r3, #4
 800304a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800304c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003050:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8081 	beq.w	8003160 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7fe ffab 	bl	8001fb8 <HAL_GetTick>
 8003062:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe ffa6 	bl	8001fb8 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e345      	b.n	800370c <HAL_RCC_OscConfig+0x106c>
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003088:	2202      	movs	r2, #2
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	fa93 f2a3 	rbit	r2, r3
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030ac:	2202      	movs	r2, #2
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	fa93 f2a3 	rbit	r2, r3
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80030c6:	601a      	str	r2, [r3, #0]
  return result;
 80030c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030cc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80030d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f043 0302 	orr.w	r3, r3, #2
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d102      	bne.n	80030ec <HAL_RCC_OscConfig+0xa4c>
 80030e6:	4b84      	ldr	r3, [pc, #528]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	e013      	b.n	8003114 <HAL_RCC_OscConfig+0xa74>
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80030f4:	2202      	movs	r2, #2
 80030f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	fa93 f2a3 	rbit	r2, r3
 8003106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	4b79      	ldr	r3, [pc, #484]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003118:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800311c:	2102      	movs	r1, #2
 800311e:	6011      	str	r1, [r2, #0]
 8003120:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003124:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	fa92 f1a2 	rbit	r1, r2
 800312e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003132:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003136:	6011      	str	r1, [r2, #0]
  return result;
 8003138:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800313c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	fab2 f282 	clz	r2, r2
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	f002 021f 	and.w	r2, r2, #31
 8003152:	2101      	movs	r1, #1
 8003154:	fa01 f202 	lsl.w	r2, r1, r2
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d084      	beq.n	8003068 <HAL_RCC_OscConfig+0x9c8>
 800315e:	e07f      	b.n	8003260 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003160:	f7fe ff2a 	bl	8001fb8 <HAL_GetTick>
 8003164:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003168:	e00b      	b.n	8003182 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fe ff25 	bl	8001fb8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e2c4      	b.n	800370c <HAL_RCC_OscConfig+0x106c>
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800318a:	2202      	movs	r2, #2
 800318c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	fa93 f2a3 	rbit	r2, r3
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80031ae:	2202      	movs	r2, #2
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fa93 f2a3 	rbit	r2, r3
 80031c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80031c8:	601a      	str	r2, [r3, #0]
  return result;
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80031d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f043 0302 	orr.w	r3, r3, #2
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d102      	bne.n	80031ee <HAL_RCC_OscConfig+0xb4e>
 80031e8:	4b43      	ldr	r3, [pc, #268]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	e013      	b.n	8003216 <HAL_RCC_OscConfig+0xb76>
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80031f6:	2202      	movs	r2, #2
 80031f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	fa93 f2a3 	rbit	r2, r3
 8003208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800321a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800321e:	2102      	movs	r1, #2
 8003220:	6011      	str	r1, [r2, #0]
 8003222:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003226:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	fa92 f1a2 	rbit	r1, r2
 8003230:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003234:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003238:	6011      	str	r1, [r2, #0]
  return result;
 800323a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800323e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	fab2 f282 	clz	r2, r2
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	f002 021f 	and.w	r2, r2, #31
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f202 	lsl.w	r2, r1, r2
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d184      	bne.n	800316a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003260:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003268:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 800326e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003272:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8242 	beq.w	800370a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003286:	4b1c      	ldr	r3, [pc, #112]	; (80032f8 <HAL_RCC_OscConfig+0xc58>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b08      	cmp	r3, #8
 8003290:	f000 8213 	beq.w	80036ba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	f040 8162 	bne.w	800356a <HAL_RCC_OscConfig+0xeca>
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80032ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	fa93 f2a3 	rbit	r2, r3
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032ca:	601a      	str	r2, [r3, #0]
  return result;
 80032cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	461a      	mov	r2, r3
 80032e8:	2300      	movs	r3, #0
 80032ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fe64 	bl	8001fb8 <HAL_GetTick>
 80032f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f4:	e00c      	b.n	8003310 <HAL_RCC_OscConfig+0xc70>
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe fe5c 	bl	8001fb8 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e1fd      	b.n	800370c <HAL_RCC_OscConfig+0x106c>
 8003310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003314:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003318:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800331c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003322:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	fa93 f2a3 	rbit	r2, r3
 800332c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003330:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003334:	601a      	str	r2, [r3, #0]
  return result;
 8003336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800333e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d102      	bne.n	800335a <HAL_RCC_OscConfig+0xcba>
 8003354:	4bb0      	ldr	r3, [pc, #704]	; (8003618 <HAL_RCC_OscConfig+0xf78>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	e027      	b.n	80033aa <HAL_RCC_OscConfig+0xd0a>
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003362:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	fa93 f2a3 	rbit	r2, r3
 8003376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	fa93 f2a3 	rbit	r2, r3
 800339c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	4b9c      	ldr	r3, [pc, #624]	; (8003618 <HAL_RCC_OscConfig+0xf78>)
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80033b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033b6:	6011      	str	r1, [r2, #0]
 80033b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033bc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	fa92 f1a2 	rbit	r1, r2
 80033c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80033ce:	6011      	str	r1, [r2, #0]
  return result;
 80033d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	fab2 f282 	clz	r2, r2
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	f042 0220 	orr.w	r2, r2, #32
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	f002 021f 	and.w	r2, r2, #31
 80033ea:	2101      	movs	r1, #1
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d182      	bne.n	80032fc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033f6:	4b88      	ldr	r3, [pc, #544]	; (8003618 <HAL_RCC_OscConfig+0xf78>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	430b      	orrs	r3, r1
 8003418:	497f      	ldr	r1, [pc, #508]	; (8003618 <HAL_RCC_OscConfig+0xf78>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003426:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800342a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003430:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003442:	601a      	str	r2, [r3, #0]
  return result;
 8003444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003448:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800344c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003458:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	461a      	mov	r2, r3
 8003460:	2301      	movs	r3, #1
 8003462:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe fda8 	bl	8001fb8 <HAL_GetTick>
 8003468:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800346c:	e009      	b.n	8003482 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe fda3 	bl	8001fb8 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e144      	b.n	800370c <HAL_RCC_OscConfig+0x106c>
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800348a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800348e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003494:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	fa93 f2a3 	rbit	r2, r3
 800349e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034a6:	601a      	str	r2, [r3, #0]
  return result;
 80034a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_RCC_OscConfig+0xe2c>
 80034c6:	4b54      	ldr	r3, [pc, #336]	; (8003618 <HAL_RCC_OscConfig+0xf78>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	e027      	b.n	800351c <HAL_RCC_OscConfig+0xe7c>
 80034cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80034d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	fa93 f2a3 	rbit	r2, r3
 80034e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80034fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003504:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	fa93 f2a3 	rbit	r2, r3
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <HAL_RCC_OscConfig+0xf78>)
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003520:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003524:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003528:	6011      	str	r1, [r2, #0]
 800352a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800352e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	fa92 f1a2 	rbit	r1, r2
 8003538:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800353c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003540:	6011      	str	r1, [r2, #0]
  return result;
 8003542:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003546:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	fab2 f282 	clz	r2, r2
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	f042 0220 	orr.w	r2, r2, #32
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	f002 021f 	and.w	r2, r2, #31
 800355c:	2101      	movs	r1, #1
 800355e:	fa01 f202 	lsl.w	r2, r1, r2
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d082      	beq.n	800346e <HAL_RCC_OscConfig+0xdce>
 8003568:	e0cf      	b.n	800370a <HAL_RCC_OscConfig+0x106a>
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003572:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	fa93 f2a3 	rbit	r2, r3
 8003586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800358e:	601a      	str	r2, [r3, #0]
  return result;
 8003590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003594:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003598:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	461a      	mov	r2, r3
 80035ac:	2300      	movs	r3, #0
 80035ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe fd02 	bl	8001fb8 <HAL_GetTick>
 80035b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b8:	e009      	b.n	80035ce <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fe fcfd 	bl	8001fb8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e09e      	b.n	800370c <HAL_RCC_OscConfig+0x106c>
 80035ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80035d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	fa93 f2a3 	rbit	r2, r3
 80035ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035f2:	601a      	str	r2, [r3, #0]
  return result;
 80035f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d104      	bne.n	800361c <HAL_RCC_OscConfig+0xf7c>
 8003612:	4b01      	ldr	r3, [pc, #4]	; (8003618 <HAL_RCC_OscConfig+0xf78>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	e029      	b.n	800366c <HAL_RCC_OscConfig+0xfcc>
 8003618:	40021000 	.word	0x40021000
 800361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003620:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003624:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003628:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	fa93 f2a3 	rbit	r2, r3
 8003638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003646:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800364a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003654:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	fa93 f2a3 	rbit	r2, r3
 800365e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003662:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_RCC_OscConfig+0x1078>)
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003670:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003674:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003678:	6011      	str	r1, [r2, #0]
 800367a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800367e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	fa92 f1a2 	rbit	r1, r2
 8003688:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800368c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003690:	6011      	str	r1, [r2, #0]
  return result;
 8003692:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003696:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	fab2 f282 	clz	r2, r2
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	f042 0220 	orr.w	r2, r2, #32
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	f002 021f 	and.w	r2, r2, #31
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f202 	lsl.w	r2, r1, r2
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d180      	bne.n	80035ba <HAL_RCC_OscConfig+0xf1a>
 80036b8:	e027      	b.n	800370a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e01e      	b.n	800370c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036ce:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_RCC_OscConfig+0x1078>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d10b      	bne.n	8003706 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80036ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003702:	429a      	cmp	r2, r3
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000

0800371c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b09e      	sub	sp, #120	; 0x78
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e162      	b.n	80039fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b90      	ldr	r3, [pc, #576]	; (8003978 <HAL_RCC_ClockConfig+0x25c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d910      	bls.n	8003764 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b8d      	ldr	r3, [pc, #564]	; (8003978 <HAL_RCC_ClockConfig+0x25c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 0207 	bic.w	r2, r3, #7
 800374a:	498b      	ldr	r1, [pc, #556]	; (8003978 <HAL_RCC_ClockConfig+0x25c>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b89      	ldr	r3, [pc, #548]	; (8003978 <HAL_RCC_ClockConfig+0x25c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e14a      	b.n	80039fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003770:	4b82      	ldr	r3, [pc, #520]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	497f      	ldr	r1, [pc, #508]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80dc 	beq.w	8003948 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d13c      	bne.n	8003812 <HAL_RCC_ClockConfig+0xf6>
 8003798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800379c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d102      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xa6>
 80037bc:	4b6f      	ldr	r3, [pc, #444]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	e00f      	b.n	80037e2 <HAL_RCC_ClockConfig+0xc6>
 80037c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	667b      	str	r3, [r7, #100]	; 0x64
 80037d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d4:	663b      	str	r3, [r7, #96]	; 0x60
 80037d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037de:	4b67      	ldr	r3, [pc, #412]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80037e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037ea:	fa92 f2a2 	rbit	r2, r2
 80037ee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80037f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037f2:	fab2 f282 	clz	r2, r2
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	f042 0220 	orr.w	r2, r2, #32
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	f002 021f 	and.w	r2, r2, #31
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f202 	lsl.w	r2, r1, r2
 8003808:	4013      	ands	r3, r2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d17b      	bne.n	8003906 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0f3      	b.n	80039fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d13c      	bne.n	8003894 <HAL_RCC_ClockConfig+0x178>
 800381a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800381e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d102      	bne.n	8003844 <HAL_RCC_ClockConfig+0x128>
 800383e:	4b4f      	ldr	r3, [pc, #316]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	e00f      	b.n	8003864 <HAL_RCC_ClockConfig+0x148>
 8003844:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003848:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	647b      	str	r3, [r7, #68]	; 0x44
 8003852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003856:	643b      	str	r3, [r7, #64]	; 0x40
 8003858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003860:	4b46      	ldr	r3, [pc, #280]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003868:	63ba      	str	r2, [r7, #56]	; 0x38
 800386a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800386c:	fa92 f2a2 	rbit	r2, r2
 8003870:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003874:	fab2 f282 	clz	r2, r2
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	f042 0220 	orr.w	r2, r2, #32
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	f002 021f 	and.w	r2, r2, #31
 8003884:	2101      	movs	r1, #1
 8003886:	fa01 f202 	lsl.w	r2, r1, r2
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d13a      	bne.n	8003906 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0b2      	b.n	80039fa <HAL_RCC_ClockConfig+0x2de>
 8003894:	2302      	movs	r3, #2
 8003896:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d102      	bne.n	80038bc <HAL_RCC_ClockConfig+0x1a0>
 80038b6:	4b31      	ldr	r3, [pc, #196]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	e00d      	b.n	80038d8 <HAL_RCC_ClockConfig+0x1bc>
 80038bc:	2302      	movs	r3, #2
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
 80038c8:	2302      	movs	r3, #2
 80038ca:	623b      	str	r3, [r7, #32]
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	4b29      	ldr	r3, [pc, #164]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2202      	movs	r2, #2
 80038da:	61ba      	str	r2, [r7, #24]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	fa92 f2a2 	rbit	r2, r2
 80038e2:	617a      	str	r2, [r7, #20]
  return result;
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	fab2 f282 	clz	r2, r2
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	f042 0220 	orr.w	r2, r2, #32
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	f002 021f 	and.w	r2, r2, #31
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f202 	lsl.w	r2, r1, r2
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e079      	b.n	80039fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003906:	4b1d      	ldr	r3, [pc, #116]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f023 0203 	bic.w	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	491a      	ldr	r1, [pc, #104]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003918:	f7fe fb4e 	bl	8001fb8 <HAL_GetTick>
 800391c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	e00a      	b.n	8003936 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003920:	f7fe fb4a 	bl	8001fb8 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	; 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e061      	b.n	80039fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 020c 	and.w	r2, r3, #12
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	429a      	cmp	r2, r3
 8003946:	d1eb      	bne.n	8003920 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_ClockConfig+0x25c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d214      	bcs.n	8003980 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_RCC_ClockConfig+0x25c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 0207 	bic.w	r2, r3, #7
 800395e:	4906      	ldr	r1, [pc, #24]	; (8003978 <HAL_RCC_ClockConfig+0x25c>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b04      	ldr	r3, [pc, #16]	; (8003978 <HAL_RCC_ClockConfig+0x25c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e040      	b.n	80039fa <HAL_RCC_ClockConfig+0x2de>
 8003978:	40022000 	.word	0x40022000
 800397c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_RCC_ClockConfig+0x2e8>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	491a      	ldr	r1, [pc, #104]	; (8003a04 <HAL_RCC_ClockConfig+0x2e8>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039aa:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <HAL_RCC_ClockConfig+0x2e8>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4912      	ldr	r1, [pc, #72]	; (8003a04 <HAL_RCC_ClockConfig+0x2e8>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039be:	f000 f829 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 80039c2:	4601      	mov	r1, r0
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <HAL_RCC_ClockConfig+0x2e8>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039cc:	22f0      	movs	r2, #240	; 0xf0
 80039ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	fa92 f2a2 	rbit	r2, r2
 80039d6:	60fa      	str	r2, [r7, #12]
  return result;
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	fab2 f282 	clz	r2, r2
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	40d3      	lsrs	r3, r2
 80039e2:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x2ec>)
 80039e4:	5cd3      	ldrb	r3, [r2, r3]
 80039e6:	fa21 f303 	lsr.w	r3, r1, r3
 80039ea:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <HAL_RCC_ClockConfig+0x2f0>)
 80039ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <HAL_RCC_ClockConfig+0x2f4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fa9c 	bl	8001f30 <HAL_InitTick>
  
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3778      	adds	r7, #120	; 0x78
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	0800730c 	.word	0x0800730c
 8003a0c:	20000000 	.word	0x20000000
 8003a10:	20000004 	.word	0x20000004

08003a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b08b      	sub	sp, #44	; 0x2c
 8003a18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	2300      	movs	r3, #0
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a2e:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d002      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x30>
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_GetSysClockFreq+0x36>
 8003a42:	e03c      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a44:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a46:	623b      	str	r3, [r7, #32]
      break;
 8003a48:	e03c      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a50:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a54:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	fa92 f2a2 	rbit	r2, r2
 8003a5c:	607a      	str	r2, [r7, #4]
  return result;
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	fab2 f282 	clz	r2, r2
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	40d3      	lsrs	r3, r2
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a6a:	5cd3      	ldrb	r3, [r2, r3]
 8003a6c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a6e:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	220f      	movs	r2, #15
 8003a78:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	fa92 f2a2 	rbit	r2, r2
 8003a80:	60fa      	str	r2, [r7, #12]
  return result;
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	fab2 f282 	clz	r2, r2
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	40d3      	lsrs	r3, r2
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a8e:	5cd3      	ldrb	r3, [r2, r3]
 8003a90:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003aac:	e004      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	623b      	str	r3, [r7, #32]
      break;
 8003abc:	e002      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ac0:	623b      	str	r3, [r7, #32]
      break;
 8003ac2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	372c      	adds	r7, #44	; 0x2c
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	007a1200 	.word	0x007a1200
 8003adc:	08007324 	.word	0x08007324
 8003ae0:	08007334 	.word	0x08007334
 8003ae4:	003d0900 	.word	0x003d0900

08003ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <HAL_RCC_GetHCLKFreq+0x14>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000000 	.word	0x20000000

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b06:	f7ff ffef 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b0a:	4601      	mov	r1, r0
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b14:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	fa92 f2a2 	rbit	r2, r2
 8003b20:	603a      	str	r2, [r7, #0]
  return result;
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	fab2 f282 	clz	r2, r2
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	40d3      	lsrs	r3, r2
 8003b2c:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	0800731c 	.word	0x0800731c

08003b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b4a:	f7ff ffcd 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b4e:	4601      	mov	r1, r0
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b58:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	fa92 f2a2 	rbit	r2, r2
 8003b64:	603a      	str	r2, [r7, #0]
  return result;
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	fab2 f282 	clz	r2, r2
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	40d3      	lsrs	r3, r2
 8003b70:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b72:	5cd3      	ldrb	r3, [r2, r3]
 8003b74:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	0800731c 	.word	0x0800731c

08003b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b092      	sub	sp, #72	; 0x48
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80cd 	beq.w	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bac:	4b86      	ldr	r3, [pc, #536]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10e      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb8:	4b83      	ldr	r3, [pc, #524]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	4a82      	ldr	r2, [pc, #520]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	61d3      	str	r3, [r2, #28]
 8003bc4:	4b80      	ldr	r3, [pc, #512]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd6:	4b7d      	ldr	r3, [pc, #500]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d118      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be2:	4b7a      	ldr	r3, [pc, #488]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a79      	ldr	r2, [pc, #484]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bee:	f7fe f9e3 	bl	8001fb8 <HAL_GetTick>
 8003bf2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf4:	e008      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf6:	f7fe f9df 	bl	8001fb8 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b64      	cmp	r3, #100	; 0x64
 8003c02:	d901      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e0db      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	4b70      	ldr	r3, [pc, #448]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c14:	4b6c      	ldr	r3, [pc, #432]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d07d      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d076      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c32:	4b65      	ldr	r3, [pc, #404]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c40:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b55      	ldr	r3, [pc, #340]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2300      	movs	r3, #0
 8003c82:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c84:	4a50      	ldr	r2, [pc, #320]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c88:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d045      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fe f990 	bl	8001fb8 <HAL_GetTick>
 8003c98:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fe f98c 	bl	8001fb8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e086      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	fa93 f3a3 	rbit	r3, r3
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	fa93 f3a3 	rbit	r3, r3
 8003cc8:	61fb      	str	r3, [r7, #28]
  return result;
 8003cca:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	fab3 f383 	clz	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f043 0302 	orr.w	r3, r3, #2
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d102      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ce0:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	e007      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	4b35      	ldr	r3, [pc, #212]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	613a      	str	r2, [r7, #16]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	fa92 f2a2 	rbit	r2, r2
 8003d00:	60fa      	str	r2, [r7, #12]
  return result;
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	fab2 f282 	clz	r2, r2
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	f002 021f 	and.w	r2, r2, #31
 8003d14:	2101      	movs	r1, #1
 8003d16:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0bd      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d20:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4926      	ldr	r1, [pc, #152]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d105      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d44:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d008      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d52:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f023 0203 	bic.w	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	491a      	ldr	r1, [pc, #104]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d70:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	f023 0210 	bic.w	r2, r3, #16
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4912      	ldr	r1, [pc, #72]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	490b      	ldr	r1, [pc, #44]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	4903      	ldr	r1, [pc, #12]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3748      	adds	r7, #72	; 0x48
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	10908100 	.word	0x10908100

08003dd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e095      	b.n	8003f12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d108      	bne.n	8003e00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df6:	d009      	beq.n	8003e0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	61da      	str	r2, [r3, #28]
 8003dfe:	e005      	b.n	8003e0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fd feda 	bl	8001be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e4c:	d902      	bls.n	8003e54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	e002      	b.n	8003e5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e62:	d007      	beq.n	8003e74 <HAL_SPI_Init+0xa0>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e6c:	d002      	beq.n	8003e74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	ea42 0103 	orr.w	r1, r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	0c1b      	lsrs	r3, r3, #16
 8003ed0:	f003 0204 	and.w	r2, r3, #4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ef0:	ea42 0103 	orr.w	r1, r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e01a      	b.n	8003f62 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f42:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7fd fe8d 	bl	8001c64 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b088      	sub	sp, #32
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	603b      	str	r3, [r7, #0]
 8003f76:	4613      	mov	r3, r2
 8003f78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_SPI_Transmit+0x22>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e15f      	b.n	800424c <HAL_SPI_Transmit+0x2e2>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f94:	f7fe f810 	bl	8001fb8 <HAL_GetTick>
 8003f98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d002      	beq.n	8003fb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003faa:	2302      	movs	r3, #2
 8003fac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fae:	e148      	b.n	8004242 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_SPI_Transmit+0x52>
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d102      	bne.n	8003fc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fc0:	e13f      	b.n	8004242 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	88fa      	ldrh	r2, [r7, #6]
 8003fda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	88fa      	ldrh	r2, [r7, #6]
 8003fe0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400c:	d10f      	bne.n	800402e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800401c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800402c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b40      	cmp	r3, #64	; 0x40
 800403a:	d007      	beq.n	800404c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800404a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004054:	d94f      	bls.n	80040f6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_SPI_Transmit+0xfa>
 800405e:	8afb      	ldrh	r3, [r7, #22]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d142      	bne.n	80040ea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	881a      	ldrh	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	1c9a      	adds	r2, r3, #2
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004088:	e02f      	b.n	80040ea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b02      	cmp	r3, #2
 8004096:	d112      	bne.n	80040be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040bc:	e015      	b.n	80040ea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040be:	f7fd ff7b 	bl	8001fb8 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d803      	bhi.n	80040d6 <HAL_SPI_Transmit+0x16c>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d102      	bne.n	80040dc <HAL_SPI_Transmit+0x172>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80040e8:	e0ab      	b.n	8004242 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1ca      	bne.n	800408a <HAL_SPI_Transmit+0x120>
 80040f4:	e080      	b.n	80041f8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_SPI_Transmit+0x19a>
 80040fe:	8afb      	ldrh	r3, [r7, #22]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d174      	bne.n	80041ee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d912      	bls.n	8004134 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	881a      	ldrh	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	1c9a      	adds	r2, r3, #2
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b02      	subs	r3, #2
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004132:	e05c      	b.n	80041ee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	7812      	ldrb	r2, [r2, #0]
 8004140:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800415a:	e048      	b.n	80041ee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d12b      	bne.n	80041c2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d912      	bls.n	800419a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	881a      	ldrh	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	1c9a      	adds	r2, r3, #2
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b02      	subs	r3, #2
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004198:	e029      	b.n	80041ee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041c0:	e015      	b.n	80041ee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c2:	f7fd fef9 	bl	8001fb8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d803      	bhi.n	80041da <HAL_SPI_Transmit+0x270>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d102      	bne.n	80041e0 <HAL_SPI_Transmit+0x276>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80041ec:	e029      	b.n	8004242 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1b1      	bne.n	800415c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	6839      	ldr	r1, [r7, #0]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fcf9 	bl	8004bf4 <SPI_EndRxTxTransaction>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e003      	b.n	8004242 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800424a:	7ffb      	ldrb	r3, [r7, #31]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d002      	beq.n	800427a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004274:	2302      	movs	r3, #2
 8004276:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004278:	e11a      	b.n	80044b0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004282:	d112      	bne.n	80042aa <HAL_SPI_Receive+0x56>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10e      	bne.n	80042aa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2204      	movs	r2, #4
 8004290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f90e 	bl	80044c2 <HAL_SPI_TransmitReceive>
 80042a6:	4603      	mov	r3, r0
 80042a8:	e107      	b.n	80044ba <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_SPI_Receive+0x64>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e100      	b.n	80044ba <HAL_SPI_Receive+0x266>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c0:	f7fd fe7a 	bl	8001fb8 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_SPI_Receive+0x7e>
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042d6:	e0eb      	b.n	80044b0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2204      	movs	r2, #4
 80042dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004322:	d908      	bls.n	8004336 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004332:	605a      	str	r2, [r3, #4]
 8004334:	e007      	b.n	8004346 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004344:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434e:	d10f      	bne.n	8004370 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800436e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d007      	beq.n	800438e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800438c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004396:	d86f      	bhi.n	8004478 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004398:	e034      	b.n	8004404 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d117      	bne.n	80043d8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f103 020c 	add.w	r2, r3, #12
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	7812      	ldrb	r2, [r2, #0]
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80043d6:	e015      	b.n	8004404 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043d8:	f7fd fdee 	bl	8001fb8 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d803      	bhi.n	80043f0 <HAL_SPI_Receive+0x19c>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d102      	bne.n	80043f6 <HAL_SPI_Receive+0x1a2>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004402:	e055      	b.n	80044b0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1c4      	bne.n	800439a <HAL_SPI_Receive+0x146>
 8004410:	e038      	b.n	8004484 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d115      	bne.n	800444c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	b292      	uxth	r2, r2
 800442c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	1c9a      	adds	r2, r3, #2
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800444a:	e015      	b.n	8004478 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800444c:	f7fd fdb4 	bl	8001fb8 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d803      	bhi.n	8004464 <HAL_SPI_Receive+0x210>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d102      	bne.n	800446a <HAL_SPI_Receive+0x216>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004476:	e01b      	b.n	80044b0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1c6      	bne.n	8004412 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	6839      	ldr	r1, [r7, #0]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fb5b 	bl	8004b44 <SPI_EndRxTransaction>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	75fb      	strb	r3, [r7, #23]
 80044a6:	e003      	b.n	80044b0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b08a      	sub	sp, #40	; 0x28
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044d0:	2301      	movs	r3, #1
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_SPI_TransmitReceive+0x26>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e20a      	b.n	80048fe <HAL_SPI_TransmitReceive+0x43c>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044f0:	f7fd fd62 	bl	8001fb8 <HAL_GetTick>
 80044f4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044fc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004504:	887b      	ldrh	r3, [r7, #2]
 8004506:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004508:	887b      	ldrh	r3, [r7, #2]
 800450a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800450c:	7efb      	ldrb	r3, [r7, #27]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d00e      	beq.n	8004530 <HAL_SPI_TransmitReceive+0x6e>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004518:	d106      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x66>
 8004522:	7efb      	ldrb	r3, [r7, #27]
 8004524:	2b04      	cmp	r3, #4
 8004526:	d003      	beq.n	8004530 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004528:	2302      	movs	r3, #2
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800452e:	e1e0      	b.n	80048f2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_SPI_TransmitReceive+0x80>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_SPI_TransmitReceive+0x80>
 800453c:	887b      	ldrh	r3, [r7, #2]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004548:	e1d3      	b.n	80048f2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b04      	cmp	r3, #4
 8004554:	d003      	beq.n	800455e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2205      	movs	r2, #5
 800455a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	887a      	ldrh	r2, [r7, #2]
 800456e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	887a      	ldrh	r2, [r7, #2]
 8004576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	887a      	ldrh	r2, [r7, #2]
 8004584:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	887a      	ldrh	r2, [r7, #2]
 800458a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045a0:	d802      	bhi.n	80045a8 <HAL_SPI_TransmitReceive+0xe6>
 80045a2:	8a3b      	ldrh	r3, [r7, #16]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d908      	bls.n	80045ba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045b6:	605a      	str	r2, [r3, #4]
 80045b8:	e007      	b.n	80045ca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045c8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d007      	beq.n	80045e8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045f0:	f240 8081 	bls.w	80046f6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_SPI_TransmitReceive+0x140>
 80045fc:	8a7b      	ldrh	r3, [r7, #18]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d16d      	bne.n	80046de <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	881a      	ldrh	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	1c9a      	adds	r2, r3, #2
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004626:	e05a      	b.n	80046de <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d11b      	bne.n	800466e <HAL_SPI_TransmitReceive+0x1ac>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d016      	beq.n	800466e <HAL_SPI_TransmitReceive+0x1ac>
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	2b01      	cmp	r3, #1
 8004644:	d113      	bne.n	800466e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	881a      	ldrh	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	d11c      	bne.n	80046b6 <HAL_SPI_TransmitReceive+0x1f4>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d016      	beq.n	80046b6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	b292      	uxth	r2, r2
 8004694:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	1c9a      	adds	r2, r3, #2
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046b2:	2301      	movs	r3, #1
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046b6:	f7fd fc7f 	bl	8001fb8 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d80b      	bhi.n	80046de <HAL_SPI_TransmitReceive+0x21c>
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d007      	beq.n	80046de <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80046dc:	e109      	b.n	80048f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d19f      	bne.n	8004628 <HAL_SPI_TransmitReceive+0x166>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d199      	bne.n	8004628 <HAL_SPI_TransmitReceive+0x166>
 80046f4:	e0e3      	b.n	80048be <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_SPI_TransmitReceive+0x244>
 80046fe:	8a7b      	ldrh	r3, [r7, #18]
 8004700:	2b01      	cmp	r3, #1
 8004702:	f040 80cf 	bne.w	80048a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	d912      	bls.n	8004736 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	881a      	ldrh	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	1c9a      	adds	r2, r3, #2
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b02      	subs	r3, #2
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004734:	e0b6      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800475c:	e0a2      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b02      	cmp	r3, #2
 800476a:	d134      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x314>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d02f      	beq.n	80047d6 <HAL_SPI_TransmitReceive+0x314>
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	2b01      	cmp	r3, #1
 800477a:	d12c      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b01      	cmp	r3, #1
 8004784:	d912      	bls.n	80047ac <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	881a      	ldrh	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	1c9a      	adds	r2, r3, #2
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b02      	subs	r3, #2
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047aa:	e012      	b.n	80047d2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	7812      	ldrb	r2, [r2, #0]
 80047b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d148      	bne.n	8004876 <HAL_SPI_TransmitReceive+0x3b4>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d042      	beq.n	8004876 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d923      	bls.n	8004844 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	b292      	uxth	r2, r2
 8004808:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	1c9a      	adds	r2, r3, #2
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b02      	subs	r3, #2
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b01      	cmp	r3, #1
 8004830:	d81f      	bhi.n	8004872 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	e016      	b.n	8004872 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f103 020c 	add.w	r2, r3, #12
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	7812      	ldrb	r2, [r2, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004872:	2301      	movs	r3, #1
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004876:	f7fd fb9f 	bl	8001fb8 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004882:	429a      	cmp	r2, r3
 8004884:	d803      	bhi.n	800488e <HAL_SPI_TransmitReceive+0x3cc>
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d102      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x3d2>
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	2b00      	cmp	r3, #0
 8004892:	d107      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80048a2:	e026      	b.n	80048f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f47f af57 	bne.w	800475e <HAL_SPI_TransmitReceive+0x29c>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f47f af50 	bne.w	800475e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f996 	bl	8004bf4 <SPI_EndRxTxTransaction>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e8:	e003      	b.n	80048f2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3728      	adds	r7, #40	; 0x28
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004918:	f7fd fb4e 	bl	8001fb8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	4413      	add	r3, r2
 8004926:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004928:	f7fd fb46 	bl	8001fb8 <HAL_GetTick>
 800492c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800492e:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	015b      	lsls	r3, r3, #5
 8004934:	0d1b      	lsrs	r3, r3, #20
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	fb02 f303 	mul.w	r3, r2, r3
 800493c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800493e:	e054      	b.n	80049ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d050      	beq.n	80049ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004948:	f7fd fb36 	bl	8001fb8 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	429a      	cmp	r2, r3
 8004956:	d902      	bls.n	800495e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d13d      	bne.n	80049da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800496c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004976:	d111      	bne.n	800499c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004980:	d004      	beq.n	800498c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498a:	d107      	bne.n	800499c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a4:	d10f      	bne.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e017      	b.n	8004a0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4013      	ands	r3, r2
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	bf0c      	ite	eq
 80049fa:	2301      	moveq	r3, #1
 80049fc:	2300      	movne	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	461a      	mov	r2, r3
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d19b      	bne.n	8004940 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000000 	.word	0x20000000

08004a18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a2a:	f7fd fac5 	bl	8001fb8 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	4413      	add	r3, r2
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004a3a:	f7fd fabd 	bl	8001fb8 <HAL_GetTick>
 8004a3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a48:	4b3d      	ldr	r3, [pc, #244]	; (8004b40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	00da      	lsls	r2, r3, #3
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	0d1b      	lsrs	r3, r3, #20
 8004a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a60:	e060      	b.n	8004b24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a68:	d107      	bne.n	8004a7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d104      	bne.n	8004a7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d050      	beq.n	8004b24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a82:	f7fd fa99 	bl	8001fb8 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d902      	bls.n	8004a98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d13d      	bne.n	8004b14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004aa6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab0:	d111      	bne.n	8004ad6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aba:	d004      	beq.n	8004ac6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac4:	d107      	bne.n	8004ad6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ade:	d10f      	bne.n	8004b00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004afe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e010      	b.n	8004b36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d196      	bne.n	8004a62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3728      	adds	r7, #40	; 0x28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000000 	.word	0x20000000

08004b44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b58:	d111      	bne.n	8004b7e <SPI_EndRxTransaction+0x3a>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b62:	d004      	beq.n	8004b6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6c:	d107      	bne.n	8004b7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7ff febd 	bl	8004908 <SPI_WaitFlagStateUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b98:	f043 0220 	orr.w	r2, r3, #32
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e023      	b.n	8004bec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bac:	d11d      	bne.n	8004bea <SPI_EndRxTransaction+0xa6>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb6:	d004      	beq.n	8004bc2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc0:	d113      	bne.n	8004bea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff ff22 	bl	8004a18 <SPI_WaitFifoStateUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bde:	f043 0220 	orr.w	r2, r3, #32
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e000      	b.n	8004bec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f7ff ff03 	bl	8004a18 <SPI_WaitFifoStateUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1c:	f043 0220 	orr.w	r2, r3, #32
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e027      	b.n	8004c78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2180      	movs	r1, #128	; 0x80
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff fe68 	bl	8004908 <SPI_WaitFlagStateUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c42:	f043 0220 	orr.w	r2, r3, #32
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e014      	b.n	8004c78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f7ff fedc 	bl	8004a18 <SPI_WaitFifoStateUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6a:	f043 0220 	orr.w	r2, r3, #32
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e000      	b.n	8004c78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e049      	b.n	8004d26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc fff8 	bl	8001c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f000 f8fe 	bl	8004ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_TIM_ConfigClockSource+0x1c>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e0b6      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x18a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d68:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d74:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d86:	d03e      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0xd8>
 8004d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8c:	f200 8087 	bhi.w	8004e9e <HAL_TIM_ConfigClockSource+0x170>
 8004d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d94:	f000 8086 	beq.w	8004ea4 <HAL_TIM_ConfigClockSource+0x176>
 8004d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9c:	d87f      	bhi.n	8004e9e <HAL_TIM_ConfigClockSource+0x170>
 8004d9e:	2b70      	cmp	r3, #112	; 0x70
 8004da0:	d01a      	beq.n	8004dd8 <HAL_TIM_ConfigClockSource+0xaa>
 8004da2:	2b70      	cmp	r3, #112	; 0x70
 8004da4:	d87b      	bhi.n	8004e9e <HAL_TIM_ConfigClockSource+0x170>
 8004da6:	2b60      	cmp	r3, #96	; 0x60
 8004da8:	d050      	beq.n	8004e4c <HAL_TIM_ConfigClockSource+0x11e>
 8004daa:	2b60      	cmp	r3, #96	; 0x60
 8004dac:	d877      	bhi.n	8004e9e <HAL_TIM_ConfigClockSource+0x170>
 8004dae:	2b50      	cmp	r3, #80	; 0x50
 8004db0:	d03c      	beq.n	8004e2c <HAL_TIM_ConfigClockSource+0xfe>
 8004db2:	2b50      	cmp	r3, #80	; 0x50
 8004db4:	d873      	bhi.n	8004e9e <HAL_TIM_ConfigClockSource+0x170>
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d058      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0x13e>
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	d86f      	bhi.n	8004e9e <HAL_TIM_ConfigClockSource+0x170>
 8004dbe:	2b30      	cmp	r3, #48	; 0x30
 8004dc0:	d064      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0x15e>
 8004dc2:	2b30      	cmp	r3, #48	; 0x30
 8004dc4:	d86b      	bhi.n	8004e9e <HAL_TIM_ConfigClockSource+0x170>
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d060      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0x15e>
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d867      	bhi.n	8004e9e <HAL_TIM_ConfigClockSource+0x170>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d05c      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0x15e>
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d05a      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0x15e>
 8004dd6:	e062      	b.n	8004e9e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	6899      	ldr	r1, [r3, #8]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f000 f95c 	bl	80050a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dfa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	609a      	str	r2, [r3, #8]
      break;
 8004e04:	e04f      	b.n	8004ea6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6899      	ldr	r1, [r3, #8]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f000 f945 	bl	80050a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e28:	609a      	str	r2, [r3, #8]
      break;
 8004e2a:	e03c      	b.n	8004ea6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	6859      	ldr	r1, [r3, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f000 f8b9 	bl	8004fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2150      	movs	r1, #80	; 0x50
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 f912 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004e4a:	e02c      	b.n	8004ea6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6859      	ldr	r1, [r3, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f000 f8d8 	bl	800500e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2160      	movs	r1, #96	; 0x60
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f902 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004e6a:	e01c      	b.n	8004ea6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6859      	ldr	r1, [r3, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f000 f899 	bl	8004fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2140      	movs	r1, #64	; 0x40
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 f8f2 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004e8a:	e00c      	b.n	8004ea6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f000 f8e9 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e003      	b.n	8004ea6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea2:	e000      	b.n	8004ea6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ea4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a32      	ldr	r2, [pc, #200]	; (8004f9c <TIM_Base_SetConfig+0xdc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d007      	beq.n	8004ee8 <TIM_Base_SetConfig+0x28>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0x28>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a2f      	ldr	r2, [pc, #188]	; (8004fa0 <TIM_Base_SetConfig+0xe0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d108      	bne.n	8004efa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a27      	ldr	r2, [pc, #156]	; (8004f9c <TIM_Base_SetConfig+0xdc>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <TIM_Base_SetConfig+0x6a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f08:	d00f      	beq.n	8004f2a <TIM_Base_SetConfig+0x6a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a24      	ldr	r2, [pc, #144]	; (8004fa0 <TIM_Base_SetConfig+0xe0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00b      	beq.n	8004f2a <TIM_Base_SetConfig+0x6a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a23      	ldr	r2, [pc, #140]	; (8004fa4 <TIM_Base_SetConfig+0xe4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d007      	beq.n	8004f2a <TIM_Base_SetConfig+0x6a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a22      	ldr	r2, [pc, #136]	; (8004fa8 <TIM_Base_SetConfig+0xe8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d003      	beq.n	8004f2a <TIM_Base_SetConfig+0x6a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a21      	ldr	r2, [pc, #132]	; (8004fac <TIM_Base_SetConfig+0xec>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d108      	bne.n	8004f3c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a0e      	ldr	r2, [pc, #56]	; (8004f9c <TIM_Base_SetConfig+0xdc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00b      	beq.n	8004f80 <TIM_Base_SetConfig+0xc0>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a0e      	ldr	r2, [pc, #56]	; (8004fa4 <TIM_Base_SetConfig+0xe4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d007      	beq.n	8004f80 <TIM_Base_SetConfig+0xc0>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a0d      	ldr	r2, [pc, #52]	; (8004fa8 <TIM_Base_SetConfig+0xe8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <TIM_Base_SetConfig+0xc0>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a0c      	ldr	r2, [pc, #48]	; (8004fac <TIM_Base_SetConfig+0xec>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d103      	bne.n	8004f88 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	615a      	str	r2, [r3, #20]
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400
 8004fac:	40014800 	.word	0x40014800

08004fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0201 	bic.w	r2, r3, #1
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f023 030a 	bic.w	r3, r3, #10
 8004fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800500e:	b480      	push	{r7}
 8005010:	b087      	sub	sp, #28
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f023 0210 	bic.w	r2, r3, #16
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	031b      	lsls	r3, r3, #12
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800504a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	f043 0307 	orr.w	r3, r3, #7
 8005090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	609a      	str	r2, [r3, #8]
}
 8005098:	bf00      	nop
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	021a      	lsls	r2, r3, #8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	609a      	str	r2, [r3, #8]
}
 80050d8:	bf00      	nop
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e054      	b.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a24      	ldr	r2, [pc, #144]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d108      	bne.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800512c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00e      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005164:	d009      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a11      	ldr	r2, [pc, #68]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d10c      	bne.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	4313      	orrs	r3, r2
 800518a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40014000 	.word	0x40014000

080051c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e040      	b.n	8005254 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fc fd7a 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2224      	movs	r2, #36	; 0x24
 80051ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f914 	bl	800542c <UART_SetConfig>
 8005204:	4603      	mov	r3, r0
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e022      	b.n	8005254 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa3e 	bl	8005698 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800522a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800523a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fac5 	bl	80057dc <UART_CheckIdleState>
 8005252:	4603      	mov	r3, r0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	; 0x28
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005270:	2b20      	cmp	r3, #32
 8005272:	d178      	bne.n	8005366 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_UART_Transmit+0x24>
 800527a:	88fb      	ldrh	r3, [r7, #6]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e071      	b.n	8005368 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2221      	movs	r2, #33	; 0x21
 8005290:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005292:	f7fc fe91 	bl	8001fb8 <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b0:	d108      	bne.n	80052c4 <HAL_UART_Transmit+0x68>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d104      	bne.n	80052c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	e003      	b.n	80052cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052cc:	e030      	b.n	8005330 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2200      	movs	r2, #0
 80052d6:	2180      	movs	r1, #128	; 0x80
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 fb27 	bl	800592c <UART_WaitOnFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e03c      	b.n	8005368 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10b      	bne.n	800530c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	881a      	ldrh	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005300:	b292      	uxth	r2, r2
 8005302:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	3302      	adds	r3, #2
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	e008      	b.n	800531e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	781a      	ldrb	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	b292      	uxth	r2, r2
 8005316:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	3301      	adds	r3, #1
 800531c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1c8      	bne.n	80052ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2200      	movs	r2, #0
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 faf0 	bl	800592c <UART_WaitOnFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e005      	b.n	8005368 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	e000      	b.n	8005368 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005366:	2302      	movs	r3, #2
  }
}
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005370:	b480      	push	{r7}
 8005372:	b08b      	sub	sp, #44	; 0x2c
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005382:	2b20      	cmp	r3, #32
 8005384:	d147      	bne.n	8005416 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_UART_Transmit_IT+0x22>
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e040      	b.n	8005418 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	88fa      	ldrh	r2, [r7, #6]
 80053a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	88fa      	ldrh	r2, [r7, #6]
 80053a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2221      	movs	r2, #33	; 0x21
 80053be:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c8:	d107      	bne.n	80053da <HAL_UART_Transmit_IT+0x6a>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d103      	bne.n	80053da <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4a13      	ldr	r2, [pc, #76]	; (8005424 <HAL_UART_Transmit_IT+0xb4>)
 80053d6:	66da      	str	r2, [r3, #108]	; 0x6c
 80053d8:	e002      	b.n	80053e0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4a12      	ldr	r2, [pc, #72]	; (8005428 <HAL_UART_Transmit_IT+0xb8>)
 80053de:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	613b      	str	r3, [r7, #16]
   return(result);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	623b      	str	r3, [r7, #32]
 8005400:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	69f9      	ldr	r1, [r7, #28]
 8005404:	6a3a      	ldr	r2, [r7, #32]
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	61bb      	str	r3, [r7, #24]
   return(result);
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e6      	bne.n	80053e0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	e000      	b.n	8005418 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005416:	2302      	movs	r3, #2
  }
}
 8005418:	4618      	mov	r0, r3
 800541a:	372c      	adds	r7, #44	; 0x2c
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	08005b7b 	.word	0x08005b7b
 8005428:	08005ac3 	.word	0x08005ac3

0800542c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4b8a      	ldr	r3, [pc, #552]	; (8005680 <UART_SetConfig+0x254>)
 8005458:	4013      	ands	r3, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	6979      	ldr	r1, [r7, #20]
 8005460:	430b      	orrs	r3, r1
 8005462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	430a      	orrs	r2, r1
 800549c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a78      	ldr	r2, [pc, #480]	; (8005684 <UART_SetConfig+0x258>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d120      	bne.n	80054ea <UART_SetConfig+0xbe>
 80054a8:	4b77      	ldr	r3, [pc, #476]	; (8005688 <UART_SetConfig+0x25c>)
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d817      	bhi.n	80054e4 <UART_SetConfig+0xb8>
 80054b4:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <UART_SetConfig+0x90>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054d9 	.word	0x080054d9
 80054c4:	080054df 	.word	0x080054df
 80054c8:	080054d3 	.word	0x080054d3
 80054cc:	2300      	movs	r3, #0
 80054ce:	77fb      	strb	r3, [r7, #31]
 80054d0:	e01d      	b.n	800550e <UART_SetConfig+0xe2>
 80054d2:	2302      	movs	r3, #2
 80054d4:	77fb      	strb	r3, [r7, #31]
 80054d6:	e01a      	b.n	800550e <UART_SetConfig+0xe2>
 80054d8:	2304      	movs	r3, #4
 80054da:	77fb      	strb	r3, [r7, #31]
 80054dc:	e017      	b.n	800550e <UART_SetConfig+0xe2>
 80054de:	2308      	movs	r3, #8
 80054e0:	77fb      	strb	r3, [r7, #31]
 80054e2:	e014      	b.n	800550e <UART_SetConfig+0xe2>
 80054e4:	2310      	movs	r3, #16
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e011      	b.n	800550e <UART_SetConfig+0xe2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a67      	ldr	r2, [pc, #412]	; (800568c <UART_SetConfig+0x260>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d102      	bne.n	80054fa <UART_SetConfig+0xce>
 80054f4:	2300      	movs	r3, #0
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e009      	b.n	800550e <UART_SetConfig+0xe2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a64      	ldr	r2, [pc, #400]	; (8005690 <UART_SetConfig+0x264>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d102      	bne.n	800550a <UART_SetConfig+0xde>
 8005504:	2300      	movs	r3, #0
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e001      	b.n	800550e <UART_SetConfig+0xe2>
 800550a:	2310      	movs	r3, #16
 800550c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005516:	d15a      	bne.n	80055ce <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005518:	7ffb      	ldrb	r3, [r7, #31]
 800551a:	2b08      	cmp	r3, #8
 800551c:	d827      	bhi.n	800556e <UART_SetConfig+0x142>
 800551e:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <UART_SetConfig+0xf8>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	08005549 	.word	0x08005549
 8005528:	08005551 	.word	0x08005551
 800552c:	08005559 	.word	0x08005559
 8005530:	0800556f 	.word	0x0800556f
 8005534:	0800555f 	.word	0x0800555f
 8005538:	0800556f 	.word	0x0800556f
 800553c:	0800556f 	.word	0x0800556f
 8005540:	0800556f 	.word	0x0800556f
 8005544:	08005567 	.word	0x08005567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005548:	f7fe fada 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 800554c:	61b8      	str	r0, [r7, #24]
        break;
 800554e:	e013      	b.n	8005578 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005550:	f7fe faf8 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8005554:	61b8      	str	r0, [r7, #24]
        break;
 8005556:	e00f      	b.n	8005578 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005558:	4b4e      	ldr	r3, [pc, #312]	; (8005694 <UART_SetConfig+0x268>)
 800555a:	61bb      	str	r3, [r7, #24]
        break;
 800555c:	e00c      	b.n	8005578 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800555e:	f7fe fa59 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 8005562:	61b8      	str	r0, [r7, #24]
        break;
 8005564:	e008      	b.n	8005578 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800556a:	61bb      	str	r3, [r7, #24]
        break;
 800556c:	e004      	b.n	8005578 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	77bb      	strb	r3, [r7, #30]
        break;
 8005576:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d074      	beq.n	8005668 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	005a      	lsls	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	441a      	add	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005592:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2b0f      	cmp	r3, #15
 8005598:	d916      	bls.n	80055c8 <UART_SetConfig+0x19c>
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a0:	d212      	bcs.n	80055c8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f023 030f 	bic.w	r3, r3, #15
 80055aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	89fb      	ldrh	r3, [r7, #14]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	89fa      	ldrh	r2, [r7, #14]
 80055c4:	60da      	str	r2, [r3, #12]
 80055c6:	e04f      	b.n	8005668 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	77bb      	strb	r3, [r7, #30]
 80055cc:	e04c      	b.n	8005668 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055ce:	7ffb      	ldrb	r3, [r7, #31]
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d828      	bhi.n	8005626 <UART_SetConfig+0x1fa>
 80055d4:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <UART_SetConfig+0x1b0>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	08005601 	.word	0x08005601
 80055e0:	08005609 	.word	0x08005609
 80055e4:	08005611 	.word	0x08005611
 80055e8:	08005627 	.word	0x08005627
 80055ec:	08005617 	.word	0x08005617
 80055f0:	08005627 	.word	0x08005627
 80055f4:	08005627 	.word	0x08005627
 80055f8:	08005627 	.word	0x08005627
 80055fc:	0800561f 	.word	0x0800561f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005600:	f7fe fa7e 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8005604:	61b8      	str	r0, [r7, #24]
        break;
 8005606:	e013      	b.n	8005630 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005608:	f7fe fa9c 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 800560c:	61b8      	str	r0, [r7, #24]
        break;
 800560e:	e00f      	b.n	8005630 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005610:	4b20      	ldr	r3, [pc, #128]	; (8005694 <UART_SetConfig+0x268>)
 8005612:	61bb      	str	r3, [r7, #24]
        break;
 8005614:	e00c      	b.n	8005630 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005616:	f7fe f9fd 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 800561a:	61b8      	str	r0, [r7, #24]
        break;
 800561c:	e008      	b.n	8005630 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005622:	61bb      	str	r3, [r7, #24]
        break;
 8005624:	e004      	b.n	8005630 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	77bb      	strb	r3, [r7, #30]
        break;
 800562e:	bf00      	nop
    }

    if (pclk != 0U)
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d018      	beq.n	8005668 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	085a      	lsrs	r2, r3, #1
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	441a      	add	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	fbb2 f3f3 	udiv	r3, r2, r3
 8005648:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b0f      	cmp	r3, #15
 800564e:	d909      	bls.n	8005664 <UART_SetConfig+0x238>
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005656:	d205      	bcs.n	8005664 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	b29a      	uxth	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60da      	str	r2, [r3, #12]
 8005662:	e001      	b.n	8005668 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005674:	7fbb      	ldrb	r3, [r7, #30]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	efff69f3 	.word	0xefff69f3
 8005684:	40013800 	.word	0x40013800
 8005688:	40021000 	.word	0x40021000
 800568c:	40004400 	.word	0x40004400
 8005690:	40004800 	.word	0x40004800
 8005694:	007a1200 	.word	0x007a1200

08005698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01a      	beq.n	80057ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005796:	d10a      	bne.n	80057ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	605a      	str	r2, [r3, #4]
  }
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b098      	sub	sp, #96	; 0x60
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057ec:	f7fc fbe4 	bl	8001fb8 <HAL_GetTick>
 80057f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0308 	and.w	r3, r3, #8
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d12e      	bne.n	800585e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005808:	2200      	movs	r2, #0
 800580a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f88c 	bl	800592c <UART_WaitOnFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d021      	beq.n	800585e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800582e:	653b      	str	r3, [r7, #80]	; 0x50
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
 800583a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800583e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e6      	bne.n	800581a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e062      	b.n	8005924 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b04      	cmp	r3, #4
 800586a:	d149      	bne.n	8005900 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800586c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005874:	2200      	movs	r2, #0
 8005876:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f856 	bl	800592c <UART_WaitOnFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d03c      	beq.n	8005900 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	623b      	str	r3, [r7, #32]
   return(result);
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800589a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a4:	633b      	str	r3, [r7, #48]	; 0x30
 80058a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e6      	bne.n	8005886 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058d8:	61fa      	str	r2, [r7, #28]
 80058da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	69b9      	ldr	r1, [r7, #24]
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	617b      	str	r3, [r7, #20]
   return(result);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e5      	bne.n	80058b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e011      	b.n	8005924 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3758      	adds	r7, #88	; 0x58
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	4613      	mov	r3, r2
 800593a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800593c:	e049      	b.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005944:	d045      	beq.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005946:	f7fc fb37 	bl	8001fb8 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	429a      	cmp	r2, r3
 8005954:	d302      	bcc.n	800595c <UART_WaitOnFlagUntilTimeout+0x30>
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e048      	b.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	d031      	beq.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b08      	cmp	r3, #8
 800597a:	d110      	bne.n	800599e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2208      	movs	r2, #8
 8005982:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 f838 	bl	80059fa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2208      	movs	r2, #8
 800598e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e029      	b.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ac:	d111      	bne.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 f81e 	bl	80059fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e00f      	b.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4013      	ands	r3, r2
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	429a      	cmp	r2, r3
 80059e0:	bf0c      	ite	eq
 80059e2:	2301      	moveq	r3, #1
 80059e4:	2300      	movne	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d0a6      	beq.n	800593e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b095      	sub	sp, #84	; 0x54
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a20:	643b      	str	r3, [r7, #64]	; 0x40
 8005a22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e6      	bne.n	8005a02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f023 0301 	bic.w	r3, r3, #1
 8005a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3308      	adds	r3, #8
 8005a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e5      	bne.n	8005a34 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d118      	bne.n	8005aa2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f023 0310 	bic.w	r3, r3, #16
 8005a84:	647b      	str	r3, [r7, #68]	; 0x44
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6979      	ldr	r1, [r7, #20]
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e6      	bne.n	8005a70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ab6:	bf00      	nop
 8005ab8:	3754      	adds	r7, #84	; 0x54
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b08f      	sub	sp, #60	; 0x3c
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ace:	2b21      	cmp	r3, #33	; 0x21
 8005ad0:	d14d      	bne.n	8005b6e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d132      	bne.n	8005b44 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005afe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e6      	bne.n	8005ade <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b24:	633b      	str	r3, [r7, #48]	; 0x30
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	6979      	ldr	r1, [r7, #20]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e6      	bne.n	8005b10 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005b42:	e014      	b.n	8005b6e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b48:	781a      	ldrb	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	b292      	uxth	r2, r2
 8005b50:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005b6e:	bf00      	nop
 8005b70:	373c      	adds	r7, #60	; 0x3c
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b091      	sub	sp, #68	; 0x44
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b86:	2b21      	cmp	r3, #33	; 0x21
 8005b88:	d151      	bne.n	8005c2e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d132      	bne.n	8005bfc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	e853 3f00 	ldrex	r3, [r3]
 8005ba2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005baa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e6      	bne.n	8005b96 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	69b9      	ldr	r1, [r7, #24]
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	617b      	str	r3, [r7, #20]
   return(result);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e6      	bne.n	8005bc8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005bfa:	e018      	b.n	8005c2e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c00:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c04:	881a      	ldrh	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c0e:	b292      	uxth	r2, r2
 8005c10:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c16:	1c9a      	adds	r2, r3, #2
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005c2e:	bf00      	nop
 8005c30:	3744      	adds	r7, #68	; 0x44
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <__errno>:
 8005c3c:	4b01      	ldr	r3, [pc, #4]	; (8005c44 <__errno+0x8>)
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	2000000c 	.word	0x2000000c

08005c48 <__libc_init_array>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	4d0d      	ldr	r5, [pc, #52]	; (8005c80 <__libc_init_array+0x38>)
 8005c4c:	4c0d      	ldr	r4, [pc, #52]	; (8005c84 <__libc_init_array+0x3c>)
 8005c4e:	1b64      	subs	r4, r4, r5
 8005c50:	10a4      	asrs	r4, r4, #2
 8005c52:	2600      	movs	r6, #0
 8005c54:	42a6      	cmp	r6, r4
 8005c56:	d109      	bne.n	8005c6c <__libc_init_array+0x24>
 8005c58:	4d0b      	ldr	r5, [pc, #44]	; (8005c88 <__libc_init_array+0x40>)
 8005c5a:	4c0c      	ldr	r4, [pc, #48]	; (8005c8c <__libc_init_array+0x44>)
 8005c5c:	f000 fca8 	bl	80065b0 <_init>
 8005c60:	1b64      	subs	r4, r4, r5
 8005c62:	10a4      	asrs	r4, r4, #2
 8005c64:	2600      	movs	r6, #0
 8005c66:	42a6      	cmp	r6, r4
 8005c68:	d105      	bne.n	8005c76 <__libc_init_array+0x2e>
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c70:	4798      	blx	r3
 8005c72:	3601      	adds	r6, #1
 8005c74:	e7ee      	b.n	8005c54 <__libc_init_array+0xc>
 8005c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7a:	4798      	blx	r3
 8005c7c:	3601      	adds	r6, #1
 8005c7e:	e7f2      	b.n	8005c66 <__libc_init_array+0x1e>
 8005c80:	080073d8 	.word	0x080073d8
 8005c84:	080073d8 	.word	0x080073d8
 8005c88:	080073d8 	.word	0x080073d8
 8005c8c:	080073dc 	.word	0x080073dc

08005c90 <memcpy>:
 8005c90:	440a      	add	r2, r1
 8005c92:	4291      	cmp	r1, r2
 8005c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c98:	d100      	bne.n	8005c9c <memcpy+0xc>
 8005c9a:	4770      	bx	lr
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ca6:	4291      	cmp	r1, r2
 8005ca8:	d1f9      	bne.n	8005c9e <memcpy+0xe>
 8005caa:	bd10      	pop	{r4, pc}

08005cac <memset>:
 8005cac:	4402      	add	r2, r0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d100      	bne.n	8005cb6 <memset+0xa>
 8005cb4:	4770      	bx	lr
 8005cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cba:	e7f9      	b.n	8005cb0 <memset+0x4>

08005cbc <_vsniprintf_r>:
 8005cbc:	b530      	push	{r4, r5, lr}
 8005cbe:	4614      	mov	r4, r2
 8005cc0:	2c00      	cmp	r4, #0
 8005cc2:	b09b      	sub	sp, #108	; 0x6c
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	da05      	bge.n	8005cd6 <_vsniprintf_r+0x1a>
 8005cca:	238b      	movs	r3, #139	; 0x8b
 8005ccc:	6003      	str	r3, [r0, #0]
 8005cce:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd2:	b01b      	add	sp, #108	; 0x6c
 8005cd4:	bd30      	pop	{r4, r5, pc}
 8005cd6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005cda:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005cde:	bf14      	ite	ne
 8005ce0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ce4:	4623      	moveq	r3, r4
 8005ce6:	9302      	str	r3, [sp, #8]
 8005ce8:	9305      	str	r3, [sp, #20]
 8005cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cee:	9100      	str	r1, [sp, #0]
 8005cf0:	9104      	str	r1, [sp, #16]
 8005cf2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005cf6:	4669      	mov	r1, sp
 8005cf8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cfa:	f000 f955 	bl	8005fa8 <_svfiprintf_r>
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	bfbc      	itt	lt
 8005d02:	238b      	movlt	r3, #139	; 0x8b
 8005d04:	602b      	strlt	r3, [r5, #0]
 8005d06:	2c00      	cmp	r4, #0
 8005d08:	d0e3      	beq.n	8005cd2 <_vsniprintf_r+0x16>
 8005d0a:	9b00      	ldr	r3, [sp, #0]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e7df      	b.n	8005cd2 <_vsniprintf_r+0x16>
	...

08005d14 <vsniprintf>:
 8005d14:	b507      	push	{r0, r1, r2, lr}
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	460a      	mov	r2, r1
 8005d1c:	4601      	mov	r1, r0
 8005d1e:	4803      	ldr	r0, [pc, #12]	; (8005d2c <vsniprintf+0x18>)
 8005d20:	6800      	ldr	r0, [r0, #0]
 8005d22:	f7ff ffcb 	bl	8005cbc <_vsniprintf_r>
 8005d26:	b003      	add	sp, #12
 8005d28:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d2c:	2000000c 	.word	0x2000000c

08005d30 <_free_r>:
 8005d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d32:	2900      	cmp	r1, #0
 8005d34:	d044      	beq.n	8005dc0 <_free_r+0x90>
 8005d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d3a:	9001      	str	r0, [sp, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005d42:	bfb8      	it	lt
 8005d44:	18e4      	addlt	r4, r4, r3
 8005d46:	f000 fbef 	bl	8006528 <__malloc_lock>
 8005d4a:	4a1e      	ldr	r2, [pc, #120]	; (8005dc4 <_free_r+0x94>)
 8005d4c:	9801      	ldr	r0, [sp, #4]
 8005d4e:	6813      	ldr	r3, [r2, #0]
 8005d50:	b933      	cbnz	r3, 8005d60 <_free_r+0x30>
 8005d52:	6063      	str	r3, [r4, #4]
 8005d54:	6014      	str	r4, [r2, #0]
 8005d56:	b003      	add	sp, #12
 8005d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d5c:	f000 bbea 	b.w	8006534 <__malloc_unlock>
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	d908      	bls.n	8005d76 <_free_r+0x46>
 8005d64:	6825      	ldr	r5, [r4, #0]
 8005d66:	1961      	adds	r1, r4, r5
 8005d68:	428b      	cmp	r3, r1
 8005d6a:	bf01      	itttt	eq
 8005d6c:	6819      	ldreq	r1, [r3, #0]
 8005d6e:	685b      	ldreq	r3, [r3, #4]
 8005d70:	1949      	addeq	r1, r1, r5
 8005d72:	6021      	streq	r1, [r4, #0]
 8005d74:	e7ed      	b.n	8005d52 <_free_r+0x22>
 8005d76:	461a      	mov	r2, r3
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	b10b      	cbz	r3, 8005d80 <_free_r+0x50>
 8005d7c:	42a3      	cmp	r3, r4
 8005d7e:	d9fa      	bls.n	8005d76 <_free_r+0x46>
 8005d80:	6811      	ldr	r1, [r2, #0]
 8005d82:	1855      	adds	r5, r2, r1
 8005d84:	42a5      	cmp	r5, r4
 8005d86:	d10b      	bne.n	8005da0 <_free_r+0x70>
 8005d88:	6824      	ldr	r4, [r4, #0]
 8005d8a:	4421      	add	r1, r4
 8005d8c:	1854      	adds	r4, r2, r1
 8005d8e:	42a3      	cmp	r3, r4
 8005d90:	6011      	str	r1, [r2, #0]
 8005d92:	d1e0      	bne.n	8005d56 <_free_r+0x26>
 8005d94:	681c      	ldr	r4, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	6053      	str	r3, [r2, #4]
 8005d9a:	4421      	add	r1, r4
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	e7da      	b.n	8005d56 <_free_r+0x26>
 8005da0:	d902      	bls.n	8005da8 <_free_r+0x78>
 8005da2:	230c      	movs	r3, #12
 8005da4:	6003      	str	r3, [r0, #0]
 8005da6:	e7d6      	b.n	8005d56 <_free_r+0x26>
 8005da8:	6825      	ldr	r5, [r4, #0]
 8005daa:	1961      	adds	r1, r4, r5
 8005dac:	428b      	cmp	r3, r1
 8005dae:	bf04      	itt	eq
 8005db0:	6819      	ldreq	r1, [r3, #0]
 8005db2:	685b      	ldreq	r3, [r3, #4]
 8005db4:	6063      	str	r3, [r4, #4]
 8005db6:	bf04      	itt	eq
 8005db8:	1949      	addeq	r1, r1, r5
 8005dba:	6021      	streq	r1, [r4, #0]
 8005dbc:	6054      	str	r4, [r2, #4]
 8005dbe:	e7ca      	b.n	8005d56 <_free_r+0x26>
 8005dc0:	b003      	add	sp, #12
 8005dc2:	bd30      	pop	{r4, r5, pc}
 8005dc4:	200013e4 	.word	0x200013e4

08005dc8 <sbrk_aligned>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	4e0e      	ldr	r6, [pc, #56]	; (8005e04 <sbrk_aligned+0x3c>)
 8005dcc:	460c      	mov	r4, r1
 8005dce:	6831      	ldr	r1, [r6, #0]
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	b911      	cbnz	r1, 8005dda <sbrk_aligned+0x12>
 8005dd4:	f000 fb7c 	bl	80064d0 <_sbrk_r>
 8005dd8:	6030      	str	r0, [r6, #0]
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f000 fb77 	bl	80064d0 <_sbrk_r>
 8005de2:	1c43      	adds	r3, r0, #1
 8005de4:	d00a      	beq.n	8005dfc <sbrk_aligned+0x34>
 8005de6:	1cc4      	adds	r4, r0, #3
 8005de8:	f024 0403 	bic.w	r4, r4, #3
 8005dec:	42a0      	cmp	r0, r4
 8005dee:	d007      	beq.n	8005e00 <sbrk_aligned+0x38>
 8005df0:	1a21      	subs	r1, r4, r0
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 fb6c 	bl	80064d0 <_sbrk_r>
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d101      	bne.n	8005e00 <sbrk_aligned+0x38>
 8005dfc:	f04f 34ff 	mov.w	r4, #4294967295
 8005e00:	4620      	mov	r0, r4
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	200013e8 	.word	0x200013e8

08005e08 <_malloc_r>:
 8005e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0c:	1ccd      	adds	r5, r1, #3
 8005e0e:	f025 0503 	bic.w	r5, r5, #3
 8005e12:	3508      	adds	r5, #8
 8005e14:	2d0c      	cmp	r5, #12
 8005e16:	bf38      	it	cc
 8005e18:	250c      	movcc	r5, #12
 8005e1a:	2d00      	cmp	r5, #0
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	db01      	blt.n	8005e24 <_malloc_r+0x1c>
 8005e20:	42a9      	cmp	r1, r5
 8005e22:	d905      	bls.n	8005e30 <_malloc_r+0x28>
 8005e24:	230c      	movs	r3, #12
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	2600      	movs	r6, #0
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e30:	4e2e      	ldr	r6, [pc, #184]	; (8005eec <_malloc_r+0xe4>)
 8005e32:	f000 fb79 	bl	8006528 <__malloc_lock>
 8005e36:	6833      	ldr	r3, [r6, #0]
 8005e38:	461c      	mov	r4, r3
 8005e3a:	bb34      	cbnz	r4, 8005e8a <_malloc_r+0x82>
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	4638      	mov	r0, r7
 8005e40:	f7ff ffc2 	bl	8005dc8 <sbrk_aligned>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	4604      	mov	r4, r0
 8005e48:	d14d      	bne.n	8005ee6 <_malloc_r+0xde>
 8005e4a:	6834      	ldr	r4, [r6, #0]
 8005e4c:	4626      	mov	r6, r4
 8005e4e:	2e00      	cmp	r6, #0
 8005e50:	d140      	bne.n	8005ed4 <_malloc_r+0xcc>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	4631      	mov	r1, r6
 8005e56:	4638      	mov	r0, r7
 8005e58:	eb04 0803 	add.w	r8, r4, r3
 8005e5c:	f000 fb38 	bl	80064d0 <_sbrk_r>
 8005e60:	4580      	cmp	r8, r0
 8005e62:	d13a      	bne.n	8005eda <_malloc_r+0xd2>
 8005e64:	6821      	ldr	r1, [r4, #0]
 8005e66:	3503      	adds	r5, #3
 8005e68:	1a6d      	subs	r5, r5, r1
 8005e6a:	f025 0503 	bic.w	r5, r5, #3
 8005e6e:	3508      	adds	r5, #8
 8005e70:	2d0c      	cmp	r5, #12
 8005e72:	bf38      	it	cc
 8005e74:	250c      	movcc	r5, #12
 8005e76:	4629      	mov	r1, r5
 8005e78:	4638      	mov	r0, r7
 8005e7a:	f7ff ffa5 	bl	8005dc8 <sbrk_aligned>
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d02b      	beq.n	8005eda <_malloc_r+0xd2>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	442b      	add	r3, r5
 8005e86:	6023      	str	r3, [r4, #0]
 8005e88:	e00e      	b.n	8005ea8 <_malloc_r+0xa0>
 8005e8a:	6822      	ldr	r2, [r4, #0]
 8005e8c:	1b52      	subs	r2, r2, r5
 8005e8e:	d41e      	bmi.n	8005ece <_malloc_r+0xc6>
 8005e90:	2a0b      	cmp	r2, #11
 8005e92:	d916      	bls.n	8005ec2 <_malloc_r+0xba>
 8005e94:	1961      	adds	r1, r4, r5
 8005e96:	42a3      	cmp	r3, r4
 8005e98:	6025      	str	r5, [r4, #0]
 8005e9a:	bf18      	it	ne
 8005e9c:	6059      	strne	r1, [r3, #4]
 8005e9e:	6863      	ldr	r3, [r4, #4]
 8005ea0:	bf08      	it	eq
 8005ea2:	6031      	streq	r1, [r6, #0]
 8005ea4:	5162      	str	r2, [r4, r5]
 8005ea6:	604b      	str	r3, [r1, #4]
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f104 060b 	add.w	r6, r4, #11
 8005eae:	f000 fb41 	bl	8006534 <__malloc_unlock>
 8005eb2:	f026 0607 	bic.w	r6, r6, #7
 8005eb6:	1d23      	adds	r3, r4, #4
 8005eb8:	1af2      	subs	r2, r6, r3
 8005eba:	d0b6      	beq.n	8005e2a <_malloc_r+0x22>
 8005ebc:	1b9b      	subs	r3, r3, r6
 8005ebe:	50a3      	str	r3, [r4, r2]
 8005ec0:	e7b3      	b.n	8005e2a <_malloc_r+0x22>
 8005ec2:	6862      	ldr	r2, [r4, #4]
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	bf0c      	ite	eq
 8005ec8:	6032      	streq	r2, [r6, #0]
 8005eca:	605a      	strne	r2, [r3, #4]
 8005ecc:	e7ec      	b.n	8005ea8 <_malloc_r+0xa0>
 8005ece:	4623      	mov	r3, r4
 8005ed0:	6864      	ldr	r4, [r4, #4]
 8005ed2:	e7b2      	b.n	8005e3a <_malloc_r+0x32>
 8005ed4:	4634      	mov	r4, r6
 8005ed6:	6876      	ldr	r6, [r6, #4]
 8005ed8:	e7b9      	b.n	8005e4e <_malloc_r+0x46>
 8005eda:	230c      	movs	r3, #12
 8005edc:	603b      	str	r3, [r7, #0]
 8005ede:	4638      	mov	r0, r7
 8005ee0:	f000 fb28 	bl	8006534 <__malloc_unlock>
 8005ee4:	e7a1      	b.n	8005e2a <_malloc_r+0x22>
 8005ee6:	6025      	str	r5, [r4, #0]
 8005ee8:	e7de      	b.n	8005ea8 <_malloc_r+0xa0>
 8005eea:	bf00      	nop
 8005eec:	200013e4 	.word	0x200013e4

08005ef0 <__ssputs_r>:
 8005ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	688e      	ldr	r6, [r1, #8]
 8005ef6:	429e      	cmp	r6, r3
 8005ef8:	4682      	mov	sl, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	4690      	mov	r8, r2
 8005efe:	461f      	mov	r7, r3
 8005f00:	d838      	bhi.n	8005f74 <__ssputs_r+0x84>
 8005f02:	898a      	ldrh	r2, [r1, #12]
 8005f04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f08:	d032      	beq.n	8005f70 <__ssputs_r+0x80>
 8005f0a:	6825      	ldr	r5, [r4, #0]
 8005f0c:	6909      	ldr	r1, [r1, #16]
 8005f0e:	eba5 0901 	sub.w	r9, r5, r1
 8005f12:	6965      	ldr	r5, [r4, #20]
 8005f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	444b      	add	r3, r9
 8005f20:	106d      	asrs	r5, r5, #1
 8005f22:	429d      	cmp	r5, r3
 8005f24:	bf38      	it	cc
 8005f26:	461d      	movcc	r5, r3
 8005f28:	0553      	lsls	r3, r2, #21
 8005f2a:	d531      	bpl.n	8005f90 <__ssputs_r+0xa0>
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	f7ff ff6b 	bl	8005e08 <_malloc_r>
 8005f32:	4606      	mov	r6, r0
 8005f34:	b950      	cbnz	r0, 8005f4c <__ssputs_r+0x5c>
 8005f36:	230c      	movs	r3, #12
 8005f38:	f8ca 3000 	str.w	r3, [sl]
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f42:	81a3      	strh	r3, [r4, #12]
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4c:	6921      	ldr	r1, [r4, #16]
 8005f4e:	464a      	mov	r2, r9
 8005f50:	f7ff fe9e 	bl	8005c90 <memcpy>
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5e:	81a3      	strh	r3, [r4, #12]
 8005f60:	6126      	str	r6, [r4, #16]
 8005f62:	6165      	str	r5, [r4, #20]
 8005f64:	444e      	add	r6, r9
 8005f66:	eba5 0509 	sub.w	r5, r5, r9
 8005f6a:	6026      	str	r6, [r4, #0]
 8005f6c:	60a5      	str	r5, [r4, #8]
 8005f6e:	463e      	mov	r6, r7
 8005f70:	42be      	cmp	r6, r7
 8005f72:	d900      	bls.n	8005f76 <__ssputs_r+0x86>
 8005f74:	463e      	mov	r6, r7
 8005f76:	6820      	ldr	r0, [r4, #0]
 8005f78:	4632      	mov	r2, r6
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	f000 faba 	bl	80064f4 <memmove>
 8005f80:	68a3      	ldr	r3, [r4, #8]
 8005f82:	1b9b      	subs	r3, r3, r6
 8005f84:	60a3      	str	r3, [r4, #8]
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	4433      	add	r3, r6
 8005f8a:	6023      	str	r3, [r4, #0]
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e7db      	b.n	8005f48 <__ssputs_r+0x58>
 8005f90:	462a      	mov	r2, r5
 8005f92:	f000 fad5 	bl	8006540 <_realloc_r>
 8005f96:	4606      	mov	r6, r0
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d1e1      	bne.n	8005f60 <__ssputs_r+0x70>
 8005f9c:	6921      	ldr	r1, [r4, #16]
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	f7ff fec6 	bl	8005d30 <_free_r>
 8005fa4:	e7c7      	b.n	8005f36 <__ssputs_r+0x46>
	...

08005fa8 <_svfiprintf_r>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	4698      	mov	r8, r3
 8005fae:	898b      	ldrh	r3, [r1, #12]
 8005fb0:	061b      	lsls	r3, r3, #24
 8005fb2:	b09d      	sub	sp, #116	; 0x74
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	460d      	mov	r5, r1
 8005fb8:	4614      	mov	r4, r2
 8005fba:	d50e      	bpl.n	8005fda <_svfiprintf_r+0x32>
 8005fbc:	690b      	ldr	r3, [r1, #16]
 8005fbe:	b963      	cbnz	r3, 8005fda <_svfiprintf_r+0x32>
 8005fc0:	2140      	movs	r1, #64	; 0x40
 8005fc2:	f7ff ff21 	bl	8005e08 <_malloc_r>
 8005fc6:	6028      	str	r0, [r5, #0]
 8005fc8:	6128      	str	r0, [r5, #16]
 8005fca:	b920      	cbnz	r0, 8005fd6 <_svfiprintf_r+0x2e>
 8005fcc:	230c      	movs	r3, #12
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd4:	e0d1      	b.n	800617a <_svfiprintf_r+0x1d2>
 8005fd6:	2340      	movs	r3, #64	; 0x40
 8005fd8:	616b      	str	r3, [r5, #20]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005fde:	2320      	movs	r3, #32
 8005fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fe8:	2330      	movs	r3, #48	; 0x30
 8005fea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006194 <_svfiprintf_r+0x1ec>
 8005fee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ff2:	f04f 0901 	mov.w	r9, #1
 8005ff6:	4623      	mov	r3, r4
 8005ff8:	469a      	mov	sl, r3
 8005ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ffe:	b10a      	cbz	r2, 8006004 <_svfiprintf_r+0x5c>
 8006000:	2a25      	cmp	r2, #37	; 0x25
 8006002:	d1f9      	bne.n	8005ff8 <_svfiprintf_r+0x50>
 8006004:	ebba 0b04 	subs.w	fp, sl, r4
 8006008:	d00b      	beq.n	8006022 <_svfiprintf_r+0x7a>
 800600a:	465b      	mov	r3, fp
 800600c:	4622      	mov	r2, r4
 800600e:	4629      	mov	r1, r5
 8006010:	4638      	mov	r0, r7
 8006012:	f7ff ff6d 	bl	8005ef0 <__ssputs_r>
 8006016:	3001      	adds	r0, #1
 8006018:	f000 80aa 	beq.w	8006170 <_svfiprintf_r+0x1c8>
 800601c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800601e:	445a      	add	r2, fp
 8006020:	9209      	str	r2, [sp, #36]	; 0x24
 8006022:	f89a 3000 	ldrb.w	r3, [sl]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 80a2 	beq.w	8006170 <_svfiprintf_r+0x1c8>
 800602c:	2300      	movs	r3, #0
 800602e:	f04f 32ff 	mov.w	r2, #4294967295
 8006032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006036:	f10a 0a01 	add.w	sl, sl, #1
 800603a:	9304      	str	r3, [sp, #16]
 800603c:	9307      	str	r3, [sp, #28]
 800603e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006042:	931a      	str	r3, [sp, #104]	; 0x68
 8006044:	4654      	mov	r4, sl
 8006046:	2205      	movs	r2, #5
 8006048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800604c:	4851      	ldr	r0, [pc, #324]	; (8006194 <_svfiprintf_r+0x1ec>)
 800604e:	f7fa f8c7 	bl	80001e0 <memchr>
 8006052:	9a04      	ldr	r2, [sp, #16]
 8006054:	b9d8      	cbnz	r0, 800608e <_svfiprintf_r+0xe6>
 8006056:	06d0      	lsls	r0, r2, #27
 8006058:	bf44      	itt	mi
 800605a:	2320      	movmi	r3, #32
 800605c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006060:	0711      	lsls	r1, r2, #28
 8006062:	bf44      	itt	mi
 8006064:	232b      	movmi	r3, #43	; 0x2b
 8006066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800606a:	f89a 3000 	ldrb.w	r3, [sl]
 800606e:	2b2a      	cmp	r3, #42	; 0x2a
 8006070:	d015      	beq.n	800609e <_svfiprintf_r+0xf6>
 8006072:	9a07      	ldr	r2, [sp, #28]
 8006074:	4654      	mov	r4, sl
 8006076:	2000      	movs	r0, #0
 8006078:	f04f 0c0a 	mov.w	ip, #10
 800607c:	4621      	mov	r1, r4
 800607e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006082:	3b30      	subs	r3, #48	; 0x30
 8006084:	2b09      	cmp	r3, #9
 8006086:	d94e      	bls.n	8006126 <_svfiprintf_r+0x17e>
 8006088:	b1b0      	cbz	r0, 80060b8 <_svfiprintf_r+0x110>
 800608a:	9207      	str	r2, [sp, #28]
 800608c:	e014      	b.n	80060b8 <_svfiprintf_r+0x110>
 800608e:	eba0 0308 	sub.w	r3, r0, r8
 8006092:	fa09 f303 	lsl.w	r3, r9, r3
 8006096:	4313      	orrs	r3, r2
 8006098:	9304      	str	r3, [sp, #16]
 800609a:	46a2      	mov	sl, r4
 800609c:	e7d2      	b.n	8006044 <_svfiprintf_r+0x9c>
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	1d19      	adds	r1, r3, #4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	9103      	str	r1, [sp, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bfbb      	ittet	lt
 80060aa:	425b      	neglt	r3, r3
 80060ac:	f042 0202 	orrlt.w	r2, r2, #2
 80060b0:	9307      	strge	r3, [sp, #28]
 80060b2:	9307      	strlt	r3, [sp, #28]
 80060b4:	bfb8      	it	lt
 80060b6:	9204      	strlt	r2, [sp, #16]
 80060b8:	7823      	ldrb	r3, [r4, #0]
 80060ba:	2b2e      	cmp	r3, #46	; 0x2e
 80060bc:	d10c      	bne.n	80060d8 <_svfiprintf_r+0x130>
 80060be:	7863      	ldrb	r3, [r4, #1]
 80060c0:	2b2a      	cmp	r3, #42	; 0x2a
 80060c2:	d135      	bne.n	8006130 <_svfiprintf_r+0x188>
 80060c4:	9b03      	ldr	r3, [sp, #12]
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	9203      	str	r2, [sp, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bfb8      	it	lt
 80060d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80060d4:	3402      	adds	r4, #2
 80060d6:	9305      	str	r3, [sp, #20]
 80060d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061a4 <_svfiprintf_r+0x1fc>
 80060dc:	7821      	ldrb	r1, [r4, #0]
 80060de:	2203      	movs	r2, #3
 80060e0:	4650      	mov	r0, sl
 80060e2:	f7fa f87d 	bl	80001e0 <memchr>
 80060e6:	b140      	cbz	r0, 80060fa <_svfiprintf_r+0x152>
 80060e8:	2340      	movs	r3, #64	; 0x40
 80060ea:	eba0 000a 	sub.w	r0, r0, sl
 80060ee:	fa03 f000 	lsl.w	r0, r3, r0
 80060f2:	9b04      	ldr	r3, [sp, #16]
 80060f4:	4303      	orrs	r3, r0
 80060f6:	3401      	adds	r4, #1
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fe:	4826      	ldr	r0, [pc, #152]	; (8006198 <_svfiprintf_r+0x1f0>)
 8006100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006104:	2206      	movs	r2, #6
 8006106:	f7fa f86b 	bl	80001e0 <memchr>
 800610a:	2800      	cmp	r0, #0
 800610c:	d038      	beq.n	8006180 <_svfiprintf_r+0x1d8>
 800610e:	4b23      	ldr	r3, [pc, #140]	; (800619c <_svfiprintf_r+0x1f4>)
 8006110:	bb1b      	cbnz	r3, 800615a <_svfiprintf_r+0x1b2>
 8006112:	9b03      	ldr	r3, [sp, #12]
 8006114:	3307      	adds	r3, #7
 8006116:	f023 0307 	bic.w	r3, r3, #7
 800611a:	3308      	adds	r3, #8
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006120:	4433      	add	r3, r6
 8006122:	9309      	str	r3, [sp, #36]	; 0x24
 8006124:	e767      	b.n	8005ff6 <_svfiprintf_r+0x4e>
 8006126:	fb0c 3202 	mla	r2, ip, r2, r3
 800612a:	460c      	mov	r4, r1
 800612c:	2001      	movs	r0, #1
 800612e:	e7a5      	b.n	800607c <_svfiprintf_r+0xd4>
 8006130:	2300      	movs	r3, #0
 8006132:	3401      	adds	r4, #1
 8006134:	9305      	str	r3, [sp, #20]
 8006136:	4619      	mov	r1, r3
 8006138:	f04f 0c0a 	mov.w	ip, #10
 800613c:	4620      	mov	r0, r4
 800613e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006142:	3a30      	subs	r2, #48	; 0x30
 8006144:	2a09      	cmp	r2, #9
 8006146:	d903      	bls.n	8006150 <_svfiprintf_r+0x1a8>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0c5      	beq.n	80060d8 <_svfiprintf_r+0x130>
 800614c:	9105      	str	r1, [sp, #20]
 800614e:	e7c3      	b.n	80060d8 <_svfiprintf_r+0x130>
 8006150:	fb0c 2101 	mla	r1, ip, r1, r2
 8006154:	4604      	mov	r4, r0
 8006156:	2301      	movs	r3, #1
 8006158:	e7f0      	b.n	800613c <_svfiprintf_r+0x194>
 800615a:	ab03      	add	r3, sp, #12
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	462a      	mov	r2, r5
 8006160:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <_svfiprintf_r+0x1f8>)
 8006162:	a904      	add	r1, sp, #16
 8006164:	4638      	mov	r0, r7
 8006166:	f3af 8000 	nop.w
 800616a:	1c42      	adds	r2, r0, #1
 800616c:	4606      	mov	r6, r0
 800616e:	d1d6      	bne.n	800611e <_svfiprintf_r+0x176>
 8006170:	89ab      	ldrh	r3, [r5, #12]
 8006172:	065b      	lsls	r3, r3, #25
 8006174:	f53f af2c 	bmi.w	8005fd0 <_svfiprintf_r+0x28>
 8006178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800617a:	b01d      	add	sp, #116	; 0x74
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	ab03      	add	r3, sp, #12
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	462a      	mov	r2, r5
 8006186:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <_svfiprintf_r+0x1f8>)
 8006188:	a904      	add	r1, sp, #16
 800618a:	4638      	mov	r0, r7
 800618c:	f000 f87a 	bl	8006284 <_printf_i>
 8006190:	e7eb      	b.n	800616a <_svfiprintf_r+0x1c2>
 8006192:	bf00      	nop
 8006194:	08007344 	.word	0x08007344
 8006198:	0800734e 	.word	0x0800734e
 800619c:	00000000 	.word	0x00000000
 80061a0:	08005ef1 	.word	0x08005ef1
 80061a4:	0800734a 	.word	0x0800734a

080061a8 <_printf_common>:
 80061a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	4616      	mov	r6, r2
 80061ae:	4699      	mov	r9, r3
 80061b0:	688a      	ldr	r2, [r1, #8]
 80061b2:	690b      	ldr	r3, [r1, #16]
 80061b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061b8:	4293      	cmp	r3, r2
 80061ba:	bfb8      	it	lt
 80061bc:	4613      	movlt	r3, r2
 80061be:	6033      	str	r3, [r6, #0]
 80061c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061c4:	4607      	mov	r7, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	b10a      	cbz	r2, 80061ce <_printf_common+0x26>
 80061ca:	3301      	adds	r3, #1
 80061cc:	6033      	str	r3, [r6, #0]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	0699      	lsls	r1, r3, #26
 80061d2:	bf42      	ittt	mi
 80061d4:	6833      	ldrmi	r3, [r6, #0]
 80061d6:	3302      	addmi	r3, #2
 80061d8:	6033      	strmi	r3, [r6, #0]
 80061da:	6825      	ldr	r5, [r4, #0]
 80061dc:	f015 0506 	ands.w	r5, r5, #6
 80061e0:	d106      	bne.n	80061f0 <_printf_common+0x48>
 80061e2:	f104 0a19 	add.w	sl, r4, #25
 80061e6:	68e3      	ldr	r3, [r4, #12]
 80061e8:	6832      	ldr	r2, [r6, #0]
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	42ab      	cmp	r3, r5
 80061ee:	dc26      	bgt.n	800623e <_printf_common+0x96>
 80061f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061f4:	1e13      	subs	r3, r2, #0
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	bf18      	it	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	0692      	lsls	r2, r2, #26
 80061fe:	d42b      	bmi.n	8006258 <_printf_common+0xb0>
 8006200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006204:	4649      	mov	r1, r9
 8006206:	4638      	mov	r0, r7
 8006208:	47c0      	blx	r8
 800620a:	3001      	adds	r0, #1
 800620c:	d01e      	beq.n	800624c <_printf_common+0xa4>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	68e5      	ldr	r5, [r4, #12]
 8006212:	6832      	ldr	r2, [r6, #0]
 8006214:	f003 0306 	and.w	r3, r3, #6
 8006218:	2b04      	cmp	r3, #4
 800621a:	bf08      	it	eq
 800621c:	1aad      	subeq	r5, r5, r2
 800621e:	68a3      	ldr	r3, [r4, #8]
 8006220:	6922      	ldr	r2, [r4, #16]
 8006222:	bf0c      	ite	eq
 8006224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006228:	2500      	movne	r5, #0
 800622a:	4293      	cmp	r3, r2
 800622c:	bfc4      	itt	gt
 800622e:	1a9b      	subgt	r3, r3, r2
 8006230:	18ed      	addgt	r5, r5, r3
 8006232:	2600      	movs	r6, #0
 8006234:	341a      	adds	r4, #26
 8006236:	42b5      	cmp	r5, r6
 8006238:	d11a      	bne.n	8006270 <_printf_common+0xc8>
 800623a:	2000      	movs	r0, #0
 800623c:	e008      	b.n	8006250 <_printf_common+0xa8>
 800623e:	2301      	movs	r3, #1
 8006240:	4652      	mov	r2, sl
 8006242:	4649      	mov	r1, r9
 8006244:	4638      	mov	r0, r7
 8006246:	47c0      	blx	r8
 8006248:	3001      	adds	r0, #1
 800624a:	d103      	bne.n	8006254 <_printf_common+0xac>
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006254:	3501      	adds	r5, #1
 8006256:	e7c6      	b.n	80061e6 <_printf_common+0x3e>
 8006258:	18e1      	adds	r1, r4, r3
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	2030      	movs	r0, #48	; 0x30
 800625e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006262:	4422      	add	r2, r4
 8006264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800626c:	3302      	adds	r3, #2
 800626e:	e7c7      	b.n	8006200 <_printf_common+0x58>
 8006270:	2301      	movs	r3, #1
 8006272:	4622      	mov	r2, r4
 8006274:	4649      	mov	r1, r9
 8006276:	4638      	mov	r0, r7
 8006278:	47c0      	blx	r8
 800627a:	3001      	adds	r0, #1
 800627c:	d0e6      	beq.n	800624c <_printf_common+0xa4>
 800627e:	3601      	adds	r6, #1
 8006280:	e7d9      	b.n	8006236 <_printf_common+0x8e>
	...

08006284 <_printf_i>:
 8006284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	7e0f      	ldrb	r7, [r1, #24]
 800628a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800628c:	2f78      	cmp	r7, #120	; 0x78
 800628e:	4691      	mov	r9, r2
 8006290:	4680      	mov	r8, r0
 8006292:	460c      	mov	r4, r1
 8006294:	469a      	mov	sl, r3
 8006296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800629a:	d807      	bhi.n	80062ac <_printf_i+0x28>
 800629c:	2f62      	cmp	r7, #98	; 0x62
 800629e:	d80a      	bhi.n	80062b6 <_printf_i+0x32>
 80062a0:	2f00      	cmp	r7, #0
 80062a2:	f000 80d8 	beq.w	8006456 <_printf_i+0x1d2>
 80062a6:	2f58      	cmp	r7, #88	; 0x58
 80062a8:	f000 80a3 	beq.w	80063f2 <_printf_i+0x16e>
 80062ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062b4:	e03a      	b.n	800632c <_printf_i+0xa8>
 80062b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062ba:	2b15      	cmp	r3, #21
 80062bc:	d8f6      	bhi.n	80062ac <_printf_i+0x28>
 80062be:	a101      	add	r1, pc, #4	; (adr r1, 80062c4 <_printf_i+0x40>)
 80062c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062c4:	0800631d 	.word	0x0800631d
 80062c8:	08006331 	.word	0x08006331
 80062cc:	080062ad 	.word	0x080062ad
 80062d0:	080062ad 	.word	0x080062ad
 80062d4:	080062ad 	.word	0x080062ad
 80062d8:	080062ad 	.word	0x080062ad
 80062dc:	08006331 	.word	0x08006331
 80062e0:	080062ad 	.word	0x080062ad
 80062e4:	080062ad 	.word	0x080062ad
 80062e8:	080062ad 	.word	0x080062ad
 80062ec:	080062ad 	.word	0x080062ad
 80062f0:	0800643d 	.word	0x0800643d
 80062f4:	08006361 	.word	0x08006361
 80062f8:	0800641f 	.word	0x0800641f
 80062fc:	080062ad 	.word	0x080062ad
 8006300:	080062ad 	.word	0x080062ad
 8006304:	0800645f 	.word	0x0800645f
 8006308:	080062ad 	.word	0x080062ad
 800630c:	08006361 	.word	0x08006361
 8006310:	080062ad 	.word	0x080062ad
 8006314:	080062ad 	.word	0x080062ad
 8006318:	08006427 	.word	0x08006427
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	1d1a      	adds	r2, r3, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	602a      	str	r2, [r5, #0]
 8006324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800632c:	2301      	movs	r3, #1
 800632e:	e0a3      	b.n	8006478 <_printf_i+0x1f4>
 8006330:	6820      	ldr	r0, [r4, #0]
 8006332:	6829      	ldr	r1, [r5, #0]
 8006334:	0606      	lsls	r6, r0, #24
 8006336:	f101 0304 	add.w	r3, r1, #4
 800633a:	d50a      	bpl.n	8006352 <_printf_i+0xce>
 800633c:	680e      	ldr	r6, [r1, #0]
 800633e:	602b      	str	r3, [r5, #0]
 8006340:	2e00      	cmp	r6, #0
 8006342:	da03      	bge.n	800634c <_printf_i+0xc8>
 8006344:	232d      	movs	r3, #45	; 0x2d
 8006346:	4276      	negs	r6, r6
 8006348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800634c:	485e      	ldr	r0, [pc, #376]	; (80064c8 <_printf_i+0x244>)
 800634e:	230a      	movs	r3, #10
 8006350:	e019      	b.n	8006386 <_printf_i+0x102>
 8006352:	680e      	ldr	r6, [r1, #0]
 8006354:	602b      	str	r3, [r5, #0]
 8006356:	f010 0f40 	tst.w	r0, #64	; 0x40
 800635a:	bf18      	it	ne
 800635c:	b236      	sxthne	r6, r6
 800635e:	e7ef      	b.n	8006340 <_printf_i+0xbc>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	6820      	ldr	r0, [r4, #0]
 8006364:	1d19      	adds	r1, r3, #4
 8006366:	6029      	str	r1, [r5, #0]
 8006368:	0601      	lsls	r1, r0, #24
 800636a:	d501      	bpl.n	8006370 <_printf_i+0xec>
 800636c:	681e      	ldr	r6, [r3, #0]
 800636e:	e002      	b.n	8006376 <_printf_i+0xf2>
 8006370:	0646      	lsls	r6, r0, #25
 8006372:	d5fb      	bpl.n	800636c <_printf_i+0xe8>
 8006374:	881e      	ldrh	r6, [r3, #0]
 8006376:	4854      	ldr	r0, [pc, #336]	; (80064c8 <_printf_i+0x244>)
 8006378:	2f6f      	cmp	r7, #111	; 0x6f
 800637a:	bf0c      	ite	eq
 800637c:	2308      	moveq	r3, #8
 800637e:	230a      	movne	r3, #10
 8006380:	2100      	movs	r1, #0
 8006382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006386:	6865      	ldr	r5, [r4, #4]
 8006388:	60a5      	str	r5, [r4, #8]
 800638a:	2d00      	cmp	r5, #0
 800638c:	bfa2      	ittt	ge
 800638e:	6821      	ldrge	r1, [r4, #0]
 8006390:	f021 0104 	bicge.w	r1, r1, #4
 8006394:	6021      	strge	r1, [r4, #0]
 8006396:	b90e      	cbnz	r6, 800639c <_printf_i+0x118>
 8006398:	2d00      	cmp	r5, #0
 800639a:	d04d      	beq.n	8006438 <_printf_i+0x1b4>
 800639c:	4615      	mov	r5, r2
 800639e:	fbb6 f1f3 	udiv	r1, r6, r3
 80063a2:	fb03 6711 	mls	r7, r3, r1, r6
 80063a6:	5dc7      	ldrb	r7, [r0, r7]
 80063a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063ac:	4637      	mov	r7, r6
 80063ae:	42bb      	cmp	r3, r7
 80063b0:	460e      	mov	r6, r1
 80063b2:	d9f4      	bls.n	800639e <_printf_i+0x11a>
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d10b      	bne.n	80063d0 <_printf_i+0x14c>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	07de      	lsls	r6, r3, #31
 80063bc:	d508      	bpl.n	80063d0 <_printf_i+0x14c>
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	6861      	ldr	r1, [r4, #4]
 80063c2:	4299      	cmp	r1, r3
 80063c4:	bfde      	ittt	le
 80063c6:	2330      	movle	r3, #48	; 0x30
 80063c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063d0:	1b52      	subs	r2, r2, r5
 80063d2:	6122      	str	r2, [r4, #16]
 80063d4:	f8cd a000 	str.w	sl, [sp]
 80063d8:	464b      	mov	r3, r9
 80063da:	aa03      	add	r2, sp, #12
 80063dc:	4621      	mov	r1, r4
 80063de:	4640      	mov	r0, r8
 80063e0:	f7ff fee2 	bl	80061a8 <_printf_common>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d14c      	bne.n	8006482 <_printf_i+0x1fe>
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	b004      	add	sp, #16
 80063ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f2:	4835      	ldr	r0, [pc, #212]	; (80064c8 <_printf_i+0x244>)
 80063f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063f8:	6829      	ldr	r1, [r5, #0]
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006400:	6029      	str	r1, [r5, #0]
 8006402:	061d      	lsls	r5, r3, #24
 8006404:	d514      	bpl.n	8006430 <_printf_i+0x1ac>
 8006406:	07df      	lsls	r7, r3, #31
 8006408:	bf44      	itt	mi
 800640a:	f043 0320 	orrmi.w	r3, r3, #32
 800640e:	6023      	strmi	r3, [r4, #0]
 8006410:	b91e      	cbnz	r6, 800641a <_printf_i+0x196>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	f023 0320 	bic.w	r3, r3, #32
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	2310      	movs	r3, #16
 800641c:	e7b0      	b.n	8006380 <_printf_i+0xfc>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	f043 0320 	orr.w	r3, r3, #32
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	2378      	movs	r3, #120	; 0x78
 8006428:	4828      	ldr	r0, [pc, #160]	; (80064cc <_printf_i+0x248>)
 800642a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800642e:	e7e3      	b.n	80063f8 <_printf_i+0x174>
 8006430:	0659      	lsls	r1, r3, #25
 8006432:	bf48      	it	mi
 8006434:	b2b6      	uxthmi	r6, r6
 8006436:	e7e6      	b.n	8006406 <_printf_i+0x182>
 8006438:	4615      	mov	r5, r2
 800643a:	e7bb      	b.n	80063b4 <_printf_i+0x130>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	6826      	ldr	r6, [r4, #0]
 8006440:	6961      	ldr	r1, [r4, #20]
 8006442:	1d18      	adds	r0, r3, #4
 8006444:	6028      	str	r0, [r5, #0]
 8006446:	0635      	lsls	r5, r6, #24
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	d501      	bpl.n	8006450 <_printf_i+0x1cc>
 800644c:	6019      	str	r1, [r3, #0]
 800644e:	e002      	b.n	8006456 <_printf_i+0x1d2>
 8006450:	0670      	lsls	r0, r6, #25
 8006452:	d5fb      	bpl.n	800644c <_printf_i+0x1c8>
 8006454:	8019      	strh	r1, [r3, #0]
 8006456:	2300      	movs	r3, #0
 8006458:	6123      	str	r3, [r4, #16]
 800645a:	4615      	mov	r5, r2
 800645c:	e7ba      	b.n	80063d4 <_printf_i+0x150>
 800645e:	682b      	ldr	r3, [r5, #0]
 8006460:	1d1a      	adds	r2, r3, #4
 8006462:	602a      	str	r2, [r5, #0]
 8006464:	681d      	ldr	r5, [r3, #0]
 8006466:	6862      	ldr	r2, [r4, #4]
 8006468:	2100      	movs	r1, #0
 800646a:	4628      	mov	r0, r5
 800646c:	f7f9 feb8 	bl	80001e0 <memchr>
 8006470:	b108      	cbz	r0, 8006476 <_printf_i+0x1f2>
 8006472:	1b40      	subs	r0, r0, r5
 8006474:	6060      	str	r0, [r4, #4]
 8006476:	6863      	ldr	r3, [r4, #4]
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	2300      	movs	r3, #0
 800647c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006480:	e7a8      	b.n	80063d4 <_printf_i+0x150>
 8006482:	6923      	ldr	r3, [r4, #16]
 8006484:	462a      	mov	r2, r5
 8006486:	4649      	mov	r1, r9
 8006488:	4640      	mov	r0, r8
 800648a:	47d0      	blx	sl
 800648c:	3001      	adds	r0, #1
 800648e:	d0ab      	beq.n	80063e8 <_printf_i+0x164>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	079b      	lsls	r3, r3, #30
 8006494:	d413      	bmi.n	80064be <_printf_i+0x23a>
 8006496:	68e0      	ldr	r0, [r4, #12]
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	4298      	cmp	r0, r3
 800649c:	bfb8      	it	lt
 800649e:	4618      	movlt	r0, r3
 80064a0:	e7a4      	b.n	80063ec <_printf_i+0x168>
 80064a2:	2301      	movs	r3, #1
 80064a4:	4632      	mov	r2, r6
 80064a6:	4649      	mov	r1, r9
 80064a8:	4640      	mov	r0, r8
 80064aa:	47d0      	blx	sl
 80064ac:	3001      	adds	r0, #1
 80064ae:	d09b      	beq.n	80063e8 <_printf_i+0x164>
 80064b0:	3501      	adds	r5, #1
 80064b2:	68e3      	ldr	r3, [r4, #12]
 80064b4:	9903      	ldr	r1, [sp, #12]
 80064b6:	1a5b      	subs	r3, r3, r1
 80064b8:	42ab      	cmp	r3, r5
 80064ba:	dcf2      	bgt.n	80064a2 <_printf_i+0x21e>
 80064bc:	e7eb      	b.n	8006496 <_printf_i+0x212>
 80064be:	2500      	movs	r5, #0
 80064c0:	f104 0619 	add.w	r6, r4, #25
 80064c4:	e7f5      	b.n	80064b2 <_printf_i+0x22e>
 80064c6:	bf00      	nop
 80064c8:	08007355 	.word	0x08007355
 80064cc:	08007366 	.word	0x08007366

080064d0 <_sbrk_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4d06      	ldr	r5, [pc, #24]	; (80064ec <_sbrk_r+0x1c>)
 80064d4:	2300      	movs	r3, #0
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	f7fb fc6c 	bl	8001db8 <_sbrk>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_sbrk_r+0x1a>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_sbrk_r+0x1a>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	200013f0 	.word	0x200013f0

080064f0 <__retarget_lock_acquire_recursive>:
 80064f0:	4770      	bx	lr

080064f2 <__retarget_lock_release_recursive>:
 80064f2:	4770      	bx	lr

080064f4 <memmove>:
 80064f4:	4288      	cmp	r0, r1
 80064f6:	b510      	push	{r4, lr}
 80064f8:	eb01 0402 	add.w	r4, r1, r2
 80064fc:	d902      	bls.n	8006504 <memmove+0x10>
 80064fe:	4284      	cmp	r4, r0
 8006500:	4623      	mov	r3, r4
 8006502:	d807      	bhi.n	8006514 <memmove+0x20>
 8006504:	1e43      	subs	r3, r0, #1
 8006506:	42a1      	cmp	r1, r4
 8006508:	d008      	beq.n	800651c <memmove+0x28>
 800650a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800650e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006512:	e7f8      	b.n	8006506 <memmove+0x12>
 8006514:	4402      	add	r2, r0
 8006516:	4601      	mov	r1, r0
 8006518:	428a      	cmp	r2, r1
 800651a:	d100      	bne.n	800651e <memmove+0x2a>
 800651c:	bd10      	pop	{r4, pc}
 800651e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006526:	e7f7      	b.n	8006518 <memmove+0x24>

08006528 <__malloc_lock>:
 8006528:	4801      	ldr	r0, [pc, #4]	; (8006530 <__malloc_lock+0x8>)
 800652a:	f7ff bfe1 	b.w	80064f0 <__retarget_lock_acquire_recursive>
 800652e:	bf00      	nop
 8006530:	200013ec 	.word	0x200013ec

08006534 <__malloc_unlock>:
 8006534:	4801      	ldr	r0, [pc, #4]	; (800653c <__malloc_unlock+0x8>)
 8006536:	f7ff bfdc 	b.w	80064f2 <__retarget_lock_release_recursive>
 800653a:	bf00      	nop
 800653c:	200013ec 	.word	0x200013ec

08006540 <_realloc_r>:
 8006540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006544:	4680      	mov	r8, r0
 8006546:	4614      	mov	r4, r2
 8006548:	460e      	mov	r6, r1
 800654a:	b921      	cbnz	r1, 8006556 <_realloc_r+0x16>
 800654c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006550:	4611      	mov	r1, r2
 8006552:	f7ff bc59 	b.w	8005e08 <_malloc_r>
 8006556:	b92a      	cbnz	r2, 8006564 <_realloc_r+0x24>
 8006558:	f7ff fbea 	bl	8005d30 <_free_r>
 800655c:	4625      	mov	r5, r4
 800655e:	4628      	mov	r0, r5
 8006560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006564:	f000 f81b 	bl	800659e <_malloc_usable_size_r>
 8006568:	4284      	cmp	r4, r0
 800656a:	4607      	mov	r7, r0
 800656c:	d802      	bhi.n	8006574 <_realloc_r+0x34>
 800656e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006572:	d812      	bhi.n	800659a <_realloc_r+0x5a>
 8006574:	4621      	mov	r1, r4
 8006576:	4640      	mov	r0, r8
 8006578:	f7ff fc46 	bl	8005e08 <_malloc_r>
 800657c:	4605      	mov	r5, r0
 800657e:	2800      	cmp	r0, #0
 8006580:	d0ed      	beq.n	800655e <_realloc_r+0x1e>
 8006582:	42bc      	cmp	r4, r7
 8006584:	4622      	mov	r2, r4
 8006586:	4631      	mov	r1, r6
 8006588:	bf28      	it	cs
 800658a:	463a      	movcs	r2, r7
 800658c:	f7ff fb80 	bl	8005c90 <memcpy>
 8006590:	4631      	mov	r1, r6
 8006592:	4640      	mov	r0, r8
 8006594:	f7ff fbcc 	bl	8005d30 <_free_r>
 8006598:	e7e1      	b.n	800655e <_realloc_r+0x1e>
 800659a:	4635      	mov	r5, r6
 800659c:	e7df      	b.n	800655e <_realloc_r+0x1e>

0800659e <_malloc_usable_size_r>:
 800659e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065a2:	1f18      	subs	r0, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bfbc      	itt	lt
 80065a8:	580b      	ldrlt	r3, [r1, r0]
 80065aa:	18c0      	addlt	r0, r0, r3
 80065ac:	4770      	bx	lr
	...

080065b0 <_init>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	bf00      	nop
 80065b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b6:	bc08      	pop	{r3}
 80065b8:	469e      	mov	lr, r3
 80065ba:	4770      	bx	lr

080065bc <_fini>:
 80065bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065be:	bf00      	nop
 80065c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c2:	bc08      	pop	{r3}
 80065c4:	469e      	mov	lr, r3
 80065c6:	4770      	bx	lr
