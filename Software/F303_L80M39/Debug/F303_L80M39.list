
F303_L80M39.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08007e50  08007e50  00017e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008394  08008394  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008394  08008394  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008394  08008394  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008394  08008394  00018394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008398  08008398  00018398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800839c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000003b0  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000590  20000590  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009b06  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001878  00000000  00000000  00029d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000780  00000000  00000000  0002b590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d8  00000000  00000000  0002bd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3f7  00000000  00000000  0002c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a455  00000000  00000000  000477df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c2e1  00000000  00000000  00051c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000edf15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003114  00000000  00000000  000edf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e34 	.word	0x08007e34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007e34 	.word	0x08007e34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <L80M39_parse>:
	gps->longitude = 0;
	gps->latitudeLoc = '0';
	gps->longitudeLoc = '0';
}

int L80M39_parse(L80M39_t* gps, uint8_t* uartMessage, int messageSize) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
	uint8_t messageStartDetected = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	77fb      	strb	r3, [r7, #31]
	uint8_t startIndex = -1;
 8000d04:	23ff      	movs	r3, #255	; 0xff
 8000d06:	77bb      	strb	r3, [r7, #30]
	for (int index = 0; index < messageSize; index++) {
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	e02e      	b.n	8000d6c <L80M39_parse+0x78>
		if (uartMessage[index] == '$') {
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	4413      	add	r3, r2
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b24      	cmp	r3, #36	; 0x24
 8000d18:	d125      	bne.n	8000d66 <L80M39_parse+0x72>
			if (messageStartDetected == 0) {
 8000d1a:	7ffb      	ldrb	r3, [r7, #31]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d104      	bne.n	8000d2a <L80M39_parse+0x36>
				messageStartDetected = 1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	77fb      	strb	r3, [r7, #31]
				startIndex = index;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	77bb      	strb	r3, [r7, #30]
 8000d28:	e01d      	b.n	8000d66 <L80M39_parse+0x72>
			} else {
				enum MessageType messageType = L80M39_parseMessageType(uartMessage, startIndex);
 8000d2a:	7fbb      	ldrb	r3, [r7, #30]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	68b8      	ldr	r0, [r7, #8]
 8000d30:	f000 f92d 	bl	8000f8e <L80M39_parseMessageType>
 8000d34:	4603      	mov	r3, r0
 8000d36:	75fb      	strb	r3, [r7, #23]
				if (messageType == GPTXT) {
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d107      	bne.n	8000d4e <L80M39_parse+0x5a>
					L80M39_parseGPTXT(gps, uartMessage, startIndex, index - 1);
 8000d3e:	7fba      	ldrb	r2, [r7, #30]
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f000 f8c6 	bl	8000ed8 <L80M39_parseGPTXT>
 8000d4c:	e009      	b.n	8000d62 <L80M39_parse+0x6e>
				} else if (messageType == GPGGA) {
 8000d4e:	7dfb      	ldrb	r3, [r7, #23]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d106      	bne.n	8000d62 <L80M39_parse+0x6e>
					L80M39_parseGPGGA(gps, uartMessage, startIndex, index - 1);
 8000d54:	7fba      	ldrb	r2, [r7, #30]
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	68b9      	ldr	r1, [r7, #8]
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f000 f80e 	bl	8000d7e <L80M39_parseGPGGA>
				}
				startIndex = index;
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	77bb      	strb	r3, [r7, #30]
	for (int index = 0; index < messageSize; index++) {
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	61bb      	str	r3, [r7, #24]
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbcc      	blt.n	8000d0e <L80M39_parse+0x1a>
			}
		}
	}
	return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3720      	adds	r7, #32
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <L80M39_parseGPGGA>:

int L80M39_parseGPVTG(L80M39_t* gps, uint8_t* uartMessage, int start, int end) {
	return 0;
}

int L80M39_parseGPGGA(L80M39_t* gps, uint8_t* uartMessage, int start, int end) {
 8000d7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d82:	b08b      	sub	sp, #44	; 0x2c
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
	uint8_t commasDiscovered = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	77fb      	strb	r3, [r7, #31]
	int parseStartIndex = -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d96:	623b      	str	r3, [r7, #32]
	for (int index = start; index < end; index++) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9c:	e091      	b.n	8000ec2 <L80M39_parseGPGGA+0x144>
		if (uartMessage[index] == ',') {
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b2c      	cmp	r3, #44	; 0x2c
 8000da8:	f040 8088 	bne.w	8000ebc <L80M39_parseGPGGA+0x13e>
			commasDiscovered++;
 8000dac:	7ffb      	ldrb	r3, [r7, #31]
 8000dae:	3301      	adds	r3, #1
 8000db0:	77fb      	strb	r3, [r7, #31]
			if (parseStartIndex != -1 && index - parseStartIndex > 1) {
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000db8:	d07e      	beq.n	8000eb8 <L80M39_parseGPGGA+0x13a>
 8000dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	dd79      	ble.n	8000eb8 <L80M39_parseGPGGA+0x13a>
 8000dc4:	466b      	mov	r3, sp
 8000dc6:	461e      	mov	r6, r3
				uint8_t bytes_size = index - parseStartIndex - 1;
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	77bb      	strb	r3, [r7, #30]
				char bytes[bytes_size];
 8000dd8:	7fb9      	ldrb	r1, [r7, #30]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	b2cb      	uxtb	r3, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	461c      	mov	r4, r3
 8000de6:	4615      	mov	r5, r2
 8000de8:	f04f 0200 	mov.w	r2, #0
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	00eb      	lsls	r3, r5, #3
 8000df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000df6:	00e2      	lsls	r2, r4, #3
 8000df8:	b2cb      	uxtb	r3, r1
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4698      	mov	r8, r3
 8000dfe:	4691      	mov	r9, r2
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e14:	460b      	mov	r3, r1
 8000e16:	3307      	adds	r3, #7
 8000e18:	08db      	lsrs	r3, r3, #3
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	ebad 0d03 	sub.w	sp, sp, r3
 8000e20:	466b      	mov	r3, sp
 8000e22:	3300      	adds	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
				memcpy(bytes, &uartMessage[parseStartIndex + 1], bytes_size * sizeof(uint8_t));
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	7fba      	ldrb	r2, [r7, #30]
 8000e30:	4619      	mov	r1, r3
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f002 ffca 	bl	8003dcc <memcpy>
				if (commasDiscovered == 2) {
 8000e38:	7ffb      	ldrb	r3, [r7, #31]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d10c      	bne.n	8000e58 <L80M39_parseGPGGA+0xda>
					gps->datetime = atof(&bytes);
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f002 ff97 	bl	8003d72 <atof>
 8000e44:	ec53 2b10 	vmov	r2, r3, d0
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f7ff fecc 	bl	8000be8 <__aeabi_d2f>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	e02e      	b.n	8000eb6 <L80M39_parseGPGGA+0x138>
				} else if (commasDiscovered == 3) {
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d10c      	bne.n	8000e78 <L80M39_parseGPGGA+0xfa>
					// Latitude
					gps->latitude = atof(&bytes);
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f002 ff87 	bl	8003d72 <atof>
 8000e64:	ec53 2b10 	vmov	r2, r3, d0
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff febc 	bl	8000be8 <__aeabi_d2f>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	e01e      	b.n	8000eb6 <L80M39_parseGPGGA+0x138>
				} else if (commasDiscovered == 4) {
 8000e78:	7ffb      	ldrb	r3, [r7, #31]
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d104      	bne.n	8000e88 <L80M39_parseGPGGA+0x10a>
					// Latitude - N/S
					gps->latitudeLoc = bytes[0];
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	741a      	strb	r2, [r3, #16]
 8000e86:	e016      	b.n	8000eb6 <L80M39_parseGPGGA+0x138>
				} else if (commasDiscovered == 5) {
 8000e88:	7ffb      	ldrb	r3, [r7, #31]
 8000e8a:	2b05      	cmp	r3, #5
 8000e8c:	d10c      	bne.n	8000ea8 <L80M39_parseGPGGA+0x12a>
					// Longitude
					gps->longitude = atof(&bytes);
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f002 ff6f 	bl	8003d72 <atof>
 8000e94:	ec53 2b10 	vmov	r2, r3, d0
 8000e98:	4610      	mov	r0, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f7ff fea4 	bl	8000be8 <__aeabi_d2f>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	e006      	b.n	8000eb6 <L80M39_parseGPGGA+0x138>
				} else if (commasDiscovered == 6) {
 8000ea8:	7ffb      	ldrb	r3, [r7, #31]
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d103      	bne.n	8000eb6 <L80M39_parseGPGGA+0x138>
					gps->longitudeLoc = bytes[0];
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	745a      	strb	r2, [r3, #17]
 8000eb6:	46b5      	mov	sp, r6
					// Longitude - W/E
				}
			}
			parseStartIndex = index;
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	623b      	str	r3, [r7, #32]
	for (int index = start; index < end; index++) {
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	f6ff af69 	blt.w	8000d9e <L80M39_parseGPGGA+0x20>
		}
	}
	return 0;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	372c      	adds	r7, #44	; 0x2c
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000ed8 <L80M39_parseGPTXT>:

int L80M39_parseGPGLL(L80M39_t* gps, uint8_t* uartMessage, int start, int end) {
	return 0;
}

int L80M39_parseGPTXT(L80M39_t* gps, uint8_t* uartMessage, int start, int end) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
	for (int index = 0; index < end - 3; index++) {
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	e044      	b.n	8000f76 <L80M39_parseGPTXT+0x9e>
		uint8_t char1 = uartMessage[index];
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	76fb      	strb	r3, [r7, #27]
		uint8_t char2 = uartMessage[index + 1];
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	4413      	add	r3, r2
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	76bb      	strb	r3, [r7, #26]
		uint8_t char3 = uartMessage[index + 2];
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3302      	adds	r3, #2
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	767b      	strb	r3, [r7, #25]
		if (char1 == 'A' && char2 == 'N' && char3 == 'T') {
 8000f0e:	7efb      	ldrb	r3, [r7, #27]
 8000f10:	2b41      	cmp	r3, #65	; 0x41
 8000f12:	d12d      	bne.n	8000f70 <L80M39_parseGPTXT+0x98>
 8000f14:	7ebb      	ldrb	r3, [r7, #26]
 8000f16:	2b4e      	cmp	r3, #78	; 0x4e
 8000f18:	d12a      	bne.n	8000f70 <L80M39_parseGPTXT+0x98>
 8000f1a:	7e7b      	ldrb	r3, [r7, #25]
 8000f1c:	2b54      	cmp	r3, #84	; 0x54
 8000f1e:	d127      	bne.n	8000f70 <L80M39_parseGPTXT+0x98>
			// parse next part 10
			if (index + 11 <= end) {
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	330a      	adds	r3, #10
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	dd22      	ble.n	8000f70 <L80M39_parseGPTXT+0x98>
				uint8_t char10 = uartMessage[index + 10];
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	330a      	adds	r3, #10
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	763b      	strb	r3, [r7, #24]
				uint8_t char11 = uartMessage[index + 11];
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	330b      	adds	r3, #11
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	75fb      	strb	r3, [r7, #23]
				if (char10 == 'O' && char11 == 'P') {
 8000f42:	7e3b      	ldrb	r3, [r7, #24]
 8000f44:	2b4f      	cmp	r3, #79	; 0x4f
 8000f46:	d106      	bne.n	8000f56 <L80M39_parseGPTXT+0x7e>
 8000f48:	7dfb      	ldrb	r3, [r7, #23]
 8000f4a:	2b50      	cmp	r3, #80	; 0x50
 8000f4c:	d103      	bne.n	8000f56 <L80M39_parseGPTXT+0x7e>
					gps->antennaStatus = OPEN;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	e00c      	b.n	8000f70 <L80M39_parseGPTXT+0x98>
				} else if (char10 == 'O' && char11 == 'K') {
 8000f56:	7e3b      	ldrb	r3, [r7, #24]
 8000f58:	2b4f      	cmp	r3, #79	; 0x4f
 8000f5a:	d106      	bne.n	8000f6a <L80M39_parseGPTXT+0x92>
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	2b4b      	cmp	r3, #75	; 0x4b
 8000f60:	d103      	bne.n	8000f6a <L80M39_parseGPTXT+0x92>
					gps->antennaStatus = OK;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2202      	movs	r2, #2
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	e002      	b.n	8000f70 <L80M39_parseGPTXT+0x98>
				} else {
					gps->antennaStatus = SHORT;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	701a      	strb	r2, [r3, #0]
	for (int index = 0; index < end - 3; index++) {
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	3301      	adds	r3, #1
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbb5      	blt.n	8000eec <L80M39_parseGPTXT+0x14>
				}
			}
		}
	}
	return 0;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <L80M39_parseMessageType>:

enum MessageType L80M39_parseMessageType(uint8_t* uartMessage, int start) {
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
	enum MessageType result = MES_UNKNOWN;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	73fb      	strb	r3, [r7, #15]
	uint8_t char1 = uartMessage[start + 3];
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	3303      	adds	r3, #3
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	73bb      	strb	r3, [r7, #14]
	uint8_t char2 = uartMessage[start + 4];
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	3304      	adds	r3, #4
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	737b      	strb	r3, [r7, #13]
	uint8_t char3 = uartMessage[start + 5];
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3305      	adds	r3, #5
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	733b      	strb	r3, [r7, #12]
	if (char1 == 'R' && char2 == 'M' && char3 == 'C') {
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b52      	cmp	r3, #82	; 0x52
 8000fc4:	d108      	bne.n	8000fd8 <L80M39_parseMessageType+0x4a>
 8000fc6:	7b7b      	ldrb	r3, [r7, #13]
 8000fc8:	2b4d      	cmp	r3, #77	; 0x4d
 8000fca:	d105      	bne.n	8000fd8 <L80M39_parseMessageType+0x4a>
 8000fcc:	7b3b      	ldrb	r3, [r7, #12]
 8000fce:	2b43      	cmp	r3, #67	; 0x43
 8000fd0:	d102      	bne.n	8000fd8 <L80M39_parseMessageType+0x4a>
		result = GPRMC;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e046      	b.n	8001066 <L80M39_parseMessageType+0xd8>
	} else if (char1 == 'V' && char2 == 'T' && char3 == 'G') {
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	2b56      	cmp	r3, #86	; 0x56
 8000fdc:	d108      	bne.n	8000ff0 <L80M39_parseMessageType+0x62>
 8000fde:	7b7b      	ldrb	r3, [r7, #13]
 8000fe0:	2b54      	cmp	r3, #84	; 0x54
 8000fe2:	d105      	bne.n	8000ff0 <L80M39_parseMessageType+0x62>
 8000fe4:	7b3b      	ldrb	r3, [r7, #12]
 8000fe6:	2b47      	cmp	r3, #71	; 0x47
 8000fe8:	d102      	bne.n	8000ff0 <L80M39_parseMessageType+0x62>
		result = GPVTG;
 8000fea:	2301      	movs	r3, #1
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e03a      	b.n	8001066 <L80M39_parseMessageType+0xd8>
	} else if (char1 == 'G' && char2 == 'G' && char3 == 'A') {
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	2b47      	cmp	r3, #71	; 0x47
 8000ff4:	d108      	bne.n	8001008 <L80M39_parseMessageType+0x7a>
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
 8000ff8:	2b47      	cmp	r3, #71	; 0x47
 8000ffa:	d105      	bne.n	8001008 <L80M39_parseMessageType+0x7a>
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	2b41      	cmp	r3, #65	; 0x41
 8001000:	d102      	bne.n	8001008 <L80M39_parseMessageType+0x7a>
		result = GPGGA;
 8001002:	2302      	movs	r3, #2
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e02e      	b.n	8001066 <L80M39_parseMessageType+0xd8>
	} else if (char1 == 'G' && char2 == 'S' && char3 == 'A') {
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	2b47      	cmp	r3, #71	; 0x47
 800100c:	d108      	bne.n	8001020 <L80M39_parseMessageType+0x92>
 800100e:	7b7b      	ldrb	r3, [r7, #13]
 8001010:	2b53      	cmp	r3, #83	; 0x53
 8001012:	d105      	bne.n	8001020 <L80M39_parseMessageType+0x92>
 8001014:	7b3b      	ldrb	r3, [r7, #12]
 8001016:	2b41      	cmp	r3, #65	; 0x41
 8001018:	d102      	bne.n	8001020 <L80M39_parseMessageType+0x92>
		result = GPGSA;
 800101a:	2303      	movs	r3, #3
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e022      	b.n	8001066 <L80M39_parseMessageType+0xd8>
	} else if (char1 == 'G' && char2 == 'S' && char3 == 'V') {
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	2b47      	cmp	r3, #71	; 0x47
 8001024:	d108      	bne.n	8001038 <L80M39_parseMessageType+0xaa>
 8001026:	7b7b      	ldrb	r3, [r7, #13]
 8001028:	2b53      	cmp	r3, #83	; 0x53
 800102a:	d105      	bne.n	8001038 <L80M39_parseMessageType+0xaa>
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	2b56      	cmp	r3, #86	; 0x56
 8001030:	d102      	bne.n	8001038 <L80M39_parseMessageType+0xaa>
		result = GPGSV;
 8001032:	2304      	movs	r3, #4
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e016      	b.n	8001066 <L80M39_parseMessageType+0xd8>
	} else if (char1 == 'G' && char2 == 'L' && char3 == 'L') {
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	2b47      	cmp	r3, #71	; 0x47
 800103c:	d108      	bne.n	8001050 <L80M39_parseMessageType+0xc2>
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	2b4c      	cmp	r3, #76	; 0x4c
 8001042:	d105      	bne.n	8001050 <L80M39_parseMessageType+0xc2>
 8001044:	7b3b      	ldrb	r3, [r7, #12]
 8001046:	2b4c      	cmp	r3, #76	; 0x4c
 8001048:	d102      	bne.n	8001050 <L80M39_parseMessageType+0xc2>
		result = GPGLL;
 800104a:	2305      	movs	r3, #5
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e00a      	b.n	8001066 <L80M39_parseMessageType+0xd8>
	} else if (char1 == 'T' && char2 == 'X' && char3 == 'T') {
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	2b54      	cmp	r3, #84	; 0x54
 8001054:	d107      	bne.n	8001066 <L80M39_parseMessageType+0xd8>
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	2b58      	cmp	r3, #88	; 0x58
 800105a:	d104      	bne.n	8001066 <L80M39_parseMessageType+0xd8>
 800105c:	7b3b      	ldrb	r3, [r7, #12]
 800105e:	2b54      	cmp	r3, #84	; 0x54
 8001060:	d101      	bne.n	8001066 <L80M39_parseMessageType+0xd8>
		result = GPTXT;
 8001062:	2306      	movs	r3, #6
 8001064:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800107c:	1d39      	adds	r1, r7, #4
 800107e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001082:	2201      	movs	r2, #1
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <__io_putchar+0x20>)
 8001086:	f002 f9d5 	bl	8003434 <HAL_UART_Transmit>
  return ch;
 800108a:	687b      	ldr	r3, [r7, #4]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000284 	.word	0x20000284

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109a:	b087      	sub	sp, #28
 800109c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109e:	f000 faff 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a2:	f000 f85b 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a6:	f000 f90b 	bl	80012c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010aa:	f000 f8d9 	bl	8001260 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80010ae:	f000 f8a7 	bl	8001200 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Receive (&huart1, UART1_rxBuffer, BUFFER_LENGTH, 1000);
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80010ba:	4921      	ldr	r1, [pc, #132]	; (8001140 <main+0xa8>)
 80010bc:	4821      	ldr	r0, [pc, #132]	; (8001144 <main+0xac>)
 80010be:	f002 fa43 	bl	8003548 <HAL_UART_Receive>

	if (gps.antennaStatus == ANT_UNKNOWN) {
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <main+0xb0>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d103      	bne.n	80010d2 <main+0x3a>
		printf("Antenna status is UKNOWN.\n\r");
 80010ca:	4820      	ldr	r0, [pc, #128]	; (800114c <main+0xb4>)
 80010cc:	f003 fafe 	bl	80046cc <iprintf>
 80010d0:	e006      	b.n	80010e0 <main+0x48>
	} else if (gps.antennaStatus == OPEN) {
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <main+0xb0>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <main+0x48>
		printf("Antenna status is OPEN.\n\r");
 80010da:	481d      	ldr	r0, [pc, #116]	; (8001150 <main+0xb8>)
 80010dc:	f003 faf6 	bl	80046cc <iprintf>
	}

	printf("Datetime is: %.2f\n\r", gps.datetime);
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <main+0xb0>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa2f 	bl	8000548 <__aeabi_f2d>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4819      	ldr	r0, [pc, #100]	; (8001154 <main+0xbc>)
 80010f0:	f003 faec 	bl	80046cc <iprintf>
	printf("Lat: %.8f %c Long: %.8f %c\n\r", gps.latitude, gps.latitudeLoc, gps.longitude, gps.longitudeLoc);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <main+0xb0>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fa25 	bl	8000548 <__aeabi_f2d>
 80010fe:	4604      	mov	r4, r0
 8001100:	460d      	mov	r5, r1
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <main+0xb0>)
 8001104:	7c1b      	ldrb	r3, [r3, #16]
 8001106:	461e      	mov	r6, r3
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <main+0xb0>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa1b 	bl	8000548 <__aeabi_f2d>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	490c      	ldr	r1, [pc, #48]	; (8001148 <main+0xb0>)
 8001118:	7c49      	ldrb	r1, [r1, #17]
 800111a:	9104      	str	r1, [sp, #16]
 800111c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001120:	9600      	str	r6, [sp, #0]
 8001122:	4622      	mov	r2, r4
 8001124:	462b      	mov	r3, r5
 8001126:	480c      	ldr	r0, [pc, #48]	; (8001158 <main+0xc0>)
 8001128:	f003 fad0 	bl	80046cc <iprintf>
	L80M39_parse(&gps, UART1_rxBuffer, BUFFER_LENGTH);
 800112c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001130:	4903      	ldr	r1, [pc, #12]	; (8001140 <main+0xa8>)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <main+0xb0>)
 8001134:	f7ff fdde 	bl	8000cf4 <L80M39_parse>
	HAL_Delay(10);
 8001138:	200a      	movs	r0, #10
 800113a:	f000 fb17 	bl	800176c <HAL_Delay>
  {
 800113e:	e7b8      	b.n	80010b2 <main+0x1a>
 8001140:	20000320 	.word	0x20000320
 8001144:	200001fc 	.word	0x200001fc
 8001148:	2000030c 	.word	0x2000030c
 800114c:	08007e50 	.word	0x08007e50
 8001150:	08007e6c 	.word	0x08007e6c
 8001154:	08007e88 	.word	0x08007e88
 8001158:	08007e9c 	.word	0x08007e9c

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b096      	sub	sp, #88	; 0x58
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001166:	2228      	movs	r2, #40	; 0x28
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fe3c 	bl	8003de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001190:	2302      	movs	r3, #2
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001198:	2310      	movs	r3, #16
 800119a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800119c:	2300      	movs	r3, #0
 800119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fd5d 	bl	8001c64 <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011b0:	f000 f8aa 	bl	8001308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	230f      	movs	r3, #15
 80011b6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fd86 	bl	8002ce0 <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011da:	f000 f895 	bl	8001308 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011de:	2301      	movs	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 ffaf 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011f4:	f000 f888 	bl	8001308 <Error_Handler>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3758      	adds	r7, #88	; 0x58
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_USART1_UART_Init+0x58>)
 8001206:	4a15      	ldr	r2, [pc, #84]	; (800125c <MX_USART1_UART_Init+0x5c>)
 8001208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <MX_USART1_UART_Init+0x58>)
 800120c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_USART1_UART_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_USART1_UART_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_USART1_UART_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_USART1_UART_Init+0x58>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_USART1_UART_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_USART1_UART_Init+0x58>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_USART1_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_USART1_UART_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_USART1_UART_Init+0x58>)
 8001244:	f002 f8a8 	bl	8003398 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800124e:	f000 f85b 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001fc 	.word	0x200001fc
 800125c:	40013800 	.word	0x40013800

08001260 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001266:	4a15      	ldr	r2, [pc, #84]	; (80012bc <MX_USART2_UART_Init+0x5c>)
 8001268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 800126c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 80012a4:	f002 f878 	bl	8003398 <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012ae:	f000 f82b 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000284 	.word	0x20000284
 80012bc:	40004400 	.word	0x40004400

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_GPIO_Init+0x44>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <MX_GPIO_Init+0x44>)
 80012cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d0:	6153      	str	r3, [r2, #20]
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_GPIO_Init+0x44>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_GPIO_Init+0x44>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <MX_GPIO_Init+0x44>)
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	6153      	str	r3, [r2, #20]
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_GPIO_Init+0x44>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800130c:	b672      	cpsid	i
}
 800130e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001310:	e7fe      	b.n	8001310 <Error_Handler+0x8>
	...

08001314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_MspInit+0x44>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_MspInit+0x44>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6193      	str	r3, [r2, #24]
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_MspInit+0x44>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_MspInit+0x44>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_MspInit+0x44>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_MspInit+0x44>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a30      	ldr	r2, [pc, #192]	; (800143c <HAL_UART_MspInit+0xe0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d12a      	bne.n	80013d4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800137e:	4b30      	ldr	r3, [pc, #192]	; (8001440 <HAL_UART_MspInit+0xe4>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a2f      	ldr	r2, [pc, #188]	; (8001440 <HAL_UART_MspInit+0xe4>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <HAL_UART_MspInit+0xe4>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <HAL_UART_MspInit+0xe4>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a29      	ldr	r2, [pc, #164]	; (8001440 <HAL_UART_MspInit+0xe4>)
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	6153      	str	r3, [r2, #20]
 80013a2:	4b27      	ldr	r3, [pc, #156]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013c0:	2307      	movs	r3, #7
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f000 fad7 	bl	8001980 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013d2:	e02e      	b.n	8001432 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <HAL_UART_MspInit+0xe8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d129      	bne.n	8001432 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	4a11      	ldr	r2, [pc, #68]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	6153      	str	r3, [r2, #20]
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_UART_MspInit+0xe4>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800140e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001420:	2307      	movs	r3, #7
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142e:	f000 faa7 	bl	8001980 <HAL_GPIO_Init>
}
 8001432:	bf00      	nop
 8001434:	3730      	adds	r7, #48	; 0x30
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40013800 	.word	0x40013800
 8001440:	40021000 	.word	0x40021000
 8001444:	40004400 	.word	0x40004400

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler+0x4>

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001494:	f000 f94a 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return 1;
 80014a0:	2301      	movs	r3, #1
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_kill>:

int _kill(int pid, int sig)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b6:	f002 fc5f 	bl	8003d78 <__errno>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2216      	movs	r2, #22
 80014be:	601a      	str	r2, [r3, #0]
  return -1;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_exit>:

void _exit (int status)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ffe7 	bl	80014ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80014de:	e7fe      	b.n	80014de <_exit+0x12>

080014e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e00a      	b.n	8001508 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f2:	f3af 8000 	nop.w
 80014f6:	4601      	mov	r1, r0
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60ba      	str	r2, [r7, #8]
 80014fe:	b2ca      	uxtb	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf0      	blt.n	80014f2 <_read+0x12>
  }

  return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e009      	b.n	8001540 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fd9d 	bl	8001074 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf1      	blt.n	800152c <_write+0x12>
  }
  return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_close>:

int _close(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800157a:	605a      	str	r2, [r3, #4]
  return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_isatty>:

int _isatty(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f002 fbc4 	bl	8003d78 <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20003000 	.word	0x20003000
 800161c:	00000400 	.word	0x00000400
 8001620:	20000578 	.word	0x20000578
 8001624:	20000590 	.word	0x20000590

08001628 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001684 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001650:	f7ff ffea 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <LoopForever+0x6>)
  ldr r1, =_edata
 8001656:	490d      	ldr	r1, [pc, #52]	; (800168c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001658:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <LoopForever+0xe>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800166c:	4c0a      	ldr	r4, [pc, #40]	; (8001698 <LoopForever+0x16>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167a:	f002 fb83 	bl	8003d84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167e:	f7ff fd0b 	bl	8001098 <main>

08001682 <LoopForever>:

LoopForever:
    b LoopForever
 8001682:	e7fe      	b.n	8001682 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001684:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001690:	0800839c 	.word	0x0800839c
  ldr r2, =_sbss
 8001694:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001698:	20000590 	.word	0x20000590

0800169c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_Init+0x28>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_Init+0x28>)
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 f931 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f000 f808 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016bc:	f7ff fe2a 	bl	8001314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40022000 	.word	0x40022000

080016cc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x54>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_InitTick+0x58>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f93b 	bl	8001966 <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00e      	b.n	8001718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d80a      	bhi.n	8001716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001708:	f000 f911 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800170c:	4a06      	ldr	r2, [pc, #24]	; (8001728 <HAL_InitTick+0x5c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000000 	.word	0x20000000
 8001724:	20000008 	.word	0x20000008
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x20>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x24>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HAL_IncTick+0x24>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008
 8001750:	2000057c 	.word	0x2000057c

08001754 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;  
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_GetTick+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	2000057c 	.word	0x2000057c

0800176c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff ffee 	bl	8001754 <HAL_GetTick>
 8001778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001784:	d005      	beq.n	8001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_Delay+0x44>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001792:	bf00      	nop
 8001794:	f7ff ffde 	bl	8001754 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f7      	bhi.n	8001794 <HAL_Delay+0x28>
  {
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000008 	.word	0x20000008

080017b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <__NVIC_GetPriorityGrouping+0x18>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0307 	and.w	r3, r3, #7
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff47 	bl	80017b4 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff5c 	bl	80017fc <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffb0 	bl	80018d4 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198e:	e14e      	b.n	8001c2e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2101      	movs	r1, #1
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8140 	beq.w	8001c28 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d005      	beq.n	80019c0 <HAL_GPIO_Init+0x40>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d130      	bne.n	8001a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f6:	2201      	movs	r2, #1
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	f003 0201 	and.w	r2, r3, #1
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d017      	beq.n	8001a5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d123      	bne.n	8001ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3208      	adds	r2, #8
 8001a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	6939      	ldr	r1, [r7, #16]
 8001aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0203 	and.w	r2, r3, #3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 809a 	beq.w	8001c28 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af4:	4b55      	ldr	r3, [pc, #340]	; (8001c4c <HAL_GPIO_Init+0x2cc>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a54      	ldr	r2, [pc, #336]	; (8001c4c <HAL_GPIO_Init+0x2cc>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b52      	ldr	r3, [pc, #328]	; (8001c4c <HAL_GPIO_Init+0x2cc>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b0c:	4a50      	ldr	r2, [pc, #320]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b36:	d013      	beq.n	8001b60 <HAL_GPIO_Init+0x1e0>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a46      	ldr	r2, [pc, #280]	; (8001c54 <HAL_GPIO_Init+0x2d4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00d      	beq.n	8001b5c <HAL_GPIO_Init+0x1dc>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a45      	ldr	r2, [pc, #276]	; (8001c58 <HAL_GPIO_Init+0x2d8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d007      	beq.n	8001b58 <HAL_GPIO_Init+0x1d8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a44      	ldr	r2, [pc, #272]	; (8001c5c <HAL_GPIO_Init+0x2dc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d101      	bne.n	8001b54 <HAL_GPIO_Init+0x1d4>
 8001b50:	2303      	movs	r3, #3
 8001b52:	e006      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b54:	2305      	movs	r3, #5
 8001b56:	e004      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e002      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b60:	2300      	movs	r3, #0
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	f002 0203 	and.w	r2, r2, #3
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	4093      	lsls	r3, r2
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b72:	4937      	ldr	r1, [pc, #220]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b80:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <HAL_GPIO_Init+0x2e0>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ba4:	4a2e      	ldr	r2, [pc, #184]	; (8001c60 <HAL_GPIO_Init+0x2e0>)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_GPIO_Init+0x2e0>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bce:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <HAL_GPIO_Init+0x2e0>)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_GPIO_Init+0x2e0>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_GPIO_Init+0x2e0>)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_GPIO_Init+0x2e0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c22:	4a0f      	ldr	r2, [pc, #60]	; (8001c60 <HAL_GPIO_Init+0x2e0>)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f47f aea9 	bne.w	8001990 <HAL_GPIO_Init+0x10>
  }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010000 	.word	0x40010000
 8001c54:	48000400 	.word	0x48000400
 8001c58:	48000800 	.word	0x48000800
 8001c5c:	48000c00 	.word	0x48000c00
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f001 b823 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 817d 	beq.w	8001f9a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ca0:	4bbc      	ldr	r3, [pc, #752]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d00c      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cac:	4bb9      	ldr	r3, [pc, #740]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d15c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x10e>
 8001cb8:	4bb6      	ldr	r3, [pc, #728]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d155      	bne.n	8001d72 <HAL_RCC_OscConfig+0x10e>
 8001cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	095b      	lsrs	r3, r3, #5
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x94>
 8001cf2:	4ba8      	ldr	r3, [pc, #672]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	e015      	b.n	8001d24 <HAL_RCC_OscConfig+0xc0>
 8001cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cfc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d10:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d14:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001d20:	4b9c      	ldr	r3, [pc, #624]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d28:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001d2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d30:	fa92 f2a2 	rbit	r2, r2
 8001d34:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001d38:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001d3c:	fab2 f282 	clz	r2, r2
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f042 0220 	orr.w	r2, r2, #32
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f002 021f 	and.w	r2, r2, #31
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 811f 	beq.w	8001f98 <HAL_RCC_OscConfig+0x334>
 8001d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 8116 	bne.w	8001f98 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f000 bfaf 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x12e>
 8001d84:	4b83      	ldr	r3, [pc, #524]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a82      	ldr	r2, [pc, #520]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	e036      	b.n	8001e00 <HAL_RCC_OscConfig+0x19c>
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x158>
 8001da2:	4b7c      	ldr	r3, [pc, #496]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a7b      	ldr	r2, [pc, #492]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b79      	ldr	r3, [pc, #484]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a78      	ldr	r2, [pc, #480]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e021      	b.n	8001e00 <HAL_RCC_OscConfig+0x19c>
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x184>
 8001dce:	4b71      	ldr	r3, [pc, #452]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a70      	ldr	r2, [pc, #448]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b6e      	ldr	r3, [pc, #440]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a6d      	ldr	r2, [pc, #436]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0x19c>
 8001de8:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a66      	ldr	r2, [pc, #408]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e00:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	f023 020f 	bic.w	r2, r3, #15
 8001e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	495f      	ldr	r1, [pc, #380]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d059      	beq.n	8001ede <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fc93 	bl	8001754 <HAL_GetTick>
 8001e2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fc8e 	bl	8001754 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b64      	cmp	r3, #100	; 0x64
 8001e42:	d902      	bls.n	8001e4a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	f000 bf43 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8001e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001e5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0x218>
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e015      	b.n	8001ea8 <HAL_RCC_OscConfig+0x244>
 8001e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e80:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e94:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e98:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001eb0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001eb4:	fa92 f2a2 	rbit	r2, r2
 8001eb8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001ebc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ec0:	fab2 f282 	clz	r2, r2
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f002 021f 	and.w	r2, r2, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ab      	beq.n	8001e34 <HAL_RCC_OscConfig+0x1d0>
 8001edc:	e05d      	b.n	8001f9a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff fc39 	bl	8001754 <HAL_GetTick>
 8001ee2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fc34 	bl	8001754 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b64      	cmp	r3, #100	; 0x64
 8001ef6:	d902      	bls.n	8001efe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	f000 bee9 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8001efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f02:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001f12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d102      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2cc>
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	e015      	b.n	8001f5c <HAL_RCC_OscConfig+0x2f8>
 8001f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f34:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f48:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001f58:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f60:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001f64:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f68:	fa92 f2a2 	rbit	r2, r2
 8001f6c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001f70:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001f74:	fab2 f282 	clz	r2, r2
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f042 0220 	orr.w	r2, r2, #32
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	f002 021f 	and.w	r2, r2, #31
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ab      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x284>
 8001f90:	e003      	b.n	8001f9a <HAL_RCC_OscConfig+0x336>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 817d 	beq.w	80022aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fb0:	4ba6      	ldr	r3, [pc, #664]	; (800224c <HAL_RCC_OscConfig+0x5e8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00b      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fbc:	4ba3      	ldr	r3, [pc, #652]	; (800224c <HAL_RCC_OscConfig+0x5e8>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d172      	bne.n	80020ae <HAL_RCC_OscConfig+0x44a>
 8001fc8:	4ba0      	ldr	r3, [pc, #640]	; (800224c <HAL_RCC_OscConfig+0x5e8>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d16c      	bne.n	80020ae <HAL_RCC_OscConfig+0x44a>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001fe6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d102      	bne.n	8002004 <HAL_RCC_OscConfig+0x3a0>
 8001ffe:	4b93      	ldr	r3, [pc, #588]	; (800224c <HAL_RCC_OscConfig+0x5e8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	e013      	b.n	800202c <HAL_RCC_OscConfig+0x3c8>
 8002004:	2302      	movs	r3, #2
 8002006:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002016:	2302      	movs	r3, #2
 8002018:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800201c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002028:	4b88      	ldr	r3, [pc, #544]	; (800224c <HAL_RCC_OscConfig+0x5e8>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	2202      	movs	r2, #2
 800202e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002032:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002036:	fa92 f2a2 	rbit	r2, r2
 800203a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800203e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002042:	fab2 f282 	clz	r2, r2
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f042 0220 	orr.w	r2, r2, #32
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	f002 021f 	and.w	r2, r2, #31
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f202 	lsl.w	r2, r1, r2
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCC_OscConfig+0x410>
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d002      	beq.n	8002074 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f000 be2e 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	4b75      	ldr	r3, [pc, #468]	; (800224c <HAL_RCC_OscConfig+0x5e8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800207c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002080:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	21f8      	movs	r1, #248	; 0xf8
 800208a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002092:	fa91 f1a1 	rbit	r1, r1
 8002096:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800209a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800209e:	fab1 f181 	clz	r1, r1
 80020a2:	b2c9      	uxtb	r1, r1
 80020a4:	408b      	lsls	r3, r1
 80020a6:	4969      	ldr	r1, [pc, #420]	; (800224c <HAL_RCC_OscConfig+0x5e8>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ac:	e0fd      	b.n	80022aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8088 	beq.w	80021d0 <HAL_RCC_OscConfig+0x56c>
 80020c0:	2301      	movs	r3, #1
 80020c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80020d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	461a      	mov	r2, r3
 80020e8:	2301      	movs	r3, #1
 80020ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fb32 	bl	8001754 <HAL_GetTick>
 80020f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f6:	f7ff fb2d 	bl	8001754 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d902      	bls.n	800210c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	f000 bde2 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800211e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	095b      	lsrs	r3, r3, #5
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d102      	bne.n	800213c <HAL_RCC_OscConfig+0x4d8>
 8002136:	4b45      	ldr	r3, [pc, #276]	; (800224c <HAL_RCC_OscConfig+0x5e8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	e013      	b.n	8002164 <HAL_RCC_OscConfig+0x500>
 800213c:	2302      	movs	r3, #2
 800213e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002154:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002160:	4b3a      	ldr	r3, [pc, #232]	; (800224c <HAL_RCC_OscConfig+0x5e8>)
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	2202      	movs	r2, #2
 8002166:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800216a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800216e:	fa92 f2a2 	rbit	r2, r2
 8002172:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002176:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f042 0220 	orr.w	r2, r2, #32
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f002 021f 	and.w	r2, r2, #31
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f202 	lsl.w	r2, r1, r2
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0af      	beq.n	80020f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002196:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_RCC_OscConfig+0x5e8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	21f8      	movs	r1, #248	; 0xf8
 80021ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80021b4:	fa91 f1a1 	rbit	r1, r1
 80021b8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80021bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80021c0:	fab1 f181 	clz	r1, r1
 80021c4:	b2c9      	uxtb	r1, r1
 80021c6:	408b      	lsls	r3, r1
 80021c8:	4920      	ldr	r1, [pc, #128]	; (800224c <HAL_RCC_OscConfig+0x5e8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
 80021ce:	e06c      	b.n	80022aa <HAL_RCC_OscConfig+0x646>
 80021d0:	2301      	movs	r3, #1
 80021d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80021e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	461a      	mov	r2, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff faaa 	bl	8001754 <HAL_GetTick>
 8002200:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002206:	f7ff faa5 	bl	8001754 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d902      	bls.n	800221c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	f000 bd5a 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
 800221c:	2302      	movs	r3, #2
 800221e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800222e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d104      	bne.n	8002250 <HAL_RCC_OscConfig+0x5ec>
 8002246:	4b01      	ldr	r3, [pc, #4]	; (800224c <HAL_RCC_OscConfig+0x5e8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	e015      	b.n	8002278 <HAL_RCC_OscConfig+0x614>
 800224c:	40021000 	.word	0x40021000
 8002250:	2302      	movs	r3, #2
 8002252:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002262:	2302      	movs	r3, #2
 8002264:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002268:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002274:	4bc8      	ldr	r3, [pc, #800]	; (8002598 <HAL_RCC_OscConfig+0x934>)
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	2202      	movs	r2, #2
 800227a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800227e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002282:	fa92 f2a2 	rbit	r2, r2
 8002286:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800228a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800228e:	fab2 f282 	clz	r2, r2
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	f042 0220 	orr.w	r2, r2, #32
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	f002 021f 	and.w	r2, r2, #31
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f202 	lsl.w	r2, r1, r2
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ad      	bne.n	8002206 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8110 	beq.w	80024e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d079      	beq.n	80023c4 <HAL_RCC_OscConfig+0x760>
 80022d0:	2301      	movs	r3, #1
 80022d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80022e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4bab      	ldr	r3, [pc, #684]	; (800259c <HAL_RCC_OscConfig+0x938>)
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	461a      	mov	r2, r3
 80022f6:	2301      	movs	r3, #1
 80022f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fa:	f7ff fa2b 	bl	8001754 <HAL_GetTick>
 80022fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	e00a      	b.n	800231a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002304:	f7ff fa26 	bl	8001754 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d902      	bls.n	800231a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	f000 bcdb 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
 800231a:	2302      	movs	r3, #2
 800231c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800232c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002330:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002334:	2202      	movs	r2, #2
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	fa93 f2a3 	rbit	r2, r3
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002358:	2202      	movs	r2, #2
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002372:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002374:	4b88      	ldr	r3, [pc, #544]	; (8002598 <HAL_RCC_OscConfig+0x934>)
 8002376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002380:	2102      	movs	r1, #2
 8002382:	6019      	str	r1, [r3, #0]
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f1a3 	rbit	r1, r3
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800239a:	6019      	str	r1, [r3, #0]
  return result;
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0a0      	beq.n	8002304 <HAL_RCC_OscConfig+0x6a0>
 80023c2:	e08d      	b.n	80024e0 <HAL_RCC_OscConfig+0x87c>
 80023c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	fa93 f2a3 	rbit	r2, r3
 80023de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80023e6:	601a      	str	r2, [r3, #0]
  return result;
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80023f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCC_OscConfig+0x938>)
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	461a      	mov	r2, r3
 8002402:	2300      	movs	r3, #0
 8002404:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7ff f9a5 	bl	8001754 <HAL_GetTick>
 800240a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240e:	e00a      	b.n	8002426 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7ff f9a0 	bl	8001754 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	f000 bc55 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800242e:	2202      	movs	r2, #2
 8002430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f2a3 	rbit	r2, r3
 8002440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002444:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002452:	2202      	movs	r2, #2
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002476:	2202      	movs	r2, #2
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002490:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_RCC_OscConfig+0x934>)
 8002494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800249e:	2102      	movs	r1, #2
 80024a0:	6019      	str	r1, [r3, #0]
 80024a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fa93 f1a3 	rbit	r1, r3
 80024b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80024b8:	6019      	str	r1, [r3, #0]
  return result;
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2101      	movs	r1, #1
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d197      	bne.n	8002410 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 81a1 	beq.w	8002838 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fc:	4b26      	ldr	r3, [pc, #152]	; (8002598 <HAL_RCC_OscConfig+0x934>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d116      	bne.n	8002536 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b23      	ldr	r3, [pc, #140]	; (8002598 <HAL_RCC_OscConfig+0x934>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	4a22      	ldr	r2, [pc, #136]	; (8002598 <HAL_RCC_OscConfig+0x934>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	61d3      	str	r3, [r2, #28]
 8002514:	4b20      	ldr	r3, [pc, #128]	; (8002598 <HAL_RCC_OscConfig+0x934>)
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800252e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_RCC_OscConfig+0x93c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d11a      	bne.n	8002578 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <HAL_RCC_OscConfig+0x93c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <HAL_RCC_OscConfig+0x93c>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254e:	f7ff f901 	bl	8001754 <HAL_GetTick>
 8002552:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	e009      	b.n	800256c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002558:	f7ff f8fc 	bl	8001754 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	; 0x64
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e3b1      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_RCC_OscConfig+0x93c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ef      	beq.n	8002558 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d10d      	bne.n	80025a4 <HAL_RCC_OscConfig+0x940>
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_RCC_OscConfig+0x934>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a02      	ldr	r2, [pc, #8]	; (8002598 <HAL_RCC_OscConfig+0x934>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6213      	str	r3, [r2, #32]
 8002594:	e03c      	b.n	8002610 <HAL_RCC_OscConfig+0x9ac>
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	10908120 	.word	0x10908120
 80025a0:	40007000 	.word	0x40007000
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_OscConfig+0x96a>
 80025b4:	4bc1      	ldr	r3, [pc, #772]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4ac0      	ldr	r2, [pc, #768]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	6213      	str	r3, [r2, #32]
 80025c0:	4bbe      	ldr	r3, [pc, #760]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4abd      	ldr	r2, [pc, #756]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025c6:	f023 0304 	bic.w	r3, r3, #4
 80025ca:	6213      	str	r3, [r2, #32]
 80025cc:	e020      	b.n	8002610 <HAL_RCC_OscConfig+0x9ac>
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x994>
 80025de:	4bb7      	ldr	r3, [pc, #732]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4ab6      	ldr	r2, [pc, #728]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	6213      	str	r3, [r2, #32]
 80025ea:	4bb4      	ldr	r3, [pc, #720]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4ab3      	ldr	r2, [pc, #716]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6213      	str	r3, [r2, #32]
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0x9ac>
 80025f8:	4bb0      	ldr	r3, [pc, #704]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4aaf      	ldr	r2, [pc, #700]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	6213      	str	r3, [r2, #32]
 8002604:	4bad      	ldr	r3, [pc, #692]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4aac      	ldr	r2, [pc, #688]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8081 	beq.w	8002724 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7ff f897 	bl	8001754 <HAL_GetTick>
 8002626:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	e00b      	b.n	8002644 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7ff f892 	bl	8001754 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e345      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800264c:	2202      	movs	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002662:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002670:	2202      	movs	r2, #2
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002678:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fa93 f2a3 	rbit	r2, r3
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800268a:	601a      	str	r2, [r3, #0]
  return result;
 800268c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002690:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002694:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d102      	bne.n	80026b0 <HAL_RCC_OscConfig+0xa4c>
 80026aa:	4b84      	ldr	r3, [pc, #528]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	e013      	b.n	80026d8 <HAL_RCC_OscConfig+0xa74>
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80026b8:	2202      	movs	r2, #2
 80026ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	fa93 f2a3 	rbit	r2, r3
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	4b79      	ldr	r3, [pc, #484]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80026e0:	2102      	movs	r1, #2
 80026e2:	6011      	str	r1, [r2, #0]
 80026e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	fa92 f1a2 	rbit	r1, r2
 80026f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80026fa:	6011      	str	r1, [r2, #0]
  return result;
 80026fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002700:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	fab2 f282 	clz	r2, r2
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	f002 021f 	and.w	r2, r2, #31
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d084      	beq.n	800262c <HAL_RCC_OscConfig+0x9c8>
 8002722:	e07f      	b.n	8002824 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7ff f816 	bl	8001754 <HAL_GetTick>
 8002728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272c:	e00b      	b.n	8002746 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7ff f811 	bl	8001754 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e2c4      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8002746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800274e:	2202      	movs	r2, #2
 8002750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002756:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002772:	2202      	movs	r2, #2
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	fa93 f2a3 	rbit	r2, r3
 8002784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002788:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800278c:	601a      	str	r2, [r3, #0]
  return result;
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002796:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	fab3 f383 	clz	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f043 0302 	orr.w	r3, r3, #2
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d102      	bne.n	80027b2 <HAL_RCC_OscConfig+0xb4e>
 80027ac:	4b43      	ldr	r3, [pc, #268]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	e013      	b.n	80027da <HAL_RCC_OscConfig+0xb76>
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80027ba:	2202      	movs	r2, #2
 80027bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fa93 f2a3 	rbit	r2, r3
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80027e2:	2102      	movs	r1, #2
 80027e4:	6011      	str	r1, [r2, #0]
 80027e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	fa92 f1a2 	rbit	r1, r2
 80027f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80027fc:	6011      	str	r1, [r2, #0]
  return result;
 80027fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002802:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	fab2 f282 	clz	r2, r2
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f002 021f 	and.w	r2, r2, #31
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f202 	lsl.w	r2, r1, r2
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d184      	bne.n	800272e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002824:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	4a22      	ldr	r2, [pc, #136]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 8002832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002836:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8242 	beq.w	8002cce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_RCC_OscConfig+0xc58>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b08      	cmp	r3, #8
 8002854:	f000 8213 	beq.w	8002c7e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2b02      	cmp	r3, #2
 8002866:	f040 8162 	bne.w	8002b2e <HAL_RCC_OscConfig+0xeca>
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002872:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800288e:	601a      	str	r2, [r3, #0]
  return result;
 8002890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002894:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002898:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	461a      	mov	r2, r3
 80028ac:	2300      	movs	r3, #0
 80028ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe ff50 	bl	8001754 <HAL_GetTick>
 80028b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b8:	e00c      	b.n	80028d4 <HAL_RCC_OscConfig+0xc70>
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe ff48 	bl	8001754 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e1fd      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
 80028d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	fa93 f2a3 	rbit	r2, r3
 80028f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80028f8:	601a      	str	r2, [r3, #0]
  return result;
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002902:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d102      	bne.n	800291e <HAL_RCC_OscConfig+0xcba>
 8002918:	4bb0      	ldr	r3, [pc, #704]	; (8002bdc <HAL_RCC_OscConfig+0xf78>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	e027      	b.n	800296e <HAL_RCC_OscConfig+0xd0a>
 800291e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002922:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800292a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002930:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	fa93 f2a3 	rbit	r2, r3
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002948:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800294c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	4b9c      	ldr	r3, [pc, #624]	; (8002bdc <HAL_RCC_OscConfig+0xf78>)
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002972:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002976:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800297a:	6011      	str	r1, [r2, #0]
 800297c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002980:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	fa92 f1a2 	rbit	r1, r2
 800298a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800298e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002992:	6011      	str	r1, [r2, #0]
  return result;
 8002994:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002998:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	fab2 f282 	clz	r2, r2
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f042 0220 	orr.w	r2, r2, #32
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	f002 021f 	and.w	r2, r2, #31
 80029ae:	2101      	movs	r1, #1
 80029b0:	fa01 f202 	lsl.w	r2, r1, r2
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d182      	bne.n	80028c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ba:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <HAL_RCC_OscConfig+0xf78>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80029ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	430b      	orrs	r3, r1
 80029dc:	497f      	ldr	r1, [pc, #508]	; (8002bdc <HAL_RCC_OscConfig+0xf78>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]
 80029e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80029ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	fa93 f2a3 	rbit	r2, r3
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a06:	601a      	str	r2, [r3, #0]
  return result;
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a10:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	461a      	mov	r2, r3
 8002a24:	2301      	movs	r3, #1
 8002a26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe fe94 	bl	8001754 <HAL_GetTick>
 8002a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a30:	e009      	b.n	8002a46 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fe8f 	bl	8001754 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e144      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a6a:	601a      	str	r2, [r3, #0]
  return result;
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d102      	bne.n	8002a90 <HAL_RCC_OscConfig+0xe2c>
 8002a8a:	4b54      	ldr	r3, [pc, #336]	; (8002bdc <HAL_RCC_OscConfig+0xf78>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	e027      	b.n	8002ae0 <HAL_RCC_OscConfig+0xe7c>
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	fa93 f2a3 	rbit	r2, r3
 8002aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	fa93 f2a3 	rbit	r2, r3
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <HAL_RCC_OscConfig+0xf78>)
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ae4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ae8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002aec:	6011      	str	r1, [r2, #0]
 8002aee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002af2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	fa92 f1a2 	rbit	r1, r2
 8002afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b00:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b04:	6011      	str	r1, [r2, #0]
  return result;
 8002b06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b0a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	fab2 f282 	clz	r2, r2
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f042 0220 	orr.w	r2, r2, #32
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	f002 021f 	and.w	r2, r2, #31
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f202 	lsl.w	r2, r1, r2
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d082      	beq.n	8002a32 <HAL_RCC_OscConfig+0xdce>
 8002b2c:	e0cf      	b.n	8002cce <HAL_RCC_OscConfig+0x106a>
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002b36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	fa93 f2a3 	rbit	r2, r3
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b52:	601a      	str	r2, [r3, #0]
  return result;
 8002b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b58:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2300      	movs	r3, #0
 8002b72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fdee 	bl	8001754 <HAL_GetTick>
 8002b78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7c:	e009      	b.n	8002b92 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe fde9 	bl	8001754 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e09e      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	fa93 f2a3 	rbit	r2, r3
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002bb6:	601a      	str	r2, [r3, #0]
  return result;
 8002bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002bc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d104      	bne.n	8002be0 <HAL_RCC_OscConfig+0xf7c>
 8002bd6:	4b01      	ldr	r3, [pc, #4]	; (8002bdc <HAL_RCC_OscConfig+0xf78>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	e029      	b.n	8002c30 <HAL_RCC_OscConfig+0xfcc>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002be8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	fa93 f2a3 	rbit	r2, r3
 8002bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c00:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <HAL_RCC_OscConfig+0x1078>)
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c34:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002c38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c3c:	6011      	str	r1, [r2, #0]
 8002c3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c42:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	fa92 f1a2 	rbit	r1, r2
 8002c4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c50:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c54:	6011      	str	r1, [r2, #0]
  return result;
 8002c56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c5a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	fab2 f282 	clz	r2, r2
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f002 021f 	and.w	r2, r2, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d180      	bne.n	8002b7e <HAL_RCC_OscConfig+0xf1a>
 8002c7c:	e027      	b.n	8002cce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e01e      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_RCC_OscConfig+0x1078>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c9e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d10b      	bne.n	8002cca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002cb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002cb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b09e      	sub	sp, #120	; 0x78
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e162      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b90      	ldr	r3, [pc, #576]	; (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d910      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b8d      	ldr	r3, [pc, #564]	; (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 0207 	bic.w	r2, r3, #7
 8002d0e:	498b      	ldr	r1, [pc, #556]	; (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b89      	ldr	r3, [pc, #548]	; (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e14a      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4b82      	ldr	r3, [pc, #520]	; (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	497f      	ldr	r1, [pc, #508]	; (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80dc 	beq.w	8002f0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d13c      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xf6>
 8002d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xa6>
 8002d80:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e00f      	b.n	8002da6 <HAL_RCC_ClockConfig+0xc6>
 8002d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	667b      	str	r3, [r7, #100]	; 0x64
 8002d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d98:	663b      	str	r3, [r7, #96]	; 0x60
 8002d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002da2:	4b67      	ldr	r3, [pc, #412]	; (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002daa:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dae:	fa92 f2a2 	rbit	r2, r2
 8002db2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002db4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002db6:	fab2 f282 	clz	r2, r2
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	f042 0220 	orr.w	r2, r2, #32
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	f002 021f 	and.w	r2, r2, #31
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d17b      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e0f3      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d13c      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x178>
 8002dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x128>
 8002e02:	4b4f      	ldr	r3, [pc, #316]	; (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	e00f      	b.n	8002e28 <HAL_RCC_ClockConfig+0x148>
 8002e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	647b      	str	r3, [r7, #68]	; 0x44
 8002e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e24:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e30:	fa92 f2a2 	rbit	r2, r2
 8002e34:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e38:	fab2 f282 	clz	r2, r2
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f042 0220 	orr.w	r2, r2, #32
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f002 021f 	and.w	r2, r2, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d13a      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0b2      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x1a0>
 8002e7a:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	e00d      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1bc>
 8002e80:	2302      	movs	r3, #2
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	623b      	str	r3, [r7, #32]
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	61ba      	str	r2, [r7, #24]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	fa92 f2a2 	rbit	r2, r2
 8002ea6:	617a      	str	r2, [r7, #20]
  return result;
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	fab2 f282 	clz	r2, r2
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f042 0220 	orr.w	r2, r2, #32
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f002 021f 	and.w	r2, r2, #31
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e079      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f023 0203 	bic.w	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	491a      	ldr	r1, [pc, #104]	; (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002edc:	f7fe fc3a 	bl	8001754 <HAL_GetTick>
 8002ee0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee4:	f7fe fc36 	bl	8001754 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e061      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 020c 	and.w	r2, r3, #12
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d1eb      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d214      	bcs.n	8002f44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 0207 	bic.w	r2, r3, #7
 8002f22:	4906      	ldr	r1, [pc, #24]	; (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e040      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
 8002f3c:	40022000 	.word	0x40022000
 8002f40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	491a      	ldr	r1, [pc, #104]	; (8002fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6e:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4912      	ldr	r1, [pc, #72]	; (8002fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f82:	f000 f829 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f86:	4601      	mov	r1, r0
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f90:	22f0      	movs	r2, #240	; 0xf0
 8002f92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	fa92 f2a2 	rbit	r2, r2
 8002f9a:	60fa      	str	r2, [r7, #12]
  return result;
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	fab2 f282 	clz	r2, r2
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	40d3      	lsrs	r3, r2
 8002fa6:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <HAL_RCC_ClockConfig+0x2ec>)
 8002fa8:	5cd3      	ldrb	r3, [r2, r3]
 8002faa:	fa21 f303 	lsr.w	r3, r1, r3
 8002fae:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <HAL_RCC_ClockConfig+0x2f0>)
 8002fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_RCC_ClockConfig+0x2f4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fb88 	bl	80016cc <HAL_InitTick>
  
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3778      	adds	r7, #120	; 0x78
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08007ebc 	.word	0x08007ebc
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	20000004 	.word	0x20000004

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b08b      	sub	sp, #44	; 0x2c
 8002fdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ff2:	4b29      	ldr	r3, [pc, #164]	; (8003098 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d002      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x30>
 8003002:	2b08      	cmp	r3, #8
 8003004:	d003      	beq.n	800300e <HAL_RCC_GetSysClockFreq+0x36>
 8003006:	e03c      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003008:	4b24      	ldr	r3, [pc, #144]	; (800309c <HAL_RCC_GetSysClockFreq+0xc4>)
 800300a:	623b      	str	r3, [r7, #32]
      break;
 800300c:	e03c      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003014:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003018:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	fa92 f2a2 	rbit	r2, r2
 8003020:	607a      	str	r2, [r7, #4]
  return result;
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	fab2 f282 	clz	r2, r2
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	40d3      	lsrs	r3, r2
 800302c:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800302e:	5cd3      	ldrb	r3, [r2, r3]
 8003030:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003032:	4b19      	ldr	r3, [pc, #100]	; (8003098 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	220f      	movs	r2, #15
 800303c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	fa92 f2a2 	rbit	r2, r2
 8003044:	60fa      	str	r2, [r7, #12]
  return result;
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	fab2 f282 	clz	r2, r2
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	40d3      	lsrs	r3, r2
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003052:	5cd3      	ldrb	r3, [r2, r3]
 8003054:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003060:	4a0e      	ldr	r2, [pc, #56]	; (800309c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	fbb2 f2f3 	udiv	r2, r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
 8003070:	e004      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	623b      	str	r3, [r7, #32]
      break;
 8003080:	e002      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003084:	623b      	str	r3, [r7, #32]
      break;
 8003086:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003088:	6a3b      	ldr	r3, [r7, #32]
}
 800308a:	4618      	mov	r0, r3
 800308c:	372c      	adds	r7, #44	; 0x2c
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	007a1200 	.word	0x007a1200
 80030a0:	08007ed4 	.word	0x08007ed4
 80030a4:	08007ee4 	.word	0x08007ee4
 80030a8:	003d0900 	.word	0x003d0900

080030ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000000 	.word	0x20000000

080030c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030ca:	f7ff ffef 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030ce:	4601      	mov	r1, r0
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	fa92 f2a2 	rbit	r2, r2
 80030e4:	603a      	str	r2, [r7, #0]
  return result;
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	fab2 f282 	clz	r2, r2
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	40d3      	lsrs	r3, r2
 80030f0:	4a04      	ldr	r2, [pc, #16]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	08007ecc 	.word	0x08007ecc

08003108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800310e:	f7ff ffcd 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 8003112:	4601      	mov	r1, r0
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800311c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003120:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	fa92 f2a2 	rbit	r2, r2
 8003128:	603a      	str	r2, [r7, #0]
  return result;
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	fab2 f282 	clz	r2, r2
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	40d3      	lsrs	r3, r2
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003136:	5cd3      	ldrb	r3, [r2, r3]
 8003138:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000
 8003148:	08007ecc 	.word	0x08007ecc

0800314c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b092      	sub	sp, #72	; 0x48
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80cd 	beq.w	800330a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003170:	4b86      	ldr	r3, [pc, #536]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10e      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317c:	4b83      	ldr	r3, [pc, #524]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	4a82      	ldr	r2, [pc, #520]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003186:	61d3      	str	r3, [r2, #28]
 8003188:	4b80      	ldr	r3, [pc, #512]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319a:	4b7d      	ldr	r3, [pc, #500]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d118      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a6:	4b7a      	ldr	r3, [pc, #488]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a79      	ldr	r2, [pc, #484]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b2:	f7fe facf 	bl	8001754 <HAL_GetTick>
 80031b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b8:	e008      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ba:	f7fe facb 	bl	8001754 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b64      	cmp	r3, #100	; 0x64
 80031c6:	d901      	bls.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0db      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	4b70      	ldr	r3, [pc, #448]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031d8:	4b6c      	ldr	r3, [pc, #432]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d07d      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d076      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031f6:	4b65      	ldr	r3, [pc, #404]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	461a      	mov	r2, r3
 8003220:	2301      	movs	r3, #1
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003228:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	4b55      	ldr	r3, [pc, #340]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	461a      	mov	r2, r3
 8003244:	2300      	movs	r3, #0
 8003246:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003248:	4a50      	ldr	r2, [pc, #320]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800324a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800324e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d045      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe fa7c 	bl	8001754 <HAL_GetTick>
 800325c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	e00a      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fe fa78 	bl	8001754 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e086      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003276:	2302      	movs	r3, #2
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	2302      	movs	r3, #2
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	61fb      	str	r3, [r7, #28]
  return result;
 800328e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f043 0302 	orr.w	r3, r3, #2
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d102      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80032a4:	4b39      	ldr	r3, [pc, #228]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	e007      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80032aa:	2302      	movs	r3, #2
 80032ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	4b35      	ldr	r3, [pc, #212]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2202      	movs	r2, #2
 80032bc:	613a      	str	r2, [r7, #16]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	fa92 f2a2 	rbit	r2, r2
 80032c4:	60fa      	str	r2, [r7, #12]
  return result;
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	fab2 f282 	clz	r2, r2
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	f002 021f 	and.w	r2, r2, #31
 80032d8:	2101      	movs	r1, #1
 80032da:	fa01 f202 	lsl.w	r2, r1, r2
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0bd      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032e4:	4b29      	ldr	r3, [pc, #164]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4926      	ldr	r1, [pc, #152]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d105      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fe:	4b23      	ldr	r3, [pc, #140]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	4a22      	ldr	r2, [pc, #136]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003308:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f023 0203 	bic.w	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	491a      	ldr	r1, [pc, #104]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003324:	4313      	orrs	r3, r2
 8003326:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003334:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	f023 0210 	bic.w	r2, r3, #16
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4912      	ldr	r1, [pc, #72]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003342:	4313      	orrs	r3, r2
 8003344:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	490b      	ldr	r1, [pc, #44]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003360:	4313      	orrs	r3, r2
 8003362:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	4903      	ldr	r1, [pc, #12]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800337e:	4313      	orrs	r3, r2
 8003380:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3748      	adds	r7, #72	; 0x48
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000
 8003390:	40007000 	.word	0x40007000
 8003394:	10908100 	.word	0x10908100

08003398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e040      	b.n	800342c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd ffce 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	; 0x24
 80033c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f980 	bl	80036dc <UART_SetConfig>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e022      	b.n	800342c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 faaa 	bl	8003948 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fb31 	bl	8003a8c <UART_CheckIdleState>
 800342a:	4603      	mov	r3, r0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	; 0x28
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003448:	2b20      	cmp	r3, #32
 800344a:	d178      	bne.n	800353e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_UART_Transmit+0x24>
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e071      	b.n	8003540 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2221      	movs	r2, #33	; 0x21
 8003468:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800346a:	f7fe f973 	bl	8001754 <HAL_GetTick>
 800346e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	88fa      	ldrh	r2, [r7, #6]
 8003474:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003488:	d108      	bne.n	800349c <HAL_UART_Transmit+0x68>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	e003      	b.n	80034a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034a4:	e030      	b.n	8003508 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2200      	movs	r2, #0
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fb93 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d004      	beq.n	80034c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e03c      	b.n	8003540 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	881a      	ldrh	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d8:	b292      	uxth	r2, r2
 80034da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	3302      	adds	r3, #2
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	e008      	b.n	80034f6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	b292      	uxth	r2, r2
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	3301      	adds	r3, #1
 80034f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1c8      	bne.n	80034a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2200      	movs	r2, #0
 800351c:	2140      	movs	r1, #64	; 0x40
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 fb5c 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e005      	b.n	8003540 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e000      	b.n	8003540 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800353e:	2302      	movs	r3, #2
  }
}
 8003540:	4618      	mov	r0, r3
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800355e:	2b20      	cmp	r3, #32
 8003560:	f040 80b6 	bne.w	80036d0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_UART_Receive+0x28>
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0ae      	b.n	80036d2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2222      	movs	r2, #34	; 0x22
 8003580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358a:	f7fe f8e3 	bl	8001754 <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a8:	d10e      	bne.n	80035c8 <HAL_UART_Receive+0x80>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d105      	bne.n	80035be <HAL_UART_Receive+0x76>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80035b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035bc:	e02d      	b.n	800361a <HAL_UART_Receive+0xd2>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	22ff      	movs	r2, #255	; 0xff
 80035c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035c6:	e028      	b.n	800361a <HAL_UART_Receive+0xd2>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10d      	bne.n	80035ec <HAL_UART_Receive+0xa4>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d104      	bne.n	80035e2 <HAL_UART_Receive+0x9a>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	22ff      	movs	r2, #255	; 0xff
 80035dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035e0:	e01b      	b.n	800361a <HAL_UART_Receive+0xd2>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	227f      	movs	r2, #127	; 0x7f
 80035e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035ea:	e016      	b.n	800361a <HAL_UART_Receive+0xd2>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035f4:	d10d      	bne.n	8003612 <HAL_UART_Receive+0xca>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d104      	bne.n	8003608 <HAL_UART_Receive+0xc0>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	227f      	movs	r2, #127	; 0x7f
 8003602:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003606:	e008      	b.n	800361a <HAL_UART_Receive+0xd2>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	223f      	movs	r2, #63	; 0x3f
 800360c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003610:	e003      	b.n	800361a <HAL_UART_Receive+0xd2>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003620:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362a:	d108      	bne.n	800363e <HAL_UART_Receive+0xf6>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	e003      	b.n	8003646 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003646:	e037      	b.n	80036b8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2200      	movs	r2, #0
 8003650:	2120      	movs	r1, #32
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fac2 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e033      	b.n	80036d2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10c      	bne.n	800368a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003676:	b29a      	uxth	r2, r3
 8003678:	8a7b      	ldrh	r3, [r7, #18]
 800367a:	4013      	ands	r3, r2
 800367c:	b29a      	uxth	r2, r3
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	3302      	adds	r3, #2
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	e00d      	b.n	80036a6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003690:	b29b      	uxth	r3, r3
 8003692:	b2da      	uxtb	r2, r3
 8003694:	8a7b      	ldrh	r3, [r7, #18]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	4013      	ands	r3, r2
 800369a:	b2da      	uxtb	r2, r3
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	3301      	adds	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1c1      	bne.n	8003648 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	e000      	b.n	80036d2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
  }
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4b8a      	ldr	r3, [pc, #552]	; (8003930 <UART_SetConfig+0x254>)
 8003708:	4013      	ands	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	6979      	ldr	r1, [r7, #20]
 8003710:	430b      	orrs	r3, r1
 8003712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a78      	ldr	r2, [pc, #480]	; (8003934 <UART_SetConfig+0x258>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d120      	bne.n	800379a <UART_SetConfig+0xbe>
 8003758:	4b77      	ldr	r3, [pc, #476]	; (8003938 <UART_SetConfig+0x25c>)
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b03      	cmp	r3, #3
 8003762:	d817      	bhi.n	8003794 <UART_SetConfig+0xb8>
 8003764:	a201      	add	r2, pc, #4	; (adr r2, 800376c <UART_SetConfig+0x90>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	0800377d 	.word	0x0800377d
 8003770:	08003789 	.word	0x08003789
 8003774:	0800378f 	.word	0x0800378f
 8003778:	08003783 	.word	0x08003783
 800377c:	2300      	movs	r3, #0
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e01d      	b.n	80037be <UART_SetConfig+0xe2>
 8003782:	2302      	movs	r3, #2
 8003784:	77fb      	strb	r3, [r7, #31]
 8003786:	e01a      	b.n	80037be <UART_SetConfig+0xe2>
 8003788:	2304      	movs	r3, #4
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e017      	b.n	80037be <UART_SetConfig+0xe2>
 800378e:	2308      	movs	r3, #8
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	e014      	b.n	80037be <UART_SetConfig+0xe2>
 8003794:	2310      	movs	r3, #16
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e011      	b.n	80037be <UART_SetConfig+0xe2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a67      	ldr	r2, [pc, #412]	; (800393c <UART_SetConfig+0x260>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d102      	bne.n	80037aa <UART_SetConfig+0xce>
 80037a4:	2300      	movs	r3, #0
 80037a6:	77fb      	strb	r3, [r7, #31]
 80037a8:	e009      	b.n	80037be <UART_SetConfig+0xe2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a64      	ldr	r2, [pc, #400]	; (8003940 <UART_SetConfig+0x264>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d102      	bne.n	80037ba <UART_SetConfig+0xde>
 80037b4:	2300      	movs	r3, #0
 80037b6:	77fb      	strb	r3, [r7, #31]
 80037b8:	e001      	b.n	80037be <UART_SetConfig+0xe2>
 80037ba:	2310      	movs	r3, #16
 80037bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c6:	d15a      	bne.n	800387e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80037c8:	7ffb      	ldrb	r3, [r7, #31]
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d827      	bhi.n	800381e <UART_SetConfig+0x142>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <UART_SetConfig+0xf8>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	08003801 	.word	0x08003801
 80037dc:	08003809 	.word	0x08003809
 80037e0:	0800381f 	.word	0x0800381f
 80037e4:	0800380f 	.word	0x0800380f
 80037e8:	0800381f 	.word	0x0800381f
 80037ec:	0800381f 	.word	0x0800381f
 80037f0:	0800381f 	.word	0x0800381f
 80037f4:	08003817 	.word	0x08003817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7ff fc64 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 80037fc:	61b8      	str	r0, [r7, #24]
        break;
 80037fe:	e013      	b.n	8003828 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003800:	f7ff fc82 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 8003804:	61b8      	str	r0, [r7, #24]
        break;
 8003806:	e00f      	b.n	8003828 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003808:	4b4e      	ldr	r3, [pc, #312]	; (8003944 <UART_SetConfig+0x268>)
 800380a:	61bb      	str	r3, [r7, #24]
        break;
 800380c:	e00c      	b.n	8003828 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380e:	f7ff fbe3 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8003812:	61b8      	str	r0, [r7, #24]
        break;
 8003814:	e008      	b.n	8003828 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381a:	61bb      	str	r3, [r7, #24]
        break;
 800381c:	e004      	b.n	8003828 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	77bb      	strb	r3, [r7, #30]
        break;
 8003826:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d074      	beq.n	8003918 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	005a      	lsls	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	441a      	add	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	d916      	bls.n	8003878 <UART_SetConfig+0x19c>
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d212      	bcs.n	8003878 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	b29b      	uxth	r3, r3
 8003856:	f023 030f 	bic.w	r3, r3, #15
 800385a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	b29b      	uxth	r3, r3
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	b29a      	uxth	r2, r3
 8003868:	89fb      	ldrh	r3, [r7, #14]
 800386a:	4313      	orrs	r3, r2
 800386c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	89fa      	ldrh	r2, [r7, #14]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	e04f      	b.n	8003918 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	77bb      	strb	r3, [r7, #30]
 800387c:	e04c      	b.n	8003918 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d828      	bhi.n	80038d6 <UART_SetConfig+0x1fa>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0x1b0>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038d7 	.word	0x080038d7
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	080038d7 	.word	0x080038d7
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7ff fc08 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 80038b4:	61b8      	str	r0, [r7, #24]
        break;
 80038b6:	e013      	b.n	80038e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7ff fc26 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e00f      	b.n	80038e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b20      	ldr	r3, [pc, #128]	; (8003944 <UART_SetConfig+0x268>)
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e00c      	b.n	80038e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7ff fb87 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80038ca:	61b8      	str	r0, [r7, #24]
        break;
 80038cc:	e008      	b.n	80038e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	61bb      	str	r3, [r7, #24]
        break;
 80038d4:	e004      	b.n	80038e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	77bb      	strb	r3, [r7, #30]
        break;
 80038de:	bf00      	nop
    }

    if (pclk != 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	085a      	lsrs	r2, r3, #1
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	441a      	add	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b0f      	cmp	r3, #15
 80038fe:	d909      	bls.n	8003914 <UART_SetConfig+0x238>
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003906:	d205      	bcs.n	8003914 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	e001      	b.n	8003918 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003924:	7fbb      	ldrb	r3, [r7, #30]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	efff69f3 	.word	0xefff69f3
 8003934:	40013800 	.word	0x40013800
 8003938:	40021000 	.word	0x40021000
 800393c:	40004400 	.word	0x40004400
 8003940:	40004800 	.word	0x40004800
 8003944:	007a1200 	.word	0x007a1200

08003948 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01a      	beq.n	8003a5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a46:	d10a      	bne.n	8003a5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  }
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b098      	sub	sp, #96	; 0x60
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a9c:	f7fd fe5a 	bl	8001754 <HAL_GetTick>
 8003aa0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d12e      	bne.n	8003b0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f88c 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d021      	beq.n	8003b0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ade:	653b      	str	r3, [r7, #80]	; 0x50
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e6      	bne.n	8003aca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e062      	b.n	8003bd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d149      	bne.n	8003bb0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b24:	2200      	movs	r2, #0
 8003b26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f856 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d03c      	beq.n	8003bb0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	623b      	str	r3, [r7, #32]
   return(result);
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b54:	633b      	str	r3, [r7, #48]	; 0x30
 8003b56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e6      	bne.n	8003b36 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3308      	adds	r3, #8
 8003b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b88:	61fa      	str	r2, [r7, #28]
 8003b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	69b9      	ldr	r1, [r7, #24]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	617b      	str	r3, [r7, #20]
   return(result);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e5      	bne.n	8003b68 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e011      	b.n	8003bd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3758      	adds	r7, #88	; 0x58
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bec:	e049      	b.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf4:	d045      	beq.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7fd fdad 	bl	8001754 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e048      	b.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d031      	beq.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d110      	bne.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2208      	movs	r2, #8
 8003c32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f838 	bl	8003caa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e029      	b.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5c:	d111      	bne.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f81e 	bl	8003caa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e00f      	b.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d0a6      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b095      	sub	sp, #84	; 0x54
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cba:	e853 3f00 	ldrex	r3, [r3]
 8003cbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e6      	bne.n	8003cb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3308      	adds	r3, #8
 8003d02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e5      	bne.n	8003ce4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d118      	bne.n	8003d52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f023 0310 	bic.w	r3, r3, #16
 8003d34:	647b      	str	r3, [r7, #68]	; 0x44
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6979      	ldr	r1, [r7, #20]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e6      	bne.n	8003d20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d66:	bf00      	nop
 8003d68:	3754      	adds	r7, #84	; 0x54
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <atof>:
 8003d72:	2100      	movs	r1, #0
 8003d74:	f001 bae6 	b.w	8005344 <strtod>

08003d78 <__errno>:
 8003d78:	4b01      	ldr	r3, [pc, #4]	; (8003d80 <__errno+0x8>)
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	2000000c 	.word	0x2000000c

08003d84 <__libc_init_array>:
 8003d84:	b570      	push	{r4, r5, r6, lr}
 8003d86:	4d0d      	ldr	r5, [pc, #52]	; (8003dbc <__libc_init_array+0x38>)
 8003d88:	4c0d      	ldr	r4, [pc, #52]	; (8003dc0 <__libc_init_array+0x3c>)
 8003d8a:	1b64      	subs	r4, r4, r5
 8003d8c:	10a4      	asrs	r4, r4, #2
 8003d8e:	2600      	movs	r6, #0
 8003d90:	42a6      	cmp	r6, r4
 8003d92:	d109      	bne.n	8003da8 <__libc_init_array+0x24>
 8003d94:	4d0b      	ldr	r5, [pc, #44]	; (8003dc4 <__libc_init_array+0x40>)
 8003d96:	4c0c      	ldr	r4, [pc, #48]	; (8003dc8 <__libc_init_array+0x44>)
 8003d98:	f004 f84c 	bl	8007e34 <_init>
 8003d9c:	1b64      	subs	r4, r4, r5
 8003d9e:	10a4      	asrs	r4, r4, #2
 8003da0:	2600      	movs	r6, #0
 8003da2:	42a6      	cmp	r6, r4
 8003da4:	d105      	bne.n	8003db2 <__libc_init_array+0x2e>
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
 8003da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dac:	4798      	blx	r3
 8003dae:	3601      	adds	r6, #1
 8003db0:	e7ee      	b.n	8003d90 <__libc_init_array+0xc>
 8003db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db6:	4798      	blx	r3
 8003db8:	3601      	adds	r6, #1
 8003dba:	e7f2      	b.n	8003da2 <__libc_init_array+0x1e>
 8003dbc:	08008394 	.word	0x08008394
 8003dc0:	08008394 	.word	0x08008394
 8003dc4:	08008394 	.word	0x08008394
 8003dc8:	08008398 	.word	0x08008398

08003dcc <memcpy>:
 8003dcc:	440a      	add	r2, r1
 8003dce:	4291      	cmp	r1, r2
 8003dd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003dd4:	d100      	bne.n	8003dd8 <memcpy+0xc>
 8003dd6:	4770      	bx	lr
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003de2:	4291      	cmp	r1, r2
 8003de4:	d1f9      	bne.n	8003dda <memcpy+0xe>
 8003de6:	bd10      	pop	{r4, pc}

08003de8 <memset>:
 8003de8:	4402      	add	r2, r0
 8003dea:	4603      	mov	r3, r0
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d100      	bne.n	8003df2 <memset+0xa>
 8003df0:	4770      	bx	lr
 8003df2:	f803 1b01 	strb.w	r1, [r3], #1
 8003df6:	e7f9      	b.n	8003dec <memset+0x4>

08003df8 <__cvt>:
 8003df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dfc:	ec55 4b10 	vmov	r4, r5, d0
 8003e00:	2d00      	cmp	r5, #0
 8003e02:	460e      	mov	r6, r1
 8003e04:	4619      	mov	r1, r3
 8003e06:	462b      	mov	r3, r5
 8003e08:	bfbb      	ittet	lt
 8003e0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003e0e:	461d      	movlt	r5, r3
 8003e10:	2300      	movge	r3, #0
 8003e12:	232d      	movlt	r3, #45	; 0x2d
 8003e14:	700b      	strb	r3, [r1, #0]
 8003e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003e1c:	4691      	mov	r9, r2
 8003e1e:	f023 0820 	bic.w	r8, r3, #32
 8003e22:	bfbc      	itt	lt
 8003e24:	4622      	movlt	r2, r4
 8003e26:	4614      	movlt	r4, r2
 8003e28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e2c:	d005      	beq.n	8003e3a <__cvt+0x42>
 8003e2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e32:	d100      	bne.n	8003e36 <__cvt+0x3e>
 8003e34:	3601      	adds	r6, #1
 8003e36:	2102      	movs	r1, #2
 8003e38:	e000      	b.n	8003e3c <__cvt+0x44>
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	ab03      	add	r3, sp, #12
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	ab02      	add	r3, sp, #8
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	ec45 4b10 	vmov	d0, r4, r5
 8003e48:	4653      	mov	r3, sl
 8003e4a:	4632      	mov	r2, r6
 8003e4c:	f001 fb14 	bl	8005478 <_dtoa_r>
 8003e50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e54:	4607      	mov	r7, r0
 8003e56:	d102      	bne.n	8003e5e <__cvt+0x66>
 8003e58:	f019 0f01 	tst.w	r9, #1
 8003e5c:	d022      	beq.n	8003ea4 <__cvt+0xac>
 8003e5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e62:	eb07 0906 	add.w	r9, r7, r6
 8003e66:	d110      	bne.n	8003e8a <__cvt+0x92>
 8003e68:	783b      	ldrb	r3, [r7, #0]
 8003e6a:	2b30      	cmp	r3, #48	; 0x30
 8003e6c:	d10a      	bne.n	8003e84 <__cvt+0x8c>
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2300      	movs	r3, #0
 8003e72:	4620      	mov	r0, r4
 8003e74:	4629      	mov	r1, r5
 8003e76:	f7fc fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e7a:	b918      	cbnz	r0, 8003e84 <__cvt+0x8c>
 8003e7c:	f1c6 0601 	rsb	r6, r6, #1
 8003e80:	f8ca 6000 	str.w	r6, [sl]
 8003e84:	f8da 3000 	ldr.w	r3, [sl]
 8003e88:	4499      	add	r9, r3
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4629      	mov	r1, r5
 8003e92:	f7fc fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e96:	b108      	cbz	r0, 8003e9c <__cvt+0xa4>
 8003e98:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e9c:	2230      	movs	r2, #48	; 0x30
 8003e9e:	9b03      	ldr	r3, [sp, #12]
 8003ea0:	454b      	cmp	r3, r9
 8003ea2:	d307      	bcc.n	8003eb4 <__cvt+0xbc>
 8003ea4:	9b03      	ldr	r3, [sp, #12]
 8003ea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ea8:	1bdb      	subs	r3, r3, r7
 8003eaa:	4638      	mov	r0, r7
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	b004      	add	sp, #16
 8003eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb4:	1c59      	adds	r1, r3, #1
 8003eb6:	9103      	str	r1, [sp, #12]
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e7f0      	b.n	8003e9e <__cvt+0xa6>

08003ebc <__exponent>:
 8003ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2900      	cmp	r1, #0
 8003ec2:	bfb8      	it	lt
 8003ec4:	4249      	neglt	r1, r1
 8003ec6:	f803 2b02 	strb.w	r2, [r3], #2
 8003eca:	bfb4      	ite	lt
 8003ecc:	222d      	movlt	r2, #45	; 0x2d
 8003ece:	222b      	movge	r2, #43	; 0x2b
 8003ed0:	2909      	cmp	r1, #9
 8003ed2:	7042      	strb	r2, [r0, #1]
 8003ed4:	dd2a      	ble.n	8003f2c <__exponent+0x70>
 8003ed6:	f10d 0407 	add.w	r4, sp, #7
 8003eda:	46a4      	mov	ip, r4
 8003edc:	270a      	movs	r7, #10
 8003ede:	46a6      	mov	lr, r4
 8003ee0:	460a      	mov	r2, r1
 8003ee2:	fb91 f6f7 	sdiv	r6, r1, r7
 8003ee6:	fb07 1516 	mls	r5, r7, r6, r1
 8003eea:	3530      	adds	r5, #48	; 0x30
 8003eec:	2a63      	cmp	r2, #99	; 0x63
 8003eee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003ef2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003ef6:	4631      	mov	r1, r6
 8003ef8:	dcf1      	bgt.n	8003ede <__exponent+0x22>
 8003efa:	3130      	adds	r1, #48	; 0x30
 8003efc:	f1ae 0502 	sub.w	r5, lr, #2
 8003f00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003f04:	1c44      	adds	r4, r0, #1
 8003f06:	4629      	mov	r1, r5
 8003f08:	4561      	cmp	r1, ip
 8003f0a:	d30a      	bcc.n	8003f22 <__exponent+0x66>
 8003f0c:	f10d 0209 	add.w	r2, sp, #9
 8003f10:	eba2 020e 	sub.w	r2, r2, lr
 8003f14:	4565      	cmp	r5, ip
 8003f16:	bf88      	it	hi
 8003f18:	2200      	movhi	r2, #0
 8003f1a:	4413      	add	r3, r2
 8003f1c:	1a18      	subs	r0, r3, r0
 8003f1e:	b003      	add	sp, #12
 8003f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003f2a:	e7ed      	b.n	8003f08 <__exponent+0x4c>
 8003f2c:	2330      	movs	r3, #48	; 0x30
 8003f2e:	3130      	adds	r1, #48	; 0x30
 8003f30:	7083      	strb	r3, [r0, #2]
 8003f32:	70c1      	strb	r1, [r0, #3]
 8003f34:	1d03      	adds	r3, r0, #4
 8003f36:	e7f1      	b.n	8003f1c <__exponent+0x60>

08003f38 <_printf_float>:
 8003f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3c:	ed2d 8b02 	vpush	{d8}
 8003f40:	b08d      	sub	sp, #52	; 0x34
 8003f42:	460c      	mov	r4, r1
 8003f44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003f48:	4616      	mov	r6, r2
 8003f4a:	461f      	mov	r7, r3
 8003f4c:	4605      	mov	r5, r0
 8003f4e:	f002 fce5 	bl	800691c <_localeconv_r>
 8003f52:	f8d0 a000 	ldr.w	sl, [r0]
 8003f56:	4650      	mov	r0, sl
 8003f58:	f7fc f93a 	bl	80001d0 <strlen>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	9305      	str	r3, [sp, #20]
 8003f64:	f8d8 3000 	ldr.w	r3, [r8]
 8003f68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003f6c:	3307      	adds	r3, #7
 8003f6e:	f023 0307 	bic.w	r3, r3, #7
 8003f72:	f103 0208 	add.w	r2, r3, #8
 8003f76:	f8c8 2000 	str.w	r2, [r8]
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003f86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f8a:	9307      	str	r3, [sp, #28]
 8003f8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f90:	ee08 0a10 	vmov	s16, r0
 8003f94:	4b9f      	ldr	r3, [pc, #636]	; (8004214 <_printf_float+0x2dc>)
 8003f96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f9e:	f7fc fdc5 	bl	8000b2c <__aeabi_dcmpun>
 8003fa2:	bb88      	cbnz	r0, 8004008 <_printf_float+0xd0>
 8003fa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fa8:	4b9a      	ldr	r3, [pc, #616]	; (8004214 <_printf_float+0x2dc>)
 8003faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fae:	f7fc fd9f 	bl	8000af0 <__aeabi_dcmple>
 8003fb2:	bb48      	cbnz	r0, 8004008 <_printf_float+0xd0>
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	4640      	mov	r0, r8
 8003fba:	4649      	mov	r1, r9
 8003fbc:	f7fc fd8e 	bl	8000adc <__aeabi_dcmplt>
 8003fc0:	b110      	cbz	r0, 8003fc8 <_printf_float+0x90>
 8003fc2:	232d      	movs	r3, #45	; 0x2d
 8003fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fc8:	4b93      	ldr	r3, [pc, #588]	; (8004218 <_printf_float+0x2e0>)
 8003fca:	4894      	ldr	r0, [pc, #592]	; (800421c <_printf_float+0x2e4>)
 8003fcc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003fd0:	bf94      	ite	ls
 8003fd2:	4698      	movls	r8, r3
 8003fd4:	4680      	movhi	r8, r0
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	6123      	str	r3, [r4, #16]
 8003fda:	9b05      	ldr	r3, [sp, #20]
 8003fdc:	f023 0204 	bic.w	r2, r3, #4
 8003fe0:	6022      	str	r2, [r4, #0]
 8003fe2:	f04f 0900 	mov.w	r9, #0
 8003fe6:	9700      	str	r7, [sp, #0]
 8003fe8:	4633      	mov	r3, r6
 8003fea:	aa0b      	add	r2, sp, #44	; 0x2c
 8003fec:	4621      	mov	r1, r4
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f000 f9d8 	bl	80043a4 <_printf_common>
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	f040 8090 	bne.w	800411a <_printf_float+0x1e2>
 8003ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ffe:	b00d      	add	sp, #52	; 0x34
 8004000:	ecbd 8b02 	vpop	{d8}
 8004004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004008:	4642      	mov	r2, r8
 800400a:	464b      	mov	r3, r9
 800400c:	4640      	mov	r0, r8
 800400e:	4649      	mov	r1, r9
 8004010:	f7fc fd8c 	bl	8000b2c <__aeabi_dcmpun>
 8004014:	b140      	cbz	r0, 8004028 <_printf_float+0xf0>
 8004016:	464b      	mov	r3, r9
 8004018:	2b00      	cmp	r3, #0
 800401a:	bfbc      	itt	lt
 800401c:	232d      	movlt	r3, #45	; 0x2d
 800401e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004022:	487f      	ldr	r0, [pc, #508]	; (8004220 <_printf_float+0x2e8>)
 8004024:	4b7f      	ldr	r3, [pc, #508]	; (8004224 <_printf_float+0x2ec>)
 8004026:	e7d1      	b.n	8003fcc <_printf_float+0x94>
 8004028:	6863      	ldr	r3, [r4, #4]
 800402a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800402e:	9206      	str	r2, [sp, #24]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	d13f      	bne.n	80040b4 <_printf_float+0x17c>
 8004034:	2306      	movs	r3, #6
 8004036:	6063      	str	r3, [r4, #4]
 8004038:	9b05      	ldr	r3, [sp, #20]
 800403a:	6861      	ldr	r1, [r4, #4]
 800403c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004040:	2300      	movs	r3, #0
 8004042:	9303      	str	r3, [sp, #12]
 8004044:	ab0a      	add	r3, sp, #40	; 0x28
 8004046:	e9cd b301 	strd	fp, r3, [sp, #4]
 800404a:	ab09      	add	r3, sp, #36	; 0x24
 800404c:	ec49 8b10 	vmov	d0, r8, r9
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	6022      	str	r2, [r4, #0]
 8004054:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004058:	4628      	mov	r0, r5
 800405a:	f7ff fecd 	bl	8003df8 <__cvt>
 800405e:	9b06      	ldr	r3, [sp, #24]
 8004060:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004062:	2b47      	cmp	r3, #71	; 0x47
 8004064:	4680      	mov	r8, r0
 8004066:	d108      	bne.n	800407a <_printf_float+0x142>
 8004068:	1cc8      	adds	r0, r1, #3
 800406a:	db02      	blt.n	8004072 <_printf_float+0x13a>
 800406c:	6863      	ldr	r3, [r4, #4]
 800406e:	4299      	cmp	r1, r3
 8004070:	dd41      	ble.n	80040f6 <_printf_float+0x1be>
 8004072:	f1ab 0b02 	sub.w	fp, fp, #2
 8004076:	fa5f fb8b 	uxtb.w	fp, fp
 800407a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800407e:	d820      	bhi.n	80040c2 <_printf_float+0x18a>
 8004080:	3901      	subs	r1, #1
 8004082:	465a      	mov	r2, fp
 8004084:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004088:	9109      	str	r1, [sp, #36]	; 0x24
 800408a:	f7ff ff17 	bl	8003ebc <__exponent>
 800408e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004090:	1813      	adds	r3, r2, r0
 8004092:	2a01      	cmp	r2, #1
 8004094:	4681      	mov	r9, r0
 8004096:	6123      	str	r3, [r4, #16]
 8004098:	dc02      	bgt.n	80040a0 <_printf_float+0x168>
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	07d2      	lsls	r2, r2, #31
 800409e:	d501      	bpl.n	80040a4 <_printf_float+0x16c>
 80040a0:	3301      	adds	r3, #1
 80040a2:	6123      	str	r3, [r4, #16]
 80040a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d09c      	beq.n	8003fe6 <_printf_float+0xae>
 80040ac:	232d      	movs	r3, #45	; 0x2d
 80040ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040b2:	e798      	b.n	8003fe6 <_printf_float+0xae>
 80040b4:	9a06      	ldr	r2, [sp, #24]
 80040b6:	2a47      	cmp	r2, #71	; 0x47
 80040b8:	d1be      	bne.n	8004038 <_printf_float+0x100>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1bc      	bne.n	8004038 <_printf_float+0x100>
 80040be:	2301      	movs	r3, #1
 80040c0:	e7b9      	b.n	8004036 <_printf_float+0xfe>
 80040c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80040c6:	d118      	bne.n	80040fa <_printf_float+0x1c2>
 80040c8:	2900      	cmp	r1, #0
 80040ca:	6863      	ldr	r3, [r4, #4]
 80040cc:	dd0b      	ble.n	80040e6 <_printf_float+0x1ae>
 80040ce:	6121      	str	r1, [r4, #16]
 80040d0:	b913      	cbnz	r3, 80040d8 <_printf_float+0x1a0>
 80040d2:	6822      	ldr	r2, [r4, #0]
 80040d4:	07d0      	lsls	r0, r2, #31
 80040d6:	d502      	bpl.n	80040de <_printf_float+0x1a6>
 80040d8:	3301      	adds	r3, #1
 80040da:	440b      	add	r3, r1
 80040dc:	6123      	str	r3, [r4, #16]
 80040de:	65a1      	str	r1, [r4, #88]	; 0x58
 80040e0:	f04f 0900 	mov.w	r9, #0
 80040e4:	e7de      	b.n	80040a4 <_printf_float+0x16c>
 80040e6:	b913      	cbnz	r3, 80040ee <_printf_float+0x1b6>
 80040e8:	6822      	ldr	r2, [r4, #0]
 80040ea:	07d2      	lsls	r2, r2, #31
 80040ec:	d501      	bpl.n	80040f2 <_printf_float+0x1ba>
 80040ee:	3302      	adds	r3, #2
 80040f0:	e7f4      	b.n	80040dc <_printf_float+0x1a4>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e7f2      	b.n	80040dc <_printf_float+0x1a4>
 80040f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80040fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040fc:	4299      	cmp	r1, r3
 80040fe:	db05      	blt.n	800410c <_printf_float+0x1d4>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	6121      	str	r1, [r4, #16]
 8004104:	07d8      	lsls	r0, r3, #31
 8004106:	d5ea      	bpl.n	80040de <_printf_float+0x1a6>
 8004108:	1c4b      	adds	r3, r1, #1
 800410a:	e7e7      	b.n	80040dc <_printf_float+0x1a4>
 800410c:	2900      	cmp	r1, #0
 800410e:	bfd4      	ite	le
 8004110:	f1c1 0202 	rsble	r2, r1, #2
 8004114:	2201      	movgt	r2, #1
 8004116:	4413      	add	r3, r2
 8004118:	e7e0      	b.n	80040dc <_printf_float+0x1a4>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	055a      	lsls	r2, r3, #21
 800411e:	d407      	bmi.n	8004130 <_printf_float+0x1f8>
 8004120:	6923      	ldr	r3, [r4, #16]
 8004122:	4642      	mov	r2, r8
 8004124:	4631      	mov	r1, r6
 8004126:	4628      	mov	r0, r5
 8004128:	47b8      	blx	r7
 800412a:	3001      	adds	r0, #1
 800412c:	d12c      	bne.n	8004188 <_printf_float+0x250>
 800412e:	e764      	b.n	8003ffa <_printf_float+0xc2>
 8004130:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004134:	f240 80e0 	bls.w	80042f8 <_printf_float+0x3c0>
 8004138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800413c:	2200      	movs	r2, #0
 800413e:	2300      	movs	r3, #0
 8004140:	f7fc fcc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004144:	2800      	cmp	r0, #0
 8004146:	d034      	beq.n	80041b2 <_printf_float+0x27a>
 8004148:	4a37      	ldr	r2, [pc, #220]	; (8004228 <_printf_float+0x2f0>)
 800414a:	2301      	movs	r3, #1
 800414c:	4631      	mov	r1, r6
 800414e:	4628      	mov	r0, r5
 8004150:	47b8      	blx	r7
 8004152:	3001      	adds	r0, #1
 8004154:	f43f af51 	beq.w	8003ffa <_printf_float+0xc2>
 8004158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800415c:	429a      	cmp	r2, r3
 800415e:	db02      	blt.n	8004166 <_printf_float+0x22e>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	07d8      	lsls	r0, r3, #31
 8004164:	d510      	bpl.n	8004188 <_printf_float+0x250>
 8004166:	ee18 3a10 	vmov	r3, s16
 800416a:	4652      	mov	r2, sl
 800416c:	4631      	mov	r1, r6
 800416e:	4628      	mov	r0, r5
 8004170:	47b8      	blx	r7
 8004172:	3001      	adds	r0, #1
 8004174:	f43f af41 	beq.w	8003ffa <_printf_float+0xc2>
 8004178:	f04f 0800 	mov.w	r8, #0
 800417c:	f104 091a 	add.w	r9, r4, #26
 8004180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004182:	3b01      	subs	r3, #1
 8004184:	4543      	cmp	r3, r8
 8004186:	dc09      	bgt.n	800419c <_printf_float+0x264>
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	079b      	lsls	r3, r3, #30
 800418c:	f100 8105 	bmi.w	800439a <_printf_float+0x462>
 8004190:	68e0      	ldr	r0, [r4, #12]
 8004192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004194:	4298      	cmp	r0, r3
 8004196:	bfb8      	it	lt
 8004198:	4618      	movlt	r0, r3
 800419a:	e730      	b.n	8003ffe <_printf_float+0xc6>
 800419c:	2301      	movs	r3, #1
 800419e:	464a      	mov	r2, r9
 80041a0:	4631      	mov	r1, r6
 80041a2:	4628      	mov	r0, r5
 80041a4:	47b8      	blx	r7
 80041a6:	3001      	adds	r0, #1
 80041a8:	f43f af27 	beq.w	8003ffa <_printf_float+0xc2>
 80041ac:	f108 0801 	add.w	r8, r8, #1
 80041b0:	e7e6      	b.n	8004180 <_printf_float+0x248>
 80041b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	dc39      	bgt.n	800422c <_printf_float+0x2f4>
 80041b8:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <_printf_float+0x2f0>)
 80041ba:	2301      	movs	r3, #1
 80041bc:	4631      	mov	r1, r6
 80041be:	4628      	mov	r0, r5
 80041c0:	47b8      	blx	r7
 80041c2:	3001      	adds	r0, #1
 80041c4:	f43f af19 	beq.w	8003ffa <_printf_float+0xc2>
 80041c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041cc:	4313      	orrs	r3, r2
 80041ce:	d102      	bne.n	80041d6 <_printf_float+0x29e>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	07d9      	lsls	r1, r3, #31
 80041d4:	d5d8      	bpl.n	8004188 <_printf_float+0x250>
 80041d6:	ee18 3a10 	vmov	r3, s16
 80041da:	4652      	mov	r2, sl
 80041dc:	4631      	mov	r1, r6
 80041de:	4628      	mov	r0, r5
 80041e0:	47b8      	blx	r7
 80041e2:	3001      	adds	r0, #1
 80041e4:	f43f af09 	beq.w	8003ffa <_printf_float+0xc2>
 80041e8:	f04f 0900 	mov.w	r9, #0
 80041ec:	f104 0a1a 	add.w	sl, r4, #26
 80041f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f2:	425b      	negs	r3, r3
 80041f4:	454b      	cmp	r3, r9
 80041f6:	dc01      	bgt.n	80041fc <_printf_float+0x2c4>
 80041f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041fa:	e792      	b.n	8004122 <_printf_float+0x1ea>
 80041fc:	2301      	movs	r3, #1
 80041fe:	4652      	mov	r2, sl
 8004200:	4631      	mov	r1, r6
 8004202:	4628      	mov	r0, r5
 8004204:	47b8      	blx	r7
 8004206:	3001      	adds	r0, #1
 8004208:	f43f aef7 	beq.w	8003ffa <_printf_float+0xc2>
 800420c:	f109 0901 	add.w	r9, r9, #1
 8004210:	e7ee      	b.n	80041f0 <_printf_float+0x2b8>
 8004212:	bf00      	nop
 8004214:	7fefffff 	.word	0x7fefffff
 8004218:	08007ef8 	.word	0x08007ef8
 800421c:	08007efc 	.word	0x08007efc
 8004220:	08007f04 	.word	0x08007f04
 8004224:	08007f00 	.word	0x08007f00
 8004228:	08007f08 	.word	0x08007f08
 800422c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800422e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004230:	429a      	cmp	r2, r3
 8004232:	bfa8      	it	ge
 8004234:	461a      	movge	r2, r3
 8004236:	2a00      	cmp	r2, #0
 8004238:	4691      	mov	r9, r2
 800423a:	dc37      	bgt.n	80042ac <_printf_float+0x374>
 800423c:	f04f 0b00 	mov.w	fp, #0
 8004240:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004244:	f104 021a 	add.w	r2, r4, #26
 8004248:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800424a:	9305      	str	r3, [sp, #20]
 800424c:	eba3 0309 	sub.w	r3, r3, r9
 8004250:	455b      	cmp	r3, fp
 8004252:	dc33      	bgt.n	80042bc <_printf_float+0x384>
 8004254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004258:	429a      	cmp	r2, r3
 800425a:	db3b      	blt.n	80042d4 <_printf_float+0x39c>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	07da      	lsls	r2, r3, #31
 8004260:	d438      	bmi.n	80042d4 <_printf_float+0x39c>
 8004262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004264:	9a05      	ldr	r2, [sp, #20]
 8004266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004268:	1a9a      	subs	r2, r3, r2
 800426a:	eba3 0901 	sub.w	r9, r3, r1
 800426e:	4591      	cmp	r9, r2
 8004270:	bfa8      	it	ge
 8004272:	4691      	movge	r9, r2
 8004274:	f1b9 0f00 	cmp.w	r9, #0
 8004278:	dc35      	bgt.n	80042e6 <_printf_float+0x3ae>
 800427a:	f04f 0800 	mov.w	r8, #0
 800427e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004282:	f104 0a1a 	add.w	sl, r4, #26
 8004286:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	eba3 0309 	sub.w	r3, r3, r9
 8004290:	4543      	cmp	r3, r8
 8004292:	f77f af79 	ble.w	8004188 <_printf_float+0x250>
 8004296:	2301      	movs	r3, #1
 8004298:	4652      	mov	r2, sl
 800429a:	4631      	mov	r1, r6
 800429c:	4628      	mov	r0, r5
 800429e:	47b8      	blx	r7
 80042a0:	3001      	adds	r0, #1
 80042a2:	f43f aeaa 	beq.w	8003ffa <_printf_float+0xc2>
 80042a6:	f108 0801 	add.w	r8, r8, #1
 80042aa:	e7ec      	b.n	8004286 <_printf_float+0x34e>
 80042ac:	4613      	mov	r3, r2
 80042ae:	4631      	mov	r1, r6
 80042b0:	4642      	mov	r2, r8
 80042b2:	4628      	mov	r0, r5
 80042b4:	47b8      	blx	r7
 80042b6:	3001      	adds	r0, #1
 80042b8:	d1c0      	bne.n	800423c <_printf_float+0x304>
 80042ba:	e69e      	b.n	8003ffa <_printf_float+0xc2>
 80042bc:	2301      	movs	r3, #1
 80042be:	4631      	mov	r1, r6
 80042c0:	4628      	mov	r0, r5
 80042c2:	9205      	str	r2, [sp, #20]
 80042c4:	47b8      	blx	r7
 80042c6:	3001      	adds	r0, #1
 80042c8:	f43f ae97 	beq.w	8003ffa <_printf_float+0xc2>
 80042cc:	9a05      	ldr	r2, [sp, #20]
 80042ce:	f10b 0b01 	add.w	fp, fp, #1
 80042d2:	e7b9      	b.n	8004248 <_printf_float+0x310>
 80042d4:	ee18 3a10 	vmov	r3, s16
 80042d8:	4652      	mov	r2, sl
 80042da:	4631      	mov	r1, r6
 80042dc:	4628      	mov	r0, r5
 80042de:	47b8      	blx	r7
 80042e0:	3001      	adds	r0, #1
 80042e2:	d1be      	bne.n	8004262 <_printf_float+0x32a>
 80042e4:	e689      	b.n	8003ffa <_printf_float+0xc2>
 80042e6:	9a05      	ldr	r2, [sp, #20]
 80042e8:	464b      	mov	r3, r9
 80042ea:	4442      	add	r2, r8
 80042ec:	4631      	mov	r1, r6
 80042ee:	4628      	mov	r0, r5
 80042f0:	47b8      	blx	r7
 80042f2:	3001      	adds	r0, #1
 80042f4:	d1c1      	bne.n	800427a <_printf_float+0x342>
 80042f6:	e680      	b.n	8003ffa <_printf_float+0xc2>
 80042f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042fa:	2a01      	cmp	r2, #1
 80042fc:	dc01      	bgt.n	8004302 <_printf_float+0x3ca>
 80042fe:	07db      	lsls	r3, r3, #31
 8004300:	d538      	bpl.n	8004374 <_printf_float+0x43c>
 8004302:	2301      	movs	r3, #1
 8004304:	4642      	mov	r2, r8
 8004306:	4631      	mov	r1, r6
 8004308:	4628      	mov	r0, r5
 800430a:	47b8      	blx	r7
 800430c:	3001      	adds	r0, #1
 800430e:	f43f ae74 	beq.w	8003ffa <_printf_float+0xc2>
 8004312:	ee18 3a10 	vmov	r3, s16
 8004316:	4652      	mov	r2, sl
 8004318:	4631      	mov	r1, r6
 800431a:	4628      	mov	r0, r5
 800431c:	47b8      	blx	r7
 800431e:	3001      	adds	r0, #1
 8004320:	f43f ae6b 	beq.w	8003ffa <_printf_float+0xc2>
 8004324:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004328:	2200      	movs	r2, #0
 800432a:	2300      	movs	r3, #0
 800432c:	f7fc fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004330:	b9d8      	cbnz	r0, 800436a <_printf_float+0x432>
 8004332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004334:	f108 0201 	add.w	r2, r8, #1
 8004338:	3b01      	subs	r3, #1
 800433a:	4631      	mov	r1, r6
 800433c:	4628      	mov	r0, r5
 800433e:	47b8      	blx	r7
 8004340:	3001      	adds	r0, #1
 8004342:	d10e      	bne.n	8004362 <_printf_float+0x42a>
 8004344:	e659      	b.n	8003ffa <_printf_float+0xc2>
 8004346:	2301      	movs	r3, #1
 8004348:	4652      	mov	r2, sl
 800434a:	4631      	mov	r1, r6
 800434c:	4628      	mov	r0, r5
 800434e:	47b8      	blx	r7
 8004350:	3001      	adds	r0, #1
 8004352:	f43f ae52 	beq.w	8003ffa <_printf_float+0xc2>
 8004356:	f108 0801 	add.w	r8, r8, #1
 800435a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800435c:	3b01      	subs	r3, #1
 800435e:	4543      	cmp	r3, r8
 8004360:	dcf1      	bgt.n	8004346 <_printf_float+0x40e>
 8004362:	464b      	mov	r3, r9
 8004364:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004368:	e6dc      	b.n	8004124 <_printf_float+0x1ec>
 800436a:	f04f 0800 	mov.w	r8, #0
 800436e:	f104 0a1a 	add.w	sl, r4, #26
 8004372:	e7f2      	b.n	800435a <_printf_float+0x422>
 8004374:	2301      	movs	r3, #1
 8004376:	4642      	mov	r2, r8
 8004378:	e7df      	b.n	800433a <_printf_float+0x402>
 800437a:	2301      	movs	r3, #1
 800437c:	464a      	mov	r2, r9
 800437e:	4631      	mov	r1, r6
 8004380:	4628      	mov	r0, r5
 8004382:	47b8      	blx	r7
 8004384:	3001      	adds	r0, #1
 8004386:	f43f ae38 	beq.w	8003ffa <_printf_float+0xc2>
 800438a:	f108 0801 	add.w	r8, r8, #1
 800438e:	68e3      	ldr	r3, [r4, #12]
 8004390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004392:	1a5b      	subs	r3, r3, r1
 8004394:	4543      	cmp	r3, r8
 8004396:	dcf0      	bgt.n	800437a <_printf_float+0x442>
 8004398:	e6fa      	b.n	8004190 <_printf_float+0x258>
 800439a:	f04f 0800 	mov.w	r8, #0
 800439e:	f104 0919 	add.w	r9, r4, #25
 80043a2:	e7f4      	b.n	800438e <_printf_float+0x456>

080043a4 <_printf_common>:
 80043a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a8:	4616      	mov	r6, r2
 80043aa:	4699      	mov	r9, r3
 80043ac:	688a      	ldr	r2, [r1, #8]
 80043ae:	690b      	ldr	r3, [r1, #16]
 80043b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043b4:	4293      	cmp	r3, r2
 80043b6:	bfb8      	it	lt
 80043b8:	4613      	movlt	r3, r2
 80043ba:	6033      	str	r3, [r6, #0]
 80043bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043c0:	4607      	mov	r7, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	b10a      	cbz	r2, 80043ca <_printf_common+0x26>
 80043c6:	3301      	adds	r3, #1
 80043c8:	6033      	str	r3, [r6, #0]
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	0699      	lsls	r1, r3, #26
 80043ce:	bf42      	ittt	mi
 80043d0:	6833      	ldrmi	r3, [r6, #0]
 80043d2:	3302      	addmi	r3, #2
 80043d4:	6033      	strmi	r3, [r6, #0]
 80043d6:	6825      	ldr	r5, [r4, #0]
 80043d8:	f015 0506 	ands.w	r5, r5, #6
 80043dc:	d106      	bne.n	80043ec <_printf_common+0x48>
 80043de:	f104 0a19 	add.w	sl, r4, #25
 80043e2:	68e3      	ldr	r3, [r4, #12]
 80043e4:	6832      	ldr	r2, [r6, #0]
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	42ab      	cmp	r3, r5
 80043ea:	dc26      	bgt.n	800443a <_printf_common+0x96>
 80043ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043f0:	1e13      	subs	r3, r2, #0
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	bf18      	it	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	0692      	lsls	r2, r2, #26
 80043fa:	d42b      	bmi.n	8004454 <_printf_common+0xb0>
 80043fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004400:	4649      	mov	r1, r9
 8004402:	4638      	mov	r0, r7
 8004404:	47c0      	blx	r8
 8004406:	3001      	adds	r0, #1
 8004408:	d01e      	beq.n	8004448 <_printf_common+0xa4>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	68e5      	ldr	r5, [r4, #12]
 800440e:	6832      	ldr	r2, [r6, #0]
 8004410:	f003 0306 	and.w	r3, r3, #6
 8004414:	2b04      	cmp	r3, #4
 8004416:	bf08      	it	eq
 8004418:	1aad      	subeq	r5, r5, r2
 800441a:	68a3      	ldr	r3, [r4, #8]
 800441c:	6922      	ldr	r2, [r4, #16]
 800441e:	bf0c      	ite	eq
 8004420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004424:	2500      	movne	r5, #0
 8004426:	4293      	cmp	r3, r2
 8004428:	bfc4      	itt	gt
 800442a:	1a9b      	subgt	r3, r3, r2
 800442c:	18ed      	addgt	r5, r5, r3
 800442e:	2600      	movs	r6, #0
 8004430:	341a      	adds	r4, #26
 8004432:	42b5      	cmp	r5, r6
 8004434:	d11a      	bne.n	800446c <_printf_common+0xc8>
 8004436:	2000      	movs	r0, #0
 8004438:	e008      	b.n	800444c <_printf_common+0xa8>
 800443a:	2301      	movs	r3, #1
 800443c:	4652      	mov	r2, sl
 800443e:	4649      	mov	r1, r9
 8004440:	4638      	mov	r0, r7
 8004442:	47c0      	blx	r8
 8004444:	3001      	adds	r0, #1
 8004446:	d103      	bne.n	8004450 <_printf_common+0xac>
 8004448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800444c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004450:	3501      	adds	r5, #1
 8004452:	e7c6      	b.n	80043e2 <_printf_common+0x3e>
 8004454:	18e1      	adds	r1, r4, r3
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	2030      	movs	r0, #48	; 0x30
 800445a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800445e:	4422      	add	r2, r4
 8004460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004468:	3302      	adds	r3, #2
 800446a:	e7c7      	b.n	80043fc <_printf_common+0x58>
 800446c:	2301      	movs	r3, #1
 800446e:	4622      	mov	r2, r4
 8004470:	4649      	mov	r1, r9
 8004472:	4638      	mov	r0, r7
 8004474:	47c0      	blx	r8
 8004476:	3001      	adds	r0, #1
 8004478:	d0e6      	beq.n	8004448 <_printf_common+0xa4>
 800447a:	3601      	adds	r6, #1
 800447c:	e7d9      	b.n	8004432 <_printf_common+0x8e>
	...

08004480 <_printf_i>:
 8004480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	7e0f      	ldrb	r7, [r1, #24]
 8004486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004488:	2f78      	cmp	r7, #120	; 0x78
 800448a:	4691      	mov	r9, r2
 800448c:	4680      	mov	r8, r0
 800448e:	460c      	mov	r4, r1
 8004490:	469a      	mov	sl, r3
 8004492:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004496:	d807      	bhi.n	80044a8 <_printf_i+0x28>
 8004498:	2f62      	cmp	r7, #98	; 0x62
 800449a:	d80a      	bhi.n	80044b2 <_printf_i+0x32>
 800449c:	2f00      	cmp	r7, #0
 800449e:	f000 80d8 	beq.w	8004652 <_printf_i+0x1d2>
 80044a2:	2f58      	cmp	r7, #88	; 0x58
 80044a4:	f000 80a3 	beq.w	80045ee <_printf_i+0x16e>
 80044a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044b0:	e03a      	b.n	8004528 <_printf_i+0xa8>
 80044b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044b6:	2b15      	cmp	r3, #21
 80044b8:	d8f6      	bhi.n	80044a8 <_printf_i+0x28>
 80044ba:	a101      	add	r1, pc, #4	; (adr r1, 80044c0 <_printf_i+0x40>)
 80044bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044c0:	08004519 	.word	0x08004519
 80044c4:	0800452d 	.word	0x0800452d
 80044c8:	080044a9 	.word	0x080044a9
 80044cc:	080044a9 	.word	0x080044a9
 80044d0:	080044a9 	.word	0x080044a9
 80044d4:	080044a9 	.word	0x080044a9
 80044d8:	0800452d 	.word	0x0800452d
 80044dc:	080044a9 	.word	0x080044a9
 80044e0:	080044a9 	.word	0x080044a9
 80044e4:	080044a9 	.word	0x080044a9
 80044e8:	080044a9 	.word	0x080044a9
 80044ec:	08004639 	.word	0x08004639
 80044f0:	0800455d 	.word	0x0800455d
 80044f4:	0800461b 	.word	0x0800461b
 80044f8:	080044a9 	.word	0x080044a9
 80044fc:	080044a9 	.word	0x080044a9
 8004500:	0800465b 	.word	0x0800465b
 8004504:	080044a9 	.word	0x080044a9
 8004508:	0800455d 	.word	0x0800455d
 800450c:	080044a9 	.word	0x080044a9
 8004510:	080044a9 	.word	0x080044a9
 8004514:	08004623 	.word	0x08004623
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	1d1a      	adds	r2, r3, #4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	602a      	str	r2, [r5, #0]
 8004520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004528:	2301      	movs	r3, #1
 800452a:	e0a3      	b.n	8004674 <_printf_i+0x1f4>
 800452c:	6820      	ldr	r0, [r4, #0]
 800452e:	6829      	ldr	r1, [r5, #0]
 8004530:	0606      	lsls	r6, r0, #24
 8004532:	f101 0304 	add.w	r3, r1, #4
 8004536:	d50a      	bpl.n	800454e <_printf_i+0xce>
 8004538:	680e      	ldr	r6, [r1, #0]
 800453a:	602b      	str	r3, [r5, #0]
 800453c:	2e00      	cmp	r6, #0
 800453e:	da03      	bge.n	8004548 <_printf_i+0xc8>
 8004540:	232d      	movs	r3, #45	; 0x2d
 8004542:	4276      	negs	r6, r6
 8004544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004548:	485e      	ldr	r0, [pc, #376]	; (80046c4 <_printf_i+0x244>)
 800454a:	230a      	movs	r3, #10
 800454c:	e019      	b.n	8004582 <_printf_i+0x102>
 800454e:	680e      	ldr	r6, [r1, #0]
 8004550:	602b      	str	r3, [r5, #0]
 8004552:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004556:	bf18      	it	ne
 8004558:	b236      	sxthne	r6, r6
 800455a:	e7ef      	b.n	800453c <_printf_i+0xbc>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	6820      	ldr	r0, [r4, #0]
 8004560:	1d19      	adds	r1, r3, #4
 8004562:	6029      	str	r1, [r5, #0]
 8004564:	0601      	lsls	r1, r0, #24
 8004566:	d501      	bpl.n	800456c <_printf_i+0xec>
 8004568:	681e      	ldr	r6, [r3, #0]
 800456a:	e002      	b.n	8004572 <_printf_i+0xf2>
 800456c:	0646      	lsls	r6, r0, #25
 800456e:	d5fb      	bpl.n	8004568 <_printf_i+0xe8>
 8004570:	881e      	ldrh	r6, [r3, #0]
 8004572:	4854      	ldr	r0, [pc, #336]	; (80046c4 <_printf_i+0x244>)
 8004574:	2f6f      	cmp	r7, #111	; 0x6f
 8004576:	bf0c      	ite	eq
 8004578:	2308      	moveq	r3, #8
 800457a:	230a      	movne	r3, #10
 800457c:	2100      	movs	r1, #0
 800457e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004582:	6865      	ldr	r5, [r4, #4]
 8004584:	60a5      	str	r5, [r4, #8]
 8004586:	2d00      	cmp	r5, #0
 8004588:	bfa2      	ittt	ge
 800458a:	6821      	ldrge	r1, [r4, #0]
 800458c:	f021 0104 	bicge.w	r1, r1, #4
 8004590:	6021      	strge	r1, [r4, #0]
 8004592:	b90e      	cbnz	r6, 8004598 <_printf_i+0x118>
 8004594:	2d00      	cmp	r5, #0
 8004596:	d04d      	beq.n	8004634 <_printf_i+0x1b4>
 8004598:	4615      	mov	r5, r2
 800459a:	fbb6 f1f3 	udiv	r1, r6, r3
 800459e:	fb03 6711 	mls	r7, r3, r1, r6
 80045a2:	5dc7      	ldrb	r7, [r0, r7]
 80045a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045a8:	4637      	mov	r7, r6
 80045aa:	42bb      	cmp	r3, r7
 80045ac:	460e      	mov	r6, r1
 80045ae:	d9f4      	bls.n	800459a <_printf_i+0x11a>
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d10b      	bne.n	80045cc <_printf_i+0x14c>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	07de      	lsls	r6, r3, #31
 80045b8:	d508      	bpl.n	80045cc <_printf_i+0x14c>
 80045ba:	6923      	ldr	r3, [r4, #16]
 80045bc:	6861      	ldr	r1, [r4, #4]
 80045be:	4299      	cmp	r1, r3
 80045c0:	bfde      	ittt	le
 80045c2:	2330      	movle	r3, #48	; 0x30
 80045c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80045cc:	1b52      	subs	r2, r2, r5
 80045ce:	6122      	str	r2, [r4, #16]
 80045d0:	f8cd a000 	str.w	sl, [sp]
 80045d4:	464b      	mov	r3, r9
 80045d6:	aa03      	add	r2, sp, #12
 80045d8:	4621      	mov	r1, r4
 80045da:	4640      	mov	r0, r8
 80045dc:	f7ff fee2 	bl	80043a4 <_printf_common>
 80045e0:	3001      	adds	r0, #1
 80045e2:	d14c      	bne.n	800467e <_printf_i+0x1fe>
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045e8:	b004      	add	sp, #16
 80045ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ee:	4835      	ldr	r0, [pc, #212]	; (80046c4 <_printf_i+0x244>)
 80045f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045f4:	6829      	ldr	r1, [r5, #0]
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80045fc:	6029      	str	r1, [r5, #0]
 80045fe:	061d      	lsls	r5, r3, #24
 8004600:	d514      	bpl.n	800462c <_printf_i+0x1ac>
 8004602:	07df      	lsls	r7, r3, #31
 8004604:	bf44      	itt	mi
 8004606:	f043 0320 	orrmi.w	r3, r3, #32
 800460a:	6023      	strmi	r3, [r4, #0]
 800460c:	b91e      	cbnz	r6, 8004616 <_printf_i+0x196>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	f023 0320 	bic.w	r3, r3, #32
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	2310      	movs	r3, #16
 8004618:	e7b0      	b.n	800457c <_printf_i+0xfc>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	f043 0320 	orr.w	r3, r3, #32
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	2378      	movs	r3, #120	; 0x78
 8004624:	4828      	ldr	r0, [pc, #160]	; (80046c8 <_printf_i+0x248>)
 8004626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800462a:	e7e3      	b.n	80045f4 <_printf_i+0x174>
 800462c:	0659      	lsls	r1, r3, #25
 800462e:	bf48      	it	mi
 8004630:	b2b6      	uxthmi	r6, r6
 8004632:	e7e6      	b.n	8004602 <_printf_i+0x182>
 8004634:	4615      	mov	r5, r2
 8004636:	e7bb      	b.n	80045b0 <_printf_i+0x130>
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	6826      	ldr	r6, [r4, #0]
 800463c:	6961      	ldr	r1, [r4, #20]
 800463e:	1d18      	adds	r0, r3, #4
 8004640:	6028      	str	r0, [r5, #0]
 8004642:	0635      	lsls	r5, r6, #24
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	d501      	bpl.n	800464c <_printf_i+0x1cc>
 8004648:	6019      	str	r1, [r3, #0]
 800464a:	e002      	b.n	8004652 <_printf_i+0x1d2>
 800464c:	0670      	lsls	r0, r6, #25
 800464e:	d5fb      	bpl.n	8004648 <_printf_i+0x1c8>
 8004650:	8019      	strh	r1, [r3, #0]
 8004652:	2300      	movs	r3, #0
 8004654:	6123      	str	r3, [r4, #16]
 8004656:	4615      	mov	r5, r2
 8004658:	e7ba      	b.n	80045d0 <_printf_i+0x150>
 800465a:	682b      	ldr	r3, [r5, #0]
 800465c:	1d1a      	adds	r2, r3, #4
 800465e:	602a      	str	r2, [r5, #0]
 8004660:	681d      	ldr	r5, [r3, #0]
 8004662:	6862      	ldr	r2, [r4, #4]
 8004664:	2100      	movs	r1, #0
 8004666:	4628      	mov	r0, r5
 8004668:	f7fb fdba 	bl	80001e0 <memchr>
 800466c:	b108      	cbz	r0, 8004672 <_printf_i+0x1f2>
 800466e:	1b40      	subs	r0, r0, r5
 8004670:	6060      	str	r0, [r4, #4]
 8004672:	6863      	ldr	r3, [r4, #4]
 8004674:	6123      	str	r3, [r4, #16]
 8004676:	2300      	movs	r3, #0
 8004678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800467c:	e7a8      	b.n	80045d0 <_printf_i+0x150>
 800467e:	6923      	ldr	r3, [r4, #16]
 8004680:	462a      	mov	r2, r5
 8004682:	4649      	mov	r1, r9
 8004684:	4640      	mov	r0, r8
 8004686:	47d0      	blx	sl
 8004688:	3001      	adds	r0, #1
 800468a:	d0ab      	beq.n	80045e4 <_printf_i+0x164>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	079b      	lsls	r3, r3, #30
 8004690:	d413      	bmi.n	80046ba <_printf_i+0x23a>
 8004692:	68e0      	ldr	r0, [r4, #12]
 8004694:	9b03      	ldr	r3, [sp, #12]
 8004696:	4298      	cmp	r0, r3
 8004698:	bfb8      	it	lt
 800469a:	4618      	movlt	r0, r3
 800469c:	e7a4      	b.n	80045e8 <_printf_i+0x168>
 800469e:	2301      	movs	r3, #1
 80046a0:	4632      	mov	r2, r6
 80046a2:	4649      	mov	r1, r9
 80046a4:	4640      	mov	r0, r8
 80046a6:	47d0      	blx	sl
 80046a8:	3001      	adds	r0, #1
 80046aa:	d09b      	beq.n	80045e4 <_printf_i+0x164>
 80046ac:	3501      	adds	r5, #1
 80046ae:	68e3      	ldr	r3, [r4, #12]
 80046b0:	9903      	ldr	r1, [sp, #12]
 80046b2:	1a5b      	subs	r3, r3, r1
 80046b4:	42ab      	cmp	r3, r5
 80046b6:	dcf2      	bgt.n	800469e <_printf_i+0x21e>
 80046b8:	e7eb      	b.n	8004692 <_printf_i+0x212>
 80046ba:	2500      	movs	r5, #0
 80046bc:	f104 0619 	add.w	r6, r4, #25
 80046c0:	e7f5      	b.n	80046ae <_printf_i+0x22e>
 80046c2:	bf00      	nop
 80046c4:	08007f0a 	.word	0x08007f0a
 80046c8:	08007f1b 	.word	0x08007f1b

080046cc <iprintf>:
 80046cc:	b40f      	push	{r0, r1, r2, r3}
 80046ce:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <iprintf+0x2c>)
 80046d0:	b513      	push	{r0, r1, r4, lr}
 80046d2:	681c      	ldr	r4, [r3, #0]
 80046d4:	b124      	cbz	r4, 80046e0 <iprintf+0x14>
 80046d6:	69a3      	ldr	r3, [r4, #24]
 80046d8:	b913      	cbnz	r3, 80046e0 <iprintf+0x14>
 80046da:	4620      	mov	r0, r4
 80046dc:	f001 fd12 	bl	8006104 <__sinit>
 80046e0:	ab05      	add	r3, sp, #20
 80046e2:	9a04      	ldr	r2, [sp, #16]
 80046e4:	68a1      	ldr	r1, [r4, #8]
 80046e6:	9301      	str	r3, [sp, #4]
 80046e8:	4620      	mov	r0, r4
 80046ea:	f002 ff1b 	bl	8007524 <_vfiprintf_r>
 80046ee:	b002      	add	sp, #8
 80046f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f4:	b004      	add	sp, #16
 80046f6:	4770      	bx	lr
 80046f8:	2000000c 	.word	0x2000000c

080046fc <sulp>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	4604      	mov	r4, r0
 8004700:	460d      	mov	r5, r1
 8004702:	ec45 4b10 	vmov	d0, r4, r5
 8004706:	4616      	mov	r6, r2
 8004708:	f002 fc9c 	bl	8007044 <__ulp>
 800470c:	ec51 0b10 	vmov	r0, r1, d0
 8004710:	b17e      	cbz	r6, 8004732 <sulp+0x36>
 8004712:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004716:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800471a:	2b00      	cmp	r3, #0
 800471c:	dd09      	ble.n	8004732 <sulp+0x36>
 800471e:	051b      	lsls	r3, r3, #20
 8004720:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004724:	2400      	movs	r4, #0
 8004726:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800472a:	4622      	mov	r2, r4
 800472c:	462b      	mov	r3, r5
 800472e:	f7fb ff63 	bl	80005f8 <__aeabi_dmul>
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	0000      	movs	r0, r0
	...

08004738 <_strtod_l>:
 8004738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473c:	ed2d 8b02 	vpush	{d8}
 8004740:	b09d      	sub	sp, #116	; 0x74
 8004742:	461f      	mov	r7, r3
 8004744:	2300      	movs	r3, #0
 8004746:	9318      	str	r3, [sp, #96]	; 0x60
 8004748:	4ba2      	ldr	r3, [pc, #648]	; (80049d4 <_strtod_l+0x29c>)
 800474a:	9213      	str	r2, [sp, #76]	; 0x4c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	9305      	str	r3, [sp, #20]
 8004750:	4604      	mov	r4, r0
 8004752:	4618      	mov	r0, r3
 8004754:	4688      	mov	r8, r1
 8004756:	f7fb fd3b 	bl	80001d0 <strlen>
 800475a:	f04f 0a00 	mov.w	sl, #0
 800475e:	4605      	mov	r5, r0
 8004760:	f04f 0b00 	mov.w	fp, #0
 8004764:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	2a2b      	cmp	r2, #43	; 0x2b
 800476e:	d04e      	beq.n	800480e <_strtod_l+0xd6>
 8004770:	d83b      	bhi.n	80047ea <_strtod_l+0xb2>
 8004772:	2a0d      	cmp	r2, #13
 8004774:	d834      	bhi.n	80047e0 <_strtod_l+0xa8>
 8004776:	2a08      	cmp	r2, #8
 8004778:	d834      	bhi.n	80047e4 <_strtod_l+0xac>
 800477a:	2a00      	cmp	r2, #0
 800477c:	d03e      	beq.n	80047fc <_strtod_l+0xc4>
 800477e:	2300      	movs	r3, #0
 8004780:	930a      	str	r3, [sp, #40]	; 0x28
 8004782:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004784:	7833      	ldrb	r3, [r6, #0]
 8004786:	2b30      	cmp	r3, #48	; 0x30
 8004788:	f040 80b0 	bne.w	80048ec <_strtod_l+0x1b4>
 800478c:	7873      	ldrb	r3, [r6, #1]
 800478e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004792:	2b58      	cmp	r3, #88	; 0x58
 8004794:	d168      	bne.n	8004868 <_strtod_l+0x130>
 8004796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	ab18      	add	r3, sp, #96	; 0x60
 800479c:	9702      	str	r7, [sp, #8]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	4a8d      	ldr	r2, [pc, #564]	; (80049d8 <_strtod_l+0x2a0>)
 80047a2:	ab19      	add	r3, sp, #100	; 0x64
 80047a4:	a917      	add	r1, sp, #92	; 0x5c
 80047a6:	4620      	mov	r0, r4
 80047a8:	f001 fdb0 	bl	800630c <__gethex>
 80047ac:	f010 0707 	ands.w	r7, r0, #7
 80047b0:	4605      	mov	r5, r0
 80047b2:	d005      	beq.n	80047c0 <_strtod_l+0x88>
 80047b4:	2f06      	cmp	r7, #6
 80047b6:	d12c      	bne.n	8004812 <_strtod_l+0xda>
 80047b8:	3601      	adds	r6, #1
 80047ba:	2300      	movs	r3, #0
 80047bc:	9617      	str	r6, [sp, #92]	; 0x5c
 80047be:	930a      	str	r3, [sp, #40]	; 0x28
 80047c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f040 8590 	bne.w	80052e8 <_strtod_l+0xbb0>
 80047c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ca:	b1eb      	cbz	r3, 8004808 <_strtod_l+0xd0>
 80047cc:	4652      	mov	r2, sl
 80047ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80047d2:	ec43 2b10 	vmov	d0, r2, r3
 80047d6:	b01d      	add	sp, #116	; 0x74
 80047d8:	ecbd 8b02 	vpop	{d8}
 80047dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e0:	2a20      	cmp	r2, #32
 80047e2:	d1cc      	bne.n	800477e <_strtod_l+0x46>
 80047e4:	3301      	adds	r3, #1
 80047e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80047e8:	e7be      	b.n	8004768 <_strtod_l+0x30>
 80047ea:	2a2d      	cmp	r2, #45	; 0x2d
 80047ec:	d1c7      	bne.n	800477e <_strtod_l+0x46>
 80047ee:	2201      	movs	r2, #1
 80047f0:	920a      	str	r2, [sp, #40]	; 0x28
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80047f6:	785b      	ldrb	r3, [r3, #1]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1c2      	bne.n	8004782 <_strtod_l+0x4a>
 80047fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80047fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004802:	2b00      	cmp	r3, #0
 8004804:	f040 856e 	bne.w	80052e4 <_strtod_l+0xbac>
 8004808:	4652      	mov	r2, sl
 800480a:	465b      	mov	r3, fp
 800480c:	e7e1      	b.n	80047d2 <_strtod_l+0x9a>
 800480e:	2200      	movs	r2, #0
 8004810:	e7ee      	b.n	80047f0 <_strtod_l+0xb8>
 8004812:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004814:	b13a      	cbz	r2, 8004826 <_strtod_l+0xee>
 8004816:	2135      	movs	r1, #53	; 0x35
 8004818:	a81a      	add	r0, sp, #104	; 0x68
 800481a:	f002 fd1e 	bl	800725a <__copybits>
 800481e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004820:	4620      	mov	r0, r4
 8004822:	f002 f8dd 	bl	80069e0 <_Bfree>
 8004826:	3f01      	subs	r7, #1
 8004828:	2f04      	cmp	r7, #4
 800482a:	d806      	bhi.n	800483a <_strtod_l+0x102>
 800482c:	e8df f007 	tbb	[pc, r7]
 8004830:	1714030a 	.word	0x1714030a
 8004834:	0a          	.byte	0x0a
 8004835:	00          	.byte	0x00
 8004836:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800483a:	0728      	lsls	r0, r5, #28
 800483c:	d5c0      	bpl.n	80047c0 <_strtod_l+0x88>
 800483e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004842:	e7bd      	b.n	80047c0 <_strtod_l+0x88>
 8004844:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004848:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800484a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800484e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004852:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004856:	e7f0      	b.n	800483a <_strtod_l+0x102>
 8004858:	f8df b180 	ldr.w	fp, [pc, #384]	; 80049dc <_strtod_l+0x2a4>
 800485c:	e7ed      	b.n	800483a <_strtod_l+0x102>
 800485e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004862:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004866:	e7e8      	b.n	800483a <_strtod_l+0x102>
 8004868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	9217      	str	r2, [sp, #92]	; 0x5c
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	2b30      	cmp	r3, #48	; 0x30
 8004872:	d0f9      	beq.n	8004868 <_strtod_l+0x130>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0a3      	beq.n	80047c0 <_strtod_l+0x88>
 8004878:	2301      	movs	r3, #1
 800487a:	f04f 0900 	mov.w	r9, #0
 800487e:	9304      	str	r3, [sp, #16]
 8004880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004882:	9308      	str	r3, [sp, #32]
 8004884:	f8cd 901c 	str.w	r9, [sp, #28]
 8004888:	464f      	mov	r7, r9
 800488a:	220a      	movs	r2, #10
 800488c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800488e:	7806      	ldrb	r6, [r0, #0]
 8004890:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004894:	b2d9      	uxtb	r1, r3
 8004896:	2909      	cmp	r1, #9
 8004898:	d92a      	bls.n	80048f0 <_strtod_l+0x1b8>
 800489a:	9905      	ldr	r1, [sp, #20]
 800489c:	462a      	mov	r2, r5
 800489e:	f002 ffce 	bl	800783e <strncmp>
 80048a2:	b398      	cbz	r0, 800490c <_strtod_l+0x1d4>
 80048a4:	2000      	movs	r0, #0
 80048a6:	4632      	mov	r2, r6
 80048a8:	463d      	mov	r5, r7
 80048aa:	9005      	str	r0, [sp, #20]
 80048ac:	4603      	mov	r3, r0
 80048ae:	2a65      	cmp	r2, #101	; 0x65
 80048b0:	d001      	beq.n	80048b6 <_strtod_l+0x17e>
 80048b2:	2a45      	cmp	r2, #69	; 0x45
 80048b4:	d118      	bne.n	80048e8 <_strtod_l+0x1b0>
 80048b6:	b91d      	cbnz	r5, 80048c0 <_strtod_l+0x188>
 80048b8:	9a04      	ldr	r2, [sp, #16]
 80048ba:	4302      	orrs	r2, r0
 80048bc:	d09e      	beq.n	80047fc <_strtod_l+0xc4>
 80048be:	2500      	movs	r5, #0
 80048c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80048c4:	f108 0201 	add.w	r2, r8, #1
 80048c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80048ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 80048ce:	2a2b      	cmp	r2, #43	; 0x2b
 80048d0:	d075      	beq.n	80049be <_strtod_l+0x286>
 80048d2:	2a2d      	cmp	r2, #45	; 0x2d
 80048d4:	d07b      	beq.n	80049ce <_strtod_l+0x296>
 80048d6:	f04f 0c00 	mov.w	ip, #0
 80048da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80048de:	2909      	cmp	r1, #9
 80048e0:	f240 8082 	bls.w	80049e8 <_strtod_l+0x2b0>
 80048e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80048e8:	2600      	movs	r6, #0
 80048ea:	e09d      	b.n	8004a28 <_strtod_l+0x2f0>
 80048ec:	2300      	movs	r3, #0
 80048ee:	e7c4      	b.n	800487a <_strtod_l+0x142>
 80048f0:	2f08      	cmp	r7, #8
 80048f2:	bfd8      	it	le
 80048f4:	9907      	ldrle	r1, [sp, #28]
 80048f6:	f100 0001 	add.w	r0, r0, #1
 80048fa:	bfda      	itte	le
 80048fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8004900:	9307      	strle	r3, [sp, #28]
 8004902:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004906:	3701      	adds	r7, #1
 8004908:	9017      	str	r0, [sp, #92]	; 0x5c
 800490a:	e7bf      	b.n	800488c <_strtod_l+0x154>
 800490c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800490e:	195a      	adds	r2, r3, r5
 8004910:	9217      	str	r2, [sp, #92]	; 0x5c
 8004912:	5d5a      	ldrb	r2, [r3, r5]
 8004914:	2f00      	cmp	r7, #0
 8004916:	d037      	beq.n	8004988 <_strtod_l+0x250>
 8004918:	9005      	str	r0, [sp, #20]
 800491a:	463d      	mov	r5, r7
 800491c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004920:	2b09      	cmp	r3, #9
 8004922:	d912      	bls.n	800494a <_strtod_l+0x212>
 8004924:	2301      	movs	r3, #1
 8004926:	e7c2      	b.n	80048ae <_strtod_l+0x176>
 8004928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	9217      	str	r2, [sp, #92]	; 0x5c
 800492e:	785a      	ldrb	r2, [r3, #1]
 8004930:	3001      	adds	r0, #1
 8004932:	2a30      	cmp	r2, #48	; 0x30
 8004934:	d0f8      	beq.n	8004928 <_strtod_l+0x1f0>
 8004936:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800493a:	2b08      	cmp	r3, #8
 800493c:	f200 84d9 	bhi.w	80052f2 <_strtod_l+0xbba>
 8004940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004942:	9005      	str	r0, [sp, #20]
 8004944:	2000      	movs	r0, #0
 8004946:	9308      	str	r3, [sp, #32]
 8004948:	4605      	mov	r5, r0
 800494a:	3a30      	subs	r2, #48	; 0x30
 800494c:	f100 0301 	add.w	r3, r0, #1
 8004950:	d014      	beq.n	800497c <_strtod_l+0x244>
 8004952:	9905      	ldr	r1, [sp, #20]
 8004954:	4419      	add	r1, r3
 8004956:	9105      	str	r1, [sp, #20]
 8004958:	462b      	mov	r3, r5
 800495a:	eb00 0e05 	add.w	lr, r0, r5
 800495e:	210a      	movs	r1, #10
 8004960:	4573      	cmp	r3, lr
 8004962:	d113      	bne.n	800498c <_strtod_l+0x254>
 8004964:	182b      	adds	r3, r5, r0
 8004966:	2b08      	cmp	r3, #8
 8004968:	f105 0501 	add.w	r5, r5, #1
 800496c:	4405      	add	r5, r0
 800496e:	dc1c      	bgt.n	80049aa <_strtod_l+0x272>
 8004970:	9907      	ldr	r1, [sp, #28]
 8004972:	230a      	movs	r3, #10
 8004974:	fb03 2301 	mla	r3, r3, r1, r2
 8004978:	9307      	str	r3, [sp, #28]
 800497a:	2300      	movs	r3, #0
 800497c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800497e:	1c51      	adds	r1, r2, #1
 8004980:	9117      	str	r1, [sp, #92]	; 0x5c
 8004982:	7852      	ldrb	r2, [r2, #1]
 8004984:	4618      	mov	r0, r3
 8004986:	e7c9      	b.n	800491c <_strtod_l+0x1e4>
 8004988:	4638      	mov	r0, r7
 800498a:	e7d2      	b.n	8004932 <_strtod_l+0x1fa>
 800498c:	2b08      	cmp	r3, #8
 800498e:	dc04      	bgt.n	800499a <_strtod_l+0x262>
 8004990:	9e07      	ldr	r6, [sp, #28]
 8004992:	434e      	muls	r6, r1
 8004994:	9607      	str	r6, [sp, #28]
 8004996:	3301      	adds	r3, #1
 8004998:	e7e2      	b.n	8004960 <_strtod_l+0x228>
 800499a:	f103 0c01 	add.w	ip, r3, #1
 800499e:	f1bc 0f10 	cmp.w	ip, #16
 80049a2:	bfd8      	it	le
 80049a4:	fb01 f909 	mulle.w	r9, r1, r9
 80049a8:	e7f5      	b.n	8004996 <_strtod_l+0x25e>
 80049aa:	2d10      	cmp	r5, #16
 80049ac:	bfdc      	itt	le
 80049ae:	230a      	movle	r3, #10
 80049b0:	fb03 2909 	mlale	r9, r3, r9, r2
 80049b4:	e7e1      	b.n	800497a <_strtod_l+0x242>
 80049b6:	2300      	movs	r3, #0
 80049b8:	9305      	str	r3, [sp, #20]
 80049ba:	2301      	movs	r3, #1
 80049bc:	e77c      	b.n	80048b8 <_strtod_l+0x180>
 80049be:	f04f 0c00 	mov.w	ip, #0
 80049c2:	f108 0202 	add.w	r2, r8, #2
 80049c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80049c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80049cc:	e785      	b.n	80048da <_strtod_l+0x1a2>
 80049ce:	f04f 0c01 	mov.w	ip, #1
 80049d2:	e7f6      	b.n	80049c2 <_strtod_l+0x28a>
 80049d4:	080080d8 	.word	0x080080d8
 80049d8:	08007f2c 	.word	0x08007f2c
 80049dc:	7ff00000 	.word	0x7ff00000
 80049e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80049e2:	1c51      	adds	r1, r2, #1
 80049e4:	9117      	str	r1, [sp, #92]	; 0x5c
 80049e6:	7852      	ldrb	r2, [r2, #1]
 80049e8:	2a30      	cmp	r2, #48	; 0x30
 80049ea:	d0f9      	beq.n	80049e0 <_strtod_l+0x2a8>
 80049ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80049f0:	2908      	cmp	r1, #8
 80049f2:	f63f af79 	bhi.w	80048e8 <_strtod_l+0x1b0>
 80049f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80049fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80049fc:	9206      	str	r2, [sp, #24]
 80049fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004a00:	1c51      	adds	r1, r2, #1
 8004a02:	9117      	str	r1, [sp, #92]	; 0x5c
 8004a04:	7852      	ldrb	r2, [r2, #1]
 8004a06:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004a0a:	2e09      	cmp	r6, #9
 8004a0c:	d937      	bls.n	8004a7e <_strtod_l+0x346>
 8004a0e:	9e06      	ldr	r6, [sp, #24]
 8004a10:	1b89      	subs	r1, r1, r6
 8004a12:	2908      	cmp	r1, #8
 8004a14:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004a18:	dc02      	bgt.n	8004a20 <_strtod_l+0x2e8>
 8004a1a:	4576      	cmp	r6, lr
 8004a1c:	bfa8      	it	ge
 8004a1e:	4676      	movge	r6, lr
 8004a20:	f1bc 0f00 	cmp.w	ip, #0
 8004a24:	d000      	beq.n	8004a28 <_strtod_l+0x2f0>
 8004a26:	4276      	negs	r6, r6
 8004a28:	2d00      	cmp	r5, #0
 8004a2a:	d14d      	bne.n	8004ac8 <_strtod_l+0x390>
 8004a2c:	9904      	ldr	r1, [sp, #16]
 8004a2e:	4301      	orrs	r1, r0
 8004a30:	f47f aec6 	bne.w	80047c0 <_strtod_l+0x88>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f47f aee1 	bne.w	80047fc <_strtod_l+0xc4>
 8004a3a:	2a69      	cmp	r2, #105	; 0x69
 8004a3c:	d027      	beq.n	8004a8e <_strtod_l+0x356>
 8004a3e:	dc24      	bgt.n	8004a8a <_strtod_l+0x352>
 8004a40:	2a49      	cmp	r2, #73	; 0x49
 8004a42:	d024      	beq.n	8004a8e <_strtod_l+0x356>
 8004a44:	2a4e      	cmp	r2, #78	; 0x4e
 8004a46:	f47f aed9 	bne.w	80047fc <_strtod_l+0xc4>
 8004a4a:	499f      	ldr	r1, [pc, #636]	; (8004cc8 <_strtod_l+0x590>)
 8004a4c:	a817      	add	r0, sp, #92	; 0x5c
 8004a4e:	f001 feb5 	bl	80067bc <__match>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	f43f aed2 	beq.w	80047fc <_strtod_l+0xc4>
 8004a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b28      	cmp	r3, #40	; 0x28
 8004a5e:	d12d      	bne.n	8004abc <_strtod_l+0x384>
 8004a60:	499a      	ldr	r1, [pc, #616]	; (8004ccc <_strtod_l+0x594>)
 8004a62:	aa1a      	add	r2, sp, #104	; 0x68
 8004a64:	a817      	add	r0, sp, #92	; 0x5c
 8004a66:	f001 febd 	bl	80067e4 <__hexnan>
 8004a6a:	2805      	cmp	r0, #5
 8004a6c:	d126      	bne.n	8004abc <_strtod_l+0x384>
 8004a6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004a74:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004a78:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004a7c:	e6a0      	b.n	80047c0 <_strtod_l+0x88>
 8004a7e:	210a      	movs	r1, #10
 8004a80:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004a84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004a88:	e7b9      	b.n	80049fe <_strtod_l+0x2c6>
 8004a8a:	2a6e      	cmp	r2, #110	; 0x6e
 8004a8c:	e7db      	b.n	8004a46 <_strtod_l+0x30e>
 8004a8e:	4990      	ldr	r1, [pc, #576]	; (8004cd0 <_strtod_l+0x598>)
 8004a90:	a817      	add	r0, sp, #92	; 0x5c
 8004a92:	f001 fe93 	bl	80067bc <__match>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	f43f aeb0 	beq.w	80047fc <_strtod_l+0xc4>
 8004a9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a9e:	498d      	ldr	r1, [pc, #564]	; (8004cd4 <_strtod_l+0x59c>)
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	a817      	add	r0, sp, #92	; 0x5c
 8004aa4:	9317      	str	r3, [sp, #92]	; 0x5c
 8004aa6:	f001 fe89 	bl	80067bc <__match>
 8004aaa:	b910      	cbnz	r0, 8004ab2 <_strtod_l+0x37a>
 8004aac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004aae:	3301      	adds	r3, #1
 8004ab0:	9317      	str	r3, [sp, #92]	; 0x5c
 8004ab2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8004ce4 <_strtod_l+0x5ac>
 8004ab6:	f04f 0a00 	mov.w	sl, #0
 8004aba:	e681      	b.n	80047c0 <_strtod_l+0x88>
 8004abc:	4886      	ldr	r0, [pc, #536]	; (8004cd8 <_strtod_l+0x5a0>)
 8004abe:	f002 fe63 	bl	8007788 <nan>
 8004ac2:	ec5b ab10 	vmov	sl, fp, d0
 8004ac6:	e67b      	b.n	80047c0 <_strtod_l+0x88>
 8004ac8:	9b05      	ldr	r3, [sp, #20]
 8004aca:	9807      	ldr	r0, [sp, #28]
 8004acc:	1af3      	subs	r3, r6, r3
 8004ace:	2f00      	cmp	r7, #0
 8004ad0:	bf08      	it	eq
 8004ad2:	462f      	moveq	r7, r5
 8004ad4:	2d10      	cmp	r5, #16
 8004ad6:	9306      	str	r3, [sp, #24]
 8004ad8:	46a8      	mov	r8, r5
 8004ada:	bfa8      	it	ge
 8004adc:	f04f 0810 	movge.w	r8, #16
 8004ae0:	f7fb fd10 	bl	8000504 <__aeabi_ui2d>
 8004ae4:	2d09      	cmp	r5, #9
 8004ae6:	4682      	mov	sl, r0
 8004ae8:	468b      	mov	fp, r1
 8004aea:	dd13      	ble.n	8004b14 <_strtod_l+0x3dc>
 8004aec:	4b7b      	ldr	r3, [pc, #492]	; (8004cdc <_strtod_l+0x5a4>)
 8004aee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004af2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004af6:	f7fb fd7f 	bl	80005f8 <__aeabi_dmul>
 8004afa:	4682      	mov	sl, r0
 8004afc:	4648      	mov	r0, r9
 8004afe:	468b      	mov	fp, r1
 8004b00:	f7fb fd00 	bl	8000504 <__aeabi_ui2d>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4650      	mov	r0, sl
 8004b0a:	4659      	mov	r1, fp
 8004b0c:	f7fb fbbe 	bl	800028c <__adddf3>
 8004b10:	4682      	mov	sl, r0
 8004b12:	468b      	mov	fp, r1
 8004b14:	2d0f      	cmp	r5, #15
 8004b16:	dc38      	bgt.n	8004b8a <_strtod_l+0x452>
 8004b18:	9b06      	ldr	r3, [sp, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f43f ae50 	beq.w	80047c0 <_strtod_l+0x88>
 8004b20:	dd24      	ble.n	8004b6c <_strtod_l+0x434>
 8004b22:	2b16      	cmp	r3, #22
 8004b24:	dc0b      	bgt.n	8004b3e <_strtod_l+0x406>
 8004b26:	496d      	ldr	r1, [pc, #436]	; (8004cdc <_strtod_l+0x5a4>)
 8004b28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b30:	4652      	mov	r2, sl
 8004b32:	465b      	mov	r3, fp
 8004b34:	f7fb fd60 	bl	80005f8 <__aeabi_dmul>
 8004b38:	4682      	mov	sl, r0
 8004b3a:	468b      	mov	fp, r1
 8004b3c:	e640      	b.n	80047c0 <_strtod_l+0x88>
 8004b3e:	9a06      	ldr	r2, [sp, #24]
 8004b40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004b44:	4293      	cmp	r3, r2
 8004b46:	db20      	blt.n	8004b8a <_strtod_l+0x452>
 8004b48:	4c64      	ldr	r4, [pc, #400]	; (8004cdc <_strtod_l+0x5a4>)
 8004b4a:	f1c5 050f 	rsb	r5, r5, #15
 8004b4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004b52:	4652      	mov	r2, sl
 8004b54:	465b      	mov	r3, fp
 8004b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b5a:	f7fb fd4d 	bl	80005f8 <__aeabi_dmul>
 8004b5e:	9b06      	ldr	r3, [sp, #24]
 8004b60:	1b5d      	subs	r5, r3, r5
 8004b62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004b66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004b6a:	e7e3      	b.n	8004b34 <_strtod_l+0x3fc>
 8004b6c:	9b06      	ldr	r3, [sp, #24]
 8004b6e:	3316      	adds	r3, #22
 8004b70:	db0b      	blt.n	8004b8a <_strtod_l+0x452>
 8004b72:	9b05      	ldr	r3, [sp, #20]
 8004b74:	1b9e      	subs	r6, r3, r6
 8004b76:	4b59      	ldr	r3, [pc, #356]	; (8004cdc <_strtod_l+0x5a4>)
 8004b78:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004b7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b80:	4650      	mov	r0, sl
 8004b82:	4659      	mov	r1, fp
 8004b84:	f7fb fe62 	bl	800084c <__aeabi_ddiv>
 8004b88:	e7d6      	b.n	8004b38 <_strtod_l+0x400>
 8004b8a:	9b06      	ldr	r3, [sp, #24]
 8004b8c:	eba5 0808 	sub.w	r8, r5, r8
 8004b90:	4498      	add	r8, r3
 8004b92:	f1b8 0f00 	cmp.w	r8, #0
 8004b96:	dd74      	ble.n	8004c82 <_strtod_l+0x54a>
 8004b98:	f018 030f 	ands.w	r3, r8, #15
 8004b9c:	d00a      	beq.n	8004bb4 <_strtod_l+0x47c>
 8004b9e:	494f      	ldr	r1, [pc, #316]	; (8004cdc <_strtod_l+0x5a4>)
 8004ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004ba4:	4652      	mov	r2, sl
 8004ba6:	465b      	mov	r3, fp
 8004ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bac:	f7fb fd24 	bl	80005f8 <__aeabi_dmul>
 8004bb0:	4682      	mov	sl, r0
 8004bb2:	468b      	mov	fp, r1
 8004bb4:	f038 080f 	bics.w	r8, r8, #15
 8004bb8:	d04f      	beq.n	8004c5a <_strtod_l+0x522>
 8004bba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004bbe:	dd22      	ble.n	8004c06 <_strtod_l+0x4ce>
 8004bc0:	2500      	movs	r5, #0
 8004bc2:	462e      	mov	r6, r5
 8004bc4:	9507      	str	r5, [sp, #28]
 8004bc6:	9505      	str	r5, [sp, #20]
 8004bc8:	2322      	movs	r3, #34	; 0x22
 8004bca:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004ce4 <_strtod_l+0x5ac>
 8004bce:	6023      	str	r3, [r4, #0]
 8004bd0:	f04f 0a00 	mov.w	sl, #0
 8004bd4:	9b07      	ldr	r3, [sp, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f43f adf2 	beq.w	80047c0 <_strtod_l+0x88>
 8004bdc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004bde:	4620      	mov	r0, r4
 8004be0:	f001 fefe 	bl	80069e0 <_Bfree>
 8004be4:	9905      	ldr	r1, [sp, #20]
 8004be6:	4620      	mov	r0, r4
 8004be8:	f001 fefa 	bl	80069e0 <_Bfree>
 8004bec:	4631      	mov	r1, r6
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f001 fef6 	bl	80069e0 <_Bfree>
 8004bf4:	9907      	ldr	r1, [sp, #28]
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f001 fef2 	bl	80069e0 <_Bfree>
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f001 feee 	bl	80069e0 <_Bfree>
 8004c04:	e5dc      	b.n	80047c0 <_strtod_l+0x88>
 8004c06:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <_strtod_l+0x5a8>)
 8004c08:	9304      	str	r3, [sp, #16]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004c10:	4650      	mov	r0, sl
 8004c12:	4659      	mov	r1, fp
 8004c14:	4699      	mov	r9, r3
 8004c16:	f1b8 0f01 	cmp.w	r8, #1
 8004c1a:	dc21      	bgt.n	8004c60 <_strtod_l+0x528>
 8004c1c:	b10b      	cbz	r3, 8004c22 <_strtod_l+0x4ea>
 8004c1e:	4682      	mov	sl, r0
 8004c20:	468b      	mov	fp, r1
 8004c22:	4b2f      	ldr	r3, [pc, #188]	; (8004ce0 <_strtod_l+0x5a8>)
 8004c24:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004c28:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004c2c:	4652      	mov	r2, sl
 8004c2e:	465b      	mov	r3, fp
 8004c30:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004c34:	f7fb fce0 	bl	80005f8 <__aeabi_dmul>
 8004c38:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <_strtod_l+0x5ac>)
 8004c3a:	460a      	mov	r2, r1
 8004c3c:	400b      	ands	r3, r1
 8004c3e:	492a      	ldr	r1, [pc, #168]	; (8004ce8 <_strtod_l+0x5b0>)
 8004c40:	428b      	cmp	r3, r1
 8004c42:	4682      	mov	sl, r0
 8004c44:	d8bc      	bhi.n	8004bc0 <_strtod_l+0x488>
 8004c46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004c4a:	428b      	cmp	r3, r1
 8004c4c:	bf86      	itte	hi
 8004c4e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004cec <_strtod_l+0x5b4>
 8004c52:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8004c56:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9304      	str	r3, [sp, #16]
 8004c5e:	e084      	b.n	8004d6a <_strtod_l+0x632>
 8004c60:	f018 0f01 	tst.w	r8, #1
 8004c64:	d005      	beq.n	8004c72 <_strtod_l+0x53a>
 8004c66:	9b04      	ldr	r3, [sp, #16]
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f7fb fcc4 	bl	80005f8 <__aeabi_dmul>
 8004c70:	2301      	movs	r3, #1
 8004c72:	9a04      	ldr	r2, [sp, #16]
 8004c74:	3208      	adds	r2, #8
 8004c76:	f109 0901 	add.w	r9, r9, #1
 8004c7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004c7e:	9204      	str	r2, [sp, #16]
 8004c80:	e7c9      	b.n	8004c16 <_strtod_l+0x4de>
 8004c82:	d0ea      	beq.n	8004c5a <_strtod_l+0x522>
 8004c84:	f1c8 0800 	rsb	r8, r8, #0
 8004c88:	f018 020f 	ands.w	r2, r8, #15
 8004c8c:	d00a      	beq.n	8004ca4 <_strtod_l+0x56c>
 8004c8e:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <_strtod_l+0x5a4>)
 8004c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c94:	4650      	mov	r0, sl
 8004c96:	4659      	mov	r1, fp
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f7fb fdd6 	bl	800084c <__aeabi_ddiv>
 8004ca0:	4682      	mov	sl, r0
 8004ca2:	468b      	mov	fp, r1
 8004ca4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004ca8:	d0d7      	beq.n	8004c5a <_strtod_l+0x522>
 8004caa:	f1b8 0f1f 	cmp.w	r8, #31
 8004cae:	dd1f      	ble.n	8004cf0 <_strtod_l+0x5b8>
 8004cb0:	2500      	movs	r5, #0
 8004cb2:	462e      	mov	r6, r5
 8004cb4:	9507      	str	r5, [sp, #28]
 8004cb6:	9505      	str	r5, [sp, #20]
 8004cb8:	2322      	movs	r3, #34	; 0x22
 8004cba:	f04f 0a00 	mov.w	sl, #0
 8004cbe:	f04f 0b00 	mov.w	fp, #0
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	e786      	b.n	8004bd4 <_strtod_l+0x49c>
 8004cc6:	bf00      	nop
 8004cc8:	08007f05 	.word	0x08007f05
 8004ccc:	08007f40 	.word	0x08007f40
 8004cd0:	08007efd 	.word	0x08007efd
 8004cd4:	08007f83 	.word	0x08007f83
 8004cd8:	08008290 	.word	0x08008290
 8004cdc:	08008170 	.word	0x08008170
 8004ce0:	08008148 	.word	0x08008148
 8004ce4:	7ff00000 	.word	0x7ff00000
 8004ce8:	7ca00000 	.word	0x7ca00000
 8004cec:	7fefffff 	.word	0x7fefffff
 8004cf0:	f018 0310 	ands.w	r3, r8, #16
 8004cf4:	bf18      	it	ne
 8004cf6:	236a      	movne	r3, #106	; 0x6a
 8004cf8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80050a8 <_strtod_l+0x970>
 8004cfc:	9304      	str	r3, [sp, #16]
 8004cfe:	4650      	mov	r0, sl
 8004d00:	4659      	mov	r1, fp
 8004d02:	2300      	movs	r3, #0
 8004d04:	f018 0f01 	tst.w	r8, #1
 8004d08:	d004      	beq.n	8004d14 <_strtod_l+0x5dc>
 8004d0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004d0e:	f7fb fc73 	bl	80005f8 <__aeabi_dmul>
 8004d12:	2301      	movs	r3, #1
 8004d14:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004d18:	f109 0908 	add.w	r9, r9, #8
 8004d1c:	d1f2      	bne.n	8004d04 <_strtod_l+0x5cc>
 8004d1e:	b10b      	cbz	r3, 8004d24 <_strtod_l+0x5ec>
 8004d20:	4682      	mov	sl, r0
 8004d22:	468b      	mov	fp, r1
 8004d24:	9b04      	ldr	r3, [sp, #16]
 8004d26:	b1c3      	cbz	r3, 8004d5a <_strtod_l+0x622>
 8004d28:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004d2c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	4659      	mov	r1, fp
 8004d34:	dd11      	ble.n	8004d5a <_strtod_l+0x622>
 8004d36:	2b1f      	cmp	r3, #31
 8004d38:	f340 8124 	ble.w	8004f84 <_strtod_l+0x84c>
 8004d3c:	2b34      	cmp	r3, #52	; 0x34
 8004d3e:	bfde      	ittt	le
 8004d40:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004d44:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8004d48:	fa03 f202 	lslle.w	r2, r3, r2
 8004d4c:	f04f 0a00 	mov.w	sl, #0
 8004d50:	bfcc      	ite	gt
 8004d52:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004d56:	ea02 0b01 	andle.w	fp, r2, r1
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	4650      	mov	r0, sl
 8004d60:	4659      	mov	r1, fp
 8004d62:	f7fb feb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d66:	2800      	cmp	r0, #0
 8004d68:	d1a2      	bne.n	8004cb0 <_strtod_l+0x578>
 8004d6a:	9b07      	ldr	r3, [sp, #28]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	9908      	ldr	r1, [sp, #32]
 8004d70:	462b      	mov	r3, r5
 8004d72:	463a      	mov	r2, r7
 8004d74:	4620      	mov	r0, r4
 8004d76:	f001 fe9b 	bl	8006ab0 <__s2b>
 8004d7a:	9007      	str	r0, [sp, #28]
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	f43f af1f 	beq.w	8004bc0 <_strtod_l+0x488>
 8004d82:	9b05      	ldr	r3, [sp, #20]
 8004d84:	1b9e      	subs	r6, r3, r6
 8004d86:	9b06      	ldr	r3, [sp, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bfb4      	ite	lt
 8004d8c:	4633      	movlt	r3, r6
 8004d8e:	2300      	movge	r3, #0
 8004d90:	930c      	str	r3, [sp, #48]	; 0x30
 8004d92:	9b06      	ldr	r3, [sp, #24]
 8004d94:	2500      	movs	r5, #0
 8004d96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d9a:	9312      	str	r3, [sp, #72]	; 0x48
 8004d9c:	462e      	mov	r6, r5
 8004d9e:	9b07      	ldr	r3, [sp, #28]
 8004da0:	4620      	mov	r0, r4
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	f001 fddc 	bl	8006960 <_Balloc>
 8004da8:	9005      	str	r0, [sp, #20]
 8004daa:	2800      	cmp	r0, #0
 8004dac:	f43f af0c 	beq.w	8004bc8 <_strtod_l+0x490>
 8004db0:	9b07      	ldr	r3, [sp, #28]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	3202      	adds	r2, #2
 8004db6:	f103 010c 	add.w	r1, r3, #12
 8004dba:	0092      	lsls	r2, r2, #2
 8004dbc:	300c      	adds	r0, #12
 8004dbe:	f7ff f805 	bl	8003dcc <memcpy>
 8004dc2:	ec4b ab10 	vmov	d0, sl, fp
 8004dc6:	aa1a      	add	r2, sp, #104	; 0x68
 8004dc8:	a919      	add	r1, sp, #100	; 0x64
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f002 f9b6 	bl	800713c <__d2b>
 8004dd0:	ec4b ab18 	vmov	d8, sl, fp
 8004dd4:	9018      	str	r0, [sp, #96]	; 0x60
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	f43f aef6 	beq.w	8004bc8 <_strtod_l+0x490>
 8004ddc:	2101      	movs	r1, #1
 8004dde:	4620      	mov	r0, r4
 8004de0:	f001 ff00 	bl	8006be4 <__i2b>
 8004de4:	4606      	mov	r6, r0
 8004de6:	2800      	cmp	r0, #0
 8004de8:	f43f aeee 	beq.w	8004bc8 <_strtod_l+0x490>
 8004dec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dee:	9904      	ldr	r1, [sp, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bfab      	itete	ge
 8004df4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8004df6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004df8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004dfa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004dfe:	bfac      	ite	ge
 8004e00:	eb03 0902 	addge.w	r9, r3, r2
 8004e04:	1ad7      	sublt	r7, r2, r3
 8004e06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004e08:	eba3 0801 	sub.w	r8, r3, r1
 8004e0c:	4490      	add	r8, r2
 8004e0e:	4ba1      	ldr	r3, [pc, #644]	; (8005094 <_strtod_l+0x95c>)
 8004e10:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004e14:	4598      	cmp	r8, r3
 8004e16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004e1a:	f280 80c7 	bge.w	8004fac <_strtod_l+0x874>
 8004e1e:	eba3 0308 	sub.w	r3, r3, r8
 8004e22:	2b1f      	cmp	r3, #31
 8004e24:	eba2 0203 	sub.w	r2, r2, r3
 8004e28:	f04f 0101 	mov.w	r1, #1
 8004e2c:	f300 80b1 	bgt.w	8004f92 <_strtod_l+0x85a>
 8004e30:	fa01 f303 	lsl.w	r3, r1, r3
 8004e34:	930d      	str	r3, [sp, #52]	; 0x34
 8004e36:	2300      	movs	r3, #0
 8004e38:	9308      	str	r3, [sp, #32]
 8004e3a:	eb09 0802 	add.w	r8, r9, r2
 8004e3e:	9b04      	ldr	r3, [sp, #16]
 8004e40:	45c1      	cmp	r9, r8
 8004e42:	4417      	add	r7, r2
 8004e44:	441f      	add	r7, r3
 8004e46:	464b      	mov	r3, r9
 8004e48:	bfa8      	it	ge
 8004e4a:	4643      	movge	r3, r8
 8004e4c:	42bb      	cmp	r3, r7
 8004e4e:	bfa8      	it	ge
 8004e50:	463b      	movge	r3, r7
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfc2      	ittt	gt
 8004e56:	eba8 0803 	subgt.w	r8, r8, r3
 8004e5a:	1aff      	subgt	r7, r7, r3
 8004e5c:	eba9 0903 	subgt.w	r9, r9, r3
 8004e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	dd17      	ble.n	8004e96 <_strtod_l+0x75e>
 8004e66:	4631      	mov	r1, r6
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f001 ff7a 	bl	8006d64 <__pow5mult>
 8004e70:	4606      	mov	r6, r0
 8004e72:	2800      	cmp	r0, #0
 8004e74:	f43f aea8 	beq.w	8004bc8 <_strtod_l+0x490>
 8004e78:	4601      	mov	r1, r0
 8004e7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f001 fec7 	bl	8006c10 <__multiply>
 8004e82:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e84:	2800      	cmp	r0, #0
 8004e86:	f43f ae9f 	beq.w	8004bc8 <_strtod_l+0x490>
 8004e8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f001 fda7 	bl	80069e0 <_Bfree>
 8004e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e94:	9318      	str	r3, [sp, #96]	; 0x60
 8004e96:	f1b8 0f00 	cmp.w	r8, #0
 8004e9a:	f300 808c 	bgt.w	8004fb6 <_strtod_l+0x87e>
 8004e9e:	9b06      	ldr	r3, [sp, #24]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	dd08      	ble.n	8004eb6 <_strtod_l+0x77e>
 8004ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ea6:	9905      	ldr	r1, [sp, #20]
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f001 ff5b 	bl	8006d64 <__pow5mult>
 8004eae:	9005      	str	r0, [sp, #20]
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	f43f ae89 	beq.w	8004bc8 <_strtod_l+0x490>
 8004eb6:	2f00      	cmp	r7, #0
 8004eb8:	dd08      	ble.n	8004ecc <_strtod_l+0x794>
 8004eba:	9905      	ldr	r1, [sp, #20]
 8004ebc:	463a      	mov	r2, r7
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f001 ffaa 	bl	8006e18 <__lshift>
 8004ec4:	9005      	str	r0, [sp, #20]
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	f43f ae7e 	beq.w	8004bc8 <_strtod_l+0x490>
 8004ecc:	f1b9 0f00 	cmp.w	r9, #0
 8004ed0:	dd08      	ble.n	8004ee4 <_strtod_l+0x7ac>
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	464a      	mov	r2, r9
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f001 ff9e 	bl	8006e18 <__lshift>
 8004edc:	4606      	mov	r6, r0
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	f43f ae72 	beq.w	8004bc8 <_strtod_l+0x490>
 8004ee4:	9a05      	ldr	r2, [sp, #20]
 8004ee6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f002 f821 	bl	8006f30 <__mdiff>
 8004eee:	4605      	mov	r5, r0
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	f43f ae69 	beq.w	8004bc8 <_strtod_l+0x490>
 8004ef6:	68c3      	ldr	r3, [r0, #12]
 8004ef8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004efa:	2300      	movs	r3, #0
 8004efc:	60c3      	str	r3, [r0, #12]
 8004efe:	4631      	mov	r1, r6
 8004f00:	f001 fffa 	bl	8006ef8 <__mcmp>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	da60      	bge.n	8004fca <_strtod_l+0x892>
 8004f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f0a:	ea53 030a 	orrs.w	r3, r3, sl
 8004f0e:	f040 8082 	bne.w	8005016 <_strtod_l+0x8de>
 8004f12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d17d      	bne.n	8005016 <_strtod_l+0x8de>
 8004f1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004f1e:	0d1b      	lsrs	r3, r3, #20
 8004f20:	051b      	lsls	r3, r3, #20
 8004f22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004f26:	d976      	bls.n	8005016 <_strtod_l+0x8de>
 8004f28:	696b      	ldr	r3, [r5, #20]
 8004f2a:	b913      	cbnz	r3, 8004f32 <_strtod_l+0x7fa>
 8004f2c:	692b      	ldr	r3, [r5, #16]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	dd71      	ble.n	8005016 <_strtod_l+0x8de>
 8004f32:	4629      	mov	r1, r5
 8004f34:	2201      	movs	r2, #1
 8004f36:	4620      	mov	r0, r4
 8004f38:	f001 ff6e 	bl	8006e18 <__lshift>
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4605      	mov	r5, r0
 8004f40:	f001 ffda 	bl	8006ef8 <__mcmp>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	dd66      	ble.n	8005016 <_strtod_l+0x8de>
 8004f48:	9904      	ldr	r1, [sp, #16]
 8004f4a:	4a53      	ldr	r2, [pc, #332]	; (8005098 <_strtod_l+0x960>)
 8004f4c:	465b      	mov	r3, fp
 8004f4e:	2900      	cmp	r1, #0
 8004f50:	f000 8081 	beq.w	8005056 <_strtod_l+0x91e>
 8004f54:	ea02 010b 	and.w	r1, r2, fp
 8004f58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004f5c:	dc7b      	bgt.n	8005056 <_strtod_l+0x91e>
 8004f5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004f62:	f77f aea9 	ble.w	8004cb8 <_strtod_l+0x580>
 8004f66:	4b4d      	ldr	r3, [pc, #308]	; (800509c <_strtod_l+0x964>)
 8004f68:	4650      	mov	r0, sl
 8004f6a:	4659      	mov	r1, fp
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f7fb fb43 	bl	80005f8 <__aeabi_dmul>
 8004f72:	460b      	mov	r3, r1
 8004f74:	4303      	orrs	r3, r0
 8004f76:	bf08      	it	eq
 8004f78:	2322      	moveq	r3, #34	; 0x22
 8004f7a:	4682      	mov	sl, r0
 8004f7c:	468b      	mov	fp, r1
 8004f7e:	bf08      	it	eq
 8004f80:	6023      	streq	r3, [r4, #0]
 8004f82:	e62b      	b.n	8004bdc <_strtod_l+0x4a4>
 8004f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	ea03 0a0a 	and.w	sl, r3, sl
 8004f90:	e6e3      	b.n	8004d5a <_strtod_l+0x622>
 8004f92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004f96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004f9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004f9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004fa2:	fa01 f308 	lsl.w	r3, r1, r8
 8004fa6:	9308      	str	r3, [sp, #32]
 8004fa8:	910d      	str	r1, [sp, #52]	; 0x34
 8004faa:	e746      	b.n	8004e3a <_strtod_l+0x702>
 8004fac:	2300      	movs	r3, #0
 8004fae:	9308      	str	r3, [sp, #32]
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	930d      	str	r3, [sp, #52]	; 0x34
 8004fb4:	e741      	b.n	8004e3a <_strtod_l+0x702>
 8004fb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004fb8:	4642      	mov	r2, r8
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f001 ff2c 	bl	8006e18 <__lshift>
 8004fc0:	9018      	str	r0, [sp, #96]	; 0x60
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	f47f af6b 	bne.w	8004e9e <_strtod_l+0x766>
 8004fc8:	e5fe      	b.n	8004bc8 <_strtod_l+0x490>
 8004fca:	465f      	mov	r7, fp
 8004fcc:	d16e      	bne.n	80050ac <_strtod_l+0x974>
 8004fce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004fd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004fd4:	b342      	cbz	r2, 8005028 <_strtod_l+0x8f0>
 8004fd6:	4a32      	ldr	r2, [pc, #200]	; (80050a0 <_strtod_l+0x968>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d128      	bne.n	800502e <_strtod_l+0x8f6>
 8004fdc:	9b04      	ldr	r3, [sp, #16]
 8004fde:	4651      	mov	r1, sl
 8004fe0:	b1eb      	cbz	r3, 800501e <_strtod_l+0x8e6>
 8004fe2:	4b2d      	ldr	r3, [pc, #180]	; (8005098 <_strtod_l+0x960>)
 8004fe4:	403b      	ands	r3, r7
 8004fe6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fee:	d819      	bhi.n	8005024 <_strtod_l+0x8ec>
 8004ff0:	0d1b      	lsrs	r3, r3, #20
 8004ff2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	4299      	cmp	r1, r3
 8004ffc:	d117      	bne.n	800502e <_strtod_l+0x8f6>
 8004ffe:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <_strtod_l+0x96c>)
 8005000:	429f      	cmp	r7, r3
 8005002:	d102      	bne.n	800500a <_strtod_l+0x8d2>
 8005004:	3101      	adds	r1, #1
 8005006:	f43f addf 	beq.w	8004bc8 <_strtod_l+0x490>
 800500a:	4b23      	ldr	r3, [pc, #140]	; (8005098 <_strtod_l+0x960>)
 800500c:	403b      	ands	r3, r7
 800500e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005012:	f04f 0a00 	mov.w	sl, #0
 8005016:	9b04      	ldr	r3, [sp, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1a4      	bne.n	8004f66 <_strtod_l+0x82e>
 800501c:	e5de      	b.n	8004bdc <_strtod_l+0x4a4>
 800501e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005022:	e7ea      	b.n	8004ffa <_strtod_l+0x8c2>
 8005024:	4613      	mov	r3, r2
 8005026:	e7e8      	b.n	8004ffa <_strtod_l+0x8c2>
 8005028:	ea53 030a 	orrs.w	r3, r3, sl
 800502c:	d08c      	beq.n	8004f48 <_strtod_l+0x810>
 800502e:	9b08      	ldr	r3, [sp, #32]
 8005030:	b1db      	cbz	r3, 800506a <_strtod_l+0x932>
 8005032:	423b      	tst	r3, r7
 8005034:	d0ef      	beq.n	8005016 <_strtod_l+0x8de>
 8005036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005038:	9a04      	ldr	r2, [sp, #16]
 800503a:	4650      	mov	r0, sl
 800503c:	4659      	mov	r1, fp
 800503e:	b1c3      	cbz	r3, 8005072 <_strtod_l+0x93a>
 8005040:	f7ff fb5c 	bl	80046fc <sulp>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	ec51 0b18 	vmov	r0, r1, d8
 800504c:	f7fb f91e 	bl	800028c <__adddf3>
 8005050:	4682      	mov	sl, r0
 8005052:	468b      	mov	fp, r1
 8005054:	e7df      	b.n	8005016 <_strtod_l+0x8de>
 8005056:	4013      	ands	r3, r2
 8005058:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800505c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005060:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005064:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005068:	e7d5      	b.n	8005016 <_strtod_l+0x8de>
 800506a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800506c:	ea13 0f0a 	tst.w	r3, sl
 8005070:	e7e0      	b.n	8005034 <_strtod_l+0x8fc>
 8005072:	f7ff fb43 	bl	80046fc <sulp>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	ec51 0b18 	vmov	r0, r1, d8
 800507e:	f7fb f903 	bl	8000288 <__aeabi_dsub>
 8005082:	2200      	movs	r2, #0
 8005084:	2300      	movs	r3, #0
 8005086:	4682      	mov	sl, r0
 8005088:	468b      	mov	fp, r1
 800508a:	f7fb fd1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800508e:	2800      	cmp	r0, #0
 8005090:	d0c1      	beq.n	8005016 <_strtod_l+0x8de>
 8005092:	e611      	b.n	8004cb8 <_strtod_l+0x580>
 8005094:	fffffc02 	.word	0xfffffc02
 8005098:	7ff00000 	.word	0x7ff00000
 800509c:	39500000 	.word	0x39500000
 80050a0:	000fffff 	.word	0x000fffff
 80050a4:	7fefffff 	.word	0x7fefffff
 80050a8:	08007f58 	.word	0x08007f58
 80050ac:	4631      	mov	r1, r6
 80050ae:	4628      	mov	r0, r5
 80050b0:	f002 f8a0 	bl	80071f4 <__ratio>
 80050b4:	ec59 8b10 	vmov	r8, r9, d0
 80050b8:	ee10 0a10 	vmov	r0, s0
 80050bc:	2200      	movs	r2, #0
 80050be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050c2:	4649      	mov	r1, r9
 80050c4:	f7fb fd14 	bl	8000af0 <__aeabi_dcmple>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d07a      	beq.n	80051c2 <_strtod_l+0xa8a>
 80050cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d04a      	beq.n	8005168 <_strtod_l+0xa30>
 80050d2:	4b95      	ldr	r3, [pc, #596]	; (8005328 <_strtod_l+0xbf0>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80050da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005328 <_strtod_l+0xbf0>
 80050de:	f04f 0800 	mov.w	r8, #0
 80050e2:	4b92      	ldr	r3, [pc, #584]	; (800532c <_strtod_l+0xbf4>)
 80050e4:	403b      	ands	r3, r7
 80050e6:	930d      	str	r3, [sp, #52]	; 0x34
 80050e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80050ea:	4b91      	ldr	r3, [pc, #580]	; (8005330 <_strtod_l+0xbf8>)
 80050ec:	429a      	cmp	r2, r3
 80050ee:	f040 80b0 	bne.w	8005252 <_strtod_l+0xb1a>
 80050f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80050f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80050fa:	ec4b ab10 	vmov	d0, sl, fp
 80050fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005102:	f001 ff9f 	bl	8007044 <__ulp>
 8005106:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800510a:	ec53 2b10 	vmov	r2, r3, d0
 800510e:	f7fb fa73 	bl	80005f8 <__aeabi_dmul>
 8005112:	4652      	mov	r2, sl
 8005114:	465b      	mov	r3, fp
 8005116:	f7fb f8b9 	bl	800028c <__adddf3>
 800511a:	460b      	mov	r3, r1
 800511c:	4983      	ldr	r1, [pc, #524]	; (800532c <_strtod_l+0xbf4>)
 800511e:	4a85      	ldr	r2, [pc, #532]	; (8005334 <_strtod_l+0xbfc>)
 8005120:	4019      	ands	r1, r3
 8005122:	4291      	cmp	r1, r2
 8005124:	4682      	mov	sl, r0
 8005126:	d960      	bls.n	80051ea <_strtod_l+0xab2>
 8005128:	ee18 3a90 	vmov	r3, s17
 800512c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005130:	4293      	cmp	r3, r2
 8005132:	d104      	bne.n	800513e <_strtod_l+0xa06>
 8005134:	ee18 3a10 	vmov	r3, s16
 8005138:	3301      	adds	r3, #1
 800513a:	f43f ad45 	beq.w	8004bc8 <_strtod_l+0x490>
 800513e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005340 <_strtod_l+0xc08>
 8005142:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005146:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005148:	4620      	mov	r0, r4
 800514a:	f001 fc49 	bl	80069e0 <_Bfree>
 800514e:	9905      	ldr	r1, [sp, #20]
 8005150:	4620      	mov	r0, r4
 8005152:	f001 fc45 	bl	80069e0 <_Bfree>
 8005156:	4631      	mov	r1, r6
 8005158:	4620      	mov	r0, r4
 800515a:	f001 fc41 	bl	80069e0 <_Bfree>
 800515e:	4629      	mov	r1, r5
 8005160:	4620      	mov	r0, r4
 8005162:	f001 fc3d 	bl	80069e0 <_Bfree>
 8005166:	e61a      	b.n	8004d9e <_strtod_l+0x666>
 8005168:	f1ba 0f00 	cmp.w	sl, #0
 800516c:	d11b      	bne.n	80051a6 <_strtod_l+0xa6e>
 800516e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005172:	b9f3      	cbnz	r3, 80051b2 <_strtod_l+0xa7a>
 8005174:	4b6c      	ldr	r3, [pc, #432]	; (8005328 <_strtod_l+0xbf0>)
 8005176:	2200      	movs	r2, #0
 8005178:	4640      	mov	r0, r8
 800517a:	4649      	mov	r1, r9
 800517c:	f7fb fcae 	bl	8000adc <__aeabi_dcmplt>
 8005180:	b9d0      	cbnz	r0, 80051b8 <_strtod_l+0xa80>
 8005182:	4640      	mov	r0, r8
 8005184:	4649      	mov	r1, r9
 8005186:	4b6c      	ldr	r3, [pc, #432]	; (8005338 <_strtod_l+0xc00>)
 8005188:	2200      	movs	r2, #0
 800518a:	f7fb fa35 	bl	80005f8 <__aeabi_dmul>
 800518e:	4680      	mov	r8, r0
 8005190:	4689      	mov	r9, r1
 8005192:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005196:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800519a:	9315      	str	r3, [sp, #84]	; 0x54
 800519c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80051a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80051a4:	e79d      	b.n	80050e2 <_strtod_l+0x9aa>
 80051a6:	f1ba 0f01 	cmp.w	sl, #1
 80051aa:	d102      	bne.n	80051b2 <_strtod_l+0xa7a>
 80051ac:	2f00      	cmp	r7, #0
 80051ae:	f43f ad83 	beq.w	8004cb8 <_strtod_l+0x580>
 80051b2:	4b62      	ldr	r3, [pc, #392]	; (800533c <_strtod_l+0xc04>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	e78e      	b.n	80050d6 <_strtod_l+0x99e>
 80051b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005338 <_strtod_l+0xc00>
 80051bc:	f04f 0800 	mov.w	r8, #0
 80051c0:	e7e7      	b.n	8005192 <_strtod_l+0xa5a>
 80051c2:	4b5d      	ldr	r3, [pc, #372]	; (8005338 <_strtod_l+0xc00>)
 80051c4:	4640      	mov	r0, r8
 80051c6:	4649      	mov	r1, r9
 80051c8:	2200      	movs	r2, #0
 80051ca:	f7fb fa15 	bl	80005f8 <__aeabi_dmul>
 80051ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051d0:	4680      	mov	r8, r0
 80051d2:	4689      	mov	r9, r1
 80051d4:	b933      	cbnz	r3, 80051e4 <_strtod_l+0xaac>
 80051d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051da:	900e      	str	r0, [sp, #56]	; 0x38
 80051dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80051de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80051e2:	e7dd      	b.n	80051a0 <_strtod_l+0xa68>
 80051e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80051e8:	e7f9      	b.n	80051de <_strtod_l+0xaa6>
 80051ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80051ee:	9b04      	ldr	r3, [sp, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1a8      	bne.n	8005146 <_strtod_l+0xa0e>
 80051f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80051f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051fa:	0d1b      	lsrs	r3, r3, #20
 80051fc:	051b      	lsls	r3, r3, #20
 80051fe:	429a      	cmp	r2, r3
 8005200:	d1a1      	bne.n	8005146 <_strtod_l+0xa0e>
 8005202:	4640      	mov	r0, r8
 8005204:	4649      	mov	r1, r9
 8005206:	f7fb fd3f 	bl	8000c88 <__aeabi_d2lz>
 800520a:	f7fb f9c7 	bl	800059c <__aeabi_l2d>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f7fb f837 	bl	8000288 <__aeabi_dsub>
 800521a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800521c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005220:	ea43 030a 	orr.w	r3, r3, sl
 8005224:	4313      	orrs	r3, r2
 8005226:	4680      	mov	r8, r0
 8005228:	4689      	mov	r9, r1
 800522a:	d055      	beq.n	80052d8 <_strtod_l+0xba0>
 800522c:	a336      	add	r3, pc, #216	; (adr r3, 8005308 <_strtod_l+0xbd0>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7fb fc53 	bl	8000adc <__aeabi_dcmplt>
 8005236:	2800      	cmp	r0, #0
 8005238:	f47f acd0 	bne.w	8004bdc <_strtod_l+0x4a4>
 800523c:	a334      	add	r3, pc, #208	; (adr r3, 8005310 <_strtod_l+0xbd8>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	4640      	mov	r0, r8
 8005244:	4649      	mov	r1, r9
 8005246:	f7fb fc67 	bl	8000b18 <__aeabi_dcmpgt>
 800524a:	2800      	cmp	r0, #0
 800524c:	f43f af7b 	beq.w	8005146 <_strtod_l+0xa0e>
 8005250:	e4c4      	b.n	8004bdc <_strtod_l+0x4a4>
 8005252:	9b04      	ldr	r3, [sp, #16]
 8005254:	b333      	cbz	r3, 80052a4 <_strtod_l+0xb6c>
 8005256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005258:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800525c:	d822      	bhi.n	80052a4 <_strtod_l+0xb6c>
 800525e:	a32e      	add	r3, pc, #184	; (adr r3, 8005318 <_strtod_l+0xbe0>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	4640      	mov	r0, r8
 8005266:	4649      	mov	r1, r9
 8005268:	f7fb fc42 	bl	8000af0 <__aeabi_dcmple>
 800526c:	b1a0      	cbz	r0, 8005298 <_strtod_l+0xb60>
 800526e:	4649      	mov	r1, r9
 8005270:	4640      	mov	r0, r8
 8005272:	f7fb fc99 	bl	8000ba8 <__aeabi_d2uiz>
 8005276:	2801      	cmp	r0, #1
 8005278:	bf38      	it	cc
 800527a:	2001      	movcc	r0, #1
 800527c:	f7fb f942 	bl	8000504 <__aeabi_ui2d>
 8005280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005282:	4680      	mov	r8, r0
 8005284:	4689      	mov	r9, r1
 8005286:	bb23      	cbnz	r3, 80052d2 <_strtod_l+0xb9a>
 8005288:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800528c:	9010      	str	r0, [sp, #64]	; 0x40
 800528e:	9311      	str	r3, [sp, #68]	; 0x44
 8005290:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005294:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800529c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80052a0:	1a9b      	subs	r3, r3, r2
 80052a2:	9309      	str	r3, [sp, #36]	; 0x24
 80052a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80052a8:	eeb0 0a48 	vmov.f32	s0, s16
 80052ac:	eef0 0a68 	vmov.f32	s1, s17
 80052b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80052b4:	f001 fec6 	bl	8007044 <__ulp>
 80052b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80052bc:	ec53 2b10 	vmov	r2, r3, d0
 80052c0:	f7fb f99a 	bl	80005f8 <__aeabi_dmul>
 80052c4:	ec53 2b18 	vmov	r2, r3, d8
 80052c8:	f7fa ffe0 	bl	800028c <__adddf3>
 80052cc:	4682      	mov	sl, r0
 80052ce:	468b      	mov	fp, r1
 80052d0:	e78d      	b.n	80051ee <_strtod_l+0xab6>
 80052d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80052d6:	e7db      	b.n	8005290 <_strtod_l+0xb58>
 80052d8:	a311      	add	r3, pc, #68	; (adr r3, 8005320 <_strtod_l+0xbe8>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f7fb fbfd 	bl	8000adc <__aeabi_dcmplt>
 80052e2:	e7b2      	b.n	800524a <_strtod_l+0xb12>
 80052e4:	2300      	movs	r3, #0
 80052e6:	930a      	str	r3, [sp, #40]	; 0x28
 80052e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80052ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	f7ff ba6b 	b.w	80047c8 <_strtod_l+0x90>
 80052f2:	2a65      	cmp	r2, #101	; 0x65
 80052f4:	f43f ab5f 	beq.w	80049b6 <_strtod_l+0x27e>
 80052f8:	2a45      	cmp	r2, #69	; 0x45
 80052fa:	f43f ab5c 	beq.w	80049b6 <_strtod_l+0x27e>
 80052fe:	2301      	movs	r3, #1
 8005300:	f7ff bb94 	b.w	8004a2c <_strtod_l+0x2f4>
 8005304:	f3af 8000 	nop.w
 8005308:	94a03595 	.word	0x94a03595
 800530c:	3fdfffff 	.word	0x3fdfffff
 8005310:	35afe535 	.word	0x35afe535
 8005314:	3fe00000 	.word	0x3fe00000
 8005318:	ffc00000 	.word	0xffc00000
 800531c:	41dfffff 	.word	0x41dfffff
 8005320:	94a03595 	.word	0x94a03595
 8005324:	3fcfffff 	.word	0x3fcfffff
 8005328:	3ff00000 	.word	0x3ff00000
 800532c:	7ff00000 	.word	0x7ff00000
 8005330:	7fe00000 	.word	0x7fe00000
 8005334:	7c9fffff 	.word	0x7c9fffff
 8005338:	3fe00000 	.word	0x3fe00000
 800533c:	bff00000 	.word	0xbff00000
 8005340:	7fefffff 	.word	0x7fefffff

08005344 <strtod>:
 8005344:	460a      	mov	r2, r1
 8005346:	4601      	mov	r1, r0
 8005348:	4802      	ldr	r0, [pc, #8]	; (8005354 <strtod+0x10>)
 800534a:	4b03      	ldr	r3, [pc, #12]	; (8005358 <strtod+0x14>)
 800534c:	6800      	ldr	r0, [r0, #0]
 800534e:	f7ff b9f3 	b.w	8004738 <_strtod_l>
 8005352:	bf00      	nop
 8005354:	2000000c 	.word	0x2000000c
 8005358:	20000074 	.word	0x20000074

0800535c <quorem>:
 800535c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005360:	6903      	ldr	r3, [r0, #16]
 8005362:	690c      	ldr	r4, [r1, #16]
 8005364:	42a3      	cmp	r3, r4
 8005366:	4607      	mov	r7, r0
 8005368:	f2c0 8081 	blt.w	800546e <quorem+0x112>
 800536c:	3c01      	subs	r4, #1
 800536e:	f101 0814 	add.w	r8, r1, #20
 8005372:	f100 0514 	add.w	r5, r0, #20
 8005376:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005380:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005384:	3301      	adds	r3, #1
 8005386:	429a      	cmp	r2, r3
 8005388:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800538c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005390:	fbb2 f6f3 	udiv	r6, r2, r3
 8005394:	d331      	bcc.n	80053fa <quorem+0x9e>
 8005396:	f04f 0e00 	mov.w	lr, #0
 800539a:	4640      	mov	r0, r8
 800539c:	46ac      	mov	ip, r5
 800539e:	46f2      	mov	sl, lr
 80053a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80053a4:	b293      	uxth	r3, r2
 80053a6:	fb06 e303 	mla	r3, r6, r3, lr
 80053aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	ebaa 0303 	sub.w	r3, sl, r3
 80053b4:	f8dc a000 	ldr.w	sl, [ip]
 80053b8:	0c12      	lsrs	r2, r2, #16
 80053ba:	fa13 f38a 	uxtah	r3, r3, sl
 80053be:	fb06 e202 	mla	r2, r6, r2, lr
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	9b00      	ldr	r3, [sp, #0]
 80053c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80053ca:	b292      	uxth	r2, r2
 80053cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80053d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80053d8:	4581      	cmp	r9, r0
 80053da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053de:	f84c 3b04 	str.w	r3, [ip], #4
 80053e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80053e6:	d2db      	bcs.n	80053a0 <quorem+0x44>
 80053e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80053ec:	b92b      	cbnz	r3, 80053fa <quorem+0x9e>
 80053ee:	9b01      	ldr	r3, [sp, #4]
 80053f0:	3b04      	subs	r3, #4
 80053f2:	429d      	cmp	r5, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	d32e      	bcc.n	8005456 <quorem+0xfa>
 80053f8:	613c      	str	r4, [r7, #16]
 80053fa:	4638      	mov	r0, r7
 80053fc:	f001 fd7c 	bl	8006ef8 <__mcmp>
 8005400:	2800      	cmp	r0, #0
 8005402:	db24      	blt.n	800544e <quorem+0xf2>
 8005404:	3601      	adds	r6, #1
 8005406:	4628      	mov	r0, r5
 8005408:	f04f 0c00 	mov.w	ip, #0
 800540c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005410:	f8d0 e000 	ldr.w	lr, [r0]
 8005414:	b293      	uxth	r3, r2
 8005416:	ebac 0303 	sub.w	r3, ip, r3
 800541a:	0c12      	lsrs	r2, r2, #16
 800541c:	fa13 f38e 	uxtah	r3, r3, lr
 8005420:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005428:	b29b      	uxth	r3, r3
 800542a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800542e:	45c1      	cmp	r9, r8
 8005430:	f840 3b04 	str.w	r3, [r0], #4
 8005434:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005438:	d2e8      	bcs.n	800540c <quorem+0xb0>
 800543a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800543e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005442:	b922      	cbnz	r2, 800544e <quorem+0xf2>
 8005444:	3b04      	subs	r3, #4
 8005446:	429d      	cmp	r5, r3
 8005448:	461a      	mov	r2, r3
 800544a:	d30a      	bcc.n	8005462 <quorem+0x106>
 800544c:	613c      	str	r4, [r7, #16]
 800544e:	4630      	mov	r0, r6
 8005450:	b003      	add	sp, #12
 8005452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005456:	6812      	ldr	r2, [r2, #0]
 8005458:	3b04      	subs	r3, #4
 800545a:	2a00      	cmp	r2, #0
 800545c:	d1cc      	bne.n	80053f8 <quorem+0x9c>
 800545e:	3c01      	subs	r4, #1
 8005460:	e7c7      	b.n	80053f2 <quorem+0x96>
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	3b04      	subs	r3, #4
 8005466:	2a00      	cmp	r2, #0
 8005468:	d1f0      	bne.n	800544c <quorem+0xf0>
 800546a:	3c01      	subs	r4, #1
 800546c:	e7eb      	b.n	8005446 <quorem+0xea>
 800546e:	2000      	movs	r0, #0
 8005470:	e7ee      	b.n	8005450 <quorem+0xf4>
 8005472:	0000      	movs	r0, r0
 8005474:	0000      	movs	r0, r0
	...

08005478 <_dtoa_r>:
 8005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	ed2d 8b04 	vpush	{d8-d9}
 8005480:	ec57 6b10 	vmov	r6, r7, d0
 8005484:	b093      	sub	sp, #76	; 0x4c
 8005486:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005488:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800548c:	9106      	str	r1, [sp, #24]
 800548e:	ee10 aa10 	vmov	sl, s0
 8005492:	4604      	mov	r4, r0
 8005494:	9209      	str	r2, [sp, #36]	; 0x24
 8005496:	930c      	str	r3, [sp, #48]	; 0x30
 8005498:	46bb      	mov	fp, r7
 800549a:	b975      	cbnz	r5, 80054ba <_dtoa_r+0x42>
 800549c:	2010      	movs	r0, #16
 800549e:	f001 fa45 	bl	800692c <malloc>
 80054a2:	4602      	mov	r2, r0
 80054a4:	6260      	str	r0, [r4, #36]	; 0x24
 80054a6:	b920      	cbnz	r0, 80054b2 <_dtoa_r+0x3a>
 80054a8:	4ba7      	ldr	r3, [pc, #668]	; (8005748 <_dtoa_r+0x2d0>)
 80054aa:	21ea      	movs	r1, #234	; 0xea
 80054ac:	48a7      	ldr	r0, [pc, #668]	; (800574c <_dtoa_r+0x2d4>)
 80054ae:	f002 fabb 	bl	8007a28 <__assert_func>
 80054b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054b6:	6005      	str	r5, [r0, #0]
 80054b8:	60c5      	str	r5, [r0, #12]
 80054ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054bc:	6819      	ldr	r1, [r3, #0]
 80054be:	b151      	cbz	r1, 80054d6 <_dtoa_r+0x5e>
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	604a      	str	r2, [r1, #4]
 80054c4:	2301      	movs	r3, #1
 80054c6:	4093      	lsls	r3, r2
 80054c8:	608b      	str	r3, [r1, #8]
 80054ca:	4620      	mov	r0, r4
 80054cc:	f001 fa88 	bl	80069e0 <_Bfree>
 80054d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	1e3b      	subs	r3, r7, #0
 80054d8:	bfaa      	itet	ge
 80054da:	2300      	movge	r3, #0
 80054dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80054e0:	f8c8 3000 	strge.w	r3, [r8]
 80054e4:	4b9a      	ldr	r3, [pc, #616]	; (8005750 <_dtoa_r+0x2d8>)
 80054e6:	bfbc      	itt	lt
 80054e8:	2201      	movlt	r2, #1
 80054ea:	f8c8 2000 	strlt.w	r2, [r8]
 80054ee:	ea33 030b 	bics.w	r3, r3, fp
 80054f2:	d11b      	bne.n	800552c <_dtoa_r+0xb4>
 80054f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005500:	4333      	orrs	r3, r6
 8005502:	f000 8592 	beq.w	800602a <_dtoa_r+0xbb2>
 8005506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005508:	b963      	cbnz	r3, 8005524 <_dtoa_r+0xac>
 800550a:	4b92      	ldr	r3, [pc, #584]	; (8005754 <_dtoa_r+0x2dc>)
 800550c:	e022      	b.n	8005554 <_dtoa_r+0xdc>
 800550e:	4b92      	ldr	r3, [pc, #584]	; (8005758 <_dtoa_r+0x2e0>)
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	3308      	adds	r3, #8
 8005514:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	9801      	ldr	r0, [sp, #4]
 800551a:	b013      	add	sp, #76	; 0x4c
 800551c:	ecbd 8b04 	vpop	{d8-d9}
 8005520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005524:	4b8b      	ldr	r3, [pc, #556]	; (8005754 <_dtoa_r+0x2dc>)
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	3303      	adds	r3, #3
 800552a:	e7f3      	b.n	8005514 <_dtoa_r+0x9c>
 800552c:	2200      	movs	r2, #0
 800552e:	2300      	movs	r3, #0
 8005530:	4650      	mov	r0, sl
 8005532:	4659      	mov	r1, fp
 8005534:	f7fb fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005538:	ec4b ab19 	vmov	d9, sl, fp
 800553c:	4680      	mov	r8, r0
 800553e:	b158      	cbz	r0, 8005558 <_dtoa_r+0xe0>
 8005540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005542:	2301      	movs	r3, #1
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 856b 	beq.w	8006024 <_dtoa_r+0xbac>
 800554e:	4883      	ldr	r0, [pc, #524]	; (800575c <_dtoa_r+0x2e4>)
 8005550:	6018      	str	r0, [r3, #0]
 8005552:	1e43      	subs	r3, r0, #1
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	e7df      	b.n	8005518 <_dtoa_r+0xa0>
 8005558:	ec4b ab10 	vmov	d0, sl, fp
 800555c:	aa10      	add	r2, sp, #64	; 0x40
 800555e:	a911      	add	r1, sp, #68	; 0x44
 8005560:	4620      	mov	r0, r4
 8005562:	f001 fdeb 	bl	800713c <__d2b>
 8005566:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800556a:	ee08 0a10 	vmov	s16, r0
 800556e:	2d00      	cmp	r5, #0
 8005570:	f000 8084 	beq.w	800567c <_dtoa_r+0x204>
 8005574:	ee19 3a90 	vmov	r3, s19
 8005578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800557c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005580:	4656      	mov	r6, sl
 8005582:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005586:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800558a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800558e:	4b74      	ldr	r3, [pc, #464]	; (8005760 <_dtoa_r+0x2e8>)
 8005590:	2200      	movs	r2, #0
 8005592:	4630      	mov	r0, r6
 8005594:	4639      	mov	r1, r7
 8005596:	f7fa fe77 	bl	8000288 <__aeabi_dsub>
 800559a:	a365      	add	r3, pc, #404	; (adr r3, 8005730 <_dtoa_r+0x2b8>)
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	f7fb f82a 	bl	80005f8 <__aeabi_dmul>
 80055a4:	a364      	add	r3, pc, #400	; (adr r3, 8005738 <_dtoa_r+0x2c0>)
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f7fa fe6f 	bl	800028c <__adddf3>
 80055ae:	4606      	mov	r6, r0
 80055b0:	4628      	mov	r0, r5
 80055b2:	460f      	mov	r7, r1
 80055b4:	f7fa ffb6 	bl	8000524 <__aeabi_i2d>
 80055b8:	a361      	add	r3, pc, #388	; (adr r3, 8005740 <_dtoa_r+0x2c8>)
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f7fb f81b 	bl	80005f8 <__aeabi_dmul>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4630      	mov	r0, r6
 80055c8:	4639      	mov	r1, r7
 80055ca:	f7fa fe5f 	bl	800028c <__adddf3>
 80055ce:	4606      	mov	r6, r0
 80055d0:	460f      	mov	r7, r1
 80055d2:	f7fb fac1 	bl	8000b58 <__aeabi_d2iz>
 80055d6:	2200      	movs	r2, #0
 80055d8:	9000      	str	r0, [sp, #0]
 80055da:	2300      	movs	r3, #0
 80055dc:	4630      	mov	r0, r6
 80055de:	4639      	mov	r1, r7
 80055e0:	f7fb fa7c 	bl	8000adc <__aeabi_dcmplt>
 80055e4:	b150      	cbz	r0, 80055fc <_dtoa_r+0x184>
 80055e6:	9800      	ldr	r0, [sp, #0]
 80055e8:	f7fa ff9c 	bl	8000524 <__aeabi_i2d>
 80055ec:	4632      	mov	r2, r6
 80055ee:	463b      	mov	r3, r7
 80055f0:	f7fb fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80055f4:	b910      	cbnz	r0, 80055fc <_dtoa_r+0x184>
 80055f6:	9b00      	ldr	r3, [sp, #0]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	9b00      	ldr	r3, [sp, #0]
 80055fe:	2b16      	cmp	r3, #22
 8005600:	d85a      	bhi.n	80056b8 <_dtoa_r+0x240>
 8005602:	9a00      	ldr	r2, [sp, #0]
 8005604:	4b57      	ldr	r3, [pc, #348]	; (8005764 <_dtoa_r+0x2ec>)
 8005606:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	ec51 0b19 	vmov	r0, r1, d9
 8005612:	f7fb fa63 	bl	8000adc <__aeabi_dcmplt>
 8005616:	2800      	cmp	r0, #0
 8005618:	d050      	beq.n	80056bc <_dtoa_r+0x244>
 800561a:	9b00      	ldr	r3, [sp, #0]
 800561c:	3b01      	subs	r3, #1
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	2300      	movs	r3, #0
 8005622:	930b      	str	r3, [sp, #44]	; 0x2c
 8005624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005626:	1b5d      	subs	r5, r3, r5
 8005628:	1e6b      	subs	r3, r5, #1
 800562a:	9305      	str	r3, [sp, #20]
 800562c:	bf45      	ittet	mi
 800562e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005632:	9304      	strmi	r3, [sp, #16]
 8005634:	2300      	movpl	r3, #0
 8005636:	2300      	movmi	r3, #0
 8005638:	bf4c      	ite	mi
 800563a:	9305      	strmi	r3, [sp, #20]
 800563c:	9304      	strpl	r3, [sp, #16]
 800563e:	9b00      	ldr	r3, [sp, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	db3d      	blt.n	80056c0 <_dtoa_r+0x248>
 8005644:	9b05      	ldr	r3, [sp, #20]
 8005646:	9a00      	ldr	r2, [sp, #0]
 8005648:	920a      	str	r2, [sp, #40]	; 0x28
 800564a:	4413      	add	r3, r2
 800564c:	9305      	str	r3, [sp, #20]
 800564e:	2300      	movs	r3, #0
 8005650:	9307      	str	r3, [sp, #28]
 8005652:	9b06      	ldr	r3, [sp, #24]
 8005654:	2b09      	cmp	r3, #9
 8005656:	f200 8089 	bhi.w	800576c <_dtoa_r+0x2f4>
 800565a:	2b05      	cmp	r3, #5
 800565c:	bfc4      	itt	gt
 800565e:	3b04      	subgt	r3, #4
 8005660:	9306      	strgt	r3, [sp, #24]
 8005662:	9b06      	ldr	r3, [sp, #24]
 8005664:	f1a3 0302 	sub.w	r3, r3, #2
 8005668:	bfcc      	ite	gt
 800566a:	2500      	movgt	r5, #0
 800566c:	2501      	movle	r5, #1
 800566e:	2b03      	cmp	r3, #3
 8005670:	f200 8087 	bhi.w	8005782 <_dtoa_r+0x30a>
 8005674:	e8df f003 	tbb	[pc, r3]
 8005678:	59383a2d 	.word	0x59383a2d
 800567c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005680:	441d      	add	r5, r3
 8005682:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005686:	2b20      	cmp	r3, #32
 8005688:	bfc1      	itttt	gt
 800568a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800568e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005692:	fa0b f303 	lslgt.w	r3, fp, r3
 8005696:	fa26 f000 	lsrgt.w	r0, r6, r0
 800569a:	bfda      	itte	le
 800569c:	f1c3 0320 	rsble	r3, r3, #32
 80056a0:	fa06 f003 	lslle.w	r0, r6, r3
 80056a4:	4318      	orrgt	r0, r3
 80056a6:	f7fa ff2d 	bl	8000504 <__aeabi_ui2d>
 80056aa:	2301      	movs	r3, #1
 80056ac:	4606      	mov	r6, r0
 80056ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80056b2:	3d01      	subs	r5, #1
 80056b4:	930e      	str	r3, [sp, #56]	; 0x38
 80056b6:	e76a      	b.n	800558e <_dtoa_r+0x116>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e7b2      	b.n	8005622 <_dtoa_r+0x1aa>
 80056bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80056be:	e7b1      	b.n	8005624 <_dtoa_r+0x1ac>
 80056c0:	9b04      	ldr	r3, [sp, #16]
 80056c2:	9a00      	ldr	r2, [sp, #0]
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	9304      	str	r3, [sp, #16]
 80056c8:	4253      	negs	r3, r2
 80056ca:	9307      	str	r3, [sp, #28]
 80056cc:	2300      	movs	r3, #0
 80056ce:	930a      	str	r3, [sp, #40]	; 0x28
 80056d0:	e7bf      	b.n	8005652 <_dtoa_r+0x1da>
 80056d2:	2300      	movs	r3, #0
 80056d4:	9308      	str	r3, [sp, #32]
 80056d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d8:	2b00      	cmp	r3, #0
 80056da:	dc55      	bgt.n	8005788 <_dtoa_r+0x310>
 80056dc:	2301      	movs	r3, #1
 80056de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056e2:	461a      	mov	r2, r3
 80056e4:	9209      	str	r2, [sp, #36]	; 0x24
 80056e6:	e00c      	b.n	8005702 <_dtoa_r+0x28a>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e7f3      	b.n	80056d4 <_dtoa_r+0x25c>
 80056ec:	2300      	movs	r3, #0
 80056ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f0:	9308      	str	r3, [sp, #32]
 80056f2:	9b00      	ldr	r3, [sp, #0]
 80056f4:	4413      	add	r3, r2
 80056f6:	9302      	str	r3, [sp, #8]
 80056f8:	3301      	adds	r3, #1
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	9303      	str	r3, [sp, #12]
 80056fe:	bfb8      	it	lt
 8005700:	2301      	movlt	r3, #1
 8005702:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005704:	2200      	movs	r2, #0
 8005706:	6042      	str	r2, [r0, #4]
 8005708:	2204      	movs	r2, #4
 800570a:	f102 0614 	add.w	r6, r2, #20
 800570e:	429e      	cmp	r6, r3
 8005710:	6841      	ldr	r1, [r0, #4]
 8005712:	d93d      	bls.n	8005790 <_dtoa_r+0x318>
 8005714:	4620      	mov	r0, r4
 8005716:	f001 f923 	bl	8006960 <_Balloc>
 800571a:	9001      	str	r0, [sp, #4]
 800571c:	2800      	cmp	r0, #0
 800571e:	d13b      	bne.n	8005798 <_dtoa_r+0x320>
 8005720:	4b11      	ldr	r3, [pc, #68]	; (8005768 <_dtoa_r+0x2f0>)
 8005722:	4602      	mov	r2, r0
 8005724:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005728:	e6c0      	b.n	80054ac <_dtoa_r+0x34>
 800572a:	2301      	movs	r3, #1
 800572c:	e7df      	b.n	80056ee <_dtoa_r+0x276>
 800572e:	bf00      	nop
 8005730:	636f4361 	.word	0x636f4361
 8005734:	3fd287a7 	.word	0x3fd287a7
 8005738:	8b60c8b3 	.word	0x8b60c8b3
 800573c:	3fc68a28 	.word	0x3fc68a28
 8005740:	509f79fb 	.word	0x509f79fb
 8005744:	3fd34413 	.word	0x3fd34413
 8005748:	08007f8d 	.word	0x08007f8d
 800574c:	08007fa4 	.word	0x08007fa4
 8005750:	7ff00000 	.word	0x7ff00000
 8005754:	08007f89 	.word	0x08007f89
 8005758:	08007f80 	.word	0x08007f80
 800575c:	08007f09 	.word	0x08007f09
 8005760:	3ff80000 	.word	0x3ff80000
 8005764:	08008170 	.word	0x08008170
 8005768:	08007fff 	.word	0x08007fff
 800576c:	2501      	movs	r5, #1
 800576e:	2300      	movs	r3, #0
 8005770:	9306      	str	r3, [sp, #24]
 8005772:	9508      	str	r5, [sp, #32]
 8005774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005778:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800577c:	2200      	movs	r2, #0
 800577e:	2312      	movs	r3, #18
 8005780:	e7b0      	b.n	80056e4 <_dtoa_r+0x26c>
 8005782:	2301      	movs	r3, #1
 8005784:	9308      	str	r3, [sp, #32]
 8005786:	e7f5      	b.n	8005774 <_dtoa_r+0x2fc>
 8005788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800578e:	e7b8      	b.n	8005702 <_dtoa_r+0x28a>
 8005790:	3101      	adds	r1, #1
 8005792:	6041      	str	r1, [r0, #4]
 8005794:	0052      	lsls	r2, r2, #1
 8005796:	e7b8      	b.n	800570a <_dtoa_r+0x292>
 8005798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800579a:	9a01      	ldr	r2, [sp, #4]
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	9b03      	ldr	r3, [sp, #12]
 80057a0:	2b0e      	cmp	r3, #14
 80057a2:	f200 809d 	bhi.w	80058e0 <_dtoa_r+0x468>
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	f000 809a 	beq.w	80058e0 <_dtoa_r+0x468>
 80057ac:	9b00      	ldr	r3, [sp, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	dd32      	ble.n	8005818 <_dtoa_r+0x3a0>
 80057b2:	4ab7      	ldr	r2, [pc, #732]	; (8005a90 <_dtoa_r+0x618>)
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057c0:	9b00      	ldr	r3, [sp, #0]
 80057c2:	05d8      	lsls	r0, r3, #23
 80057c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80057c8:	d516      	bpl.n	80057f8 <_dtoa_r+0x380>
 80057ca:	4bb2      	ldr	r3, [pc, #712]	; (8005a94 <_dtoa_r+0x61c>)
 80057cc:	ec51 0b19 	vmov	r0, r1, d9
 80057d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057d4:	f7fb f83a 	bl	800084c <__aeabi_ddiv>
 80057d8:	f007 070f 	and.w	r7, r7, #15
 80057dc:	4682      	mov	sl, r0
 80057de:	468b      	mov	fp, r1
 80057e0:	2503      	movs	r5, #3
 80057e2:	4eac      	ldr	r6, [pc, #688]	; (8005a94 <_dtoa_r+0x61c>)
 80057e4:	b957      	cbnz	r7, 80057fc <_dtoa_r+0x384>
 80057e6:	4642      	mov	r2, r8
 80057e8:	464b      	mov	r3, r9
 80057ea:	4650      	mov	r0, sl
 80057ec:	4659      	mov	r1, fp
 80057ee:	f7fb f82d 	bl	800084c <__aeabi_ddiv>
 80057f2:	4682      	mov	sl, r0
 80057f4:	468b      	mov	fp, r1
 80057f6:	e028      	b.n	800584a <_dtoa_r+0x3d2>
 80057f8:	2502      	movs	r5, #2
 80057fa:	e7f2      	b.n	80057e2 <_dtoa_r+0x36a>
 80057fc:	07f9      	lsls	r1, r7, #31
 80057fe:	d508      	bpl.n	8005812 <_dtoa_r+0x39a>
 8005800:	4640      	mov	r0, r8
 8005802:	4649      	mov	r1, r9
 8005804:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005808:	f7fa fef6 	bl	80005f8 <__aeabi_dmul>
 800580c:	3501      	adds	r5, #1
 800580e:	4680      	mov	r8, r0
 8005810:	4689      	mov	r9, r1
 8005812:	107f      	asrs	r7, r7, #1
 8005814:	3608      	adds	r6, #8
 8005816:	e7e5      	b.n	80057e4 <_dtoa_r+0x36c>
 8005818:	f000 809b 	beq.w	8005952 <_dtoa_r+0x4da>
 800581c:	9b00      	ldr	r3, [sp, #0]
 800581e:	4f9d      	ldr	r7, [pc, #628]	; (8005a94 <_dtoa_r+0x61c>)
 8005820:	425e      	negs	r6, r3
 8005822:	4b9b      	ldr	r3, [pc, #620]	; (8005a90 <_dtoa_r+0x618>)
 8005824:	f006 020f 	and.w	r2, r6, #15
 8005828:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	ec51 0b19 	vmov	r0, r1, d9
 8005834:	f7fa fee0 	bl	80005f8 <__aeabi_dmul>
 8005838:	1136      	asrs	r6, r6, #4
 800583a:	4682      	mov	sl, r0
 800583c:	468b      	mov	fp, r1
 800583e:	2300      	movs	r3, #0
 8005840:	2502      	movs	r5, #2
 8005842:	2e00      	cmp	r6, #0
 8005844:	d17a      	bne.n	800593c <_dtoa_r+0x4c4>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1d3      	bne.n	80057f2 <_dtoa_r+0x37a>
 800584a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8082 	beq.w	8005956 <_dtoa_r+0x4de>
 8005852:	4b91      	ldr	r3, [pc, #580]	; (8005a98 <_dtoa_r+0x620>)
 8005854:	2200      	movs	r2, #0
 8005856:	4650      	mov	r0, sl
 8005858:	4659      	mov	r1, fp
 800585a:	f7fb f93f 	bl	8000adc <__aeabi_dcmplt>
 800585e:	2800      	cmp	r0, #0
 8005860:	d079      	beq.n	8005956 <_dtoa_r+0x4de>
 8005862:	9b03      	ldr	r3, [sp, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d076      	beq.n	8005956 <_dtoa_r+0x4de>
 8005868:	9b02      	ldr	r3, [sp, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	dd36      	ble.n	80058dc <_dtoa_r+0x464>
 800586e:	9b00      	ldr	r3, [sp, #0]
 8005870:	4650      	mov	r0, sl
 8005872:	4659      	mov	r1, fp
 8005874:	1e5f      	subs	r7, r3, #1
 8005876:	2200      	movs	r2, #0
 8005878:	4b88      	ldr	r3, [pc, #544]	; (8005a9c <_dtoa_r+0x624>)
 800587a:	f7fa febd 	bl	80005f8 <__aeabi_dmul>
 800587e:	9e02      	ldr	r6, [sp, #8]
 8005880:	4682      	mov	sl, r0
 8005882:	468b      	mov	fp, r1
 8005884:	3501      	adds	r5, #1
 8005886:	4628      	mov	r0, r5
 8005888:	f7fa fe4c 	bl	8000524 <__aeabi_i2d>
 800588c:	4652      	mov	r2, sl
 800588e:	465b      	mov	r3, fp
 8005890:	f7fa feb2 	bl	80005f8 <__aeabi_dmul>
 8005894:	4b82      	ldr	r3, [pc, #520]	; (8005aa0 <_dtoa_r+0x628>)
 8005896:	2200      	movs	r2, #0
 8005898:	f7fa fcf8 	bl	800028c <__adddf3>
 800589c:	46d0      	mov	r8, sl
 800589e:	46d9      	mov	r9, fp
 80058a0:	4682      	mov	sl, r0
 80058a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80058a6:	2e00      	cmp	r6, #0
 80058a8:	d158      	bne.n	800595c <_dtoa_r+0x4e4>
 80058aa:	4b7e      	ldr	r3, [pc, #504]	; (8005aa4 <_dtoa_r+0x62c>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	4640      	mov	r0, r8
 80058b0:	4649      	mov	r1, r9
 80058b2:	f7fa fce9 	bl	8000288 <__aeabi_dsub>
 80058b6:	4652      	mov	r2, sl
 80058b8:	465b      	mov	r3, fp
 80058ba:	4680      	mov	r8, r0
 80058bc:	4689      	mov	r9, r1
 80058be:	f7fb f92b 	bl	8000b18 <__aeabi_dcmpgt>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	f040 8295 	bne.w	8005df2 <_dtoa_r+0x97a>
 80058c8:	4652      	mov	r2, sl
 80058ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80058ce:	4640      	mov	r0, r8
 80058d0:	4649      	mov	r1, r9
 80058d2:	f7fb f903 	bl	8000adc <__aeabi_dcmplt>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	f040 8289 	bne.w	8005dee <_dtoa_r+0x976>
 80058dc:	ec5b ab19 	vmov	sl, fp, d9
 80058e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f2c0 8148 	blt.w	8005b78 <_dtoa_r+0x700>
 80058e8:	9a00      	ldr	r2, [sp, #0]
 80058ea:	2a0e      	cmp	r2, #14
 80058ec:	f300 8144 	bgt.w	8005b78 <_dtoa_r+0x700>
 80058f0:	4b67      	ldr	r3, [pc, #412]	; (8005a90 <_dtoa_r+0x618>)
 80058f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f280 80d5 	bge.w	8005aac <_dtoa_r+0x634>
 8005902:	9b03      	ldr	r3, [sp, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f300 80d1 	bgt.w	8005aac <_dtoa_r+0x634>
 800590a:	f040 826f 	bne.w	8005dec <_dtoa_r+0x974>
 800590e:	4b65      	ldr	r3, [pc, #404]	; (8005aa4 <_dtoa_r+0x62c>)
 8005910:	2200      	movs	r2, #0
 8005912:	4640      	mov	r0, r8
 8005914:	4649      	mov	r1, r9
 8005916:	f7fa fe6f 	bl	80005f8 <__aeabi_dmul>
 800591a:	4652      	mov	r2, sl
 800591c:	465b      	mov	r3, fp
 800591e:	f7fb f8f1 	bl	8000b04 <__aeabi_dcmpge>
 8005922:	9e03      	ldr	r6, [sp, #12]
 8005924:	4637      	mov	r7, r6
 8005926:	2800      	cmp	r0, #0
 8005928:	f040 8245 	bne.w	8005db6 <_dtoa_r+0x93e>
 800592c:	9d01      	ldr	r5, [sp, #4]
 800592e:	2331      	movs	r3, #49	; 0x31
 8005930:	f805 3b01 	strb.w	r3, [r5], #1
 8005934:	9b00      	ldr	r3, [sp, #0]
 8005936:	3301      	adds	r3, #1
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	e240      	b.n	8005dbe <_dtoa_r+0x946>
 800593c:	07f2      	lsls	r2, r6, #31
 800593e:	d505      	bpl.n	800594c <_dtoa_r+0x4d4>
 8005940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005944:	f7fa fe58 	bl	80005f8 <__aeabi_dmul>
 8005948:	3501      	adds	r5, #1
 800594a:	2301      	movs	r3, #1
 800594c:	1076      	asrs	r6, r6, #1
 800594e:	3708      	adds	r7, #8
 8005950:	e777      	b.n	8005842 <_dtoa_r+0x3ca>
 8005952:	2502      	movs	r5, #2
 8005954:	e779      	b.n	800584a <_dtoa_r+0x3d2>
 8005956:	9f00      	ldr	r7, [sp, #0]
 8005958:	9e03      	ldr	r6, [sp, #12]
 800595a:	e794      	b.n	8005886 <_dtoa_r+0x40e>
 800595c:	9901      	ldr	r1, [sp, #4]
 800595e:	4b4c      	ldr	r3, [pc, #304]	; (8005a90 <_dtoa_r+0x618>)
 8005960:	4431      	add	r1, r6
 8005962:	910d      	str	r1, [sp, #52]	; 0x34
 8005964:	9908      	ldr	r1, [sp, #32]
 8005966:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800596a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800596e:	2900      	cmp	r1, #0
 8005970:	d043      	beq.n	80059fa <_dtoa_r+0x582>
 8005972:	494d      	ldr	r1, [pc, #308]	; (8005aa8 <_dtoa_r+0x630>)
 8005974:	2000      	movs	r0, #0
 8005976:	f7fa ff69 	bl	800084c <__aeabi_ddiv>
 800597a:	4652      	mov	r2, sl
 800597c:	465b      	mov	r3, fp
 800597e:	f7fa fc83 	bl	8000288 <__aeabi_dsub>
 8005982:	9d01      	ldr	r5, [sp, #4]
 8005984:	4682      	mov	sl, r0
 8005986:	468b      	mov	fp, r1
 8005988:	4649      	mov	r1, r9
 800598a:	4640      	mov	r0, r8
 800598c:	f7fb f8e4 	bl	8000b58 <__aeabi_d2iz>
 8005990:	4606      	mov	r6, r0
 8005992:	f7fa fdc7 	bl	8000524 <__aeabi_i2d>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4640      	mov	r0, r8
 800599c:	4649      	mov	r1, r9
 800599e:	f7fa fc73 	bl	8000288 <__aeabi_dsub>
 80059a2:	3630      	adds	r6, #48	; 0x30
 80059a4:	f805 6b01 	strb.w	r6, [r5], #1
 80059a8:	4652      	mov	r2, sl
 80059aa:	465b      	mov	r3, fp
 80059ac:	4680      	mov	r8, r0
 80059ae:	4689      	mov	r9, r1
 80059b0:	f7fb f894 	bl	8000adc <__aeabi_dcmplt>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d163      	bne.n	8005a80 <_dtoa_r+0x608>
 80059b8:	4642      	mov	r2, r8
 80059ba:	464b      	mov	r3, r9
 80059bc:	4936      	ldr	r1, [pc, #216]	; (8005a98 <_dtoa_r+0x620>)
 80059be:	2000      	movs	r0, #0
 80059c0:	f7fa fc62 	bl	8000288 <__aeabi_dsub>
 80059c4:	4652      	mov	r2, sl
 80059c6:	465b      	mov	r3, fp
 80059c8:	f7fb f888 	bl	8000adc <__aeabi_dcmplt>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	f040 80b5 	bne.w	8005b3c <_dtoa_r+0x6c4>
 80059d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059d4:	429d      	cmp	r5, r3
 80059d6:	d081      	beq.n	80058dc <_dtoa_r+0x464>
 80059d8:	4b30      	ldr	r3, [pc, #192]	; (8005a9c <_dtoa_r+0x624>)
 80059da:	2200      	movs	r2, #0
 80059dc:	4650      	mov	r0, sl
 80059de:	4659      	mov	r1, fp
 80059e0:	f7fa fe0a 	bl	80005f8 <__aeabi_dmul>
 80059e4:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <_dtoa_r+0x624>)
 80059e6:	4682      	mov	sl, r0
 80059e8:	468b      	mov	fp, r1
 80059ea:	4640      	mov	r0, r8
 80059ec:	4649      	mov	r1, r9
 80059ee:	2200      	movs	r2, #0
 80059f0:	f7fa fe02 	bl	80005f8 <__aeabi_dmul>
 80059f4:	4680      	mov	r8, r0
 80059f6:	4689      	mov	r9, r1
 80059f8:	e7c6      	b.n	8005988 <_dtoa_r+0x510>
 80059fa:	4650      	mov	r0, sl
 80059fc:	4659      	mov	r1, fp
 80059fe:	f7fa fdfb 	bl	80005f8 <__aeabi_dmul>
 8005a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a04:	9d01      	ldr	r5, [sp, #4]
 8005a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a08:	4682      	mov	sl, r0
 8005a0a:	468b      	mov	fp, r1
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	4640      	mov	r0, r8
 8005a10:	f7fb f8a2 	bl	8000b58 <__aeabi_d2iz>
 8005a14:	4606      	mov	r6, r0
 8005a16:	f7fa fd85 	bl	8000524 <__aeabi_i2d>
 8005a1a:	3630      	adds	r6, #48	; 0x30
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4640      	mov	r0, r8
 8005a22:	4649      	mov	r1, r9
 8005a24:	f7fa fc30 	bl	8000288 <__aeabi_dsub>
 8005a28:	f805 6b01 	strb.w	r6, [r5], #1
 8005a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a2e:	429d      	cmp	r5, r3
 8005a30:	4680      	mov	r8, r0
 8005a32:	4689      	mov	r9, r1
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	d124      	bne.n	8005a84 <_dtoa_r+0x60c>
 8005a3a:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <_dtoa_r+0x630>)
 8005a3c:	4650      	mov	r0, sl
 8005a3e:	4659      	mov	r1, fp
 8005a40:	f7fa fc24 	bl	800028c <__adddf3>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4640      	mov	r0, r8
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	f7fb f864 	bl	8000b18 <__aeabi_dcmpgt>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d173      	bne.n	8005b3c <_dtoa_r+0x6c4>
 8005a54:	4652      	mov	r2, sl
 8005a56:	465b      	mov	r3, fp
 8005a58:	4913      	ldr	r1, [pc, #76]	; (8005aa8 <_dtoa_r+0x630>)
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	f7fa fc14 	bl	8000288 <__aeabi_dsub>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4640      	mov	r0, r8
 8005a66:	4649      	mov	r1, r9
 8005a68:	f7fb f838 	bl	8000adc <__aeabi_dcmplt>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	f43f af35 	beq.w	80058dc <_dtoa_r+0x464>
 8005a72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005a74:	1e6b      	subs	r3, r5, #1
 8005a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a7c:	2b30      	cmp	r3, #48	; 0x30
 8005a7e:	d0f8      	beq.n	8005a72 <_dtoa_r+0x5fa>
 8005a80:	9700      	str	r7, [sp, #0]
 8005a82:	e049      	b.n	8005b18 <_dtoa_r+0x6a0>
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <_dtoa_r+0x624>)
 8005a86:	f7fa fdb7 	bl	80005f8 <__aeabi_dmul>
 8005a8a:	4680      	mov	r8, r0
 8005a8c:	4689      	mov	r9, r1
 8005a8e:	e7bd      	b.n	8005a0c <_dtoa_r+0x594>
 8005a90:	08008170 	.word	0x08008170
 8005a94:	08008148 	.word	0x08008148
 8005a98:	3ff00000 	.word	0x3ff00000
 8005a9c:	40240000 	.word	0x40240000
 8005aa0:	401c0000 	.word	0x401c0000
 8005aa4:	40140000 	.word	0x40140000
 8005aa8:	3fe00000 	.word	0x3fe00000
 8005aac:	9d01      	ldr	r5, [sp, #4]
 8005aae:	4656      	mov	r6, sl
 8005ab0:	465f      	mov	r7, fp
 8005ab2:	4642      	mov	r2, r8
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	4639      	mov	r1, r7
 8005aba:	f7fa fec7 	bl	800084c <__aeabi_ddiv>
 8005abe:	f7fb f84b 	bl	8000b58 <__aeabi_d2iz>
 8005ac2:	4682      	mov	sl, r0
 8005ac4:	f7fa fd2e 	bl	8000524 <__aeabi_i2d>
 8005ac8:	4642      	mov	r2, r8
 8005aca:	464b      	mov	r3, r9
 8005acc:	f7fa fd94 	bl	80005f8 <__aeabi_dmul>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	4639      	mov	r1, r7
 8005ad8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005adc:	f7fa fbd4 	bl	8000288 <__aeabi_dsub>
 8005ae0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ae4:	9e01      	ldr	r6, [sp, #4]
 8005ae6:	9f03      	ldr	r7, [sp, #12]
 8005ae8:	1bae      	subs	r6, r5, r6
 8005aea:	42b7      	cmp	r7, r6
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	d135      	bne.n	8005b5e <_dtoa_r+0x6e6>
 8005af2:	f7fa fbcb 	bl	800028c <__adddf3>
 8005af6:	4642      	mov	r2, r8
 8005af8:	464b      	mov	r3, r9
 8005afa:	4606      	mov	r6, r0
 8005afc:	460f      	mov	r7, r1
 8005afe:	f7fb f80b 	bl	8000b18 <__aeabi_dcmpgt>
 8005b02:	b9d0      	cbnz	r0, 8005b3a <_dtoa_r+0x6c2>
 8005b04:	4642      	mov	r2, r8
 8005b06:	464b      	mov	r3, r9
 8005b08:	4630      	mov	r0, r6
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	f7fa ffdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b10:	b110      	cbz	r0, 8005b18 <_dtoa_r+0x6a0>
 8005b12:	f01a 0f01 	tst.w	sl, #1
 8005b16:	d110      	bne.n	8005b3a <_dtoa_r+0x6c2>
 8005b18:	4620      	mov	r0, r4
 8005b1a:	ee18 1a10 	vmov	r1, s16
 8005b1e:	f000 ff5f 	bl	80069e0 <_Bfree>
 8005b22:	2300      	movs	r3, #0
 8005b24:	9800      	ldr	r0, [sp, #0]
 8005b26:	702b      	strb	r3, [r5, #0]
 8005b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	6018      	str	r0, [r3, #0]
 8005b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f43f acf1 	beq.w	8005518 <_dtoa_r+0xa0>
 8005b36:	601d      	str	r5, [r3, #0]
 8005b38:	e4ee      	b.n	8005518 <_dtoa_r+0xa0>
 8005b3a:	9f00      	ldr	r7, [sp, #0]
 8005b3c:	462b      	mov	r3, r5
 8005b3e:	461d      	mov	r5, r3
 8005b40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b44:	2a39      	cmp	r2, #57	; 0x39
 8005b46:	d106      	bne.n	8005b56 <_dtoa_r+0x6de>
 8005b48:	9a01      	ldr	r2, [sp, #4]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d1f7      	bne.n	8005b3e <_dtoa_r+0x6c6>
 8005b4e:	9901      	ldr	r1, [sp, #4]
 8005b50:	2230      	movs	r2, #48	; 0x30
 8005b52:	3701      	adds	r7, #1
 8005b54:	700a      	strb	r2, [r1, #0]
 8005b56:	781a      	ldrb	r2, [r3, #0]
 8005b58:	3201      	adds	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e790      	b.n	8005a80 <_dtoa_r+0x608>
 8005b5e:	4ba6      	ldr	r3, [pc, #664]	; (8005df8 <_dtoa_r+0x980>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	f7fa fd49 	bl	80005f8 <__aeabi_dmul>
 8005b66:	2200      	movs	r2, #0
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	460f      	mov	r7, r1
 8005b6e:	f7fa ffab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d09d      	beq.n	8005ab2 <_dtoa_r+0x63a>
 8005b76:	e7cf      	b.n	8005b18 <_dtoa_r+0x6a0>
 8005b78:	9a08      	ldr	r2, [sp, #32]
 8005b7a:	2a00      	cmp	r2, #0
 8005b7c:	f000 80d7 	beq.w	8005d2e <_dtoa_r+0x8b6>
 8005b80:	9a06      	ldr	r2, [sp, #24]
 8005b82:	2a01      	cmp	r2, #1
 8005b84:	f300 80ba 	bgt.w	8005cfc <_dtoa_r+0x884>
 8005b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b8a:	2a00      	cmp	r2, #0
 8005b8c:	f000 80b2 	beq.w	8005cf4 <_dtoa_r+0x87c>
 8005b90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b94:	9e07      	ldr	r6, [sp, #28]
 8005b96:	9d04      	ldr	r5, [sp, #16]
 8005b98:	9a04      	ldr	r2, [sp, #16]
 8005b9a:	441a      	add	r2, r3
 8005b9c:	9204      	str	r2, [sp, #16]
 8005b9e:	9a05      	ldr	r2, [sp, #20]
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	441a      	add	r2, r3
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	9205      	str	r2, [sp, #20]
 8005ba8:	f001 f81c 	bl	8006be4 <__i2b>
 8005bac:	4607      	mov	r7, r0
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	dd0c      	ble.n	8005bcc <_dtoa_r+0x754>
 8005bb2:	9b05      	ldr	r3, [sp, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	dd09      	ble.n	8005bcc <_dtoa_r+0x754>
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	9a04      	ldr	r2, [sp, #16]
 8005bbc:	bfa8      	it	ge
 8005bbe:	462b      	movge	r3, r5
 8005bc0:	1ad2      	subs	r2, r2, r3
 8005bc2:	9204      	str	r2, [sp, #16]
 8005bc4:	9a05      	ldr	r2, [sp, #20]
 8005bc6:	1aed      	subs	r5, r5, r3
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	9305      	str	r3, [sp, #20]
 8005bcc:	9b07      	ldr	r3, [sp, #28]
 8005bce:	b31b      	cbz	r3, 8005c18 <_dtoa_r+0x7a0>
 8005bd0:	9b08      	ldr	r3, [sp, #32]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80af 	beq.w	8005d36 <_dtoa_r+0x8be>
 8005bd8:	2e00      	cmp	r6, #0
 8005bda:	dd13      	ble.n	8005c04 <_dtoa_r+0x78c>
 8005bdc:	4639      	mov	r1, r7
 8005bde:	4632      	mov	r2, r6
 8005be0:	4620      	mov	r0, r4
 8005be2:	f001 f8bf 	bl	8006d64 <__pow5mult>
 8005be6:	ee18 2a10 	vmov	r2, s16
 8005bea:	4601      	mov	r1, r0
 8005bec:	4607      	mov	r7, r0
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f001 f80e 	bl	8006c10 <__multiply>
 8005bf4:	ee18 1a10 	vmov	r1, s16
 8005bf8:	4680      	mov	r8, r0
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f000 fef0 	bl	80069e0 <_Bfree>
 8005c00:	ee08 8a10 	vmov	s16, r8
 8005c04:	9b07      	ldr	r3, [sp, #28]
 8005c06:	1b9a      	subs	r2, r3, r6
 8005c08:	d006      	beq.n	8005c18 <_dtoa_r+0x7a0>
 8005c0a:	ee18 1a10 	vmov	r1, s16
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f001 f8a8 	bl	8006d64 <__pow5mult>
 8005c14:	ee08 0a10 	vmov	s16, r0
 8005c18:	2101      	movs	r1, #1
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f000 ffe2 	bl	8006be4 <__i2b>
 8005c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	4606      	mov	r6, r0
 8005c26:	f340 8088 	ble.w	8005d3a <_dtoa_r+0x8c2>
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	4601      	mov	r1, r0
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f001 f898 	bl	8006d64 <__pow5mult>
 8005c34:	9b06      	ldr	r3, [sp, #24]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	4606      	mov	r6, r0
 8005c3a:	f340 8081 	ble.w	8005d40 <_dtoa_r+0x8c8>
 8005c3e:	f04f 0800 	mov.w	r8, #0
 8005c42:	6933      	ldr	r3, [r6, #16]
 8005c44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c48:	6918      	ldr	r0, [r3, #16]
 8005c4a:	f000 ff7b 	bl	8006b44 <__hi0bits>
 8005c4e:	f1c0 0020 	rsb	r0, r0, #32
 8005c52:	9b05      	ldr	r3, [sp, #20]
 8005c54:	4418      	add	r0, r3
 8005c56:	f010 001f 	ands.w	r0, r0, #31
 8005c5a:	f000 8092 	beq.w	8005d82 <_dtoa_r+0x90a>
 8005c5e:	f1c0 0320 	rsb	r3, r0, #32
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	f340 808a 	ble.w	8005d7c <_dtoa_r+0x904>
 8005c68:	f1c0 001c 	rsb	r0, r0, #28
 8005c6c:	9b04      	ldr	r3, [sp, #16]
 8005c6e:	4403      	add	r3, r0
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	9b05      	ldr	r3, [sp, #20]
 8005c74:	4403      	add	r3, r0
 8005c76:	4405      	add	r5, r0
 8005c78:	9305      	str	r3, [sp, #20]
 8005c7a:	9b04      	ldr	r3, [sp, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	dd07      	ble.n	8005c90 <_dtoa_r+0x818>
 8005c80:	ee18 1a10 	vmov	r1, s16
 8005c84:	461a      	mov	r2, r3
 8005c86:	4620      	mov	r0, r4
 8005c88:	f001 f8c6 	bl	8006e18 <__lshift>
 8005c8c:	ee08 0a10 	vmov	s16, r0
 8005c90:	9b05      	ldr	r3, [sp, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	dd05      	ble.n	8005ca2 <_dtoa_r+0x82a>
 8005c96:	4631      	mov	r1, r6
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f001 f8bc 	bl	8006e18 <__lshift>
 8005ca0:	4606      	mov	r6, r0
 8005ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d06e      	beq.n	8005d86 <_dtoa_r+0x90e>
 8005ca8:	ee18 0a10 	vmov	r0, s16
 8005cac:	4631      	mov	r1, r6
 8005cae:	f001 f923 	bl	8006ef8 <__mcmp>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	da67      	bge.n	8005d86 <_dtoa_r+0x90e>
 8005cb6:	9b00      	ldr	r3, [sp, #0]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	ee18 1a10 	vmov	r1, s16
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	220a      	movs	r2, #10
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 fead 	bl	8006a24 <__multadd>
 8005cca:	9b08      	ldr	r3, [sp, #32]
 8005ccc:	ee08 0a10 	vmov	s16, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 81b1 	beq.w	8006038 <_dtoa_r+0xbc0>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	4639      	mov	r1, r7
 8005cda:	220a      	movs	r2, #10
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 fea1 	bl	8006a24 <__multadd>
 8005ce2:	9b02      	ldr	r3, [sp, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	4607      	mov	r7, r0
 8005ce8:	f300 808e 	bgt.w	8005e08 <_dtoa_r+0x990>
 8005cec:	9b06      	ldr	r3, [sp, #24]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	dc51      	bgt.n	8005d96 <_dtoa_r+0x91e>
 8005cf2:	e089      	b.n	8005e08 <_dtoa_r+0x990>
 8005cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cfa:	e74b      	b.n	8005b94 <_dtoa_r+0x71c>
 8005cfc:	9b03      	ldr	r3, [sp, #12]
 8005cfe:	1e5e      	subs	r6, r3, #1
 8005d00:	9b07      	ldr	r3, [sp, #28]
 8005d02:	42b3      	cmp	r3, r6
 8005d04:	bfbf      	itttt	lt
 8005d06:	9b07      	ldrlt	r3, [sp, #28]
 8005d08:	9607      	strlt	r6, [sp, #28]
 8005d0a:	1af2      	sublt	r2, r6, r3
 8005d0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005d0e:	bfb6      	itet	lt
 8005d10:	189b      	addlt	r3, r3, r2
 8005d12:	1b9e      	subge	r6, r3, r6
 8005d14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005d16:	9b03      	ldr	r3, [sp, #12]
 8005d18:	bfb8      	it	lt
 8005d1a:	2600      	movlt	r6, #0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bfb7      	itett	lt
 8005d20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005d24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005d28:	1a9d      	sublt	r5, r3, r2
 8005d2a:	2300      	movlt	r3, #0
 8005d2c:	e734      	b.n	8005b98 <_dtoa_r+0x720>
 8005d2e:	9e07      	ldr	r6, [sp, #28]
 8005d30:	9d04      	ldr	r5, [sp, #16]
 8005d32:	9f08      	ldr	r7, [sp, #32]
 8005d34:	e73b      	b.n	8005bae <_dtoa_r+0x736>
 8005d36:	9a07      	ldr	r2, [sp, #28]
 8005d38:	e767      	b.n	8005c0a <_dtoa_r+0x792>
 8005d3a:	9b06      	ldr	r3, [sp, #24]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	dc18      	bgt.n	8005d72 <_dtoa_r+0x8fa>
 8005d40:	f1ba 0f00 	cmp.w	sl, #0
 8005d44:	d115      	bne.n	8005d72 <_dtoa_r+0x8fa>
 8005d46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d4a:	b993      	cbnz	r3, 8005d72 <_dtoa_r+0x8fa>
 8005d4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d50:	0d1b      	lsrs	r3, r3, #20
 8005d52:	051b      	lsls	r3, r3, #20
 8005d54:	b183      	cbz	r3, 8005d78 <_dtoa_r+0x900>
 8005d56:	9b04      	ldr	r3, [sp, #16]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	9304      	str	r3, [sp, #16]
 8005d5c:	9b05      	ldr	r3, [sp, #20]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	9305      	str	r3, [sp, #20]
 8005d62:	f04f 0801 	mov.w	r8, #1
 8005d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f47f af6a 	bne.w	8005c42 <_dtoa_r+0x7ca>
 8005d6e:	2001      	movs	r0, #1
 8005d70:	e76f      	b.n	8005c52 <_dtoa_r+0x7da>
 8005d72:	f04f 0800 	mov.w	r8, #0
 8005d76:	e7f6      	b.n	8005d66 <_dtoa_r+0x8ee>
 8005d78:	4698      	mov	r8, r3
 8005d7a:	e7f4      	b.n	8005d66 <_dtoa_r+0x8ee>
 8005d7c:	f43f af7d 	beq.w	8005c7a <_dtoa_r+0x802>
 8005d80:	4618      	mov	r0, r3
 8005d82:	301c      	adds	r0, #28
 8005d84:	e772      	b.n	8005c6c <_dtoa_r+0x7f4>
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	dc37      	bgt.n	8005dfc <_dtoa_r+0x984>
 8005d8c:	9b06      	ldr	r3, [sp, #24]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	dd34      	ble.n	8005dfc <_dtoa_r+0x984>
 8005d92:	9b03      	ldr	r3, [sp, #12]
 8005d94:	9302      	str	r3, [sp, #8]
 8005d96:	9b02      	ldr	r3, [sp, #8]
 8005d98:	b96b      	cbnz	r3, 8005db6 <_dtoa_r+0x93e>
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	2205      	movs	r2, #5
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f000 fe40 	bl	8006a24 <__multadd>
 8005da4:	4601      	mov	r1, r0
 8005da6:	4606      	mov	r6, r0
 8005da8:	ee18 0a10 	vmov	r0, s16
 8005dac:	f001 f8a4 	bl	8006ef8 <__mcmp>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	f73f adbb 	bgt.w	800592c <_dtoa_r+0x4b4>
 8005db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db8:	9d01      	ldr	r5, [sp, #4]
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	f04f 0800 	mov.w	r8, #0
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f000 fe0b 	bl	80069e0 <_Bfree>
 8005dca:	2f00      	cmp	r7, #0
 8005dcc:	f43f aea4 	beq.w	8005b18 <_dtoa_r+0x6a0>
 8005dd0:	f1b8 0f00 	cmp.w	r8, #0
 8005dd4:	d005      	beq.n	8005de2 <_dtoa_r+0x96a>
 8005dd6:	45b8      	cmp	r8, r7
 8005dd8:	d003      	beq.n	8005de2 <_dtoa_r+0x96a>
 8005dda:	4641      	mov	r1, r8
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 fdff 	bl	80069e0 <_Bfree>
 8005de2:	4639      	mov	r1, r7
 8005de4:	4620      	mov	r0, r4
 8005de6:	f000 fdfb 	bl	80069e0 <_Bfree>
 8005dea:	e695      	b.n	8005b18 <_dtoa_r+0x6a0>
 8005dec:	2600      	movs	r6, #0
 8005dee:	4637      	mov	r7, r6
 8005df0:	e7e1      	b.n	8005db6 <_dtoa_r+0x93e>
 8005df2:	9700      	str	r7, [sp, #0]
 8005df4:	4637      	mov	r7, r6
 8005df6:	e599      	b.n	800592c <_dtoa_r+0x4b4>
 8005df8:	40240000 	.word	0x40240000
 8005dfc:	9b08      	ldr	r3, [sp, #32]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80ca 	beq.w	8005f98 <_dtoa_r+0xb20>
 8005e04:	9b03      	ldr	r3, [sp, #12]
 8005e06:	9302      	str	r3, [sp, #8]
 8005e08:	2d00      	cmp	r5, #0
 8005e0a:	dd05      	ble.n	8005e18 <_dtoa_r+0x9a0>
 8005e0c:	4639      	mov	r1, r7
 8005e0e:	462a      	mov	r2, r5
 8005e10:	4620      	mov	r0, r4
 8005e12:	f001 f801 	bl	8006e18 <__lshift>
 8005e16:	4607      	mov	r7, r0
 8005e18:	f1b8 0f00 	cmp.w	r8, #0
 8005e1c:	d05b      	beq.n	8005ed6 <_dtoa_r+0xa5e>
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 fd9d 	bl	8006960 <_Balloc>
 8005e26:	4605      	mov	r5, r0
 8005e28:	b928      	cbnz	r0, 8005e36 <_dtoa_r+0x9be>
 8005e2a:	4b87      	ldr	r3, [pc, #540]	; (8006048 <_dtoa_r+0xbd0>)
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e32:	f7ff bb3b 	b.w	80054ac <_dtoa_r+0x34>
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	3202      	adds	r2, #2
 8005e3a:	0092      	lsls	r2, r2, #2
 8005e3c:	f107 010c 	add.w	r1, r7, #12
 8005e40:	300c      	adds	r0, #12
 8005e42:	f7fd ffc3 	bl	8003dcc <memcpy>
 8005e46:	2201      	movs	r2, #1
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f000 ffe4 	bl	8006e18 <__lshift>
 8005e50:	9b01      	ldr	r3, [sp, #4]
 8005e52:	f103 0901 	add.w	r9, r3, #1
 8005e56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	9305      	str	r3, [sp, #20]
 8005e5e:	f00a 0301 	and.w	r3, sl, #1
 8005e62:	46b8      	mov	r8, r7
 8005e64:	9304      	str	r3, [sp, #16]
 8005e66:	4607      	mov	r7, r0
 8005e68:	4631      	mov	r1, r6
 8005e6a:	ee18 0a10 	vmov	r0, s16
 8005e6e:	f7ff fa75 	bl	800535c <quorem>
 8005e72:	4641      	mov	r1, r8
 8005e74:	9002      	str	r0, [sp, #8]
 8005e76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005e7a:	ee18 0a10 	vmov	r0, s16
 8005e7e:	f001 f83b 	bl	8006ef8 <__mcmp>
 8005e82:	463a      	mov	r2, r7
 8005e84:	9003      	str	r0, [sp, #12]
 8005e86:	4631      	mov	r1, r6
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f001 f851 	bl	8006f30 <__mdiff>
 8005e8e:	68c2      	ldr	r2, [r0, #12]
 8005e90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005e94:	4605      	mov	r5, r0
 8005e96:	bb02      	cbnz	r2, 8005eda <_dtoa_r+0xa62>
 8005e98:	4601      	mov	r1, r0
 8005e9a:	ee18 0a10 	vmov	r0, s16
 8005e9e:	f001 f82b 	bl	8006ef8 <__mcmp>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	9207      	str	r2, [sp, #28]
 8005eaa:	f000 fd99 	bl	80069e0 <_Bfree>
 8005eae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005eb2:	ea43 0102 	orr.w	r1, r3, r2
 8005eb6:	9b04      	ldr	r3, [sp, #16]
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	464d      	mov	r5, r9
 8005ebc:	d10f      	bne.n	8005ede <_dtoa_r+0xa66>
 8005ebe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005ec2:	d02a      	beq.n	8005f1a <_dtoa_r+0xaa2>
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	dd02      	ble.n	8005ed0 <_dtoa_r+0xa58>
 8005eca:	9b02      	ldr	r3, [sp, #8]
 8005ecc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005ed0:	f88b a000 	strb.w	sl, [fp]
 8005ed4:	e775      	b.n	8005dc2 <_dtoa_r+0x94a>
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	e7ba      	b.n	8005e50 <_dtoa_r+0x9d8>
 8005eda:	2201      	movs	r2, #1
 8005edc:	e7e2      	b.n	8005ea4 <_dtoa_r+0xa2c>
 8005ede:	9b03      	ldr	r3, [sp, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	db04      	blt.n	8005eee <_dtoa_r+0xa76>
 8005ee4:	9906      	ldr	r1, [sp, #24]
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	9904      	ldr	r1, [sp, #16]
 8005eea:	430b      	orrs	r3, r1
 8005eec:	d122      	bne.n	8005f34 <_dtoa_r+0xabc>
 8005eee:	2a00      	cmp	r2, #0
 8005ef0:	ddee      	ble.n	8005ed0 <_dtoa_r+0xa58>
 8005ef2:	ee18 1a10 	vmov	r1, s16
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f000 ff8d 	bl	8006e18 <__lshift>
 8005efe:	4631      	mov	r1, r6
 8005f00:	ee08 0a10 	vmov	s16, r0
 8005f04:	f000 fff8 	bl	8006ef8 <__mcmp>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	dc03      	bgt.n	8005f14 <_dtoa_r+0xa9c>
 8005f0c:	d1e0      	bne.n	8005ed0 <_dtoa_r+0xa58>
 8005f0e:	f01a 0f01 	tst.w	sl, #1
 8005f12:	d0dd      	beq.n	8005ed0 <_dtoa_r+0xa58>
 8005f14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f18:	d1d7      	bne.n	8005eca <_dtoa_r+0xa52>
 8005f1a:	2339      	movs	r3, #57	; 0x39
 8005f1c:	f88b 3000 	strb.w	r3, [fp]
 8005f20:	462b      	mov	r3, r5
 8005f22:	461d      	mov	r5, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f2a:	2a39      	cmp	r2, #57	; 0x39
 8005f2c:	d071      	beq.n	8006012 <_dtoa_r+0xb9a>
 8005f2e:	3201      	adds	r2, #1
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e746      	b.n	8005dc2 <_dtoa_r+0x94a>
 8005f34:	2a00      	cmp	r2, #0
 8005f36:	dd07      	ble.n	8005f48 <_dtoa_r+0xad0>
 8005f38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f3c:	d0ed      	beq.n	8005f1a <_dtoa_r+0xaa2>
 8005f3e:	f10a 0301 	add.w	r3, sl, #1
 8005f42:	f88b 3000 	strb.w	r3, [fp]
 8005f46:	e73c      	b.n	8005dc2 <_dtoa_r+0x94a>
 8005f48:	9b05      	ldr	r3, [sp, #20]
 8005f4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005f4e:	4599      	cmp	r9, r3
 8005f50:	d047      	beq.n	8005fe2 <_dtoa_r+0xb6a>
 8005f52:	ee18 1a10 	vmov	r1, s16
 8005f56:	2300      	movs	r3, #0
 8005f58:	220a      	movs	r2, #10
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 fd62 	bl	8006a24 <__multadd>
 8005f60:	45b8      	cmp	r8, r7
 8005f62:	ee08 0a10 	vmov	s16, r0
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	f04f 020a 	mov.w	r2, #10
 8005f6e:	4641      	mov	r1, r8
 8005f70:	4620      	mov	r0, r4
 8005f72:	d106      	bne.n	8005f82 <_dtoa_r+0xb0a>
 8005f74:	f000 fd56 	bl	8006a24 <__multadd>
 8005f78:	4680      	mov	r8, r0
 8005f7a:	4607      	mov	r7, r0
 8005f7c:	f109 0901 	add.w	r9, r9, #1
 8005f80:	e772      	b.n	8005e68 <_dtoa_r+0x9f0>
 8005f82:	f000 fd4f 	bl	8006a24 <__multadd>
 8005f86:	4639      	mov	r1, r7
 8005f88:	4680      	mov	r8, r0
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	220a      	movs	r2, #10
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f000 fd48 	bl	8006a24 <__multadd>
 8005f94:	4607      	mov	r7, r0
 8005f96:	e7f1      	b.n	8005f7c <_dtoa_r+0xb04>
 8005f98:	9b03      	ldr	r3, [sp, #12]
 8005f9a:	9302      	str	r3, [sp, #8]
 8005f9c:	9d01      	ldr	r5, [sp, #4]
 8005f9e:	ee18 0a10 	vmov	r0, s16
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	f7ff f9da 	bl	800535c <quorem>
 8005fa8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005fac:	9b01      	ldr	r3, [sp, #4]
 8005fae:	f805 ab01 	strb.w	sl, [r5], #1
 8005fb2:	1aea      	subs	r2, r5, r3
 8005fb4:	9b02      	ldr	r3, [sp, #8]
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	dd09      	ble.n	8005fce <_dtoa_r+0xb56>
 8005fba:	ee18 1a10 	vmov	r1, s16
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	220a      	movs	r2, #10
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 fd2e 	bl	8006a24 <__multadd>
 8005fc8:	ee08 0a10 	vmov	s16, r0
 8005fcc:	e7e7      	b.n	8005f9e <_dtoa_r+0xb26>
 8005fce:	9b02      	ldr	r3, [sp, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bfc8      	it	gt
 8005fd4:	461d      	movgt	r5, r3
 8005fd6:	9b01      	ldr	r3, [sp, #4]
 8005fd8:	bfd8      	it	le
 8005fda:	2501      	movle	r5, #1
 8005fdc:	441d      	add	r5, r3
 8005fde:	f04f 0800 	mov.w	r8, #0
 8005fe2:	ee18 1a10 	vmov	r1, s16
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 ff15 	bl	8006e18 <__lshift>
 8005fee:	4631      	mov	r1, r6
 8005ff0:	ee08 0a10 	vmov	s16, r0
 8005ff4:	f000 ff80 	bl	8006ef8 <__mcmp>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	dc91      	bgt.n	8005f20 <_dtoa_r+0xaa8>
 8005ffc:	d102      	bne.n	8006004 <_dtoa_r+0xb8c>
 8005ffe:	f01a 0f01 	tst.w	sl, #1
 8006002:	d18d      	bne.n	8005f20 <_dtoa_r+0xaa8>
 8006004:	462b      	mov	r3, r5
 8006006:	461d      	mov	r5, r3
 8006008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800600c:	2a30      	cmp	r2, #48	; 0x30
 800600e:	d0fa      	beq.n	8006006 <_dtoa_r+0xb8e>
 8006010:	e6d7      	b.n	8005dc2 <_dtoa_r+0x94a>
 8006012:	9a01      	ldr	r2, [sp, #4]
 8006014:	429a      	cmp	r2, r3
 8006016:	d184      	bne.n	8005f22 <_dtoa_r+0xaaa>
 8006018:	9b00      	ldr	r3, [sp, #0]
 800601a:	3301      	adds	r3, #1
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	2331      	movs	r3, #49	; 0x31
 8006020:	7013      	strb	r3, [r2, #0]
 8006022:	e6ce      	b.n	8005dc2 <_dtoa_r+0x94a>
 8006024:	4b09      	ldr	r3, [pc, #36]	; (800604c <_dtoa_r+0xbd4>)
 8006026:	f7ff ba95 	b.w	8005554 <_dtoa_r+0xdc>
 800602a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800602c:	2b00      	cmp	r3, #0
 800602e:	f47f aa6e 	bne.w	800550e <_dtoa_r+0x96>
 8006032:	4b07      	ldr	r3, [pc, #28]	; (8006050 <_dtoa_r+0xbd8>)
 8006034:	f7ff ba8e 	b.w	8005554 <_dtoa_r+0xdc>
 8006038:	9b02      	ldr	r3, [sp, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	dcae      	bgt.n	8005f9c <_dtoa_r+0xb24>
 800603e:	9b06      	ldr	r3, [sp, #24]
 8006040:	2b02      	cmp	r3, #2
 8006042:	f73f aea8 	bgt.w	8005d96 <_dtoa_r+0x91e>
 8006046:	e7a9      	b.n	8005f9c <_dtoa_r+0xb24>
 8006048:	08007fff 	.word	0x08007fff
 800604c:	08007f08 	.word	0x08007f08
 8006050:	08007f80 	.word	0x08007f80

08006054 <std>:
 8006054:	2300      	movs	r3, #0
 8006056:	b510      	push	{r4, lr}
 8006058:	4604      	mov	r4, r0
 800605a:	e9c0 3300 	strd	r3, r3, [r0]
 800605e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006062:	6083      	str	r3, [r0, #8]
 8006064:	8181      	strh	r1, [r0, #12]
 8006066:	6643      	str	r3, [r0, #100]	; 0x64
 8006068:	81c2      	strh	r2, [r0, #14]
 800606a:	6183      	str	r3, [r0, #24]
 800606c:	4619      	mov	r1, r3
 800606e:	2208      	movs	r2, #8
 8006070:	305c      	adds	r0, #92	; 0x5c
 8006072:	f7fd feb9 	bl	8003de8 <memset>
 8006076:	4b05      	ldr	r3, [pc, #20]	; (800608c <std+0x38>)
 8006078:	6263      	str	r3, [r4, #36]	; 0x24
 800607a:	4b05      	ldr	r3, [pc, #20]	; (8006090 <std+0x3c>)
 800607c:	62a3      	str	r3, [r4, #40]	; 0x28
 800607e:	4b05      	ldr	r3, [pc, #20]	; (8006094 <std+0x40>)
 8006080:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006082:	4b05      	ldr	r3, [pc, #20]	; (8006098 <std+0x44>)
 8006084:	6224      	str	r4, [r4, #32]
 8006086:	6323      	str	r3, [r4, #48]	; 0x30
 8006088:	bd10      	pop	{r4, pc}
 800608a:	bf00      	nop
 800608c:	080077b9 	.word	0x080077b9
 8006090:	080077db 	.word	0x080077db
 8006094:	08007813 	.word	0x08007813
 8006098:	08007837 	.word	0x08007837

0800609c <_cleanup_r>:
 800609c:	4901      	ldr	r1, [pc, #4]	; (80060a4 <_cleanup_r+0x8>)
 800609e:	f000 b8af 	b.w	8006200 <_fwalk_reent>
 80060a2:	bf00      	nop
 80060a4:	08007b91 	.word	0x08007b91

080060a8 <__sfmoreglue>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	2268      	movs	r2, #104	; 0x68
 80060ac:	1e4d      	subs	r5, r1, #1
 80060ae:	4355      	muls	r5, r2
 80060b0:	460e      	mov	r6, r1
 80060b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060b6:	f001 f997 	bl	80073e8 <_malloc_r>
 80060ba:	4604      	mov	r4, r0
 80060bc:	b140      	cbz	r0, 80060d0 <__sfmoreglue+0x28>
 80060be:	2100      	movs	r1, #0
 80060c0:	e9c0 1600 	strd	r1, r6, [r0]
 80060c4:	300c      	adds	r0, #12
 80060c6:	60a0      	str	r0, [r4, #8]
 80060c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060cc:	f7fd fe8c 	bl	8003de8 <memset>
 80060d0:	4620      	mov	r0, r4
 80060d2:	bd70      	pop	{r4, r5, r6, pc}

080060d4 <__sfp_lock_acquire>:
 80060d4:	4801      	ldr	r0, [pc, #4]	; (80060dc <__sfp_lock_acquire+0x8>)
 80060d6:	f000 bc26 	b.w	8006926 <__retarget_lock_acquire_recursive>
 80060da:	bf00      	nop
 80060dc:	20000581 	.word	0x20000581

080060e0 <__sfp_lock_release>:
 80060e0:	4801      	ldr	r0, [pc, #4]	; (80060e8 <__sfp_lock_release+0x8>)
 80060e2:	f000 bc21 	b.w	8006928 <__retarget_lock_release_recursive>
 80060e6:	bf00      	nop
 80060e8:	20000581 	.word	0x20000581

080060ec <__sinit_lock_acquire>:
 80060ec:	4801      	ldr	r0, [pc, #4]	; (80060f4 <__sinit_lock_acquire+0x8>)
 80060ee:	f000 bc1a 	b.w	8006926 <__retarget_lock_acquire_recursive>
 80060f2:	bf00      	nop
 80060f4:	20000582 	.word	0x20000582

080060f8 <__sinit_lock_release>:
 80060f8:	4801      	ldr	r0, [pc, #4]	; (8006100 <__sinit_lock_release+0x8>)
 80060fa:	f000 bc15 	b.w	8006928 <__retarget_lock_release_recursive>
 80060fe:	bf00      	nop
 8006100:	20000582 	.word	0x20000582

08006104 <__sinit>:
 8006104:	b510      	push	{r4, lr}
 8006106:	4604      	mov	r4, r0
 8006108:	f7ff fff0 	bl	80060ec <__sinit_lock_acquire>
 800610c:	69a3      	ldr	r3, [r4, #24]
 800610e:	b11b      	cbz	r3, 8006118 <__sinit+0x14>
 8006110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006114:	f7ff bff0 	b.w	80060f8 <__sinit_lock_release>
 8006118:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800611c:	6523      	str	r3, [r4, #80]	; 0x50
 800611e:	4b13      	ldr	r3, [pc, #76]	; (800616c <__sinit+0x68>)
 8006120:	4a13      	ldr	r2, [pc, #76]	; (8006170 <__sinit+0x6c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	62a2      	str	r2, [r4, #40]	; 0x28
 8006126:	42a3      	cmp	r3, r4
 8006128:	bf04      	itt	eq
 800612a:	2301      	moveq	r3, #1
 800612c:	61a3      	streq	r3, [r4, #24]
 800612e:	4620      	mov	r0, r4
 8006130:	f000 f820 	bl	8006174 <__sfp>
 8006134:	6060      	str	r0, [r4, #4]
 8006136:	4620      	mov	r0, r4
 8006138:	f000 f81c 	bl	8006174 <__sfp>
 800613c:	60a0      	str	r0, [r4, #8]
 800613e:	4620      	mov	r0, r4
 8006140:	f000 f818 	bl	8006174 <__sfp>
 8006144:	2200      	movs	r2, #0
 8006146:	60e0      	str	r0, [r4, #12]
 8006148:	2104      	movs	r1, #4
 800614a:	6860      	ldr	r0, [r4, #4]
 800614c:	f7ff ff82 	bl	8006054 <std>
 8006150:	68a0      	ldr	r0, [r4, #8]
 8006152:	2201      	movs	r2, #1
 8006154:	2109      	movs	r1, #9
 8006156:	f7ff ff7d 	bl	8006054 <std>
 800615a:	68e0      	ldr	r0, [r4, #12]
 800615c:	2202      	movs	r2, #2
 800615e:	2112      	movs	r1, #18
 8006160:	f7ff ff78 	bl	8006054 <std>
 8006164:	2301      	movs	r3, #1
 8006166:	61a3      	str	r3, [r4, #24]
 8006168:	e7d2      	b.n	8006110 <__sinit+0xc>
 800616a:	bf00      	nop
 800616c:	08007ef4 	.word	0x08007ef4
 8006170:	0800609d 	.word	0x0800609d

08006174 <__sfp>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	4607      	mov	r7, r0
 8006178:	f7ff ffac 	bl	80060d4 <__sfp_lock_acquire>
 800617c:	4b1e      	ldr	r3, [pc, #120]	; (80061f8 <__sfp+0x84>)
 800617e:	681e      	ldr	r6, [r3, #0]
 8006180:	69b3      	ldr	r3, [r6, #24]
 8006182:	b913      	cbnz	r3, 800618a <__sfp+0x16>
 8006184:	4630      	mov	r0, r6
 8006186:	f7ff ffbd 	bl	8006104 <__sinit>
 800618a:	3648      	adds	r6, #72	; 0x48
 800618c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006190:	3b01      	subs	r3, #1
 8006192:	d503      	bpl.n	800619c <__sfp+0x28>
 8006194:	6833      	ldr	r3, [r6, #0]
 8006196:	b30b      	cbz	r3, 80061dc <__sfp+0x68>
 8006198:	6836      	ldr	r6, [r6, #0]
 800619a:	e7f7      	b.n	800618c <__sfp+0x18>
 800619c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061a0:	b9d5      	cbnz	r5, 80061d8 <__sfp+0x64>
 80061a2:	4b16      	ldr	r3, [pc, #88]	; (80061fc <__sfp+0x88>)
 80061a4:	60e3      	str	r3, [r4, #12]
 80061a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061aa:	6665      	str	r5, [r4, #100]	; 0x64
 80061ac:	f000 fbba 	bl	8006924 <__retarget_lock_init_recursive>
 80061b0:	f7ff ff96 	bl	80060e0 <__sfp_lock_release>
 80061b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80061b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80061bc:	6025      	str	r5, [r4, #0]
 80061be:	61a5      	str	r5, [r4, #24]
 80061c0:	2208      	movs	r2, #8
 80061c2:	4629      	mov	r1, r5
 80061c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061c8:	f7fd fe0e 	bl	8003de8 <memset>
 80061cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061d4:	4620      	mov	r0, r4
 80061d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061d8:	3468      	adds	r4, #104	; 0x68
 80061da:	e7d9      	b.n	8006190 <__sfp+0x1c>
 80061dc:	2104      	movs	r1, #4
 80061de:	4638      	mov	r0, r7
 80061e0:	f7ff ff62 	bl	80060a8 <__sfmoreglue>
 80061e4:	4604      	mov	r4, r0
 80061e6:	6030      	str	r0, [r6, #0]
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d1d5      	bne.n	8006198 <__sfp+0x24>
 80061ec:	f7ff ff78 	bl	80060e0 <__sfp_lock_release>
 80061f0:	230c      	movs	r3, #12
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	e7ee      	b.n	80061d4 <__sfp+0x60>
 80061f6:	bf00      	nop
 80061f8:	08007ef4 	.word	0x08007ef4
 80061fc:	ffff0001 	.word	0xffff0001

08006200 <_fwalk_reent>:
 8006200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006204:	4606      	mov	r6, r0
 8006206:	4688      	mov	r8, r1
 8006208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800620c:	2700      	movs	r7, #0
 800620e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006212:	f1b9 0901 	subs.w	r9, r9, #1
 8006216:	d505      	bpl.n	8006224 <_fwalk_reent+0x24>
 8006218:	6824      	ldr	r4, [r4, #0]
 800621a:	2c00      	cmp	r4, #0
 800621c:	d1f7      	bne.n	800620e <_fwalk_reent+0xe>
 800621e:	4638      	mov	r0, r7
 8006220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006224:	89ab      	ldrh	r3, [r5, #12]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d907      	bls.n	800623a <_fwalk_reent+0x3a>
 800622a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800622e:	3301      	adds	r3, #1
 8006230:	d003      	beq.n	800623a <_fwalk_reent+0x3a>
 8006232:	4629      	mov	r1, r5
 8006234:	4630      	mov	r0, r6
 8006236:	47c0      	blx	r8
 8006238:	4307      	orrs	r7, r0
 800623a:	3568      	adds	r5, #104	; 0x68
 800623c:	e7e9      	b.n	8006212 <_fwalk_reent+0x12>

0800623e <rshift>:
 800623e:	6903      	ldr	r3, [r0, #16]
 8006240:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006248:	ea4f 1261 	mov.w	r2, r1, asr #5
 800624c:	f100 0414 	add.w	r4, r0, #20
 8006250:	dd45      	ble.n	80062de <rshift+0xa0>
 8006252:	f011 011f 	ands.w	r1, r1, #31
 8006256:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800625a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800625e:	d10c      	bne.n	800627a <rshift+0x3c>
 8006260:	f100 0710 	add.w	r7, r0, #16
 8006264:	4629      	mov	r1, r5
 8006266:	42b1      	cmp	r1, r6
 8006268:	d334      	bcc.n	80062d4 <rshift+0x96>
 800626a:	1a9b      	subs	r3, r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	1eea      	subs	r2, r5, #3
 8006270:	4296      	cmp	r6, r2
 8006272:	bf38      	it	cc
 8006274:	2300      	movcc	r3, #0
 8006276:	4423      	add	r3, r4
 8006278:	e015      	b.n	80062a6 <rshift+0x68>
 800627a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800627e:	f1c1 0820 	rsb	r8, r1, #32
 8006282:	40cf      	lsrs	r7, r1
 8006284:	f105 0e04 	add.w	lr, r5, #4
 8006288:	46a1      	mov	r9, r4
 800628a:	4576      	cmp	r6, lr
 800628c:	46f4      	mov	ip, lr
 800628e:	d815      	bhi.n	80062bc <rshift+0x7e>
 8006290:	1a9a      	subs	r2, r3, r2
 8006292:	0092      	lsls	r2, r2, #2
 8006294:	3a04      	subs	r2, #4
 8006296:	3501      	adds	r5, #1
 8006298:	42ae      	cmp	r6, r5
 800629a:	bf38      	it	cc
 800629c:	2200      	movcc	r2, #0
 800629e:	18a3      	adds	r3, r4, r2
 80062a0:	50a7      	str	r7, [r4, r2]
 80062a2:	b107      	cbz	r7, 80062a6 <rshift+0x68>
 80062a4:	3304      	adds	r3, #4
 80062a6:	1b1a      	subs	r2, r3, r4
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80062ae:	bf08      	it	eq
 80062b0:	2300      	moveq	r3, #0
 80062b2:	6102      	str	r2, [r0, #16]
 80062b4:	bf08      	it	eq
 80062b6:	6143      	streq	r3, [r0, #20]
 80062b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062bc:	f8dc c000 	ldr.w	ip, [ip]
 80062c0:	fa0c fc08 	lsl.w	ip, ip, r8
 80062c4:	ea4c 0707 	orr.w	r7, ip, r7
 80062c8:	f849 7b04 	str.w	r7, [r9], #4
 80062cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80062d0:	40cf      	lsrs	r7, r1
 80062d2:	e7da      	b.n	800628a <rshift+0x4c>
 80062d4:	f851 cb04 	ldr.w	ip, [r1], #4
 80062d8:	f847 cf04 	str.w	ip, [r7, #4]!
 80062dc:	e7c3      	b.n	8006266 <rshift+0x28>
 80062de:	4623      	mov	r3, r4
 80062e0:	e7e1      	b.n	80062a6 <rshift+0x68>

080062e2 <__hexdig_fun>:
 80062e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80062e6:	2b09      	cmp	r3, #9
 80062e8:	d802      	bhi.n	80062f0 <__hexdig_fun+0xe>
 80062ea:	3820      	subs	r0, #32
 80062ec:	b2c0      	uxtb	r0, r0
 80062ee:	4770      	bx	lr
 80062f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80062f4:	2b05      	cmp	r3, #5
 80062f6:	d801      	bhi.n	80062fc <__hexdig_fun+0x1a>
 80062f8:	3847      	subs	r0, #71	; 0x47
 80062fa:	e7f7      	b.n	80062ec <__hexdig_fun+0xa>
 80062fc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006300:	2b05      	cmp	r3, #5
 8006302:	d801      	bhi.n	8006308 <__hexdig_fun+0x26>
 8006304:	3827      	subs	r0, #39	; 0x27
 8006306:	e7f1      	b.n	80062ec <__hexdig_fun+0xa>
 8006308:	2000      	movs	r0, #0
 800630a:	4770      	bx	lr

0800630c <__gethex>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	ed2d 8b02 	vpush	{d8}
 8006314:	b089      	sub	sp, #36	; 0x24
 8006316:	ee08 0a10 	vmov	s16, r0
 800631a:	9304      	str	r3, [sp, #16]
 800631c:	4bb4      	ldr	r3, [pc, #720]	; (80065f0 <__gethex+0x2e4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	9301      	str	r3, [sp, #4]
 8006322:	4618      	mov	r0, r3
 8006324:	468b      	mov	fp, r1
 8006326:	4690      	mov	r8, r2
 8006328:	f7f9 ff52 	bl	80001d0 <strlen>
 800632c:	9b01      	ldr	r3, [sp, #4]
 800632e:	f8db 2000 	ldr.w	r2, [fp]
 8006332:	4403      	add	r3, r0
 8006334:	4682      	mov	sl, r0
 8006336:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800633a:	9305      	str	r3, [sp, #20]
 800633c:	1c93      	adds	r3, r2, #2
 800633e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006342:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006346:	32fe      	adds	r2, #254	; 0xfe
 8006348:	18d1      	adds	r1, r2, r3
 800634a:	461f      	mov	r7, r3
 800634c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006350:	9100      	str	r1, [sp, #0]
 8006352:	2830      	cmp	r0, #48	; 0x30
 8006354:	d0f8      	beq.n	8006348 <__gethex+0x3c>
 8006356:	f7ff ffc4 	bl	80062e2 <__hexdig_fun>
 800635a:	4604      	mov	r4, r0
 800635c:	2800      	cmp	r0, #0
 800635e:	d13a      	bne.n	80063d6 <__gethex+0xca>
 8006360:	9901      	ldr	r1, [sp, #4]
 8006362:	4652      	mov	r2, sl
 8006364:	4638      	mov	r0, r7
 8006366:	f001 fa6a 	bl	800783e <strncmp>
 800636a:	4605      	mov	r5, r0
 800636c:	2800      	cmp	r0, #0
 800636e:	d168      	bne.n	8006442 <__gethex+0x136>
 8006370:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006374:	eb07 060a 	add.w	r6, r7, sl
 8006378:	f7ff ffb3 	bl	80062e2 <__hexdig_fun>
 800637c:	2800      	cmp	r0, #0
 800637e:	d062      	beq.n	8006446 <__gethex+0x13a>
 8006380:	4633      	mov	r3, r6
 8006382:	7818      	ldrb	r0, [r3, #0]
 8006384:	2830      	cmp	r0, #48	; 0x30
 8006386:	461f      	mov	r7, r3
 8006388:	f103 0301 	add.w	r3, r3, #1
 800638c:	d0f9      	beq.n	8006382 <__gethex+0x76>
 800638e:	f7ff ffa8 	bl	80062e2 <__hexdig_fun>
 8006392:	2301      	movs	r3, #1
 8006394:	fab0 f480 	clz	r4, r0
 8006398:	0964      	lsrs	r4, r4, #5
 800639a:	4635      	mov	r5, r6
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	463a      	mov	r2, r7
 80063a0:	4616      	mov	r6, r2
 80063a2:	3201      	adds	r2, #1
 80063a4:	7830      	ldrb	r0, [r6, #0]
 80063a6:	f7ff ff9c 	bl	80062e2 <__hexdig_fun>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d1f8      	bne.n	80063a0 <__gethex+0x94>
 80063ae:	9901      	ldr	r1, [sp, #4]
 80063b0:	4652      	mov	r2, sl
 80063b2:	4630      	mov	r0, r6
 80063b4:	f001 fa43 	bl	800783e <strncmp>
 80063b8:	b980      	cbnz	r0, 80063dc <__gethex+0xd0>
 80063ba:	b94d      	cbnz	r5, 80063d0 <__gethex+0xc4>
 80063bc:	eb06 050a 	add.w	r5, r6, sl
 80063c0:	462a      	mov	r2, r5
 80063c2:	4616      	mov	r6, r2
 80063c4:	3201      	adds	r2, #1
 80063c6:	7830      	ldrb	r0, [r6, #0]
 80063c8:	f7ff ff8b 	bl	80062e2 <__hexdig_fun>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d1f8      	bne.n	80063c2 <__gethex+0xb6>
 80063d0:	1bad      	subs	r5, r5, r6
 80063d2:	00ad      	lsls	r5, r5, #2
 80063d4:	e004      	b.n	80063e0 <__gethex+0xd4>
 80063d6:	2400      	movs	r4, #0
 80063d8:	4625      	mov	r5, r4
 80063da:	e7e0      	b.n	800639e <__gethex+0x92>
 80063dc:	2d00      	cmp	r5, #0
 80063de:	d1f7      	bne.n	80063d0 <__gethex+0xc4>
 80063e0:	7833      	ldrb	r3, [r6, #0]
 80063e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80063e6:	2b50      	cmp	r3, #80	; 0x50
 80063e8:	d13b      	bne.n	8006462 <__gethex+0x156>
 80063ea:	7873      	ldrb	r3, [r6, #1]
 80063ec:	2b2b      	cmp	r3, #43	; 0x2b
 80063ee:	d02c      	beq.n	800644a <__gethex+0x13e>
 80063f0:	2b2d      	cmp	r3, #45	; 0x2d
 80063f2:	d02e      	beq.n	8006452 <__gethex+0x146>
 80063f4:	1c71      	adds	r1, r6, #1
 80063f6:	f04f 0900 	mov.w	r9, #0
 80063fa:	7808      	ldrb	r0, [r1, #0]
 80063fc:	f7ff ff71 	bl	80062e2 <__hexdig_fun>
 8006400:	1e43      	subs	r3, r0, #1
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b18      	cmp	r3, #24
 8006406:	d82c      	bhi.n	8006462 <__gethex+0x156>
 8006408:	f1a0 0210 	sub.w	r2, r0, #16
 800640c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006410:	f7ff ff67 	bl	80062e2 <__hexdig_fun>
 8006414:	1e43      	subs	r3, r0, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b18      	cmp	r3, #24
 800641a:	d91d      	bls.n	8006458 <__gethex+0x14c>
 800641c:	f1b9 0f00 	cmp.w	r9, #0
 8006420:	d000      	beq.n	8006424 <__gethex+0x118>
 8006422:	4252      	negs	r2, r2
 8006424:	4415      	add	r5, r2
 8006426:	f8cb 1000 	str.w	r1, [fp]
 800642a:	b1e4      	cbz	r4, 8006466 <__gethex+0x15a>
 800642c:	9b00      	ldr	r3, [sp, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	bf14      	ite	ne
 8006432:	2700      	movne	r7, #0
 8006434:	2706      	moveq	r7, #6
 8006436:	4638      	mov	r0, r7
 8006438:	b009      	add	sp, #36	; 0x24
 800643a:	ecbd 8b02 	vpop	{d8}
 800643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006442:	463e      	mov	r6, r7
 8006444:	4625      	mov	r5, r4
 8006446:	2401      	movs	r4, #1
 8006448:	e7ca      	b.n	80063e0 <__gethex+0xd4>
 800644a:	f04f 0900 	mov.w	r9, #0
 800644e:	1cb1      	adds	r1, r6, #2
 8006450:	e7d3      	b.n	80063fa <__gethex+0xee>
 8006452:	f04f 0901 	mov.w	r9, #1
 8006456:	e7fa      	b.n	800644e <__gethex+0x142>
 8006458:	230a      	movs	r3, #10
 800645a:	fb03 0202 	mla	r2, r3, r2, r0
 800645e:	3a10      	subs	r2, #16
 8006460:	e7d4      	b.n	800640c <__gethex+0x100>
 8006462:	4631      	mov	r1, r6
 8006464:	e7df      	b.n	8006426 <__gethex+0x11a>
 8006466:	1bf3      	subs	r3, r6, r7
 8006468:	3b01      	subs	r3, #1
 800646a:	4621      	mov	r1, r4
 800646c:	2b07      	cmp	r3, #7
 800646e:	dc0b      	bgt.n	8006488 <__gethex+0x17c>
 8006470:	ee18 0a10 	vmov	r0, s16
 8006474:	f000 fa74 	bl	8006960 <_Balloc>
 8006478:	4604      	mov	r4, r0
 800647a:	b940      	cbnz	r0, 800648e <__gethex+0x182>
 800647c:	4b5d      	ldr	r3, [pc, #372]	; (80065f4 <__gethex+0x2e8>)
 800647e:	4602      	mov	r2, r0
 8006480:	21de      	movs	r1, #222	; 0xde
 8006482:	485d      	ldr	r0, [pc, #372]	; (80065f8 <__gethex+0x2ec>)
 8006484:	f001 fad0 	bl	8007a28 <__assert_func>
 8006488:	3101      	adds	r1, #1
 800648a:	105b      	asrs	r3, r3, #1
 800648c:	e7ee      	b.n	800646c <__gethex+0x160>
 800648e:	f100 0914 	add.w	r9, r0, #20
 8006492:	f04f 0b00 	mov.w	fp, #0
 8006496:	f1ca 0301 	rsb	r3, sl, #1
 800649a:	f8cd 9008 	str.w	r9, [sp, #8]
 800649e:	f8cd b000 	str.w	fp, [sp]
 80064a2:	9306      	str	r3, [sp, #24]
 80064a4:	42b7      	cmp	r7, r6
 80064a6:	d340      	bcc.n	800652a <__gethex+0x21e>
 80064a8:	9802      	ldr	r0, [sp, #8]
 80064aa:	9b00      	ldr	r3, [sp, #0]
 80064ac:	f840 3b04 	str.w	r3, [r0], #4
 80064b0:	eba0 0009 	sub.w	r0, r0, r9
 80064b4:	1080      	asrs	r0, r0, #2
 80064b6:	0146      	lsls	r6, r0, #5
 80064b8:	6120      	str	r0, [r4, #16]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fb42 	bl	8006b44 <__hi0bits>
 80064c0:	1a30      	subs	r0, r6, r0
 80064c2:	f8d8 6000 	ldr.w	r6, [r8]
 80064c6:	42b0      	cmp	r0, r6
 80064c8:	dd63      	ble.n	8006592 <__gethex+0x286>
 80064ca:	1b87      	subs	r7, r0, r6
 80064cc:	4639      	mov	r1, r7
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 fee6 	bl	80072a0 <__any_on>
 80064d4:	4682      	mov	sl, r0
 80064d6:	b1a8      	cbz	r0, 8006504 <__gethex+0x1f8>
 80064d8:	1e7b      	subs	r3, r7, #1
 80064da:	1159      	asrs	r1, r3, #5
 80064dc:	f003 021f 	and.w	r2, r3, #31
 80064e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80064e4:	f04f 0a01 	mov.w	sl, #1
 80064e8:	fa0a f202 	lsl.w	r2, sl, r2
 80064ec:	420a      	tst	r2, r1
 80064ee:	d009      	beq.n	8006504 <__gethex+0x1f8>
 80064f0:	4553      	cmp	r3, sl
 80064f2:	dd05      	ble.n	8006500 <__gethex+0x1f4>
 80064f4:	1eb9      	subs	r1, r7, #2
 80064f6:	4620      	mov	r0, r4
 80064f8:	f000 fed2 	bl	80072a0 <__any_on>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d145      	bne.n	800658c <__gethex+0x280>
 8006500:	f04f 0a02 	mov.w	sl, #2
 8006504:	4639      	mov	r1, r7
 8006506:	4620      	mov	r0, r4
 8006508:	f7ff fe99 	bl	800623e <rshift>
 800650c:	443d      	add	r5, r7
 800650e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006512:	42ab      	cmp	r3, r5
 8006514:	da4c      	bge.n	80065b0 <__gethex+0x2a4>
 8006516:	ee18 0a10 	vmov	r0, s16
 800651a:	4621      	mov	r1, r4
 800651c:	f000 fa60 	bl	80069e0 <_Bfree>
 8006520:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006522:	2300      	movs	r3, #0
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	27a3      	movs	r7, #163	; 0xa3
 8006528:	e785      	b.n	8006436 <__gethex+0x12a>
 800652a:	1e73      	subs	r3, r6, #1
 800652c:	9a05      	ldr	r2, [sp, #20]
 800652e:	9303      	str	r3, [sp, #12]
 8006530:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006534:	4293      	cmp	r3, r2
 8006536:	d019      	beq.n	800656c <__gethex+0x260>
 8006538:	f1bb 0f20 	cmp.w	fp, #32
 800653c:	d107      	bne.n	800654e <__gethex+0x242>
 800653e:	9b02      	ldr	r3, [sp, #8]
 8006540:	9a00      	ldr	r2, [sp, #0]
 8006542:	f843 2b04 	str.w	r2, [r3], #4
 8006546:	9302      	str	r3, [sp, #8]
 8006548:	2300      	movs	r3, #0
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	469b      	mov	fp, r3
 800654e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006552:	f7ff fec6 	bl	80062e2 <__hexdig_fun>
 8006556:	9b00      	ldr	r3, [sp, #0]
 8006558:	f000 000f 	and.w	r0, r0, #15
 800655c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006560:	4303      	orrs	r3, r0
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	f10b 0b04 	add.w	fp, fp, #4
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	e00d      	b.n	8006588 <__gethex+0x27c>
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	9a06      	ldr	r2, [sp, #24]
 8006570:	4413      	add	r3, r2
 8006572:	42bb      	cmp	r3, r7
 8006574:	d3e0      	bcc.n	8006538 <__gethex+0x22c>
 8006576:	4618      	mov	r0, r3
 8006578:	9901      	ldr	r1, [sp, #4]
 800657a:	9307      	str	r3, [sp, #28]
 800657c:	4652      	mov	r2, sl
 800657e:	f001 f95e 	bl	800783e <strncmp>
 8006582:	9b07      	ldr	r3, [sp, #28]
 8006584:	2800      	cmp	r0, #0
 8006586:	d1d7      	bne.n	8006538 <__gethex+0x22c>
 8006588:	461e      	mov	r6, r3
 800658a:	e78b      	b.n	80064a4 <__gethex+0x198>
 800658c:	f04f 0a03 	mov.w	sl, #3
 8006590:	e7b8      	b.n	8006504 <__gethex+0x1f8>
 8006592:	da0a      	bge.n	80065aa <__gethex+0x29e>
 8006594:	1a37      	subs	r7, r6, r0
 8006596:	4621      	mov	r1, r4
 8006598:	ee18 0a10 	vmov	r0, s16
 800659c:	463a      	mov	r2, r7
 800659e:	f000 fc3b 	bl	8006e18 <__lshift>
 80065a2:	1bed      	subs	r5, r5, r7
 80065a4:	4604      	mov	r4, r0
 80065a6:	f100 0914 	add.w	r9, r0, #20
 80065aa:	f04f 0a00 	mov.w	sl, #0
 80065ae:	e7ae      	b.n	800650e <__gethex+0x202>
 80065b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80065b4:	42a8      	cmp	r0, r5
 80065b6:	dd72      	ble.n	800669e <__gethex+0x392>
 80065b8:	1b45      	subs	r5, r0, r5
 80065ba:	42ae      	cmp	r6, r5
 80065bc:	dc36      	bgt.n	800662c <__gethex+0x320>
 80065be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d02a      	beq.n	800661c <__gethex+0x310>
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d02c      	beq.n	8006624 <__gethex+0x318>
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d11c      	bne.n	8006608 <__gethex+0x2fc>
 80065ce:	42ae      	cmp	r6, r5
 80065d0:	d11a      	bne.n	8006608 <__gethex+0x2fc>
 80065d2:	2e01      	cmp	r6, #1
 80065d4:	d112      	bne.n	80065fc <__gethex+0x2f0>
 80065d6:	9a04      	ldr	r2, [sp, #16]
 80065d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	2301      	movs	r3, #1
 80065e0:	6123      	str	r3, [r4, #16]
 80065e2:	f8c9 3000 	str.w	r3, [r9]
 80065e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065e8:	2762      	movs	r7, #98	; 0x62
 80065ea:	601c      	str	r4, [r3, #0]
 80065ec:	e723      	b.n	8006436 <__gethex+0x12a>
 80065ee:	bf00      	nop
 80065f0:	080080d8 	.word	0x080080d8
 80065f4:	08007fff 	.word	0x08007fff
 80065f8:	08008070 	.word	0x08008070
 80065fc:	1e71      	subs	r1, r6, #1
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 fe4e 	bl	80072a0 <__any_on>
 8006604:	2800      	cmp	r0, #0
 8006606:	d1e6      	bne.n	80065d6 <__gethex+0x2ca>
 8006608:	ee18 0a10 	vmov	r0, s16
 800660c:	4621      	mov	r1, r4
 800660e:	f000 f9e7 	bl	80069e0 <_Bfree>
 8006612:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006614:	2300      	movs	r3, #0
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	2750      	movs	r7, #80	; 0x50
 800661a:	e70c      	b.n	8006436 <__gethex+0x12a>
 800661c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f2      	bne.n	8006608 <__gethex+0x2fc>
 8006622:	e7d8      	b.n	80065d6 <__gethex+0x2ca>
 8006624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1d5      	bne.n	80065d6 <__gethex+0x2ca>
 800662a:	e7ed      	b.n	8006608 <__gethex+0x2fc>
 800662c:	1e6f      	subs	r7, r5, #1
 800662e:	f1ba 0f00 	cmp.w	sl, #0
 8006632:	d131      	bne.n	8006698 <__gethex+0x38c>
 8006634:	b127      	cbz	r7, 8006640 <__gethex+0x334>
 8006636:	4639      	mov	r1, r7
 8006638:	4620      	mov	r0, r4
 800663a:	f000 fe31 	bl	80072a0 <__any_on>
 800663e:	4682      	mov	sl, r0
 8006640:	117b      	asrs	r3, r7, #5
 8006642:	2101      	movs	r1, #1
 8006644:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006648:	f007 071f 	and.w	r7, r7, #31
 800664c:	fa01 f707 	lsl.w	r7, r1, r7
 8006650:	421f      	tst	r7, r3
 8006652:	4629      	mov	r1, r5
 8006654:	4620      	mov	r0, r4
 8006656:	bf18      	it	ne
 8006658:	f04a 0a02 	orrne.w	sl, sl, #2
 800665c:	1b76      	subs	r6, r6, r5
 800665e:	f7ff fdee 	bl	800623e <rshift>
 8006662:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006666:	2702      	movs	r7, #2
 8006668:	f1ba 0f00 	cmp.w	sl, #0
 800666c:	d048      	beq.n	8006700 <__gethex+0x3f4>
 800666e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d015      	beq.n	80066a2 <__gethex+0x396>
 8006676:	2b03      	cmp	r3, #3
 8006678:	d017      	beq.n	80066aa <__gethex+0x39e>
 800667a:	2b01      	cmp	r3, #1
 800667c:	d109      	bne.n	8006692 <__gethex+0x386>
 800667e:	f01a 0f02 	tst.w	sl, #2
 8006682:	d006      	beq.n	8006692 <__gethex+0x386>
 8006684:	f8d9 0000 	ldr.w	r0, [r9]
 8006688:	ea4a 0a00 	orr.w	sl, sl, r0
 800668c:	f01a 0f01 	tst.w	sl, #1
 8006690:	d10e      	bne.n	80066b0 <__gethex+0x3a4>
 8006692:	f047 0710 	orr.w	r7, r7, #16
 8006696:	e033      	b.n	8006700 <__gethex+0x3f4>
 8006698:	f04f 0a01 	mov.w	sl, #1
 800669c:	e7d0      	b.n	8006640 <__gethex+0x334>
 800669e:	2701      	movs	r7, #1
 80066a0:	e7e2      	b.n	8006668 <__gethex+0x35c>
 80066a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066a4:	f1c3 0301 	rsb	r3, r3, #1
 80066a8:	9315      	str	r3, [sp, #84]	; 0x54
 80066aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f0      	beq.n	8006692 <__gethex+0x386>
 80066b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80066b4:	f104 0314 	add.w	r3, r4, #20
 80066b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80066bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80066c0:	f04f 0c00 	mov.w	ip, #0
 80066c4:	4618      	mov	r0, r3
 80066c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ca:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80066ce:	d01c      	beq.n	800670a <__gethex+0x3fe>
 80066d0:	3201      	adds	r2, #1
 80066d2:	6002      	str	r2, [r0, #0]
 80066d4:	2f02      	cmp	r7, #2
 80066d6:	f104 0314 	add.w	r3, r4, #20
 80066da:	d13f      	bne.n	800675c <__gethex+0x450>
 80066dc:	f8d8 2000 	ldr.w	r2, [r8]
 80066e0:	3a01      	subs	r2, #1
 80066e2:	42b2      	cmp	r2, r6
 80066e4:	d10a      	bne.n	80066fc <__gethex+0x3f0>
 80066e6:	1171      	asrs	r1, r6, #5
 80066e8:	2201      	movs	r2, #1
 80066ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066ee:	f006 061f 	and.w	r6, r6, #31
 80066f2:	fa02 f606 	lsl.w	r6, r2, r6
 80066f6:	421e      	tst	r6, r3
 80066f8:	bf18      	it	ne
 80066fa:	4617      	movne	r7, r2
 80066fc:	f047 0720 	orr.w	r7, r7, #32
 8006700:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006702:	601c      	str	r4, [r3, #0]
 8006704:	9b04      	ldr	r3, [sp, #16]
 8006706:	601d      	str	r5, [r3, #0]
 8006708:	e695      	b.n	8006436 <__gethex+0x12a>
 800670a:	4299      	cmp	r1, r3
 800670c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006710:	d8d8      	bhi.n	80066c4 <__gethex+0x3b8>
 8006712:	68a3      	ldr	r3, [r4, #8]
 8006714:	459b      	cmp	fp, r3
 8006716:	db19      	blt.n	800674c <__gethex+0x440>
 8006718:	6861      	ldr	r1, [r4, #4]
 800671a:	ee18 0a10 	vmov	r0, s16
 800671e:	3101      	adds	r1, #1
 8006720:	f000 f91e 	bl	8006960 <_Balloc>
 8006724:	4681      	mov	r9, r0
 8006726:	b918      	cbnz	r0, 8006730 <__gethex+0x424>
 8006728:	4b1a      	ldr	r3, [pc, #104]	; (8006794 <__gethex+0x488>)
 800672a:	4602      	mov	r2, r0
 800672c:	2184      	movs	r1, #132	; 0x84
 800672e:	e6a8      	b.n	8006482 <__gethex+0x176>
 8006730:	6922      	ldr	r2, [r4, #16]
 8006732:	3202      	adds	r2, #2
 8006734:	f104 010c 	add.w	r1, r4, #12
 8006738:	0092      	lsls	r2, r2, #2
 800673a:	300c      	adds	r0, #12
 800673c:	f7fd fb46 	bl	8003dcc <memcpy>
 8006740:	4621      	mov	r1, r4
 8006742:	ee18 0a10 	vmov	r0, s16
 8006746:	f000 f94b 	bl	80069e0 <_Bfree>
 800674a:	464c      	mov	r4, r9
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006754:	6122      	str	r2, [r4, #16]
 8006756:	2201      	movs	r2, #1
 8006758:	615a      	str	r2, [r3, #20]
 800675a:	e7bb      	b.n	80066d4 <__gethex+0x3c8>
 800675c:	6922      	ldr	r2, [r4, #16]
 800675e:	455a      	cmp	r2, fp
 8006760:	dd0b      	ble.n	800677a <__gethex+0x46e>
 8006762:	2101      	movs	r1, #1
 8006764:	4620      	mov	r0, r4
 8006766:	f7ff fd6a 	bl	800623e <rshift>
 800676a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800676e:	3501      	adds	r5, #1
 8006770:	42ab      	cmp	r3, r5
 8006772:	f6ff aed0 	blt.w	8006516 <__gethex+0x20a>
 8006776:	2701      	movs	r7, #1
 8006778:	e7c0      	b.n	80066fc <__gethex+0x3f0>
 800677a:	f016 061f 	ands.w	r6, r6, #31
 800677e:	d0fa      	beq.n	8006776 <__gethex+0x46a>
 8006780:	4453      	add	r3, sl
 8006782:	f1c6 0620 	rsb	r6, r6, #32
 8006786:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800678a:	f000 f9db 	bl	8006b44 <__hi0bits>
 800678e:	42b0      	cmp	r0, r6
 8006790:	dbe7      	blt.n	8006762 <__gethex+0x456>
 8006792:	e7f0      	b.n	8006776 <__gethex+0x46a>
 8006794:	08007fff 	.word	0x08007fff

08006798 <L_shift>:
 8006798:	f1c2 0208 	rsb	r2, r2, #8
 800679c:	0092      	lsls	r2, r2, #2
 800679e:	b570      	push	{r4, r5, r6, lr}
 80067a0:	f1c2 0620 	rsb	r6, r2, #32
 80067a4:	6843      	ldr	r3, [r0, #4]
 80067a6:	6804      	ldr	r4, [r0, #0]
 80067a8:	fa03 f506 	lsl.w	r5, r3, r6
 80067ac:	432c      	orrs	r4, r5
 80067ae:	40d3      	lsrs	r3, r2
 80067b0:	6004      	str	r4, [r0, #0]
 80067b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80067b6:	4288      	cmp	r0, r1
 80067b8:	d3f4      	bcc.n	80067a4 <L_shift+0xc>
 80067ba:	bd70      	pop	{r4, r5, r6, pc}

080067bc <__match>:
 80067bc:	b530      	push	{r4, r5, lr}
 80067be:	6803      	ldr	r3, [r0, #0]
 80067c0:	3301      	adds	r3, #1
 80067c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067c6:	b914      	cbnz	r4, 80067ce <__match+0x12>
 80067c8:	6003      	str	r3, [r0, #0]
 80067ca:	2001      	movs	r0, #1
 80067cc:	bd30      	pop	{r4, r5, pc}
 80067ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80067d6:	2d19      	cmp	r5, #25
 80067d8:	bf98      	it	ls
 80067da:	3220      	addls	r2, #32
 80067dc:	42a2      	cmp	r2, r4
 80067de:	d0f0      	beq.n	80067c2 <__match+0x6>
 80067e0:	2000      	movs	r0, #0
 80067e2:	e7f3      	b.n	80067cc <__match+0x10>

080067e4 <__hexnan>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	680b      	ldr	r3, [r1, #0]
 80067ea:	115e      	asrs	r6, r3, #5
 80067ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80067f0:	f013 031f 	ands.w	r3, r3, #31
 80067f4:	b087      	sub	sp, #28
 80067f6:	bf18      	it	ne
 80067f8:	3604      	addne	r6, #4
 80067fa:	2500      	movs	r5, #0
 80067fc:	1f37      	subs	r7, r6, #4
 80067fe:	4690      	mov	r8, r2
 8006800:	6802      	ldr	r2, [r0, #0]
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	4682      	mov	sl, r0
 8006806:	f846 5c04 	str.w	r5, [r6, #-4]
 800680a:	46b9      	mov	r9, r7
 800680c:	463c      	mov	r4, r7
 800680e:	9502      	str	r5, [sp, #8]
 8006810:	46ab      	mov	fp, r5
 8006812:	7851      	ldrb	r1, [r2, #1]
 8006814:	1c53      	adds	r3, r2, #1
 8006816:	9303      	str	r3, [sp, #12]
 8006818:	b341      	cbz	r1, 800686c <__hexnan+0x88>
 800681a:	4608      	mov	r0, r1
 800681c:	9205      	str	r2, [sp, #20]
 800681e:	9104      	str	r1, [sp, #16]
 8006820:	f7ff fd5f 	bl	80062e2 <__hexdig_fun>
 8006824:	2800      	cmp	r0, #0
 8006826:	d14f      	bne.n	80068c8 <__hexnan+0xe4>
 8006828:	9904      	ldr	r1, [sp, #16]
 800682a:	9a05      	ldr	r2, [sp, #20]
 800682c:	2920      	cmp	r1, #32
 800682e:	d818      	bhi.n	8006862 <__hexnan+0x7e>
 8006830:	9b02      	ldr	r3, [sp, #8]
 8006832:	459b      	cmp	fp, r3
 8006834:	dd13      	ble.n	800685e <__hexnan+0x7a>
 8006836:	454c      	cmp	r4, r9
 8006838:	d206      	bcs.n	8006848 <__hexnan+0x64>
 800683a:	2d07      	cmp	r5, #7
 800683c:	dc04      	bgt.n	8006848 <__hexnan+0x64>
 800683e:	462a      	mov	r2, r5
 8006840:	4649      	mov	r1, r9
 8006842:	4620      	mov	r0, r4
 8006844:	f7ff ffa8 	bl	8006798 <L_shift>
 8006848:	4544      	cmp	r4, r8
 800684a:	d950      	bls.n	80068ee <__hexnan+0x10a>
 800684c:	2300      	movs	r3, #0
 800684e:	f1a4 0904 	sub.w	r9, r4, #4
 8006852:	f844 3c04 	str.w	r3, [r4, #-4]
 8006856:	f8cd b008 	str.w	fp, [sp, #8]
 800685a:	464c      	mov	r4, r9
 800685c:	461d      	mov	r5, r3
 800685e:	9a03      	ldr	r2, [sp, #12]
 8006860:	e7d7      	b.n	8006812 <__hexnan+0x2e>
 8006862:	2929      	cmp	r1, #41	; 0x29
 8006864:	d156      	bne.n	8006914 <__hexnan+0x130>
 8006866:	3202      	adds	r2, #2
 8006868:	f8ca 2000 	str.w	r2, [sl]
 800686c:	f1bb 0f00 	cmp.w	fp, #0
 8006870:	d050      	beq.n	8006914 <__hexnan+0x130>
 8006872:	454c      	cmp	r4, r9
 8006874:	d206      	bcs.n	8006884 <__hexnan+0xa0>
 8006876:	2d07      	cmp	r5, #7
 8006878:	dc04      	bgt.n	8006884 <__hexnan+0xa0>
 800687a:	462a      	mov	r2, r5
 800687c:	4649      	mov	r1, r9
 800687e:	4620      	mov	r0, r4
 8006880:	f7ff ff8a 	bl	8006798 <L_shift>
 8006884:	4544      	cmp	r4, r8
 8006886:	d934      	bls.n	80068f2 <__hexnan+0x10e>
 8006888:	f1a8 0204 	sub.w	r2, r8, #4
 800688c:	4623      	mov	r3, r4
 800688e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006892:	f842 1f04 	str.w	r1, [r2, #4]!
 8006896:	429f      	cmp	r7, r3
 8006898:	d2f9      	bcs.n	800688e <__hexnan+0xaa>
 800689a:	1b3b      	subs	r3, r7, r4
 800689c:	f023 0303 	bic.w	r3, r3, #3
 80068a0:	3304      	adds	r3, #4
 80068a2:	3401      	adds	r4, #1
 80068a4:	3e03      	subs	r6, #3
 80068a6:	42b4      	cmp	r4, r6
 80068a8:	bf88      	it	hi
 80068aa:	2304      	movhi	r3, #4
 80068ac:	4443      	add	r3, r8
 80068ae:	2200      	movs	r2, #0
 80068b0:	f843 2b04 	str.w	r2, [r3], #4
 80068b4:	429f      	cmp	r7, r3
 80068b6:	d2fb      	bcs.n	80068b0 <__hexnan+0xcc>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	b91b      	cbnz	r3, 80068c4 <__hexnan+0xe0>
 80068bc:	4547      	cmp	r7, r8
 80068be:	d127      	bne.n	8006910 <__hexnan+0x12c>
 80068c0:	2301      	movs	r3, #1
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	2005      	movs	r0, #5
 80068c6:	e026      	b.n	8006916 <__hexnan+0x132>
 80068c8:	3501      	adds	r5, #1
 80068ca:	2d08      	cmp	r5, #8
 80068cc:	f10b 0b01 	add.w	fp, fp, #1
 80068d0:	dd06      	ble.n	80068e0 <__hexnan+0xfc>
 80068d2:	4544      	cmp	r4, r8
 80068d4:	d9c3      	bls.n	800685e <__hexnan+0x7a>
 80068d6:	2300      	movs	r3, #0
 80068d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80068dc:	2501      	movs	r5, #1
 80068de:	3c04      	subs	r4, #4
 80068e0:	6822      	ldr	r2, [r4, #0]
 80068e2:	f000 000f 	and.w	r0, r0, #15
 80068e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80068ea:	6022      	str	r2, [r4, #0]
 80068ec:	e7b7      	b.n	800685e <__hexnan+0x7a>
 80068ee:	2508      	movs	r5, #8
 80068f0:	e7b5      	b.n	800685e <__hexnan+0x7a>
 80068f2:	9b01      	ldr	r3, [sp, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0df      	beq.n	80068b8 <__hexnan+0xd4>
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068fc:	f1c3 0320 	rsb	r3, r3, #32
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
 8006904:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006908:	401a      	ands	r2, r3
 800690a:	f846 2c04 	str.w	r2, [r6, #-4]
 800690e:	e7d3      	b.n	80068b8 <__hexnan+0xd4>
 8006910:	3f04      	subs	r7, #4
 8006912:	e7d1      	b.n	80068b8 <__hexnan+0xd4>
 8006914:	2004      	movs	r0, #4
 8006916:	b007      	add	sp, #28
 8006918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800691c <_localeconv_r>:
 800691c:	4800      	ldr	r0, [pc, #0]	; (8006920 <_localeconv_r+0x4>)
 800691e:	4770      	bx	lr
 8006920:	20000164 	.word	0x20000164

08006924 <__retarget_lock_init_recursive>:
 8006924:	4770      	bx	lr

08006926 <__retarget_lock_acquire_recursive>:
 8006926:	4770      	bx	lr

08006928 <__retarget_lock_release_recursive>:
 8006928:	4770      	bx	lr
	...

0800692c <malloc>:
 800692c:	4b02      	ldr	r3, [pc, #8]	; (8006938 <malloc+0xc>)
 800692e:	4601      	mov	r1, r0
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	f000 bd59 	b.w	80073e8 <_malloc_r>
 8006936:	bf00      	nop
 8006938:	2000000c 	.word	0x2000000c

0800693c <__ascii_mbtowc>:
 800693c:	b082      	sub	sp, #8
 800693e:	b901      	cbnz	r1, 8006942 <__ascii_mbtowc+0x6>
 8006940:	a901      	add	r1, sp, #4
 8006942:	b142      	cbz	r2, 8006956 <__ascii_mbtowc+0x1a>
 8006944:	b14b      	cbz	r3, 800695a <__ascii_mbtowc+0x1e>
 8006946:	7813      	ldrb	r3, [r2, #0]
 8006948:	600b      	str	r3, [r1, #0]
 800694a:	7812      	ldrb	r2, [r2, #0]
 800694c:	1e10      	subs	r0, r2, #0
 800694e:	bf18      	it	ne
 8006950:	2001      	movne	r0, #1
 8006952:	b002      	add	sp, #8
 8006954:	4770      	bx	lr
 8006956:	4610      	mov	r0, r2
 8006958:	e7fb      	b.n	8006952 <__ascii_mbtowc+0x16>
 800695a:	f06f 0001 	mvn.w	r0, #1
 800695e:	e7f8      	b.n	8006952 <__ascii_mbtowc+0x16>

08006960 <_Balloc>:
 8006960:	b570      	push	{r4, r5, r6, lr}
 8006962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006964:	4604      	mov	r4, r0
 8006966:	460d      	mov	r5, r1
 8006968:	b976      	cbnz	r6, 8006988 <_Balloc+0x28>
 800696a:	2010      	movs	r0, #16
 800696c:	f7ff ffde 	bl	800692c <malloc>
 8006970:	4602      	mov	r2, r0
 8006972:	6260      	str	r0, [r4, #36]	; 0x24
 8006974:	b920      	cbnz	r0, 8006980 <_Balloc+0x20>
 8006976:	4b18      	ldr	r3, [pc, #96]	; (80069d8 <_Balloc+0x78>)
 8006978:	4818      	ldr	r0, [pc, #96]	; (80069dc <_Balloc+0x7c>)
 800697a:	2166      	movs	r1, #102	; 0x66
 800697c:	f001 f854 	bl	8007a28 <__assert_func>
 8006980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006984:	6006      	str	r6, [r0, #0]
 8006986:	60c6      	str	r6, [r0, #12]
 8006988:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800698a:	68f3      	ldr	r3, [r6, #12]
 800698c:	b183      	cbz	r3, 80069b0 <_Balloc+0x50>
 800698e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006996:	b9b8      	cbnz	r0, 80069c8 <_Balloc+0x68>
 8006998:	2101      	movs	r1, #1
 800699a:	fa01 f605 	lsl.w	r6, r1, r5
 800699e:	1d72      	adds	r2, r6, #5
 80069a0:	0092      	lsls	r2, r2, #2
 80069a2:	4620      	mov	r0, r4
 80069a4:	f000 fc9d 	bl	80072e2 <_calloc_r>
 80069a8:	b160      	cbz	r0, 80069c4 <_Balloc+0x64>
 80069aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069ae:	e00e      	b.n	80069ce <_Balloc+0x6e>
 80069b0:	2221      	movs	r2, #33	; 0x21
 80069b2:	2104      	movs	r1, #4
 80069b4:	4620      	mov	r0, r4
 80069b6:	f000 fc94 	bl	80072e2 <_calloc_r>
 80069ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069bc:	60f0      	str	r0, [r6, #12]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e4      	bne.n	800698e <_Balloc+0x2e>
 80069c4:	2000      	movs	r0, #0
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	6802      	ldr	r2, [r0, #0]
 80069ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069ce:	2300      	movs	r3, #0
 80069d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069d4:	e7f7      	b.n	80069c6 <_Balloc+0x66>
 80069d6:	bf00      	nop
 80069d8:	08007f8d 	.word	0x08007f8d
 80069dc:	080080ec 	.word	0x080080ec

080069e0 <_Bfree>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069e4:	4605      	mov	r5, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	b976      	cbnz	r6, 8006a08 <_Bfree+0x28>
 80069ea:	2010      	movs	r0, #16
 80069ec:	f7ff ff9e 	bl	800692c <malloc>
 80069f0:	4602      	mov	r2, r0
 80069f2:	6268      	str	r0, [r5, #36]	; 0x24
 80069f4:	b920      	cbnz	r0, 8006a00 <_Bfree+0x20>
 80069f6:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <_Bfree+0x3c>)
 80069f8:	4809      	ldr	r0, [pc, #36]	; (8006a20 <_Bfree+0x40>)
 80069fa:	218a      	movs	r1, #138	; 0x8a
 80069fc:	f001 f814 	bl	8007a28 <__assert_func>
 8006a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a04:	6006      	str	r6, [r0, #0]
 8006a06:	60c6      	str	r6, [r0, #12]
 8006a08:	b13c      	cbz	r4, 8006a1a <_Bfree+0x3a>
 8006a0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a0c:	6862      	ldr	r2, [r4, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a14:	6021      	str	r1, [r4, #0]
 8006a16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	08007f8d 	.word	0x08007f8d
 8006a20:	080080ec 	.word	0x080080ec

08006a24 <__multadd>:
 8006a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a28:	690d      	ldr	r5, [r1, #16]
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	461e      	mov	r6, r3
 8006a30:	f101 0c14 	add.w	ip, r1, #20
 8006a34:	2000      	movs	r0, #0
 8006a36:	f8dc 3000 	ldr.w	r3, [ip]
 8006a3a:	b299      	uxth	r1, r3
 8006a3c:	fb02 6101 	mla	r1, r2, r1, r6
 8006a40:	0c1e      	lsrs	r6, r3, #16
 8006a42:	0c0b      	lsrs	r3, r1, #16
 8006a44:	fb02 3306 	mla	r3, r2, r6, r3
 8006a48:	b289      	uxth	r1, r1
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a50:	4285      	cmp	r5, r0
 8006a52:	f84c 1b04 	str.w	r1, [ip], #4
 8006a56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a5a:	dcec      	bgt.n	8006a36 <__multadd+0x12>
 8006a5c:	b30e      	cbz	r6, 8006aa2 <__multadd+0x7e>
 8006a5e:	68a3      	ldr	r3, [r4, #8]
 8006a60:	42ab      	cmp	r3, r5
 8006a62:	dc19      	bgt.n	8006a98 <__multadd+0x74>
 8006a64:	6861      	ldr	r1, [r4, #4]
 8006a66:	4638      	mov	r0, r7
 8006a68:	3101      	adds	r1, #1
 8006a6a:	f7ff ff79 	bl	8006960 <_Balloc>
 8006a6e:	4680      	mov	r8, r0
 8006a70:	b928      	cbnz	r0, 8006a7e <__multadd+0x5a>
 8006a72:	4602      	mov	r2, r0
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <__multadd+0x84>)
 8006a76:	480d      	ldr	r0, [pc, #52]	; (8006aac <__multadd+0x88>)
 8006a78:	21b5      	movs	r1, #181	; 0xb5
 8006a7a:	f000 ffd5 	bl	8007a28 <__assert_func>
 8006a7e:	6922      	ldr	r2, [r4, #16]
 8006a80:	3202      	adds	r2, #2
 8006a82:	f104 010c 	add.w	r1, r4, #12
 8006a86:	0092      	lsls	r2, r2, #2
 8006a88:	300c      	adds	r0, #12
 8006a8a:	f7fd f99f 	bl	8003dcc <memcpy>
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4638      	mov	r0, r7
 8006a92:	f7ff ffa5 	bl	80069e0 <_Bfree>
 8006a96:	4644      	mov	r4, r8
 8006a98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a9c:	3501      	adds	r5, #1
 8006a9e:	615e      	str	r6, [r3, #20]
 8006aa0:	6125      	str	r5, [r4, #16]
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa8:	08007fff 	.word	0x08007fff
 8006aac:	080080ec 	.word	0x080080ec

08006ab0 <__s2b>:
 8006ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	4615      	mov	r5, r2
 8006ab8:	461f      	mov	r7, r3
 8006aba:	2209      	movs	r2, #9
 8006abc:	3308      	adds	r3, #8
 8006abe:	4606      	mov	r6, r0
 8006ac0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	db09      	blt.n	8006ae0 <__s2b+0x30>
 8006acc:	4630      	mov	r0, r6
 8006ace:	f7ff ff47 	bl	8006960 <_Balloc>
 8006ad2:	b940      	cbnz	r0, 8006ae6 <__s2b+0x36>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	4b19      	ldr	r3, [pc, #100]	; (8006b3c <__s2b+0x8c>)
 8006ad8:	4819      	ldr	r0, [pc, #100]	; (8006b40 <__s2b+0x90>)
 8006ada:	21ce      	movs	r1, #206	; 0xce
 8006adc:	f000 ffa4 	bl	8007a28 <__assert_func>
 8006ae0:	0052      	lsls	r2, r2, #1
 8006ae2:	3101      	adds	r1, #1
 8006ae4:	e7f0      	b.n	8006ac8 <__s2b+0x18>
 8006ae6:	9b08      	ldr	r3, [sp, #32]
 8006ae8:	6143      	str	r3, [r0, #20]
 8006aea:	2d09      	cmp	r5, #9
 8006aec:	f04f 0301 	mov.w	r3, #1
 8006af0:	6103      	str	r3, [r0, #16]
 8006af2:	dd16      	ble.n	8006b22 <__s2b+0x72>
 8006af4:	f104 0909 	add.w	r9, r4, #9
 8006af8:	46c8      	mov	r8, r9
 8006afa:	442c      	add	r4, r5
 8006afc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006b00:	4601      	mov	r1, r0
 8006b02:	3b30      	subs	r3, #48	; 0x30
 8006b04:	220a      	movs	r2, #10
 8006b06:	4630      	mov	r0, r6
 8006b08:	f7ff ff8c 	bl	8006a24 <__multadd>
 8006b0c:	45a0      	cmp	r8, r4
 8006b0e:	d1f5      	bne.n	8006afc <__s2b+0x4c>
 8006b10:	f1a5 0408 	sub.w	r4, r5, #8
 8006b14:	444c      	add	r4, r9
 8006b16:	1b2d      	subs	r5, r5, r4
 8006b18:	1963      	adds	r3, r4, r5
 8006b1a:	42bb      	cmp	r3, r7
 8006b1c:	db04      	blt.n	8006b28 <__s2b+0x78>
 8006b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b22:	340a      	adds	r4, #10
 8006b24:	2509      	movs	r5, #9
 8006b26:	e7f6      	b.n	8006b16 <__s2b+0x66>
 8006b28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b2c:	4601      	mov	r1, r0
 8006b2e:	3b30      	subs	r3, #48	; 0x30
 8006b30:	220a      	movs	r2, #10
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7ff ff76 	bl	8006a24 <__multadd>
 8006b38:	e7ee      	b.n	8006b18 <__s2b+0x68>
 8006b3a:	bf00      	nop
 8006b3c:	08007fff 	.word	0x08007fff
 8006b40:	080080ec 	.word	0x080080ec

08006b44 <__hi0bits>:
 8006b44:	0c03      	lsrs	r3, r0, #16
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	b9d3      	cbnz	r3, 8006b80 <__hi0bits+0x3c>
 8006b4a:	0400      	lsls	r0, r0, #16
 8006b4c:	2310      	movs	r3, #16
 8006b4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b52:	bf04      	itt	eq
 8006b54:	0200      	lsleq	r0, r0, #8
 8006b56:	3308      	addeq	r3, #8
 8006b58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b5c:	bf04      	itt	eq
 8006b5e:	0100      	lsleq	r0, r0, #4
 8006b60:	3304      	addeq	r3, #4
 8006b62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b66:	bf04      	itt	eq
 8006b68:	0080      	lsleq	r0, r0, #2
 8006b6a:	3302      	addeq	r3, #2
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	db05      	blt.n	8006b7c <__hi0bits+0x38>
 8006b70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b74:	f103 0301 	add.w	r3, r3, #1
 8006b78:	bf08      	it	eq
 8006b7a:	2320      	moveq	r3, #32
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	4770      	bx	lr
 8006b80:	2300      	movs	r3, #0
 8006b82:	e7e4      	b.n	8006b4e <__hi0bits+0xa>

08006b84 <__lo0bits>:
 8006b84:	6803      	ldr	r3, [r0, #0]
 8006b86:	f013 0207 	ands.w	r2, r3, #7
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	d00b      	beq.n	8006ba6 <__lo0bits+0x22>
 8006b8e:	07da      	lsls	r2, r3, #31
 8006b90:	d423      	bmi.n	8006bda <__lo0bits+0x56>
 8006b92:	0798      	lsls	r0, r3, #30
 8006b94:	bf49      	itett	mi
 8006b96:	085b      	lsrmi	r3, r3, #1
 8006b98:	089b      	lsrpl	r3, r3, #2
 8006b9a:	2001      	movmi	r0, #1
 8006b9c:	600b      	strmi	r3, [r1, #0]
 8006b9e:	bf5c      	itt	pl
 8006ba0:	600b      	strpl	r3, [r1, #0]
 8006ba2:	2002      	movpl	r0, #2
 8006ba4:	4770      	bx	lr
 8006ba6:	b298      	uxth	r0, r3
 8006ba8:	b9a8      	cbnz	r0, 8006bd6 <__lo0bits+0x52>
 8006baa:	0c1b      	lsrs	r3, r3, #16
 8006bac:	2010      	movs	r0, #16
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	b90a      	cbnz	r2, 8006bb6 <__lo0bits+0x32>
 8006bb2:	3008      	adds	r0, #8
 8006bb4:	0a1b      	lsrs	r3, r3, #8
 8006bb6:	071a      	lsls	r2, r3, #28
 8006bb8:	bf04      	itt	eq
 8006bba:	091b      	lsreq	r3, r3, #4
 8006bbc:	3004      	addeq	r0, #4
 8006bbe:	079a      	lsls	r2, r3, #30
 8006bc0:	bf04      	itt	eq
 8006bc2:	089b      	lsreq	r3, r3, #2
 8006bc4:	3002      	addeq	r0, #2
 8006bc6:	07da      	lsls	r2, r3, #31
 8006bc8:	d403      	bmi.n	8006bd2 <__lo0bits+0x4e>
 8006bca:	085b      	lsrs	r3, r3, #1
 8006bcc:	f100 0001 	add.w	r0, r0, #1
 8006bd0:	d005      	beq.n	8006bde <__lo0bits+0x5a>
 8006bd2:	600b      	str	r3, [r1, #0]
 8006bd4:	4770      	bx	lr
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	e7e9      	b.n	8006bae <__lo0bits+0x2a>
 8006bda:	2000      	movs	r0, #0
 8006bdc:	4770      	bx	lr
 8006bde:	2020      	movs	r0, #32
 8006be0:	4770      	bx	lr
	...

08006be4 <__i2b>:
 8006be4:	b510      	push	{r4, lr}
 8006be6:	460c      	mov	r4, r1
 8006be8:	2101      	movs	r1, #1
 8006bea:	f7ff feb9 	bl	8006960 <_Balloc>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	b928      	cbnz	r0, 8006bfe <__i2b+0x1a>
 8006bf2:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <__i2b+0x24>)
 8006bf4:	4805      	ldr	r0, [pc, #20]	; (8006c0c <__i2b+0x28>)
 8006bf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006bfa:	f000 ff15 	bl	8007a28 <__assert_func>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	6144      	str	r4, [r0, #20]
 8006c02:	6103      	str	r3, [r0, #16]
 8006c04:	bd10      	pop	{r4, pc}
 8006c06:	bf00      	nop
 8006c08:	08007fff 	.word	0x08007fff
 8006c0c:	080080ec 	.word	0x080080ec

08006c10 <__multiply>:
 8006c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c14:	4691      	mov	r9, r2
 8006c16:	690a      	ldr	r2, [r1, #16]
 8006c18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	bfb8      	it	lt
 8006c20:	460b      	movlt	r3, r1
 8006c22:	460c      	mov	r4, r1
 8006c24:	bfbc      	itt	lt
 8006c26:	464c      	movlt	r4, r9
 8006c28:	4699      	movlt	r9, r3
 8006c2a:	6927      	ldr	r7, [r4, #16]
 8006c2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c30:	68a3      	ldr	r3, [r4, #8]
 8006c32:	6861      	ldr	r1, [r4, #4]
 8006c34:	eb07 060a 	add.w	r6, r7, sl
 8006c38:	42b3      	cmp	r3, r6
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	bfb8      	it	lt
 8006c3e:	3101      	addlt	r1, #1
 8006c40:	f7ff fe8e 	bl	8006960 <_Balloc>
 8006c44:	b930      	cbnz	r0, 8006c54 <__multiply+0x44>
 8006c46:	4602      	mov	r2, r0
 8006c48:	4b44      	ldr	r3, [pc, #272]	; (8006d5c <__multiply+0x14c>)
 8006c4a:	4845      	ldr	r0, [pc, #276]	; (8006d60 <__multiply+0x150>)
 8006c4c:	f240 115d 	movw	r1, #349	; 0x15d
 8006c50:	f000 feea 	bl	8007a28 <__assert_func>
 8006c54:	f100 0514 	add.w	r5, r0, #20
 8006c58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c5c:	462b      	mov	r3, r5
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4543      	cmp	r3, r8
 8006c62:	d321      	bcc.n	8006ca8 <__multiply+0x98>
 8006c64:	f104 0314 	add.w	r3, r4, #20
 8006c68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c6c:	f109 0314 	add.w	r3, r9, #20
 8006c70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c74:	9202      	str	r2, [sp, #8]
 8006c76:	1b3a      	subs	r2, r7, r4
 8006c78:	3a15      	subs	r2, #21
 8006c7a:	f022 0203 	bic.w	r2, r2, #3
 8006c7e:	3204      	adds	r2, #4
 8006c80:	f104 0115 	add.w	r1, r4, #21
 8006c84:	428f      	cmp	r7, r1
 8006c86:	bf38      	it	cc
 8006c88:	2204      	movcc	r2, #4
 8006c8a:	9201      	str	r2, [sp, #4]
 8006c8c:	9a02      	ldr	r2, [sp, #8]
 8006c8e:	9303      	str	r3, [sp, #12]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d80c      	bhi.n	8006cae <__multiply+0x9e>
 8006c94:	2e00      	cmp	r6, #0
 8006c96:	dd03      	ble.n	8006ca0 <__multiply+0x90>
 8006c98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d05a      	beq.n	8006d56 <__multiply+0x146>
 8006ca0:	6106      	str	r6, [r0, #16]
 8006ca2:	b005      	add	sp, #20
 8006ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca8:	f843 2b04 	str.w	r2, [r3], #4
 8006cac:	e7d8      	b.n	8006c60 <__multiply+0x50>
 8006cae:	f8b3 a000 	ldrh.w	sl, [r3]
 8006cb2:	f1ba 0f00 	cmp.w	sl, #0
 8006cb6:	d024      	beq.n	8006d02 <__multiply+0xf2>
 8006cb8:	f104 0e14 	add.w	lr, r4, #20
 8006cbc:	46a9      	mov	r9, r5
 8006cbe:	f04f 0c00 	mov.w	ip, #0
 8006cc2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006cc6:	f8d9 1000 	ldr.w	r1, [r9]
 8006cca:	fa1f fb82 	uxth.w	fp, r2
 8006cce:	b289      	uxth	r1, r1
 8006cd0:	fb0a 110b 	mla	r1, sl, fp, r1
 8006cd4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006cd8:	f8d9 2000 	ldr.w	r2, [r9]
 8006cdc:	4461      	add	r1, ip
 8006cde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ce2:	fb0a c20b 	mla	r2, sl, fp, ip
 8006ce6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006cea:	b289      	uxth	r1, r1
 8006cec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cf0:	4577      	cmp	r7, lr
 8006cf2:	f849 1b04 	str.w	r1, [r9], #4
 8006cf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cfa:	d8e2      	bhi.n	8006cc2 <__multiply+0xb2>
 8006cfc:	9a01      	ldr	r2, [sp, #4]
 8006cfe:	f845 c002 	str.w	ip, [r5, r2]
 8006d02:	9a03      	ldr	r2, [sp, #12]
 8006d04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	f1b9 0f00 	cmp.w	r9, #0
 8006d0e:	d020      	beq.n	8006d52 <__multiply+0x142>
 8006d10:	6829      	ldr	r1, [r5, #0]
 8006d12:	f104 0c14 	add.w	ip, r4, #20
 8006d16:	46ae      	mov	lr, r5
 8006d18:	f04f 0a00 	mov.w	sl, #0
 8006d1c:	f8bc b000 	ldrh.w	fp, [ip]
 8006d20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d24:	fb09 220b 	mla	r2, r9, fp, r2
 8006d28:	4492      	add	sl, r2
 8006d2a:	b289      	uxth	r1, r1
 8006d2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d30:	f84e 1b04 	str.w	r1, [lr], #4
 8006d34:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d38:	f8be 1000 	ldrh.w	r1, [lr]
 8006d3c:	0c12      	lsrs	r2, r2, #16
 8006d3e:	fb09 1102 	mla	r1, r9, r2, r1
 8006d42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d46:	4567      	cmp	r7, ip
 8006d48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d4c:	d8e6      	bhi.n	8006d1c <__multiply+0x10c>
 8006d4e:	9a01      	ldr	r2, [sp, #4]
 8006d50:	50a9      	str	r1, [r5, r2]
 8006d52:	3504      	adds	r5, #4
 8006d54:	e79a      	b.n	8006c8c <__multiply+0x7c>
 8006d56:	3e01      	subs	r6, #1
 8006d58:	e79c      	b.n	8006c94 <__multiply+0x84>
 8006d5a:	bf00      	nop
 8006d5c:	08007fff 	.word	0x08007fff
 8006d60:	080080ec 	.word	0x080080ec

08006d64 <__pow5mult>:
 8006d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d68:	4615      	mov	r5, r2
 8006d6a:	f012 0203 	ands.w	r2, r2, #3
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460f      	mov	r7, r1
 8006d72:	d007      	beq.n	8006d84 <__pow5mult+0x20>
 8006d74:	4c25      	ldr	r4, [pc, #148]	; (8006e0c <__pow5mult+0xa8>)
 8006d76:	3a01      	subs	r2, #1
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d7e:	f7ff fe51 	bl	8006a24 <__multadd>
 8006d82:	4607      	mov	r7, r0
 8006d84:	10ad      	asrs	r5, r5, #2
 8006d86:	d03d      	beq.n	8006e04 <__pow5mult+0xa0>
 8006d88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d8a:	b97c      	cbnz	r4, 8006dac <__pow5mult+0x48>
 8006d8c:	2010      	movs	r0, #16
 8006d8e:	f7ff fdcd 	bl	800692c <malloc>
 8006d92:	4602      	mov	r2, r0
 8006d94:	6270      	str	r0, [r6, #36]	; 0x24
 8006d96:	b928      	cbnz	r0, 8006da4 <__pow5mult+0x40>
 8006d98:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <__pow5mult+0xac>)
 8006d9a:	481e      	ldr	r0, [pc, #120]	; (8006e14 <__pow5mult+0xb0>)
 8006d9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006da0:	f000 fe42 	bl	8007a28 <__assert_func>
 8006da4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006da8:	6004      	str	r4, [r0, #0]
 8006daa:	60c4      	str	r4, [r0, #12]
 8006dac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006db0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006db4:	b94c      	cbnz	r4, 8006dca <__pow5mult+0x66>
 8006db6:	f240 2171 	movw	r1, #625	; 0x271
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7ff ff12 	bl	8006be4 <__i2b>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	6003      	str	r3, [r0, #0]
 8006dca:	f04f 0900 	mov.w	r9, #0
 8006dce:	07eb      	lsls	r3, r5, #31
 8006dd0:	d50a      	bpl.n	8006de8 <__pow5mult+0x84>
 8006dd2:	4639      	mov	r1, r7
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f7ff ff1a 	bl	8006c10 <__multiply>
 8006ddc:	4639      	mov	r1, r7
 8006dde:	4680      	mov	r8, r0
 8006de0:	4630      	mov	r0, r6
 8006de2:	f7ff fdfd 	bl	80069e0 <_Bfree>
 8006de6:	4647      	mov	r7, r8
 8006de8:	106d      	asrs	r5, r5, #1
 8006dea:	d00b      	beq.n	8006e04 <__pow5mult+0xa0>
 8006dec:	6820      	ldr	r0, [r4, #0]
 8006dee:	b938      	cbnz	r0, 8006e00 <__pow5mult+0x9c>
 8006df0:	4622      	mov	r2, r4
 8006df2:	4621      	mov	r1, r4
 8006df4:	4630      	mov	r0, r6
 8006df6:	f7ff ff0b 	bl	8006c10 <__multiply>
 8006dfa:	6020      	str	r0, [r4, #0]
 8006dfc:	f8c0 9000 	str.w	r9, [r0]
 8006e00:	4604      	mov	r4, r0
 8006e02:	e7e4      	b.n	8006dce <__pow5mult+0x6a>
 8006e04:	4638      	mov	r0, r7
 8006e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e0a:	bf00      	nop
 8006e0c:	08008238 	.word	0x08008238
 8006e10:	08007f8d 	.word	0x08007f8d
 8006e14:	080080ec 	.word	0x080080ec

08006e18 <__lshift>:
 8006e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	6849      	ldr	r1, [r1, #4]
 8006e20:	6923      	ldr	r3, [r4, #16]
 8006e22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e26:	68a3      	ldr	r3, [r4, #8]
 8006e28:	4607      	mov	r7, r0
 8006e2a:	4691      	mov	r9, r2
 8006e2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e30:	f108 0601 	add.w	r6, r8, #1
 8006e34:	42b3      	cmp	r3, r6
 8006e36:	db0b      	blt.n	8006e50 <__lshift+0x38>
 8006e38:	4638      	mov	r0, r7
 8006e3a:	f7ff fd91 	bl	8006960 <_Balloc>
 8006e3e:	4605      	mov	r5, r0
 8006e40:	b948      	cbnz	r0, 8006e56 <__lshift+0x3e>
 8006e42:	4602      	mov	r2, r0
 8006e44:	4b2a      	ldr	r3, [pc, #168]	; (8006ef0 <__lshift+0xd8>)
 8006e46:	482b      	ldr	r0, [pc, #172]	; (8006ef4 <__lshift+0xdc>)
 8006e48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e4c:	f000 fdec 	bl	8007a28 <__assert_func>
 8006e50:	3101      	adds	r1, #1
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	e7ee      	b.n	8006e34 <__lshift+0x1c>
 8006e56:	2300      	movs	r3, #0
 8006e58:	f100 0114 	add.w	r1, r0, #20
 8006e5c:	f100 0210 	add.w	r2, r0, #16
 8006e60:	4618      	mov	r0, r3
 8006e62:	4553      	cmp	r3, sl
 8006e64:	db37      	blt.n	8006ed6 <__lshift+0xbe>
 8006e66:	6920      	ldr	r0, [r4, #16]
 8006e68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e6c:	f104 0314 	add.w	r3, r4, #20
 8006e70:	f019 091f 	ands.w	r9, r9, #31
 8006e74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e7c:	d02f      	beq.n	8006ede <__lshift+0xc6>
 8006e7e:	f1c9 0e20 	rsb	lr, r9, #32
 8006e82:	468a      	mov	sl, r1
 8006e84:	f04f 0c00 	mov.w	ip, #0
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	fa02 f209 	lsl.w	r2, r2, r9
 8006e8e:	ea42 020c 	orr.w	r2, r2, ip
 8006e92:	f84a 2b04 	str.w	r2, [sl], #4
 8006e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e9a:	4298      	cmp	r0, r3
 8006e9c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006ea0:	d8f2      	bhi.n	8006e88 <__lshift+0x70>
 8006ea2:	1b03      	subs	r3, r0, r4
 8006ea4:	3b15      	subs	r3, #21
 8006ea6:	f023 0303 	bic.w	r3, r3, #3
 8006eaa:	3304      	adds	r3, #4
 8006eac:	f104 0215 	add.w	r2, r4, #21
 8006eb0:	4290      	cmp	r0, r2
 8006eb2:	bf38      	it	cc
 8006eb4:	2304      	movcc	r3, #4
 8006eb6:	f841 c003 	str.w	ip, [r1, r3]
 8006eba:	f1bc 0f00 	cmp.w	ip, #0
 8006ebe:	d001      	beq.n	8006ec4 <__lshift+0xac>
 8006ec0:	f108 0602 	add.w	r6, r8, #2
 8006ec4:	3e01      	subs	r6, #1
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	612e      	str	r6, [r5, #16]
 8006eca:	4621      	mov	r1, r4
 8006ecc:	f7ff fd88 	bl	80069e0 <_Bfree>
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eda:	3301      	adds	r3, #1
 8006edc:	e7c1      	b.n	8006e62 <__lshift+0x4a>
 8006ede:	3904      	subs	r1, #4
 8006ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ee8:	4298      	cmp	r0, r3
 8006eea:	d8f9      	bhi.n	8006ee0 <__lshift+0xc8>
 8006eec:	e7ea      	b.n	8006ec4 <__lshift+0xac>
 8006eee:	bf00      	nop
 8006ef0:	08007fff 	.word	0x08007fff
 8006ef4:	080080ec 	.word	0x080080ec

08006ef8 <__mcmp>:
 8006ef8:	b530      	push	{r4, r5, lr}
 8006efa:	6902      	ldr	r2, [r0, #16]
 8006efc:	690c      	ldr	r4, [r1, #16]
 8006efe:	1b12      	subs	r2, r2, r4
 8006f00:	d10e      	bne.n	8006f20 <__mcmp+0x28>
 8006f02:	f100 0314 	add.w	r3, r0, #20
 8006f06:	3114      	adds	r1, #20
 8006f08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f18:	42a5      	cmp	r5, r4
 8006f1a:	d003      	beq.n	8006f24 <__mcmp+0x2c>
 8006f1c:	d305      	bcc.n	8006f2a <__mcmp+0x32>
 8006f1e:	2201      	movs	r2, #1
 8006f20:	4610      	mov	r0, r2
 8006f22:	bd30      	pop	{r4, r5, pc}
 8006f24:	4283      	cmp	r3, r0
 8006f26:	d3f3      	bcc.n	8006f10 <__mcmp+0x18>
 8006f28:	e7fa      	b.n	8006f20 <__mcmp+0x28>
 8006f2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f2e:	e7f7      	b.n	8006f20 <__mcmp+0x28>

08006f30 <__mdiff>:
 8006f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	460c      	mov	r4, r1
 8006f36:	4606      	mov	r6, r0
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	4690      	mov	r8, r2
 8006f3e:	f7ff ffdb 	bl	8006ef8 <__mcmp>
 8006f42:	1e05      	subs	r5, r0, #0
 8006f44:	d110      	bne.n	8006f68 <__mdiff+0x38>
 8006f46:	4629      	mov	r1, r5
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f7ff fd09 	bl	8006960 <_Balloc>
 8006f4e:	b930      	cbnz	r0, 8006f5e <__mdiff+0x2e>
 8006f50:	4b3a      	ldr	r3, [pc, #232]	; (800703c <__mdiff+0x10c>)
 8006f52:	4602      	mov	r2, r0
 8006f54:	f240 2132 	movw	r1, #562	; 0x232
 8006f58:	4839      	ldr	r0, [pc, #228]	; (8007040 <__mdiff+0x110>)
 8006f5a:	f000 fd65 	bl	8007a28 <__assert_func>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f68:	bfa4      	itt	ge
 8006f6a:	4643      	movge	r3, r8
 8006f6c:	46a0      	movge	r8, r4
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f74:	bfa6      	itte	ge
 8006f76:	461c      	movge	r4, r3
 8006f78:	2500      	movge	r5, #0
 8006f7a:	2501      	movlt	r5, #1
 8006f7c:	f7ff fcf0 	bl	8006960 <_Balloc>
 8006f80:	b920      	cbnz	r0, 8006f8c <__mdiff+0x5c>
 8006f82:	4b2e      	ldr	r3, [pc, #184]	; (800703c <__mdiff+0x10c>)
 8006f84:	4602      	mov	r2, r0
 8006f86:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f8a:	e7e5      	b.n	8006f58 <__mdiff+0x28>
 8006f8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f90:	6926      	ldr	r6, [r4, #16]
 8006f92:	60c5      	str	r5, [r0, #12]
 8006f94:	f104 0914 	add.w	r9, r4, #20
 8006f98:	f108 0514 	add.w	r5, r8, #20
 8006f9c:	f100 0e14 	add.w	lr, r0, #20
 8006fa0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006fa4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006fa8:	f108 0210 	add.w	r2, r8, #16
 8006fac:	46f2      	mov	sl, lr
 8006fae:	2100      	movs	r1, #0
 8006fb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8006fb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006fb8:	fa1f f883 	uxth.w	r8, r3
 8006fbc:	fa11 f18b 	uxtah	r1, r1, fp
 8006fc0:	0c1b      	lsrs	r3, r3, #16
 8006fc2:	eba1 0808 	sub.w	r8, r1, r8
 8006fc6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006fca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006fce:	fa1f f888 	uxth.w	r8, r8
 8006fd2:	1419      	asrs	r1, r3, #16
 8006fd4:	454e      	cmp	r6, r9
 8006fd6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006fda:	f84a 3b04 	str.w	r3, [sl], #4
 8006fde:	d8e7      	bhi.n	8006fb0 <__mdiff+0x80>
 8006fe0:	1b33      	subs	r3, r6, r4
 8006fe2:	3b15      	subs	r3, #21
 8006fe4:	f023 0303 	bic.w	r3, r3, #3
 8006fe8:	3304      	adds	r3, #4
 8006fea:	3415      	adds	r4, #21
 8006fec:	42a6      	cmp	r6, r4
 8006fee:	bf38      	it	cc
 8006ff0:	2304      	movcc	r3, #4
 8006ff2:	441d      	add	r5, r3
 8006ff4:	4473      	add	r3, lr
 8006ff6:	469e      	mov	lr, r3
 8006ff8:	462e      	mov	r6, r5
 8006ffa:	4566      	cmp	r6, ip
 8006ffc:	d30e      	bcc.n	800701c <__mdiff+0xec>
 8006ffe:	f10c 0203 	add.w	r2, ip, #3
 8007002:	1b52      	subs	r2, r2, r5
 8007004:	f022 0203 	bic.w	r2, r2, #3
 8007008:	3d03      	subs	r5, #3
 800700a:	45ac      	cmp	ip, r5
 800700c:	bf38      	it	cc
 800700e:	2200      	movcc	r2, #0
 8007010:	441a      	add	r2, r3
 8007012:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007016:	b17b      	cbz	r3, 8007038 <__mdiff+0x108>
 8007018:	6107      	str	r7, [r0, #16]
 800701a:	e7a3      	b.n	8006f64 <__mdiff+0x34>
 800701c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007020:	fa11 f288 	uxtah	r2, r1, r8
 8007024:	1414      	asrs	r4, r2, #16
 8007026:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800702a:	b292      	uxth	r2, r2
 800702c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007030:	f84e 2b04 	str.w	r2, [lr], #4
 8007034:	1421      	asrs	r1, r4, #16
 8007036:	e7e0      	b.n	8006ffa <__mdiff+0xca>
 8007038:	3f01      	subs	r7, #1
 800703a:	e7ea      	b.n	8007012 <__mdiff+0xe2>
 800703c:	08007fff 	.word	0x08007fff
 8007040:	080080ec 	.word	0x080080ec

08007044 <__ulp>:
 8007044:	b082      	sub	sp, #8
 8007046:	ed8d 0b00 	vstr	d0, [sp]
 800704a:	9b01      	ldr	r3, [sp, #4]
 800704c:	4912      	ldr	r1, [pc, #72]	; (8007098 <__ulp+0x54>)
 800704e:	4019      	ands	r1, r3
 8007050:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007054:	2900      	cmp	r1, #0
 8007056:	dd05      	ble.n	8007064 <__ulp+0x20>
 8007058:	2200      	movs	r2, #0
 800705a:	460b      	mov	r3, r1
 800705c:	ec43 2b10 	vmov	d0, r2, r3
 8007060:	b002      	add	sp, #8
 8007062:	4770      	bx	lr
 8007064:	4249      	negs	r1, r1
 8007066:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800706a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	f04f 0300 	mov.w	r3, #0
 8007076:	da04      	bge.n	8007082 <__ulp+0x3e>
 8007078:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800707c:	fa41 f300 	asr.w	r3, r1, r0
 8007080:	e7ec      	b.n	800705c <__ulp+0x18>
 8007082:	f1a0 0114 	sub.w	r1, r0, #20
 8007086:	291e      	cmp	r1, #30
 8007088:	bfda      	itte	le
 800708a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800708e:	fa20 f101 	lsrle.w	r1, r0, r1
 8007092:	2101      	movgt	r1, #1
 8007094:	460a      	mov	r2, r1
 8007096:	e7e1      	b.n	800705c <__ulp+0x18>
 8007098:	7ff00000 	.word	0x7ff00000

0800709c <__b2d>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	6905      	ldr	r5, [r0, #16]
 80070a0:	f100 0714 	add.w	r7, r0, #20
 80070a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80070a8:	1f2e      	subs	r6, r5, #4
 80070aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80070ae:	4620      	mov	r0, r4
 80070b0:	f7ff fd48 	bl	8006b44 <__hi0bits>
 80070b4:	f1c0 0320 	rsb	r3, r0, #32
 80070b8:	280a      	cmp	r0, #10
 80070ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007138 <__b2d+0x9c>
 80070be:	600b      	str	r3, [r1, #0]
 80070c0:	dc14      	bgt.n	80070ec <__b2d+0x50>
 80070c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80070c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80070ca:	42b7      	cmp	r7, r6
 80070cc:	ea41 030c 	orr.w	r3, r1, ip
 80070d0:	bf34      	ite	cc
 80070d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80070d6:	2100      	movcs	r1, #0
 80070d8:	3015      	adds	r0, #21
 80070da:	fa04 f000 	lsl.w	r0, r4, r0
 80070de:	fa21 f10e 	lsr.w	r1, r1, lr
 80070e2:	ea40 0201 	orr.w	r2, r0, r1
 80070e6:	ec43 2b10 	vmov	d0, r2, r3
 80070ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ec:	42b7      	cmp	r7, r6
 80070ee:	bf3a      	itte	cc
 80070f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80070f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80070f8:	2100      	movcs	r1, #0
 80070fa:	380b      	subs	r0, #11
 80070fc:	d017      	beq.n	800712e <__b2d+0x92>
 80070fe:	f1c0 0c20 	rsb	ip, r0, #32
 8007102:	fa04 f500 	lsl.w	r5, r4, r0
 8007106:	42be      	cmp	r6, r7
 8007108:	fa21 f40c 	lsr.w	r4, r1, ip
 800710c:	ea45 0504 	orr.w	r5, r5, r4
 8007110:	bf8c      	ite	hi
 8007112:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007116:	2400      	movls	r4, #0
 8007118:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800711c:	fa01 f000 	lsl.w	r0, r1, r0
 8007120:	fa24 f40c 	lsr.w	r4, r4, ip
 8007124:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007128:	ea40 0204 	orr.w	r2, r0, r4
 800712c:	e7db      	b.n	80070e6 <__b2d+0x4a>
 800712e:	ea44 030c 	orr.w	r3, r4, ip
 8007132:	460a      	mov	r2, r1
 8007134:	e7d7      	b.n	80070e6 <__b2d+0x4a>
 8007136:	bf00      	nop
 8007138:	3ff00000 	.word	0x3ff00000

0800713c <__d2b>:
 800713c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007140:	4689      	mov	r9, r1
 8007142:	2101      	movs	r1, #1
 8007144:	ec57 6b10 	vmov	r6, r7, d0
 8007148:	4690      	mov	r8, r2
 800714a:	f7ff fc09 	bl	8006960 <_Balloc>
 800714e:	4604      	mov	r4, r0
 8007150:	b930      	cbnz	r0, 8007160 <__d2b+0x24>
 8007152:	4602      	mov	r2, r0
 8007154:	4b25      	ldr	r3, [pc, #148]	; (80071ec <__d2b+0xb0>)
 8007156:	4826      	ldr	r0, [pc, #152]	; (80071f0 <__d2b+0xb4>)
 8007158:	f240 310a 	movw	r1, #778	; 0x30a
 800715c:	f000 fc64 	bl	8007a28 <__assert_func>
 8007160:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007164:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007168:	bb35      	cbnz	r5, 80071b8 <__d2b+0x7c>
 800716a:	2e00      	cmp	r6, #0
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	d028      	beq.n	80071c2 <__d2b+0x86>
 8007170:	4668      	mov	r0, sp
 8007172:	9600      	str	r6, [sp, #0]
 8007174:	f7ff fd06 	bl	8006b84 <__lo0bits>
 8007178:	9900      	ldr	r1, [sp, #0]
 800717a:	b300      	cbz	r0, 80071be <__d2b+0x82>
 800717c:	9a01      	ldr	r2, [sp, #4]
 800717e:	f1c0 0320 	rsb	r3, r0, #32
 8007182:	fa02 f303 	lsl.w	r3, r2, r3
 8007186:	430b      	orrs	r3, r1
 8007188:	40c2      	lsrs	r2, r0
 800718a:	6163      	str	r3, [r4, #20]
 800718c:	9201      	str	r2, [sp, #4]
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	61a3      	str	r3, [r4, #24]
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf14      	ite	ne
 8007196:	2202      	movne	r2, #2
 8007198:	2201      	moveq	r2, #1
 800719a:	6122      	str	r2, [r4, #16]
 800719c:	b1d5      	cbz	r5, 80071d4 <__d2b+0x98>
 800719e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80071a2:	4405      	add	r5, r0
 80071a4:	f8c9 5000 	str.w	r5, [r9]
 80071a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071ac:	f8c8 0000 	str.w	r0, [r8]
 80071b0:	4620      	mov	r0, r4
 80071b2:	b003      	add	sp, #12
 80071b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071bc:	e7d5      	b.n	800716a <__d2b+0x2e>
 80071be:	6161      	str	r1, [r4, #20]
 80071c0:	e7e5      	b.n	800718e <__d2b+0x52>
 80071c2:	a801      	add	r0, sp, #4
 80071c4:	f7ff fcde 	bl	8006b84 <__lo0bits>
 80071c8:	9b01      	ldr	r3, [sp, #4]
 80071ca:	6163      	str	r3, [r4, #20]
 80071cc:	2201      	movs	r2, #1
 80071ce:	6122      	str	r2, [r4, #16]
 80071d0:	3020      	adds	r0, #32
 80071d2:	e7e3      	b.n	800719c <__d2b+0x60>
 80071d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071dc:	f8c9 0000 	str.w	r0, [r9]
 80071e0:	6918      	ldr	r0, [r3, #16]
 80071e2:	f7ff fcaf 	bl	8006b44 <__hi0bits>
 80071e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071ea:	e7df      	b.n	80071ac <__d2b+0x70>
 80071ec:	08007fff 	.word	0x08007fff
 80071f0:	080080ec 	.word	0x080080ec

080071f4 <__ratio>:
 80071f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f8:	4688      	mov	r8, r1
 80071fa:	4669      	mov	r1, sp
 80071fc:	4681      	mov	r9, r0
 80071fe:	f7ff ff4d 	bl	800709c <__b2d>
 8007202:	a901      	add	r1, sp, #4
 8007204:	4640      	mov	r0, r8
 8007206:	ec55 4b10 	vmov	r4, r5, d0
 800720a:	f7ff ff47 	bl	800709c <__b2d>
 800720e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007212:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007216:	eba3 0c02 	sub.w	ip, r3, r2
 800721a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800721e:	1a9b      	subs	r3, r3, r2
 8007220:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007224:	ec51 0b10 	vmov	r0, r1, d0
 8007228:	2b00      	cmp	r3, #0
 800722a:	bfd6      	itet	le
 800722c:	460a      	movle	r2, r1
 800722e:	462a      	movgt	r2, r5
 8007230:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007234:	468b      	mov	fp, r1
 8007236:	462f      	mov	r7, r5
 8007238:	bfd4      	ite	le
 800723a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800723e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007242:	4620      	mov	r0, r4
 8007244:	ee10 2a10 	vmov	r2, s0
 8007248:	465b      	mov	r3, fp
 800724a:	4639      	mov	r1, r7
 800724c:	f7f9 fafe 	bl	800084c <__aeabi_ddiv>
 8007250:	ec41 0b10 	vmov	d0, r0, r1
 8007254:	b003      	add	sp, #12
 8007256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800725a <__copybits>:
 800725a:	3901      	subs	r1, #1
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	1149      	asrs	r1, r1, #5
 8007260:	6914      	ldr	r4, [r2, #16]
 8007262:	3101      	adds	r1, #1
 8007264:	f102 0314 	add.w	r3, r2, #20
 8007268:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800726c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007270:	1f05      	subs	r5, r0, #4
 8007272:	42a3      	cmp	r3, r4
 8007274:	d30c      	bcc.n	8007290 <__copybits+0x36>
 8007276:	1aa3      	subs	r3, r4, r2
 8007278:	3b11      	subs	r3, #17
 800727a:	f023 0303 	bic.w	r3, r3, #3
 800727e:	3211      	adds	r2, #17
 8007280:	42a2      	cmp	r2, r4
 8007282:	bf88      	it	hi
 8007284:	2300      	movhi	r3, #0
 8007286:	4418      	add	r0, r3
 8007288:	2300      	movs	r3, #0
 800728a:	4288      	cmp	r0, r1
 800728c:	d305      	bcc.n	800729a <__copybits+0x40>
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f853 6b04 	ldr.w	r6, [r3], #4
 8007294:	f845 6f04 	str.w	r6, [r5, #4]!
 8007298:	e7eb      	b.n	8007272 <__copybits+0x18>
 800729a:	f840 3b04 	str.w	r3, [r0], #4
 800729e:	e7f4      	b.n	800728a <__copybits+0x30>

080072a0 <__any_on>:
 80072a0:	f100 0214 	add.w	r2, r0, #20
 80072a4:	6900      	ldr	r0, [r0, #16]
 80072a6:	114b      	asrs	r3, r1, #5
 80072a8:	4298      	cmp	r0, r3
 80072aa:	b510      	push	{r4, lr}
 80072ac:	db11      	blt.n	80072d2 <__any_on+0x32>
 80072ae:	dd0a      	ble.n	80072c6 <__any_on+0x26>
 80072b0:	f011 011f 	ands.w	r1, r1, #31
 80072b4:	d007      	beq.n	80072c6 <__any_on+0x26>
 80072b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80072ba:	fa24 f001 	lsr.w	r0, r4, r1
 80072be:	fa00 f101 	lsl.w	r1, r0, r1
 80072c2:	428c      	cmp	r4, r1
 80072c4:	d10b      	bne.n	80072de <__any_on+0x3e>
 80072c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d803      	bhi.n	80072d6 <__any_on+0x36>
 80072ce:	2000      	movs	r0, #0
 80072d0:	bd10      	pop	{r4, pc}
 80072d2:	4603      	mov	r3, r0
 80072d4:	e7f7      	b.n	80072c6 <__any_on+0x26>
 80072d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072da:	2900      	cmp	r1, #0
 80072dc:	d0f5      	beq.n	80072ca <__any_on+0x2a>
 80072de:	2001      	movs	r0, #1
 80072e0:	e7f6      	b.n	80072d0 <__any_on+0x30>

080072e2 <_calloc_r>:
 80072e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072e4:	fba1 2402 	umull	r2, r4, r1, r2
 80072e8:	b94c      	cbnz	r4, 80072fe <_calloc_r+0x1c>
 80072ea:	4611      	mov	r1, r2
 80072ec:	9201      	str	r2, [sp, #4]
 80072ee:	f000 f87b 	bl	80073e8 <_malloc_r>
 80072f2:	9a01      	ldr	r2, [sp, #4]
 80072f4:	4605      	mov	r5, r0
 80072f6:	b930      	cbnz	r0, 8007306 <_calloc_r+0x24>
 80072f8:	4628      	mov	r0, r5
 80072fa:	b003      	add	sp, #12
 80072fc:	bd30      	pop	{r4, r5, pc}
 80072fe:	220c      	movs	r2, #12
 8007300:	6002      	str	r2, [r0, #0]
 8007302:	2500      	movs	r5, #0
 8007304:	e7f8      	b.n	80072f8 <_calloc_r+0x16>
 8007306:	4621      	mov	r1, r4
 8007308:	f7fc fd6e 	bl	8003de8 <memset>
 800730c:	e7f4      	b.n	80072f8 <_calloc_r+0x16>
	...

08007310 <_free_r>:
 8007310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007312:	2900      	cmp	r1, #0
 8007314:	d044      	beq.n	80073a0 <_free_r+0x90>
 8007316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800731a:	9001      	str	r0, [sp, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	f1a1 0404 	sub.w	r4, r1, #4
 8007322:	bfb8      	it	lt
 8007324:	18e4      	addlt	r4, r4, r3
 8007326:	f000 fcf9 	bl	8007d1c <__malloc_lock>
 800732a:	4a1e      	ldr	r2, [pc, #120]	; (80073a4 <_free_r+0x94>)
 800732c:	9801      	ldr	r0, [sp, #4]
 800732e:	6813      	ldr	r3, [r2, #0]
 8007330:	b933      	cbnz	r3, 8007340 <_free_r+0x30>
 8007332:	6063      	str	r3, [r4, #4]
 8007334:	6014      	str	r4, [r2, #0]
 8007336:	b003      	add	sp, #12
 8007338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800733c:	f000 bcf4 	b.w	8007d28 <__malloc_unlock>
 8007340:	42a3      	cmp	r3, r4
 8007342:	d908      	bls.n	8007356 <_free_r+0x46>
 8007344:	6825      	ldr	r5, [r4, #0]
 8007346:	1961      	adds	r1, r4, r5
 8007348:	428b      	cmp	r3, r1
 800734a:	bf01      	itttt	eq
 800734c:	6819      	ldreq	r1, [r3, #0]
 800734e:	685b      	ldreq	r3, [r3, #4]
 8007350:	1949      	addeq	r1, r1, r5
 8007352:	6021      	streq	r1, [r4, #0]
 8007354:	e7ed      	b.n	8007332 <_free_r+0x22>
 8007356:	461a      	mov	r2, r3
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	b10b      	cbz	r3, 8007360 <_free_r+0x50>
 800735c:	42a3      	cmp	r3, r4
 800735e:	d9fa      	bls.n	8007356 <_free_r+0x46>
 8007360:	6811      	ldr	r1, [r2, #0]
 8007362:	1855      	adds	r5, r2, r1
 8007364:	42a5      	cmp	r5, r4
 8007366:	d10b      	bne.n	8007380 <_free_r+0x70>
 8007368:	6824      	ldr	r4, [r4, #0]
 800736a:	4421      	add	r1, r4
 800736c:	1854      	adds	r4, r2, r1
 800736e:	42a3      	cmp	r3, r4
 8007370:	6011      	str	r1, [r2, #0]
 8007372:	d1e0      	bne.n	8007336 <_free_r+0x26>
 8007374:	681c      	ldr	r4, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	6053      	str	r3, [r2, #4]
 800737a:	4421      	add	r1, r4
 800737c:	6011      	str	r1, [r2, #0]
 800737e:	e7da      	b.n	8007336 <_free_r+0x26>
 8007380:	d902      	bls.n	8007388 <_free_r+0x78>
 8007382:	230c      	movs	r3, #12
 8007384:	6003      	str	r3, [r0, #0]
 8007386:	e7d6      	b.n	8007336 <_free_r+0x26>
 8007388:	6825      	ldr	r5, [r4, #0]
 800738a:	1961      	adds	r1, r4, r5
 800738c:	428b      	cmp	r3, r1
 800738e:	bf04      	itt	eq
 8007390:	6819      	ldreq	r1, [r3, #0]
 8007392:	685b      	ldreq	r3, [r3, #4]
 8007394:	6063      	str	r3, [r4, #4]
 8007396:	bf04      	itt	eq
 8007398:	1949      	addeq	r1, r1, r5
 800739a:	6021      	streq	r1, [r4, #0]
 800739c:	6054      	str	r4, [r2, #4]
 800739e:	e7ca      	b.n	8007336 <_free_r+0x26>
 80073a0:	b003      	add	sp, #12
 80073a2:	bd30      	pop	{r4, r5, pc}
 80073a4:	20000584 	.word	0x20000584

080073a8 <sbrk_aligned>:
 80073a8:	b570      	push	{r4, r5, r6, lr}
 80073aa:	4e0e      	ldr	r6, [pc, #56]	; (80073e4 <sbrk_aligned+0x3c>)
 80073ac:	460c      	mov	r4, r1
 80073ae:	6831      	ldr	r1, [r6, #0]
 80073b0:	4605      	mov	r5, r0
 80073b2:	b911      	cbnz	r1, 80073ba <sbrk_aligned+0x12>
 80073b4:	f000 f9f0 	bl	8007798 <_sbrk_r>
 80073b8:	6030      	str	r0, [r6, #0]
 80073ba:	4621      	mov	r1, r4
 80073bc:	4628      	mov	r0, r5
 80073be:	f000 f9eb 	bl	8007798 <_sbrk_r>
 80073c2:	1c43      	adds	r3, r0, #1
 80073c4:	d00a      	beq.n	80073dc <sbrk_aligned+0x34>
 80073c6:	1cc4      	adds	r4, r0, #3
 80073c8:	f024 0403 	bic.w	r4, r4, #3
 80073cc:	42a0      	cmp	r0, r4
 80073ce:	d007      	beq.n	80073e0 <sbrk_aligned+0x38>
 80073d0:	1a21      	subs	r1, r4, r0
 80073d2:	4628      	mov	r0, r5
 80073d4:	f000 f9e0 	bl	8007798 <_sbrk_r>
 80073d8:	3001      	adds	r0, #1
 80073da:	d101      	bne.n	80073e0 <sbrk_aligned+0x38>
 80073dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80073e0:	4620      	mov	r0, r4
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
 80073e4:	20000588 	.word	0x20000588

080073e8 <_malloc_r>:
 80073e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ec:	1ccd      	adds	r5, r1, #3
 80073ee:	f025 0503 	bic.w	r5, r5, #3
 80073f2:	3508      	adds	r5, #8
 80073f4:	2d0c      	cmp	r5, #12
 80073f6:	bf38      	it	cc
 80073f8:	250c      	movcc	r5, #12
 80073fa:	2d00      	cmp	r5, #0
 80073fc:	4607      	mov	r7, r0
 80073fe:	db01      	blt.n	8007404 <_malloc_r+0x1c>
 8007400:	42a9      	cmp	r1, r5
 8007402:	d905      	bls.n	8007410 <_malloc_r+0x28>
 8007404:	230c      	movs	r3, #12
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	2600      	movs	r6, #0
 800740a:	4630      	mov	r0, r6
 800740c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007410:	4e2e      	ldr	r6, [pc, #184]	; (80074cc <_malloc_r+0xe4>)
 8007412:	f000 fc83 	bl	8007d1c <__malloc_lock>
 8007416:	6833      	ldr	r3, [r6, #0]
 8007418:	461c      	mov	r4, r3
 800741a:	bb34      	cbnz	r4, 800746a <_malloc_r+0x82>
 800741c:	4629      	mov	r1, r5
 800741e:	4638      	mov	r0, r7
 8007420:	f7ff ffc2 	bl	80073a8 <sbrk_aligned>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	4604      	mov	r4, r0
 8007428:	d14d      	bne.n	80074c6 <_malloc_r+0xde>
 800742a:	6834      	ldr	r4, [r6, #0]
 800742c:	4626      	mov	r6, r4
 800742e:	2e00      	cmp	r6, #0
 8007430:	d140      	bne.n	80074b4 <_malloc_r+0xcc>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	4631      	mov	r1, r6
 8007436:	4638      	mov	r0, r7
 8007438:	eb04 0803 	add.w	r8, r4, r3
 800743c:	f000 f9ac 	bl	8007798 <_sbrk_r>
 8007440:	4580      	cmp	r8, r0
 8007442:	d13a      	bne.n	80074ba <_malloc_r+0xd2>
 8007444:	6821      	ldr	r1, [r4, #0]
 8007446:	3503      	adds	r5, #3
 8007448:	1a6d      	subs	r5, r5, r1
 800744a:	f025 0503 	bic.w	r5, r5, #3
 800744e:	3508      	adds	r5, #8
 8007450:	2d0c      	cmp	r5, #12
 8007452:	bf38      	it	cc
 8007454:	250c      	movcc	r5, #12
 8007456:	4629      	mov	r1, r5
 8007458:	4638      	mov	r0, r7
 800745a:	f7ff ffa5 	bl	80073a8 <sbrk_aligned>
 800745e:	3001      	adds	r0, #1
 8007460:	d02b      	beq.n	80074ba <_malloc_r+0xd2>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	442b      	add	r3, r5
 8007466:	6023      	str	r3, [r4, #0]
 8007468:	e00e      	b.n	8007488 <_malloc_r+0xa0>
 800746a:	6822      	ldr	r2, [r4, #0]
 800746c:	1b52      	subs	r2, r2, r5
 800746e:	d41e      	bmi.n	80074ae <_malloc_r+0xc6>
 8007470:	2a0b      	cmp	r2, #11
 8007472:	d916      	bls.n	80074a2 <_malloc_r+0xba>
 8007474:	1961      	adds	r1, r4, r5
 8007476:	42a3      	cmp	r3, r4
 8007478:	6025      	str	r5, [r4, #0]
 800747a:	bf18      	it	ne
 800747c:	6059      	strne	r1, [r3, #4]
 800747e:	6863      	ldr	r3, [r4, #4]
 8007480:	bf08      	it	eq
 8007482:	6031      	streq	r1, [r6, #0]
 8007484:	5162      	str	r2, [r4, r5]
 8007486:	604b      	str	r3, [r1, #4]
 8007488:	4638      	mov	r0, r7
 800748a:	f104 060b 	add.w	r6, r4, #11
 800748e:	f000 fc4b 	bl	8007d28 <__malloc_unlock>
 8007492:	f026 0607 	bic.w	r6, r6, #7
 8007496:	1d23      	adds	r3, r4, #4
 8007498:	1af2      	subs	r2, r6, r3
 800749a:	d0b6      	beq.n	800740a <_malloc_r+0x22>
 800749c:	1b9b      	subs	r3, r3, r6
 800749e:	50a3      	str	r3, [r4, r2]
 80074a0:	e7b3      	b.n	800740a <_malloc_r+0x22>
 80074a2:	6862      	ldr	r2, [r4, #4]
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	bf0c      	ite	eq
 80074a8:	6032      	streq	r2, [r6, #0]
 80074aa:	605a      	strne	r2, [r3, #4]
 80074ac:	e7ec      	b.n	8007488 <_malloc_r+0xa0>
 80074ae:	4623      	mov	r3, r4
 80074b0:	6864      	ldr	r4, [r4, #4]
 80074b2:	e7b2      	b.n	800741a <_malloc_r+0x32>
 80074b4:	4634      	mov	r4, r6
 80074b6:	6876      	ldr	r6, [r6, #4]
 80074b8:	e7b9      	b.n	800742e <_malloc_r+0x46>
 80074ba:	230c      	movs	r3, #12
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	4638      	mov	r0, r7
 80074c0:	f000 fc32 	bl	8007d28 <__malloc_unlock>
 80074c4:	e7a1      	b.n	800740a <_malloc_r+0x22>
 80074c6:	6025      	str	r5, [r4, #0]
 80074c8:	e7de      	b.n	8007488 <_malloc_r+0xa0>
 80074ca:	bf00      	nop
 80074cc:	20000584 	.word	0x20000584

080074d0 <__sfputc_r>:
 80074d0:	6893      	ldr	r3, [r2, #8]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	b410      	push	{r4}
 80074d8:	6093      	str	r3, [r2, #8]
 80074da:	da08      	bge.n	80074ee <__sfputc_r+0x1e>
 80074dc:	6994      	ldr	r4, [r2, #24]
 80074de:	42a3      	cmp	r3, r4
 80074e0:	db01      	blt.n	80074e6 <__sfputc_r+0x16>
 80074e2:	290a      	cmp	r1, #10
 80074e4:	d103      	bne.n	80074ee <__sfputc_r+0x1e>
 80074e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ea:	f000 b9bd 	b.w	8007868 <__swbuf_r>
 80074ee:	6813      	ldr	r3, [r2, #0]
 80074f0:	1c58      	adds	r0, r3, #1
 80074f2:	6010      	str	r0, [r2, #0]
 80074f4:	7019      	strb	r1, [r3, #0]
 80074f6:	4608      	mov	r0, r1
 80074f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <__sfputs_r>:
 80074fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007500:	4606      	mov	r6, r0
 8007502:	460f      	mov	r7, r1
 8007504:	4614      	mov	r4, r2
 8007506:	18d5      	adds	r5, r2, r3
 8007508:	42ac      	cmp	r4, r5
 800750a:	d101      	bne.n	8007510 <__sfputs_r+0x12>
 800750c:	2000      	movs	r0, #0
 800750e:	e007      	b.n	8007520 <__sfputs_r+0x22>
 8007510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007514:	463a      	mov	r2, r7
 8007516:	4630      	mov	r0, r6
 8007518:	f7ff ffda 	bl	80074d0 <__sfputc_r>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d1f3      	bne.n	8007508 <__sfputs_r+0xa>
 8007520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007524 <_vfiprintf_r>:
 8007524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007528:	460d      	mov	r5, r1
 800752a:	b09d      	sub	sp, #116	; 0x74
 800752c:	4614      	mov	r4, r2
 800752e:	4698      	mov	r8, r3
 8007530:	4606      	mov	r6, r0
 8007532:	b118      	cbz	r0, 800753c <_vfiprintf_r+0x18>
 8007534:	6983      	ldr	r3, [r0, #24]
 8007536:	b90b      	cbnz	r3, 800753c <_vfiprintf_r+0x18>
 8007538:	f7fe fde4 	bl	8006104 <__sinit>
 800753c:	4b89      	ldr	r3, [pc, #548]	; (8007764 <_vfiprintf_r+0x240>)
 800753e:	429d      	cmp	r5, r3
 8007540:	d11b      	bne.n	800757a <_vfiprintf_r+0x56>
 8007542:	6875      	ldr	r5, [r6, #4]
 8007544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007546:	07d9      	lsls	r1, r3, #31
 8007548:	d405      	bmi.n	8007556 <_vfiprintf_r+0x32>
 800754a:	89ab      	ldrh	r3, [r5, #12]
 800754c:	059a      	lsls	r2, r3, #22
 800754e:	d402      	bmi.n	8007556 <_vfiprintf_r+0x32>
 8007550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007552:	f7ff f9e8 	bl	8006926 <__retarget_lock_acquire_recursive>
 8007556:	89ab      	ldrh	r3, [r5, #12]
 8007558:	071b      	lsls	r3, r3, #28
 800755a:	d501      	bpl.n	8007560 <_vfiprintf_r+0x3c>
 800755c:	692b      	ldr	r3, [r5, #16]
 800755e:	b9eb      	cbnz	r3, 800759c <_vfiprintf_r+0x78>
 8007560:	4629      	mov	r1, r5
 8007562:	4630      	mov	r0, r6
 8007564:	f000 f9f2 	bl	800794c <__swsetup_r>
 8007568:	b1c0      	cbz	r0, 800759c <_vfiprintf_r+0x78>
 800756a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800756c:	07dc      	lsls	r4, r3, #31
 800756e:	d50e      	bpl.n	800758e <_vfiprintf_r+0x6a>
 8007570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007574:	b01d      	add	sp, #116	; 0x74
 8007576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800757a:	4b7b      	ldr	r3, [pc, #492]	; (8007768 <_vfiprintf_r+0x244>)
 800757c:	429d      	cmp	r5, r3
 800757e:	d101      	bne.n	8007584 <_vfiprintf_r+0x60>
 8007580:	68b5      	ldr	r5, [r6, #8]
 8007582:	e7df      	b.n	8007544 <_vfiprintf_r+0x20>
 8007584:	4b79      	ldr	r3, [pc, #484]	; (800776c <_vfiprintf_r+0x248>)
 8007586:	429d      	cmp	r5, r3
 8007588:	bf08      	it	eq
 800758a:	68f5      	ldreq	r5, [r6, #12]
 800758c:	e7da      	b.n	8007544 <_vfiprintf_r+0x20>
 800758e:	89ab      	ldrh	r3, [r5, #12]
 8007590:	0598      	lsls	r0, r3, #22
 8007592:	d4ed      	bmi.n	8007570 <_vfiprintf_r+0x4c>
 8007594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007596:	f7ff f9c7 	bl	8006928 <__retarget_lock_release_recursive>
 800759a:	e7e9      	b.n	8007570 <_vfiprintf_r+0x4c>
 800759c:	2300      	movs	r3, #0
 800759e:	9309      	str	r3, [sp, #36]	; 0x24
 80075a0:	2320      	movs	r3, #32
 80075a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075aa:	2330      	movs	r3, #48	; 0x30
 80075ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007770 <_vfiprintf_r+0x24c>
 80075b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075b4:	f04f 0901 	mov.w	r9, #1
 80075b8:	4623      	mov	r3, r4
 80075ba:	469a      	mov	sl, r3
 80075bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075c0:	b10a      	cbz	r2, 80075c6 <_vfiprintf_r+0xa2>
 80075c2:	2a25      	cmp	r2, #37	; 0x25
 80075c4:	d1f9      	bne.n	80075ba <_vfiprintf_r+0x96>
 80075c6:	ebba 0b04 	subs.w	fp, sl, r4
 80075ca:	d00b      	beq.n	80075e4 <_vfiprintf_r+0xc0>
 80075cc:	465b      	mov	r3, fp
 80075ce:	4622      	mov	r2, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	4630      	mov	r0, r6
 80075d4:	f7ff ff93 	bl	80074fe <__sfputs_r>
 80075d8:	3001      	adds	r0, #1
 80075da:	f000 80aa 	beq.w	8007732 <_vfiprintf_r+0x20e>
 80075de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075e0:	445a      	add	r2, fp
 80075e2:	9209      	str	r2, [sp, #36]	; 0x24
 80075e4:	f89a 3000 	ldrb.w	r3, [sl]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 80a2 	beq.w	8007732 <_vfiprintf_r+0x20e>
 80075ee:	2300      	movs	r3, #0
 80075f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075f8:	f10a 0a01 	add.w	sl, sl, #1
 80075fc:	9304      	str	r3, [sp, #16]
 80075fe:	9307      	str	r3, [sp, #28]
 8007600:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007604:	931a      	str	r3, [sp, #104]	; 0x68
 8007606:	4654      	mov	r4, sl
 8007608:	2205      	movs	r2, #5
 800760a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800760e:	4858      	ldr	r0, [pc, #352]	; (8007770 <_vfiprintf_r+0x24c>)
 8007610:	f7f8 fde6 	bl	80001e0 <memchr>
 8007614:	9a04      	ldr	r2, [sp, #16]
 8007616:	b9d8      	cbnz	r0, 8007650 <_vfiprintf_r+0x12c>
 8007618:	06d1      	lsls	r1, r2, #27
 800761a:	bf44      	itt	mi
 800761c:	2320      	movmi	r3, #32
 800761e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007622:	0713      	lsls	r3, r2, #28
 8007624:	bf44      	itt	mi
 8007626:	232b      	movmi	r3, #43	; 0x2b
 8007628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800762c:	f89a 3000 	ldrb.w	r3, [sl]
 8007630:	2b2a      	cmp	r3, #42	; 0x2a
 8007632:	d015      	beq.n	8007660 <_vfiprintf_r+0x13c>
 8007634:	9a07      	ldr	r2, [sp, #28]
 8007636:	4654      	mov	r4, sl
 8007638:	2000      	movs	r0, #0
 800763a:	f04f 0c0a 	mov.w	ip, #10
 800763e:	4621      	mov	r1, r4
 8007640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007644:	3b30      	subs	r3, #48	; 0x30
 8007646:	2b09      	cmp	r3, #9
 8007648:	d94e      	bls.n	80076e8 <_vfiprintf_r+0x1c4>
 800764a:	b1b0      	cbz	r0, 800767a <_vfiprintf_r+0x156>
 800764c:	9207      	str	r2, [sp, #28]
 800764e:	e014      	b.n	800767a <_vfiprintf_r+0x156>
 8007650:	eba0 0308 	sub.w	r3, r0, r8
 8007654:	fa09 f303 	lsl.w	r3, r9, r3
 8007658:	4313      	orrs	r3, r2
 800765a:	9304      	str	r3, [sp, #16]
 800765c:	46a2      	mov	sl, r4
 800765e:	e7d2      	b.n	8007606 <_vfiprintf_r+0xe2>
 8007660:	9b03      	ldr	r3, [sp, #12]
 8007662:	1d19      	adds	r1, r3, #4
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	9103      	str	r1, [sp, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	bfbb      	ittet	lt
 800766c:	425b      	neglt	r3, r3
 800766e:	f042 0202 	orrlt.w	r2, r2, #2
 8007672:	9307      	strge	r3, [sp, #28]
 8007674:	9307      	strlt	r3, [sp, #28]
 8007676:	bfb8      	it	lt
 8007678:	9204      	strlt	r2, [sp, #16]
 800767a:	7823      	ldrb	r3, [r4, #0]
 800767c:	2b2e      	cmp	r3, #46	; 0x2e
 800767e:	d10c      	bne.n	800769a <_vfiprintf_r+0x176>
 8007680:	7863      	ldrb	r3, [r4, #1]
 8007682:	2b2a      	cmp	r3, #42	; 0x2a
 8007684:	d135      	bne.n	80076f2 <_vfiprintf_r+0x1ce>
 8007686:	9b03      	ldr	r3, [sp, #12]
 8007688:	1d1a      	adds	r2, r3, #4
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	9203      	str	r2, [sp, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	bfb8      	it	lt
 8007692:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007696:	3402      	adds	r4, #2
 8007698:	9305      	str	r3, [sp, #20]
 800769a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007780 <_vfiprintf_r+0x25c>
 800769e:	7821      	ldrb	r1, [r4, #0]
 80076a0:	2203      	movs	r2, #3
 80076a2:	4650      	mov	r0, sl
 80076a4:	f7f8 fd9c 	bl	80001e0 <memchr>
 80076a8:	b140      	cbz	r0, 80076bc <_vfiprintf_r+0x198>
 80076aa:	2340      	movs	r3, #64	; 0x40
 80076ac:	eba0 000a 	sub.w	r0, r0, sl
 80076b0:	fa03 f000 	lsl.w	r0, r3, r0
 80076b4:	9b04      	ldr	r3, [sp, #16]
 80076b6:	4303      	orrs	r3, r0
 80076b8:	3401      	adds	r4, #1
 80076ba:	9304      	str	r3, [sp, #16]
 80076bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c0:	482c      	ldr	r0, [pc, #176]	; (8007774 <_vfiprintf_r+0x250>)
 80076c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076c6:	2206      	movs	r2, #6
 80076c8:	f7f8 fd8a 	bl	80001e0 <memchr>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d03f      	beq.n	8007750 <_vfiprintf_r+0x22c>
 80076d0:	4b29      	ldr	r3, [pc, #164]	; (8007778 <_vfiprintf_r+0x254>)
 80076d2:	bb1b      	cbnz	r3, 800771c <_vfiprintf_r+0x1f8>
 80076d4:	9b03      	ldr	r3, [sp, #12]
 80076d6:	3307      	adds	r3, #7
 80076d8:	f023 0307 	bic.w	r3, r3, #7
 80076dc:	3308      	adds	r3, #8
 80076de:	9303      	str	r3, [sp, #12]
 80076e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e2:	443b      	add	r3, r7
 80076e4:	9309      	str	r3, [sp, #36]	; 0x24
 80076e6:	e767      	b.n	80075b8 <_vfiprintf_r+0x94>
 80076e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ec:	460c      	mov	r4, r1
 80076ee:	2001      	movs	r0, #1
 80076f0:	e7a5      	b.n	800763e <_vfiprintf_r+0x11a>
 80076f2:	2300      	movs	r3, #0
 80076f4:	3401      	adds	r4, #1
 80076f6:	9305      	str	r3, [sp, #20]
 80076f8:	4619      	mov	r1, r3
 80076fa:	f04f 0c0a 	mov.w	ip, #10
 80076fe:	4620      	mov	r0, r4
 8007700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007704:	3a30      	subs	r2, #48	; 0x30
 8007706:	2a09      	cmp	r2, #9
 8007708:	d903      	bls.n	8007712 <_vfiprintf_r+0x1ee>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0c5      	beq.n	800769a <_vfiprintf_r+0x176>
 800770e:	9105      	str	r1, [sp, #20]
 8007710:	e7c3      	b.n	800769a <_vfiprintf_r+0x176>
 8007712:	fb0c 2101 	mla	r1, ip, r1, r2
 8007716:	4604      	mov	r4, r0
 8007718:	2301      	movs	r3, #1
 800771a:	e7f0      	b.n	80076fe <_vfiprintf_r+0x1da>
 800771c:	ab03      	add	r3, sp, #12
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	462a      	mov	r2, r5
 8007722:	4b16      	ldr	r3, [pc, #88]	; (800777c <_vfiprintf_r+0x258>)
 8007724:	a904      	add	r1, sp, #16
 8007726:	4630      	mov	r0, r6
 8007728:	f7fc fc06 	bl	8003f38 <_printf_float>
 800772c:	4607      	mov	r7, r0
 800772e:	1c78      	adds	r0, r7, #1
 8007730:	d1d6      	bne.n	80076e0 <_vfiprintf_r+0x1bc>
 8007732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007734:	07d9      	lsls	r1, r3, #31
 8007736:	d405      	bmi.n	8007744 <_vfiprintf_r+0x220>
 8007738:	89ab      	ldrh	r3, [r5, #12]
 800773a:	059a      	lsls	r2, r3, #22
 800773c:	d402      	bmi.n	8007744 <_vfiprintf_r+0x220>
 800773e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007740:	f7ff f8f2 	bl	8006928 <__retarget_lock_release_recursive>
 8007744:	89ab      	ldrh	r3, [r5, #12]
 8007746:	065b      	lsls	r3, r3, #25
 8007748:	f53f af12 	bmi.w	8007570 <_vfiprintf_r+0x4c>
 800774c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800774e:	e711      	b.n	8007574 <_vfiprintf_r+0x50>
 8007750:	ab03      	add	r3, sp, #12
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	462a      	mov	r2, r5
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <_vfiprintf_r+0x258>)
 8007758:	a904      	add	r1, sp, #16
 800775a:	4630      	mov	r0, r6
 800775c:	f7fc fe90 	bl	8004480 <_printf_i>
 8007760:	e7e4      	b.n	800772c <_vfiprintf_r+0x208>
 8007762:	bf00      	nop
 8007764:	08008030 	.word	0x08008030
 8007768:	08008050 	.word	0x08008050
 800776c:	08008010 	.word	0x08008010
 8007770:	08008244 	.word	0x08008244
 8007774:	0800824e 	.word	0x0800824e
 8007778:	08003f39 	.word	0x08003f39
 800777c:	080074ff 	.word	0x080074ff
 8007780:	0800824a 	.word	0x0800824a
 8007784:	00000000 	.word	0x00000000

08007788 <nan>:
 8007788:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007790 <nan+0x8>
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	00000000 	.word	0x00000000
 8007794:	7ff80000 	.word	0x7ff80000

08007798 <_sbrk_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4d06      	ldr	r5, [pc, #24]	; (80077b4 <_sbrk_r+0x1c>)
 800779c:	2300      	movs	r3, #0
 800779e:	4604      	mov	r4, r0
 80077a0:	4608      	mov	r0, r1
 80077a2:	602b      	str	r3, [r5, #0]
 80077a4:	f7f9 ff0a 	bl	80015bc <_sbrk>
 80077a8:	1c43      	adds	r3, r0, #1
 80077aa:	d102      	bne.n	80077b2 <_sbrk_r+0x1a>
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	b103      	cbz	r3, 80077b2 <_sbrk_r+0x1a>
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
 80077b4:	2000058c 	.word	0x2000058c

080077b8 <__sread>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	460c      	mov	r4, r1
 80077bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c0:	f000 fab8 	bl	8007d34 <_read_r>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	bfab      	itete	ge
 80077c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077ca:	89a3      	ldrhlt	r3, [r4, #12]
 80077cc:	181b      	addge	r3, r3, r0
 80077ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077d2:	bfac      	ite	ge
 80077d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80077d6:	81a3      	strhlt	r3, [r4, #12]
 80077d8:	bd10      	pop	{r4, pc}

080077da <__swrite>:
 80077da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077de:	461f      	mov	r7, r3
 80077e0:	898b      	ldrh	r3, [r1, #12]
 80077e2:	05db      	lsls	r3, r3, #23
 80077e4:	4605      	mov	r5, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	4616      	mov	r6, r2
 80077ea:	d505      	bpl.n	80077f8 <__swrite+0x1e>
 80077ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f0:	2302      	movs	r3, #2
 80077f2:	2200      	movs	r2, #0
 80077f4:	f000 fa1a 	bl	8007c2c <_lseek_r>
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007802:	81a3      	strh	r3, [r4, #12]
 8007804:	4632      	mov	r2, r6
 8007806:	463b      	mov	r3, r7
 8007808:	4628      	mov	r0, r5
 800780a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800780e:	f000 b88b 	b.w	8007928 <_write_r>

08007812 <__sseek>:
 8007812:	b510      	push	{r4, lr}
 8007814:	460c      	mov	r4, r1
 8007816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781a:	f000 fa07 	bl	8007c2c <_lseek_r>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	bf15      	itete	ne
 8007824:	6560      	strne	r0, [r4, #84]	; 0x54
 8007826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800782a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800782e:	81a3      	strheq	r3, [r4, #12]
 8007830:	bf18      	it	ne
 8007832:	81a3      	strhne	r3, [r4, #12]
 8007834:	bd10      	pop	{r4, pc}

08007836 <__sclose>:
 8007836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783a:	f000 b913 	b.w	8007a64 <_close_r>

0800783e <strncmp>:
 800783e:	b510      	push	{r4, lr}
 8007840:	b17a      	cbz	r2, 8007862 <strncmp+0x24>
 8007842:	4603      	mov	r3, r0
 8007844:	3901      	subs	r1, #1
 8007846:	1884      	adds	r4, r0, r2
 8007848:	f813 0b01 	ldrb.w	r0, [r3], #1
 800784c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007850:	4290      	cmp	r0, r2
 8007852:	d101      	bne.n	8007858 <strncmp+0x1a>
 8007854:	42a3      	cmp	r3, r4
 8007856:	d101      	bne.n	800785c <strncmp+0x1e>
 8007858:	1a80      	subs	r0, r0, r2
 800785a:	bd10      	pop	{r4, pc}
 800785c:	2800      	cmp	r0, #0
 800785e:	d1f3      	bne.n	8007848 <strncmp+0xa>
 8007860:	e7fa      	b.n	8007858 <strncmp+0x1a>
 8007862:	4610      	mov	r0, r2
 8007864:	e7f9      	b.n	800785a <strncmp+0x1c>
	...

08007868 <__swbuf_r>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	460e      	mov	r6, r1
 800786c:	4614      	mov	r4, r2
 800786e:	4605      	mov	r5, r0
 8007870:	b118      	cbz	r0, 800787a <__swbuf_r+0x12>
 8007872:	6983      	ldr	r3, [r0, #24]
 8007874:	b90b      	cbnz	r3, 800787a <__swbuf_r+0x12>
 8007876:	f7fe fc45 	bl	8006104 <__sinit>
 800787a:	4b21      	ldr	r3, [pc, #132]	; (8007900 <__swbuf_r+0x98>)
 800787c:	429c      	cmp	r4, r3
 800787e:	d12b      	bne.n	80078d8 <__swbuf_r+0x70>
 8007880:	686c      	ldr	r4, [r5, #4]
 8007882:	69a3      	ldr	r3, [r4, #24]
 8007884:	60a3      	str	r3, [r4, #8]
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	071a      	lsls	r2, r3, #28
 800788a:	d52f      	bpl.n	80078ec <__swbuf_r+0x84>
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	b36b      	cbz	r3, 80078ec <__swbuf_r+0x84>
 8007890:	6923      	ldr	r3, [r4, #16]
 8007892:	6820      	ldr	r0, [r4, #0]
 8007894:	1ac0      	subs	r0, r0, r3
 8007896:	6963      	ldr	r3, [r4, #20]
 8007898:	b2f6      	uxtb	r6, r6
 800789a:	4283      	cmp	r3, r0
 800789c:	4637      	mov	r7, r6
 800789e:	dc04      	bgt.n	80078aa <__swbuf_r+0x42>
 80078a0:	4621      	mov	r1, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	f000 f974 	bl	8007b90 <_fflush_r>
 80078a8:	bb30      	cbnz	r0, 80078f8 <__swbuf_r+0x90>
 80078aa:	68a3      	ldr	r3, [r4, #8]
 80078ac:	3b01      	subs	r3, #1
 80078ae:	60a3      	str	r3, [r4, #8]
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	6022      	str	r2, [r4, #0]
 80078b6:	701e      	strb	r6, [r3, #0]
 80078b8:	6963      	ldr	r3, [r4, #20]
 80078ba:	3001      	adds	r0, #1
 80078bc:	4283      	cmp	r3, r0
 80078be:	d004      	beq.n	80078ca <__swbuf_r+0x62>
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	07db      	lsls	r3, r3, #31
 80078c4:	d506      	bpl.n	80078d4 <__swbuf_r+0x6c>
 80078c6:	2e0a      	cmp	r6, #10
 80078c8:	d104      	bne.n	80078d4 <__swbuf_r+0x6c>
 80078ca:	4621      	mov	r1, r4
 80078cc:	4628      	mov	r0, r5
 80078ce:	f000 f95f 	bl	8007b90 <_fflush_r>
 80078d2:	b988      	cbnz	r0, 80078f8 <__swbuf_r+0x90>
 80078d4:	4638      	mov	r0, r7
 80078d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d8:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <__swbuf_r+0x9c>)
 80078da:	429c      	cmp	r4, r3
 80078dc:	d101      	bne.n	80078e2 <__swbuf_r+0x7a>
 80078de:	68ac      	ldr	r4, [r5, #8]
 80078e0:	e7cf      	b.n	8007882 <__swbuf_r+0x1a>
 80078e2:	4b09      	ldr	r3, [pc, #36]	; (8007908 <__swbuf_r+0xa0>)
 80078e4:	429c      	cmp	r4, r3
 80078e6:	bf08      	it	eq
 80078e8:	68ec      	ldreq	r4, [r5, #12]
 80078ea:	e7ca      	b.n	8007882 <__swbuf_r+0x1a>
 80078ec:	4621      	mov	r1, r4
 80078ee:	4628      	mov	r0, r5
 80078f0:	f000 f82c 	bl	800794c <__swsetup_r>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d0cb      	beq.n	8007890 <__swbuf_r+0x28>
 80078f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80078fc:	e7ea      	b.n	80078d4 <__swbuf_r+0x6c>
 80078fe:	bf00      	nop
 8007900:	08008030 	.word	0x08008030
 8007904:	08008050 	.word	0x08008050
 8007908:	08008010 	.word	0x08008010

0800790c <__ascii_wctomb>:
 800790c:	b149      	cbz	r1, 8007922 <__ascii_wctomb+0x16>
 800790e:	2aff      	cmp	r2, #255	; 0xff
 8007910:	bf85      	ittet	hi
 8007912:	238a      	movhi	r3, #138	; 0x8a
 8007914:	6003      	strhi	r3, [r0, #0]
 8007916:	700a      	strbls	r2, [r1, #0]
 8007918:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800791c:	bf98      	it	ls
 800791e:	2001      	movls	r0, #1
 8007920:	4770      	bx	lr
 8007922:	4608      	mov	r0, r1
 8007924:	4770      	bx	lr
	...

08007928 <_write_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4d07      	ldr	r5, [pc, #28]	; (8007948 <_write_r+0x20>)
 800792c:	4604      	mov	r4, r0
 800792e:	4608      	mov	r0, r1
 8007930:	4611      	mov	r1, r2
 8007932:	2200      	movs	r2, #0
 8007934:	602a      	str	r2, [r5, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	f7f9 fdef 	bl	800151a <_write>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_write_r+0x1e>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b103      	cbz	r3, 8007946 <_write_r+0x1e>
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	2000058c 	.word	0x2000058c

0800794c <__swsetup_r>:
 800794c:	4b32      	ldr	r3, [pc, #200]	; (8007a18 <__swsetup_r+0xcc>)
 800794e:	b570      	push	{r4, r5, r6, lr}
 8007950:	681d      	ldr	r5, [r3, #0]
 8007952:	4606      	mov	r6, r0
 8007954:	460c      	mov	r4, r1
 8007956:	b125      	cbz	r5, 8007962 <__swsetup_r+0x16>
 8007958:	69ab      	ldr	r3, [r5, #24]
 800795a:	b913      	cbnz	r3, 8007962 <__swsetup_r+0x16>
 800795c:	4628      	mov	r0, r5
 800795e:	f7fe fbd1 	bl	8006104 <__sinit>
 8007962:	4b2e      	ldr	r3, [pc, #184]	; (8007a1c <__swsetup_r+0xd0>)
 8007964:	429c      	cmp	r4, r3
 8007966:	d10f      	bne.n	8007988 <__swsetup_r+0x3c>
 8007968:	686c      	ldr	r4, [r5, #4]
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007970:	0719      	lsls	r1, r3, #28
 8007972:	d42c      	bmi.n	80079ce <__swsetup_r+0x82>
 8007974:	06dd      	lsls	r5, r3, #27
 8007976:	d411      	bmi.n	800799c <__swsetup_r+0x50>
 8007978:	2309      	movs	r3, #9
 800797a:	6033      	str	r3, [r6, #0]
 800797c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007980:	81a3      	strh	r3, [r4, #12]
 8007982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007986:	e03e      	b.n	8007a06 <__swsetup_r+0xba>
 8007988:	4b25      	ldr	r3, [pc, #148]	; (8007a20 <__swsetup_r+0xd4>)
 800798a:	429c      	cmp	r4, r3
 800798c:	d101      	bne.n	8007992 <__swsetup_r+0x46>
 800798e:	68ac      	ldr	r4, [r5, #8]
 8007990:	e7eb      	b.n	800796a <__swsetup_r+0x1e>
 8007992:	4b24      	ldr	r3, [pc, #144]	; (8007a24 <__swsetup_r+0xd8>)
 8007994:	429c      	cmp	r4, r3
 8007996:	bf08      	it	eq
 8007998:	68ec      	ldreq	r4, [r5, #12]
 800799a:	e7e6      	b.n	800796a <__swsetup_r+0x1e>
 800799c:	0758      	lsls	r0, r3, #29
 800799e:	d512      	bpl.n	80079c6 <__swsetup_r+0x7a>
 80079a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079a2:	b141      	cbz	r1, 80079b6 <__swsetup_r+0x6a>
 80079a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079a8:	4299      	cmp	r1, r3
 80079aa:	d002      	beq.n	80079b2 <__swsetup_r+0x66>
 80079ac:	4630      	mov	r0, r6
 80079ae:	f7ff fcaf 	bl	8007310 <_free_r>
 80079b2:	2300      	movs	r3, #0
 80079b4:	6363      	str	r3, [r4, #52]	; 0x34
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079bc:	81a3      	strh	r3, [r4, #12]
 80079be:	2300      	movs	r3, #0
 80079c0:	6063      	str	r3, [r4, #4]
 80079c2:	6923      	ldr	r3, [r4, #16]
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f043 0308 	orr.w	r3, r3, #8
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	6923      	ldr	r3, [r4, #16]
 80079d0:	b94b      	cbnz	r3, 80079e6 <__swsetup_r+0x9a>
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079dc:	d003      	beq.n	80079e6 <__swsetup_r+0x9a>
 80079de:	4621      	mov	r1, r4
 80079e0:	4630      	mov	r0, r6
 80079e2:	f000 f95b 	bl	8007c9c <__smakebuf_r>
 80079e6:	89a0      	ldrh	r0, [r4, #12]
 80079e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079ec:	f010 0301 	ands.w	r3, r0, #1
 80079f0:	d00a      	beq.n	8007a08 <__swsetup_r+0xbc>
 80079f2:	2300      	movs	r3, #0
 80079f4:	60a3      	str	r3, [r4, #8]
 80079f6:	6963      	ldr	r3, [r4, #20]
 80079f8:	425b      	negs	r3, r3
 80079fa:	61a3      	str	r3, [r4, #24]
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	b943      	cbnz	r3, 8007a12 <__swsetup_r+0xc6>
 8007a00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a04:	d1ba      	bne.n	800797c <__swsetup_r+0x30>
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	0781      	lsls	r1, r0, #30
 8007a0a:	bf58      	it	pl
 8007a0c:	6963      	ldrpl	r3, [r4, #20]
 8007a0e:	60a3      	str	r3, [r4, #8]
 8007a10:	e7f4      	b.n	80079fc <__swsetup_r+0xb0>
 8007a12:	2000      	movs	r0, #0
 8007a14:	e7f7      	b.n	8007a06 <__swsetup_r+0xba>
 8007a16:	bf00      	nop
 8007a18:	2000000c 	.word	0x2000000c
 8007a1c:	08008030 	.word	0x08008030
 8007a20:	08008050 	.word	0x08008050
 8007a24:	08008010 	.word	0x08008010

08007a28 <__assert_func>:
 8007a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a2a:	4614      	mov	r4, r2
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <__assert_func+0x2c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4605      	mov	r5, r0
 8007a34:	68d8      	ldr	r0, [r3, #12]
 8007a36:	b14c      	cbz	r4, 8007a4c <__assert_func+0x24>
 8007a38:	4b07      	ldr	r3, [pc, #28]	; (8007a58 <__assert_func+0x30>)
 8007a3a:	9100      	str	r1, [sp, #0]
 8007a3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a40:	4906      	ldr	r1, [pc, #24]	; (8007a5c <__assert_func+0x34>)
 8007a42:	462b      	mov	r3, r5
 8007a44:	f000 f8e0 	bl	8007c08 <fiprintf>
 8007a48:	f000 f986 	bl	8007d58 <abort>
 8007a4c:	4b04      	ldr	r3, [pc, #16]	; (8007a60 <__assert_func+0x38>)
 8007a4e:	461c      	mov	r4, r3
 8007a50:	e7f3      	b.n	8007a3a <__assert_func+0x12>
 8007a52:	bf00      	nop
 8007a54:	2000000c 	.word	0x2000000c
 8007a58:	08008255 	.word	0x08008255
 8007a5c:	08008262 	.word	0x08008262
 8007a60:	08008290 	.word	0x08008290

08007a64 <_close_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	4d06      	ldr	r5, [pc, #24]	; (8007a80 <_close_r+0x1c>)
 8007a68:	2300      	movs	r3, #0
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	4608      	mov	r0, r1
 8007a6e:	602b      	str	r3, [r5, #0]
 8007a70:	f7f9 fd6f 	bl	8001552 <_close>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d102      	bne.n	8007a7e <_close_r+0x1a>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	b103      	cbz	r3, 8007a7e <_close_r+0x1a>
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	bd38      	pop	{r3, r4, r5, pc}
 8007a80:	2000058c 	.word	0x2000058c

08007a84 <__sflush_r>:
 8007a84:	898a      	ldrh	r2, [r1, #12]
 8007a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	0710      	lsls	r0, r2, #28
 8007a8e:	460c      	mov	r4, r1
 8007a90:	d458      	bmi.n	8007b44 <__sflush_r+0xc0>
 8007a92:	684b      	ldr	r3, [r1, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dc05      	bgt.n	8007aa4 <__sflush_r+0x20>
 8007a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dc02      	bgt.n	8007aa4 <__sflush_r+0x20>
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aa6:	2e00      	cmp	r6, #0
 8007aa8:	d0f9      	beq.n	8007a9e <__sflush_r+0x1a>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ab0:	682f      	ldr	r7, [r5, #0]
 8007ab2:	602b      	str	r3, [r5, #0]
 8007ab4:	d032      	beq.n	8007b1c <__sflush_r+0x98>
 8007ab6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ab8:	89a3      	ldrh	r3, [r4, #12]
 8007aba:	075a      	lsls	r2, r3, #29
 8007abc:	d505      	bpl.n	8007aca <__sflush_r+0x46>
 8007abe:	6863      	ldr	r3, [r4, #4]
 8007ac0:	1ac0      	subs	r0, r0, r3
 8007ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ac4:	b10b      	cbz	r3, 8007aca <__sflush_r+0x46>
 8007ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ac8:	1ac0      	subs	r0, r0, r3
 8007aca:	2300      	movs	r3, #0
 8007acc:	4602      	mov	r2, r0
 8007ace:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ad0:	6a21      	ldr	r1, [r4, #32]
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	47b0      	blx	r6
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	d106      	bne.n	8007aea <__sflush_r+0x66>
 8007adc:	6829      	ldr	r1, [r5, #0]
 8007ade:	291d      	cmp	r1, #29
 8007ae0:	d82c      	bhi.n	8007b3c <__sflush_r+0xb8>
 8007ae2:	4a2a      	ldr	r2, [pc, #168]	; (8007b8c <__sflush_r+0x108>)
 8007ae4:	40ca      	lsrs	r2, r1
 8007ae6:	07d6      	lsls	r6, r2, #31
 8007ae8:	d528      	bpl.n	8007b3c <__sflush_r+0xb8>
 8007aea:	2200      	movs	r2, #0
 8007aec:	6062      	str	r2, [r4, #4]
 8007aee:	04d9      	lsls	r1, r3, #19
 8007af0:	6922      	ldr	r2, [r4, #16]
 8007af2:	6022      	str	r2, [r4, #0]
 8007af4:	d504      	bpl.n	8007b00 <__sflush_r+0x7c>
 8007af6:	1c42      	adds	r2, r0, #1
 8007af8:	d101      	bne.n	8007afe <__sflush_r+0x7a>
 8007afa:	682b      	ldr	r3, [r5, #0]
 8007afc:	b903      	cbnz	r3, 8007b00 <__sflush_r+0x7c>
 8007afe:	6560      	str	r0, [r4, #84]	; 0x54
 8007b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b02:	602f      	str	r7, [r5, #0]
 8007b04:	2900      	cmp	r1, #0
 8007b06:	d0ca      	beq.n	8007a9e <__sflush_r+0x1a>
 8007b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	d002      	beq.n	8007b16 <__sflush_r+0x92>
 8007b10:	4628      	mov	r0, r5
 8007b12:	f7ff fbfd 	bl	8007310 <_free_r>
 8007b16:	2000      	movs	r0, #0
 8007b18:	6360      	str	r0, [r4, #52]	; 0x34
 8007b1a:	e7c1      	b.n	8007aa0 <__sflush_r+0x1c>
 8007b1c:	6a21      	ldr	r1, [r4, #32]
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4628      	mov	r0, r5
 8007b22:	47b0      	blx	r6
 8007b24:	1c41      	adds	r1, r0, #1
 8007b26:	d1c7      	bne.n	8007ab8 <__sflush_r+0x34>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d0c4      	beq.n	8007ab8 <__sflush_r+0x34>
 8007b2e:	2b1d      	cmp	r3, #29
 8007b30:	d001      	beq.n	8007b36 <__sflush_r+0xb2>
 8007b32:	2b16      	cmp	r3, #22
 8007b34:	d101      	bne.n	8007b3a <__sflush_r+0xb6>
 8007b36:	602f      	str	r7, [r5, #0]
 8007b38:	e7b1      	b.n	8007a9e <__sflush_r+0x1a>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	e7ad      	b.n	8007aa0 <__sflush_r+0x1c>
 8007b44:	690f      	ldr	r7, [r1, #16]
 8007b46:	2f00      	cmp	r7, #0
 8007b48:	d0a9      	beq.n	8007a9e <__sflush_r+0x1a>
 8007b4a:	0793      	lsls	r3, r2, #30
 8007b4c:	680e      	ldr	r6, [r1, #0]
 8007b4e:	bf08      	it	eq
 8007b50:	694b      	ldreq	r3, [r1, #20]
 8007b52:	600f      	str	r7, [r1, #0]
 8007b54:	bf18      	it	ne
 8007b56:	2300      	movne	r3, #0
 8007b58:	eba6 0807 	sub.w	r8, r6, r7
 8007b5c:	608b      	str	r3, [r1, #8]
 8007b5e:	f1b8 0f00 	cmp.w	r8, #0
 8007b62:	dd9c      	ble.n	8007a9e <__sflush_r+0x1a>
 8007b64:	6a21      	ldr	r1, [r4, #32]
 8007b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b68:	4643      	mov	r3, r8
 8007b6a:	463a      	mov	r2, r7
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	47b0      	blx	r6
 8007b70:	2800      	cmp	r0, #0
 8007b72:	dc06      	bgt.n	8007b82 <__sflush_r+0xfe>
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b80:	e78e      	b.n	8007aa0 <__sflush_r+0x1c>
 8007b82:	4407      	add	r7, r0
 8007b84:	eba8 0800 	sub.w	r8, r8, r0
 8007b88:	e7e9      	b.n	8007b5e <__sflush_r+0xda>
 8007b8a:	bf00      	nop
 8007b8c:	20400001 	.word	0x20400001

08007b90 <_fflush_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	690b      	ldr	r3, [r1, #16]
 8007b94:	4605      	mov	r5, r0
 8007b96:	460c      	mov	r4, r1
 8007b98:	b913      	cbnz	r3, 8007ba0 <_fflush_r+0x10>
 8007b9a:	2500      	movs	r5, #0
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	b118      	cbz	r0, 8007baa <_fflush_r+0x1a>
 8007ba2:	6983      	ldr	r3, [r0, #24]
 8007ba4:	b90b      	cbnz	r3, 8007baa <_fflush_r+0x1a>
 8007ba6:	f7fe faad 	bl	8006104 <__sinit>
 8007baa:	4b14      	ldr	r3, [pc, #80]	; (8007bfc <_fflush_r+0x6c>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	d11b      	bne.n	8007be8 <_fflush_r+0x58>
 8007bb0:	686c      	ldr	r4, [r5, #4]
 8007bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0ef      	beq.n	8007b9a <_fflush_r+0xa>
 8007bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bbc:	07d0      	lsls	r0, r2, #31
 8007bbe:	d404      	bmi.n	8007bca <_fflush_r+0x3a>
 8007bc0:	0599      	lsls	r1, r3, #22
 8007bc2:	d402      	bmi.n	8007bca <_fflush_r+0x3a>
 8007bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bc6:	f7fe feae 	bl	8006926 <__retarget_lock_acquire_recursive>
 8007bca:	4628      	mov	r0, r5
 8007bcc:	4621      	mov	r1, r4
 8007bce:	f7ff ff59 	bl	8007a84 <__sflush_r>
 8007bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bd4:	07da      	lsls	r2, r3, #31
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	d4e0      	bmi.n	8007b9c <_fflush_r+0xc>
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	059b      	lsls	r3, r3, #22
 8007bde:	d4dd      	bmi.n	8007b9c <_fflush_r+0xc>
 8007be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007be2:	f7fe fea1 	bl	8006928 <__retarget_lock_release_recursive>
 8007be6:	e7d9      	b.n	8007b9c <_fflush_r+0xc>
 8007be8:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <_fflush_r+0x70>)
 8007bea:	429c      	cmp	r4, r3
 8007bec:	d101      	bne.n	8007bf2 <_fflush_r+0x62>
 8007bee:	68ac      	ldr	r4, [r5, #8]
 8007bf0:	e7df      	b.n	8007bb2 <_fflush_r+0x22>
 8007bf2:	4b04      	ldr	r3, [pc, #16]	; (8007c04 <_fflush_r+0x74>)
 8007bf4:	429c      	cmp	r4, r3
 8007bf6:	bf08      	it	eq
 8007bf8:	68ec      	ldreq	r4, [r5, #12]
 8007bfa:	e7da      	b.n	8007bb2 <_fflush_r+0x22>
 8007bfc:	08008030 	.word	0x08008030
 8007c00:	08008050 	.word	0x08008050
 8007c04:	08008010 	.word	0x08008010

08007c08 <fiprintf>:
 8007c08:	b40e      	push	{r1, r2, r3}
 8007c0a:	b503      	push	{r0, r1, lr}
 8007c0c:	4601      	mov	r1, r0
 8007c0e:	ab03      	add	r3, sp, #12
 8007c10:	4805      	ldr	r0, [pc, #20]	; (8007c28 <fiprintf+0x20>)
 8007c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c16:	6800      	ldr	r0, [r0, #0]
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	f7ff fc83 	bl	8007524 <_vfiprintf_r>
 8007c1e:	b002      	add	sp, #8
 8007c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c24:	b003      	add	sp, #12
 8007c26:	4770      	bx	lr
 8007c28:	2000000c 	.word	0x2000000c

08007c2c <_lseek_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4d07      	ldr	r5, [pc, #28]	; (8007c4c <_lseek_r+0x20>)
 8007c30:	4604      	mov	r4, r0
 8007c32:	4608      	mov	r0, r1
 8007c34:	4611      	mov	r1, r2
 8007c36:	2200      	movs	r2, #0
 8007c38:	602a      	str	r2, [r5, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	f7f9 fcb0 	bl	80015a0 <_lseek>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_lseek_r+0x1e>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_lseek_r+0x1e>
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	2000058c 	.word	0x2000058c

08007c50 <__swhatbuf_r>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	460e      	mov	r6, r1
 8007c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c58:	2900      	cmp	r1, #0
 8007c5a:	b096      	sub	sp, #88	; 0x58
 8007c5c:	4614      	mov	r4, r2
 8007c5e:	461d      	mov	r5, r3
 8007c60:	da08      	bge.n	8007c74 <__swhatbuf_r+0x24>
 8007c62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	061a      	lsls	r2, r3, #24
 8007c6c:	d410      	bmi.n	8007c90 <__swhatbuf_r+0x40>
 8007c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c72:	e00e      	b.n	8007c92 <__swhatbuf_r+0x42>
 8007c74:	466a      	mov	r2, sp
 8007c76:	f000 f877 	bl	8007d68 <_fstat_r>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	dbf1      	blt.n	8007c62 <__swhatbuf_r+0x12>
 8007c7e:	9a01      	ldr	r2, [sp, #4]
 8007c80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c88:	425a      	negs	r2, r3
 8007c8a:	415a      	adcs	r2, r3
 8007c8c:	602a      	str	r2, [r5, #0]
 8007c8e:	e7ee      	b.n	8007c6e <__swhatbuf_r+0x1e>
 8007c90:	2340      	movs	r3, #64	; 0x40
 8007c92:	2000      	movs	r0, #0
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	b016      	add	sp, #88	; 0x58
 8007c98:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c9c <__smakebuf_r>:
 8007c9c:	898b      	ldrh	r3, [r1, #12]
 8007c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ca0:	079d      	lsls	r5, r3, #30
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	d507      	bpl.n	8007cb8 <__smakebuf_r+0x1c>
 8007ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	6123      	str	r3, [r4, #16]
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	6163      	str	r3, [r4, #20]
 8007cb4:	b002      	add	sp, #8
 8007cb6:	bd70      	pop	{r4, r5, r6, pc}
 8007cb8:	ab01      	add	r3, sp, #4
 8007cba:	466a      	mov	r2, sp
 8007cbc:	f7ff ffc8 	bl	8007c50 <__swhatbuf_r>
 8007cc0:	9900      	ldr	r1, [sp, #0]
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	f7ff fb8f 	bl	80073e8 <_malloc_r>
 8007cca:	b948      	cbnz	r0, 8007ce0 <__smakebuf_r+0x44>
 8007ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd0:	059a      	lsls	r2, r3, #22
 8007cd2:	d4ef      	bmi.n	8007cb4 <__smakebuf_r+0x18>
 8007cd4:	f023 0303 	bic.w	r3, r3, #3
 8007cd8:	f043 0302 	orr.w	r3, r3, #2
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	e7e3      	b.n	8007ca8 <__smakebuf_r+0xc>
 8007ce0:	4b0d      	ldr	r3, [pc, #52]	; (8007d18 <__smakebuf_r+0x7c>)
 8007ce2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ce4:	89a3      	ldrh	r3, [r4, #12]
 8007ce6:	6020      	str	r0, [r4, #0]
 8007ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cec:	81a3      	strh	r3, [r4, #12]
 8007cee:	9b00      	ldr	r3, [sp, #0]
 8007cf0:	6163      	str	r3, [r4, #20]
 8007cf2:	9b01      	ldr	r3, [sp, #4]
 8007cf4:	6120      	str	r0, [r4, #16]
 8007cf6:	b15b      	cbz	r3, 8007d10 <__smakebuf_r+0x74>
 8007cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f000 f845 	bl	8007d8c <_isatty_r>
 8007d02:	b128      	cbz	r0, 8007d10 <__smakebuf_r+0x74>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f023 0303 	bic.w	r3, r3, #3
 8007d0a:	f043 0301 	orr.w	r3, r3, #1
 8007d0e:	81a3      	strh	r3, [r4, #12]
 8007d10:	89a0      	ldrh	r0, [r4, #12]
 8007d12:	4305      	orrs	r5, r0
 8007d14:	81a5      	strh	r5, [r4, #12]
 8007d16:	e7cd      	b.n	8007cb4 <__smakebuf_r+0x18>
 8007d18:	0800609d 	.word	0x0800609d

08007d1c <__malloc_lock>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	; (8007d24 <__malloc_lock+0x8>)
 8007d1e:	f7fe be02 	b.w	8006926 <__retarget_lock_acquire_recursive>
 8007d22:	bf00      	nop
 8007d24:	20000580 	.word	0x20000580

08007d28 <__malloc_unlock>:
 8007d28:	4801      	ldr	r0, [pc, #4]	; (8007d30 <__malloc_unlock+0x8>)
 8007d2a:	f7fe bdfd 	b.w	8006928 <__retarget_lock_release_recursive>
 8007d2e:	bf00      	nop
 8007d30:	20000580 	.word	0x20000580

08007d34 <_read_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4d07      	ldr	r5, [pc, #28]	; (8007d54 <_read_r+0x20>)
 8007d38:	4604      	mov	r4, r0
 8007d3a:	4608      	mov	r0, r1
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	2200      	movs	r2, #0
 8007d40:	602a      	str	r2, [r5, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	f7f9 fbcc 	bl	80014e0 <_read>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_read_r+0x1e>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_read_r+0x1e>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	2000058c 	.word	0x2000058c

08007d58 <abort>:
 8007d58:	b508      	push	{r3, lr}
 8007d5a:	2006      	movs	r0, #6
 8007d5c:	f000 f84e 	bl	8007dfc <raise>
 8007d60:	2001      	movs	r0, #1
 8007d62:	f7f9 fbb3 	bl	80014cc <_exit>
	...

08007d68 <_fstat_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4d07      	ldr	r5, [pc, #28]	; (8007d88 <_fstat_r+0x20>)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	4611      	mov	r1, r2
 8007d74:	602b      	str	r3, [r5, #0]
 8007d76:	f7f9 fbf8 	bl	800156a <_fstat>
 8007d7a:	1c43      	adds	r3, r0, #1
 8007d7c:	d102      	bne.n	8007d84 <_fstat_r+0x1c>
 8007d7e:	682b      	ldr	r3, [r5, #0]
 8007d80:	b103      	cbz	r3, 8007d84 <_fstat_r+0x1c>
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	bd38      	pop	{r3, r4, r5, pc}
 8007d86:	bf00      	nop
 8007d88:	2000058c 	.word	0x2000058c

08007d8c <_isatty_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4d06      	ldr	r5, [pc, #24]	; (8007da8 <_isatty_r+0x1c>)
 8007d90:	2300      	movs	r3, #0
 8007d92:	4604      	mov	r4, r0
 8007d94:	4608      	mov	r0, r1
 8007d96:	602b      	str	r3, [r5, #0]
 8007d98:	f7f9 fbf7 	bl	800158a <_isatty>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d102      	bne.n	8007da6 <_isatty_r+0x1a>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	b103      	cbz	r3, 8007da6 <_isatty_r+0x1a>
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	2000058c 	.word	0x2000058c

08007dac <_raise_r>:
 8007dac:	291f      	cmp	r1, #31
 8007dae:	b538      	push	{r3, r4, r5, lr}
 8007db0:	4604      	mov	r4, r0
 8007db2:	460d      	mov	r5, r1
 8007db4:	d904      	bls.n	8007dc0 <_raise_r+0x14>
 8007db6:	2316      	movs	r3, #22
 8007db8:	6003      	str	r3, [r0, #0]
 8007dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007dc2:	b112      	cbz	r2, 8007dca <_raise_r+0x1e>
 8007dc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dc8:	b94b      	cbnz	r3, 8007dde <_raise_r+0x32>
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 f830 	bl	8007e30 <_getpid_r>
 8007dd0:	462a      	mov	r2, r5
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dda:	f000 b817 	b.w	8007e0c <_kill_r>
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d00a      	beq.n	8007df8 <_raise_r+0x4c>
 8007de2:	1c59      	adds	r1, r3, #1
 8007de4:	d103      	bne.n	8007dee <_raise_r+0x42>
 8007de6:	2316      	movs	r3, #22
 8007de8:	6003      	str	r3, [r0, #0]
 8007dea:	2001      	movs	r0, #1
 8007dec:	e7e7      	b.n	8007dbe <_raise_r+0x12>
 8007dee:	2400      	movs	r4, #0
 8007df0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007df4:	4628      	mov	r0, r5
 8007df6:	4798      	blx	r3
 8007df8:	2000      	movs	r0, #0
 8007dfa:	e7e0      	b.n	8007dbe <_raise_r+0x12>

08007dfc <raise>:
 8007dfc:	4b02      	ldr	r3, [pc, #8]	; (8007e08 <raise+0xc>)
 8007dfe:	4601      	mov	r1, r0
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	f7ff bfd3 	b.w	8007dac <_raise_r>
 8007e06:	bf00      	nop
 8007e08:	2000000c 	.word	0x2000000c

08007e0c <_kill_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d07      	ldr	r5, [pc, #28]	; (8007e2c <_kill_r+0x20>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	4611      	mov	r1, r2
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	f7f9 fb47 	bl	80014ac <_kill>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d102      	bne.n	8007e28 <_kill_r+0x1c>
 8007e22:	682b      	ldr	r3, [r5, #0]
 8007e24:	b103      	cbz	r3, 8007e28 <_kill_r+0x1c>
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	bd38      	pop	{r3, r4, r5, pc}
 8007e2a:	bf00      	nop
 8007e2c:	2000058c 	.word	0x2000058c

08007e30 <_getpid_r>:
 8007e30:	f7f9 bb34 	b.w	800149c <_getpid>

08007e34 <_init>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	bf00      	nop
 8007e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3a:	bc08      	pop	{r3}
 8007e3c:	469e      	mov	lr, r3
 8007e3e:	4770      	bx	lr

08007e40 <_fini>:
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	bf00      	nop
 8007e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e46:	bc08      	pop	{r3}
 8007e48:	469e      	mov	lr, r3
 8007e4a:	4770      	bx	lr
