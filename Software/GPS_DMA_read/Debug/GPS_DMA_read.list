
GPS_DMA_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006498  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08006668  08006668  00016668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a64  08006a64  00020438  2**0
                  CONTENTS
  4 .ARM          00000008  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a6c  08006a6c  00020438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000438  20000000  08006a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000438  08006eac  00020438  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08006eac  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a94  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8a  00000000  00000000  00029efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021acc  00000000  00000000  0002c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a572  00000000  00000000  0004e3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9b18  00000000  00000000  0005891e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb8  00000000  00000000  00122488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000438 	.word	0x20000438
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006650 	.word	0x08006650

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000043c 	.word	0x2000043c
 800020c:	08006650 	.word	0x08006650

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ef4:	1d39      	adds	r1, r7, #4
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000efa:	2201      	movs	r2, #1
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <__io_putchar+0x20>)
 8000efe:	f002 f878 	bl	8002ff2 <HAL_UART_Transmit>
  return ch;
 8000f02:	687b      	ldr	r3, [r7, #4]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000498 	.word	0x20000498

08000f10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, UART1_rxBuffer, BUFFER_LENGTH, HAL_MAX_DELAY);
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f1c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000f20:	4906      	ldr	r1, [pc, #24]	; (8000f3c <HAL_UART_RxCpltCallback+0x2c>)
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <HAL_UART_RxCpltCallback+0x30>)
 8000f24:	f002 f865 	bl	8002ff2 <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart1, &UART1_rxBuffer[1], BUFFER_LENGTH);
 8000f28:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000f2c:	4905      	ldr	r1, [pc, #20]	; (8000f44 <HAL_UART_RxCpltCallback+0x34>)
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <HAL_UART_RxCpltCallback+0x38>)
 8000f30:	f002 f8f1 	bl	8003116 <HAL_UART_Receive_DMA>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000498 	.word	0x20000498
 8000f44:	20000001 	.word	0x20000001
 8000f48:	20000454 	.word	0x20000454

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fb78 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f814 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f8f4 	bl	8001144 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5c:	f000 f8d2 	bl	8001104 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f60:	f000 f8a6 	bl	80010b0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f64:	f000 f87a 	bl	800105c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&huart1, &UART1_rxBuffer[1], BUFFER_LENGTH);
 8000f68:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000f6c:	4902      	ldr	r1, [pc, #8]	; (8000f78 <main+0x2c>)
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <main+0x30>)
 8000f70:	f002 f8d1 	bl	8003116 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <main+0x28>
 8000f76:	bf00      	nop
 8000f78:	20000001 	.word	0x20000001
 8000f7c:	20000454 	.word	0x20000454

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	; 0x50
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	2234      	movs	r2, #52	; 0x34
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 fe40 	bl	8003c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <SystemClock_Config+0xd4>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a29      	ldr	r2, [pc, #164]	; (8001054 <SystemClock_Config+0xd4>)
 8000fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <SystemClock_Config+0xd4>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <SystemClock_Config+0xd8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fcc:	4a22      	ldr	r2, [pc, #136]	; (8001058 <SystemClock_Config+0xd8>)
 8000fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b20      	ldr	r3, [pc, #128]	; (8001058 <SystemClock_Config+0xd8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fec:	2302      	movs	r3, #2
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ff8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ffc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ffe:	2304      	movs	r3, #4
 8001000:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001002:	2302      	movs	r3, #2
 8001004:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001006:	2302      	movs	r3, #2
 8001008:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fd04 	bl	8002a1c <HAL_RCC_OscConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800101a:	f000 f901 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101e:	230f      	movs	r3, #15
 8001020:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001022:	2302      	movs	r3, #2
 8001024:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	2102      	movs	r1, #2
 800103a:	4618      	mov	r0, r3
 800103c:	f001 f9a4 	bl	8002388 <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001046:	f000 f8eb 	bl	8001220 <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3750      	adds	r7, #80	; 0x50
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40007000 	.word	0x40007000

0800105c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <MX_USART1_UART_Init+0x50>)
 8001064:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001068:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800106c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_USART1_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_USART1_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001094:	f001 ff60 	bl	8002f58 <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800109e:	f000 f8bf 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000454 	.word	0x20000454
 80010ac:	40011000 	.word	0x40011000

080010b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_USART2_UART_Init+0x50>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e8:	f001 ff36 	bl	8002f58 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010f2:	f000 f895 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000498 	.word	0x20000498
 8001100:	40004400 	.word	0x40004400

08001104 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_DMA_Init+0x3c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <MX_DMA_Init+0x3c>)
 8001114:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_DMA_Init+0x3c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	203a      	movs	r0, #58	; 0x3a
 800112c:	f000 fbd7 	bl	80018de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001130:	203a      	movs	r0, #58	; 0x3a
 8001132:	f000 fbf0 	bl	8001916 <HAL_NVIC_EnableIRQ>

}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <MX_GPIO_Init+0xd0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2c      	ldr	r2, [pc, #176]	; (8001214 <MX_GPIO_Init+0xd0>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_GPIO_Init+0xd0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a25      	ldr	r2, [pc, #148]	; (8001214 <MX_GPIO_Init+0xd0>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_GPIO_Init+0xd0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <MX_GPIO_Init+0xd0>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_GPIO_Init+0xd0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <MX_GPIO_Init+0xd0>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2120      	movs	r1, #32
 80011ce:	4812      	ldr	r0, [pc, #72]	; (8001218 <MX_GPIO_Init+0xd4>)
 80011d0:	f001 f8c0 	bl	8002354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	480c      	ldr	r0, [pc, #48]	; (800121c <MX_GPIO_Init+0xd8>)
 80011ec:	f000 ff1e 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011f0:	2320      	movs	r3, #32
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_GPIO_Init+0xd4>)
 8001208:	f000 ff10 	bl	800202c <HAL_GPIO_Init>

}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020800 	.word	0x40020800

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_MspInit+0x4c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <HAL_MspInit+0x4c>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HAL_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_MspInit+0x4c>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_MspInit+0x4c>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800126a:	2007      	movs	r0, #7
 800126c:	f000 fb2c 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800

0800127c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a49      	ldr	r2, [pc, #292]	; (80013c0 <HAL_UART_MspInit+0x144>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d15b      	bne.n	8001356 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <HAL_UART_MspInit+0x148>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a47      	ldr	r2, [pc, #284]	; (80013c4 <HAL_UART_MspInit+0x148>)
 80012a8:	f043 0310 	orr.w	r3, r3, #16
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <HAL_UART_MspInit+0x148>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_UART_MspInit+0x148>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a40      	ldr	r2, [pc, #256]	; (80013c4 <HAL_UART_MspInit+0x148>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <HAL_UART_MspInit+0x148>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012e8:	2307      	movs	r3, #7
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4835      	ldr	r0, [pc, #212]	; (80013c8 <HAL_UART_MspInit+0x14c>)
 80012f4:	f000 fe9a 	bl	800202c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <HAL_UART_MspInit+0x150>)
 80012fa:	4a35      	ldr	r2, [pc, #212]	; (80013d0 <HAL_UART_MspInit+0x154>)
 80012fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_UART_MspInit+0x150>)
 8001300:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001304:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <HAL_UART_MspInit+0x150>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <HAL_UART_MspInit+0x150>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001312:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_UART_MspInit+0x150>)
 8001314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001318:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <HAL_UART_MspInit+0x150>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_UART_MspInit+0x150>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_UART_MspInit+0x150>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_UART_MspInit+0x150>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_UART_MspInit+0x150>)
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001338:	4824      	ldr	r0, [pc, #144]	; (80013cc <HAL_UART_MspInit+0x150>)
 800133a:	f000 fb07 	bl	800194c <HAL_DMA_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001344:	f7ff ff6c 	bl	8001220 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a20      	ldr	r2, [pc, #128]	; (80013cc <HAL_UART_MspInit+0x150>)
 800134c:	639a      	str	r2, [r3, #56]	; 0x38
 800134e:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <HAL_UART_MspInit+0x150>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001354:	e030      	b.n	80013b8 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <HAL_UART_MspInit+0x158>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d12b      	bne.n	80013b8 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_UART_MspInit+0x148>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <HAL_UART_MspInit+0x148>)
 800136a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136e:	6413      	str	r3, [r2, #64]	; 0x40
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_UART_MspInit+0x148>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_UART_MspInit+0x148>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <HAL_UART_MspInit+0x148>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6313      	str	r3, [r2, #48]	; 0x30
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_UART_MspInit+0x148>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001398:	230c      	movs	r3, #12
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a8:	2307      	movs	r3, #7
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_UART_MspInit+0x14c>)
 80013b4:	f000 fe3a 	bl	800202c <HAL_GPIO_Init>
}
 80013b8:	bf00      	nop
 80013ba:	3730      	adds	r7, #48	; 0x30
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40011000 	.word	0x40011000
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	200004dc 	.word	0x200004dc
 80013d0:	40026440 	.word	0x40026440
 80013d4:	40004400 	.word	0x40004400

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler+0x4>

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001424:	f000 f960 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <DMA2_Stream2_IRQHandler+0x10>)
 8001432:	f000 fb91 	bl	8001b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200004dc 	.word	0x200004dc

08001440 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return 1;
 8001444:	2301      	movs	r3, #1
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_kill>:

int _kill(int pid, int sig)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800145a:	f002 fbb1 	bl	8003bc0 <__errno>
 800145e:	4603      	mov	r3, r0
 8001460:	2216      	movs	r2, #22
 8001462:	601a      	str	r2, [r3, #0]
  return -1;
 8001464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_exit>:

void _exit (int status)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffe7 	bl	8001450 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001482:	e7fe      	b.n	8001482 <_exit+0x12>

08001484 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e00a      	b.n	80014ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001496:	f3af 8000 	nop.w
 800149a:	4601      	mov	r1, r0
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	b2ca      	uxtb	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf0      	blt.n	8001496 <_read+0x12>
  }

  return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	e009      	b.n	80014e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	60ba      	str	r2, [r7, #8]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fd07 	bl	8000eec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dbf1      	blt.n	80014d0 <_write+0x12>
  }
  return len;
 80014ec:	687b      	ldr	r3, [r7, #4]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_close>:

int _close(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151e:	605a      	str	r2, [r3, #4]
  return 0;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <_isatty>:

int _isatty(int file)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001568:	4a14      	ldr	r2, [pc, #80]	; (80015bc <_sbrk+0x5c>)
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <_sbrk+0x60>)
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <_sbrk+0x64>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <_sbrk+0x68>)
 8001580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	429a      	cmp	r2, r3
 800158e:	d207      	bcs.n	80015a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001590:	f002 fb16 	bl	8003bc0 <__errno>
 8001594:	4603      	mov	r3, r0
 8001596:	220c      	movs	r2, #12
 8001598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800159e:	e009      	b.n	80015b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <_sbrk+0x64>)
 80015b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20020000 	.word	0x20020000
 80015c0:	00000400 	.word	0x00000400
 80015c4:	2000053c 	.word	0x2000053c
 80015c8:	20000558 	.word	0x20000558

080015cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <SystemInit+0x20>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <SystemInit+0x20>)
 80015d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015f6:	490e      	ldr	r1, [pc, #56]	; (8001630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800160c:	4c0b      	ldr	r4, [pc, #44]	; (800163c <LoopFillZerobss+0x26>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800161a:	f7ff ffd7 	bl	80015cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161e:	f002 fad5 	bl	8003bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff fc93 	bl	8000f4c <main>
  bx  lr    
 8001626:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	20000438 	.word	0x20000438
  ldr r2, =_sidata
 8001634:	08006a74 	.word	0x08006a74
  ldr r2, =_sbss
 8001638:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 800163c:	20000554 	.word	0x20000554

08001640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_Init+0x40>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_Init+0x40>)
 800165a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x40>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f92b 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fdd8 	bl	800122c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f943 	bl	8001932 <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c4:	f000 f90b 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000025c 	.word	0x2000025c
 80016e0:	20000264 	.word	0x20000264
 80016e4:	20000260 	.word	0x20000260

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000264 	.word	0x20000264
 800170c:	20000540 	.word	0x20000540

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000540 	.word	0x20000540

08001728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175a:	4a04      	ldr	r2, [pc, #16]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	60d3      	str	r3, [r2, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <__NVIC_GetPriorityGrouping+0x18>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f003 0307 	and.w	r3, r3, #7
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	2b00      	cmp	r3, #0
 800179c:	db0b      	blt.n	80017b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	f003 021f 	and.w	r2, r3, #31
 80017a4:	4907      	ldr	r1, [pc, #28]	; (80017c4 <__NVIC_EnableIRQ+0x38>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	2001      	movs	r0, #1
 80017ae:	fa00 f202 	lsl.w	r2, r0, r2
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e100 	.word	0xe000e100

080017c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db0a      	blt.n	80017f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	490c      	ldr	r1, [pc, #48]	; (8001814 <__NVIC_SetPriority+0x4c>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f0:	e00a      	b.n	8001808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4908      	ldr	r1, [pc, #32]	; (8001818 <__NVIC_SetPriority+0x50>)
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3b04      	subs	r3, #4
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	440b      	add	r3, r1
 8001806:	761a      	strb	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	; 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f1c3 0307 	rsb	r3, r3, #7
 8001836:	2b04      	cmp	r3, #4
 8001838:	bf28      	it	cs
 800183a:	2304      	movcs	r3, #4
 800183c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	2b06      	cmp	r3, #6
 8001844:	d902      	bls.n	800184c <NVIC_EncodePriority+0x30>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3b03      	subs	r3, #3
 800184a:	e000      	b.n	800184e <NVIC_EncodePriority+0x32>
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001864:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43d9      	mvns	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	4313      	orrs	r3, r2
         );
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	; 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018a8:	f7ff ff8e 	bl	80017c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff29 	bl	8001728 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff3e 	bl	8001770 <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff8e 	bl	800181c <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5d 	bl	80017c8 <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff31 	bl	800178c <__NVIC_EnableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffa2 	bl	8001884 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff feda 	bl	8001710 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e099      	b.n	8001a9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001988:	e00f      	b.n	80019aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800198a:	f7ff fec1 	bl	8001710 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b05      	cmp	r3, #5
 8001996:	d908      	bls.n	80019aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2203      	movs	r2, #3
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e078      	b.n	8001a9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e8      	bne.n	800198a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <HAL_DMA_Init+0x158>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d107      	bne.n	8001a14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f023 0307 	bic.w	r3, r3, #7
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d117      	bne.n	8001a6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00e      	beq.n	8001a6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 fa6f 	bl	8001f34 <DMA_CheckFifoParam>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2240      	movs	r2, #64	; 0x40
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e016      	b.n	8001a9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fa26 	bl	8001ec8 <DMA_CalcBaseAndBitshift>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	223f      	movs	r2, #63	; 0x3f
 8001a86:	409a      	lsls	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	f010803f 	.word	0xf010803f

08001aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_DMA_Start_IT+0x26>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e040      	b.n	8001b50 <HAL_DMA_Start_IT+0xa8>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d12f      	bne.n	8001b42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f9b8 	bl	8001e6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	223f      	movs	r2, #63	; 0x3f
 8001b02:	409a      	lsls	r2, r3
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0216 	orr.w	r2, r2, #22
 8001b16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0208 	orr.w	r2, r2, #8
 8001b2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e005      	b.n	8001b4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b64:	4b8e      	ldr	r3, [pc, #568]	; (8001da0 <HAL_DMA_IRQHandler+0x248>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a8e      	ldr	r2, [pc, #568]	; (8001da4 <HAL_DMA_IRQHandler+0x24c>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a9b      	lsrs	r3, r3, #10
 8001b70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b82:	2208      	movs	r2, #8
 8001b84:	409a      	lsls	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01a      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc8:	2201      	movs	r2, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d012      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	2201      	movs	r2, #1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	f043 0202 	orr.w	r2, r3, #2
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	2204      	movs	r2, #4
 8001c00:	409a      	lsls	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	2210      	movs	r2, #16
 8001c36:	409a      	lsls	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d043      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03c      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	2210      	movs	r2, #16
 8001c54:	409a      	lsls	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d018      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d108      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d024      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
 8001c86:	e01f      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
 8001c98:	e016      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0208 	bic.w	r2, r2, #8
 8001cb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	2220      	movs	r2, #32
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 808f 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8087 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2220      	movs	r2, #32
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d136      	bne.n	8001d70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0216 	bic.w	r2, r2, #22
 8001d10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d103      	bne.n	8001d32 <HAL_DMA_IRQHandler+0x1da>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0208 	bic.w	r2, r2, #8
 8001d40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	223f      	movs	r2, #63	; 0x3f
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d07e      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
        }
        return;
 8001d6e:	e079      	b.n	8001e64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01d      	beq.n	8001dba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d031      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
 8001d9c:	e02c      	b.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
 8001d9e:	bf00      	nop
 8001da0:	2000025c 	.word	0x2000025c
 8001da4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d023      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
 8001db8:	e01e      	b.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10f      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0210 	bic.w	r2, r2, #16
 8001dd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d032      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d022      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2205      	movs	r2, #5
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d307      	bcc.n	8001e40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f2      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x2cc>
 8001e3e:	e000      	b.n	8001e42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	e000      	b.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e64:	bf00      	nop
    }
  }
}
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b40      	cmp	r3, #64	; 0x40
 8001e98:	d108      	bne.n	8001eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eaa:	e007      	b.n	8001ebc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	60da      	str	r2, [r3, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3b10      	subs	r3, #16
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <DMA_CalcBaseAndBitshift+0x64>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ee2:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <DMA_CalcBaseAndBitshift+0x68>)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d909      	bls.n	8001f0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001efe:	f023 0303 	bic.w	r3, r3, #3
 8001f02:	1d1a      	adds	r2, r3, #4
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	659a      	str	r2, [r3, #88]	; 0x58
 8001f08:	e007      	b.n	8001f1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	aaaaaaab 	.word	0xaaaaaaab
 8001f30:	08006680 	.word	0x08006680

08001f34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d11f      	bne.n	8001f8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d856      	bhi.n	8002002 <DMA_CheckFifoParam+0xce>
 8001f54:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <DMA_CheckFifoParam+0x28>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001f6d 	.word	0x08001f6d
 8001f60:	08001f7f 	.word	0x08001f7f
 8001f64:	08001f6d 	.word	0x08001f6d
 8001f68:	08002003 	.word	0x08002003
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d046      	beq.n	8002006 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f7c:	e043      	b.n	8002006 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f86:	d140      	bne.n	800200a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8c:	e03d      	b.n	800200a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f96:	d121      	bne.n	8001fdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d837      	bhi.n	800200e <DMA_CheckFifoParam+0xda>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <DMA_CheckFifoParam+0x70>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fbb 	.word	0x08001fbb
 8001fac:	08001fb5 	.word	0x08001fb5
 8001fb0:	08001fcd 	.word	0x08001fcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb8:	e030      	b.n	800201c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d025      	beq.n	8002012 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fca:	e022      	b.n	8002012 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fd4:	d11f      	bne.n	8002016 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fda:	e01c      	b.n	8002016 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d903      	bls.n	8001fea <DMA_CheckFifoParam+0xb6>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d003      	beq.n	8001ff0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fe8:	e018      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
      break;
 8001fee:	e015      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8002000:	e00b      	b.n	800201a <DMA_CheckFifoParam+0xe6>
      break;
 8002002:	bf00      	nop
 8002004:	e00a      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 8002006:	bf00      	nop
 8002008:	e008      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800200a:	bf00      	nop
 800200c:	e006      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800200e:	bf00      	nop
 8002010:	e004      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
 8002014:	e002      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;   
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
    }
  } 
  
  return status; 
 800201c:	7bfb      	ldrb	r3, [r7, #15]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	; 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e165      	b.n	8002314 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	429a      	cmp	r2, r3
 8002062:	f040 8154 	bne.w	800230e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d005      	beq.n	800207e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	2b02      	cmp	r3, #2
 800207c:	d130      	bne.n	80020e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 0201 	and.w	r2, r3, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d017      	beq.n	800211c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d123      	bne.n	8002170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	08da      	lsrs	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3208      	adds	r2, #8
 8002130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	08da      	lsrs	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3208      	adds	r2, #8
 800216a:	69b9      	ldr	r1, [r7, #24]
 800216c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0203 	and.w	r2, r3, #3
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80ae 	beq.w	800230e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b5d      	ldr	r3, [pc, #372]	; (800232c <HAL_GPIO_Init+0x300>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a5c      	ldr	r2, [pc, #368]	; (800232c <HAL_GPIO_Init+0x300>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b5a      	ldr	r3, [pc, #360]	; (800232c <HAL_GPIO_Init+0x300>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ce:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_GPIO_Init+0x304>)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4f      	ldr	r2, [pc, #316]	; (8002334 <HAL_GPIO_Init+0x308>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d025      	beq.n	8002246 <HAL_GPIO_Init+0x21a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4e      	ldr	r2, [pc, #312]	; (8002338 <HAL_GPIO_Init+0x30c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01f      	beq.n	8002242 <HAL_GPIO_Init+0x216>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4d      	ldr	r2, [pc, #308]	; (800233c <HAL_GPIO_Init+0x310>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d019      	beq.n	800223e <HAL_GPIO_Init+0x212>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4c      	ldr	r2, [pc, #304]	; (8002340 <HAL_GPIO_Init+0x314>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_GPIO_Init+0x20e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4b      	ldr	r2, [pc, #300]	; (8002344 <HAL_GPIO_Init+0x318>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00d      	beq.n	8002236 <HAL_GPIO_Init+0x20a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4a      	ldr	r2, [pc, #296]	; (8002348 <HAL_GPIO_Init+0x31c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <HAL_GPIO_Init+0x206>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a49      	ldr	r2, [pc, #292]	; (800234c <HAL_GPIO_Init+0x320>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_GPIO_Init+0x202>
 800222a:	2306      	movs	r3, #6
 800222c:	e00c      	b.n	8002248 <HAL_GPIO_Init+0x21c>
 800222e:	2307      	movs	r3, #7
 8002230:	e00a      	b.n	8002248 <HAL_GPIO_Init+0x21c>
 8002232:	2305      	movs	r3, #5
 8002234:	e008      	b.n	8002248 <HAL_GPIO_Init+0x21c>
 8002236:	2304      	movs	r3, #4
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x21c>
 800223a:	2303      	movs	r3, #3
 800223c:	e004      	b.n	8002248 <HAL_GPIO_Init+0x21c>
 800223e:	2302      	movs	r3, #2
 8002240:	e002      	b.n	8002248 <HAL_GPIO_Init+0x21c>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x21c>
 8002246:	2300      	movs	r3, #0
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f002 0203 	and.w	r2, r2, #3
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	4093      	lsls	r3, r2
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002258:	4935      	ldr	r1, [pc, #212]	; (8002330 <HAL_GPIO_Init+0x304>)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002266:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <HAL_GPIO_Init+0x324>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800228a:	4a31      	ldr	r2, [pc, #196]	; (8002350 <HAL_GPIO_Init+0x324>)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002290:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_GPIO_Init+0x324>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b4:	4a26      	ldr	r2, [pc, #152]	; (8002350 <HAL_GPIO_Init+0x324>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ba:	4b25      	ldr	r3, [pc, #148]	; (8002350 <HAL_GPIO_Init+0x324>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_GPIO_Init+0x324>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <HAL_GPIO_Init+0x324>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002308:	4a11      	ldr	r2, [pc, #68]	; (8002350 <HAL_GPIO_Init+0x324>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3301      	adds	r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b0f      	cmp	r3, #15
 8002318:	f67f ae96 	bls.w	8002048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	40013800 	.word	0x40013800
 8002334:	40020000 	.word	0x40020000
 8002338:	40020400 	.word	0x40020400
 800233c:	40020800 	.word	0x40020800
 8002340:	40020c00 	.word	0x40020c00
 8002344:	40021000 	.word	0x40021000
 8002348:	40021400 	.word	0x40021400
 800234c:	40021800 	.word	0x40021800
 8002350:	40013c00 	.word	0x40013c00

08002354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
 8002360:	4613      	mov	r3, r2
 8002362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002364:	787b      	ldrb	r3, [r7, #1]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002370:	e003      	b.n	800237a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	041a      	lsls	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	619a      	str	r2, [r3, #24]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0cc      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b68      	ldr	r3, [pc, #416]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d90c      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b65      	ldr	r3, [pc, #404]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d044      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d119      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d003      	beq.n	8002446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002442:	2b03      	cmp	r3, #3
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e067      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4934      	ldr	r1, [pc, #208]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7ff f94a 	bl	8001710 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7ff f946 	bl	8001710 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e04f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d20c      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800250e:	f000 f855 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490a      	ldr	r1, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f8aa 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00
 8002544:	40023800 	.word	0x40023800
 8002548:	08006668 	.word	0x08006668
 800254c:	2000025c 	.word	0x2000025c
 8002550:	20000260 	.word	0x20000260

08002554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_RCC_GetHCLKFreq+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	2000025c 	.word	0x2000025c

0800256c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002570:	f7ff fff0 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	0a9b      	lsrs	r3, r3, #10
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4903      	ldr	r1, [pc, #12]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40023800 	.word	0x40023800
 8002590:	08006678 	.word	0x08006678

08002594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002598:	f7ff ffdc 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0b5b      	lsrs	r3, r3, #13
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4903      	ldr	r1, [pc, #12]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	08006678 	.word	0x08006678

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c0:	b0ae      	sub	sp, #184	; 0xb8
 80025c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025e2:	4bcb      	ldr	r3, [pc, #812]	; (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b0c      	cmp	r3, #12
 80025ec:	f200 8206 	bhi.w	80029fc <HAL_RCC_GetSysClockFreq+0x440>
 80025f0:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	0800262d 	.word	0x0800262d
 80025fc:	080029fd 	.word	0x080029fd
 8002600:	080029fd 	.word	0x080029fd
 8002604:	080029fd 	.word	0x080029fd
 8002608:	08002635 	.word	0x08002635
 800260c:	080029fd 	.word	0x080029fd
 8002610:	080029fd 	.word	0x080029fd
 8002614:	080029fd 	.word	0x080029fd
 8002618:	0800263d 	.word	0x0800263d
 800261c:	080029fd 	.word	0x080029fd
 8002620:	080029fd 	.word	0x080029fd
 8002624:	080029fd 	.word	0x080029fd
 8002628:	0800282d 	.word	0x0800282d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4bb9      	ldr	r3, [pc, #740]	; (8002914 <HAL_RCC_GetSysClockFreq+0x358>)
 800262e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002632:	e1e7      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002634:	4bb8      	ldr	r3, [pc, #736]	; (8002918 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800263a:	e1e3      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800263c:	4bb4      	ldr	r3, [pc, #720]	; (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002648:	4bb1      	ldr	r3, [pc, #708]	; (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d071      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002654:	4bae      	ldr	r3, [pc, #696]	; (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	2200      	movs	r2, #0
 800265c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002660:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800267a:	4622      	mov	r2, r4
 800267c:	462b      	mov	r3, r5
 800267e:	f04f 0000 	mov.w	r0, #0
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	0159      	lsls	r1, r3, #5
 8002688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268c:	0150      	lsls	r0, r2, #5
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4621      	mov	r1, r4
 8002694:	1a51      	subs	r1, r2, r1
 8002696:	6439      	str	r1, [r7, #64]	; 0x40
 8002698:	4629      	mov	r1, r5
 800269a:	eb63 0301 	sbc.w	r3, r3, r1
 800269e:	647b      	str	r3, [r7, #68]	; 0x44
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80026ac:	4649      	mov	r1, r9
 80026ae:	018b      	lsls	r3, r1, #6
 80026b0:	4641      	mov	r1, r8
 80026b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026b6:	4641      	mov	r1, r8
 80026b8:	018a      	lsls	r2, r1, #6
 80026ba:	4641      	mov	r1, r8
 80026bc:	1a51      	subs	r1, r2, r1
 80026be:	63b9      	str	r1, [r7, #56]	; 0x38
 80026c0:	4649      	mov	r1, r9
 80026c2:	eb63 0301 	sbc.w	r3, r3, r1
 80026c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80026d4:	4649      	mov	r1, r9
 80026d6:	00cb      	lsls	r3, r1, #3
 80026d8:	4641      	mov	r1, r8
 80026da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026de:	4641      	mov	r1, r8
 80026e0:	00ca      	lsls	r2, r1, #3
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	4622      	mov	r2, r4
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	633b      	str	r3, [r7, #48]	; 0x30
 80026ee:	462b      	mov	r3, r5
 80026f0:	460a      	mov	r2, r1
 80026f2:	eb42 0303 	adc.w	r3, r2, r3
 80026f6:	637b      	str	r3, [r7, #52]	; 0x34
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002704:	4629      	mov	r1, r5
 8002706:	024b      	lsls	r3, r1, #9
 8002708:	4621      	mov	r1, r4
 800270a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800270e:	4621      	mov	r1, r4
 8002710:	024a      	lsls	r2, r1, #9
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800271a:	2200      	movs	r2, #0
 800271c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002720:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002724:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002728:	f7fe fa5e 	bl	8000be8 <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4613      	mov	r3, r2
 8002732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002736:	e067      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002738:	4b75      	ldr	r3, [pc, #468]	; (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	099b      	lsrs	r3, r3, #6
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002744:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002748:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800274c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002750:	67bb      	str	r3, [r7, #120]	; 0x78
 8002752:	2300      	movs	r3, #0
 8002754:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002756:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800275a:	4622      	mov	r2, r4
 800275c:	462b      	mov	r3, r5
 800275e:	f04f 0000 	mov.w	r0, #0
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	0159      	lsls	r1, r3, #5
 8002768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276c:	0150      	lsls	r0, r2, #5
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4621      	mov	r1, r4
 8002774:	1a51      	subs	r1, r2, r1
 8002776:	62b9      	str	r1, [r7, #40]	; 0x28
 8002778:	4629      	mov	r1, r5
 800277a:	eb63 0301 	sbc.w	r3, r3, r1
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800278c:	4649      	mov	r1, r9
 800278e:	018b      	lsls	r3, r1, #6
 8002790:	4641      	mov	r1, r8
 8002792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002796:	4641      	mov	r1, r8
 8002798:	018a      	lsls	r2, r1, #6
 800279a:	4641      	mov	r1, r8
 800279c:	ebb2 0a01 	subs.w	sl, r2, r1
 80027a0:	4649      	mov	r1, r9
 80027a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027ba:	4692      	mov	sl, r2
 80027bc:	469b      	mov	fp, r3
 80027be:	4623      	mov	r3, r4
 80027c0:	eb1a 0303 	adds.w	r3, sl, r3
 80027c4:	623b      	str	r3, [r7, #32]
 80027c6:	462b      	mov	r3, r5
 80027c8:	eb4b 0303 	adc.w	r3, fp, r3
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027da:	4629      	mov	r1, r5
 80027dc:	028b      	lsls	r3, r1, #10
 80027de:	4621      	mov	r1, r4
 80027e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e4:	4621      	mov	r1, r4
 80027e6:	028a      	lsls	r2, r1, #10
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027f0:	2200      	movs	r2, #0
 80027f2:	673b      	str	r3, [r7, #112]	; 0x70
 80027f4:	677a      	str	r2, [r7, #116]	; 0x74
 80027f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80027fa:	f7fe f9f5 	bl	8000be8 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4613      	mov	r3, r2
 8002804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002808:	4b41      	ldr	r3, [pc, #260]	; (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	0c1b      	lsrs	r3, r3, #16
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	3301      	adds	r3, #1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800281a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800281e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800282a:	e0eb      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800282c:	4b38      	ldr	r3, [pc, #224]	; (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002838:	4b35      	ldr	r3, [pc, #212]	; (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d06b      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002844:	4b32      	ldr	r3, [pc, #200]	; (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	2200      	movs	r2, #0
 800284c:	66bb      	str	r3, [r7, #104]	; 0x68
 800284e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002856:	663b      	str	r3, [r7, #96]	; 0x60
 8002858:	2300      	movs	r3, #0
 800285a:	667b      	str	r3, [r7, #100]	; 0x64
 800285c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002860:	4622      	mov	r2, r4
 8002862:	462b      	mov	r3, r5
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	0159      	lsls	r1, r3, #5
 800286e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002872:	0150      	lsls	r0, r2, #5
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4621      	mov	r1, r4
 800287a:	1a51      	subs	r1, r2, r1
 800287c:	61b9      	str	r1, [r7, #24]
 800287e:	4629      	mov	r1, r5
 8002880:	eb63 0301 	sbc.w	r3, r3, r1
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002892:	4659      	mov	r1, fp
 8002894:	018b      	lsls	r3, r1, #6
 8002896:	4651      	mov	r1, sl
 8002898:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800289c:	4651      	mov	r1, sl
 800289e:	018a      	lsls	r2, r1, #6
 80028a0:	4651      	mov	r1, sl
 80028a2:	ebb2 0801 	subs.w	r8, r2, r1
 80028a6:	4659      	mov	r1, fp
 80028a8:	eb63 0901 	sbc.w	r9, r3, r1
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028c0:	4690      	mov	r8, r2
 80028c2:	4699      	mov	r9, r3
 80028c4:	4623      	mov	r3, r4
 80028c6:	eb18 0303 	adds.w	r3, r8, r3
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	462b      	mov	r3, r5
 80028ce:	eb49 0303 	adc.w	r3, r9, r3
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028e0:	4629      	mov	r1, r5
 80028e2:	024b      	lsls	r3, r1, #9
 80028e4:	4621      	mov	r1, r4
 80028e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028ea:	4621      	mov	r1, r4
 80028ec:	024a      	lsls	r2, r1, #9
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028f6:	2200      	movs	r2, #0
 80028f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80028fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002900:	f7fe f972 	bl	8000be8 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800290e:	e065      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x420>
 8002910:	40023800 	.word	0x40023800
 8002914:	00f42400 	.word	0x00f42400
 8002918:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291c:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x458>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	099b      	lsrs	r3, r3, #6
 8002922:	2200      	movs	r2, #0
 8002924:	4618      	mov	r0, r3
 8002926:	4611      	mov	r1, r2
 8002928:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800292c:	653b      	str	r3, [r7, #80]	; 0x50
 800292e:	2300      	movs	r3, #0
 8002930:	657b      	str	r3, [r7, #84]	; 0x54
 8002932:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002936:	4642      	mov	r2, r8
 8002938:	464b      	mov	r3, r9
 800293a:	f04f 0000 	mov.w	r0, #0
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	0159      	lsls	r1, r3, #5
 8002944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002948:	0150      	lsls	r0, r2, #5
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4641      	mov	r1, r8
 8002950:	1a51      	subs	r1, r2, r1
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	4649      	mov	r1, r9
 8002956:	eb63 0301 	sbc.w	r3, r3, r1
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002968:	4659      	mov	r1, fp
 800296a:	018b      	lsls	r3, r1, #6
 800296c:	4651      	mov	r1, sl
 800296e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002972:	4651      	mov	r1, sl
 8002974:	018a      	lsls	r2, r1, #6
 8002976:	4651      	mov	r1, sl
 8002978:	1a54      	subs	r4, r2, r1
 800297a:	4659      	mov	r1, fp
 800297c:	eb63 0501 	sbc.w	r5, r3, r1
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	00eb      	lsls	r3, r5, #3
 800298a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800298e:	00e2      	lsls	r2, r4, #3
 8002990:	4614      	mov	r4, r2
 8002992:	461d      	mov	r5, r3
 8002994:	4643      	mov	r3, r8
 8002996:	18e3      	adds	r3, r4, r3
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	464b      	mov	r3, r9
 800299c:	eb45 0303 	adc.w	r3, r5, r3
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ae:	4629      	mov	r1, r5
 80029b0:	028b      	lsls	r3, r1, #10
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b8:	4621      	mov	r1, r4
 80029ba:	028a      	lsls	r2, r1, #10
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029c4:	2200      	movs	r2, #0
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80029ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029ce:	f7fe f90b 	bl	8000be8 <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4613      	mov	r3, r2
 80029d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029dc:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x458>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0f1b      	lsrs	r3, r3, #28
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80029ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029fa:	e003      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x45c>)
 80029fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	37b8      	adds	r7, #184	; 0xb8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	00f42400 	.word	0x00f42400

08002a1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e28d      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8083 	beq.w	8002b42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a3c:	4b94      	ldr	r3, [pc, #592]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d019      	beq.n	8002a7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a48:	4b91      	ldr	r3, [pc, #580]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a54:	4b8e      	ldr	r3, [pc, #568]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a60:	d00c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b8b      	ldr	r3, [pc, #556]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	d112      	bne.n	8002a94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7a:	d10b      	bne.n	8002a94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	4b84      	ldr	r3, [pc, #528]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d05b      	beq.n	8002b40 <HAL_RCC_OscConfig+0x124>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d157      	bne.n	8002b40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e25a      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0x90>
 8002a9e:	4b7c      	ldr	r3, [pc, #496]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7b      	ldr	r2, [pc, #492]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xcc>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xb4>
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b73      	ldr	r3, [pc, #460]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a72      	ldr	r2, [pc, #456]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xcc>
 8002ad0:	4b6f      	ldr	r3, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6e      	ldr	r2, [pc, #440]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b6c      	ldr	r3, [pc, #432]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6b      	ldr	r2, [pc, #428]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fe0e 	bl	8001710 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fe0a 	bl	8001710 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e21f      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xdc>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fdfa 	bl	8001710 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fdf6 	bl	8001710 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e20b      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b57      	ldr	r3, [pc, #348]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x104>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d06f      	beq.n	8002c2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b4e:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d017      	beq.n	8002b8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b5a:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d105      	bne.n	8002b72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b66:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b7a:	2b0c      	cmp	r3, #12
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x186>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1d3      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_OscConfig+0x278>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fda3 	bl	8001710 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bce:	f7fe fd9f 	bl	8001710 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1b4      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4925      	ldr	r1, [pc, #148]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCC_OscConfig+0x278>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fd82 	bl	8001710 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fd7e 	bl	8001710 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e193      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d036      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fd62 	bl	8001710 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe fd5e 	bl	8001710 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e173      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x234>
 8002c6e:	e01b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c76:	f7fe fd4b 	bl	8001710 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe fd47 	bl	8001710 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d907      	bls.n	8002c9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e15c      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b8a      	ldr	r3, [pc, #552]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ea      	bne.n	8002c7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8097 	beq.w	8002de4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b83      	ldr	r3, [pc, #524]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b7f      	ldr	r3, [pc, #508]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a7e      	ldr	r2, [pc, #504]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b7c      	ldr	r3, [pc, #496]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b79      	ldr	r3, [pc, #484]	; (8002ecc <HAL_RCC_OscConfig+0x4b0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b76      	ldr	r3, [pc, #472]	; (8002ecc <HAL_RCC_OscConfig+0x4b0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	; (8002ecc <HAL_RCC_OscConfig+0x4b0>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fd07 	bl	8001710 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fe fd03 	bl	8001710 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e118      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b6c      	ldr	r3, [pc, #432]	; (8002ecc <HAL_RCC_OscConfig+0x4b0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x31e>
 8002d2c:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a65      	ldr	r2, [pc, #404]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0x358>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x340>
 8002d42:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a60      	ldr	r2, [pc, #384]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	4b5e      	ldr	r3, [pc, #376]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a5d      	ldr	r2, [pc, #372]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0x358>
 8002d5c:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a59      	ldr	r2, [pc, #356]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
 8002d68:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a56      	ldr	r2, [pc, #344]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fcc8 	bl	8001710 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe fcc4 	bl	8001710 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0d7      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b4b      	ldr	r3, [pc, #300]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCC_OscConfig+0x368>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fe fcb2 	bl	8001710 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe fcae 	bl	8001710 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0c1      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a3a      	ldr	r2, [pc, #232]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80ad 	beq.w	8002f48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dee:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d060      	beq.n	8002ebc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d145      	bne.n	8002e8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <HAL_RCC_OscConfig+0x4b4>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fc82 	bl	8001710 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fc7e 	bl	8001710 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e093      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	071b      	lsls	r3, r3, #28
 8002e5a:	491b      	ldr	r1, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_RCC_OscConfig+0x4b4>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe fc53 	bl	8001710 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7fe fc4f 	bl	8001710 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e064      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x452>
 8002e8c:	e05c      	b.n	8002f48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_RCC_OscConfig+0x4b4>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe fc3c 	bl	8001710 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe fc38 	bl	8001710 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e04d      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x480>
 8002eba:	e045      	b.n	8002f48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e040      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ed4:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <HAL_RCC_OscConfig+0x538>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d030      	beq.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d129      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d122      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d119      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d10f      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800

08002f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e03f      	b.n	8002fea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe f97c 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	; 0x24
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fb9b 	bl	80036d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b08a      	sub	sp, #40	; 0x28
 8002ff6:	af02      	add	r7, sp, #8
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b20      	cmp	r3, #32
 8003010:	d17c      	bne.n	800310c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_UART_Transmit+0x2c>
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e075      	b.n	800310e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_UART_Transmit+0x3e>
 800302c:	2302      	movs	r3, #2
 800302e:	e06e      	b.n	800310e <HAL_UART_Transmit+0x11c>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2221      	movs	r2, #33	; 0x21
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003046:	f7fe fb63 	bl	8001710 <HAL_GetTick>
 800304a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	88fa      	ldrh	r2, [r7, #6]
 8003050:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	88fa      	ldrh	r2, [r7, #6]
 8003056:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003060:	d108      	bne.n	8003074 <HAL_UART_Transmit+0x82>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d104      	bne.n	8003074 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	e003      	b.n	800307c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003084:	e02a      	b.n	80030dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f988 	bl	80033a6 <UART_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e036      	b.n	800310e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	3302      	adds	r3, #2
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e007      	b.n	80030ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	3301      	adds	r3, #1
 80030cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1cf      	bne.n	8003086 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f958 	bl	80033a6 <UART_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e006      	b.n	800310e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e000      	b.n	800310e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
  }
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	4613      	mov	r3, r2
 8003122:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b20      	cmp	r3, #32
 800312e:	d11d      	bne.n	800316c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_UART_Receive_DMA+0x26>
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e016      	b.n	800316e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_UART_Receive_DMA+0x38>
 800314a:	2302      	movs	r3, #2
 800314c:	e00f      	b.n	800316e <HAL_UART_Receive_DMA+0x58>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	461a      	mov	r2, r3
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f98e 	bl	8003484 <UART_Start_Receive_DMA>
 8003168:	4603      	mov	r3, r0
 800316a:	e000      	b.n	800316e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b09c      	sub	sp, #112	; 0x70
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d172      	bne.n	80032b8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d4:	2200      	movs	r2, #0
 80031d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	330c      	adds	r3, #12
 80031de:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e2:	e853 3f00 	ldrex	r3, [r3]
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80031f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	330c      	adds	r3, #12
 80031f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80031fa:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e5      	bne.n	80031d8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3314      	adds	r3, #20
 8003212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	667b      	str	r3, [r7, #100]	; 0x64
 8003224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3314      	adds	r3, #20
 800322a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800322c:	647a      	str	r2, [r7, #68]	; 0x44
 800322e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800323a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e5      	bne.n	800320c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3314      	adds	r3, #20
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	e853 3f00 	ldrex	r3, [r3]
 800324e:	623b      	str	r3, [r7, #32]
   return(result);
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003256:	663b      	str	r3, [r7, #96]	; 0x60
 8003258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3314      	adds	r3, #20
 800325e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003260:	633a      	str	r2, [r7, #48]	; 0x30
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003264:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003268:	e841 2300 	strex	r3, r2, [r1]
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e5      	bne.n	8003240 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	2b01      	cmp	r3, #1
 8003282:	d119      	bne.n	80032b8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	e853 3f00 	ldrex	r3, [r3]
 8003292:	60fb      	str	r3, [r7, #12]
   return(result);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0310 	bic.w	r3, r3, #16
 800329a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800329c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	330c      	adds	r3, #12
 80032a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032a4:	61fa      	str	r2, [r7, #28]
 80032a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a8:	69b9      	ldr	r1, [r7, #24]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	e841 2300 	strex	r3, r2, [r1]
 80032b0:	617b      	str	r3, [r7, #20]
   return(result);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e5      	bne.n	8003284 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d106      	bne.n	80032ce <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032c4:	4619      	mov	r1, r3
 80032c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80032c8:	f7ff ff69 	bl	800319e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032cc:	e002      	b.n	80032d4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80032ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80032d0:	f7fd fe1e 	bl	8000f10 <HAL_UART_RxCpltCallback>
}
 80032d4:	bf00      	nop
 80032d6:	3770      	adds	r7, #112	; 0x70
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d108      	bne.n	8003304 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	4619      	mov	r1, r3
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f7ff ff4e 	bl	800319e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003302:	e002      	b.n	800330a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f7ff ff36 	bl	8003176 <HAL_UART_RxHalfCpltCallback>
}
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	2b80      	cmp	r3, #128	; 0x80
 8003330:	bf0c      	ite	eq
 8003332:	2301      	moveq	r3, #1
 8003334:	2300      	movne	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b21      	cmp	r3, #33	; 0x21
 8003344:	d108      	bne.n	8003358 <UART_DMAError+0x46>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2200      	movs	r2, #0
 8003350:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	f000 f934 	bl	80035c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003362:	2b40      	cmp	r3, #64	; 0x40
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b22      	cmp	r3, #34	; 0x22
 8003378:	d108      	bne.n	800338c <UART_DMAError+0x7a>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2200      	movs	r2, #0
 8003384:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003386:	68b8      	ldr	r0, [r7, #8]
 8003388:	f000 f942 	bl	8003610 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f043 0210 	orr.w	r2, r3, #16
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003398:	68b8      	ldr	r0, [r7, #8]
 800339a:	f7ff fef6 	bl	800318a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b090      	sub	sp, #64	; 0x40
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	4613      	mov	r3, r2
 80033b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b6:	e050      	b.n	800345a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033be:	d04c      	beq.n	800345a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033c6:	f7fe f9a3 	bl	8001710 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d241      	bcs.n	800345a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033f6:	637a      	str	r2, [r7, #52]	; 0x34
 80033f8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e5      	bne.n	80033d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3314      	adds	r3, #20
 8003410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	613b      	str	r3, [r7, #16]
   return(result);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	63bb      	str	r3, [r7, #56]	; 0x38
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3314      	adds	r3, #20
 8003428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800342a:	623a      	str	r2, [r7, #32]
 800342c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342e:	69f9      	ldr	r1, [r7, #28]
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	e841 2300 	strex	r3, r2, [r1]
 8003436:	61bb      	str	r3, [r7, #24]
   return(result);
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1e5      	bne.n	800340a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e00f      	b.n	800347a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	429a      	cmp	r2, r3
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	429a      	cmp	r2, r3
 8003476:	d09f      	beq.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3740      	adds	r7, #64	; 0x40
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b098      	sub	sp, #96	; 0x60
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	4613      	mov	r3, r2
 8003490:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	88fa      	ldrh	r2, [r7, #6]
 800349c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2222      	movs	r2, #34	; 0x22
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	4a40      	ldr	r2, [pc, #256]	; (80035b4 <UART_Start_Receive_DMA+0x130>)
 80034b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	4a3f      	ldr	r2, [pc, #252]	; (80035b8 <UART_Start_Receive_DMA+0x134>)
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	4a3e      	ldr	r2, [pc, #248]	; (80035bc <UART_Start_Receive_DMA+0x138>)
 80034c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	2200      	movs	r2, #0
 80034ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80034cc:	f107 0308 	add.w	r3, r7, #8
 80034d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3304      	adds	r3, #4
 80034dc:	4619      	mov	r1, r3
 80034de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	f7fe fae0 	bl	8001aa8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d019      	beq.n	8003542 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	330c      	adds	r3, #12
 8003514:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800351e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003524:	65bb      	str	r3, [r7, #88]	; 0x58
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800352e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003530:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800353c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e5      	bne.n	800350e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3314      	adds	r3, #20
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	657b      	str	r3, [r7, #84]	; 0x54
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3314      	adds	r3, #20
 8003560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003562:	63ba      	str	r2, [r7, #56]	; 0x38
 8003564:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e5      	bne.n	8003542 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3314      	adds	r3, #20
 800357c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	617b      	str	r3, [r7, #20]
   return(result);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800358c:	653b      	str	r3, [r7, #80]	; 0x50
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3314      	adds	r3, #20
 8003594:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003596:	627a      	str	r2, [r7, #36]	; 0x24
 8003598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	6a39      	ldr	r1, [r7, #32]
 800359c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e5      	bne.n	8003576 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3760      	adds	r7, #96	; 0x60
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	080031b7 	.word	0x080031b7
 80035b8:	080032dd 	.word	0x080032dd
 80035bc:	08003313 	.word	0x08003313

080035c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b089      	sub	sp, #36	; 0x24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	61ba      	str	r2, [r7, #24]
 80035ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	6979      	ldr	r1, [r7, #20]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	e841 2300 	strex	r3, r2, [r1]
 80035f4:	613b      	str	r3, [r7, #16]
   return(result);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e5      	bne.n	80035c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003604:	bf00      	nop
 8003606:	3724      	adds	r7, #36	; 0x24
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b095      	sub	sp, #84	; 0x54
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800362e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003638:	643a      	str	r2, [r7, #64]	; 0x40
 800363a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800363e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e5      	bne.n	8003618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3314      	adds	r3, #20
 8003652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	61fb      	str	r3, [r7, #28]
   return(result);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	64bb      	str	r3, [r7, #72]	; 0x48
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3314      	adds	r3, #20
 800366a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800366c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	2b01      	cmp	r3, #1
 8003686:	d119      	bne.n	80036bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	60bb      	str	r3, [r7, #8]
   return(result);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f023 0310 	bic.w	r3, r3, #16
 800369e:	647b      	str	r3, [r7, #68]	; 0x44
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036a8:	61ba      	str	r2, [r7, #24]
 80036aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6979      	ldr	r1, [r7, #20]
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	613b      	str	r3, [r7, #16]
   return(result);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e5      	bne.n	8003688 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036ca:	bf00      	nop
 80036cc:	3754      	adds	r7, #84	; 0x54
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036dc:	b0c0      	sub	sp, #256	; 0x100
 80036de:	af00      	add	r7, sp, #0
 80036e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	68d9      	ldr	r1, [r3, #12]
 80036f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	ea40 0301 	orr.w	r3, r0, r1
 8003700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	431a      	orrs	r2, r3
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	431a      	orrs	r2, r3
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003730:	f021 010c 	bic.w	r1, r1, #12
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800373e:	430b      	orrs	r3, r1
 8003740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003752:	6999      	ldr	r1, [r3, #24]
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	ea40 0301 	orr.w	r3, r0, r1
 800375e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4b8f      	ldr	r3, [pc, #572]	; (80039a4 <UART_SetConfig+0x2cc>)
 8003768:	429a      	cmp	r2, r3
 800376a:	d005      	beq.n	8003778 <UART_SetConfig+0xa0>
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b8d      	ldr	r3, [pc, #564]	; (80039a8 <UART_SetConfig+0x2d0>)
 8003774:	429a      	cmp	r2, r3
 8003776:	d104      	bne.n	8003782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003778:	f7fe ff0c 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 800377c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003780:	e003      	b.n	800378a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003782:	f7fe fef3 	bl	800256c <HAL_RCC_GetPCLK1Freq>
 8003786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003794:	f040 810c 	bne.w	80039b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800379c:	2200      	movs	r2, #0
 800379e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037aa:	4622      	mov	r2, r4
 80037ac:	462b      	mov	r3, r5
 80037ae:	1891      	adds	r1, r2, r2
 80037b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80037b2:	415b      	adcs	r3, r3
 80037b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037ba:	4621      	mov	r1, r4
 80037bc:	eb12 0801 	adds.w	r8, r2, r1
 80037c0:	4629      	mov	r1, r5
 80037c2:	eb43 0901 	adc.w	r9, r3, r1
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037da:	4690      	mov	r8, r2
 80037dc:	4699      	mov	r9, r3
 80037de:	4623      	mov	r3, r4
 80037e0:	eb18 0303 	adds.w	r3, r8, r3
 80037e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037e8:	462b      	mov	r3, r5
 80037ea:	eb49 0303 	adc.w	r3, r9, r3
 80037ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003806:	460b      	mov	r3, r1
 8003808:	18db      	adds	r3, r3, r3
 800380a:	653b      	str	r3, [r7, #80]	; 0x50
 800380c:	4613      	mov	r3, r2
 800380e:	eb42 0303 	adc.w	r3, r2, r3
 8003812:	657b      	str	r3, [r7, #84]	; 0x54
 8003814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800381c:	f7fd f9e4 	bl	8000be8 <__aeabi_uldivmod>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4b61      	ldr	r3, [pc, #388]	; (80039ac <UART_SetConfig+0x2d4>)
 8003826:	fba3 2302 	umull	r2, r3, r3, r2
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	011c      	lsls	r4, r3, #4
 800382e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800383c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003840:	4642      	mov	r2, r8
 8003842:	464b      	mov	r3, r9
 8003844:	1891      	adds	r1, r2, r2
 8003846:	64b9      	str	r1, [r7, #72]	; 0x48
 8003848:	415b      	adcs	r3, r3
 800384a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800384c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003850:	4641      	mov	r1, r8
 8003852:	eb12 0a01 	adds.w	sl, r2, r1
 8003856:	4649      	mov	r1, r9
 8003858:	eb43 0b01 	adc.w	fp, r3, r1
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800386c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003870:	4692      	mov	sl, r2
 8003872:	469b      	mov	fp, r3
 8003874:	4643      	mov	r3, r8
 8003876:	eb1a 0303 	adds.w	r3, sl, r3
 800387a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800387e:	464b      	mov	r3, r9
 8003880:	eb4b 0303 	adc.w	r3, fp, r3
 8003884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800389c:	460b      	mov	r3, r1
 800389e:	18db      	adds	r3, r3, r3
 80038a0:	643b      	str	r3, [r7, #64]	; 0x40
 80038a2:	4613      	mov	r3, r2
 80038a4:	eb42 0303 	adc.w	r3, r2, r3
 80038a8:	647b      	str	r3, [r7, #68]	; 0x44
 80038aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038b2:	f7fd f999 	bl	8000be8 <__aeabi_uldivmod>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <UART_SetConfig+0x2d4>)
 80038be:	fba3 2301 	umull	r2, r3, r3, r1
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	2264      	movs	r2, #100	; 0x64
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	1acb      	subs	r3, r1, r3
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038d2:	4b36      	ldr	r3, [pc, #216]	; (80039ac <UART_SetConfig+0x2d4>)
 80038d4:	fba3 2302 	umull	r2, r3, r3, r2
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038e0:	441c      	add	r4, r3
 80038e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038f4:	4642      	mov	r2, r8
 80038f6:	464b      	mov	r3, r9
 80038f8:	1891      	adds	r1, r2, r2
 80038fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80038fc:	415b      	adcs	r3, r3
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003904:	4641      	mov	r1, r8
 8003906:	1851      	adds	r1, r2, r1
 8003908:	6339      	str	r1, [r7, #48]	; 0x30
 800390a:	4649      	mov	r1, r9
 800390c:	414b      	adcs	r3, r1
 800390e:	637b      	str	r3, [r7, #52]	; 0x34
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800391c:	4659      	mov	r1, fp
 800391e:	00cb      	lsls	r3, r1, #3
 8003920:	4651      	mov	r1, sl
 8003922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003926:	4651      	mov	r1, sl
 8003928:	00ca      	lsls	r2, r1, #3
 800392a:	4610      	mov	r0, r2
 800392c:	4619      	mov	r1, r3
 800392e:	4603      	mov	r3, r0
 8003930:	4642      	mov	r2, r8
 8003932:	189b      	adds	r3, r3, r2
 8003934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003938:	464b      	mov	r3, r9
 800393a:	460a      	mov	r2, r1
 800393c:	eb42 0303 	adc.w	r3, r2, r3
 8003940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003958:	460b      	mov	r3, r1
 800395a:	18db      	adds	r3, r3, r3
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
 800395e:	4613      	mov	r3, r2
 8003960:	eb42 0303 	adc.w	r3, r2, r3
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800396a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800396e:	f7fd f93b 	bl	8000be8 <__aeabi_uldivmod>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <UART_SetConfig+0x2d4>)
 8003978:	fba3 1302 	umull	r1, r3, r3, r2
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	2164      	movs	r1, #100	; 0x64
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	3332      	adds	r3, #50	; 0x32
 800398a:	4a08      	ldr	r2, [pc, #32]	; (80039ac <UART_SetConfig+0x2d4>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	f003 0207 	and.w	r2, r3, #7
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4422      	add	r2, r4
 800399e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039a0:	e105      	b.n	8003bae <UART_SetConfig+0x4d6>
 80039a2:	bf00      	nop
 80039a4:	40011000 	.word	0x40011000
 80039a8:	40011400 	.word	0x40011400
 80039ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039c2:	4642      	mov	r2, r8
 80039c4:	464b      	mov	r3, r9
 80039c6:	1891      	adds	r1, r2, r2
 80039c8:	6239      	str	r1, [r7, #32]
 80039ca:	415b      	adcs	r3, r3
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
 80039ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039d2:	4641      	mov	r1, r8
 80039d4:	1854      	adds	r4, r2, r1
 80039d6:	4649      	mov	r1, r9
 80039d8:	eb43 0501 	adc.w	r5, r3, r1
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	00eb      	lsls	r3, r5, #3
 80039e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ea:	00e2      	lsls	r2, r4, #3
 80039ec:	4614      	mov	r4, r2
 80039ee:	461d      	mov	r5, r3
 80039f0:	4643      	mov	r3, r8
 80039f2:	18e3      	adds	r3, r4, r3
 80039f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039f8:	464b      	mov	r3, r9
 80039fa:	eb45 0303 	adc.w	r3, r5, r3
 80039fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a1e:	4629      	mov	r1, r5
 8003a20:	008b      	lsls	r3, r1, #2
 8003a22:	4621      	mov	r1, r4
 8003a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a28:	4621      	mov	r1, r4
 8003a2a:	008a      	lsls	r2, r1, #2
 8003a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a30:	f7fd f8da 	bl	8000be8 <__aeabi_uldivmod>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4b60      	ldr	r3, [pc, #384]	; (8003bbc <UART_SetConfig+0x4e4>)
 8003a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	011c      	lsls	r4, r3, #4
 8003a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a54:	4642      	mov	r2, r8
 8003a56:	464b      	mov	r3, r9
 8003a58:	1891      	adds	r1, r2, r2
 8003a5a:	61b9      	str	r1, [r7, #24]
 8003a5c:	415b      	adcs	r3, r3
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a64:	4641      	mov	r1, r8
 8003a66:	1851      	adds	r1, r2, r1
 8003a68:	6139      	str	r1, [r7, #16]
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	414b      	adcs	r3, r1
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a7c:	4659      	mov	r1, fp
 8003a7e:	00cb      	lsls	r3, r1, #3
 8003a80:	4651      	mov	r1, sl
 8003a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a86:	4651      	mov	r1, sl
 8003a88:	00ca      	lsls	r2, r1, #3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4642      	mov	r2, r8
 8003a92:	189b      	adds	r3, r3, r2
 8003a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a98:	464b      	mov	r3, r9
 8003a9a:	460a      	mov	r2, r1
 8003a9c:	eb42 0303 	adc.w	r3, r2, r3
 8003aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8003aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003abc:	4649      	mov	r1, r9
 8003abe:	008b      	lsls	r3, r1, #2
 8003ac0:	4641      	mov	r1, r8
 8003ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ac6:	4641      	mov	r1, r8
 8003ac8:	008a      	lsls	r2, r1, #2
 8003aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ace:	f7fd f88b 	bl	8000be8 <__aeabi_uldivmod>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <UART_SetConfig+0x4e4>)
 8003ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	2164      	movs	r1, #100	; 0x64
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	3332      	adds	r3, #50	; 0x32
 8003aea:	4a34      	ldr	r2, [pc, #208]	; (8003bbc <UART_SetConfig+0x4e4>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af6:	441c      	add	r4, r3
 8003af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003afc:	2200      	movs	r2, #0
 8003afe:	673b      	str	r3, [r7, #112]	; 0x70
 8003b00:	677a      	str	r2, [r7, #116]	; 0x74
 8003b02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b06:	4642      	mov	r2, r8
 8003b08:	464b      	mov	r3, r9
 8003b0a:	1891      	adds	r1, r2, r2
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	415b      	adcs	r3, r3
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b16:	4641      	mov	r1, r8
 8003b18:	1851      	adds	r1, r2, r1
 8003b1a:	6039      	str	r1, [r7, #0]
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	414b      	adcs	r3, r1
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b2e:	4659      	mov	r1, fp
 8003b30:	00cb      	lsls	r3, r1, #3
 8003b32:	4651      	mov	r1, sl
 8003b34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b38:	4651      	mov	r1, sl
 8003b3a:	00ca      	lsls	r2, r1, #3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4603      	mov	r3, r0
 8003b42:	4642      	mov	r2, r8
 8003b44:	189b      	adds	r3, r3, r2
 8003b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b48:	464b      	mov	r3, r9
 8003b4a:	460a      	mov	r2, r1
 8003b4c:	eb42 0303 	adc.w	r3, r2, r3
 8003b50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b5c:	667a      	str	r2, [r7, #100]	; 0x64
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	008b      	lsls	r3, r1, #2
 8003b6e:	4641      	mov	r1, r8
 8003b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b74:	4641      	mov	r1, r8
 8003b76:	008a      	lsls	r2, r1, #2
 8003b78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b7c:	f7fd f834 	bl	8000be8 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <UART_SetConfig+0x4e4>)
 8003b86:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2164      	movs	r1, #100	; 0x64
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	3332      	adds	r3, #50	; 0x32
 8003b98:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <UART_SetConfig+0x4e4>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	f003 020f 	and.w	r2, r3, #15
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4422      	add	r2, r4
 8003bac:	609a      	str	r2, [r3, #8]
}
 8003bae:	bf00      	nop
 8003bb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bba:	bf00      	nop
 8003bbc:	51eb851f 	.word	0x51eb851f

08003bc0 <__errno>:
 8003bc0:	4b01      	ldr	r3, [pc, #4]	; (8003bc8 <__errno+0x8>)
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000268 	.word	0x20000268

08003bcc <__libc_init_array>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	4d0d      	ldr	r5, [pc, #52]	; (8003c04 <__libc_init_array+0x38>)
 8003bd0:	4c0d      	ldr	r4, [pc, #52]	; (8003c08 <__libc_init_array+0x3c>)
 8003bd2:	1b64      	subs	r4, r4, r5
 8003bd4:	10a4      	asrs	r4, r4, #2
 8003bd6:	2600      	movs	r6, #0
 8003bd8:	42a6      	cmp	r6, r4
 8003bda:	d109      	bne.n	8003bf0 <__libc_init_array+0x24>
 8003bdc:	4d0b      	ldr	r5, [pc, #44]	; (8003c0c <__libc_init_array+0x40>)
 8003bde:	4c0c      	ldr	r4, [pc, #48]	; (8003c10 <__libc_init_array+0x44>)
 8003be0:	f002 fd36 	bl	8006650 <_init>
 8003be4:	1b64      	subs	r4, r4, r5
 8003be6:	10a4      	asrs	r4, r4, #2
 8003be8:	2600      	movs	r6, #0
 8003bea:	42a6      	cmp	r6, r4
 8003bec:	d105      	bne.n	8003bfa <__libc_init_array+0x2e>
 8003bee:	bd70      	pop	{r4, r5, r6, pc}
 8003bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf4:	4798      	blx	r3
 8003bf6:	3601      	adds	r6, #1
 8003bf8:	e7ee      	b.n	8003bd8 <__libc_init_array+0xc>
 8003bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfe:	4798      	blx	r3
 8003c00:	3601      	adds	r6, #1
 8003c02:	e7f2      	b.n	8003bea <__libc_init_array+0x1e>
 8003c04:	08006a6c 	.word	0x08006a6c
 8003c08:	08006a6c 	.word	0x08006a6c
 8003c0c:	08006a6c 	.word	0x08006a6c
 8003c10:	08006a70 	.word	0x08006a70

08003c14 <memset>:
 8003c14:	4402      	add	r2, r0
 8003c16:	4603      	mov	r3, r0
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d100      	bne.n	8003c1e <memset+0xa>
 8003c1c:	4770      	bx	lr
 8003c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c22:	e7f9      	b.n	8003c18 <memset+0x4>

08003c24 <__cvt>:
 8003c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c28:	ec55 4b10 	vmov	r4, r5, d0
 8003c2c:	2d00      	cmp	r5, #0
 8003c2e:	460e      	mov	r6, r1
 8003c30:	4619      	mov	r1, r3
 8003c32:	462b      	mov	r3, r5
 8003c34:	bfbb      	ittet	lt
 8003c36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003c3a:	461d      	movlt	r5, r3
 8003c3c:	2300      	movge	r3, #0
 8003c3e:	232d      	movlt	r3, #45	; 0x2d
 8003c40:	700b      	strb	r3, [r1, #0]
 8003c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003c48:	4691      	mov	r9, r2
 8003c4a:	f023 0820 	bic.w	r8, r3, #32
 8003c4e:	bfbc      	itt	lt
 8003c50:	4622      	movlt	r2, r4
 8003c52:	4614      	movlt	r4, r2
 8003c54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c58:	d005      	beq.n	8003c66 <__cvt+0x42>
 8003c5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003c5e:	d100      	bne.n	8003c62 <__cvt+0x3e>
 8003c60:	3601      	adds	r6, #1
 8003c62:	2102      	movs	r1, #2
 8003c64:	e000      	b.n	8003c68 <__cvt+0x44>
 8003c66:	2103      	movs	r1, #3
 8003c68:	ab03      	add	r3, sp, #12
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	ab02      	add	r3, sp, #8
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	ec45 4b10 	vmov	d0, r4, r5
 8003c74:	4653      	mov	r3, sl
 8003c76:	4632      	mov	r2, r6
 8003c78:	f000 fcca 	bl	8004610 <_dtoa_r>
 8003c7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003c80:	4607      	mov	r7, r0
 8003c82:	d102      	bne.n	8003c8a <__cvt+0x66>
 8003c84:	f019 0f01 	tst.w	r9, #1
 8003c88:	d022      	beq.n	8003cd0 <__cvt+0xac>
 8003c8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c8e:	eb07 0906 	add.w	r9, r7, r6
 8003c92:	d110      	bne.n	8003cb6 <__cvt+0x92>
 8003c94:	783b      	ldrb	r3, [r7, #0]
 8003c96:	2b30      	cmp	r3, #48	; 0x30
 8003c98:	d10a      	bne.n	8003cb0 <__cvt+0x8c>
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	f7fc ff31 	bl	8000b08 <__aeabi_dcmpeq>
 8003ca6:	b918      	cbnz	r0, 8003cb0 <__cvt+0x8c>
 8003ca8:	f1c6 0601 	rsb	r6, r6, #1
 8003cac:	f8ca 6000 	str.w	r6, [sl]
 8003cb0:	f8da 3000 	ldr.w	r3, [sl]
 8003cb4:	4499      	add	r9, r3
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2300      	movs	r3, #0
 8003cba:	4620      	mov	r0, r4
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	f7fc ff23 	bl	8000b08 <__aeabi_dcmpeq>
 8003cc2:	b108      	cbz	r0, 8003cc8 <__cvt+0xa4>
 8003cc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8003cc8:	2230      	movs	r2, #48	; 0x30
 8003cca:	9b03      	ldr	r3, [sp, #12]
 8003ccc:	454b      	cmp	r3, r9
 8003cce:	d307      	bcc.n	8003ce0 <__cvt+0xbc>
 8003cd0:	9b03      	ldr	r3, [sp, #12]
 8003cd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cd4:	1bdb      	subs	r3, r3, r7
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	b004      	add	sp, #16
 8003cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce0:	1c59      	adds	r1, r3, #1
 8003ce2:	9103      	str	r1, [sp, #12]
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e7f0      	b.n	8003cca <__cvt+0xa6>

08003ce8 <__exponent>:
 8003ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cea:	4603      	mov	r3, r0
 8003cec:	2900      	cmp	r1, #0
 8003cee:	bfb8      	it	lt
 8003cf0:	4249      	neglt	r1, r1
 8003cf2:	f803 2b02 	strb.w	r2, [r3], #2
 8003cf6:	bfb4      	ite	lt
 8003cf8:	222d      	movlt	r2, #45	; 0x2d
 8003cfa:	222b      	movge	r2, #43	; 0x2b
 8003cfc:	2909      	cmp	r1, #9
 8003cfe:	7042      	strb	r2, [r0, #1]
 8003d00:	dd2a      	ble.n	8003d58 <__exponent+0x70>
 8003d02:	f10d 0407 	add.w	r4, sp, #7
 8003d06:	46a4      	mov	ip, r4
 8003d08:	270a      	movs	r7, #10
 8003d0a:	46a6      	mov	lr, r4
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003d12:	fb07 1516 	mls	r5, r7, r6, r1
 8003d16:	3530      	adds	r5, #48	; 0x30
 8003d18:	2a63      	cmp	r2, #99	; 0x63
 8003d1a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003d1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003d22:	4631      	mov	r1, r6
 8003d24:	dcf1      	bgt.n	8003d0a <__exponent+0x22>
 8003d26:	3130      	adds	r1, #48	; 0x30
 8003d28:	f1ae 0502 	sub.w	r5, lr, #2
 8003d2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003d30:	1c44      	adds	r4, r0, #1
 8003d32:	4629      	mov	r1, r5
 8003d34:	4561      	cmp	r1, ip
 8003d36:	d30a      	bcc.n	8003d4e <__exponent+0x66>
 8003d38:	f10d 0209 	add.w	r2, sp, #9
 8003d3c:	eba2 020e 	sub.w	r2, r2, lr
 8003d40:	4565      	cmp	r5, ip
 8003d42:	bf88      	it	hi
 8003d44:	2200      	movhi	r2, #0
 8003d46:	4413      	add	r3, r2
 8003d48:	1a18      	subs	r0, r3, r0
 8003d4a:	b003      	add	sp, #12
 8003d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003d56:	e7ed      	b.n	8003d34 <__exponent+0x4c>
 8003d58:	2330      	movs	r3, #48	; 0x30
 8003d5a:	3130      	adds	r1, #48	; 0x30
 8003d5c:	7083      	strb	r3, [r0, #2]
 8003d5e:	70c1      	strb	r1, [r0, #3]
 8003d60:	1d03      	adds	r3, r0, #4
 8003d62:	e7f1      	b.n	8003d48 <__exponent+0x60>

08003d64 <_printf_float>:
 8003d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d68:	ed2d 8b02 	vpush	{d8}
 8003d6c:	b08d      	sub	sp, #52	; 0x34
 8003d6e:	460c      	mov	r4, r1
 8003d70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003d74:	4616      	mov	r6, r2
 8003d76:	461f      	mov	r7, r3
 8003d78:	4605      	mov	r5, r0
 8003d7a:	f001 fa37 	bl	80051ec <_localeconv_r>
 8003d7e:	f8d0 a000 	ldr.w	sl, [r0]
 8003d82:	4650      	mov	r0, sl
 8003d84:	f7fc fa44 	bl	8000210 <strlen>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	9305      	str	r3, [sp, #20]
 8003d90:	f8d8 3000 	ldr.w	r3, [r8]
 8003d94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003d98:	3307      	adds	r3, #7
 8003d9a:	f023 0307 	bic.w	r3, r3, #7
 8003d9e:	f103 0208 	add.w	r2, r3, #8
 8003da2:	f8c8 2000 	str.w	r2, [r8]
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003dae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003db2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003db6:	9307      	str	r3, [sp, #28]
 8003db8:	f8cd 8018 	str.w	r8, [sp, #24]
 8003dbc:	ee08 0a10 	vmov	s16, r0
 8003dc0:	4b9f      	ldr	r3, [pc, #636]	; (8004040 <_printf_float+0x2dc>)
 8003dc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dca:	f7fc fecf 	bl	8000b6c <__aeabi_dcmpun>
 8003dce:	bb88      	cbnz	r0, 8003e34 <_printf_float+0xd0>
 8003dd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dd4:	4b9a      	ldr	r3, [pc, #616]	; (8004040 <_printf_float+0x2dc>)
 8003dd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dda:	f7fc fea9 	bl	8000b30 <__aeabi_dcmple>
 8003dde:	bb48      	cbnz	r0, 8003e34 <_printf_float+0xd0>
 8003de0:	2200      	movs	r2, #0
 8003de2:	2300      	movs	r3, #0
 8003de4:	4640      	mov	r0, r8
 8003de6:	4649      	mov	r1, r9
 8003de8:	f7fc fe98 	bl	8000b1c <__aeabi_dcmplt>
 8003dec:	b110      	cbz	r0, 8003df4 <_printf_float+0x90>
 8003dee:	232d      	movs	r3, #45	; 0x2d
 8003df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df4:	4b93      	ldr	r3, [pc, #588]	; (8004044 <_printf_float+0x2e0>)
 8003df6:	4894      	ldr	r0, [pc, #592]	; (8004048 <_printf_float+0x2e4>)
 8003df8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003dfc:	bf94      	ite	ls
 8003dfe:	4698      	movls	r8, r3
 8003e00:	4680      	movhi	r8, r0
 8003e02:	2303      	movs	r3, #3
 8003e04:	6123      	str	r3, [r4, #16]
 8003e06:	9b05      	ldr	r3, [sp, #20]
 8003e08:	f023 0204 	bic.w	r2, r3, #4
 8003e0c:	6022      	str	r2, [r4, #0]
 8003e0e:	f04f 0900 	mov.w	r9, #0
 8003e12:	9700      	str	r7, [sp, #0]
 8003e14:	4633      	mov	r3, r6
 8003e16:	aa0b      	add	r2, sp, #44	; 0x2c
 8003e18:	4621      	mov	r1, r4
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 f9d8 	bl	80041d0 <_printf_common>
 8003e20:	3001      	adds	r0, #1
 8003e22:	f040 8090 	bne.w	8003f46 <_printf_float+0x1e2>
 8003e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e2a:	b00d      	add	sp, #52	; 0x34
 8003e2c:	ecbd 8b02 	vpop	{d8}
 8003e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	4640      	mov	r0, r8
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	f7fc fe96 	bl	8000b6c <__aeabi_dcmpun>
 8003e40:	b140      	cbz	r0, 8003e54 <_printf_float+0xf0>
 8003e42:	464b      	mov	r3, r9
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bfbc      	itt	lt
 8003e48:	232d      	movlt	r3, #45	; 0x2d
 8003e4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003e4e:	487f      	ldr	r0, [pc, #508]	; (800404c <_printf_float+0x2e8>)
 8003e50:	4b7f      	ldr	r3, [pc, #508]	; (8004050 <_printf_float+0x2ec>)
 8003e52:	e7d1      	b.n	8003df8 <_printf_float+0x94>
 8003e54:	6863      	ldr	r3, [r4, #4]
 8003e56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003e5a:	9206      	str	r2, [sp, #24]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	d13f      	bne.n	8003ee0 <_printf_float+0x17c>
 8003e60:	2306      	movs	r3, #6
 8003e62:	6063      	str	r3, [r4, #4]
 8003e64:	9b05      	ldr	r3, [sp, #20]
 8003e66:	6861      	ldr	r1, [r4, #4]
 8003e68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9303      	str	r3, [sp, #12]
 8003e70:	ab0a      	add	r3, sp, #40	; 0x28
 8003e72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003e76:	ab09      	add	r3, sp, #36	; 0x24
 8003e78:	ec49 8b10 	vmov	d0, r8, r9
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	6022      	str	r2, [r4, #0]
 8003e80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003e84:	4628      	mov	r0, r5
 8003e86:	f7ff fecd 	bl	8003c24 <__cvt>
 8003e8a:	9b06      	ldr	r3, [sp, #24]
 8003e8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e8e:	2b47      	cmp	r3, #71	; 0x47
 8003e90:	4680      	mov	r8, r0
 8003e92:	d108      	bne.n	8003ea6 <_printf_float+0x142>
 8003e94:	1cc8      	adds	r0, r1, #3
 8003e96:	db02      	blt.n	8003e9e <_printf_float+0x13a>
 8003e98:	6863      	ldr	r3, [r4, #4]
 8003e9a:	4299      	cmp	r1, r3
 8003e9c:	dd41      	ble.n	8003f22 <_printf_float+0x1be>
 8003e9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003ea2:	fa5f fb8b 	uxtb.w	fp, fp
 8003ea6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003eaa:	d820      	bhi.n	8003eee <_printf_float+0x18a>
 8003eac:	3901      	subs	r1, #1
 8003eae:	465a      	mov	r2, fp
 8003eb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003eb4:	9109      	str	r1, [sp, #36]	; 0x24
 8003eb6:	f7ff ff17 	bl	8003ce8 <__exponent>
 8003eba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ebc:	1813      	adds	r3, r2, r0
 8003ebe:	2a01      	cmp	r2, #1
 8003ec0:	4681      	mov	r9, r0
 8003ec2:	6123      	str	r3, [r4, #16]
 8003ec4:	dc02      	bgt.n	8003ecc <_printf_float+0x168>
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	07d2      	lsls	r2, r2, #31
 8003eca:	d501      	bpl.n	8003ed0 <_printf_float+0x16c>
 8003ecc:	3301      	adds	r3, #1
 8003ece:	6123      	str	r3, [r4, #16]
 8003ed0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d09c      	beq.n	8003e12 <_printf_float+0xae>
 8003ed8:	232d      	movs	r3, #45	; 0x2d
 8003eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ede:	e798      	b.n	8003e12 <_printf_float+0xae>
 8003ee0:	9a06      	ldr	r2, [sp, #24]
 8003ee2:	2a47      	cmp	r2, #71	; 0x47
 8003ee4:	d1be      	bne.n	8003e64 <_printf_float+0x100>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1bc      	bne.n	8003e64 <_printf_float+0x100>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e7b9      	b.n	8003e62 <_printf_float+0xfe>
 8003eee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003ef2:	d118      	bne.n	8003f26 <_printf_float+0x1c2>
 8003ef4:	2900      	cmp	r1, #0
 8003ef6:	6863      	ldr	r3, [r4, #4]
 8003ef8:	dd0b      	ble.n	8003f12 <_printf_float+0x1ae>
 8003efa:	6121      	str	r1, [r4, #16]
 8003efc:	b913      	cbnz	r3, 8003f04 <_printf_float+0x1a0>
 8003efe:	6822      	ldr	r2, [r4, #0]
 8003f00:	07d0      	lsls	r0, r2, #31
 8003f02:	d502      	bpl.n	8003f0a <_printf_float+0x1a6>
 8003f04:	3301      	adds	r3, #1
 8003f06:	440b      	add	r3, r1
 8003f08:	6123      	str	r3, [r4, #16]
 8003f0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003f0c:	f04f 0900 	mov.w	r9, #0
 8003f10:	e7de      	b.n	8003ed0 <_printf_float+0x16c>
 8003f12:	b913      	cbnz	r3, 8003f1a <_printf_float+0x1b6>
 8003f14:	6822      	ldr	r2, [r4, #0]
 8003f16:	07d2      	lsls	r2, r2, #31
 8003f18:	d501      	bpl.n	8003f1e <_printf_float+0x1ba>
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	e7f4      	b.n	8003f08 <_printf_float+0x1a4>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e7f2      	b.n	8003f08 <_printf_float+0x1a4>
 8003f22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f28:	4299      	cmp	r1, r3
 8003f2a:	db05      	blt.n	8003f38 <_printf_float+0x1d4>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	6121      	str	r1, [r4, #16]
 8003f30:	07d8      	lsls	r0, r3, #31
 8003f32:	d5ea      	bpl.n	8003f0a <_printf_float+0x1a6>
 8003f34:	1c4b      	adds	r3, r1, #1
 8003f36:	e7e7      	b.n	8003f08 <_printf_float+0x1a4>
 8003f38:	2900      	cmp	r1, #0
 8003f3a:	bfd4      	ite	le
 8003f3c:	f1c1 0202 	rsble	r2, r1, #2
 8003f40:	2201      	movgt	r2, #1
 8003f42:	4413      	add	r3, r2
 8003f44:	e7e0      	b.n	8003f08 <_printf_float+0x1a4>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	055a      	lsls	r2, r3, #21
 8003f4a:	d407      	bmi.n	8003f5c <_printf_float+0x1f8>
 8003f4c:	6923      	ldr	r3, [r4, #16]
 8003f4e:	4642      	mov	r2, r8
 8003f50:	4631      	mov	r1, r6
 8003f52:	4628      	mov	r0, r5
 8003f54:	47b8      	blx	r7
 8003f56:	3001      	adds	r0, #1
 8003f58:	d12c      	bne.n	8003fb4 <_printf_float+0x250>
 8003f5a:	e764      	b.n	8003e26 <_printf_float+0xc2>
 8003f5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003f60:	f240 80e0 	bls.w	8004124 <_printf_float+0x3c0>
 8003f64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f7fc fdcc 	bl	8000b08 <__aeabi_dcmpeq>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d034      	beq.n	8003fde <_printf_float+0x27a>
 8003f74:	4a37      	ldr	r2, [pc, #220]	; (8004054 <_printf_float+0x2f0>)
 8003f76:	2301      	movs	r3, #1
 8003f78:	4631      	mov	r1, r6
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	47b8      	blx	r7
 8003f7e:	3001      	adds	r0, #1
 8003f80:	f43f af51 	beq.w	8003e26 <_printf_float+0xc2>
 8003f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	db02      	blt.n	8003f92 <_printf_float+0x22e>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	07d8      	lsls	r0, r3, #31
 8003f90:	d510      	bpl.n	8003fb4 <_printf_float+0x250>
 8003f92:	ee18 3a10 	vmov	r3, s16
 8003f96:	4652      	mov	r2, sl
 8003f98:	4631      	mov	r1, r6
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	47b8      	blx	r7
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	f43f af41 	beq.w	8003e26 <_printf_float+0xc2>
 8003fa4:	f04f 0800 	mov.w	r8, #0
 8003fa8:	f104 091a 	add.w	r9, r4, #26
 8003fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	4543      	cmp	r3, r8
 8003fb2:	dc09      	bgt.n	8003fc8 <_printf_float+0x264>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	079b      	lsls	r3, r3, #30
 8003fb8:	f100 8105 	bmi.w	80041c6 <_printf_float+0x462>
 8003fbc:	68e0      	ldr	r0, [r4, #12]
 8003fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fc0:	4298      	cmp	r0, r3
 8003fc2:	bfb8      	it	lt
 8003fc4:	4618      	movlt	r0, r3
 8003fc6:	e730      	b.n	8003e2a <_printf_float+0xc6>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	464a      	mov	r2, r9
 8003fcc:	4631      	mov	r1, r6
 8003fce:	4628      	mov	r0, r5
 8003fd0:	47b8      	blx	r7
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	f43f af27 	beq.w	8003e26 <_printf_float+0xc2>
 8003fd8:	f108 0801 	add.w	r8, r8, #1
 8003fdc:	e7e6      	b.n	8003fac <_printf_float+0x248>
 8003fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	dc39      	bgt.n	8004058 <_printf_float+0x2f4>
 8003fe4:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <_printf_float+0x2f0>)
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	4631      	mov	r1, r6
 8003fea:	4628      	mov	r0, r5
 8003fec:	47b8      	blx	r7
 8003fee:	3001      	adds	r0, #1
 8003ff0:	f43f af19 	beq.w	8003e26 <_printf_float+0xc2>
 8003ff4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	d102      	bne.n	8004002 <_printf_float+0x29e>
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	07d9      	lsls	r1, r3, #31
 8004000:	d5d8      	bpl.n	8003fb4 <_printf_float+0x250>
 8004002:	ee18 3a10 	vmov	r3, s16
 8004006:	4652      	mov	r2, sl
 8004008:	4631      	mov	r1, r6
 800400a:	4628      	mov	r0, r5
 800400c:	47b8      	blx	r7
 800400e:	3001      	adds	r0, #1
 8004010:	f43f af09 	beq.w	8003e26 <_printf_float+0xc2>
 8004014:	f04f 0900 	mov.w	r9, #0
 8004018:	f104 0a1a 	add.w	sl, r4, #26
 800401c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800401e:	425b      	negs	r3, r3
 8004020:	454b      	cmp	r3, r9
 8004022:	dc01      	bgt.n	8004028 <_printf_float+0x2c4>
 8004024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004026:	e792      	b.n	8003f4e <_printf_float+0x1ea>
 8004028:	2301      	movs	r3, #1
 800402a:	4652      	mov	r2, sl
 800402c:	4631      	mov	r1, r6
 800402e:	4628      	mov	r0, r5
 8004030:	47b8      	blx	r7
 8004032:	3001      	adds	r0, #1
 8004034:	f43f aef7 	beq.w	8003e26 <_printf_float+0xc2>
 8004038:	f109 0901 	add.w	r9, r9, #1
 800403c:	e7ee      	b.n	800401c <_printf_float+0x2b8>
 800403e:	bf00      	nop
 8004040:	7fefffff 	.word	0x7fefffff
 8004044:	0800668c 	.word	0x0800668c
 8004048:	08006690 	.word	0x08006690
 800404c:	08006698 	.word	0x08006698
 8004050:	08006694 	.word	0x08006694
 8004054:	0800669c 	.word	0x0800669c
 8004058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800405a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800405c:	429a      	cmp	r2, r3
 800405e:	bfa8      	it	ge
 8004060:	461a      	movge	r2, r3
 8004062:	2a00      	cmp	r2, #0
 8004064:	4691      	mov	r9, r2
 8004066:	dc37      	bgt.n	80040d8 <_printf_float+0x374>
 8004068:	f04f 0b00 	mov.w	fp, #0
 800406c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004070:	f104 021a 	add.w	r2, r4, #26
 8004074:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004076:	9305      	str	r3, [sp, #20]
 8004078:	eba3 0309 	sub.w	r3, r3, r9
 800407c:	455b      	cmp	r3, fp
 800407e:	dc33      	bgt.n	80040e8 <_printf_float+0x384>
 8004080:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004084:	429a      	cmp	r2, r3
 8004086:	db3b      	blt.n	8004100 <_printf_float+0x39c>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	07da      	lsls	r2, r3, #31
 800408c:	d438      	bmi.n	8004100 <_printf_float+0x39c>
 800408e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004090:	9a05      	ldr	r2, [sp, #20]
 8004092:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004094:	1a9a      	subs	r2, r3, r2
 8004096:	eba3 0901 	sub.w	r9, r3, r1
 800409a:	4591      	cmp	r9, r2
 800409c:	bfa8      	it	ge
 800409e:	4691      	movge	r9, r2
 80040a0:	f1b9 0f00 	cmp.w	r9, #0
 80040a4:	dc35      	bgt.n	8004112 <_printf_float+0x3ae>
 80040a6:	f04f 0800 	mov.w	r8, #0
 80040aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040ae:	f104 0a1a 	add.w	sl, r4, #26
 80040b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	eba3 0309 	sub.w	r3, r3, r9
 80040bc:	4543      	cmp	r3, r8
 80040be:	f77f af79 	ble.w	8003fb4 <_printf_float+0x250>
 80040c2:	2301      	movs	r3, #1
 80040c4:	4652      	mov	r2, sl
 80040c6:	4631      	mov	r1, r6
 80040c8:	4628      	mov	r0, r5
 80040ca:	47b8      	blx	r7
 80040cc:	3001      	adds	r0, #1
 80040ce:	f43f aeaa 	beq.w	8003e26 <_printf_float+0xc2>
 80040d2:	f108 0801 	add.w	r8, r8, #1
 80040d6:	e7ec      	b.n	80040b2 <_printf_float+0x34e>
 80040d8:	4613      	mov	r3, r2
 80040da:	4631      	mov	r1, r6
 80040dc:	4642      	mov	r2, r8
 80040de:	4628      	mov	r0, r5
 80040e0:	47b8      	blx	r7
 80040e2:	3001      	adds	r0, #1
 80040e4:	d1c0      	bne.n	8004068 <_printf_float+0x304>
 80040e6:	e69e      	b.n	8003e26 <_printf_float+0xc2>
 80040e8:	2301      	movs	r3, #1
 80040ea:	4631      	mov	r1, r6
 80040ec:	4628      	mov	r0, r5
 80040ee:	9205      	str	r2, [sp, #20]
 80040f0:	47b8      	blx	r7
 80040f2:	3001      	adds	r0, #1
 80040f4:	f43f ae97 	beq.w	8003e26 <_printf_float+0xc2>
 80040f8:	9a05      	ldr	r2, [sp, #20]
 80040fa:	f10b 0b01 	add.w	fp, fp, #1
 80040fe:	e7b9      	b.n	8004074 <_printf_float+0x310>
 8004100:	ee18 3a10 	vmov	r3, s16
 8004104:	4652      	mov	r2, sl
 8004106:	4631      	mov	r1, r6
 8004108:	4628      	mov	r0, r5
 800410a:	47b8      	blx	r7
 800410c:	3001      	adds	r0, #1
 800410e:	d1be      	bne.n	800408e <_printf_float+0x32a>
 8004110:	e689      	b.n	8003e26 <_printf_float+0xc2>
 8004112:	9a05      	ldr	r2, [sp, #20]
 8004114:	464b      	mov	r3, r9
 8004116:	4442      	add	r2, r8
 8004118:	4631      	mov	r1, r6
 800411a:	4628      	mov	r0, r5
 800411c:	47b8      	blx	r7
 800411e:	3001      	adds	r0, #1
 8004120:	d1c1      	bne.n	80040a6 <_printf_float+0x342>
 8004122:	e680      	b.n	8003e26 <_printf_float+0xc2>
 8004124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004126:	2a01      	cmp	r2, #1
 8004128:	dc01      	bgt.n	800412e <_printf_float+0x3ca>
 800412a:	07db      	lsls	r3, r3, #31
 800412c:	d538      	bpl.n	80041a0 <_printf_float+0x43c>
 800412e:	2301      	movs	r3, #1
 8004130:	4642      	mov	r2, r8
 8004132:	4631      	mov	r1, r6
 8004134:	4628      	mov	r0, r5
 8004136:	47b8      	blx	r7
 8004138:	3001      	adds	r0, #1
 800413a:	f43f ae74 	beq.w	8003e26 <_printf_float+0xc2>
 800413e:	ee18 3a10 	vmov	r3, s16
 8004142:	4652      	mov	r2, sl
 8004144:	4631      	mov	r1, r6
 8004146:	4628      	mov	r0, r5
 8004148:	47b8      	blx	r7
 800414a:	3001      	adds	r0, #1
 800414c:	f43f ae6b 	beq.w	8003e26 <_printf_float+0xc2>
 8004150:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004154:	2200      	movs	r2, #0
 8004156:	2300      	movs	r3, #0
 8004158:	f7fc fcd6 	bl	8000b08 <__aeabi_dcmpeq>
 800415c:	b9d8      	cbnz	r0, 8004196 <_printf_float+0x432>
 800415e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004160:	f108 0201 	add.w	r2, r8, #1
 8004164:	3b01      	subs	r3, #1
 8004166:	4631      	mov	r1, r6
 8004168:	4628      	mov	r0, r5
 800416a:	47b8      	blx	r7
 800416c:	3001      	adds	r0, #1
 800416e:	d10e      	bne.n	800418e <_printf_float+0x42a>
 8004170:	e659      	b.n	8003e26 <_printf_float+0xc2>
 8004172:	2301      	movs	r3, #1
 8004174:	4652      	mov	r2, sl
 8004176:	4631      	mov	r1, r6
 8004178:	4628      	mov	r0, r5
 800417a:	47b8      	blx	r7
 800417c:	3001      	adds	r0, #1
 800417e:	f43f ae52 	beq.w	8003e26 <_printf_float+0xc2>
 8004182:	f108 0801 	add.w	r8, r8, #1
 8004186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	4543      	cmp	r3, r8
 800418c:	dcf1      	bgt.n	8004172 <_printf_float+0x40e>
 800418e:	464b      	mov	r3, r9
 8004190:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004194:	e6dc      	b.n	8003f50 <_printf_float+0x1ec>
 8004196:	f04f 0800 	mov.w	r8, #0
 800419a:	f104 0a1a 	add.w	sl, r4, #26
 800419e:	e7f2      	b.n	8004186 <_printf_float+0x422>
 80041a0:	2301      	movs	r3, #1
 80041a2:	4642      	mov	r2, r8
 80041a4:	e7df      	b.n	8004166 <_printf_float+0x402>
 80041a6:	2301      	movs	r3, #1
 80041a8:	464a      	mov	r2, r9
 80041aa:	4631      	mov	r1, r6
 80041ac:	4628      	mov	r0, r5
 80041ae:	47b8      	blx	r7
 80041b0:	3001      	adds	r0, #1
 80041b2:	f43f ae38 	beq.w	8003e26 <_printf_float+0xc2>
 80041b6:	f108 0801 	add.w	r8, r8, #1
 80041ba:	68e3      	ldr	r3, [r4, #12]
 80041bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041be:	1a5b      	subs	r3, r3, r1
 80041c0:	4543      	cmp	r3, r8
 80041c2:	dcf0      	bgt.n	80041a6 <_printf_float+0x442>
 80041c4:	e6fa      	b.n	8003fbc <_printf_float+0x258>
 80041c6:	f04f 0800 	mov.w	r8, #0
 80041ca:	f104 0919 	add.w	r9, r4, #25
 80041ce:	e7f4      	b.n	80041ba <_printf_float+0x456>

080041d0 <_printf_common>:
 80041d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d4:	4616      	mov	r6, r2
 80041d6:	4699      	mov	r9, r3
 80041d8:	688a      	ldr	r2, [r1, #8]
 80041da:	690b      	ldr	r3, [r1, #16]
 80041dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041e0:	4293      	cmp	r3, r2
 80041e2:	bfb8      	it	lt
 80041e4:	4613      	movlt	r3, r2
 80041e6:	6033      	str	r3, [r6, #0]
 80041e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041ec:	4607      	mov	r7, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	b10a      	cbz	r2, 80041f6 <_printf_common+0x26>
 80041f2:	3301      	adds	r3, #1
 80041f4:	6033      	str	r3, [r6, #0]
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	0699      	lsls	r1, r3, #26
 80041fa:	bf42      	ittt	mi
 80041fc:	6833      	ldrmi	r3, [r6, #0]
 80041fe:	3302      	addmi	r3, #2
 8004200:	6033      	strmi	r3, [r6, #0]
 8004202:	6825      	ldr	r5, [r4, #0]
 8004204:	f015 0506 	ands.w	r5, r5, #6
 8004208:	d106      	bne.n	8004218 <_printf_common+0x48>
 800420a:	f104 0a19 	add.w	sl, r4, #25
 800420e:	68e3      	ldr	r3, [r4, #12]
 8004210:	6832      	ldr	r2, [r6, #0]
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	42ab      	cmp	r3, r5
 8004216:	dc26      	bgt.n	8004266 <_printf_common+0x96>
 8004218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800421c:	1e13      	subs	r3, r2, #0
 800421e:	6822      	ldr	r2, [r4, #0]
 8004220:	bf18      	it	ne
 8004222:	2301      	movne	r3, #1
 8004224:	0692      	lsls	r2, r2, #26
 8004226:	d42b      	bmi.n	8004280 <_printf_common+0xb0>
 8004228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800422c:	4649      	mov	r1, r9
 800422e:	4638      	mov	r0, r7
 8004230:	47c0      	blx	r8
 8004232:	3001      	adds	r0, #1
 8004234:	d01e      	beq.n	8004274 <_printf_common+0xa4>
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	68e5      	ldr	r5, [r4, #12]
 800423a:	6832      	ldr	r2, [r6, #0]
 800423c:	f003 0306 	and.w	r3, r3, #6
 8004240:	2b04      	cmp	r3, #4
 8004242:	bf08      	it	eq
 8004244:	1aad      	subeq	r5, r5, r2
 8004246:	68a3      	ldr	r3, [r4, #8]
 8004248:	6922      	ldr	r2, [r4, #16]
 800424a:	bf0c      	ite	eq
 800424c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004250:	2500      	movne	r5, #0
 8004252:	4293      	cmp	r3, r2
 8004254:	bfc4      	itt	gt
 8004256:	1a9b      	subgt	r3, r3, r2
 8004258:	18ed      	addgt	r5, r5, r3
 800425a:	2600      	movs	r6, #0
 800425c:	341a      	adds	r4, #26
 800425e:	42b5      	cmp	r5, r6
 8004260:	d11a      	bne.n	8004298 <_printf_common+0xc8>
 8004262:	2000      	movs	r0, #0
 8004264:	e008      	b.n	8004278 <_printf_common+0xa8>
 8004266:	2301      	movs	r3, #1
 8004268:	4652      	mov	r2, sl
 800426a:	4649      	mov	r1, r9
 800426c:	4638      	mov	r0, r7
 800426e:	47c0      	blx	r8
 8004270:	3001      	adds	r0, #1
 8004272:	d103      	bne.n	800427c <_printf_common+0xac>
 8004274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427c:	3501      	adds	r5, #1
 800427e:	e7c6      	b.n	800420e <_printf_common+0x3e>
 8004280:	18e1      	adds	r1, r4, r3
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	2030      	movs	r0, #48	; 0x30
 8004286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800428a:	4422      	add	r2, r4
 800428c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004294:	3302      	adds	r3, #2
 8004296:	e7c7      	b.n	8004228 <_printf_common+0x58>
 8004298:	2301      	movs	r3, #1
 800429a:	4622      	mov	r2, r4
 800429c:	4649      	mov	r1, r9
 800429e:	4638      	mov	r0, r7
 80042a0:	47c0      	blx	r8
 80042a2:	3001      	adds	r0, #1
 80042a4:	d0e6      	beq.n	8004274 <_printf_common+0xa4>
 80042a6:	3601      	adds	r6, #1
 80042a8:	e7d9      	b.n	800425e <_printf_common+0x8e>
	...

080042ac <_printf_i>:
 80042ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042b0:	7e0f      	ldrb	r7, [r1, #24]
 80042b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042b4:	2f78      	cmp	r7, #120	; 0x78
 80042b6:	4691      	mov	r9, r2
 80042b8:	4680      	mov	r8, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	469a      	mov	sl, r3
 80042be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042c2:	d807      	bhi.n	80042d4 <_printf_i+0x28>
 80042c4:	2f62      	cmp	r7, #98	; 0x62
 80042c6:	d80a      	bhi.n	80042de <_printf_i+0x32>
 80042c8:	2f00      	cmp	r7, #0
 80042ca:	f000 80d8 	beq.w	800447e <_printf_i+0x1d2>
 80042ce:	2f58      	cmp	r7, #88	; 0x58
 80042d0:	f000 80a3 	beq.w	800441a <_printf_i+0x16e>
 80042d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042dc:	e03a      	b.n	8004354 <_printf_i+0xa8>
 80042de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042e2:	2b15      	cmp	r3, #21
 80042e4:	d8f6      	bhi.n	80042d4 <_printf_i+0x28>
 80042e6:	a101      	add	r1, pc, #4	; (adr r1, 80042ec <_printf_i+0x40>)
 80042e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042ec:	08004345 	.word	0x08004345
 80042f0:	08004359 	.word	0x08004359
 80042f4:	080042d5 	.word	0x080042d5
 80042f8:	080042d5 	.word	0x080042d5
 80042fc:	080042d5 	.word	0x080042d5
 8004300:	080042d5 	.word	0x080042d5
 8004304:	08004359 	.word	0x08004359
 8004308:	080042d5 	.word	0x080042d5
 800430c:	080042d5 	.word	0x080042d5
 8004310:	080042d5 	.word	0x080042d5
 8004314:	080042d5 	.word	0x080042d5
 8004318:	08004465 	.word	0x08004465
 800431c:	08004389 	.word	0x08004389
 8004320:	08004447 	.word	0x08004447
 8004324:	080042d5 	.word	0x080042d5
 8004328:	080042d5 	.word	0x080042d5
 800432c:	08004487 	.word	0x08004487
 8004330:	080042d5 	.word	0x080042d5
 8004334:	08004389 	.word	0x08004389
 8004338:	080042d5 	.word	0x080042d5
 800433c:	080042d5 	.word	0x080042d5
 8004340:	0800444f 	.word	0x0800444f
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	1d1a      	adds	r2, r3, #4
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	602a      	str	r2, [r5, #0]
 800434c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004354:	2301      	movs	r3, #1
 8004356:	e0a3      	b.n	80044a0 <_printf_i+0x1f4>
 8004358:	6820      	ldr	r0, [r4, #0]
 800435a:	6829      	ldr	r1, [r5, #0]
 800435c:	0606      	lsls	r6, r0, #24
 800435e:	f101 0304 	add.w	r3, r1, #4
 8004362:	d50a      	bpl.n	800437a <_printf_i+0xce>
 8004364:	680e      	ldr	r6, [r1, #0]
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	2e00      	cmp	r6, #0
 800436a:	da03      	bge.n	8004374 <_printf_i+0xc8>
 800436c:	232d      	movs	r3, #45	; 0x2d
 800436e:	4276      	negs	r6, r6
 8004370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004374:	485e      	ldr	r0, [pc, #376]	; (80044f0 <_printf_i+0x244>)
 8004376:	230a      	movs	r3, #10
 8004378:	e019      	b.n	80043ae <_printf_i+0x102>
 800437a:	680e      	ldr	r6, [r1, #0]
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004382:	bf18      	it	ne
 8004384:	b236      	sxthne	r6, r6
 8004386:	e7ef      	b.n	8004368 <_printf_i+0xbc>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	6820      	ldr	r0, [r4, #0]
 800438c:	1d19      	adds	r1, r3, #4
 800438e:	6029      	str	r1, [r5, #0]
 8004390:	0601      	lsls	r1, r0, #24
 8004392:	d501      	bpl.n	8004398 <_printf_i+0xec>
 8004394:	681e      	ldr	r6, [r3, #0]
 8004396:	e002      	b.n	800439e <_printf_i+0xf2>
 8004398:	0646      	lsls	r6, r0, #25
 800439a:	d5fb      	bpl.n	8004394 <_printf_i+0xe8>
 800439c:	881e      	ldrh	r6, [r3, #0]
 800439e:	4854      	ldr	r0, [pc, #336]	; (80044f0 <_printf_i+0x244>)
 80043a0:	2f6f      	cmp	r7, #111	; 0x6f
 80043a2:	bf0c      	ite	eq
 80043a4:	2308      	moveq	r3, #8
 80043a6:	230a      	movne	r3, #10
 80043a8:	2100      	movs	r1, #0
 80043aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ae:	6865      	ldr	r5, [r4, #4]
 80043b0:	60a5      	str	r5, [r4, #8]
 80043b2:	2d00      	cmp	r5, #0
 80043b4:	bfa2      	ittt	ge
 80043b6:	6821      	ldrge	r1, [r4, #0]
 80043b8:	f021 0104 	bicge.w	r1, r1, #4
 80043bc:	6021      	strge	r1, [r4, #0]
 80043be:	b90e      	cbnz	r6, 80043c4 <_printf_i+0x118>
 80043c0:	2d00      	cmp	r5, #0
 80043c2:	d04d      	beq.n	8004460 <_printf_i+0x1b4>
 80043c4:	4615      	mov	r5, r2
 80043c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80043ca:	fb03 6711 	mls	r7, r3, r1, r6
 80043ce:	5dc7      	ldrb	r7, [r0, r7]
 80043d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043d4:	4637      	mov	r7, r6
 80043d6:	42bb      	cmp	r3, r7
 80043d8:	460e      	mov	r6, r1
 80043da:	d9f4      	bls.n	80043c6 <_printf_i+0x11a>
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d10b      	bne.n	80043f8 <_printf_i+0x14c>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	07de      	lsls	r6, r3, #31
 80043e4:	d508      	bpl.n	80043f8 <_printf_i+0x14c>
 80043e6:	6923      	ldr	r3, [r4, #16]
 80043e8:	6861      	ldr	r1, [r4, #4]
 80043ea:	4299      	cmp	r1, r3
 80043ec:	bfde      	ittt	le
 80043ee:	2330      	movle	r3, #48	; 0x30
 80043f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80043f8:	1b52      	subs	r2, r2, r5
 80043fa:	6122      	str	r2, [r4, #16]
 80043fc:	f8cd a000 	str.w	sl, [sp]
 8004400:	464b      	mov	r3, r9
 8004402:	aa03      	add	r2, sp, #12
 8004404:	4621      	mov	r1, r4
 8004406:	4640      	mov	r0, r8
 8004408:	f7ff fee2 	bl	80041d0 <_printf_common>
 800440c:	3001      	adds	r0, #1
 800440e:	d14c      	bne.n	80044aa <_printf_i+0x1fe>
 8004410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004414:	b004      	add	sp, #16
 8004416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441a:	4835      	ldr	r0, [pc, #212]	; (80044f0 <_printf_i+0x244>)
 800441c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004420:	6829      	ldr	r1, [r5, #0]
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f851 6b04 	ldr.w	r6, [r1], #4
 8004428:	6029      	str	r1, [r5, #0]
 800442a:	061d      	lsls	r5, r3, #24
 800442c:	d514      	bpl.n	8004458 <_printf_i+0x1ac>
 800442e:	07df      	lsls	r7, r3, #31
 8004430:	bf44      	itt	mi
 8004432:	f043 0320 	orrmi.w	r3, r3, #32
 8004436:	6023      	strmi	r3, [r4, #0]
 8004438:	b91e      	cbnz	r6, 8004442 <_printf_i+0x196>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	f023 0320 	bic.w	r3, r3, #32
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	2310      	movs	r3, #16
 8004444:	e7b0      	b.n	80043a8 <_printf_i+0xfc>
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	f043 0320 	orr.w	r3, r3, #32
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	2378      	movs	r3, #120	; 0x78
 8004450:	4828      	ldr	r0, [pc, #160]	; (80044f4 <_printf_i+0x248>)
 8004452:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004456:	e7e3      	b.n	8004420 <_printf_i+0x174>
 8004458:	0659      	lsls	r1, r3, #25
 800445a:	bf48      	it	mi
 800445c:	b2b6      	uxthmi	r6, r6
 800445e:	e7e6      	b.n	800442e <_printf_i+0x182>
 8004460:	4615      	mov	r5, r2
 8004462:	e7bb      	b.n	80043dc <_printf_i+0x130>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	6826      	ldr	r6, [r4, #0]
 8004468:	6961      	ldr	r1, [r4, #20]
 800446a:	1d18      	adds	r0, r3, #4
 800446c:	6028      	str	r0, [r5, #0]
 800446e:	0635      	lsls	r5, r6, #24
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	d501      	bpl.n	8004478 <_printf_i+0x1cc>
 8004474:	6019      	str	r1, [r3, #0]
 8004476:	e002      	b.n	800447e <_printf_i+0x1d2>
 8004478:	0670      	lsls	r0, r6, #25
 800447a:	d5fb      	bpl.n	8004474 <_printf_i+0x1c8>
 800447c:	8019      	strh	r1, [r3, #0]
 800447e:	2300      	movs	r3, #0
 8004480:	6123      	str	r3, [r4, #16]
 8004482:	4615      	mov	r5, r2
 8004484:	e7ba      	b.n	80043fc <_printf_i+0x150>
 8004486:	682b      	ldr	r3, [r5, #0]
 8004488:	1d1a      	adds	r2, r3, #4
 800448a:	602a      	str	r2, [r5, #0]
 800448c:	681d      	ldr	r5, [r3, #0]
 800448e:	6862      	ldr	r2, [r4, #4]
 8004490:	2100      	movs	r1, #0
 8004492:	4628      	mov	r0, r5
 8004494:	f7fb fec4 	bl	8000220 <memchr>
 8004498:	b108      	cbz	r0, 800449e <_printf_i+0x1f2>
 800449a:	1b40      	subs	r0, r0, r5
 800449c:	6060      	str	r0, [r4, #4]
 800449e:	6863      	ldr	r3, [r4, #4]
 80044a0:	6123      	str	r3, [r4, #16]
 80044a2:	2300      	movs	r3, #0
 80044a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a8:	e7a8      	b.n	80043fc <_printf_i+0x150>
 80044aa:	6923      	ldr	r3, [r4, #16]
 80044ac:	462a      	mov	r2, r5
 80044ae:	4649      	mov	r1, r9
 80044b0:	4640      	mov	r0, r8
 80044b2:	47d0      	blx	sl
 80044b4:	3001      	adds	r0, #1
 80044b6:	d0ab      	beq.n	8004410 <_printf_i+0x164>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	079b      	lsls	r3, r3, #30
 80044bc:	d413      	bmi.n	80044e6 <_printf_i+0x23a>
 80044be:	68e0      	ldr	r0, [r4, #12]
 80044c0:	9b03      	ldr	r3, [sp, #12]
 80044c2:	4298      	cmp	r0, r3
 80044c4:	bfb8      	it	lt
 80044c6:	4618      	movlt	r0, r3
 80044c8:	e7a4      	b.n	8004414 <_printf_i+0x168>
 80044ca:	2301      	movs	r3, #1
 80044cc:	4632      	mov	r2, r6
 80044ce:	4649      	mov	r1, r9
 80044d0:	4640      	mov	r0, r8
 80044d2:	47d0      	blx	sl
 80044d4:	3001      	adds	r0, #1
 80044d6:	d09b      	beq.n	8004410 <_printf_i+0x164>
 80044d8:	3501      	adds	r5, #1
 80044da:	68e3      	ldr	r3, [r4, #12]
 80044dc:	9903      	ldr	r1, [sp, #12]
 80044de:	1a5b      	subs	r3, r3, r1
 80044e0:	42ab      	cmp	r3, r5
 80044e2:	dcf2      	bgt.n	80044ca <_printf_i+0x21e>
 80044e4:	e7eb      	b.n	80044be <_printf_i+0x212>
 80044e6:	2500      	movs	r5, #0
 80044e8:	f104 0619 	add.w	r6, r4, #25
 80044ec:	e7f5      	b.n	80044da <_printf_i+0x22e>
 80044ee:	bf00      	nop
 80044f0:	0800669e 	.word	0x0800669e
 80044f4:	080066af 	.word	0x080066af

080044f8 <quorem>:
 80044f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fc:	6903      	ldr	r3, [r0, #16]
 80044fe:	690c      	ldr	r4, [r1, #16]
 8004500:	42a3      	cmp	r3, r4
 8004502:	4607      	mov	r7, r0
 8004504:	f2c0 8081 	blt.w	800460a <quorem+0x112>
 8004508:	3c01      	subs	r4, #1
 800450a:	f101 0814 	add.w	r8, r1, #20
 800450e:	f100 0514 	add.w	r5, r0, #20
 8004512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800451c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004520:	3301      	adds	r3, #1
 8004522:	429a      	cmp	r2, r3
 8004524:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004528:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800452c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004530:	d331      	bcc.n	8004596 <quorem+0x9e>
 8004532:	f04f 0e00 	mov.w	lr, #0
 8004536:	4640      	mov	r0, r8
 8004538:	46ac      	mov	ip, r5
 800453a:	46f2      	mov	sl, lr
 800453c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004540:	b293      	uxth	r3, r2
 8004542:	fb06 e303 	mla	r3, r6, r3, lr
 8004546:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800454a:	b29b      	uxth	r3, r3
 800454c:	ebaa 0303 	sub.w	r3, sl, r3
 8004550:	f8dc a000 	ldr.w	sl, [ip]
 8004554:	0c12      	lsrs	r2, r2, #16
 8004556:	fa13 f38a 	uxtah	r3, r3, sl
 800455a:	fb06 e202 	mla	r2, r6, r2, lr
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	9b00      	ldr	r3, [sp, #0]
 8004562:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004566:	b292      	uxth	r2, r2
 8004568:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800456c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004570:	f8bd 3000 	ldrh.w	r3, [sp]
 8004574:	4581      	cmp	r9, r0
 8004576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800457a:	f84c 3b04 	str.w	r3, [ip], #4
 800457e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004582:	d2db      	bcs.n	800453c <quorem+0x44>
 8004584:	f855 300b 	ldr.w	r3, [r5, fp]
 8004588:	b92b      	cbnz	r3, 8004596 <quorem+0x9e>
 800458a:	9b01      	ldr	r3, [sp, #4]
 800458c:	3b04      	subs	r3, #4
 800458e:	429d      	cmp	r5, r3
 8004590:	461a      	mov	r2, r3
 8004592:	d32e      	bcc.n	80045f2 <quorem+0xfa>
 8004594:	613c      	str	r4, [r7, #16]
 8004596:	4638      	mov	r0, r7
 8004598:	f001 f8c4 	bl	8005724 <__mcmp>
 800459c:	2800      	cmp	r0, #0
 800459e:	db24      	blt.n	80045ea <quorem+0xf2>
 80045a0:	3601      	adds	r6, #1
 80045a2:	4628      	mov	r0, r5
 80045a4:	f04f 0c00 	mov.w	ip, #0
 80045a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80045ac:	f8d0 e000 	ldr.w	lr, [r0]
 80045b0:	b293      	uxth	r3, r2
 80045b2:	ebac 0303 	sub.w	r3, ip, r3
 80045b6:	0c12      	lsrs	r2, r2, #16
 80045b8:	fa13 f38e 	uxtah	r3, r3, lr
 80045bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80045c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045ca:	45c1      	cmp	r9, r8
 80045cc:	f840 3b04 	str.w	r3, [r0], #4
 80045d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80045d4:	d2e8      	bcs.n	80045a8 <quorem+0xb0>
 80045d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045de:	b922      	cbnz	r2, 80045ea <quorem+0xf2>
 80045e0:	3b04      	subs	r3, #4
 80045e2:	429d      	cmp	r5, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	d30a      	bcc.n	80045fe <quorem+0x106>
 80045e8:	613c      	str	r4, [r7, #16]
 80045ea:	4630      	mov	r0, r6
 80045ec:	b003      	add	sp, #12
 80045ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	3b04      	subs	r3, #4
 80045f6:	2a00      	cmp	r2, #0
 80045f8:	d1cc      	bne.n	8004594 <quorem+0x9c>
 80045fa:	3c01      	subs	r4, #1
 80045fc:	e7c7      	b.n	800458e <quorem+0x96>
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	3b04      	subs	r3, #4
 8004602:	2a00      	cmp	r2, #0
 8004604:	d1f0      	bne.n	80045e8 <quorem+0xf0>
 8004606:	3c01      	subs	r4, #1
 8004608:	e7eb      	b.n	80045e2 <quorem+0xea>
 800460a:	2000      	movs	r0, #0
 800460c:	e7ee      	b.n	80045ec <quorem+0xf4>
	...

08004610 <_dtoa_r>:
 8004610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004614:	ed2d 8b04 	vpush	{d8-d9}
 8004618:	ec57 6b10 	vmov	r6, r7, d0
 800461c:	b093      	sub	sp, #76	; 0x4c
 800461e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004620:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004624:	9106      	str	r1, [sp, #24]
 8004626:	ee10 aa10 	vmov	sl, s0
 800462a:	4604      	mov	r4, r0
 800462c:	9209      	str	r2, [sp, #36]	; 0x24
 800462e:	930c      	str	r3, [sp, #48]	; 0x30
 8004630:	46bb      	mov	fp, r7
 8004632:	b975      	cbnz	r5, 8004652 <_dtoa_r+0x42>
 8004634:	2010      	movs	r0, #16
 8004636:	f000 fddd 	bl	80051f4 <malloc>
 800463a:	4602      	mov	r2, r0
 800463c:	6260      	str	r0, [r4, #36]	; 0x24
 800463e:	b920      	cbnz	r0, 800464a <_dtoa_r+0x3a>
 8004640:	4ba7      	ldr	r3, [pc, #668]	; (80048e0 <_dtoa_r+0x2d0>)
 8004642:	21ea      	movs	r1, #234	; 0xea
 8004644:	48a7      	ldr	r0, [pc, #668]	; (80048e4 <_dtoa_r+0x2d4>)
 8004646:	f001 fa75 	bl	8005b34 <__assert_func>
 800464a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800464e:	6005      	str	r5, [r0, #0]
 8004650:	60c5      	str	r5, [r0, #12]
 8004652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004654:	6819      	ldr	r1, [r3, #0]
 8004656:	b151      	cbz	r1, 800466e <_dtoa_r+0x5e>
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	604a      	str	r2, [r1, #4]
 800465c:	2301      	movs	r3, #1
 800465e:	4093      	lsls	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
 8004662:	4620      	mov	r0, r4
 8004664:	f000 fe1c 	bl	80052a0 <_Bfree>
 8004668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	1e3b      	subs	r3, r7, #0
 8004670:	bfaa      	itet	ge
 8004672:	2300      	movge	r3, #0
 8004674:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004678:	f8c8 3000 	strge.w	r3, [r8]
 800467c:	4b9a      	ldr	r3, [pc, #616]	; (80048e8 <_dtoa_r+0x2d8>)
 800467e:	bfbc      	itt	lt
 8004680:	2201      	movlt	r2, #1
 8004682:	f8c8 2000 	strlt.w	r2, [r8]
 8004686:	ea33 030b 	bics.w	r3, r3, fp
 800468a:	d11b      	bne.n	80046c4 <_dtoa_r+0xb4>
 800468c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800468e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004698:	4333      	orrs	r3, r6
 800469a:	f000 8592 	beq.w	80051c2 <_dtoa_r+0xbb2>
 800469e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046a0:	b963      	cbnz	r3, 80046bc <_dtoa_r+0xac>
 80046a2:	4b92      	ldr	r3, [pc, #584]	; (80048ec <_dtoa_r+0x2dc>)
 80046a4:	e022      	b.n	80046ec <_dtoa_r+0xdc>
 80046a6:	4b92      	ldr	r3, [pc, #584]	; (80048f0 <_dtoa_r+0x2e0>)
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	3308      	adds	r3, #8
 80046ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	9801      	ldr	r0, [sp, #4]
 80046b2:	b013      	add	sp, #76	; 0x4c
 80046b4:	ecbd 8b04 	vpop	{d8-d9}
 80046b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046bc:	4b8b      	ldr	r3, [pc, #556]	; (80048ec <_dtoa_r+0x2dc>)
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	3303      	adds	r3, #3
 80046c2:	e7f3      	b.n	80046ac <_dtoa_r+0x9c>
 80046c4:	2200      	movs	r2, #0
 80046c6:	2300      	movs	r3, #0
 80046c8:	4650      	mov	r0, sl
 80046ca:	4659      	mov	r1, fp
 80046cc:	f7fc fa1c 	bl	8000b08 <__aeabi_dcmpeq>
 80046d0:	ec4b ab19 	vmov	d9, sl, fp
 80046d4:	4680      	mov	r8, r0
 80046d6:	b158      	cbz	r0, 80046f0 <_dtoa_r+0xe0>
 80046d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046da:	2301      	movs	r3, #1
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 856b 	beq.w	80051bc <_dtoa_r+0xbac>
 80046e6:	4883      	ldr	r0, [pc, #524]	; (80048f4 <_dtoa_r+0x2e4>)
 80046e8:	6018      	str	r0, [r3, #0]
 80046ea:	1e43      	subs	r3, r0, #1
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	e7df      	b.n	80046b0 <_dtoa_r+0xa0>
 80046f0:	ec4b ab10 	vmov	d0, sl, fp
 80046f4:	aa10      	add	r2, sp, #64	; 0x40
 80046f6:	a911      	add	r1, sp, #68	; 0x44
 80046f8:	4620      	mov	r0, r4
 80046fa:	f001 f8b9 	bl	8005870 <__d2b>
 80046fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004702:	ee08 0a10 	vmov	s16, r0
 8004706:	2d00      	cmp	r5, #0
 8004708:	f000 8084 	beq.w	8004814 <_dtoa_r+0x204>
 800470c:	ee19 3a90 	vmov	r3, s19
 8004710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004714:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004718:	4656      	mov	r6, sl
 800471a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800471e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004722:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004726:	4b74      	ldr	r3, [pc, #464]	; (80048f8 <_dtoa_r+0x2e8>)
 8004728:	2200      	movs	r2, #0
 800472a:	4630      	mov	r0, r6
 800472c:	4639      	mov	r1, r7
 800472e:	f7fb fdcb 	bl	80002c8 <__aeabi_dsub>
 8004732:	a365      	add	r3, pc, #404	; (adr r3, 80048c8 <_dtoa_r+0x2b8>)
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f7fb ff7e 	bl	8000638 <__aeabi_dmul>
 800473c:	a364      	add	r3, pc, #400	; (adr r3, 80048d0 <_dtoa_r+0x2c0>)
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	f7fb fdc3 	bl	80002cc <__adddf3>
 8004746:	4606      	mov	r6, r0
 8004748:	4628      	mov	r0, r5
 800474a:	460f      	mov	r7, r1
 800474c:	f7fb ff0a 	bl	8000564 <__aeabi_i2d>
 8004750:	a361      	add	r3, pc, #388	; (adr r3, 80048d8 <_dtoa_r+0x2c8>)
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f7fb ff6f 	bl	8000638 <__aeabi_dmul>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4630      	mov	r0, r6
 8004760:	4639      	mov	r1, r7
 8004762:	f7fb fdb3 	bl	80002cc <__adddf3>
 8004766:	4606      	mov	r6, r0
 8004768:	460f      	mov	r7, r1
 800476a:	f7fc fa15 	bl	8000b98 <__aeabi_d2iz>
 800476e:	2200      	movs	r2, #0
 8004770:	9000      	str	r0, [sp, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	4630      	mov	r0, r6
 8004776:	4639      	mov	r1, r7
 8004778:	f7fc f9d0 	bl	8000b1c <__aeabi_dcmplt>
 800477c:	b150      	cbz	r0, 8004794 <_dtoa_r+0x184>
 800477e:	9800      	ldr	r0, [sp, #0]
 8004780:	f7fb fef0 	bl	8000564 <__aeabi_i2d>
 8004784:	4632      	mov	r2, r6
 8004786:	463b      	mov	r3, r7
 8004788:	f7fc f9be 	bl	8000b08 <__aeabi_dcmpeq>
 800478c:	b910      	cbnz	r0, 8004794 <_dtoa_r+0x184>
 800478e:	9b00      	ldr	r3, [sp, #0]
 8004790:	3b01      	subs	r3, #1
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	9b00      	ldr	r3, [sp, #0]
 8004796:	2b16      	cmp	r3, #22
 8004798:	d85a      	bhi.n	8004850 <_dtoa_r+0x240>
 800479a:	9a00      	ldr	r2, [sp, #0]
 800479c:	4b57      	ldr	r3, [pc, #348]	; (80048fc <_dtoa_r+0x2ec>)
 800479e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	ec51 0b19 	vmov	r0, r1, d9
 80047aa:	f7fc f9b7 	bl	8000b1c <__aeabi_dcmplt>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d050      	beq.n	8004854 <_dtoa_r+0x244>
 80047b2:	9b00      	ldr	r3, [sp, #0]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	2300      	movs	r3, #0
 80047ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80047bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047be:	1b5d      	subs	r5, r3, r5
 80047c0:	1e6b      	subs	r3, r5, #1
 80047c2:	9305      	str	r3, [sp, #20]
 80047c4:	bf45      	ittet	mi
 80047c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80047ca:	9304      	strmi	r3, [sp, #16]
 80047cc:	2300      	movpl	r3, #0
 80047ce:	2300      	movmi	r3, #0
 80047d0:	bf4c      	ite	mi
 80047d2:	9305      	strmi	r3, [sp, #20]
 80047d4:	9304      	strpl	r3, [sp, #16]
 80047d6:	9b00      	ldr	r3, [sp, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	db3d      	blt.n	8004858 <_dtoa_r+0x248>
 80047dc:	9b05      	ldr	r3, [sp, #20]
 80047de:	9a00      	ldr	r2, [sp, #0]
 80047e0:	920a      	str	r2, [sp, #40]	; 0x28
 80047e2:	4413      	add	r3, r2
 80047e4:	9305      	str	r3, [sp, #20]
 80047e6:	2300      	movs	r3, #0
 80047e8:	9307      	str	r3, [sp, #28]
 80047ea:	9b06      	ldr	r3, [sp, #24]
 80047ec:	2b09      	cmp	r3, #9
 80047ee:	f200 8089 	bhi.w	8004904 <_dtoa_r+0x2f4>
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	bfc4      	itt	gt
 80047f6:	3b04      	subgt	r3, #4
 80047f8:	9306      	strgt	r3, [sp, #24]
 80047fa:	9b06      	ldr	r3, [sp, #24]
 80047fc:	f1a3 0302 	sub.w	r3, r3, #2
 8004800:	bfcc      	ite	gt
 8004802:	2500      	movgt	r5, #0
 8004804:	2501      	movle	r5, #1
 8004806:	2b03      	cmp	r3, #3
 8004808:	f200 8087 	bhi.w	800491a <_dtoa_r+0x30a>
 800480c:	e8df f003 	tbb	[pc, r3]
 8004810:	59383a2d 	.word	0x59383a2d
 8004814:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004818:	441d      	add	r5, r3
 800481a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800481e:	2b20      	cmp	r3, #32
 8004820:	bfc1      	itttt	gt
 8004822:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004826:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800482a:	fa0b f303 	lslgt.w	r3, fp, r3
 800482e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004832:	bfda      	itte	le
 8004834:	f1c3 0320 	rsble	r3, r3, #32
 8004838:	fa06 f003 	lslle.w	r0, r6, r3
 800483c:	4318      	orrgt	r0, r3
 800483e:	f7fb fe81 	bl	8000544 <__aeabi_ui2d>
 8004842:	2301      	movs	r3, #1
 8004844:	4606      	mov	r6, r0
 8004846:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800484a:	3d01      	subs	r5, #1
 800484c:	930e      	str	r3, [sp, #56]	; 0x38
 800484e:	e76a      	b.n	8004726 <_dtoa_r+0x116>
 8004850:	2301      	movs	r3, #1
 8004852:	e7b2      	b.n	80047ba <_dtoa_r+0x1aa>
 8004854:	900b      	str	r0, [sp, #44]	; 0x2c
 8004856:	e7b1      	b.n	80047bc <_dtoa_r+0x1ac>
 8004858:	9b04      	ldr	r3, [sp, #16]
 800485a:	9a00      	ldr	r2, [sp, #0]
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	9304      	str	r3, [sp, #16]
 8004860:	4253      	negs	r3, r2
 8004862:	9307      	str	r3, [sp, #28]
 8004864:	2300      	movs	r3, #0
 8004866:	930a      	str	r3, [sp, #40]	; 0x28
 8004868:	e7bf      	b.n	80047ea <_dtoa_r+0x1da>
 800486a:	2300      	movs	r3, #0
 800486c:	9308      	str	r3, [sp, #32]
 800486e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	dc55      	bgt.n	8004920 <_dtoa_r+0x310>
 8004874:	2301      	movs	r3, #1
 8004876:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800487a:	461a      	mov	r2, r3
 800487c:	9209      	str	r2, [sp, #36]	; 0x24
 800487e:	e00c      	b.n	800489a <_dtoa_r+0x28a>
 8004880:	2301      	movs	r3, #1
 8004882:	e7f3      	b.n	800486c <_dtoa_r+0x25c>
 8004884:	2300      	movs	r3, #0
 8004886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004888:	9308      	str	r3, [sp, #32]
 800488a:	9b00      	ldr	r3, [sp, #0]
 800488c:	4413      	add	r3, r2
 800488e:	9302      	str	r3, [sp, #8]
 8004890:	3301      	adds	r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	9303      	str	r3, [sp, #12]
 8004896:	bfb8      	it	lt
 8004898:	2301      	movlt	r3, #1
 800489a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800489c:	2200      	movs	r2, #0
 800489e:	6042      	str	r2, [r0, #4]
 80048a0:	2204      	movs	r2, #4
 80048a2:	f102 0614 	add.w	r6, r2, #20
 80048a6:	429e      	cmp	r6, r3
 80048a8:	6841      	ldr	r1, [r0, #4]
 80048aa:	d93d      	bls.n	8004928 <_dtoa_r+0x318>
 80048ac:	4620      	mov	r0, r4
 80048ae:	f000 fcb7 	bl	8005220 <_Balloc>
 80048b2:	9001      	str	r0, [sp, #4]
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d13b      	bne.n	8004930 <_dtoa_r+0x320>
 80048b8:	4b11      	ldr	r3, [pc, #68]	; (8004900 <_dtoa_r+0x2f0>)
 80048ba:	4602      	mov	r2, r0
 80048bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80048c0:	e6c0      	b.n	8004644 <_dtoa_r+0x34>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e7df      	b.n	8004886 <_dtoa_r+0x276>
 80048c6:	bf00      	nop
 80048c8:	636f4361 	.word	0x636f4361
 80048cc:	3fd287a7 	.word	0x3fd287a7
 80048d0:	8b60c8b3 	.word	0x8b60c8b3
 80048d4:	3fc68a28 	.word	0x3fc68a28
 80048d8:	509f79fb 	.word	0x509f79fb
 80048dc:	3fd34413 	.word	0x3fd34413
 80048e0:	080066cd 	.word	0x080066cd
 80048e4:	080066e4 	.word	0x080066e4
 80048e8:	7ff00000 	.word	0x7ff00000
 80048ec:	080066c9 	.word	0x080066c9
 80048f0:	080066c0 	.word	0x080066c0
 80048f4:	0800669d 	.word	0x0800669d
 80048f8:	3ff80000 	.word	0x3ff80000
 80048fc:	080067d8 	.word	0x080067d8
 8004900:	0800673f 	.word	0x0800673f
 8004904:	2501      	movs	r5, #1
 8004906:	2300      	movs	r3, #0
 8004908:	9306      	str	r3, [sp, #24]
 800490a:	9508      	str	r5, [sp, #32]
 800490c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004910:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004914:	2200      	movs	r2, #0
 8004916:	2312      	movs	r3, #18
 8004918:	e7b0      	b.n	800487c <_dtoa_r+0x26c>
 800491a:	2301      	movs	r3, #1
 800491c:	9308      	str	r3, [sp, #32]
 800491e:	e7f5      	b.n	800490c <_dtoa_r+0x2fc>
 8004920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004922:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004926:	e7b8      	b.n	800489a <_dtoa_r+0x28a>
 8004928:	3101      	adds	r1, #1
 800492a:	6041      	str	r1, [r0, #4]
 800492c:	0052      	lsls	r2, r2, #1
 800492e:	e7b8      	b.n	80048a2 <_dtoa_r+0x292>
 8004930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004932:	9a01      	ldr	r2, [sp, #4]
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	9b03      	ldr	r3, [sp, #12]
 8004938:	2b0e      	cmp	r3, #14
 800493a:	f200 809d 	bhi.w	8004a78 <_dtoa_r+0x468>
 800493e:	2d00      	cmp	r5, #0
 8004940:	f000 809a 	beq.w	8004a78 <_dtoa_r+0x468>
 8004944:	9b00      	ldr	r3, [sp, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	dd32      	ble.n	80049b0 <_dtoa_r+0x3a0>
 800494a:	4ab7      	ldr	r2, [pc, #732]	; (8004c28 <_dtoa_r+0x618>)
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004954:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004958:	9b00      	ldr	r3, [sp, #0]
 800495a:	05d8      	lsls	r0, r3, #23
 800495c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004960:	d516      	bpl.n	8004990 <_dtoa_r+0x380>
 8004962:	4bb2      	ldr	r3, [pc, #712]	; (8004c2c <_dtoa_r+0x61c>)
 8004964:	ec51 0b19 	vmov	r0, r1, d9
 8004968:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800496c:	f7fb ff8e 	bl	800088c <__aeabi_ddiv>
 8004970:	f007 070f 	and.w	r7, r7, #15
 8004974:	4682      	mov	sl, r0
 8004976:	468b      	mov	fp, r1
 8004978:	2503      	movs	r5, #3
 800497a:	4eac      	ldr	r6, [pc, #688]	; (8004c2c <_dtoa_r+0x61c>)
 800497c:	b957      	cbnz	r7, 8004994 <_dtoa_r+0x384>
 800497e:	4642      	mov	r2, r8
 8004980:	464b      	mov	r3, r9
 8004982:	4650      	mov	r0, sl
 8004984:	4659      	mov	r1, fp
 8004986:	f7fb ff81 	bl	800088c <__aeabi_ddiv>
 800498a:	4682      	mov	sl, r0
 800498c:	468b      	mov	fp, r1
 800498e:	e028      	b.n	80049e2 <_dtoa_r+0x3d2>
 8004990:	2502      	movs	r5, #2
 8004992:	e7f2      	b.n	800497a <_dtoa_r+0x36a>
 8004994:	07f9      	lsls	r1, r7, #31
 8004996:	d508      	bpl.n	80049aa <_dtoa_r+0x39a>
 8004998:	4640      	mov	r0, r8
 800499a:	4649      	mov	r1, r9
 800499c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80049a0:	f7fb fe4a 	bl	8000638 <__aeabi_dmul>
 80049a4:	3501      	adds	r5, #1
 80049a6:	4680      	mov	r8, r0
 80049a8:	4689      	mov	r9, r1
 80049aa:	107f      	asrs	r7, r7, #1
 80049ac:	3608      	adds	r6, #8
 80049ae:	e7e5      	b.n	800497c <_dtoa_r+0x36c>
 80049b0:	f000 809b 	beq.w	8004aea <_dtoa_r+0x4da>
 80049b4:	9b00      	ldr	r3, [sp, #0]
 80049b6:	4f9d      	ldr	r7, [pc, #628]	; (8004c2c <_dtoa_r+0x61c>)
 80049b8:	425e      	negs	r6, r3
 80049ba:	4b9b      	ldr	r3, [pc, #620]	; (8004c28 <_dtoa_r+0x618>)
 80049bc:	f006 020f 	and.w	r2, r6, #15
 80049c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	ec51 0b19 	vmov	r0, r1, d9
 80049cc:	f7fb fe34 	bl	8000638 <__aeabi_dmul>
 80049d0:	1136      	asrs	r6, r6, #4
 80049d2:	4682      	mov	sl, r0
 80049d4:	468b      	mov	fp, r1
 80049d6:	2300      	movs	r3, #0
 80049d8:	2502      	movs	r5, #2
 80049da:	2e00      	cmp	r6, #0
 80049dc:	d17a      	bne.n	8004ad4 <_dtoa_r+0x4c4>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1d3      	bne.n	800498a <_dtoa_r+0x37a>
 80049e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8082 	beq.w	8004aee <_dtoa_r+0x4de>
 80049ea:	4b91      	ldr	r3, [pc, #580]	; (8004c30 <_dtoa_r+0x620>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	4650      	mov	r0, sl
 80049f0:	4659      	mov	r1, fp
 80049f2:	f7fc f893 	bl	8000b1c <__aeabi_dcmplt>
 80049f6:	2800      	cmp	r0, #0
 80049f8:	d079      	beq.n	8004aee <_dtoa_r+0x4de>
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d076      	beq.n	8004aee <_dtoa_r+0x4de>
 8004a00:	9b02      	ldr	r3, [sp, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	dd36      	ble.n	8004a74 <_dtoa_r+0x464>
 8004a06:	9b00      	ldr	r3, [sp, #0]
 8004a08:	4650      	mov	r0, sl
 8004a0a:	4659      	mov	r1, fp
 8004a0c:	1e5f      	subs	r7, r3, #1
 8004a0e:	2200      	movs	r2, #0
 8004a10:	4b88      	ldr	r3, [pc, #544]	; (8004c34 <_dtoa_r+0x624>)
 8004a12:	f7fb fe11 	bl	8000638 <__aeabi_dmul>
 8004a16:	9e02      	ldr	r6, [sp, #8]
 8004a18:	4682      	mov	sl, r0
 8004a1a:	468b      	mov	fp, r1
 8004a1c:	3501      	adds	r5, #1
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f7fb fda0 	bl	8000564 <__aeabi_i2d>
 8004a24:	4652      	mov	r2, sl
 8004a26:	465b      	mov	r3, fp
 8004a28:	f7fb fe06 	bl	8000638 <__aeabi_dmul>
 8004a2c:	4b82      	ldr	r3, [pc, #520]	; (8004c38 <_dtoa_r+0x628>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f7fb fc4c 	bl	80002cc <__adddf3>
 8004a34:	46d0      	mov	r8, sl
 8004a36:	46d9      	mov	r9, fp
 8004a38:	4682      	mov	sl, r0
 8004a3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004a3e:	2e00      	cmp	r6, #0
 8004a40:	d158      	bne.n	8004af4 <_dtoa_r+0x4e4>
 8004a42:	4b7e      	ldr	r3, [pc, #504]	; (8004c3c <_dtoa_r+0x62c>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	4640      	mov	r0, r8
 8004a48:	4649      	mov	r1, r9
 8004a4a:	f7fb fc3d 	bl	80002c8 <__aeabi_dsub>
 8004a4e:	4652      	mov	r2, sl
 8004a50:	465b      	mov	r3, fp
 8004a52:	4680      	mov	r8, r0
 8004a54:	4689      	mov	r9, r1
 8004a56:	f7fc f87f 	bl	8000b58 <__aeabi_dcmpgt>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	f040 8295 	bne.w	8004f8a <_dtoa_r+0x97a>
 8004a60:	4652      	mov	r2, sl
 8004a62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004a66:	4640      	mov	r0, r8
 8004a68:	4649      	mov	r1, r9
 8004a6a:	f7fc f857 	bl	8000b1c <__aeabi_dcmplt>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	f040 8289 	bne.w	8004f86 <_dtoa_r+0x976>
 8004a74:	ec5b ab19 	vmov	sl, fp, d9
 8004a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f2c0 8148 	blt.w	8004d10 <_dtoa_r+0x700>
 8004a80:	9a00      	ldr	r2, [sp, #0]
 8004a82:	2a0e      	cmp	r2, #14
 8004a84:	f300 8144 	bgt.w	8004d10 <_dtoa_r+0x700>
 8004a88:	4b67      	ldr	r3, [pc, #412]	; (8004c28 <_dtoa_r+0x618>)
 8004a8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f280 80d5 	bge.w	8004c44 <_dtoa_r+0x634>
 8004a9a:	9b03      	ldr	r3, [sp, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f300 80d1 	bgt.w	8004c44 <_dtoa_r+0x634>
 8004aa2:	f040 826f 	bne.w	8004f84 <_dtoa_r+0x974>
 8004aa6:	4b65      	ldr	r3, [pc, #404]	; (8004c3c <_dtoa_r+0x62c>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	4640      	mov	r0, r8
 8004aac:	4649      	mov	r1, r9
 8004aae:	f7fb fdc3 	bl	8000638 <__aeabi_dmul>
 8004ab2:	4652      	mov	r2, sl
 8004ab4:	465b      	mov	r3, fp
 8004ab6:	f7fc f845 	bl	8000b44 <__aeabi_dcmpge>
 8004aba:	9e03      	ldr	r6, [sp, #12]
 8004abc:	4637      	mov	r7, r6
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	f040 8245 	bne.w	8004f4e <_dtoa_r+0x93e>
 8004ac4:	9d01      	ldr	r5, [sp, #4]
 8004ac6:	2331      	movs	r3, #49	; 0x31
 8004ac8:	f805 3b01 	strb.w	r3, [r5], #1
 8004acc:	9b00      	ldr	r3, [sp, #0]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	e240      	b.n	8004f56 <_dtoa_r+0x946>
 8004ad4:	07f2      	lsls	r2, r6, #31
 8004ad6:	d505      	bpl.n	8004ae4 <_dtoa_r+0x4d4>
 8004ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004adc:	f7fb fdac 	bl	8000638 <__aeabi_dmul>
 8004ae0:	3501      	adds	r5, #1
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	1076      	asrs	r6, r6, #1
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	e777      	b.n	80049da <_dtoa_r+0x3ca>
 8004aea:	2502      	movs	r5, #2
 8004aec:	e779      	b.n	80049e2 <_dtoa_r+0x3d2>
 8004aee:	9f00      	ldr	r7, [sp, #0]
 8004af0:	9e03      	ldr	r6, [sp, #12]
 8004af2:	e794      	b.n	8004a1e <_dtoa_r+0x40e>
 8004af4:	9901      	ldr	r1, [sp, #4]
 8004af6:	4b4c      	ldr	r3, [pc, #304]	; (8004c28 <_dtoa_r+0x618>)
 8004af8:	4431      	add	r1, r6
 8004afa:	910d      	str	r1, [sp, #52]	; 0x34
 8004afc:	9908      	ldr	r1, [sp, #32]
 8004afe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004b02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b06:	2900      	cmp	r1, #0
 8004b08:	d043      	beq.n	8004b92 <_dtoa_r+0x582>
 8004b0a:	494d      	ldr	r1, [pc, #308]	; (8004c40 <_dtoa_r+0x630>)
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	f7fb febd 	bl	800088c <__aeabi_ddiv>
 8004b12:	4652      	mov	r2, sl
 8004b14:	465b      	mov	r3, fp
 8004b16:	f7fb fbd7 	bl	80002c8 <__aeabi_dsub>
 8004b1a:	9d01      	ldr	r5, [sp, #4]
 8004b1c:	4682      	mov	sl, r0
 8004b1e:	468b      	mov	fp, r1
 8004b20:	4649      	mov	r1, r9
 8004b22:	4640      	mov	r0, r8
 8004b24:	f7fc f838 	bl	8000b98 <__aeabi_d2iz>
 8004b28:	4606      	mov	r6, r0
 8004b2a:	f7fb fd1b 	bl	8000564 <__aeabi_i2d>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4640      	mov	r0, r8
 8004b34:	4649      	mov	r1, r9
 8004b36:	f7fb fbc7 	bl	80002c8 <__aeabi_dsub>
 8004b3a:	3630      	adds	r6, #48	; 0x30
 8004b3c:	f805 6b01 	strb.w	r6, [r5], #1
 8004b40:	4652      	mov	r2, sl
 8004b42:	465b      	mov	r3, fp
 8004b44:	4680      	mov	r8, r0
 8004b46:	4689      	mov	r9, r1
 8004b48:	f7fb ffe8 	bl	8000b1c <__aeabi_dcmplt>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d163      	bne.n	8004c18 <_dtoa_r+0x608>
 8004b50:	4642      	mov	r2, r8
 8004b52:	464b      	mov	r3, r9
 8004b54:	4936      	ldr	r1, [pc, #216]	; (8004c30 <_dtoa_r+0x620>)
 8004b56:	2000      	movs	r0, #0
 8004b58:	f7fb fbb6 	bl	80002c8 <__aeabi_dsub>
 8004b5c:	4652      	mov	r2, sl
 8004b5e:	465b      	mov	r3, fp
 8004b60:	f7fb ffdc 	bl	8000b1c <__aeabi_dcmplt>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	f040 80b5 	bne.w	8004cd4 <_dtoa_r+0x6c4>
 8004b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b6c:	429d      	cmp	r5, r3
 8004b6e:	d081      	beq.n	8004a74 <_dtoa_r+0x464>
 8004b70:	4b30      	ldr	r3, [pc, #192]	; (8004c34 <_dtoa_r+0x624>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	4650      	mov	r0, sl
 8004b76:	4659      	mov	r1, fp
 8004b78:	f7fb fd5e 	bl	8000638 <__aeabi_dmul>
 8004b7c:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <_dtoa_r+0x624>)
 8004b7e:	4682      	mov	sl, r0
 8004b80:	468b      	mov	fp, r1
 8004b82:	4640      	mov	r0, r8
 8004b84:	4649      	mov	r1, r9
 8004b86:	2200      	movs	r2, #0
 8004b88:	f7fb fd56 	bl	8000638 <__aeabi_dmul>
 8004b8c:	4680      	mov	r8, r0
 8004b8e:	4689      	mov	r9, r1
 8004b90:	e7c6      	b.n	8004b20 <_dtoa_r+0x510>
 8004b92:	4650      	mov	r0, sl
 8004b94:	4659      	mov	r1, fp
 8004b96:	f7fb fd4f 	bl	8000638 <__aeabi_dmul>
 8004b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b9c:	9d01      	ldr	r5, [sp, #4]
 8004b9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ba0:	4682      	mov	sl, r0
 8004ba2:	468b      	mov	fp, r1
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	f7fb fff6 	bl	8000b98 <__aeabi_d2iz>
 8004bac:	4606      	mov	r6, r0
 8004bae:	f7fb fcd9 	bl	8000564 <__aeabi_i2d>
 8004bb2:	3630      	adds	r6, #48	; 0x30
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4640      	mov	r0, r8
 8004bba:	4649      	mov	r1, r9
 8004bbc:	f7fb fb84 	bl	80002c8 <__aeabi_dsub>
 8004bc0:	f805 6b01 	strb.w	r6, [r5], #1
 8004bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bc6:	429d      	cmp	r5, r3
 8004bc8:	4680      	mov	r8, r0
 8004bca:	4689      	mov	r9, r1
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	d124      	bne.n	8004c1c <_dtoa_r+0x60c>
 8004bd2:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <_dtoa_r+0x630>)
 8004bd4:	4650      	mov	r0, sl
 8004bd6:	4659      	mov	r1, fp
 8004bd8:	f7fb fb78 	bl	80002cc <__adddf3>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4640      	mov	r0, r8
 8004be2:	4649      	mov	r1, r9
 8004be4:	f7fb ffb8 	bl	8000b58 <__aeabi_dcmpgt>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d173      	bne.n	8004cd4 <_dtoa_r+0x6c4>
 8004bec:	4652      	mov	r2, sl
 8004bee:	465b      	mov	r3, fp
 8004bf0:	4913      	ldr	r1, [pc, #76]	; (8004c40 <_dtoa_r+0x630>)
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f7fb fb68 	bl	80002c8 <__aeabi_dsub>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4640      	mov	r0, r8
 8004bfe:	4649      	mov	r1, r9
 8004c00:	f7fb ff8c 	bl	8000b1c <__aeabi_dcmplt>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	f43f af35 	beq.w	8004a74 <_dtoa_r+0x464>
 8004c0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004c0c:	1e6b      	subs	r3, r5, #1
 8004c0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c14:	2b30      	cmp	r3, #48	; 0x30
 8004c16:	d0f8      	beq.n	8004c0a <_dtoa_r+0x5fa>
 8004c18:	9700      	str	r7, [sp, #0]
 8004c1a:	e049      	b.n	8004cb0 <_dtoa_r+0x6a0>
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <_dtoa_r+0x624>)
 8004c1e:	f7fb fd0b 	bl	8000638 <__aeabi_dmul>
 8004c22:	4680      	mov	r8, r0
 8004c24:	4689      	mov	r9, r1
 8004c26:	e7bd      	b.n	8004ba4 <_dtoa_r+0x594>
 8004c28:	080067d8 	.word	0x080067d8
 8004c2c:	080067b0 	.word	0x080067b0
 8004c30:	3ff00000 	.word	0x3ff00000
 8004c34:	40240000 	.word	0x40240000
 8004c38:	401c0000 	.word	0x401c0000
 8004c3c:	40140000 	.word	0x40140000
 8004c40:	3fe00000 	.word	0x3fe00000
 8004c44:	9d01      	ldr	r5, [sp, #4]
 8004c46:	4656      	mov	r6, sl
 8004c48:	465f      	mov	r7, fp
 8004c4a:	4642      	mov	r2, r8
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	4630      	mov	r0, r6
 8004c50:	4639      	mov	r1, r7
 8004c52:	f7fb fe1b 	bl	800088c <__aeabi_ddiv>
 8004c56:	f7fb ff9f 	bl	8000b98 <__aeabi_d2iz>
 8004c5a:	4682      	mov	sl, r0
 8004c5c:	f7fb fc82 	bl	8000564 <__aeabi_i2d>
 8004c60:	4642      	mov	r2, r8
 8004c62:	464b      	mov	r3, r9
 8004c64:	f7fb fce8 	bl	8000638 <__aeabi_dmul>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	4639      	mov	r1, r7
 8004c70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004c74:	f7fb fb28 	bl	80002c8 <__aeabi_dsub>
 8004c78:	f805 6b01 	strb.w	r6, [r5], #1
 8004c7c:	9e01      	ldr	r6, [sp, #4]
 8004c7e:	9f03      	ldr	r7, [sp, #12]
 8004c80:	1bae      	subs	r6, r5, r6
 8004c82:	42b7      	cmp	r7, r6
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	d135      	bne.n	8004cf6 <_dtoa_r+0x6e6>
 8004c8a:	f7fb fb1f 	bl	80002cc <__adddf3>
 8004c8e:	4642      	mov	r2, r8
 8004c90:	464b      	mov	r3, r9
 8004c92:	4606      	mov	r6, r0
 8004c94:	460f      	mov	r7, r1
 8004c96:	f7fb ff5f 	bl	8000b58 <__aeabi_dcmpgt>
 8004c9a:	b9d0      	cbnz	r0, 8004cd2 <_dtoa_r+0x6c2>
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	4639      	mov	r1, r7
 8004ca4:	f7fb ff30 	bl	8000b08 <__aeabi_dcmpeq>
 8004ca8:	b110      	cbz	r0, 8004cb0 <_dtoa_r+0x6a0>
 8004caa:	f01a 0f01 	tst.w	sl, #1
 8004cae:	d110      	bne.n	8004cd2 <_dtoa_r+0x6c2>
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	ee18 1a10 	vmov	r1, s16
 8004cb6:	f000 faf3 	bl	80052a0 <_Bfree>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	9800      	ldr	r0, [sp, #0]
 8004cbe:	702b      	strb	r3, [r5, #0]
 8004cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	6018      	str	r0, [r3, #0]
 8004cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f43f acf1 	beq.w	80046b0 <_dtoa_r+0xa0>
 8004cce:	601d      	str	r5, [r3, #0]
 8004cd0:	e4ee      	b.n	80046b0 <_dtoa_r+0xa0>
 8004cd2:	9f00      	ldr	r7, [sp, #0]
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	461d      	mov	r5, r3
 8004cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cdc:	2a39      	cmp	r2, #57	; 0x39
 8004cde:	d106      	bne.n	8004cee <_dtoa_r+0x6de>
 8004ce0:	9a01      	ldr	r2, [sp, #4]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d1f7      	bne.n	8004cd6 <_dtoa_r+0x6c6>
 8004ce6:	9901      	ldr	r1, [sp, #4]
 8004ce8:	2230      	movs	r2, #48	; 0x30
 8004cea:	3701      	adds	r7, #1
 8004cec:	700a      	strb	r2, [r1, #0]
 8004cee:	781a      	ldrb	r2, [r3, #0]
 8004cf0:	3201      	adds	r2, #1
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	e790      	b.n	8004c18 <_dtoa_r+0x608>
 8004cf6:	4ba6      	ldr	r3, [pc, #664]	; (8004f90 <_dtoa_r+0x980>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f7fb fc9d 	bl	8000638 <__aeabi_dmul>
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2300      	movs	r3, #0
 8004d02:	4606      	mov	r6, r0
 8004d04:	460f      	mov	r7, r1
 8004d06:	f7fb feff 	bl	8000b08 <__aeabi_dcmpeq>
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	d09d      	beq.n	8004c4a <_dtoa_r+0x63a>
 8004d0e:	e7cf      	b.n	8004cb0 <_dtoa_r+0x6a0>
 8004d10:	9a08      	ldr	r2, [sp, #32]
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	f000 80d7 	beq.w	8004ec6 <_dtoa_r+0x8b6>
 8004d18:	9a06      	ldr	r2, [sp, #24]
 8004d1a:	2a01      	cmp	r2, #1
 8004d1c:	f300 80ba 	bgt.w	8004e94 <_dtoa_r+0x884>
 8004d20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d22:	2a00      	cmp	r2, #0
 8004d24:	f000 80b2 	beq.w	8004e8c <_dtoa_r+0x87c>
 8004d28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004d2c:	9e07      	ldr	r6, [sp, #28]
 8004d2e:	9d04      	ldr	r5, [sp, #16]
 8004d30:	9a04      	ldr	r2, [sp, #16]
 8004d32:	441a      	add	r2, r3
 8004d34:	9204      	str	r2, [sp, #16]
 8004d36:	9a05      	ldr	r2, [sp, #20]
 8004d38:	2101      	movs	r1, #1
 8004d3a:	441a      	add	r2, r3
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	9205      	str	r2, [sp, #20]
 8004d40:	f000 fb66 	bl	8005410 <__i2b>
 8004d44:	4607      	mov	r7, r0
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	dd0c      	ble.n	8004d64 <_dtoa_r+0x754>
 8004d4a:	9b05      	ldr	r3, [sp, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	dd09      	ble.n	8004d64 <_dtoa_r+0x754>
 8004d50:	42ab      	cmp	r3, r5
 8004d52:	9a04      	ldr	r2, [sp, #16]
 8004d54:	bfa8      	it	ge
 8004d56:	462b      	movge	r3, r5
 8004d58:	1ad2      	subs	r2, r2, r3
 8004d5a:	9204      	str	r2, [sp, #16]
 8004d5c:	9a05      	ldr	r2, [sp, #20]
 8004d5e:	1aed      	subs	r5, r5, r3
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	9305      	str	r3, [sp, #20]
 8004d64:	9b07      	ldr	r3, [sp, #28]
 8004d66:	b31b      	cbz	r3, 8004db0 <_dtoa_r+0x7a0>
 8004d68:	9b08      	ldr	r3, [sp, #32]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 80af 	beq.w	8004ece <_dtoa_r+0x8be>
 8004d70:	2e00      	cmp	r6, #0
 8004d72:	dd13      	ble.n	8004d9c <_dtoa_r+0x78c>
 8004d74:	4639      	mov	r1, r7
 8004d76:	4632      	mov	r2, r6
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f000 fc09 	bl	8005590 <__pow5mult>
 8004d7e:	ee18 2a10 	vmov	r2, s16
 8004d82:	4601      	mov	r1, r0
 8004d84:	4607      	mov	r7, r0
 8004d86:	4620      	mov	r0, r4
 8004d88:	f000 fb58 	bl	800543c <__multiply>
 8004d8c:	ee18 1a10 	vmov	r1, s16
 8004d90:	4680      	mov	r8, r0
 8004d92:	4620      	mov	r0, r4
 8004d94:	f000 fa84 	bl	80052a0 <_Bfree>
 8004d98:	ee08 8a10 	vmov	s16, r8
 8004d9c:	9b07      	ldr	r3, [sp, #28]
 8004d9e:	1b9a      	subs	r2, r3, r6
 8004da0:	d006      	beq.n	8004db0 <_dtoa_r+0x7a0>
 8004da2:	ee18 1a10 	vmov	r1, s16
 8004da6:	4620      	mov	r0, r4
 8004da8:	f000 fbf2 	bl	8005590 <__pow5mult>
 8004dac:	ee08 0a10 	vmov	s16, r0
 8004db0:	2101      	movs	r1, #1
 8004db2:	4620      	mov	r0, r4
 8004db4:	f000 fb2c 	bl	8005410 <__i2b>
 8004db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	4606      	mov	r6, r0
 8004dbe:	f340 8088 	ble.w	8004ed2 <_dtoa_r+0x8c2>
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	4601      	mov	r1, r0
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f000 fbe2 	bl	8005590 <__pow5mult>
 8004dcc:	9b06      	ldr	r3, [sp, #24]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	4606      	mov	r6, r0
 8004dd2:	f340 8081 	ble.w	8004ed8 <_dtoa_r+0x8c8>
 8004dd6:	f04f 0800 	mov.w	r8, #0
 8004dda:	6933      	ldr	r3, [r6, #16]
 8004ddc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004de0:	6918      	ldr	r0, [r3, #16]
 8004de2:	f000 fac5 	bl	8005370 <__hi0bits>
 8004de6:	f1c0 0020 	rsb	r0, r0, #32
 8004dea:	9b05      	ldr	r3, [sp, #20]
 8004dec:	4418      	add	r0, r3
 8004dee:	f010 001f 	ands.w	r0, r0, #31
 8004df2:	f000 8092 	beq.w	8004f1a <_dtoa_r+0x90a>
 8004df6:	f1c0 0320 	rsb	r3, r0, #32
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	f340 808a 	ble.w	8004f14 <_dtoa_r+0x904>
 8004e00:	f1c0 001c 	rsb	r0, r0, #28
 8004e04:	9b04      	ldr	r3, [sp, #16]
 8004e06:	4403      	add	r3, r0
 8004e08:	9304      	str	r3, [sp, #16]
 8004e0a:	9b05      	ldr	r3, [sp, #20]
 8004e0c:	4403      	add	r3, r0
 8004e0e:	4405      	add	r5, r0
 8004e10:	9305      	str	r3, [sp, #20]
 8004e12:	9b04      	ldr	r3, [sp, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	dd07      	ble.n	8004e28 <_dtoa_r+0x818>
 8004e18:	ee18 1a10 	vmov	r1, s16
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f000 fc10 	bl	8005644 <__lshift>
 8004e24:	ee08 0a10 	vmov	s16, r0
 8004e28:	9b05      	ldr	r3, [sp, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	dd05      	ble.n	8004e3a <_dtoa_r+0x82a>
 8004e2e:	4631      	mov	r1, r6
 8004e30:	461a      	mov	r2, r3
 8004e32:	4620      	mov	r0, r4
 8004e34:	f000 fc06 	bl	8005644 <__lshift>
 8004e38:	4606      	mov	r6, r0
 8004e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d06e      	beq.n	8004f1e <_dtoa_r+0x90e>
 8004e40:	ee18 0a10 	vmov	r0, s16
 8004e44:	4631      	mov	r1, r6
 8004e46:	f000 fc6d 	bl	8005724 <__mcmp>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	da67      	bge.n	8004f1e <_dtoa_r+0x90e>
 8004e4e:	9b00      	ldr	r3, [sp, #0]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	ee18 1a10 	vmov	r1, s16
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	220a      	movs	r2, #10
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f000 fa41 	bl	80052e4 <__multadd>
 8004e62:	9b08      	ldr	r3, [sp, #32]
 8004e64:	ee08 0a10 	vmov	s16, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 81b1 	beq.w	80051d0 <_dtoa_r+0xbc0>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	4639      	mov	r1, r7
 8004e72:	220a      	movs	r2, #10
 8004e74:	4620      	mov	r0, r4
 8004e76:	f000 fa35 	bl	80052e4 <__multadd>
 8004e7a:	9b02      	ldr	r3, [sp, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	4607      	mov	r7, r0
 8004e80:	f300 808e 	bgt.w	8004fa0 <_dtoa_r+0x990>
 8004e84:	9b06      	ldr	r3, [sp, #24]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	dc51      	bgt.n	8004f2e <_dtoa_r+0x91e>
 8004e8a:	e089      	b.n	8004fa0 <_dtoa_r+0x990>
 8004e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004e92:	e74b      	b.n	8004d2c <_dtoa_r+0x71c>
 8004e94:	9b03      	ldr	r3, [sp, #12]
 8004e96:	1e5e      	subs	r6, r3, #1
 8004e98:	9b07      	ldr	r3, [sp, #28]
 8004e9a:	42b3      	cmp	r3, r6
 8004e9c:	bfbf      	itttt	lt
 8004e9e:	9b07      	ldrlt	r3, [sp, #28]
 8004ea0:	9607      	strlt	r6, [sp, #28]
 8004ea2:	1af2      	sublt	r2, r6, r3
 8004ea4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004ea6:	bfb6      	itet	lt
 8004ea8:	189b      	addlt	r3, r3, r2
 8004eaa:	1b9e      	subge	r6, r3, r6
 8004eac:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004eae:	9b03      	ldr	r3, [sp, #12]
 8004eb0:	bfb8      	it	lt
 8004eb2:	2600      	movlt	r6, #0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bfb7      	itett	lt
 8004eb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004ebc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004ec0:	1a9d      	sublt	r5, r3, r2
 8004ec2:	2300      	movlt	r3, #0
 8004ec4:	e734      	b.n	8004d30 <_dtoa_r+0x720>
 8004ec6:	9e07      	ldr	r6, [sp, #28]
 8004ec8:	9d04      	ldr	r5, [sp, #16]
 8004eca:	9f08      	ldr	r7, [sp, #32]
 8004ecc:	e73b      	b.n	8004d46 <_dtoa_r+0x736>
 8004ece:	9a07      	ldr	r2, [sp, #28]
 8004ed0:	e767      	b.n	8004da2 <_dtoa_r+0x792>
 8004ed2:	9b06      	ldr	r3, [sp, #24]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	dc18      	bgt.n	8004f0a <_dtoa_r+0x8fa>
 8004ed8:	f1ba 0f00 	cmp.w	sl, #0
 8004edc:	d115      	bne.n	8004f0a <_dtoa_r+0x8fa>
 8004ede:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ee2:	b993      	cbnz	r3, 8004f0a <_dtoa_r+0x8fa>
 8004ee4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ee8:	0d1b      	lsrs	r3, r3, #20
 8004eea:	051b      	lsls	r3, r3, #20
 8004eec:	b183      	cbz	r3, 8004f10 <_dtoa_r+0x900>
 8004eee:	9b04      	ldr	r3, [sp, #16]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	9304      	str	r3, [sp, #16]
 8004ef4:	9b05      	ldr	r3, [sp, #20]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	9305      	str	r3, [sp, #20]
 8004efa:	f04f 0801 	mov.w	r8, #1
 8004efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f47f af6a 	bne.w	8004dda <_dtoa_r+0x7ca>
 8004f06:	2001      	movs	r0, #1
 8004f08:	e76f      	b.n	8004dea <_dtoa_r+0x7da>
 8004f0a:	f04f 0800 	mov.w	r8, #0
 8004f0e:	e7f6      	b.n	8004efe <_dtoa_r+0x8ee>
 8004f10:	4698      	mov	r8, r3
 8004f12:	e7f4      	b.n	8004efe <_dtoa_r+0x8ee>
 8004f14:	f43f af7d 	beq.w	8004e12 <_dtoa_r+0x802>
 8004f18:	4618      	mov	r0, r3
 8004f1a:	301c      	adds	r0, #28
 8004f1c:	e772      	b.n	8004e04 <_dtoa_r+0x7f4>
 8004f1e:	9b03      	ldr	r3, [sp, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	dc37      	bgt.n	8004f94 <_dtoa_r+0x984>
 8004f24:	9b06      	ldr	r3, [sp, #24]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	dd34      	ble.n	8004f94 <_dtoa_r+0x984>
 8004f2a:	9b03      	ldr	r3, [sp, #12]
 8004f2c:	9302      	str	r3, [sp, #8]
 8004f2e:	9b02      	ldr	r3, [sp, #8]
 8004f30:	b96b      	cbnz	r3, 8004f4e <_dtoa_r+0x93e>
 8004f32:	4631      	mov	r1, r6
 8004f34:	2205      	movs	r2, #5
 8004f36:	4620      	mov	r0, r4
 8004f38:	f000 f9d4 	bl	80052e4 <__multadd>
 8004f3c:	4601      	mov	r1, r0
 8004f3e:	4606      	mov	r6, r0
 8004f40:	ee18 0a10 	vmov	r0, s16
 8004f44:	f000 fbee 	bl	8005724 <__mcmp>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	f73f adbb 	bgt.w	8004ac4 <_dtoa_r+0x4b4>
 8004f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f50:	9d01      	ldr	r5, [sp, #4]
 8004f52:	43db      	mvns	r3, r3
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	f04f 0800 	mov.w	r8, #0
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f000 f99f 	bl	80052a0 <_Bfree>
 8004f62:	2f00      	cmp	r7, #0
 8004f64:	f43f aea4 	beq.w	8004cb0 <_dtoa_r+0x6a0>
 8004f68:	f1b8 0f00 	cmp.w	r8, #0
 8004f6c:	d005      	beq.n	8004f7a <_dtoa_r+0x96a>
 8004f6e:	45b8      	cmp	r8, r7
 8004f70:	d003      	beq.n	8004f7a <_dtoa_r+0x96a>
 8004f72:	4641      	mov	r1, r8
 8004f74:	4620      	mov	r0, r4
 8004f76:	f000 f993 	bl	80052a0 <_Bfree>
 8004f7a:	4639      	mov	r1, r7
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f000 f98f 	bl	80052a0 <_Bfree>
 8004f82:	e695      	b.n	8004cb0 <_dtoa_r+0x6a0>
 8004f84:	2600      	movs	r6, #0
 8004f86:	4637      	mov	r7, r6
 8004f88:	e7e1      	b.n	8004f4e <_dtoa_r+0x93e>
 8004f8a:	9700      	str	r7, [sp, #0]
 8004f8c:	4637      	mov	r7, r6
 8004f8e:	e599      	b.n	8004ac4 <_dtoa_r+0x4b4>
 8004f90:	40240000 	.word	0x40240000
 8004f94:	9b08      	ldr	r3, [sp, #32]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80ca 	beq.w	8005130 <_dtoa_r+0xb20>
 8004f9c:	9b03      	ldr	r3, [sp, #12]
 8004f9e:	9302      	str	r3, [sp, #8]
 8004fa0:	2d00      	cmp	r5, #0
 8004fa2:	dd05      	ble.n	8004fb0 <_dtoa_r+0x9a0>
 8004fa4:	4639      	mov	r1, r7
 8004fa6:	462a      	mov	r2, r5
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 fb4b 	bl	8005644 <__lshift>
 8004fae:	4607      	mov	r7, r0
 8004fb0:	f1b8 0f00 	cmp.w	r8, #0
 8004fb4:	d05b      	beq.n	800506e <_dtoa_r+0xa5e>
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f000 f931 	bl	8005220 <_Balloc>
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	b928      	cbnz	r0, 8004fce <_dtoa_r+0x9be>
 8004fc2:	4b87      	ldr	r3, [pc, #540]	; (80051e0 <_dtoa_r+0xbd0>)
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004fca:	f7ff bb3b 	b.w	8004644 <_dtoa_r+0x34>
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	3202      	adds	r2, #2
 8004fd2:	0092      	lsls	r2, r2, #2
 8004fd4:	f107 010c 	add.w	r1, r7, #12
 8004fd8:	300c      	adds	r0, #12
 8004fda:	f000 f913 	bl	8005204 <memcpy>
 8004fde:	2201      	movs	r2, #1
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f000 fb2e 	bl	8005644 <__lshift>
 8004fe8:	9b01      	ldr	r3, [sp, #4]
 8004fea:	f103 0901 	add.w	r9, r3, #1
 8004fee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	9305      	str	r3, [sp, #20]
 8004ff6:	f00a 0301 	and.w	r3, sl, #1
 8004ffa:	46b8      	mov	r8, r7
 8004ffc:	9304      	str	r3, [sp, #16]
 8004ffe:	4607      	mov	r7, r0
 8005000:	4631      	mov	r1, r6
 8005002:	ee18 0a10 	vmov	r0, s16
 8005006:	f7ff fa77 	bl	80044f8 <quorem>
 800500a:	4641      	mov	r1, r8
 800500c:	9002      	str	r0, [sp, #8]
 800500e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005012:	ee18 0a10 	vmov	r0, s16
 8005016:	f000 fb85 	bl	8005724 <__mcmp>
 800501a:	463a      	mov	r2, r7
 800501c:	9003      	str	r0, [sp, #12]
 800501e:	4631      	mov	r1, r6
 8005020:	4620      	mov	r0, r4
 8005022:	f000 fb9b 	bl	800575c <__mdiff>
 8005026:	68c2      	ldr	r2, [r0, #12]
 8005028:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800502c:	4605      	mov	r5, r0
 800502e:	bb02      	cbnz	r2, 8005072 <_dtoa_r+0xa62>
 8005030:	4601      	mov	r1, r0
 8005032:	ee18 0a10 	vmov	r0, s16
 8005036:	f000 fb75 	bl	8005724 <__mcmp>
 800503a:	4602      	mov	r2, r0
 800503c:	4629      	mov	r1, r5
 800503e:	4620      	mov	r0, r4
 8005040:	9207      	str	r2, [sp, #28]
 8005042:	f000 f92d 	bl	80052a0 <_Bfree>
 8005046:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800504a:	ea43 0102 	orr.w	r1, r3, r2
 800504e:	9b04      	ldr	r3, [sp, #16]
 8005050:	430b      	orrs	r3, r1
 8005052:	464d      	mov	r5, r9
 8005054:	d10f      	bne.n	8005076 <_dtoa_r+0xa66>
 8005056:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800505a:	d02a      	beq.n	80050b2 <_dtoa_r+0xaa2>
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	dd02      	ble.n	8005068 <_dtoa_r+0xa58>
 8005062:	9b02      	ldr	r3, [sp, #8]
 8005064:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005068:	f88b a000 	strb.w	sl, [fp]
 800506c:	e775      	b.n	8004f5a <_dtoa_r+0x94a>
 800506e:	4638      	mov	r0, r7
 8005070:	e7ba      	b.n	8004fe8 <_dtoa_r+0x9d8>
 8005072:	2201      	movs	r2, #1
 8005074:	e7e2      	b.n	800503c <_dtoa_r+0xa2c>
 8005076:	9b03      	ldr	r3, [sp, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	db04      	blt.n	8005086 <_dtoa_r+0xa76>
 800507c:	9906      	ldr	r1, [sp, #24]
 800507e:	430b      	orrs	r3, r1
 8005080:	9904      	ldr	r1, [sp, #16]
 8005082:	430b      	orrs	r3, r1
 8005084:	d122      	bne.n	80050cc <_dtoa_r+0xabc>
 8005086:	2a00      	cmp	r2, #0
 8005088:	ddee      	ble.n	8005068 <_dtoa_r+0xa58>
 800508a:	ee18 1a10 	vmov	r1, s16
 800508e:	2201      	movs	r2, #1
 8005090:	4620      	mov	r0, r4
 8005092:	f000 fad7 	bl	8005644 <__lshift>
 8005096:	4631      	mov	r1, r6
 8005098:	ee08 0a10 	vmov	s16, r0
 800509c:	f000 fb42 	bl	8005724 <__mcmp>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	dc03      	bgt.n	80050ac <_dtoa_r+0xa9c>
 80050a4:	d1e0      	bne.n	8005068 <_dtoa_r+0xa58>
 80050a6:	f01a 0f01 	tst.w	sl, #1
 80050aa:	d0dd      	beq.n	8005068 <_dtoa_r+0xa58>
 80050ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80050b0:	d1d7      	bne.n	8005062 <_dtoa_r+0xa52>
 80050b2:	2339      	movs	r3, #57	; 0x39
 80050b4:	f88b 3000 	strb.w	r3, [fp]
 80050b8:	462b      	mov	r3, r5
 80050ba:	461d      	mov	r5, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80050c2:	2a39      	cmp	r2, #57	; 0x39
 80050c4:	d071      	beq.n	80051aa <_dtoa_r+0xb9a>
 80050c6:	3201      	adds	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	e746      	b.n	8004f5a <_dtoa_r+0x94a>
 80050cc:	2a00      	cmp	r2, #0
 80050ce:	dd07      	ble.n	80050e0 <_dtoa_r+0xad0>
 80050d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80050d4:	d0ed      	beq.n	80050b2 <_dtoa_r+0xaa2>
 80050d6:	f10a 0301 	add.w	r3, sl, #1
 80050da:	f88b 3000 	strb.w	r3, [fp]
 80050de:	e73c      	b.n	8004f5a <_dtoa_r+0x94a>
 80050e0:	9b05      	ldr	r3, [sp, #20]
 80050e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80050e6:	4599      	cmp	r9, r3
 80050e8:	d047      	beq.n	800517a <_dtoa_r+0xb6a>
 80050ea:	ee18 1a10 	vmov	r1, s16
 80050ee:	2300      	movs	r3, #0
 80050f0:	220a      	movs	r2, #10
 80050f2:	4620      	mov	r0, r4
 80050f4:	f000 f8f6 	bl	80052e4 <__multadd>
 80050f8:	45b8      	cmp	r8, r7
 80050fa:	ee08 0a10 	vmov	s16, r0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	f04f 020a 	mov.w	r2, #10
 8005106:	4641      	mov	r1, r8
 8005108:	4620      	mov	r0, r4
 800510a:	d106      	bne.n	800511a <_dtoa_r+0xb0a>
 800510c:	f000 f8ea 	bl	80052e4 <__multadd>
 8005110:	4680      	mov	r8, r0
 8005112:	4607      	mov	r7, r0
 8005114:	f109 0901 	add.w	r9, r9, #1
 8005118:	e772      	b.n	8005000 <_dtoa_r+0x9f0>
 800511a:	f000 f8e3 	bl	80052e4 <__multadd>
 800511e:	4639      	mov	r1, r7
 8005120:	4680      	mov	r8, r0
 8005122:	2300      	movs	r3, #0
 8005124:	220a      	movs	r2, #10
 8005126:	4620      	mov	r0, r4
 8005128:	f000 f8dc 	bl	80052e4 <__multadd>
 800512c:	4607      	mov	r7, r0
 800512e:	e7f1      	b.n	8005114 <_dtoa_r+0xb04>
 8005130:	9b03      	ldr	r3, [sp, #12]
 8005132:	9302      	str	r3, [sp, #8]
 8005134:	9d01      	ldr	r5, [sp, #4]
 8005136:	ee18 0a10 	vmov	r0, s16
 800513a:	4631      	mov	r1, r6
 800513c:	f7ff f9dc 	bl	80044f8 <quorem>
 8005140:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005144:	9b01      	ldr	r3, [sp, #4]
 8005146:	f805 ab01 	strb.w	sl, [r5], #1
 800514a:	1aea      	subs	r2, r5, r3
 800514c:	9b02      	ldr	r3, [sp, #8]
 800514e:	4293      	cmp	r3, r2
 8005150:	dd09      	ble.n	8005166 <_dtoa_r+0xb56>
 8005152:	ee18 1a10 	vmov	r1, s16
 8005156:	2300      	movs	r3, #0
 8005158:	220a      	movs	r2, #10
 800515a:	4620      	mov	r0, r4
 800515c:	f000 f8c2 	bl	80052e4 <__multadd>
 8005160:	ee08 0a10 	vmov	s16, r0
 8005164:	e7e7      	b.n	8005136 <_dtoa_r+0xb26>
 8005166:	9b02      	ldr	r3, [sp, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	bfc8      	it	gt
 800516c:	461d      	movgt	r5, r3
 800516e:	9b01      	ldr	r3, [sp, #4]
 8005170:	bfd8      	it	le
 8005172:	2501      	movle	r5, #1
 8005174:	441d      	add	r5, r3
 8005176:	f04f 0800 	mov.w	r8, #0
 800517a:	ee18 1a10 	vmov	r1, s16
 800517e:	2201      	movs	r2, #1
 8005180:	4620      	mov	r0, r4
 8005182:	f000 fa5f 	bl	8005644 <__lshift>
 8005186:	4631      	mov	r1, r6
 8005188:	ee08 0a10 	vmov	s16, r0
 800518c:	f000 faca 	bl	8005724 <__mcmp>
 8005190:	2800      	cmp	r0, #0
 8005192:	dc91      	bgt.n	80050b8 <_dtoa_r+0xaa8>
 8005194:	d102      	bne.n	800519c <_dtoa_r+0xb8c>
 8005196:	f01a 0f01 	tst.w	sl, #1
 800519a:	d18d      	bne.n	80050b8 <_dtoa_r+0xaa8>
 800519c:	462b      	mov	r3, r5
 800519e:	461d      	mov	r5, r3
 80051a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051a4:	2a30      	cmp	r2, #48	; 0x30
 80051a6:	d0fa      	beq.n	800519e <_dtoa_r+0xb8e>
 80051a8:	e6d7      	b.n	8004f5a <_dtoa_r+0x94a>
 80051aa:	9a01      	ldr	r2, [sp, #4]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d184      	bne.n	80050ba <_dtoa_r+0xaaa>
 80051b0:	9b00      	ldr	r3, [sp, #0]
 80051b2:	3301      	adds	r3, #1
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	2331      	movs	r3, #49	; 0x31
 80051b8:	7013      	strb	r3, [r2, #0]
 80051ba:	e6ce      	b.n	8004f5a <_dtoa_r+0x94a>
 80051bc:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <_dtoa_r+0xbd4>)
 80051be:	f7ff ba95 	b.w	80046ec <_dtoa_r+0xdc>
 80051c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f47f aa6e 	bne.w	80046a6 <_dtoa_r+0x96>
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <_dtoa_r+0xbd8>)
 80051cc:	f7ff ba8e 	b.w	80046ec <_dtoa_r+0xdc>
 80051d0:	9b02      	ldr	r3, [sp, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dcae      	bgt.n	8005134 <_dtoa_r+0xb24>
 80051d6:	9b06      	ldr	r3, [sp, #24]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	f73f aea8 	bgt.w	8004f2e <_dtoa_r+0x91e>
 80051de:	e7a9      	b.n	8005134 <_dtoa_r+0xb24>
 80051e0:	0800673f 	.word	0x0800673f
 80051e4:	0800669c 	.word	0x0800669c
 80051e8:	080066c0 	.word	0x080066c0

080051ec <_localeconv_r>:
 80051ec:	4800      	ldr	r0, [pc, #0]	; (80051f0 <_localeconv_r+0x4>)
 80051ee:	4770      	bx	lr
 80051f0:	200003bc 	.word	0x200003bc

080051f4 <malloc>:
 80051f4:	4b02      	ldr	r3, [pc, #8]	; (8005200 <malloc+0xc>)
 80051f6:	4601      	mov	r1, r0
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	f000 bc17 	b.w	8005a2c <_malloc_r>
 80051fe:	bf00      	nop
 8005200:	20000268 	.word	0x20000268

08005204 <memcpy>:
 8005204:	440a      	add	r2, r1
 8005206:	4291      	cmp	r1, r2
 8005208:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800520c:	d100      	bne.n	8005210 <memcpy+0xc>
 800520e:	4770      	bx	lr
 8005210:	b510      	push	{r4, lr}
 8005212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800521a:	4291      	cmp	r1, r2
 800521c:	d1f9      	bne.n	8005212 <memcpy+0xe>
 800521e:	bd10      	pop	{r4, pc}

08005220 <_Balloc>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005224:	4604      	mov	r4, r0
 8005226:	460d      	mov	r5, r1
 8005228:	b976      	cbnz	r6, 8005248 <_Balloc+0x28>
 800522a:	2010      	movs	r0, #16
 800522c:	f7ff ffe2 	bl	80051f4 <malloc>
 8005230:	4602      	mov	r2, r0
 8005232:	6260      	str	r0, [r4, #36]	; 0x24
 8005234:	b920      	cbnz	r0, 8005240 <_Balloc+0x20>
 8005236:	4b18      	ldr	r3, [pc, #96]	; (8005298 <_Balloc+0x78>)
 8005238:	4818      	ldr	r0, [pc, #96]	; (800529c <_Balloc+0x7c>)
 800523a:	2166      	movs	r1, #102	; 0x66
 800523c:	f000 fc7a 	bl	8005b34 <__assert_func>
 8005240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005244:	6006      	str	r6, [r0, #0]
 8005246:	60c6      	str	r6, [r0, #12]
 8005248:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800524a:	68f3      	ldr	r3, [r6, #12]
 800524c:	b183      	cbz	r3, 8005270 <_Balloc+0x50>
 800524e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005256:	b9b8      	cbnz	r0, 8005288 <_Balloc+0x68>
 8005258:	2101      	movs	r1, #1
 800525a:	fa01 f605 	lsl.w	r6, r1, r5
 800525e:	1d72      	adds	r2, r6, #5
 8005260:	0092      	lsls	r2, r2, #2
 8005262:	4620      	mov	r0, r4
 8005264:	f000 fb60 	bl	8005928 <_calloc_r>
 8005268:	b160      	cbz	r0, 8005284 <_Balloc+0x64>
 800526a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800526e:	e00e      	b.n	800528e <_Balloc+0x6e>
 8005270:	2221      	movs	r2, #33	; 0x21
 8005272:	2104      	movs	r1, #4
 8005274:	4620      	mov	r0, r4
 8005276:	f000 fb57 	bl	8005928 <_calloc_r>
 800527a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800527c:	60f0      	str	r0, [r6, #12]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e4      	bne.n	800524e <_Balloc+0x2e>
 8005284:	2000      	movs	r0, #0
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	6802      	ldr	r2, [r0, #0]
 800528a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800528e:	2300      	movs	r3, #0
 8005290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005294:	e7f7      	b.n	8005286 <_Balloc+0x66>
 8005296:	bf00      	nop
 8005298:	080066cd 	.word	0x080066cd
 800529c:	08006750 	.word	0x08006750

080052a0 <_Bfree>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80052a4:	4605      	mov	r5, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	b976      	cbnz	r6, 80052c8 <_Bfree+0x28>
 80052aa:	2010      	movs	r0, #16
 80052ac:	f7ff ffa2 	bl	80051f4 <malloc>
 80052b0:	4602      	mov	r2, r0
 80052b2:	6268      	str	r0, [r5, #36]	; 0x24
 80052b4:	b920      	cbnz	r0, 80052c0 <_Bfree+0x20>
 80052b6:	4b09      	ldr	r3, [pc, #36]	; (80052dc <_Bfree+0x3c>)
 80052b8:	4809      	ldr	r0, [pc, #36]	; (80052e0 <_Bfree+0x40>)
 80052ba:	218a      	movs	r1, #138	; 0x8a
 80052bc:	f000 fc3a 	bl	8005b34 <__assert_func>
 80052c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052c4:	6006      	str	r6, [r0, #0]
 80052c6:	60c6      	str	r6, [r0, #12]
 80052c8:	b13c      	cbz	r4, 80052da <_Bfree+0x3a>
 80052ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052cc:	6862      	ldr	r2, [r4, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052d4:	6021      	str	r1, [r4, #0]
 80052d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	080066cd 	.word	0x080066cd
 80052e0:	08006750 	.word	0x08006750

080052e4 <__multadd>:
 80052e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e8:	690d      	ldr	r5, [r1, #16]
 80052ea:	4607      	mov	r7, r0
 80052ec:	460c      	mov	r4, r1
 80052ee:	461e      	mov	r6, r3
 80052f0:	f101 0c14 	add.w	ip, r1, #20
 80052f4:	2000      	movs	r0, #0
 80052f6:	f8dc 3000 	ldr.w	r3, [ip]
 80052fa:	b299      	uxth	r1, r3
 80052fc:	fb02 6101 	mla	r1, r2, r1, r6
 8005300:	0c1e      	lsrs	r6, r3, #16
 8005302:	0c0b      	lsrs	r3, r1, #16
 8005304:	fb02 3306 	mla	r3, r2, r6, r3
 8005308:	b289      	uxth	r1, r1
 800530a:	3001      	adds	r0, #1
 800530c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005310:	4285      	cmp	r5, r0
 8005312:	f84c 1b04 	str.w	r1, [ip], #4
 8005316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800531a:	dcec      	bgt.n	80052f6 <__multadd+0x12>
 800531c:	b30e      	cbz	r6, 8005362 <__multadd+0x7e>
 800531e:	68a3      	ldr	r3, [r4, #8]
 8005320:	42ab      	cmp	r3, r5
 8005322:	dc19      	bgt.n	8005358 <__multadd+0x74>
 8005324:	6861      	ldr	r1, [r4, #4]
 8005326:	4638      	mov	r0, r7
 8005328:	3101      	adds	r1, #1
 800532a:	f7ff ff79 	bl	8005220 <_Balloc>
 800532e:	4680      	mov	r8, r0
 8005330:	b928      	cbnz	r0, 800533e <__multadd+0x5a>
 8005332:	4602      	mov	r2, r0
 8005334:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <__multadd+0x84>)
 8005336:	480d      	ldr	r0, [pc, #52]	; (800536c <__multadd+0x88>)
 8005338:	21b5      	movs	r1, #181	; 0xb5
 800533a:	f000 fbfb 	bl	8005b34 <__assert_func>
 800533e:	6922      	ldr	r2, [r4, #16]
 8005340:	3202      	adds	r2, #2
 8005342:	f104 010c 	add.w	r1, r4, #12
 8005346:	0092      	lsls	r2, r2, #2
 8005348:	300c      	adds	r0, #12
 800534a:	f7ff ff5b 	bl	8005204 <memcpy>
 800534e:	4621      	mov	r1, r4
 8005350:	4638      	mov	r0, r7
 8005352:	f7ff ffa5 	bl	80052a0 <_Bfree>
 8005356:	4644      	mov	r4, r8
 8005358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800535c:	3501      	adds	r5, #1
 800535e:	615e      	str	r6, [r3, #20]
 8005360:	6125      	str	r5, [r4, #16]
 8005362:	4620      	mov	r0, r4
 8005364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005368:	0800673f 	.word	0x0800673f
 800536c:	08006750 	.word	0x08006750

08005370 <__hi0bits>:
 8005370:	0c03      	lsrs	r3, r0, #16
 8005372:	041b      	lsls	r3, r3, #16
 8005374:	b9d3      	cbnz	r3, 80053ac <__hi0bits+0x3c>
 8005376:	0400      	lsls	r0, r0, #16
 8005378:	2310      	movs	r3, #16
 800537a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800537e:	bf04      	itt	eq
 8005380:	0200      	lsleq	r0, r0, #8
 8005382:	3308      	addeq	r3, #8
 8005384:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005388:	bf04      	itt	eq
 800538a:	0100      	lsleq	r0, r0, #4
 800538c:	3304      	addeq	r3, #4
 800538e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005392:	bf04      	itt	eq
 8005394:	0080      	lsleq	r0, r0, #2
 8005396:	3302      	addeq	r3, #2
 8005398:	2800      	cmp	r0, #0
 800539a:	db05      	blt.n	80053a8 <__hi0bits+0x38>
 800539c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80053a0:	f103 0301 	add.w	r3, r3, #1
 80053a4:	bf08      	it	eq
 80053a6:	2320      	moveq	r3, #32
 80053a8:	4618      	mov	r0, r3
 80053aa:	4770      	bx	lr
 80053ac:	2300      	movs	r3, #0
 80053ae:	e7e4      	b.n	800537a <__hi0bits+0xa>

080053b0 <__lo0bits>:
 80053b0:	6803      	ldr	r3, [r0, #0]
 80053b2:	f013 0207 	ands.w	r2, r3, #7
 80053b6:	4601      	mov	r1, r0
 80053b8:	d00b      	beq.n	80053d2 <__lo0bits+0x22>
 80053ba:	07da      	lsls	r2, r3, #31
 80053bc:	d423      	bmi.n	8005406 <__lo0bits+0x56>
 80053be:	0798      	lsls	r0, r3, #30
 80053c0:	bf49      	itett	mi
 80053c2:	085b      	lsrmi	r3, r3, #1
 80053c4:	089b      	lsrpl	r3, r3, #2
 80053c6:	2001      	movmi	r0, #1
 80053c8:	600b      	strmi	r3, [r1, #0]
 80053ca:	bf5c      	itt	pl
 80053cc:	600b      	strpl	r3, [r1, #0]
 80053ce:	2002      	movpl	r0, #2
 80053d0:	4770      	bx	lr
 80053d2:	b298      	uxth	r0, r3
 80053d4:	b9a8      	cbnz	r0, 8005402 <__lo0bits+0x52>
 80053d6:	0c1b      	lsrs	r3, r3, #16
 80053d8:	2010      	movs	r0, #16
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	b90a      	cbnz	r2, 80053e2 <__lo0bits+0x32>
 80053de:	3008      	adds	r0, #8
 80053e0:	0a1b      	lsrs	r3, r3, #8
 80053e2:	071a      	lsls	r2, r3, #28
 80053e4:	bf04      	itt	eq
 80053e6:	091b      	lsreq	r3, r3, #4
 80053e8:	3004      	addeq	r0, #4
 80053ea:	079a      	lsls	r2, r3, #30
 80053ec:	bf04      	itt	eq
 80053ee:	089b      	lsreq	r3, r3, #2
 80053f0:	3002      	addeq	r0, #2
 80053f2:	07da      	lsls	r2, r3, #31
 80053f4:	d403      	bmi.n	80053fe <__lo0bits+0x4e>
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	f100 0001 	add.w	r0, r0, #1
 80053fc:	d005      	beq.n	800540a <__lo0bits+0x5a>
 80053fe:	600b      	str	r3, [r1, #0]
 8005400:	4770      	bx	lr
 8005402:	4610      	mov	r0, r2
 8005404:	e7e9      	b.n	80053da <__lo0bits+0x2a>
 8005406:	2000      	movs	r0, #0
 8005408:	4770      	bx	lr
 800540a:	2020      	movs	r0, #32
 800540c:	4770      	bx	lr
	...

08005410 <__i2b>:
 8005410:	b510      	push	{r4, lr}
 8005412:	460c      	mov	r4, r1
 8005414:	2101      	movs	r1, #1
 8005416:	f7ff ff03 	bl	8005220 <_Balloc>
 800541a:	4602      	mov	r2, r0
 800541c:	b928      	cbnz	r0, 800542a <__i2b+0x1a>
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <__i2b+0x24>)
 8005420:	4805      	ldr	r0, [pc, #20]	; (8005438 <__i2b+0x28>)
 8005422:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005426:	f000 fb85 	bl	8005b34 <__assert_func>
 800542a:	2301      	movs	r3, #1
 800542c:	6144      	str	r4, [r0, #20]
 800542e:	6103      	str	r3, [r0, #16]
 8005430:	bd10      	pop	{r4, pc}
 8005432:	bf00      	nop
 8005434:	0800673f 	.word	0x0800673f
 8005438:	08006750 	.word	0x08006750

0800543c <__multiply>:
 800543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005440:	4691      	mov	r9, r2
 8005442:	690a      	ldr	r2, [r1, #16]
 8005444:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005448:	429a      	cmp	r2, r3
 800544a:	bfb8      	it	lt
 800544c:	460b      	movlt	r3, r1
 800544e:	460c      	mov	r4, r1
 8005450:	bfbc      	itt	lt
 8005452:	464c      	movlt	r4, r9
 8005454:	4699      	movlt	r9, r3
 8005456:	6927      	ldr	r7, [r4, #16]
 8005458:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800545c:	68a3      	ldr	r3, [r4, #8]
 800545e:	6861      	ldr	r1, [r4, #4]
 8005460:	eb07 060a 	add.w	r6, r7, sl
 8005464:	42b3      	cmp	r3, r6
 8005466:	b085      	sub	sp, #20
 8005468:	bfb8      	it	lt
 800546a:	3101      	addlt	r1, #1
 800546c:	f7ff fed8 	bl	8005220 <_Balloc>
 8005470:	b930      	cbnz	r0, 8005480 <__multiply+0x44>
 8005472:	4602      	mov	r2, r0
 8005474:	4b44      	ldr	r3, [pc, #272]	; (8005588 <__multiply+0x14c>)
 8005476:	4845      	ldr	r0, [pc, #276]	; (800558c <__multiply+0x150>)
 8005478:	f240 115d 	movw	r1, #349	; 0x15d
 800547c:	f000 fb5a 	bl	8005b34 <__assert_func>
 8005480:	f100 0514 	add.w	r5, r0, #20
 8005484:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005488:	462b      	mov	r3, r5
 800548a:	2200      	movs	r2, #0
 800548c:	4543      	cmp	r3, r8
 800548e:	d321      	bcc.n	80054d4 <__multiply+0x98>
 8005490:	f104 0314 	add.w	r3, r4, #20
 8005494:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005498:	f109 0314 	add.w	r3, r9, #20
 800549c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80054a0:	9202      	str	r2, [sp, #8]
 80054a2:	1b3a      	subs	r2, r7, r4
 80054a4:	3a15      	subs	r2, #21
 80054a6:	f022 0203 	bic.w	r2, r2, #3
 80054aa:	3204      	adds	r2, #4
 80054ac:	f104 0115 	add.w	r1, r4, #21
 80054b0:	428f      	cmp	r7, r1
 80054b2:	bf38      	it	cc
 80054b4:	2204      	movcc	r2, #4
 80054b6:	9201      	str	r2, [sp, #4]
 80054b8:	9a02      	ldr	r2, [sp, #8]
 80054ba:	9303      	str	r3, [sp, #12]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d80c      	bhi.n	80054da <__multiply+0x9e>
 80054c0:	2e00      	cmp	r6, #0
 80054c2:	dd03      	ble.n	80054cc <__multiply+0x90>
 80054c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d05a      	beq.n	8005582 <__multiply+0x146>
 80054cc:	6106      	str	r6, [r0, #16]
 80054ce:	b005      	add	sp, #20
 80054d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d4:	f843 2b04 	str.w	r2, [r3], #4
 80054d8:	e7d8      	b.n	800548c <__multiply+0x50>
 80054da:	f8b3 a000 	ldrh.w	sl, [r3]
 80054de:	f1ba 0f00 	cmp.w	sl, #0
 80054e2:	d024      	beq.n	800552e <__multiply+0xf2>
 80054e4:	f104 0e14 	add.w	lr, r4, #20
 80054e8:	46a9      	mov	r9, r5
 80054ea:	f04f 0c00 	mov.w	ip, #0
 80054ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80054f2:	f8d9 1000 	ldr.w	r1, [r9]
 80054f6:	fa1f fb82 	uxth.w	fp, r2
 80054fa:	b289      	uxth	r1, r1
 80054fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8005500:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005504:	f8d9 2000 	ldr.w	r2, [r9]
 8005508:	4461      	add	r1, ip
 800550a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800550e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005512:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005516:	b289      	uxth	r1, r1
 8005518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800551c:	4577      	cmp	r7, lr
 800551e:	f849 1b04 	str.w	r1, [r9], #4
 8005522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005526:	d8e2      	bhi.n	80054ee <__multiply+0xb2>
 8005528:	9a01      	ldr	r2, [sp, #4]
 800552a:	f845 c002 	str.w	ip, [r5, r2]
 800552e:	9a03      	ldr	r2, [sp, #12]
 8005530:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005534:	3304      	adds	r3, #4
 8005536:	f1b9 0f00 	cmp.w	r9, #0
 800553a:	d020      	beq.n	800557e <__multiply+0x142>
 800553c:	6829      	ldr	r1, [r5, #0]
 800553e:	f104 0c14 	add.w	ip, r4, #20
 8005542:	46ae      	mov	lr, r5
 8005544:	f04f 0a00 	mov.w	sl, #0
 8005548:	f8bc b000 	ldrh.w	fp, [ip]
 800554c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005550:	fb09 220b 	mla	r2, r9, fp, r2
 8005554:	4492      	add	sl, r2
 8005556:	b289      	uxth	r1, r1
 8005558:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800555c:	f84e 1b04 	str.w	r1, [lr], #4
 8005560:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005564:	f8be 1000 	ldrh.w	r1, [lr]
 8005568:	0c12      	lsrs	r2, r2, #16
 800556a:	fb09 1102 	mla	r1, r9, r2, r1
 800556e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005572:	4567      	cmp	r7, ip
 8005574:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005578:	d8e6      	bhi.n	8005548 <__multiply+0x10c>
 800557a:	9a01      	ldr	r2, [sp, #4]
 800557c:	50a9      	str	r1, [r5, r2]
 800557e:	3504      	adds	r5, #4
 8005580:	e79a      	b.n	80054b8 <__multiply+0x7c>
 8005582:	3e01      	subs	r6, #1
 8005584:	e79c      	b.n	80054c0 <__multiply+0x84>
 8005586:	bf00      	nop
 8005588:	0800673f 	.word	0x0800673f
 800558c:	08006750 	.word	0x08006750

08005590 <__pow5mult>:
 8005590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005594:	4615      	mov	r5, r2
 8005596:	f012 0203 	ands.w	r2, r2, #3
 800559a:	4606      	mov	r6, r0
 800559c:	460f      	mov	r7, r1
 800559e:	d007      	beq.n	80055b0 <__pow5mult+0x20>
 80055a0:	4c25      	ldr	r4, [pc, #148]	; (8005638 <__pow5mult+0xa8>)
 80055a2:	3a01      	subs	r2, #1
 80055a4:	2300      	movs	r3, #0
 80055a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055aa:	f7ff fe9b 	bl	80052e4 <__multadd>
 80055ae:	4607      	mov	r7, r0
 80055b0:	10ad      	asrs	r5, r5, #2
 80055b2:	d03d      	beq.n	8005630 <__pow5mult+0xa0>
 80055b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80055b6:	b97c      	cbnz	r4, 80055d8 <__pow5mult+0x48>
 80055b8:	2010      	movs	r0, #16
 80055ba:	f7ff fe1b 	bl	80051f4 <malloc>
 80055be:	4602      	mov	r2, r0
 80055c0:	6270      	str	r0, [r6, #36]	; 0x24
 80055c2:	b928      	cbnz	r0, 80055d0 <__pow5mult+0x40>
 80055c4:	4b1d      	ldr	r3, [pc, #116]	; (800563c <__pow5mult+0xac>)
 80055c6:	481e      	ldr	r0, [pc, #120]	; (8005640 <__pow5mult+0xb0>)
 80055c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80055cc:	f000 fab2 	bl	8005b34 <__assert_func>
 80055d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055d4:	6004      	str	r4, [r0, #0]
 80055d6:	60c4      	str	r4, [r0, #12]
 80055d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80055dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80055e0:	b94c      	cbnz	r4, 80055f6 <__pow5mult+0x66>
 80055e2:	f240 2171 	movw	r1, #625	; 0x271
 80055e6:	4630      	mov	r0, r6
 80055e8:	f7ff ff12 	bl	8005410 <__i2b>
 80055ec:	2300      	movs	r3, #0
 80055ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80055f2:	4604      	mov	r4, r0
 80055f4:	6003      	str	r3, [r0, #0]
 80055f6:	f04f 0900 	mov.w	r9, #0
 80055fa:	07eb      	lsls	r3, r5, #31
 80055fc:	d50a      	bpl.n	8005614 <__pow5mult+0x84>
 80055fe:	4639      	mov	r1, r7
 8005600:	4622      	mov	r2, r4
 8005602:	4630      	mov	r0, r6
 8005604:	f7ff ff1a 	bl	800543c <__multiply>
 8005608:	4639      	mov	r1, r7
 800560a:	4680      	mov	r8, r0
 800560c:	4630      	mov	r0, r6
 800560e:	f7ff fe47 	bl	80052a0 <_Bfree>
 8005612:	4647      	mov	r7, r8
 8005614:	106d      	asrs	r5, r5, #1
 8005616:	d00b      	beq.n	8005630 <__pow5mult+0xa0>
 8005618:	6820      	ldr	r0, [r4, #0]
 800561a:	b938      	cbnz	r0, 800562c <__pow5mult+0x9c>
 800561c:	4622      	mov	r2, r4
 800561e:	4621      	mov	r1, r4
 8005620:	4630      	mov	r0, r6
 8005622:	f7ff ff0b 	bl	800543c <__multiply>
 8005626:	6020      	str	r0, [r4, #0]
 8005628:	f8c0 9000 	str.w	r9, [r0]
 800562c:	4604      	mov	r4, r0
 800562e:	e7e4      	b.n	80055fa <__pow5mult+0x6a>
 8005630:	4638      	mov	r0, r7
 8005632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005636:	bf00      	nop
 8005638:	080068a0 	.word	0x080068a0
 800563c:	080066cd 	.word	0x080066cd
 8005640:	08006750 	.word	0x08006750

08005644 <__lshift>:
 8005644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	460c      	mov	r4, r1
 800564a:	6849      	ldr	r1, [r1, #4]
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005652:	68a3      	ldr	r3, [r4, #8]
 8005654:	4607      	mov	r7, r0
 8005656:	4691      	mov	r9, r2
 8005658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800565c:	f108 0601 	add.w	r6, r8, #1
 8005660:	42b3      	cmp	r3, r6
 8005662:	db0b      	blt.n	800567c <__lshift+0x38>
 8005664:	4638      	mov	r0, r7
 8005666:	f7ff fddb 	bl	8005220 <_Balloc>
 800566a:	4605      	mov	r5, r0
 800566c:	b948      	cbnz	r0, 8005682 <__lshift+0x3e>
 800566e:	4602      	mov	r2, r0
 8005670:	4b2a      	ldr	r3, [pc, #168]	; (800571c <__lshift+0xd8>)
 8005672:	482b      	ldr	r0, [pc, #172]	; (8005720 <__lshift+0xdc>)
 8005674:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005678:	f000 fa5c 	bl	8005b34 <__assert_func>
 800567c:	3101      	adds	r1, #1
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	e7ee      	b.n	8005660 <__lshift+0x1c>
 8005682:	2300      	movs	r3, #0
 8005684:	f100 0114 	add.w	r1, r0, #20
 8005688:	f100 0210 	add.w	r2, r0, #16
 800568c:	4618      	mov	r0, r3
 800568e:	4553      	cmp	r3, sl
 8005690:	db37      	blt.n	8005702 <__lshift+0xbe>
 8005692:	6920      	ldr	r0, [r4, #16]
 8005694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005698:	f104 0314 	add.w	r3, r4, #20
 800569c:	f019 091f 	ands.w	r9, r9, #31
 80056a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80056a8:	d02f      	beq.n	800570a <__lshift+0xc6>
 80056aa:	f1c9 0e20 	rsb	lr, r9, #32
 80056ae:	468a      	mov	sl, r1
 80056b0:	f04f 0c00 	mov.w	ip, #0
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	fa02 f209 	lsl.w	r2, r2, r9
 80056ba:	ea42 020c 	orr.w	r2, r2, ip
 80056be:	f84a 2b04 	str.w	r2, [sl], #4
 80056c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80056c6:	4298      	cmp	r0, r3
 80056c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80056cc:	d8f2      	bhi.n	80056b4 <__lshift+0x70>
 80056ce:	1b03      	subs	r3, r0, r4
 80056d0:	3b15      	subs	r3, #21
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	3304      	adds	r3, #4
 80056d8:	f104 0215 	add.w	r2, r4, #21
 80056dc:	4290      	cmp	r0, r2
 80056de:	bf38      	it	cc
 80056e0:	2304      	movcc	r3, #4
 80056e2:	f841 c003 	str.w	ip, [r1, r3]
 80056e6:	f1bc 0f00 	cmp.w	ip, #0
 80056ea:	d001      	beq.n	80056f0 <__lshift+0xac>
 80056ec:	f108 0602 	add.w	r6, r8, #2
 80056f0:	3e01      	subs	r6, #1
 80056f2:	4638      	mov	r0, r7
 80056f4:	612e      	str	r6, [r5, #16]
 80056f6:	4621      	mov	r1, r4
 80056f8:	f7ff fdd2 	bl	80052a0 <_Bfree>
 80056fc:	4628      	mov	r0, r5
 80056fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005702:	f842 0f04 	str.w	r0, [r2, #4]!
 8005706:	3301      	adds	r3, #1
 8005708:	e7c1      	b.n	800568e <__lshift+0x4a>
 800570a:	3904      	subs	r1, #4
 800570c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005710:	f841 2f04 	str.w	r2, [r1, #4]!
 8005714:	4298      	cmp	r0, r3
 8005716:	d8f9      	bhi.n	800570c <__lshift+0xc8>
 8005718:	e7ea      	b.n	80056f0 <__lshift+0xac>
 800571a:	bf00      	nop
 800571c:	0800673f 	.word	0x0800673f
 8005720:	08006750 	.word	0x08006750

08005724 <__mcmp>:
 8005724:	b530      	push	{r4, r5, lr}
 8005726:	6902      	ldr	r2, [r0, #16]
 8005728:	690c      	ldr	r4, [r1, #16]
 800572a:	1b12      	subs	r2, r2, r4
 800572c:	d10e      	bne.n	800574c <__mcmp+0x28>
 800572e:	f100 0314 	add.w	r3, r0, #20
 8005732:	3114      	adds	r1, #20
 8005734:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005738:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800573c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005740:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005744:	42a5      	cmp	r5, r4
 8005746:	d003      	beq.n	8005750 <__mcmp+0x2c>
 8005748:	d305      	bcc.n	8005756 <__mcmp+0x32>
 800574a:	2201      	movs	r2, #1
 800574c:	4610      	mov	r0, r2
 800574e:	bd30      	pop	{r4, r5, pc}
 8005750:	4283      	cmp	r3, r0
 8005752:	d3f3      	bcc.n	800573c <__mcmp+0x18>
 8005754:	e7fa      	b.n	800574c <__mcmp+0x28>
 8005756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800575a:	e7f7      	b.n	800574c <__mcmp+0x28>

0800575c <__mdiff>:
 800575c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005760:	460c      	mov	r4, r1
 8005762:	4606      	mov	r6, r0
 8005764:	4611      	mov	r1, r2
 8005766:	4620      	mov	r0, r4
 8005768:	4690      	mov	r8, r2
 800576a:	f7ff ffdb 	bl	8005724 <__mcmp>
 800576e:	1e05      	subs	r5, r0, #0
 8005770:	d110      	bne.n	8005794 <__mdiff+0x38>
 8005772:	4629      	mov	r1, r5
 8005774:	4630      	mov	r0, r6
 8005776:	f7ff fd53 	bl	8005220 <_Balloc>
 800577a:	b930      	cbnz	r0, 800578a <__mdiff+0x2e>
 800577c:	4b3a      	ldr	r3, [pc, #232]	; (8005868 <__mdiff+0x10c>)
 800577e:	4602      	mov	r2, r0
 8005780:	f240 2132 	movw	r1, #562	; 0x232
 8005784:	4839      	ldr	r0, [pc, #228]	; (800586c <__mdiff+0x110>)
 8005786:	f000 f9d5 	bl	8005b34 <__assert_func>
 800578a:	2301      	movs	r3, #1
 800578c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005794:	bfa4      	itt	ge
 8005796:	4643      	movge	r3, r8
 8005798:	46a0      	movge	r8, r4
 800579a:	4630      	mov	r0, r6
 800579c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80057a0:	bfa6      	itte	ge
 80057a2:	461c      	movge	r4, r3
 80057a4:	2500      	movge	r5, #0
 80057a6:	2501      	movlt	r5, #1
 80057a8:	f7ff fd3a 	bl	8005220 <_Balloc>
 80057ac:	b920      	cbnz	r0, 80057b8 <__mdiff+0x5c>
 80057ae:	4b2e      	ldr	r3, [pc, #184]	; (8005868 <__mdiff+0x10c>)
 80057b0:	4602      	mov	r2, r0
 80057b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80057b6:	e7e5      	b.n	8005784 <__mdiff+0x28>
 80057b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80057bc:	6926      	ldr	r6, [r4, #16]
 80057be:	60c5      	str	r5, [r0, #12]
 80057c0:	f104 0914 	add.w	r9, r4, #20
 80057c4:	f108 0514 	add.w	r5, r8, #20
 80057c8:	f100 0e14 	add.w	lr, r0, #20
 80057cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80057d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80057d4:	f108 0210 	add.w	r2, r8, #16
 80057d8:	46f2      	mov	sl, lr
 80057da:	2100      	movs	r1, #0
 80057dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80057e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80057e4:	fa1f f883 	uxth.w	r8, r3
 80057e8:	fa11 f18b 	uxtah	r1, r1, fp
 80057ec:	0c1b      	lsrs	r3, r3, #16
 80057ee:	eba1 0808 	sub.w	r8, r1, r8
 80057f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80057f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80057fa:	fa1f f888 	uxth.w	r8, r8
 80057fe:	1419      	asrs	r1, r3, #16
 8005800:	454e      	cmp	r6, r9
 8005802:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005806:	f84a 3b04 	str.w	r3, [sl], #4
 800580a:	d8e7      	bhi.n	80057dc <__mdiff+0x80>
 800580c:	1b33      	subs	r3, r6, r4
 800580e:	3b15      	subs	r3, #21
 8005810:	f023 0303 	bic.w	r3, r3, #3
 8005814:	3304      	adds	r3, #4
 8005816:	3415      	adds	r4, #21
 8005818:	42a6      	cmp	r6, r4
 800581a:	bf38      	it	cc
 800581c:	2304      	movcc	r3, #4
 800581e:	441d      	add	r5, r3
 8005820:	4473      	add	r3, lr
 8005822:	469e      	mov	lr, r3
 8005824:	462e      	mov	r6, r5
 8005826:	4566      	cmp	r6, ip
 8005828:	d30e      	bcc.n	8005848 <__mdiff+0xec>
 800582a:	f10c 0203 	add.w	r2, ip, #3
 800582e:	1b52      	subs	r2, r2, r5
 8005830:	f022 0203 	bic.w	r2, r2, #3
 8005834:	3d03      	subs	r5, #3
 8005836:	45ac      	cmp	ip, r5
 8005838:	bf38      	it	cc
 800583a:	2200      	movcc	r2, #0
 800583c:	441a      	add	r2, r3
 800583e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005842:	b17b      	cbz	r3, 8005864 <__mdiff+0x108>
 8005844:	6107      	str	r7, [r0, #16]
 8005846:	e7a3      	b.n	8005790 <__mdiff+0x34>
 8005848:	f856 8b04 	ldr.w	r8, [r6], #4
 800584c:	fa11 f288 	uxtah	r2, r1, r8
 8005850:	1414      	asrs	r4, r2, #16
 8005852:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005856:	b292      	uxth	r2, r2
 8005858:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800585c:	f84e 2b04 	str.w	r2, [lr], #4
 8005860:	1421      	asrs	r1, r4, #16
 8005862:	e7e0      	b.n	8005826 <__mdiff+0xca>
 8005864:	3f01      	subs	r7, #1
 8005866:	e7ea      	b.n	800583e <__mdiff+0xe2>
 8005868:	0800673f 	.word	0x0800673f
 800586c:	08006750 	.word	0x08006750

08005870 <__d2b>:
 8005870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005874:	4689      	mov	r9, r1
 8005876:	2101      	movs	r1, #1
 8005878:	ec57 6b10 	vmov	r6, r7, d0
 800587c:	4690      	mov	r8, r2
 800587e:	f7ff fccf 	bl	8005220 <_Balloc>
 8005882:	4604      	mov	r4, r0
 8005884:	b930      	cbnz	r0, 8005894 <__d2b+0x24>
 8005886:	4602      	mov	r2, r0
 8005888:	4b25      	ldr	r3, [pc, #148]	; (8005920 <__d2b+0xb0>)
 800588a:	4826      	ldr	r0, [pc, #152]	; (8005924 <__d2b+0xb4>)
 800588c:	f240 310a 	movw	r1, #778	; 0x30a
 8005890:	f000 f950 	bl	8005b34 <__assert_func>
 8005894:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005898:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800589c:	bb35      	cbnz	r5, 80058ec <__d2b+0x7c>
 800589e:	2e00      	cmp	r6, #0
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	d028      	beq.n	80058f6 <__d2b+0x86>
 80058a4:	4668      	mov	r0, sp
 80058a6:	9600      	str	r6, [sp, #0]
 80058a8:	f7ff fd82 	bl	80053b0 <__lo0bits>
 80058ac:	9900      	ldr	r1, [sp, #0]
 80058ae:	b300      	cbz	r0, 80058f2 <__d2b+0x82>
 80058b0:	9a01      	ldr	r2, [sp, #4]
 80058b2:	f1c0 0320 	rsb	r3, r0, #32
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	430b      	orrs	r3, r1
 80058bc:	40c2      	lsrs	r2, r0
 80058be:	6163      	str	r3, [r4, #20]
 80058c0:	9201      	str	r2, [sp, #4]
 80058c2:	9b01      	ldr	r3, [sp, #4]
 80058c4:	61a3      	str	r3, [r4, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bf14      	ite	ne
 80058ca:	2202      	movne	r2, #2
 80058cc:	2201      	moveq	r2, #1
 80058ce:	6122      	str	r2, [r4, #16]
 80058d0:	b1d5      	cbz	r5, 8005908 <__d2b+0x98>
 80058d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80058d6:	4405      	add	r5, r0
 80058d8:	f8c9 5000 	str.w	r5, [r9]
 80058dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80058e0:	f8c8 0000 	str.w	r0, [r8]
 80058e4:	4620      	mov	r0, r4
 80058e6:	b003      	add	sp, #12
 80058e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058f0:	e7d5      	b.n	800589e <__d2b+0x2e>
 80058f2:	6161      	str	r1, [r4, #20]
 80058f4:	e7e5      	b.n	80058c2 <__d2b+0x52>
 80058f6:	a801      	add	r0, sp, #4
 80058f8:	f7ff fd5a 	bl	80053b0 <__lo0bits>
 80058fc:	9b01      	ldr	r3, [sp, #4]
 80058fe:	6163      	str	r3, [r4, #20]
 8005900:	2201      	movs	r2, #1
 8005902:	6122      	str	r2, [r4, #16]
 8005904:	3020      	adds	r0, #32
 8005906:	e7e3      	b.n	80058d0 <__d2b+0x60>
 8005908:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800590c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005910:	f8c9 0000 	str.w	r0, [r9]
 8005914:	6918      	ldr	r0, [r3, #16]
 8005916:	f7ff fd2b 	bl	8005370 <__hi0bits>
 800591a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800591e:	e7df      	b.n	80058e0 <__d2b+0x70>
 8005920:	0800673f 	.word	0x0800673f
 8005924:	08006750 	.word	0x08006750

08005928 <_calloc_r>:
 8005928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800592a:	fba1 2402 	umull	r2, r4, r1, r2
 800592e:	b94c      	cbnz	r4, 8005944 <_calloc_r+0x1c>
 8005930:	4611      	mov	r1, r2
 8005932:	9201      	str	r2, [sp, #4]
 8005934:	f000 f87a 	bl	8005a2c <_malloc_r>
 8005938:	9a01      	ldr	r2, [sp, #4]
 800593a:	4605      	mov	r5, r0
 800593c:	b930      	cbnz	r0, 800594c <_calloc_r+0x24>
 800593e:	4628      	mov	r0, r5
 8005940:	b003      	add	sp, #12
 8005942:	bd30      	pop	{r4, r5, pc}
 8005944:	220c      	movs	r2, #12
 8005946:	6002      	str	r2, [r0, #0]
 8005948:	2500      	movs	r5, #0
 800594a:	e7f8      	b.n	800593e <_calloc_r+0x16>
 800594c:	4621      	mov	r1, r4
 800594e:	f7fe f961 	bl	8003c14 <memset>
 8005952:	e7f4      	b.n	800593e <_calloc_r+0x16>

08005954 <_free_r>:
 8005954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005956:	2900      	cmp	r1, #0
 8005958:	d044      	beq.n	80059e4 <_free_r+0x90>
 800595a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800595e:	9001      	str	r0, [sp, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f1a1 0404 	sub.w	r4, r1, #4
 8005966:	bfb8      	it	lt
 8005968:	18e4      	addlt	r4, r4, r3
 800596a:	f000 f925 	bl	8005bb8 <__malloc_lock>
 800596e:	4a1e      	ldr	r2, [pc, #120]	; (80059e8 <_free_r+0x94>)
 8005970:	9801      	ldr	r0, [sp, #4]
 8005972:	6813      	ldr	r3, [r2, #0]
 8005974:	b933      	cbnz	r3, 8005984 <_free_r+0x30>
 8005976:	6063      	str	r3, [r4, #4]
 8005978:	6014      	str	r4, [r2, #0]
 800597a:	b003      	add	sp, #12
 800597c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005980:	f000 b920 	b.w	8005bc4 <__malloc_unlock>
 8005984:	42a3      	cmp	r3, r4
 8005986:	d908      	bls.n	800599a <_free_r+0x46>
 8005988:	6825      	ldr	r5, [r4, #0]
 800598a:	1961      	adds	r1, r4, r5
 800598c:	428b      	cmp	r3, r1
 800598e:	bf01      	itttt	eq
 8005990:	6819      	ldreq	r1, [r3, #0]
 8005992:	685b      	ldreq	r3, [r3, #4]
 8005994:	1949      	addeq	r1, r1, r5
 8005996:	6021      	streq	r1, [r4, #0]
 8005998:	e7ed      	b.n	8005976 <_free_r+0x22>
 800599a:	461a      	mov	r2, r3
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	b10b      	cbz	r3, 80059a4 <_free_r+0x50>
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	d9fa      	bls.n	800599a <_free_r+0x46>
 80059a4:	6811      	ldr	r1, [r2, #0]
 80059a6:	1855      	adds	r5, r2, r1
 80059a8:	42a5      	cmp	r5, r4
 80059aa:	d10b      	bne.n	80059c4 <_free_r+0x70>
 80059ac:	6824      	ldr	r4, [r4, #0]
 80059ae:	4421      	add	r1, r4
 80059b0:	1854      	adds	r4, r2, r1
 80059b2:	42a3      	cmp	r3, r4
 80059b4:	6011      	str	r1, [r2, #0]
 80059b6:	d1e0      	bne.n	800597a <_free_r+0x26>
 80059b8:	681c      	ldr	r4, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	6053      	str	r3, [r2, #4]
 80059be:	4421      	add	r1, r4
 80059c0:	6011      	str	r1, [r2, #0]
 80059c2:	e7da      	b.n	800597a <_free_r+0x26>
 80059c4:	d902      	bls.n	80059cc <_free_r+0x78>
 80059c6:	230c      	movs	r3, #12
 80059c8:	6003      	str	r3, [r0, #0]
 80059ca:	e7d6      	b.n	800597a <_free_r+0x26>
 80059cc:	6825      	ldr	r5, [r4, #0]
 80059ce:	1961      	adds	r1, r4, r5
 80059d0:	428b      	cmp	r3, r1
 80059d2:	bf04      	itt	eq
 80059d4:	6819      	ldreq	r1, [r3, #0]
 80059d6:	685b      	ldreq	r3, [r3, #4]
 80059d8:	6063      	str	r3, [r4, #4]
 80059da:	bf04      	itt	eq
 80059dc:	1949      	addeq	r1, r1, r5
 80059de:	6021      	streq	r1, [r4, #0]
 80059e0:	6054      	str	r4, [r2, #4]
 80059e2:	e7ca      	b.n	800597a <_free_r+0x26>
 80059e4:	b003      	add	sp, #12
 80059e6:	bd30      	pop	{r4, r5, pc}
 80059e8:	20000544 	.word	0x20000544

080059ec <sbrk_aligned>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	4e0e      	ldr	r6, [pc, #56]	; (8005a28 <sbrk_aligned+0x3c>)
 80059f0:	460c      	mov	r4, r1
 80059f2:	6831      	ldr	r1, [r6, #0]
 80059f4:	4605      	mov	r5, r0
 80059f6:	b911      	cbnz	r1, 80059fe <sbrk_aligned+0x12>
 80059f8:	f000 f88c 	bl	8005b14 <_sbrk_r>
 80059fc:	6030      	str	r0, [r6, #0]
 80059fe:	4621      	mov	r1, r4
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 f887 	bl	8005b14 <_sbrk_r>
 8005a06:	1c43      	adds	r3, r0, #1
 8005a08:	d00a      	beq.n	8005a20 <sbrk_aligned+0x34>
 8005a0a:	1cc4      	adds	r4, r0, #3
 8005a0c:	f024 0403 	bic.w	r4, r4, #3
 8005a10:	42a0      	cmp	r0, r4
 8005a12:	d007      	beq.n	8005a24 <sbrk_aligned+0x38>
 8005a14:	1a21      	subs	r1, r4, r0
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 f87c 	bl	8005b14 <_sbrk_r>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d101      	bne.n	8005a24 <sbrk_aligned+0x38>
 8005a20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005a24:	4620      	mov	r0, r4
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	20000548 	.word	0x20000548

08005a2c <_malloc_r>:
 8005a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a30:	1ccd      	adds	r5, r1, #3
 8005a32:	f025 0503 	bic.w	r5, r5, #3
 8005a36:	3508      	adds	r5, #8
 8005a38:	2d0c      	cmp	r5, #12
 8005a3a:	bf38      	it	cc
 8005a3c:	250c      	movcc	r5, #12
 8005a3e:	2d00      	cmp	r5, #0
 8005a40:	4607      	mov	r7, r0
 8005a42:	db01      	blt.n	8005a48 <_malloc_r+0x1c>
 8005a44:	42a9      	cmp	r1, r5
 8005a46:	d905      	bls.n	8005a54 <_malloc_r+0x28>
 8005a48:	230c      	movs	r3, #12
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	2600      	movs	r6, #0
 8005a4e:	4630      	mov	r0, r6
 8005a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a54:	4e2e      	ldr	r6, [pc, #184]	; (8005b10 <_malloc_r+0xe4>)
 8005a56:	f000 f8af 	bl	8005bb8 <__malloc_lock>
 8005a5a:	6833      	ldr	r3, [r6, #0]
 8005a5c:	461c      	mov	r4, r3
 8005a5e:	bb34      	cbnz	r4, 8005aae <_malloc_r+0x82>
 8005a60:	4629      	mov	r1, r5
 8005a62:	4638      	mov	r0, r7
 8005a64:	f7ff ffc2 	bl	80059ec <sbrk_aligned>
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	d14d      	bne.n	8005b0a <_malloc_r+0xde>
 8005a6e:	6834      	ldr	r4, [r6, #0]
 8005a70:	4626      	mov	r6, r4
 8005a72:	2e00      	cmp	r6, #0
 8005a74:	d140      	bne.n	8005af8 <_malloc_r+0xcc>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	eb04 0803 	add.w	r8, r4, r3
 8005a80:	f000 f848 	bl	8005b14 <_sbrk_r>
 8005a84:	4580      	cmp	r8, r0
 8005a86:	d13a      	bne.n	8005afe <_malloc_r+0xd2>
 8005a88:	6821      	ldr	r1, [r4, #0]
 8005a8a:	3503      	adds	r5, #3
 8005a8c:	1a6d      	subs	r5, r5, r1
 8005a8e:	f025 0503 	bic.w	r5, r5, #3
 8005a92:	3508      	adds	r5, #8
 8005a94:	2d0c      	cmp	r5, #12
 8005a96:	bf38      	it	cc
 8005a98:	250c      	movcc	r5, #12
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	f7ff ffa5 	bl	80059ec <sbrk_aligned>
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d02b      	beq.n	8005afe <_malloc_r+0xd2>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	442b      	add	r3, r5
 8005aaa:	6023      	str	r3, [r4, #0]
 8005aac:	e00e      	b.n	8005acc <_malloc_r+0xa0>
 8005aae:	6822      	ldr	r2, [r4, #0]
 8005ab0:	1b52      	subs	r2, r2, r5
 8005ab2:	d41e      	bmi.n	8005af2 <_malloc_r+0xc6>
 8005ab4:	2a0b      	cmp	r2, #11
 8005ab6:	d916      	bls.n	8005ae6 <_malloc_r+0xba>
 8005ab8:	1961      	adds	r1, r4, r5
 8005aba:	42a3      	cmp	r3, r4
 8005abc:	6025      	str	r5, [r4, #0]
 8005abe:	bf18      	it	ne
 8005ac0:	6059      	strne	r1, [r3, #4]
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	bf08      	it	eq
 8005ac6:	6031      	streq	r1, [r6, #0]
 8005ac8:	5162      	str	r2, [r4, r5]
 8005aca:	604b      	str	r3, [r1, #4]
 8005acc:	4638      	mov	r0, r7
 8005ace:	f104 060b 	add.w	r6, r4, #11
 8005ad2:	f000 f877 	bl	8005bc4 <__malloc_unlock>
 8005ad6:	f026 0607 	bic.w	r6, r6, #7
 8005ada:	1d23      	adds	r3, r4, #4
 8005adc:	1af2      	subs	r2, r6, r3
 8005ade:	d0b6      	beq.n	8005a4e <_malloc_r+0x22>
 8005ae0:	1b9b      	subs	r3, r3, r6
 8005ae2:	50a3      	str	r3, [r4, r2]
 8005ae4:	e7b3      	b.n	8005a4e <_malloc_r+0x22>
 8005ae6:	6862      	ldr	r2, [r4, #4]
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	bf0c      	ite	eq
 8005aec:	6032      	streq	r2, [r6, #0]
 8005aee:	605a      	strne	r2, [r3, #4]
 8005af0:	e7ec      	b.n	8005acc <_malloc_r+0xa0>
 8005af2:	4623      	mov	r3, r4
 8005af4:	6864      	ldr	r4, [r4, #4]
 8005af6:	e7b2      	b.n	8005a5e <_malloc_r+0x32>
 8005af8:	4634      	mov	r4, r6
 8005afa:	6876      	ldr	r6, [r6, #4]
 8005afc:	e7b9      	b.n	8005a72 <_malloc_r+0x46>
 8005afe:	230c      	movs	r3, #12
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	4638      	mov	r0, r7
 8005b04:	f000 f85e 	bl	8005bc4 <__malloc_unlock>
 8005b08:	e7a1      	b.n	8005a4e <_malloc_r+0x22>
 8005b0a:	6025      	str	r5, [r4, #0]
 8005b0c:	e7de      	b.n	8005acc <_malloc_r+0xa0>
 8005b0e:	bf00      	nop
 8005b10:	20000544 	.word	0x20000544

08005b14 <_sbrk_r>:
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	4d06      	ldr	r5, [pc, #24]	; (8005b30 <_sbrk_r+0x1c>)
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	602b      	str	r3, [r5, #0]
 8005b20:	f7fb fd1e 	bl	8001560 <_sbrk>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d102      	bne.n	8005b2e <_sbrk_r+0x1a>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	b103      	cbz	r3, 8005b2e <_sbrk_r+0x1a>
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	2000054c 	.word	0x2000054c

08005b34 <__assert_func>:
 8005b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b36:	4614      	mov	r4, r2
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <__assert_func+0x2c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4605      	mov	r5, r0
 8005b40:	68d8      	ldr	r0, [r3, #12]
 8005b42:	b14c      	cbz	r4, 8005b58 <__assert_func+0x24>
 8005b44:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <__assert_func+0x30>)
 8005b46:	9100      	str	r1, [sp, #0]
 8005b48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b4c:	4906      	ldr	r1, [pc, #24]	; (8005b68 <__assert_func+0x34>)
 8005b4e:	462b      	mov	r3, r5
 8005b50:	f000 f80e 	bl	8005b70 <fiprintf>
 8005b54:	f000 fa64 	bl	8006020 <abort>
 8005b58:	4b04      	ldr	r3, [pc, #16]	; (8005b6c <__assert_func+0x38>)
 8005b5a:	461c      	mov	r4, r3
 8005b5c:	e7f3      	b.n	8005b46 <__assert_func+0x12>
 8005b5e:	bf00      	nop
 8005b60:	20000268 	.word	0x20000268
 8005b64:	080068ac 	.word	0x080068ac
 8005b68:	080068b9 	.word	0x080068b9
 8005b6c:	080068e7 	.word	0x080068e7

08005b70 <fiprintf>:
 8005b70:	b40e      	push	{r1, r2, r3}
 8005b72:	b503      	push	{r0, r1, lr}
 8005b74:	4601      	mov	r1, r0
 8005b76:	ab03      	add	r3, sp, #12
 8005b78:	4805      	ldr	r0, [pc, #20]	; (8005b90 <fiprintf+0x20>)
 8005b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b7e:	6800      	ldr	r0, [r0, #0]
 8005b80:	9301      	str	r3, [sp, #4]
 8005b82:	f000 f84f 	bl	8005c24 <_vfiprintf_r>
 8005b86:	b002      	add	sp, #8
 8005b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b8c:	b003      	add	sp, #12
 8005b8e:	4770      	bx	lr
 8005b90:	20000268 	.word	0x20000268

08005b94 <__ascii_mbtowc>:
 8005b94:	b082      	sub	sp, #8
 8005b96:	b901      	cbnz	r1, 8005b9a <__ascii_mbtowc+0x6>
 8005b98:	a901      	add	r1, sp, #4
 8005b9a:	b142      	cbz	r2, 8005bae <__ascii_mbtowc+0x1a>
 8005b9c:	b14b      	cbz	r3, 8005bb2 <__ascii_mbtowc+0x1e>
 8005b9e:	7813      	ldrb	r3, [r2, #0]
 8005ba0:	600b      	str	r3, [r1, #0]
 8005ba2:	7812      	ldrb	r2, [r2, #0]
 8005ba4:	1e10      	subs	r0, r2, #0
 8005ba6:	bf18      	it	ne
 8005ba8:	2001      	movne	r0, #1
 8005baa:	b002      	add	sp, #8
 8005bac:	4770      	bx	lr
 8005bae:	4610      	mov	r0, r2
 8005bb0:	e7fb      	b.n	8005baa <__ascii_mbtowc+0x16>
 8005bb2:	f06f 0001 	mvn.w	r0, #1
 8005bb6:	e7f8      	b.n	8005baa <__ascii_mbtowc+0x16>

08005bb8 <__malloc_lock>:
 8005bb8:	4801      	ldr	r0, [pc, #4]	; (8005bc0 <__malloc_lock+0x8>)
 8005bba:	f000 bbf1 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 8005bbe:	bf00      	nop
 8005bc0:	20000550 	.word	0x20000550

08005bc4 <__malloc_unlock>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	; (8005bcc <__malloc_unlock+0x8>)
 8005bc6:	f000 bbec 	b.w	80063a2 <__retarget_lock_release_recursive>
 8005bca:	bf00      	nop
 8005bcc:	20000550 	.word	0x20000550

08005bd0 <__sfputc_r>:
 8005bd0:	6893      	ldr	r3, [r2, #8]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	b410      	push	{r4}
 8005bd8:	6093      	str	r3, [r2, #8]
 8005bda:	da08      	bge.n	8005bee <__sfputc_r+0x1e>
 8005bdc:	6994      	ldr	r4, [r2, #24]
 8005bde:	42a3      	cmp	r3, r4
 8005be0:	db01      	blt.n	8005be6 <__sfputc_r+0x16>
 8005be2:	290a      	cmp	r1, #10
 8005be4:	d103      	bne.n	8005bee <__sfputc_r+0x1e>
 8005be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bea:	f000 b94b 	b.w	8005e84 <__swbuf_r>
 8005bee:	6813      	ldr	r3, [r2, #0]
 8005bf0:	1c58      	adds	r0, r3, #1
 8005bf2:	6010      	str	r0, [r2, #0]
 8005bf4:	7019      	strb	r1, [r3, #0]
 8005bf6:	4608      	mov	r0, r1
 8005bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <__sfputs_r>:
 8005bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c00:	4606      	mov	r6, r0
 8005c02:	460f      	mov	r7, r1
 8005c04:	4614      	mov	r4, r2
 8005c06:	18d5      	adds	r5, r2, r3
 8005c08:	42ac      	cmp	r4, r5
 8005c0a:	d101      	bne.n	8005c10 <__sfputs_r+0x12>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e007      	b.n	8005c20 <__sfputs_r+0x22>
 8005c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c14:	463a      	mov	r2, r7
 8005c16:	4630      	mov	r0, r6
 8005c18:	f7ff ffda 	bl	8005bd0 <__sfputc_r>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d1f3      	bne.n	8005c08 <__sfputs_r+0xa>
 8005c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c24 <_vfiprintf_r>:
 8005c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c28:	460d      	mov	r5, r1
 8005c2a:	b09d      	sub	sp, #116	; 0x74
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	4698      	mov	r8, r3
 8005c30:	4606      	mov	r6, r0
 8005c32:	b118      	cbz	r0, 8005c3c <_vfiprintf_r+0x18>
 8005c34:	6983      	ldr	r3, [r0, #24]
 8005c36:	b90b      	cbnz	r3, 8005c3c <_vfiprintf_r+0x18>
 8005c38:	f000 fb14 	bl	8006264 <__sinit>
 8005c3c:	4b89      	ldr	r3, [pc, #548]	; (8005e64 <_vfiprintf_r+0x240>)
 8005c3e:	429d      	cmp	r5, r3
 8005c40:	d11b      	bne.n	8005c7a <_vfiprintf_r+0x56>
 8005c42:	6875      	ldr	r5, [r6, #4]
 8005c44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c46:	07d9      	lsls	r1, r3, #31
 8005c48:	d405      	bmi.n	8005c56 <_vfiprintf_r+0x32>
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	059a      	lsls	r2, r3, #22
 8005c4e:	d402      	bmi.n	8005c56 <_vfiprintf_r+0x32>
 8005c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c52:	f000 fba5 	bl	80063a0 <__retarget_lock_acquire_recursive>
 8005c56:	89ab      	ldrh	r3, [r5, #12]
 8005c58:	071b      	lsls	r3, r3, #28
 8005c5a:	d501      	bpl.n	8005c60 <_vfiprintf_r+0x3c>
 8005c5c:	692b      	ldr	r3, [r5, #16]
 8005c5e:	b9eb      	cbnz	r3, 8005c9c <_vfiprintf_r+0x78>
 8005c60:	4629      	mov	r1, r5
 8005c62:	4630      	mov	r0, r6
 8005c64:	f000 f96e 	bl	8005f44 <__swsetup_r>
 8005c68:	b1c0      	cbz	r0, 8005c9c <_vfiprintf_r+0x78>
 8005c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c6c:	07dc      	lsls	r4, r3, #31
 8005c6e:	d50e      	bpl.n	8005c8e <_vfiprintf_r+0x6a>
 8005c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c74:	b01d      	add	sp, #116	; 0x74
 8005c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7a:	4b7b      	ldr	r3, [pc, #492]	; (8005e68 <_vfiprintf_r+0x244>)
 8005c7c:	429d      	cmp	r5, r3
 8005c7e:	d101      	bne.n	8005c84 <_vfiprintf_r+0x60>
 8005c80:	68b5      	ldr	r5, [r6, #8]
 8005c82:	e7df      	b.n	8005c44 <_vfiprintf_r+0x20>
 8005c84:	4b79      	ldr	r3, [pc, #484]	; (8005e6c <_vfiprintf_r+0x248>)
 8005c86:	429d      	cmp	r5, r3
 8005c88:	bf08      	it	eq
 8005c8a:	68f5      	ldreq	r5, [r6, #12]
 8005c8c:	e7da      	b.n	8005c44 <_vfiprintf_r+0x20>
 8005c8e:	89ab      	ldrh	r3, [r5, #12]
 8005c90:	0598      	lsls	r0, r3, #22
 8005c92:	d4ed      	bmi.n	8005c70 <_vfiprintf_r+0x4c>
 8005c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c96:	f000 fb84 	bl	80063a2 <__retarget_lock_release_recursive>
 8005c9a:	e7e9      	b.n	8005c70 <_vfiprintf_r+0x4c>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca0:	2320      	movs	r3, #32
 8005ca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005caa:	2330      	movs	r3, #48	; 0x30
 8005cac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e70 <_vfiprintf_r+0x24c>
 8005cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cb4:	f04f 0901 	mov.w	r9, #1
 8005cb8:	4623      	mov	r3, r4
 8005cba:	469a      	mov	sl, r3
 8005cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cc0:	b10a      	cbz	r2, 8005cc6 <_vfiprintf_r+0xa2>
 8005cc2:	2a25      	cmp	r2, #37	; 0x25
 8005cc4:	d1f9      	bne.n	8005cba <_vfiprintf_r+0x96>
 8005cc6:	ebba 0b04 	subs.w	fp, sl, r4
 8005cca:	d00b      	beq.n	8005ce4 <_vfiprintf_r+0xc0>
 8005ccc:	465b      	mov	r3, fp
 8005cce:	4622      	mov	r2, r4
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	f7ff ff93 	bl	8005bfe <__sfputs_r>
 8005cd8:	3001      	adds	r0, #1
 8005cda:	f000 80aa 	beq.w	8005e32 <_vfiprintf_r+0x20e>
 8005cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ce0:	445a      	add	r2, fp
 8005ce2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80a2 	beq.w	8005e32 <_vfiprintf_r+0x20e>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cf8:	f10a 0a01 	add.w	sl, sl, #1
 8005cfc:	9304      	str	r3, [sp, #16]
 8005cfe:	9307      	str	r3, [sp, #28]
 8005d00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d04:	931a      	str	r3, [sp, #104]	; 0x68
 8005d06:	4654      	mov	r4, sl
 8005d08:	2205      	movs	r2, #5
 8005d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d0e:	4858      	ldr	r0, [pc, #352]	; (8005e70 <_vfiprintf_r+0x24c>)
 8005d10:	f7fa fa86 	bl	8000220 <memchr>
 8005d14:	9a04      	ldr	r2, [sp, #16]
 8005d16:	b9d8      	cbnz	r0, 8005d50 <_vfiprintf_r+0x12c>
 8005d18:	06d1      	lsls	r1, r2, #27
 8005d1a:	bf44      	itt	mi
 8005d1c:	2320      	movmi	r3, #32
 8005d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d22:	0713      	lsls	r3, r2, #28
 8005d24:	bf44      	itt	mi
 8005d26:	232b      	movmi	r3, #43	; 0x2b
 8005d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d30:	2b2a      	cmp	r3, #42	; 0x2a
 8005d32:	d015      	beq.n	8005d60 <_vfiprintf_r+0x13c>
 8005d34:	9a07      	ldr	r2, [sp, #28]
 8005d36:	4654      	mov	r4, sl
 8005d38:	2000      	movs	r0, #0
 8005d3a:	f04f 0c0a 	mov.w	ip, #10
 8005d3e:	4621      	mov	r1, r4
 8005d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d44:	3b30      	subs	r3, #48	; 0x30
 8005d46:	2b09      	cmp	r3, #9
 8005d48:	d94e      	bls.n	8005de8 <_vfiprintf_r+0x1c4>
 8005d4a:	b1b0      	cbz	r0, 8005d7a <_vfiprintf_r+0x156>
 8005d4c:	9207      	str	r2, [sp, #28]
 8005d4e:	e014      	b.n	8005d7a <_vfiprintf_r+0x156>
 8005d50:	eba0 0308 	sub.w	r3, r0, r8
 8005d54:	fa09 f303 	lsl.w	r3, r9, r3
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	9304      	str	r3, [sp, #16]
 8005d5c:	46a2      	mov	sl, r4
 8005d5e:	e7d2      	b.n	8005d06 <_vfiprintf_r+0xe2>
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	1d19      	adds	r1, r3, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	9103      	str	r1, [sp, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bfbb      	ittet	lt
 8005d6c:	425b      	neglt	r3, r3
 8005d6e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d72:	9307      	strge	r3, [sp, #28]
 8005d74:	9307      	strlt	r3, [sp, #28]
 8005d76:	bfb8      	it	lt
 8005d78:	9204      	strlt	r2, [sp, #16]
 8005d7a:	7823      	ldrb	r3, [r4, #0]
 8005d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d7e:	d10c      	bne.n	8005d9a <_vfiprintf_r+0x176>
 8005d80:	7863      	ldrb	r3, [r4, #1]
 8005d82:	2b2a      	cmp	r3, #42	; 0x2a
 8005d84:	d135      	bne.n	8005df2 <_vfiprintf_r+0x1ce>
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	1d1a      	adds	r2, r3, #4
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	9203      	str	r2, [sp, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bfb8      	it	lt
 8005d92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d96:	3402      	adds	r4, #2
 8005d98:	9305      	str	r3, [sp, #20]
 8005d9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e80 <_vfiprintf_r+0x25c>
 8005d9e:	7821      	ldrb	r1, [r4, #0]
 8005da0:	2203      	movs	r2, #3
 8005da2:	4650      	mov	r0, sl
 8005da4:	f7fa fa3c 	bl	8000220 <memchr>
 8005da8:	b140      	cbz	r0, 8005dbc <_vfiprintf_r+0x198>
 8005daa:	2340      	movs	r3, #64	; 0x40
 8005dac:	eba0 000a 	sub.w	r0, r0, sl
 8005db0:	fa03 f000 	lsl.w	r0, r3, r0
 8005db4:	9b04      	ldr	r3, [sp, #16]
 8005db6:	4303      	orrs	r3, r0
 8005db8:	3401      	adds	r4, #1
 8005dba:	9304      	str	r3, [sp, #16]
 8005dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dc0:	482c      	ldr	r0, [pc, #176]	; (8005e74 <_vfiprintf_r+0x250>)
 8005dc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dc6:	2206      	movs	r2, #6
 8005dc8:	f7fa fa2a 	bl	8000220 <memchr>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d03f      	beq.n	8005e50 <_vfiprintf_r+0x22c>
 8005dd0:	4b29      	ldr	r3, [pc, #164]	; (8005e78 <_vfiprintf_r+0x254>)
 8005dd2:	bb1b      	cbnz	r3, 8005e1c <_vfiprintf_r+0x1f8>
 8005dd4:	9b03      	ldr	r3, [sp, #12]
 8005dd6:	3307      	adds	r3, #7
 8005dd8:	f023 0307 	bic.w	r3, r3, #7
 8005ddc:	3308      	adds	r3, #8
 8005dde:	9303      	str	r3, [sp, #12]
 8005de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de2:	443b      	add	r3, r7
 8005de4:	9309      	str	r3, [sp, #36]	; 0x24
 8005de6:	e767      	b.n	8005cb8 <_vfiprintf_r+0x94>
 8005de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dec:	460c      	mov	r4, r1
 8005dee:	2001      	movs	r0, #1
 8005df0:	e7a5      	b.n	8005d3e <_vfiprintf_r+0x11a>
 8005df2:	2300      	movs	r3, #0
 8005df4:	3401      	adds	r4, #1
 8005df6:	9305      	str	r3, [sp, #20]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f04f 0c0a 	mov.w	ip, #10
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e04:	3a30      	subs	r2, #48	; 0x30
 8005e06:	2a09      	cmp	r2, #9
 8005e08:	d903      	bls.n	8005e12 <_vfiprintf_r+0x1ee>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0c5      	beq.n	8005d9a <_vfiprintf_r+0x176>
 8005e0e:	9105      	str	r1, [sp, #20]
 8005e10:	e7c3      	b.n	8005d9a <_vfiprintf_r+0x176>
 8005e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e16:	4604      	mov	r4, r0
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e7f0      	b.n	8005dfe <_vfiprintf_r+0x1da>
 8005e1c:	ab03      	add	r3, sp, #12
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	462a      	mov	r2, r5
 8005e22:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <_vfiprintf_r+0x258>)
 8005e24:	a904      	add	r1, sp, #16
 8005e26:	4630      	mov	r0, r6
 8005e28:	f7fd ff9c 	bl	8003d64 <_printf_float>
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	1c78      	adds	r0, r7, #1
 8005e30:	d1d6      	bne.n	8005de0 <_vfiprintf_r+0x1bc>
 8005e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e34:	07d9      	lsls	r1, r3, #31
 8005e36:	d405      	bmi.n	8005e44 <_vfiprintf_r+0x220>
 8005e38:	89ab      	ldrh	r3, [r5, #12]
 8005e3a:	059a      	lsls	r2, r3, #22
 8005e3c:	d402      	bmi.n	8005e44 <_vfiprintf_r+0x220>
 8005e3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e40:	f000 faaf 	bl	80063a2 <__retarget_lock_release_recursive>
 8005e44:	89ab      	ldrh	r3, [r5, #12]
 8005e46:	065b      	lsls	r3, r3, #25
 8005e48:	f53f af12 	bmi.w	8005c70 <_vfiprintf_r+0x4c>
 8005e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e4e:	e711      	b.n	8005c74 <_vfiprintf_r+0x50>
 8005e50:	ab03      	add	r3, sp, #12
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	462a      	mov	r2, r5
 8005e56:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <_vfiprintf_r+0x258>)
 8005e58:	a904      	add	r1, sp, #16
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f7fe fa26 	bl	80042ac <_printf_i>
 8005e60:	e7e4      	b.n	8005e2c <_vfiprintf_r+0x208>
 8005e62:	bf00      	nop
 8005e64:	08006a24 	.word	0x08006a24
 8005e68:	08006a44 	.word	0x08006a44
 8005e6c:	08006a04 	.word	0x08006a04
 8005e70:	080068f2 	.word	0x080068f2
 8005e74:	080068fc 	.word	0x080068fc
 8005e78:	08003d65 	.word	0x08003d65
 8005e7c:	08005bff 	.word	0x08005bff
 8005e80:	080068f8 	.word	0x080068f8

08005e84 <__swbuf_r>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	460e      	mov	r6, r1
 8005e88:	4614      	mov	r4, r2
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	b118      	cbz	r0, 8005e96 <__swbuf_r+0x12>
 8005e8e:	6983      	ldr	r3, [r0, #24]
 8005e90:	b90b      	cbnz	r3, 8005e96 <__swbuf_r+0x12>
 8005e92:	f000 f9e7 	bl	8006264 <__sinit>
 8005e96:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <__swbuf_r+0x98>)
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	d12b      	bne.n	8005ef4 <__swbuf_r+0x70>
 8005e9c:	686c      	ldr	r4, [r5, #4]
 8005e9e:	69a3      	ldr	r3, [r4, #24]
 8005ea0:	60a3      	str	r3, [r4, #8]
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	071a      	lsls	r2, r3, #28
 8005ea6:	d52f      	bpl.n	8005f08 <__swbuf_r+0x84>
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	b36b      	cbz	r3, 8005f08 <__swbuf_r+0x84>
 8005eac:	6923      	ldr	r3, [r4, #16]
 8005eae:	6820      	ldr	r0, [r4, #0]
 8005eb0:	1ac0      	subs	r0, r0, r3
 8005eb2:	6963      	ldr	r3, [r4, #20]
 8005eb4:	b2f6      	uxtb	r6, r6
 8005eb6:	4283      	cmp	r3, r0
 8005eb8:	4637      	mov	r7, r6
 8005eba:	dc04      	bgt.n	8005ec6 <__swbuf_r+0x42>
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f000 f93c 	bl	800613c <_fflush_r>
 8005ec4:	bb30      	cbnz	r0, 8005f14 <__swbuf_r+0x90>
 8005ec6:	68a3      	ldr	r3, [r4, #8]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	60a3      	str	r3, [r4, #8]
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	6022      	str	r2, [r4, #0]
 8005ed2:	701e      	strb	r6, [r3, #0]
 8005ed4:	6963      	ldr	r3, [r4, #20]
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	4283      	cmp	r3, r0
 8005eda:	d004      	beq.n	8005ee6 <__swbuf_r+0x62>
 8005edc:	89a3      	ldrh	r3, [r4, #12]
 8005ede:	07db      	lsls	r3, r3, #31
 8005ee0:	d506      	bpl.n	8005ef0 <__swbuf_r+0x6c>
 8005ee2:	2e0a      	cmp	r6, #10
 8005ee4:	d104      	bne.n	8005ef0 <__swbuf_r+0x6c>
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f000 f927 	bl	800613c <_fflush_r>
 8005eee:	b988      	cbnz	r0, 8005f14 <__swbuf_r+0x90>
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <__swbuf_r+0x9c>)
 8005ef6:	429c      	cmp	r4, r3
 8005ef8:	d101      	bne.n	8005efe <__swbuf_r+0x7a>
 8005efa:	68ac      	ldr	r4, [r5, #8]
 8005efc:	e7cf      	b.n	8005e9e <__swbuf_r+0x1a>
 8005efe:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <__swbuf_r+0xa0>)
 8005f00:	429c      	cmp	r4, r3
 8005f02:	bf08      	it	eq
 8005f04:	68ec      	ldreq	r4, [r5, #12]
 8005f06:	e7ca      	b.n	8005e9e <__swbuf_r+0x1a>
 8005f08:	4621      	mov	r1, r4
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f000 f81a 	bl	8005f44 <__swsetup_r>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d0cb      	beq.n	8005eac <__swbuf_r+0x28>
 8005f14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f18:	e7ea      	b.n	8005ef0 <__swbuf_r+0x6c>
 8005f1a:	bf00      	nop
 8005f1c:	08006a24 	.word	0x08006a24
 8005f20:	08006a44 	.word	0x08006a44
 8005f24:	08006a04 	.word	0x08006a04

08005f28 <__ascii_wctomb>:
 8005f28:	b149      	cbz	r1, 8005f3e <__ascii_wctomb+0x16>
 8005f2a:	2aff      	cmp	r2, #255	; 0xff
 8005f2c:	bf85      	ittet	hi
 8005f2e:	238a      	movhi	r3, #138	; 0x8a
 8005f30:	6003      	strhi	r3, [r0, #0]
 8005f32:	700a      	strbls	r2, [r1, #0]
 8005f34:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005f38:	bf98      	it	ls
 8005f3a:	2001      	movls	r0, #1
 8005f3c:	4770      	bx	lr
 8005f3e:	4608      	mov	r0, r1
 8005f40:	4770      	bx	lr
	...

08005f44 <__swsetup_r>:
 8005f44:	4b32      	ldr	r3, [pc, #200]	; (8006010 <__swsetup_r+0xcc>)
 8005f46:	b570      	push	{r4, r5, r6, lr}
 8005f48:	681d      	ldr	r5, [r3, #0]
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	b125      	cbz	r5, 8005f5a <__swsetup_r+0x16>
 8005f50:	69ab      	ldr	r3, [r5, #24]
 8005f52:	b913      	cbnz	r3, 8005f5a <__swsetup_r+0x16>
 8005f54:	4628      	mov	r0, r5
 8005f56:	f000 f985 	bl	8006264 <__sinit>
 8005f5a:	4b2e      	ldr	r3, [pc, #184]	; (8006014 <__swsetup_r+0xd0>)
 8005f5c:	429c      	cmp	r4, r3
 8005f5e:	d10f      	bne.n	8005f80 <__swsetup_r+0x3c>
 8005f60:	686c      	ldr	r4, [r5, #4]
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f68:	0719      	lsls	r1, r3, #28
 8005f6a:	d42c      	bmi.n	8005fc6 <__swsetup_r+0x82>
 8005f6c:	06dd      	lsls	r5, r3, #27
 8005f6e:	d411      	bmi.n	8005f94 <__swsetup_r+0x50>
 8005f70:	2309      	movs	r3, #9
 8005f72:	6033      	str	r3, [r6, #0]
 8005f74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f7e:	e03e      	b.n	8005ffe <__swsetup_r+0xba>
 8005f80:	4b25      	ldr	r3, [pc, #148]	; (8006018 <__swsetup_r+0xd4>)
 8005f82:	429c      	cmp	r4, r3
 8005f84:	d101      	bne.n	8005f8a <__swsetup_r+0x46>
 8005f86:	68ac      	ldr	r4, [r5, #8]
 8005f88:	e7eb      	b.n	8005f62 <__swsetup_r+0x1e>
 8005f8a:	4b24      	ldr	r3, [pc, #144]	; (800601c <__swsetup_r+0xd8>)
 8005f8c:	429c      	cmp	r4, r3
 8005f8e:	bf08      	it	eq
 8005f90:	68ec      	ldreq	r4, [r5, #12]
 8005f92:	e7e6      	b.n	8005f62 <__swsetup_r+0x1e>
 8005f94:	0758      	lsls	r0, r3, #29
 8005f96:	d512      	bpl.n	8005fbe <__swsetup_r+0x7a>
 8005f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f9a:	b141      	cbz	r1, 8005fae <__swsetup_r+0x6a>
 8005f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	d002      	beq.n	8005faa <__swsetup_r+0x66>
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f7ff fcd5 	bl	8005954 <_free_r>
 8005faa:	2300      	movs	r3, #0
 8005fac:	6363      	str	r3, [r4, #52]	; 0x34
 8005fae:	89a3      	ldrh	r3, [r4, #12]
 8005fb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fb4:	81a3      	strh	r3, [r4, #12]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6063      	str	r3, [r4, #4]
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f043 0308 	orr.w	r3, r3, #8
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	6923      	ldr	r3, [r4, #16]
 8005fc8:	b94b      	cbnz	r3, 8005fde <__swsetup_r+0x9a>
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd4:	d003      	beq.n	8005fde <__swsetup_r+0x9a>
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f000 fa09 	bl	80063f0 <__smakebuf_r>
 8005fde:	89a0      	ldrh	r0, [r4, #12]
 8005fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fe4:	f010 0301 	ands.w	r3, r0, #1
 8005fe8:	d00a      	beq.n	8006000 <__swsetup_r+0xbc>
 8005fea:	2300      	movs	r3, #0
 8005fec:	60a3      	str	r3, [r4, #8]
 8005fee:	6963      	ldr	r3, [r4, #20]
 8005ff0:	425b      	negs	r3, r3
 8005ff2:	61a3      	str	r3, [r4, #24]
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	b943      	cbnz	r3, 800600a <__swsetup_r+0xc6>
 8005ff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ffc:	d1ba      	bne.n	8005f74 <__swsetup_r+0x30>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	0781      	lsls	r1, r0, #30
 8006002:	bf58      	it	pl
 8006004:	6963      	ldrpl	r3, [r4, #20]
 8006006:	60a3      	str	r3, [r4, #8]
 8006008:	e7f4      	b.n	8005ff4 <__swsetup_r+0xb0>
 800600a:	2000      	movs	r0, #0
 800600c:	e7f7      	b.n	8005ffe <__swsetup_r+0xba>
 800600e:	bf00      	nop
 8006010:	20000268 	.word	0x20000268
 8006014:	08006a24 	.word	0x08006a24
 8006018:	08006a44 	.word	0x08006a44
 800601c:	08006a04 	.word	0x08006a04

08006020 <abort>:
 8006020:	b508      	push	{r3, lr}
 8006022:	2006      	movs	r0, #6
 8006024:	f000 fa4c 	bl	80064c0 <raise>
 8006028:	2001      	movs	r0, #1
 800602a:	f7fb fa21 	bl	8001470 <_exit>
	...

08006030 <__sflush_r>:
 8006030:	898a      	ldrh	r2, [r1, #12]
 8006032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006036:	4605      	mov	r5, r0
 8006038:	0710      	lsls	r0, r2, #28
 800603a:	460c      	mov	r4, r1
 800603c:	d458      	bmi.n	80060f0 <__sflush_r+0xc0>
 800603e:	684b      	ldr	r3, [r1, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	dc05      	bgt.n	8006050 <__sflush_r+0x20>
 8006044:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	dc02      	bgt.n	8006050 <__sflush_r+0x20>
 800604a:	2000      	movs	r0, #0
 800604c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006052:	2e00      	cmp	r6, #0
 8006054:	d0f9      	beq.n	800604a <__sflush_r+0x1a>
 8006056:	2300      	movs	r3, #0
 8006058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800605c:	682f      	ldr	r7, [r5, #0]
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	d032      	beq.n	80060c8 <__sflush_r+0x98>
 8006062:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	075a      	lsls	r2, r3, #29
 8006068:	d505      	bpl.n	8006076 <__sflush_r+0x46>
 800606a:	6863      	ldr	r3, [r4, #4]
 800606c:	1ac0      	subs	r0, r0, r3
 800606e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006070:	b10b      	cbz	r3, 8006076 <__sflush_r+0x46>
 8006072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006074:	1ac0      	subs	r0, r0, r3
 8006076:	2300      	movs	r3, #0
 8006078:	4602      	mov	r2, r0
 800607a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800607c:	6a21      	ldr	r1, [r4, #32]
 800607e:	4628      	mov	r0, r5
 8006080:	47b0      	blx	r6
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	d106      	bne.n	8006096 <__sflush_r+0x66>
 8006088:	6829      	ldr	r1, [r5, #0]
 800608a:	291d      	cmp	r1, #29
 800608c:	d82c      	bhi.n	80060e8 <__sflush_r+0xb8>
 800608e:	4a2a      	ldr	r2, [pc, #168]	; (8006138 <__sflush_r+0x108>)
 8006090:	40ca      	lsrs	r2, r1
 8006092:	07d6      	lsls	r6, r2, #31
 8006094:	d528      	bpl.n	80060e8 <__sflush_r+0xb8>
 8006096:	2200      	movs	r2, #0
 8006098:	6062      	str	r2, [r4, #4]
 800609a:	04d9      	lsls	r1, r3, #19
 800609c:	6922      	ldr	r2, [r4, #16]
 800609e:	6022      	str	r2, [r4, #0]
 80060a0:	d504      	bpl.n	80060ac <__sflush_r+0x7c>
 80060a2:	1c42      	adds	r2, r0, #1
 80060a4:	d101      	bne.n	80060aa <__sflush_r+0x7a>
 80060a6:	682b      	ldr	r3, [r5, #0]
 80060a8:	b903      	cbnz	r3, 80060ac <__sflush_r+0x7c>
 80060aa:	6560      	str	r0, [r4, #84]	; 0x54
 80060ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ae:	602f      	str	r7, [r5, #0]
 80060b0:	2900      	cmp	r1, #0
 80060b2:	d0ca      	beq.n	800604a <__sflush_r+0x1a>
 80060b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060b8:	4299      	cmp	r1, r3
 80060ba:	d002      	beq.n	80060c2 <__sflush_r+0x92>
 80060bc:	4628      	mov	r0, r5
 80060be:	f7ff fc49 	bl	8005954 <_free_r>
 80060c2:	2000      	movs	r0, #0
 80060c4:	6360      	str	r0, [r4, #52]	; 0x34
 80060c6:	e7c1      	b.n	800604c <__sflush_r+0x1c>
 80060c8:	6a21      	ldr	r1, [r4, #32]
 80060ca:	2301      	movs	r3, #1
 80060cc:	4628      	mov	r0, r5
 80060ce:	47b0      	blx	r6
 80060d0:	1c41      	adds	r1, r0, #1
 80060d2:	d1c7      	bne.n	8006064 <__sflush_r+0x34>
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0c4      	beq.n	8006064 <__sflush_r+0x34>
 80060da:	2b1d      	cmp	r3, #29
 80060dc:	d001      	beq.n	80060e2 <__sflush_r+0xb2>
 80060de:	2b16      	cmp	r3, #22
 80060e0:	d101      	bne.n	80060e6 <__sflush_r+0xb6>
 80060e2:	602f      	str	r7, [r5, #0]
 80060e4:	e7b1      	b.n	800604a <__sflush_r+0x1a>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ec:	81a3      	strh	r3, [r4, #12]
 80060ee:	e7ad      	b.n	800604c <__sflush_r+0x1c>
 80060f0:	690f      	ldr	r7, [r1, #16]
 80060f2:	2f00      	cmp	r7, #0
 80060f4:	d0a9      	beq.n	800604a <__sflush_r+0x1a>
 80060f6:	0793      	lsls	r3, r2, #30
 80060f8:	680e      	ldr	r6, [r1, #0]
 80060fa:	bf08      	it	eq
 80060fc:	694b      	ldreq	r3, [r1, #20]
 80060fe:	600f      	str	r7, [r1, #0]
 8006100:	bf18      	it	ne
 8006102:	2300      	movne	r3, #0
 8006104:	eba6 0807 	sub.w	r8, r6, r7
 8006108:	608b      	str	r3, [r1, #8]
 800610a:	f1b8 0f00 	cmp.w	r8, #0
 800610e:	dd9c      	ble.n	800604a <__sflush_r+0x1a>
 8006110:	6a21      	ldr	r1, [r4, #32]
 8006112:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006114:	4643      	mov	r3, r8
 8006116:	463a      	mov	r2, r7
 8006118:	4628      	mov	r0, r5
 800611a:	47b0      	blx	r6
 800611c:	2800      	cmp	r0, #0
 800611e:	dc06      	bgt.n	800612e <__sflush_r+0xfe>
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800612c:	e78e      	b.n	800604c <__sflush_r+0x1c>
 800612e:	4407      	add	r7, r0
 8006130:	eba8 0800 	sub.w	r8, r8, r0
 8006134:	e7e9      	b.n	800610a <__sflush_r+0xda>
 8006136:	bf00      	nop
 8006138:	20400001 	.word	0x20400001

0800613c <_fflush_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	690b      	ldr	r3, [r1, #16]
 8006140:	4605      	mov	r5, r0
 8006142:	460c      	mov	r4, r1
 8006144:	b913      	cbnz	r3, 800614c <_fflush_r+0x10>
 8006146:	2500      	movs	r5, #0
 8006148:	4628      	mov	r0, r5
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	b118      	cbz	r0, 8006156 <_fflush_r+0x1a>
 800614e:	6983      	ldr	r3, [r0, #24]
 8006150:	b90b      	cbnz	r3, 8006156 <_fflush_r+0x1a>
 8006152:	f000 f887 	bl	8006264 <__sinit>
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <_fflush_r+0x6c>)
 8006158:	429c      	cmp	r4, r3
 800615a:	d11b      	bne.n	8006194 <_fflush_r+0x58>
 800615c:	686c      	ldr	r4, [r5, #4]
 800615e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0ef      	beq.n	8006146 <_fflush_r+0xa>
 8006166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006168:	07d0      	lsls	r0, r2, #31
 800616a:	d404      	bmi.n	8006176 <_fflush_r+0x3a>
 800616c:	0599      	lsls	r1, r3, #22
 800616e:	d402      	bmi.n	8006176 <_fflush_r+0x3a>
 8006170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006172:	f000 f915 	bl	80063a0 <__retarget_lock_acquire_recursive>
 8006176:	4628      	mov	r0, r5
 8006178:	4621      	mov	r1, r4
 800617a:	f7ff ff59 	bl	8006030 <__sflush_r>
 800617e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006180:	07da      	lsls	r2, r3, #31
 8006182:	4605      	mov	r5, r0
 8006184:	d4e0      	bmi.n	8006148 <_fflush_r+0xc>
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	059b      	lsls	r3, r3, #22
 800618a:	d4dd      	bmi.n	8006148 <_fflush_r+0xc>
 800618c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800618e:	f000 f908 	bl	80063a2 <__retarget_lock_release_recursive>
 8006192:	e7d9      	b.n	8006148 <_fflush_r+0xc>
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <_fflush_r+0x70>)
 8006196:	429c      	cmp	r4, r3
 8006198:	d101      	bne.n	800619e <_fflush_r+0x62>
 800619a:	68ac      	ldr	r4, [r5, #8]
 800619c:	e7df      	b.n	800615e <_fflush_r+0x22>
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <_fflush_r+0x74>)
 80061a0:	429c      	cmp	r4, r3
 80061a2:	bf08      	it	eq
 80061a4:	68ec      	ldreq	r4, [r5, #12]
 80061a6:	e7da      	b.n	800615e <_fflush_r+0x22>
 80061a8:	08006a24 	.word	0x08006a24
 80061ac:	08006a44 	.word	0x08006a44
 80061b0:	08006a04 	.word	0x08006a04

080061b4 <std>:
 80061b4:	2300      	movs	r3, #0
 80061b6:	b510      	push	{r4, lr}
 80061b8:	4604      	mov	r4, r0
 80061ba:	e9c0 3300 	strd	r3, r3, [r0]
 80061be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061c2:	6083      	str	r3, [r0, #8]
 80061c4:	8181      	strh	r1, [r0, #12]
 80061c6:	6643      	str	r3, [r0, #100]	; 0x64
 80061c8:	81c2      	strh	r2, [r0, #14]
 80061ca:	6183      	str	r3, [r0, #24]
 80061cc:	4619      	mov	r1, r3
 80061ce:	2208      	movs	r2, #8
 80061d0:	305c      	adds	r0, #92	; 0x5c
 80061d2:	f7fd fd1f 	bl	8003c14 <memset>
 80061d6:	4b05      	ldr	r3, [pc, #20]	; (80061ec <std+0x38>)
 80061d8:	6263      	str	r3, [r4, #36]	; 0x24
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <std+0x3c>)
 80061dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <std+0x40>)
 80061e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <std+0x44>)
 80061e4:	6224      	str	r4, [r4, #32]
 80061e6:	6323      	str	r3, [r4, #48]	; 0x30
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	bf00      	nop
 80061ec:	080064f9 	.word	0x080064f9
 80061f0:	0800651b 	.word	0x0800651b
 80061f4:	08006553 	.word	0x08006553
 80061f8:	08006577 	.word	0x08006577

080061fc <_cleanup_r>:
 80061fc:	4901      	ldr	r1, [pc, #4]	; (8006204 <_cleanup_r+0x8>)
 80061fe:	f000 b8af 	b.w	8006360 <_fwalk_reent>
 8006202:	bf00      	nop
 8006204:	0800613d 	.word	0x0800613d

08006208 <__sfmoreglue>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	2268      	movs	r2, #104	; 0x68
 800620c:	1e4d      	subs	r5, r1, #1
 800620e:	4355      	muls	r5, r2
 8006210:	460e      	mov	r6, r1
 8006212:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006216:	f7ff fc09 	bl	8005a2c <_malloc_r>
 800621a:	4604      	mov	r4, r0
 800621c:	b140      	cbz	r0, 8006230 <__sfmoreglue+0x28>
 800621e:	2100      	movs	r1, #0
 8006220:	e9c0 1600 	strd	r1, r6, [r0]
 8006224:	300c      	adds	r0, #12
 8006226:	60a0      	str	r0, [r4, #8]
 8006228:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800622c:	f7fd fcf2 	bl	8003c14 <memset>
 8006230:	4620      	mov	r0, r4
 8006232:	bd70      	pop	{r4, r5, r6, pc}

08006234 <__sfp_lock_acquire>:
 8006234:	4801      	ldr	r0, [pc, #4]	; (800623c <__sfp_lock_acquire+0x8>)
 8006236:	f000 b8b3 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 800623a:	bf00      	nop
 800623c:	20000551 	.word	0x20000551

08006240 <__sfp_lock_release>:
 8006240:	4801      	ldr	r0, [pc, #4]	; (8006248 <__sfp_lock_release+0x8>)
 8006242:	f000 b8ae 	b.w	80063a2 <__retarget_lock_release_recursive>
 8006246:	bf00      	nop
 8006248:	20000551 	.word	0x20000551

0800624c <__sinit_lock_acquire>:
 800624c:	4801      	ldr	r0, [pc, #4]	; (8006254 <__sinit_lock_acquire+0x8>)
 800624e:	f000 b8a7 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 8006252:	bf00      	nop
 8006254:	20000552 	.word	0x20000552

08006258 <__sinit_lock_release>:
 8006258:	4801      	ldr	r0, [pc, #4]	; (8006260 <__sinit_lock_release+0x8>)
 800625a:	f000 b8a2 	b.w	80063a2 <__retarget_lock_release_recursive>
 800625e:	bf00      	nop
 8006260:	20000552 	.word	0x20000552

08006264 <__sinit>:
 8006264:	b510      	push	{r4, lr}
 8006266:	4604      	mov	r4, r0
 8006268:	f7ff fff0 	bl	800624c <__sinit_lock_acquire>
 800626c:	69a3      	ldr	r3, [r4, #24]
 800626e:	b11b      	cbz	r3, 8006278 <__sinit+0x14>
 8006270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006274:	f7ff bff0 	b.w	8006258 <__sinit_lock_release>
 8006278:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800627c:	6523      	str	r3, [r4, #80]	; 0x50
 800627e:	4b13      	ldr	r3, [pc, #76]	; (80062cc <__sinit+0x68>)
 8006280:	4a13      	ldr	r2, [pc, #76]	; (80062d0 <__sinit+0x6c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	62a2      	str	r2, [r4, #40]	; 0x28
 8006286:	42a3      	cmp	r3, r4
 8006288:	bf04      	itt	eq
 800628a:	2301      	moveq	r3, #1
 800628c:	61a3      	streq	r3, [r4, #24]
 800628e:	4620      	mov	r0, r4
 8006290:	f000 f820 	bl	80062d4 <__sfp>
 8006294:	6060      	str	r0, [r4, #4]
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f81c 	bl	80062d4 <__sfp>
 800629c:	60a0      	str	r0, [r4, #8]
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 f818 	bl	80062d4 <__sfp>
 80062a4:	2200      	movs	r2, #0
 80062a6:	60e0      	str	r0, [r4, #12]
 80062a8:	2104      	movs	r1, #4
 80062aa:	6860      	ldr	r0, [r4, #4]
 80062ac:	f7ff ff82 	bl	80061b4 <std>
 80062b0:	68a0      	ldr	r0, [r4, #8]
 80062b2:	2201      	movs	r2, #1
 80062b4:	2109      	movs	r1, #9
 80062b6:	f7ff ff7d 	bl	80061b4 <std>
 80062ba:	68e0      	ldr	r0, [r4, #12]
 80062bc:	2202      	movs	r2, #2
 80062be:	2112      	movs	r1, #18
 80062c0:	f7ff ff78 	bl	80061b4 <std>
 80062c4:	2301      	movs	r3, #1
 80062c6:	61a3      	str	r3, [r4, #24]
 80062c8:	e7d2      	b.n	8006270 <__sinit+0xc>
 80062ca:	bf00      	nop
 80062cc:	08006688 	.word	0x08006688
 80062d0:	080061fd 	.word	0x080061fd

080062d4 <__sfp>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	4607      	mov	r7, r0
 80062d8:	f7ff ffac 	bl	8006234 <__sfp_lock_acquire>
 80062dc:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <__sfp+0x84>)
 80062de:	681e      	ldr	r6, [r3, #0]
 80062e0:	69b3      	ldr	r3, [r6, #24]
 80062e2:	b913      	cbnz	r3, 80062ea <__sfp+0x16>
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff ffbd 	bl	8006264 <__sinit>
 80062ea:	3648      	adds	r6, #72	; 0x48
 80062ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	d503      	bpl.n	80062fc <__sfp+0x28>
 80062f4:	6833      	ldr	r3, [r6, #0]
 80062f6:	b30b      	cbz	r3, 800633c <__sfp+0x68>
 80062f8:	6836      	ldr	r6, [r6, #0]
 80062fa:	e7f7      	b.n	80062ec <__sfp+0x18>
 80062fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006300:	b9d5      	cbnz	r5, 8006338 <__sfp+0x64>
 8006302:	4b16      	ldr	r3, [pc, #88]	; (800635c <__sfp+0x88>)
 8006304:	60e3      	str	r3, [r4, #12]
 8006306:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800630a:	6665      	str	r5, [r4, #100]	; 0x64
 800630c:	f000 f847 	bl	800639e <__retarget_lock_init_recursive>
 8006310:	f7ff ff96 	bl	8006240 <__sfp_lock_release>
 8006314:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006318:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800631c:	6025      	str	r5, [r4, #0]
 800631e:	61a5      	str	r5, [r4, #24]
 8006320:	2208      	movs	r2, #8
 8006322:	4629      	mov	r1, r5
 8006324:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006328:	f7fd fc74 	bl	8003c14 <memset>
 800632c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006330:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006334:	4620      	mov	r0, r4
 8006336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006338:	3468      	adds	r4, #104	; 0x68
 800633a:	e7d9      	b.n	80062f0 <__sfp+0x1c>
 800633c:	2104      	movs	r1, #4
 800633e:	4638      	mov	r0, r7
 8006340:	f7ff ff62 	bl	8006208 <__sfmoreglue>
 8006344:	4604      	mov	r4, r0
 8006346:	6030      	str	r0, [r6, #0]
 8006348:	2800      	cmp	r0, #0
 800634a:	d1d5      	bne.n	80062f8 <__sfp+0x24>
 800634c:	f7ff ff78 	bl	8006240 <__sfp_lock_release>
 8006350:	230c      	movs	r3, #12
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	e7ee      	b.n	8006334 <__sfp+0x60>
 8006356:	bf00      	nop
 8006358:	08006688 	.word	0x08006688
 800635c:	ffff0001 	.word	0xffff0001

08006360 <_fwalk_reent>:
 8006360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006364:	4606      	mov	r6, r0
 8006366:	4688      	mov	r8, r1
 8006368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800636c:	2700      	movs	r7, #0
 800636e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006372:	f1b9 0901 	subs.w	r9, r9, #1
 8006376:	d505      	bpl.n	8006384 <_fwalk_reent+0x24>
 8006378:	6824      	ldr	r4, [r4, #0]
 800637a:	2c00      	cmp	r4, #0
 800637c:	d1f7      	bne.n	800636e <_fwalk_reent+0xe>
 800637e:	4638      	mov	r0, r7
 8006380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006384:	89ab      	ldrh	r3, [r5, #12]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d907      	bls.n	800639a <_fwalk_reent+0x3a>
 800638a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800638e:	3301      	adds	r3, #1
 8006390:	d003      	beq.n	800639a <_fwalk_reent+0x3a>
 8006392:	4629      	mov	r1, r5
 8006394:	4630      	mov	r0, r6
 8006396:	47c0      	blx	r8
 8006398:	4307      	orrs	r7, r0
 800639a:	3568      	adds	r5, #104	; 0x68
 800639c:	e7e9      	b.n	8006372 <_fwalk_reent+0x12>

0800639e <__retarget_lock_init_recursive>:
 800639e:	4770      	bx	lr

080063a0 <__retarget_lock_acquire_recursive>:
 80063a0:	4770      	bx	lr

080063a2 <__retarget_lock_release_recursive>:
 80063a2:	4770      	bx	lr

080063a4 <__swhatbuf_r>:
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	460e      	mov	r6, r1
 80063a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ac:	2900      	cmp	r1, #0
 80063ae:	b096      	sub	sp, #88	; 0x58
 80063b0:	4614      	mov	r4, r2
 80063b2:	461d      	mov	r5, r3
 80063b4:	da08      	bge.n	80063c8 <__swhatbuf_r+0x24>
 80063b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	602a      	str	r2, [r5, #0]
 80063be:	061a      	lsls	r2, r3, #24
 80063c0:	d410      	bmi.n	80063e4 <__swhatbuf_r+0x40>
 80063c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063c6:	e00e      	b.n	80063e6 <__swhatbuf_r+0x42>
 80063c8:	466a      	mov	r2, sp
 80063ca:	f000 f8fb 	bl	80065c4 <_fstat_r>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	dbf1      	blt.n	80063b6 <__swhatbuf_r+0x12>
 80063d2:	9a01      	ldr	r2, [sp, #4]
 80063d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063dc:	425a      	negs	r2, r3
 80063de:	415a      	adcs	r2, r3
 80063e0:	602a      	str	r2, [r5, #0]
 80063e2:	e7ee      	b.n	80063c2 <__swhatbuf_r+0x1e>
 80063e4:	2340      	movs	r3, #64	; 0x40
 80063e6:	2000      	movs	r0, #0
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	b016      	add	sp, #88	; 0x58
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080063f0 <__smakebuf_r>:
 80063f0:	898b      	ldrh	r3, [r1, #12]
 80063f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063f4:	079d      	lsls	r5, r3, #30
 80063f6:	4606      	mov	r6, r0
 80063f8:	460c      	mov	r4, r1
 80063fa:	d507      	bpl.n	800640c <__smakebuf_r+0x1c>
 80063fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	6123      	str	r3, [r4, #16]
 8006404:	2301      	movs	r3, #1
 8006406:	6163      	str	r3, [r4, #20]
 8006408:	b002      	add	sp, #8
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	ab01      	add	r3, sp, #4
 800640e:	466a      	mov	r2, sp
 8006410:	f7ff ffc8 	bl	80063a4 <__swhatbuf_r>
 8006414:	9900      	ldr	r1, [sp, #0]
 8006416:	4605      	mov	r5, r0
 8006418:	4630      	mov	r0, r6
 800641a:	f7ff fb07 	bl	8005a2c <_malloc_r>
 800641e:	b948      	cbnz	r0, 8006434 <__smakebuf_r+0x44>
 8006420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006424:	059a      	lsls	r2, r3, #22
 8006426:	d4ef      	bmi.n	8006408 <__smakebuf_r+0x18>
 8006428:	f023 0303 	bic.w	r3, r3, #3
 800642c:	f043 0302 	orr.w	r3, r3, #2
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	e7e3      	b.n	80063fc <__smakebuf_r+0xc>
 8006434:	4b0d      	ldr	r3, [pc, #52]	; (800646c <__smakebuf_r+0x7c>)
 8006436:	62b3      	str	r3, [r6, #40]	; 0x28
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	6020      	str	r0, [r4, #0]
 800643c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006440:	81a3      	strh	r3, [r4, #12]
 8006442:	9b00      	ldr	r3, [sp, #0]
 8006444:	6163      	str	r3, [r4, #20]
 8006446:	9b01      	ldr	r3, [sp, #4]
 8006448:	6120      	str	r0, [r4, #16]
 800644a:	b15b      	cbz	r3, 8006464 <__smakebuf_r+0x74>
 800644c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006450:	4630      	mov	r0, r6
 8006452:	f000 f8c9 	bl	80065e8 <_isatty_r>
 8006456:	b128      	cbz	r0, 8006464 <__smakebuf_r+0x74>
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	81a3      	strh	r3, [r4, #12]
 8006464:	89a0      	ldrh	r0, [r4, #12]
 8006466:	4305      	orrs	r5, r0
 8006468:	81a5      	strh	r5, [r4, #12]
 800646a:	e7cd      	b.n	8006408 <__smakebuf_r+0x18>
 800646c:	080061fd 	.word	0x080061fd

08006470 <_raise_r>:
 8006470:	291f      	cmp	r1, #31
 8006472:	b538      	push	{r3, r4, r5, lr}
 8006474:	4604      	mov	r4, r0
 8006476:	460d      	mov	r5, r1
 8006478:	d904      	bls.n	8006484 <_raise_r+0x14>
 800647a:	2316      	movs	r3, #22
 800647c:	6003      	str	r3, [r0, #0]
 800647e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006482:	bd38      	pop	{r3, r4, r5, pc}
 8006484:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006486:	b112      	cbz	r2, 800648e <_raise_r+0x1e>
 8006488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800648c:	b94b      	cbnz	r3, 80064a2 <_raise_r+0x32>
 800648e:	4620      	mov	r0, r4
 8006490:	f000 f830 	bl	80064f4 <_getpid_r>
 8006494:	462a      	mov	r2, r5
 8006496:	4601      	mov	r1, r0
 8006498:	4620      	mov	r0, r4
 800649a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800649e:	f000 b817 	b.w	80064d0 <_kill_r>
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d00a      	beq.n	80064bc <_raise_r+0x4c>
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	d103      	bne.n	80064b2 <_raise_r+0x42>
 80064aa:	2316      	movs	r3, #22
 80064ac:	6003      	str	r3, [r0, #0]
 80064ae:	2001      	movs	r0, #1
 80064b0:	e7e7      	b.n	8006482 <_raise_r+0x12>
 80064b2:	2400      	movs	r4, #0
 80064b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064b8:	4628      	mov	r0, r5
 80064ba:	4798      	blx	r3
 80064bc:	2000      	movs	r0, #0
 80064be:	e7e0      	b.n	8006482 <_raise_r+0x12>

080064c0 <raise>:
 80064c0:	4b02      	ldr	r3, [pc, #8]	; (80064cc <raise+0xc>)
 80064c2:	4601      	mov	r1, r0
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	f7ff bfd3 	b.w	8006470 <_raise_r>
 80064ca:	bf00      	nop
 80064cc:	20000268 	.word	0x20000268

080064d0 <_kill_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4d07      	ldr	r5, [pc, #28]	; (80064f0 <_kill_r+0x20>)
 80064d4:	2300      	movs	r3, #0
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	4611      	mov	r1, r2
 80064dc:	602b      	str	r3, [r5, #0]
 80064de:	f7fa ffb7 	bl	8001450 <_kill>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	d102      	bne.n	80064ec <_kill_r+0x1c>
 80064e6:	682b      	ldr	r3, [r5, #0]
 80064e8:	b103      	cbz	r3, 80064ec <_kill_r+0x1c>
 80064ea:	6023      	str	r3, [r4, #0]
 80064ec:	bd38      	pop	{r3, r4, r5, pc}
 80064ee:	bf00      	nop
 80064f0:	2000054c 	.word	0x2000054c

080064f4 <_getpid_r>:
 80064f4:	f7fa bfa4 	b.w	8001440 <_getpid>

080064f8 <__sread>:
 80064f8:	b510      	push	{r4, lr}
 80064fa:	460c      	mov	r4, r1
 80064fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006500:	f000 f894 	bl	800662c <_read_r>
 8006504:	2800      	cmp	r0, #0
 8006506:	bfab      	itete	ge
 8006508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800650a:	89a3      	ldrhlt	r3, [r4, #12]
 800650c:	181b      	addge	r3, r3, r0
 800650e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006512:	bfac      	ite	ge
 8006514:	6563      	strge	r3, [r4, #84]	; 0x54
 8006516:	81a3      	strhlt	r3, [r4, #12]
 8006518:	bd10      	pop	{r4, pc}

0800651a <__swrite>:
 800651a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651e:	461f      	mov	r7, r3
 8006520:	898b      	ldrh	r3, [r1, #12]
 8006522:	05db      	lsls	r3, r3, #23
 8006524:	4605      	mov	r5, r0
 8006526:	460c      	mov	r4, r1
 8006528:	4616      	mov	r6, r2
 800652a:	d505      	bpl.n	8006538 <__swrite+0x1e>
 800652c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006530:	2302      	movs	r3, #2
 8006532:	2200      	movs	r2, #0
 8006534:	f000 f868 	bl	8006608 <_lseek_r>
 8006538:	89a3      	ldrh	r3, [r4, #12]
 800653a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800653e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	4632      	mov	r2, r6
 8006546:	463b      	mov	r3, r7
 8006548:	4628      	mov	r0, r5
 800654a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800654e:	f000 b817 	b.w	8006580 <_write_r>

08006552 <__sseek>:
 8006552:	b510      	push	{r4, lr}
 8006554:	460c      	mov	r4, r1
 8006556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800655a:	f000 f855 	bl	8006608 <_lseek_r>
 800655e:	1c43      	adds	r3, r0, #1
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	bf15      	itete	ne
 8006564:	6560      	strne	r0, [r4, #84]	; 0x54
 8006566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800656a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800656e:	81a3      	strheq	r3, [r4, #12]
 8006570:	bf18      	it	ne
 8006572:	81a3      	strhne	r3, [r4, #12]
 8006574:	bd10      	pop	{r4, pc}

08006576 <__sclose>:
 8006576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657a:	f000 b813 	b.w	80065a4 <_close_r>
	...

08006580 <_write_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4d07      	ldr	r5, [pc, #28]	; (80065a0 <_write_r+0x20>)
 8006584:	4604      	mov	r4, r0
 8006586:	4608      	mov	r0, r1
 8006588:	4611      	mov	r1, r2
 800658a:	2200      	movs	r2, #0
 800658c:	602a      	str	r2, [r5, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	f7fa ff95 	bl	80014be <_write>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d102      	bne.n	800659e <_write_r+0x1e>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	b103      	cbz	r3, 800659e <_write_r+0x1e>
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	2000054c 	.word	0x2000054c

080065a4 <_close_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4d06      	ldr	r5, [pc, #24]	; (80065c0 <_close_r+0x1c>)
 80065a8:	2300      	movs	r3, #0
 80065aa:	4604      	mov	r4, r0
 80065ac:	4608      	mov	r0, r1
 80065ae:	602b      	str	r3, [r5, #0]
 80065b0:	f7fa ffa1 	bl	80014f6 <_close>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_close_r+0x1a>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_close_r+0x1a>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	2000054c 	.word	0x2000054c

080065c4 <_fstat_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4d07      	ldr	r5, [pc, #28]	; (80065e4 <_fstat_r+0x20>)
 80065c8:	2300      	movs	r3, #0
 80065ca:	4604      	mov	r4, r0
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	602b      	str	r3, [r5, #0]
 80065d2:	f7fa ff9c 	bl	800150e <_fstat>
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	d102      	bne.n	80065e0 <_fstat_r+0x1c>
 80065da:	682b      	ldr	r3, [r5, #0]
 80065dc:	b103      	cbz	r3, 80065e0 <_fstat_r+0x1c>
 80065de:	6023      	str	r3, [r4, #0]
 80065e0:	bd38      	pop	{r3, r4, r5, pc}
 80065e2:	bf00      	nop
 80065e4:	2000054c 	.word	0x2000054c

080065e8 <_isatty_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d06      	ldr	r5, [pc, #24]	; (8006604 <_isatty_r+0x1c>)
 80065ec:	2300      	movs	r3, #0
 80065ee:	4604      	mov	r4, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	602b      	str	r3, [r5, #0]
 80065f4:	f7fa ff9b 	bl	800152e <_isatty>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <_isatty_r+0x1a>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	b103      	cbz	r3, 8006602 <_isatty_r+0x1a>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	2000054c 	.word	0x2000054c

08006608 <_lseek_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4d07      	ldr	r5, [pc, #28]	; (8006628 <_lseek_r+0x20>)
 800660c:	4604      	mov	r4, r0
 800660e:	4608      	mov	r0, r1
 8006610:	4611      	mov	r1, r2
 8006612:	2200      	movs	r2, #0
 8006614:	602a      	str	r2, [r5, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	f7fa ff94 	bl	8001544 <_lseek>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d102      	bne.n	8006626 <_lseek_r+0x1e>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	b103      	cbz	r3, 8006626 <_lseek_r+0x1e>
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	2000054c 	.word	0x2000054c

0800662c <_read_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4d07      	ldr	r5, [pc, #28]	; (800664c <_read_r+0x20>)
 8006630:	4604      	mov	r4, r0
 8006632:	4608      	mov	r0, r1
 8006634:	4611      	mov	r1, r2
 8006636:	2200      	movs	r2, #0
 8006638:	602a      	str	r2, [r5, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	f7fa ff22 	bl	8001484 <_read>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d102      	bne.n	800664a <_read_r+0x1e>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	b103      	cbz	r3, 800664a <_read_r+0x1e>
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	2000054c 	.word	0x2000054c

08006650 <_init>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr

0800665c <_fini>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	bf00      	nop
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr
