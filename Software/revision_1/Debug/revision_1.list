
revision_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800ce50  0800ce50  0001ce50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d25c  0800d25c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d25c  0800d25c  0001d25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d264  0800d264  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d264  0800d264  0001d264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d268  0800d268  0001d268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d26c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001518  200001e0  0800d44c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016f8  0800d44c  000216f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028d41  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d79  00000000  00000000  00048f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c0  00000000  00000000  0004dcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002000  00000000  00000000  0004fe90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007266  00000000  00000000  00051e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002701c  00000000  00000000  000590f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f392a  00000000  00000000  00080112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173a3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1ac  00000000  00000000  00173a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ce34 	.word	0x0800ce34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800ce34 	.word	0x0800ce34

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef0:	f000 fde0 	bl	8001ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef4:	f000 f812 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef8:	f000 f988 	bl	800120c <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000efc:	f000 f8fa 	bl	80010f4 <MX_QUADSPI_Init>
  MX_I2C1_Init();
 8000f00:	f000 f8ca 	bl	8001098 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f04:	f000 f922 	bl	800114c <MX_SPI1_Init>
  MX_ADC1_Init();
 8000f08:	f000 f874 	bl	8000ff4 <MX_ADC1_Init>
  MX_UART5_Init();
 8000f0c:	f000 f954 	bl	80011b8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f10:	f006 fc5a 	bl	80077c8 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8000f14:	f006 fc7c 	bl	8007810 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <main+0x2c>
	...

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	2234      	movs	r2, #52	; 0x34
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f009 faff 	bl	800a52e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	4b29      	ldr	r3, [pc, #164]	; (8000fec <SystemClock_Config+0xd0>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a28      	ldr	r2, [pc, #160]	; (8000fec <SystemClock_Config+0xd0>)
 8000f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f50:	4b26      	ldr	r3, [pc, #152]	; (8000fec <SystemClock_Config+0xd0>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <SystemClock_Config+0xd4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f68:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <SystemClock_Config+0xd4>)
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <SystemClock_Config+0xd4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f90:	2304      	movs	r3, #4
 8000f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f94:	2348      	movs	r3, #72	; 0x48
 8000f96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 f8dd 	bl	8004168 <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fb4:	f000 f9f0 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb8:	230f      	movs	r3, #15
 8000fba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fd4b 	bl	8003a70 <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000fe0:	f000 f9da 	bl	8001398 <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3750      	adds	r7, #80	; 0x50
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_ADC1_Init+0x98>)
 8001008:	4a21      	ldr	r2, [pc, #132]	; (8001090 <MX_ADC1_Init+0x9c>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_ADC1_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_ADC1_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_ADC1_Init+0x98>)
 8001034:	4a17      	ldr	r2, [pc, #92]	; (8001094 <MX_ADC1_Init+0xa0>)
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_ADC1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_ADC1_Init+0x98>)
 8001040:	2201      	movs	r2, #1
 8001042:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_ADC1_Init+0x98>)
 800104e:	2201      	movs	r2, #1
 8001050:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <MX_ADC1_Init+0x98>)
 8001054:	f000 fd70 	bl	8001b38 <HAL_ADC_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800105e:	f000 f99b 	bl	8001398 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001062:	230f      	movs	r3, #15
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <MX_ADC1_Init+0x98>)
 8001074:	f000 fda4 	bl	8001bc0 <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800107e:	f000 f98b 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001fc 	.word	0x200001fc
 8001090:	40012000 	.word	0x40012000
 8001094:	0f000001 	.word	0x0f000001

08001098 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x50>)
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <MX_I2C1_Init+0x54>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010a4:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x58>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d6:	f001 fa31 	bl	800253c <HAL_I2C_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e0:	f000 f95a 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000244 	.word	0x20000244
 80010ec:	40005400 	.word	0x40005400
 80010f0:	000186a0 	.word	0x000186a0

080010f4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_QUADSPI_Init+0x50>)
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <MX_QUADSPI_Init+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_QUADSPI_Init+0x50>)
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_QUADSPI_Init+0x50>)
 8001106:	2201      	movs	r2, #1
 8001108:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_QUADSPI_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_QUADSPI_Init+0x50>)
 8001112:	2218      	movs	r2, #24
 8001114:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_QUADSPI_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_QUADSPI_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_QUADSPI_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_QUADSPI_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_QUADSPI_Init+0x50>)
 8001130:	f002 fbdc 	bl	80038ec <HAL_QSPI_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800113a:	f000 f92d 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000298 	.word	0x20000298
 8001148:	a0001000 	.word	0xa0001000

0800114c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001152:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <MX_SPI1_Init+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001158:	f44f 7282 	mov.w	r2, #260	; 0x104
 800115c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_SPI1_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_SPI1_Init+0x64>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_SPI1_Init+0x64>)
 8001198:	220a      	movs	r2, #10
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_SPI1_Init+0x64>)
 800119e:	f003 fa81 	bl	80046a4 <HAL_SPI_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011a8:	f000 f8f6 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200002e4 	.word	0x200002e4
 80011b4:	40013000 	.word	0x40013000

080011b8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_UART5_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_UART5_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_UART5_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_UART5_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_UART5_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_UART5_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_UART5_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_UART5_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_UART5_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_UART5_Init+0x4c>)
 80011f0:	f003 fd8e 	bl	8004d10 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80011fa:	f000 f8cd 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000033c 	.word	0x2000033c
 8001208:	40005000 	.word	0x40005000

0800120c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b4f      	ldr	r3, [pc, #316]	; (8001364 <MX_GPIO_Init+0x158>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a4e      	ldr	r2, [pc, #312]	; (8001364 <MX_GPIO_Init+0x158>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b4c      	ldr	r3, [pc, #304]	; (8001364 <MX_GPIO_Init+0x158>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b48      	ldr	r3, [pc, #288]	; (8001364 <MX_GPIO_Init+0x158>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a47      	ldr	r2, [pc, #284]	; (8001364 <MX_GPIO_Init+0x158>)
 8001248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b45      	ldr	r3, [pc, #276]	; (8001364 <MX_GPIO_Init+0x158>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b41      	ldr	r3, [pc, #260]	; (8001364 <MX_GPIO_Init+0x158>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a40      	ldr	r2, [pc, #256]	; (8001364 <MX_GPIO_Init+0x158>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b3e      	ldr	r3, [pc, #248]	; (8001364 <MX_GPIO_Init+0x158>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <MX_GPIO_Init+0x158>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a39      	ldr	r2, [pc, #228]	; (8001364 <MX_GPIO_Init+0x158>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b37      	ldr	r3, [pc, #220]	; (8001364 <MX_GPIO_Init+0x158>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b33      	ldr	r3, [pc, #204]	; (8001364 <MX_GPIO_Init+0x158>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a32      	ldr	r2, [pc, #200]	; (8001364 <MX_GPIO_Init+0x158>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <MX_GPIO_Init+0x158>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Radio_RX_Pin|Buzzer_Gate_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	210c      	movs	r1, #12
 80012b2:	482d      	ldr	r0, [pc, #180]	; (8001368 <MX_GPIO_Init+0x15c>)
 80012b4:	f001 f928 	bl	8002508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Radio_Reset_Pin|Indicator_LED_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80012be:	482b      	ldr	r0, [pc, #172]	; (800136c <MX_GPIO_Init+0x160>)
 80012c0:	f001 f922 	bl	8002508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_Reset_GPIO_Port, GPS_Reset_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ca:	4829      	ldr	r0, [pc, #164]	; (8001370 <MX_GPIO_Init+0x164>)
 80012cc:	f001 f91c 	bl	8002508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Acc_Int1_Pin Gyro_Int3_Pin Radio_DIO2_Pin Radio_DIO5_Pin
                           Radio_DIO4_Pin Radio_DIO3_Pin */
  GPIO_InitStruct.Pin = Acc_Int1_Pin|Gyro_Int3_Pin|Radio_DIO2_Pin|Radio_DIO5_Pin
 80012d0:	f24c 13c2 	movw	r3, #49602	; 0xc1c2
 80012d4:	617b      	str	r3, [r7, #20]
                          |Radio_DIO4_Pin|Radio_DIO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4822      	ldr	r0, [pc, #136]	; (8001370 <MX_GPIO_Init+0x164>)
 80012e6:	f000 ff7b 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Radio_DIO1_Pin Radio_DIO0_Pin Radio_TX_Pin Mag_Data_Ready_Pin */
  GPIO_InitStruct.Pin = Radio_DIO1_Pin|Radio_DIO0_Pin|Radio_TX_Pin|Mag_Data_Ready_Pin;
 80012ea:	f240 1313 	movw	r3, #275	; 0x113
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	481a      	ldr	r0, [pc, #104]	; (8001368 <MX_GPIO_Init+0x15c>)
 8001300:	f000 ff6e 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Radio_RX_Pin Buzzer_Gate_Pin */
  GPIO_InitStruct.Pin = Radio_RX_Pin|Buzzer_Gate_Pin;
 8001304:	230c      	movs	r3, #12
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4813      	ldr	r0, [pc, #76]	; (8001368 <MX_GPIO_Init+0x15c>)
 800131c:	f000 ff60 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Radio_Reset_Pin Indicator_LED_Pin */
  GPIO_InitStruct.Pin = Radio_Reset_Pin|Indicator_LED_Pin;
 8001320:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_GPIO_Init+0x160>)
 800133a:	f000 ff51 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_Reset_Pin */
  GPIO_InitStruct.Pin = GPS_Reset_Pin;
 800133e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_Reset_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_GPIO_Init+0x164>)
 8001358:	f000 ff42 	bl	80021e0 <HAL_GPIO_Init>

}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800

08001374 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d101      	bne.n	800138a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001386:	f000 fbb7 	bl	8001af8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40001000 	.word	0x40001000

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <Error_Handler+0x8>
	...

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_MspInit+0x54>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <HAL_MspInit+0x54>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_MspInit+0x54>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_MspInit+0x54>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_MspInit+0x54>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_MspInit+0x54>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	210f      	movs	r1, #15
 80013e6:	f06f 0001 	mvn.w	r0, #1
 80013ea:	f000 fecf 	bl	800218c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_ADC_MspInit+0x7c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d127      	bne.n	800146e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_ADC_MspInit+0x80>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a15      	ldr	r2, [pc, #84]	; (800147c <HAL_ADC_MspInit+0x80>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_ADC_MspInit+0x80>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_ADC_MspInit+0x80>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_ADC_MspInit+0x80>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_ADC_MspInit+0x80>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Radio_Enable_Pin;
 8001456:	2330      	movs	r3, #48	; 0x30
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145a:	2303      	movs	r3, #3
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_ADC_MspInit+0x84>)
 800146a:	f000 feb9 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	; 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40012000 	.word	0x40012000
 800147c:	40023800 	.word	0x40023800
 8001480:	40020800 	.word	0x40020800

08001484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_I2C_MspInit+0x84>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12c      	bne.n	8001500 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c8:	2312      	movs	r3, #18
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d4:	2304      	movs	r3, #4
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <HAL_I2C_MspInit+0x8c>)
 80014e0:	f000 fe7e 	bl	80021e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40005400 	.word	0x40005400
 800150c:	40023800 	.word	0x40023800
 8001510:	40020400 	.word	0x40020400

08001514 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a30      	ldr	r2, [pc, #192]	; (80015f4 <HAL_QSPI_MspInit+0xe0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d15a      	bne.n	80015ec <HAL_QSPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <HAL_QSPI_MspInit+0xe4>)
 800153c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153e:	4a2e      	ldr	r2, [pc, #184]	; (80015f8 <HAL_QSPI_MspInit+0xe4>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6393      	str	r3, [r2, #56]	; 0x38
 8001546:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <HAL_QSPI_MspInit+0xe4>)
 8001548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <HAL_QSPI_MspInit+0xe4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_QSPI_MspInit+0xe4>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_QSPI_MspInit+0xe4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_QSPI_MspInit+0xe4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <HAL_QSPI_MspInit+0xe4>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_QSPI_MspInit+0xe4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = Flash_QUADSPI_CLK_Pin;
 800158a:	2304      	movs	r3, #4
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800159a:	2309      	movs	r3, #9
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Flash_QUADSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4815      	ldr	r0, [pc, #84]	; (80015fc <HAL_QSPI_MspInit+0xe8>)
 80015a6:	f000 fe1b 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_QUADSPI_BK1_IO0_Pin|Flash_QUADSPI_BK1_IO1_Pin;
 80015aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80015bc:	2309      	movs	r3, #9
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	480e      	ldr	r0, [pc, #56]	; (8001600 <HAL_QSPI_MspInit+0xec>)
 80015c8:	f000 fe0a 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_QUADSPI_BK1_NCS_Pin;
 80015cc:	2340      	movs	r3, #64	; 0x40
 80015ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80015dc:	230a      	movs	r3, #10
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Flash_QUADSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_QSPI_MspInit+0xe8>)
 80015e8:	f000 fdfa 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	a0001000 	.word	0xa0001000
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020400 	.word	0x40020400
 8001600:	40020800 	.word	0x40020800

08001604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <HAL_SPI_MspInit+0x84>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d12b      	bne.n	800167e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_SPI_MspInit+0x88>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_SPI_MspInit+0x88>)
 8001630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_SPI_MspInit+0x88>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_SPI_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a10      	ldr	r2, [pc, #64]	; (800168c <HAL_SPI_MspInit+0x88>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_SPI_MspInit+0x88>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Radio_SPI1_SCK_Pin|Radio_SPI1_MISO_Pin|Radio_SPI1_MOSI_Pin;
 800165e:	23e0      	movs	r3, #224	; 0xe0
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800166e:	2305      	movs	r3, #5
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_SPI_MspInit+0x8c>)
 800167a:	f000 fdb1 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40013000 	.word	0x40013000
 800168c:	40023800 	.word	0x40023800
 8001690:	40020000 	.word	0x40020000

08001694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a28      	ldr	r2, [pc, #160]	; (8001754 <HAL_UART_MspInit+0xc0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d14a      	bne.n	800174c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a26      	ldr	r2, [pc, #152]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a18      	ldr	r2, [pc, #96]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_UART_MspInit+0xc4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_UART_TX_Pin;
 800170a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800171c:	2308      	movs	r3, #8
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <HAL_UART_MspInit+0xc8>)
 8001728:	f000 fd5a 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_UART_RX_Pin;
 800172c:	2304      	movs	r3, #4
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800173c:	2308      	movs	r3, #8
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <HAL_UART_MspInit+0xcc>)
 8001748:	f000 fd4a 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40005000 	.word	0x40005000
 8001758:	40023800 	.word	0x40023800
 800175c:	40020800 	.word	0x40020800
 8001760:	40020c00 	.word	0x40020c00

08001764 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08e      	sub	sp, #56	; 0x38
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <HAL_InitTick+0xe4>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	4a32      	ldr	r2, [pc, #200]	; (8001848 <HAL_InitTick+0xe4>)
 800177e:	f043 0310 	orr.w	r3, r3, #16
 8001782:	6413      	str	r3, [r2, #64]	; 0x40
 8001784:	4b30      	ldr	r3, [pc, #192]	; (8001848 <HAL_InitTick+0xe4>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001790:	f107 0210 	add.w	r2, r7, #16
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fa82 	bl	8003ca4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017aa:	f002 fa53 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 80017ae:	6378      	str	r0, [r7, #52]	; 0x34
 80017b0:	e004      	b.n	80017bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017b2:	f002 fa4f 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 80017b6:	4603      	mov	r3, r0
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017be:	4a23      	ldr	r2, [pc, #140]	; (800184c <HAL_InitTick+0xe8>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9b      	lsrs	r3, r3, #18
 80017c6:	3b01      	subs	r3, #1
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <HAL_InitTick+0xec>)
 80017cc:	4a21      	ldr	r2, [pc, #132]	; (8001854 <HAL_InitTick+0xf0>)
 80017ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <HAL_InitTick+0xec>)
 80017d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017d8:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <HAL_InitTick+0xec>)
 80017da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <HAL_InitTick+0xec>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <HAL_InitTick+0xec>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_InitTick+0xec>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017f0:	4817      	ldr	r0, [pc, #92]	; (8001850 <HAL_InitTick+0xec>)
 80017f2:	f002 ffe0 	bl	80047b6 <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80017fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001800:	2b00      	cmp	r3, #0
 8001802:	d11b      	bne.n	800183c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001804:	4812      	ldr	r0, [pc, #72]	; (8001850 <HAL_InitTick+0xec>)
 8001806:	f003 f82f 	bl	8004868 <HAL_TIM_Base_Start_IT>
 800180a:	4603      	mov	r3, r0
 800180c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001814:	2b00      	cmp	r3, #0
 8001816:	d111      	bne.n	800183c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001818:	2036      	movs	r0, #54	; 0x36
 800181a:	f000 fcd3 	bl	80021c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b0f      	cmp	r3, #15
 8001822:	d808      	bhi.n	8001836 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001824:	2200      	movs	r2, #0
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	2036      	movs	r0, #54	; 0x36
 800182a:	f000 fcaf 	bl	800218c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <HAL_InitTick+0xf4>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	e002      	b.n	800183c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800183c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001840:	4618      	mov	r0, r3
 8001842:	3738      	adds	r7, #56	; 0x38
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	431bde83 	.word	0x431bde83
 8001850:	20000380 	.word	0x20000380
 8001854:	40001000 	.word	0x40001000
 8001858:	20000004 	.word	0x20000004

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <NMI_Handler+0x4>

08001862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <HardFault_Handler+0x4>

08001868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <MemManage_Handler+0x4>

0800186e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <BusFault_Handler+0x4>

08001874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <UsageFault_Handler+0x4>

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <TIM6_DAC_IRQHandler+0x10>)
 800188e:	f003 f85b 	bl	8004948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000380 	.word	0x20000380

0800189c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <OTG_FS_IRQHandler+0x10>)
 80018a2:	f000 ff8f 	bl	80027c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200011dc 	.word	0x200011dc

080018b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return 1;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_kill>:

int _kill(int pid, int sig)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ca:	f008 fcff 	bl	800a2cc <__errno>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2216      	movs	r2, #22
 80018d2:	601a      	str	r2, [r3, #0]
  return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_exit>:

void _exit (int status)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ffe7 	bl	80018c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018f2:	e7fe      	b.n	80018f2 <_exit+0x12>

080018f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e00a      	b.n	800191c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001906:	f3af 8000 	nop.w
 800190a:	4601      	mov	r1, r0
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	b2ca      	uxtb	r2, r1
 8001914:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf0      	blt.n	8001906 <_read+0x12>
  }

  return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e009      	b.n	8001954 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf1      	blt.n	8001940 <_write+0x12>
  }
  return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_close>:

int _close(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198e:	605a      	str	r2, [r3, #4]
  return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_isatty>:

int _isatty(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f008 fc64 	bl	800a2cc <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20020000 	.word	0x20020000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	200003c8 	.word	0x200003c8
 8001a38:	200016f8 	.word	0x200016f8

08001a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a66:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a7c:	4c0b      	ldr	r4, [pc, #44]	; (8001aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a8a:	f7ff ffd7 	bl	8001a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f008 fd19 	bl	800a4c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a92:	f7ff fa2b 	bl	8000eec <main>
  bx  lr    
 8001a96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001aa4:	0800d26c 	.word	0x0800d26c
  ldr r2, =_sbss
 8001aa8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001aac:	200016f8 	.word	0x200016f8

08001ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC_IRQHandler>
	...

08001ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <HAL_Init+0x40>)
 8001abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_Init+0x40>)
 8001aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_Init+0x40>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 fb4a 	bl	8002176 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae2:	200f      	movs	r0, #15
 8001ae4:	f7ff fe3e 	bl	8001764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae8:	f7ff fc5c 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023c00 	.word	0x40023c00

08001af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x20>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_IncTick+0x24>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	200003cc 	.word	0x200003cc

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	200003cc 	.word	0x200003cc

08001b38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e033      	b.n	8001bb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fc50 	bl	80013fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d118      	bne.n	8001ba8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b7e:	f023 0302 	bic.w	r3, r3, #2
 8001b82:	f043 0202 	orr.w	r2, r3, #2
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f94a 	bl	8001e24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f023 0303 	bic.w	r3, r3, #3
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba6:	e001      	b.n	8001bac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x1c>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e113      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x244>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b09      	cmp	r3, #9
 8001bea:	d925      	bls.n	8001c38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68d9      	ldr	r1, [r3, #12]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	3b1e      	subs	r3, #30
 8001c02:	2207      	movs	r2, #7
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	400a      	ands	r2, r1
 8001c10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68d9      	ldr	r1, [r3, #12]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	4603      	mov	r3, r0
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4403      	add	r3, r0
 8001c2a:	3b1e      	subs	r3, #30
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	e022      	b.n	8001c7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6919      	ldr	r1, [r3, #16]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	400a      	ands	r2, r1
 8001c5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6919      	ldr	r1, [r3, #16]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	4603      	mov	r3, r0
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4403      	add	r3, r0
 8001c74:	409a      	lsls	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d824      	bhi.n	8001cd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	3b05      	subs	r3, #5
 8001c98:	221f      	movs	r2, #31
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b05      	subs	r3, #5
 8001cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cce:	e04c      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	d824      	bhi.n	8001d22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b23      	subs	r3, #35	; 0x23
 8001cea:	221f      	movs	r2, #31
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43da      	mvns	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	400a      	ands	r2, r1
 8001cf8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	3b23      	subs	r3, #35	; 0x23
 8001d14:	fa00 f203 	lsl.w	r2, r0, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d20:	e023      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	3b41      	subs	r3, #65	; 0x41
 8001d34:	221f      	movs	r2, #31
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	400a      	ands	r2, r1
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3b41      	subs	r3, #65	; 0x41
 8001d5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d6a:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <HAL_ADC_ConfigChannel+0x250>)
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a28      	ldr	r2, [pc, #160]	; (8001e14 <HAL_ADC_ConfigChannel+0x254>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d10f      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x1d8>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b12      	cmp	r3, #18
 8001d7e:	d10b      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_ADC_ConfigChannel+0x254>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d12b      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x23a>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <HAL_ADC_ConfigChannel+0x258>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d003      	beq.n	8001db4 <HAL_ADC_ConfigChannel+0x1f4>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b11      	cmp	r3, #17
 8001db2:	d122      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <HAL_ADC_ConfigChannel+0x258>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d111      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_ADC_ConfigChannel+0x25c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a11      	ldr	r2, [pc, #68]	; (8001e20 <HAL_ADC_ConfigChannel+0x260>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	0c9a      	lsrs	r2, r3, #18
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dec:	e002      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f9      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40012300 	.word	0x40012300
 8001e14:	40012000 	.word	0x40012000
 8001e18:	10000012 	.word	0x10000012
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	431bde83 	.word	0x431bde83

08001e24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e2c:	4b79      	ldr	r3, [pc, #484]	; (8002014 <ADC_Init+0x1f0>)
 8001e2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	021a      	lsls	r2, r3, #8
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6899      	ldr	r1, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	4a58      	ldr	r2, [pc, #352]	; (8002018 <ADC_Init+0x1f4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d022      	beq.n	8001f02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6899      	ldr	r1, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6899      	ldr	r1, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	e00f      	b.n	8001f22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0202 	bic.w	r2, r2, #2
 8001f30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6899      	ldr	r1, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7e1b      	ldrb	r3, [r3, #24]
 8001f3c:	005a      	lsls	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6859      	ldr	r1, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	035a      	lsls	r2, r3, #13
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	e007      	b.n	8001f98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	051a      	lsls	r2, r3, #20
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6899      	ldr	r1, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fda:	025a      	lsls	r2, r3, #9
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6899      	ldr	r1, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	029a      	lsls	r2, r3, #10
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40012300 	.word	0x40012300
 8002018:	0f000001 	.word	0x0f000001

0800201c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <__NVIC_GetPriorityGrouping+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	f003 0307 	and.w	r3, r3, #7
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db0b      	blt.n	80020aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4907      	ldr	r1, [pc, #28]	; (80020b8 <__NVIC_EnableIRQ+0x38>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2001      	movs	r0, #1
 80020a2:	fa00 f202 	lsl.w	r2, r0, r2
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf28      	it	cs
 800212e:	2304      	movcs	r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <NVIC_EncodePriority+0x30>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3b03      	subs	r3, #3
 800213e:	e000      	b.n	8002142 <NVIC_EncodePriority+0x32>
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	401a      	ands	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43d9      	mvns	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	4313      	orrs	r3, r2
         );
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff4c 	bl	800201c <__NVIC_SetPriorityGrouping>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219e:	f7ff ff61 	bl	8002064 <__NVIC_GetPriorityGrouping>
 80021a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	6978      	ldr	r0, [r7, #20]
 80021aa:	f7ff ffb1 	bl	8002110 <NVIC_EncodePriority>
 80021ae:	4602      	mov	r2, r0
 80021b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff80 	bl	80020bc <__NVIC_SetPriority>
}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ff54 	bl	8002080 <__NVIC_EnableIRQ>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e165      	b.n	80024c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021fc:	2201      	movs	r2, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	f040 8154 	bne.w	80024c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d005      	beq.n	8002232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	2b02      	cmp	r3, #2
 8002230:	d130      	bne.n	8002294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 0201 	and.w	r2, r3, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b03      	cmp	r3, #3
 800229e:	d017      	beq.n	80022d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d123      	bne.n	8002324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	69b9      	ldr	r1, [r7, #24]
 8002320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0203 	and.w	r2, r3, #3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80ae 	beq.w	80024c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b5d      	ldr	r3, [pc, #372]	; (80024e0 <HAL_GPIO_Init+0x300>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a5c      	ldr	r2, [pc, #368]	; (80024e0 <HAL_GPIO_Init+0x300>)
 8002370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b5a      	ldr	r3, [pc, #360]	; (80024e0 <HAL_GPIO_Init+0x300>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002382:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <HAL_GPIO_Init+0x304>)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4f      	ldr	r2, [pc, #316]	; (80024e8 <HAL_GPIO_Init+0x308>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d025      	beq.n	80023fa <HAL_GPIO_Init+0x21a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4e      	ldr	r2, [pc, #312]	; (80024ec <HAL_GPIO_Init+0x30c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01f      	beq.n	80023f6 <HAL_GPIO_Init+0x216>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4d      	ldr	r2, [pc, #308]	; (80024f0 <HAL_GPIO_Init+0x310>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d019      	beq.n	80023f2 <HAL_GPIO_Init+0x212>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4c      	ldr	r2, [pc, #304]	; (80024f4 <HAL_GPIO_Init+0x314>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <HAL_GPIO_Init+0x20e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4b      	ldr	r2, [pc, #300]	; (80024f8 <HAL_GPIO_Init+0x318>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00d      	beq.n	80023ea <HAL_GPIO_Init+0x20a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4a      	ldr	r2, [pc, #296]	; (80024fc <HAL_GPIO_Init+0x31c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <HAL_GPIO_Init+0x206>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a49      	ldr	r2, [pc, #292]	; (8002500 <HAL_GPIO_Init+0x320>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_GPIO_Init+0x202>
 80023de:	2306      	movs	r3, #6
 80023e0:	e00c      	b.n	80023fc <HAL_GPIO_Init+0x21c>
 80023e2:	2307      	movs	r3, #7
 80023e4:	e00a      	b.n	80023fc <HAL_GPIO_Init+0x21c>
 80023e6:	2305      	movs	r3, #5
 80023e8:	e008      	b.n	80023fc <HAL_GPIO_Init+0x21c>
 80023ea:	2304      	movs	r3, #4
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x21c>
 80023ee:	2303      	movs	r3, #3
 80023f0:	e004      	b.n	80023fc <HAL_GPIO_Init+0x21c>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e002      	b.n	80023fc <HAL_GPIO_Init+0x21c>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_GPIO_Init+0x21c>
 80023fa:	2300      	movs	r3, #0
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	f002 0203 	and.w	r2, r2, #3
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	4093      	lsls	r3, r2
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800240c:	4935      	ldr	r1, [pc, #212]	; (80024e4 <HAL_GPIO_Init+0x304>)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800241a:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_GPIO_Init+0x324>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243e:	4a31      	ldr	r2, [pc, #196]	; (8002504 <HAL_GPIO_Init+0x324>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002444:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <HAL_GPIO_Init+0x324>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002468:	4a26      	ldr	r2, [pc, #152]	; (8002504 <HAL_GPIO_Init+0x324>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800246e:	4b25      	ldr	r3, [pc, #148]	; (8002504 <HAL_GPIO_Init+0x324>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <HAL_GPIO_Init+0x324>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002498:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <HAL_GPIO_Init+0x324>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024bc:	4a11      	ldr	r2, [pc, #68]	; (8002504 <HAL_GPIO_Init+0x324>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3301      	adds	r3, #1
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b0f      	cmp	r3, #15
 80024cc:	f67f ae96 	bls.w	80021fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3724      	adds	r7, #36	; 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40013800 	.word	0x40013800
 80024e8:	40020000 	.word	0x40020000
 80024ec:	40020400 	.word	0x40020400
 80024f0:	40020800 	.word	0x40020800
 80024f4:	40020c00 	.word	0x40020c00
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40021400 	.word	0x40021400
 8002500:	40021800 	.word	0x40021800
 8002504:	40013c00 	.word	0x40013c00

08002508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
 8002514:	4613      	mov	r3, r2
 8002516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002518:	787b      	ldrb	r3, [r7, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002524:	e003      	b.n	800252e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	041a      	lsls	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e12b      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe ff8e 	bl	8001484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	; 0x24
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800259e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025a0:	f001 fb58 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 80025a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4a81      	ldr	r2, [pc, #516]	; (80027b0 <HAL_I2C_Init+0x274>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d807      	bhi.n	80025c0 <HAL_I2C_Init+0x84>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a80      	ldr	r2, [pc, #512]	; (80027b4 <HAL_I2C_Init+0x278>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	bf94      	ite	ls
 80025b8:	2301      	movls	r3, #1
 80025ba:	2300      	movhi	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e006      	b.n	80025ce <HAL_I2C_Init+0x92>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a7d      	ldr	r2, [pc, #500]	; (80027b8 <HAL_I2C_Init+0x27c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0e7      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a78      	ldr	r2, [pc, #480]	; (80027bc <HAL_I2C_Init+0x280>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9b      	lsrs	r3, r3, #18
 80025e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a6a      	ldr	r2, [pc, #424]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d802      	bhi.n	8002610 <HAL_I2C_Init+0xd4>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3301      	adds	r3, #1
 800260e:	e009      	b.n	8002624 <HAL_I2C_Init+0xe8>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	4a69      	ldr	r2, [pc, #420]	; (80027c0 <HAL_I2C_Init+0x284>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	3301      	adds	r3, #1
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	430b      	orrs	r3, r1
 800262a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	495c      	ldr	r1, [pc, #368]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002640:	428b      	cmp	r3, r1
 8002642:	d819      	bhi.n	8002678 <HAL_I2C_Init+0x13c>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e59      	subs	r1, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002652:	1c59      	adds	r1, r3, #1
 8002654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002658:	400b      	ands	r3, r1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_I2C_Init+0x138>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1e59      	subs	r1, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fbb1 f3f3 	udiv	r3, r1, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002672:	e051      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002674:	2304      	movs	r3, #4
 8002676:	e04f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <HAL_I2C_Init+0x168>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	440b      	add	r3, r1
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e012      	b.n	80026ca <HAL_I2C_Init+0x18e>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	0099      	lsls	r1, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Init+0x196>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e022      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10e      	bne.n	80026f8 <HAL_I2C_Init+0x1bc>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1e58      	subs	r0, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	440b      	add	r3, r1
 80026e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f6:	e00f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	0099      	lsls	r1, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	fbb0 f3f3 	udiv	r3, r0, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	6809      	ldr	r1, [r1, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69da      	ldr	r2, [r3, #28]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6911      	ldr	r1, [r2, #16]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	4311      	orrs	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	000186a0 	.word	0x000186a0
 80027b4:	001e847f 	.word	0x001e847f
 80027b8:	003d08ff 	.word	0x003d08ff
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	10624dd3 	.word	0x10624dd3

080027c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b08d      	sub	sp, #52	; 0x34
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 fd49 	bl	8006272 <USB_GetMode>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 84b7 	bne.w	8003156 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 fcad 	bl	800614c <USB_ReadInterrupts>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 84ad 	beq.w	8003154 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f003 fc9a 	bl	800614c <USB_ReadInterrupts>
 8002818:	4603      	mov	r3, r0
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b02      	cmp	r3, #2
 8002820:	d107      	bne.n	8002832 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f002 0202 	and.w	r2, r2, #2
 8002830:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fc88 	bl	800614c <USB_ReadInterrupts>
 800283c:	4603      	mov	r3, r0
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b10      	cmp	r3, #16
 8002844:	d161      	bne.n	800290a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699a      	ldr	r2, [r3, #24]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0210 	bic.w	r2, r2, #16
 8002854:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	f003 020f 	and.w	r2, r3, #15
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	3304      	adds	r3, #4
 8002874:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	0c5b      	lsrs	r3, r3, #17
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	2b02      	cmp	r3, #2
 8002880:	d124      	bne.n	80028cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d035      	beq.n	80028fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002898:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800289c:	b29b      	uxth	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	6a38      	ldr	r0, [r7, #32]
 80028a2:	f003 fb01 	bl	8005ea8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b2:	441a      	add	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	6a1a      	ldr	r2, [r3, #32]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c4:	441a      	add	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	621a      	str	r2, [r3, #32]
 80028ca:	e016      	b.n	80028fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	0c5b      	lsrs	r3, r3, #17
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	2b06      	cmp	r3, #6
 80028d6:	d110      	bne.n	80028fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028de:	2208      	movs	r2, #8
 80028e0:	4619      	mov	r1, r3
 80028e2:	6a38      	ldr	r0, [r7, #32]
 80028e4:	f003 fae0 	bl	8005ea8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	6a1a      	ldr	r2, [r3, #32]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028f4:	441a      	add	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0210 	orr.w	r2, r2, #16
 8002908:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fc1c 	bl	800614c <USB_ReadInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800291e:	f040 80a7 	bne.w	8002a70 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f003 fc21 	bl	8006172 <USB_ReadDevAllOutEpInterrupt>
 8002930:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002932:	e099      	b.n	8002a68 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 808e 	beq.w	8002a5c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f003 fc45 	bl	80061da <USB_ReadDevOutEPInterrupt>
 8002950:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00c      	beq.n	8002976 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4413      	add	r3, r2
 8002964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002968:	461a      	mov	r2, r3
 800296a:	2301      	movs	r3, #1
 800296c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800296e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fe8d 	bl	8003690 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00c      	beq.n	800299a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800298c:	461a      	mov	r2, r3
 800298e:	2308      	movs	r3, #8
 8002990:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 ff63 	bl	8003860 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b0:	461a      	mov	r2, r3
 80029b2:	2310      	movs	r3, #16
 80029b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d030      	beq.n	8002a22 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c8:	2b80      	cmp	r3, #128	; 0x80
 80029ca:	d109      	bne.n	80029e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	3304      	adds	r3, #4
 80029f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	78db      	ldrb	r3, [r3, #3]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d108      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2200      	movs	r2, #0
 8002a02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f007 fab2 	bl	8009f74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2302      	movs	r3, #2
 8002a20:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a54:	461a      	mov	r2, r3
 8002a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a5a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	3301      	adds	r3, #1
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a64:	085b      	lsrs	r3, r3, #1
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f47f af62 	bne.w	8002934 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f003 fb69 	bl	800614c <USB_ReadInterrupts>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a84:	f040 80db 	bne.w	8002c3e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f003 fb8a 	bl	80061a6 <USB_ReadDevAllInEpInterrupt>
 8002a92:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a98:	e0cd      	b.n	8002c36 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80c2 	beq.w	8002c2a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 fbb0 	bl	8006216 <USB_ReadDevInEPInterrupt>
 8002ab6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d057      	beq.n	8002b72 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	2201      	movs	r2, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69f9      	ldr	r1, [r7, #28]
 8002ade:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af2:	461a      	mov	r2, r3
 8002af4:	2301      	movs	r3, #1
 8002af6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d132      	bne.n	8002b66 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	334c      	adds	r3, #76	; 0x4c
 8002b10:	6819      	ldr	r1, [r3, #0]
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4403      	add	r3, r0
 8002b20:	3348      	adds	r3, #72	; 0x48
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4419      	add	r1, r3
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4403      	add	r3, r0
 8002b34:	334c      	adds	r3, #76	; 0x4c
 8002b36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d113      	bne.n	8002b66 <HAL_PCD_IRQHandler+0x3a2>
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3354      	adds	r3, #84	; 0x54
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d108      	bne.n	8002b66 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2101      	movs	r1, #1
 8002b62:	f003 fbb7 	bl	80062d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f007 f97c 	bl	8009e6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2308      	movs	r3, #8
 8002b8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2310      	movs	r3, #16
 8002ba8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2340      	movs	r3, #64	; 0x40
 8002bc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d023      	beq.n	8002c18 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd2:	6a38      	ldr	r0, [r7, #32]
 8002bd4:	f002 fc00 	bl	80053d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	3338      	adds	r3, #56	; 0x38
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	4413      	add	r3, r2
 8002be8:	3304      	adds	r3, #4
 8002bea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	78db      	ldrb	r3, [r3, #3]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d108      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f007 f9c9 	bl	8009f98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c12:	461a      	mov	r2, r3
 8002c14:	2302      	movs	r3, #2
 8002c16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fca6 	bl	8003576 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f47f af2e 	bne.w	8002a9a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fa82 	bl	800614c <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c52:	d122      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d108      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f007 faab 	bl	800a1d8 <HAL_PCDEx_LPM_Callback>
 8002c82:	e002      	b.n	8002c8a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f007 f967 	bl	8009f58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f003 fa54 	bl	800614c <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cae:	d112      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d102      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f007 f923 	bl	8009f0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002cd4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 fa36 	bl	800614c <USB_ReadInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cea:	d121      	bne.n	8002d30 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002cfa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d111      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	089b      	lsrs	r3, r3, #2
 8002d16:	f003 020f 	and.w	r2, r3, #15
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002d20:	2101      	movs	r1, #1
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f007 fa58 	bl	800a1d8 <HAL_PCDEx_LPM_Callback>
 8002d28:	e002      	b.n	8002d30 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f007 f8ee 	bl	8009f0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 fa09 	bl	800614c <USB_ReadInterrupts>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d44:	f040 80b7 	bne.w	8002eb6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2110      	movs	r1, #16
 8002d62:	4618      	mov	r0, r3
 8002d64:	f002 fb38 	bl	80053d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6c:	e046      	b.n	8002dfc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d92:	0151      	lsls	r1, r2, #5
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	440a      	add	r2, r1
 8002d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002da0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dae:	461a      	mov	r2, r3
 8002db0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002db4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc6:	0151      	lsls	r1, r2, #5
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	440a      	add	r2, r1
 8002dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de6:	0151      	lsls	r1, r2, #5
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	440a      	add	r2, r1
 8002dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002df0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002df4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	3301      	adds	r3, #1
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d3b3      	bcc.n	8002d6e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e14:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d016      	beq.n	8002e50 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e32:	f043 030b 	orr.w	r3, r3, #11
 8002e36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e48:	f043 030b 	orr.w	r3, r3, #11
 8002e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e4e:	e015      	b.n	8002e7c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e62:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e66:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e76:	f043 030b 	orr.w	r3, r3, #11
 8002e7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f003 fa17 	bl	80062d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 f946 	bl	800614c <USB_ReadInterrupts>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eca:	d124      	bne.n	8002f16 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f003 f9dc 	bl	800628e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 fab0 	bl	8005440 <USB_GetDevSpeed>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681c      	ldr	r4, [r3, #0]
 8002eec:	f000 fea6 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8002ef0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4620      	mov	r0, r4
 8002efc:	f002 f9ca 	bl	8005294 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f006 ffda 	bl	8009eba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 f916 	bl	800614c <USB_ReadInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d10a      	bne.n	8002f40 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f006 ffb7 	bl	8009e9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f002 0208 	and.w	r2, r2, #8
 8002f3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f003 f901 	bl	800614c <USB_ReadInterrupts>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d122      	bne.n	8002f9a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f60:	2301      	movs	r3, #1
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
 8002f64:	e014      	b.n	8002f90 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d105      	bne.n	8002f8a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	4619      	mov	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fac5 	bl	8003514 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d3e5      	bcc.n	8002f66 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f003 f8d4 	bl	800614c <USB_ReadInterrupts>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fae:	d13b      	bne.n	8003028 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb4:	e02b      	b.n	800300e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3340      	adds	r3, #64	; 0x40
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d115      	bne.n	8003008 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fdc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	da12      	bge.n	8003008 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	333f      	adds	r3, #63	; 0x3f
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa86 	bl	8003514 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	3301      	adds	r3, #1
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	429a      	cmp	r2, r3
 8003016:	d3ce      	bcc.n	8002fb6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003026:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f003 f88d 	bl	800614c <USB_ReadInterrupts>
 8003032:	4603      	mov	r3, r0
 8003034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003038:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800303c:	d155      	bne.n	80030ea <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800303e:	2301      	movs	r3, #1
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
 8003042:	e045      	b.n	80030d0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	4413      	add	r3, r2
 800304c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d12e      	bne.n	80030ca <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800306c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800306e:	2b00      	cmp	r3, #0
 8003070:	da2b      	bge.n	80030ca <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800307e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003082:	429a      	cmp	r2, r3
 8003084:	d121      	bne.n	80030ca <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030c6:	6053      	str	r3, [r2, #4]
            break;
 80030c8:	e007      	b.n	80030da <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	3301      	adds	r3, #1
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d3b4      	bcc.n	8003044 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 f82c 	bl	800614c <USB_ReadInterrupts>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fe:	d10a      	bne.n	8003116 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f006 ff5b 	bl	8009fbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003114:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f003 f816 	bl	800614c <USB_ReadInterrupts>
 8003120:	4603      	mov	r3, r0
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b04      	cmp	r3, #4
 8003128:	d115      	bne.n	8003156 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f006 ff4b 	bl	8009fd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	e000      	b.n	8003156 <HAL_PCD_IRQHandler+0x992>
      return;
 8003154:	bf00      	nop
    }
  }
}
 8003156:	3734      	adds	r7, #52	; 0x34
 8003158:	46bd      	mov	sp, r7
 800315a:	bd90      	pop	{r4, r7, pc}

0800315c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_PCD_SetAddress+0x1a>
 8003172:	2302      	movs	r3, #2
 8003174:	e013      	b.n	800319e <HAL_PCD_SetAddress+0x42>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f002 ffb6 	bl	8006100 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	4608      	mov	r0, r1
 80031b0:	4611      	mov	r1, r2
 80031b2:	461a      	mov	r2, r3
 80031b4:	4603      	mov	r3, r0
 80031b6:	70fb      	strb	r3, [r7, #3]
 80031b8:	460b      	mov	r3, r1
 80031ba:	803b      	strh	r3, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da0f      	bge.n	80031ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 020f 	and.w	r2, r3, #15
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	3338      	adds	r3, #56	; 0x38
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	3304      	adds	r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	705a      	strb	r2, [r3, #1]
 80031ea:	e00f      	b.n	800320c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 020f 	and.w	r2, r3, #15
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	3304      	adds	r3, #4
 8003204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	b2da      	uxtb	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003218:	883a      	ldrh	r2, [r7, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	78ba      	ldrb	r2, [r7, #2]
 8003222:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	785b      	ldrb	r3, [r3, #1]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003236:	78bb      	ldrb	r3, [r7, #2]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d102      	bne.n	8003242 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_PCD_EP_Open+0xaa>
 800324c:	2302      	movs	r3, #2
 800324e:	e00e      	b.n	800326e <HAL_PCD_EP_Open+0xc8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68f9      	ldr	r1, [r7, #12]
 800325e:	4618      	mov	r0, r3
 8003260:	f002 f913 	bl	800548a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800326c:	7afb      	ldrb	r3, [r7, #11]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	460b      	mov	r3, r1
 8003284:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003286:	7afb      	ldrb	r3, [r7, #11]
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	3304      	adds	r3, #4
 800329e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2200      	movs	r2, #0
 80032b0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b8:	7afb      	ldrb	r3, [r7, #11]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d102      	bne.n	80032d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	f003 030f 	and.w	r3, r3, #15
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	6979      	ldr	r1, [r7, #20]
 80032ea:	f002 fb9d 	bl	8005a28 <USB_EP0StartXfer>
 80032ee:	e008      	b.n	8003302 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	6979      	ldr	r1, [r7, #20]
 80032fe:	f002 f94b 	bl	8005598 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	460b      	mov	r3, r1
 800331a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331c:	7afb      	ldrb	r3, [r7, #11]
 800331e:	f003 020f 	and.w	r2, r3, #15
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	3338      	adds	r3, #56	; 0x38
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	3304      	adds	r3, #4
 8003332:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2200      	movs	r2, #0
 8003344:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2201      	movs	r2, #1
 800334a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800334c:	7afb      	ldrb	r3, [r7, #11]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	b2da      	uxtb	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d102      	bne.n	8003366 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003366:	7afb      	ldrb	r3, [r7, #11]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	6979      	ldr	r1, [r7, #20]
 800337e:	f002 fb53 	bl	8005a28 <USB_EP0StartXfer>
 8003382:	e008      	b.n	8003396 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	6979      	ldr	r1, [r7, #20]
 8003392:	f002 f901 	bl	8005598 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	f003 020f 	and.w	r2, r3, #15
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d901      	bls.n	80033be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e050      	b.n	8003460 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	da0f      	bge.n	80033e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	f003 020f 	and.w	r2, r3, #15
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	3338      	adds	r3, #56	; 0x38
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	3304      	adds	r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	705a      	strb	r2, [r3, #1]
 80033e4:	e00d      	b.n	8003402 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4413      	add	r3, r2
 80033f8:	3304      	adds	r3, #4
 80033fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	b2da      	uxtb	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_PCD_EP_SetStall+0x82>
 800341e:	2302      	movs	r3, #2
 8003420:	e01e      	b.n	8003460 <HAL_PCD_EP_SetStall+0xc0>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68f9      	ldr	r1, [r7, #12]
 8003430:	4618      	mov	r0, r3
 8003432:	f002 fd91 	bl	8005f58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	b2d9      	uxtb	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003450:	461a      	mov	r2, r3
 8003452:	f002 ff3f 	bl	80062d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 020f 	and.w	r2, r3, #15
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	d901      	bls.n	8003486 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e042      	b.n	800350c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348a:	2b00      	cmp	r3, #0
 800348c:	da0f      	bge.n	80034ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	3338      	adds	r3, #56	; 0x38
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	705a      	strb	r2, [r3, #1]
 80034ac:	e00f      	b.n	80034ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 020f 	and.w	r2, r3, #15
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	3304      	adds	r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_PCD_EP_ClrStall+0x86>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e00e      	b.n	800350c <HAL_PCD_EP_ClrStall+0xa4>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68f9      	ldr	r1, [r7, #12]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f002 fd99 	bl	8006034 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003524:	2b00      	cmp	r3, #0
 8003526:	da0c      	bge.n	8003542 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	f003 020f 	and.w	r2, r3, #15
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	3338      	adds	r3, #56	; 0x38
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4413      	add	r3, r2
 800353c:	3304      	adds	r3, #4
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e00c      	b.n	800355c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	3304      	adds	r3, #4
 800355a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68f9      	ldr	r1, [r7, #12]
 8003562:	4618      	mov	r0, r3
 8003564:	f002 fbb8 	bl	8005cd8 <USB_EPStopXfer>
 8003568:	4603      	mov	r3, r0
 800356a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800356c:	7afb      	ldrb	r3, [r7, #11]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b08a      	sub	sp, #40	; 0x28
 800357a:	af02      	add	r7, sp, #8
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	3338      	adds	r3, #56	; 0x38
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	3304      	adds	r3, #4
 800359c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a1a      	ldr	r2, [r3, #32]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d901      	bls.n	80035ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e06c      	b.n	8003688 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d902      	bls.n	80035ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3303      	adds	r3, #3
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d2:	e02b      	b.n	800362c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d902      	bls.n	80035f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	3303      	adds	r3, #3
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6919      	ldr	r1, [r3, #16]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003608:	b2db      	uxtb	r3, r3
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	4603      	mov	r3, r0
 800360e:	6978      	ldr	r0, [r7, #20]
 8003610:	f002 fc0c 	bl	8005e2c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	441a      	add	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1a      	ldr	r2, [r3, #32]
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	441a      	add	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	b29b      	uxth	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	429a      	cmp	r2, r3
 8003640:	d809      	bhi.n	8003656 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1a      	ldr	r2, [r3, #32]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800364a:	429a      	cmp	r2, r3
 800364c:	d203      	bcs.n	8003656 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1be      	bne.n	80035d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	429a      	cmp	r2, r3
 8003660:	d811      	bhi.n	8003686 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	2201      	movs	r2, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	43db      	mvns	r3, r3
 800367c:	6939      	ldr	r1, [r7, #16]
 800367e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003682:	4013      	ands	r3, r2
 8003684:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	333c      	adds	r3, #60	; 0x3c
 80036a8:	3304      	adds	r3, #4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d17b      	bne.n	80037be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d015      	beq.n	80036fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4a61      	ldr	r2, [pc, #388]	; (8003858 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	f240 80b9 	bls.w	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80b3 	beq.w	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f2:	461a      	mov	r2, r3
 80036f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f8:	6093      	str	r3, [r2, #8]
 80036fa:	e0a7      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003712:	461a      	mov	r2, r3
 8003714:	2320      	movs	r3, #32
 8003716:	6093      	str	r3, [r2, #8]
 8003718:	e098      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	f040 8093 	bne.w	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	4a4b      	ldr	r2, [pc, #300]	; (8003858 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d90f      	bls.n	800374e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003744:	461a      	mov	r2, r3
 8003746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800374a:	6093      	str	r3, [r2, #8]
 800374c:	e07e      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	0159      	lsls	r1, r3, #5
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	440b      	add	r3, r1
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377a:	1ad2      	subs	r2, r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d114      	bne.n	80037b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003798:	461a      	mov	r2, r3
 800379a:	2101      	movs	r1, #1
 800379c:	f002 fd9a 	bl	80062d4 <USB_EP0_OutStart>
 80037a0:	e006      	b.n	80037b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	441a      	add	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	4619      	mov	r1, r3
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f006 fb3c 	bl	8009e34 <HAL_PCD_DataOutStageCallback>
 80037bc:	e046      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4a26      	ldr	r2, [pc, #152]	; (800385c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d124      	bne.n	8003810 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037dc:	461a      	mov	r2, r3
 80037de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e2:	6093      	str	r3, [r2, #8]
 80037e4:	e032      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fc:	461a      	mov	r2, r3
 80037fe:	2320      	movs	r3, #32
 8003800:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f006 fb13 	bl	8009e34 <HAL_PCD_DataOutStageCallback>
 800380e:	e01d      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d114      	bne.n	8003840 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003838:	461a      	mov	r2, r3
 800383a:	2100      	movs	r1, #0
 800383c:	f002 fd4a 	bl	80062d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f006 faf4 	bl	8009e34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	4f54300a 	.word	0x4f54300a
 800385c:	4f54310a 	.word	0x4f54310a

08003860 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	333c      	adds	r3, #60	; 0x3c
 8003878:	3304      	adds	r3, #4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d90e      	bls.n	80038b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f006 faab 	bl	8009e10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d90c      	bls.n	80038dc <PCD_EP_OutSetupPacket_int+0x7c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d108      	bne.n	80038dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038d4:	461a      	mov	r2, r3
 80038d6:	2101      	movs	r1, #1
 80038d8:	f002 fcfc 	bl	80062d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	4f54300a 	.word	0x4f54300a

080038ec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80038f4:	f7fe f914 	bl	8001b20 <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e069      	b.n	80039d8 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7fd fdfb 	bl	8001514 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800391e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f85e 	bl	80039e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	3b01      	subs	r3, #1
 8003938:	021a      	lsls	r2, r3, #8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	2120      	movs	r1, #32
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f856 	bl	8003a00 <QSPI_WaitFlagStateUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003958:	7afb      	ldrb	r3, [r7, #11]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d137      	bne.n	80039ce <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003968:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6852      	ldr	r2, [r2, #4]
 8003970:	0611      	lsls	r1, r2, #24
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68d2      	ldr	r2, [r2, #12]
 8003976:	4311      	orrs	r1, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	69d2      	ldr	r2, [r2, #28]
 800397c:	4311      	orrs	r1, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6a12      	ldr	r2, [r2, #32]
 8003982:	4311      	orrs	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	430b      	orrs	r3, r1
 800398a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_QSPI_Init+0xf4>)
 8003994:	4013      	ands	r3, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6912      	ldr	r2, [r2, #16]
 800399a:	0411      	lsls	r1, r2, #16
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6952      	ldr	r2, [r2, #20]
 80039a0:	4311      	orrs	r1, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6992      	ldr	r2, [r2, #24]
 80039a6:	4311      	orrs	r1, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80039d6:	7afb      	ldrb	r3, [r7, #11]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	ffe0f8fe 	.word	0xffe0f8fe

080039e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003a10:	e01a      	b.n	8003a48 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d016      	beq.n	8003a48 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7fe f881 	bl	8001b20 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2204      	movs	r2, #4
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f043 0201 	orr.w	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e00e      	b.n	8003a66 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bf14      	ite	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	2300      	moveq	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d1d6      	bne.n	8003a12 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0cc      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d90c      	bls.n	8003aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b63      	ldr	r3, [pc, #396]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b8      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003adc:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a52      	ldr	r2, [pc, #328]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b50      	ldr	r3, [pc, #320]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	494d      	ldr	r1, [pc, #308]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d044      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d119      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e07f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e067      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4934      	ldr	r1, [pc, #208]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b60:	f7fd ffde 	bl	8001b20 <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7fd ffda 	bl	8001b20 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e04f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 020c 	and.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1eb      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d20c      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e032      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4916      	ldr	r1, [pc, #88]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be2:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	490e      	ldr	r1, [pc, #56]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf6:	f000 f887 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	490a      	ldr	r1, [pc, #40]	; (8003c30 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	5ccb      	ldrb	r3, [r1, r3]
 8003c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fd fda4 	bl	8001764 <HAL_InitTick>

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	0800ce68 	.word	0x0800ce68
 8003c34:	20000000 	.word	0x20000000
 8003c38:	20000004 	.word	0x20000004

08003c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000000 	.word	0x20000000

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c58:	f7ff fff0 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0a9b      	lsrs	r3, r3, #10
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4903      	ldr	r1, [pc, #12]	; (8003c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	0800ce78 	.word	0x0800ce78

08003c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c80:	f7ff ffdc 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0b5b      	lsrs	r3, r3, #13
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4903      	ldr	r1, [pc, #12]	; (8003ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	0800ce78 	.word	0x0800ce78

08003ca4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cb4:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <HAL_RCC_GetClockConfig+0x5c>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0203 	and.w	r2, r3, #3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <HAL_RCC_GetClockConfig+0x5c>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <HAL_RCC_GetClockConfig+0x5c>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <HAL_RCC_GetClockConfig+0x5c>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	08db      	lsrs	r3, r3, #3
 8003cde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ce6:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <HAL_RCC_GetClockConfig+0x60>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 020f 	and.w	r2, r3, #15
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40023c00 	.word	0x40023c00

08003d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d0c:	b0ae      	sub	sp, #184	; 0xb8
 8003d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d2e:	4bcb      	ldr	r3, [pc, #812]	; (800405c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b0c      	cmp	r3, #12
 8003d38:	f200 8206 	bhi.w	8004148 <HAL_RCC_GetSysClockFreq+0x440>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d79 	.word	0x08003d79
 8003d48:	08004149 	.word	0x08004149
 8003d4c:	08004149 	.word	0x08004149
 8003d50:	08004149 	.word	0x08004149
 8003d54:	08003d81 	.word	0x08003d81
 8003d58:	08004149 	.word	0x08004149
 8003d5c:	08004149 	.word	0x08004149
 8003d60:	08004149 	.word	0x08004149
 8003d64:	08003d89 	.word	0x08003d89
 8003d68:	08004149 	.word	0x08004149
 8003d6c:	08004149 	.word	0x08004149
 8003d70:	08004149 	.word	0x08004149
 8003d74:	08003f79 	.word	0x08003f79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d78:	4bb9      	ldr	r3, [pc, #740]	; (8004060 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003d7e:	e1e7      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d80:	4bb8      	ldr	r3, [pc, #736]	; (8004064 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d86:	e1e3      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d88:	4bb4      	ldr	r3, [pc, #720]	; (800405c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d94:	4bb1      	ldr	r3, [pc, #708]	; (800405c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d071      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da0:	4bae      	ldr	r3, [pc, #696]	; (800405c <HAL_RCC_GetSysClockFreq+0x354>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	099b      	lsrs	r3, r3, #6
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	462b      	mov	r3, r5
 8003dca:	f04f 0000 	mov.w	r0, #0
 8003dce:	f04f 0100 	mov.w	r1, #0
 8003dd2:	0159      	lsls	r1, r3, #5
 8003dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd8:	0150      	lsls	r0, r2, #5
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4621      	mov	r1, r4
 8003de0:	1a51      	subs	r1, r2, r1
 8003de2:	6439      	str	r1, [r7, #64]	; 0x40
 8003de4:	4629      	mov	r1, r5
 8003de6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dea:	647b      	str	r3, [r7, #68]	; 0x44
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003df8:	4649      	mov	r1, r9
 8003dfa:	018b      	lsls	r3, r1, #6
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e02:	4641      	mov	r1, r8
 8003e04:	018a      	lsls	r2, r1, #6
 8003e06:	4641      	mov	r1, r8
 8003e08:	1a51      	subs	r1, r2, r1
 8003e0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003e20:	4649      	mov	r1, r9
 8003e22:	00cb      	lsls	r3, r1, #3
 8003e24:	4641      	mov	r1, r8
 8003e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e2a:	4641      	mov	r1, r8
 8003e2c:	00ca      	lsls	r2, r1, #3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4619      	mov	r1, r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	4622      	mov	r2, r4
 8003e36:	189b      	adds	r3, r3, r2
 8003e38:	633b      	str	r3, [r7, #48]	; 0x30
 8003e3a:	462b      	mov	r3, r5
 8003e3c:	460a      	mov	r2, r1
 8003e3e:	eb42 0303 	adc.w	r3, r2, r3
 8003e42:	637b      	str	r3, [r7, #52]	; 0x34
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e50:	4629      	mov	r1, r5
 8003e52:	024b      	lsls	r3, r1, #9
 8003e54:	4621      	mov	r1, r4
 8003e56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	024a      	lsls	r2, r1, #9
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003e74:	f7fc feb8 	bl	8000be8 <__aeabi_uldivmod>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e82:	e067      	b.n	8003f54 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e84:	4b75      	ldr	r3, [pc, #468]	; (800405c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	099b      	lsrs	r3, r3, #6
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e90:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ea2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	462b      	mov	r3, r5
 8003eaa:	f04f 0000 	mov.w	r0, #0
 8003eae:	f04f 0100 	mov.w	r1, #0
 8003eb2:	0159      	lsls	r1, r3, #5
 8003eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb8:	0150      	lsls	r0, r2, #5
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	1a51      	subs	r1, r2, r1
 8003ec2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ed8:	4649      	mov	r1, r9
 8003eda:	018b      	lsls	r3, r1, #6
 8003edc:	4641      	mov	r1, r8
 8003ede:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ee2:	4641      	mov	r1, r8
 8003ee4:	018a      	lsls	r2, r1, #6
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eec:	4649      	mov	r1, r9
 8003eee:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003efe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f06:	4692      	mov	sl, r2
 8003f08:	469b      	mov	fp, r3
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	eb1a 0303 	adds.w	r3, sl, r3
 8003f10:	623b      	str	r3, [r7, #32]
 8003f12:	462b      	mov	r3, r5
 8003f14:	eb4b 0303 	adc.w	r3, fp, r3
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f26:	4629      	mov	r1, r5
 8003f28:	028b      	lsls	r3, r1, #10
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f30:	4621      	mov	r1, r4
 8003f32:	028a      	lsls	r2, r1, #10
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f40:	677a      	str	r2, [r7, #116]	; 0x74
 8003f42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f46:	f7fc fe4f 	bl	8000be8 <__aeabi_uldivmod>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4613      	mov	r3, r2
 8003f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f54:	4b41      	ldr	r3, [pc, #260]	; (800405c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	3301      	adds	r3, #1
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f76:	e0eb      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f78:	4b38      	ldr	r3, [pc, #224]	; (800405c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f84:	4b35      	ldr	r3, [pc, #212]	; (800405c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d06b      	beq.n	8004068 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f90:	4b32      	ldr	r3, [pc, #200]	; (800405c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	099b      	lsrs	r3, r3, #6
 8003f96:	2200      	movs	r2, #0
 8003f98:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	667b      	str	r3, [r7, #100]	; 0x64
 8003fa8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003fac:	4622      	mov	r2, r4
 8003fae:	462b      	mov	r3, r5
 8003fb0:	f04f 0000 	mov.w	r0, #0
 8003fb4:	f04f 0100 	mov.w	r1, #0
 8003fb8:	0159      	lsls	r1, r3, #5
 8003fba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fbe:	0150      	lsls	r0, r2, #5
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	1a51      	subs	r1, r2, r1
 8003fc8:	61b9      	str	r1, [r7, #24]
 8003fca:	4629      	mov	r1, r5
 8003fcc:	eb63 0301 	sbc.w	r3, r3, r1
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fde:	4659      	mov	r1, fp
 8003fe0:	018b      	lsls	r3, r1, #6
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fe8:	4651      	mov	r1, sl
 8003fea:	018a      	lsls	r2, r1, #6
 8003fec:	4651      	mov	r1, sl
 8003fee:	ebb2 0801 	subs.w	r8, r2, r1
 8003ff2:	4659      	mov	r1, fp
 8003ff4:	eb63 0901 	sbc.w	r9, r3, r1
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004004:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004008:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800400c:	4690      	mov	r8, r2
 800400e:	4699      	mov	r9, r3
 8004010:	4623      	mov	r3, r4
 8004012:	eb18 0303 	adds.w	r3, r8, r3
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	462b      	mov	r3, r5
 800401a:	eb49 0303 	adc.w	r3, r9, r3
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800402c:	4629      	mov	r1, r5
 800402e:	024b      	lsls	r3, r1, #9
 8004030:	4621      	mov	r1, r4
 8004032:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004036:	4621      	mov	r1, r4
 8004038:	024a      	lsls	r2, r1, #9
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004042:	2200      	movs	r2, #0
 8004044:	65bb      	str	r3, [r7, #88]	; 0x58
 8004046:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004048:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800404c:	f7fc fdcc 	bl	8000be8 <__aeabi_uldivmod>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4613      	mov	r3, r2
 8004056:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800405a:	e065      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x420>
 800405c:	40023800 	.word	0x40023800
 8004060:	00f42400 	.word	0x00f42400
 8004064:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004068:	4b3d      	ldr	r3, [pc, #244]	; (8004160 <HAL_RCC_GetSysClockFreq+0x458>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	099b      	lsrs	r3, r3, #6
 800406e:	2200      	movs	r2, #0
 8004070:	4618      	mov	r0, r3
 8004072:	4611      	mov	r1, r2
 8004074:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004078:	653b      	str	r3, [r7, #80]	; 0x50
 800407a:	2300      	movs	r3, #0
 800407c:	657b      	str	r3, [r7, #84]	; 0x54
 800407e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004082:	4642      	mov	r2, r8
 8004084:	464b      	mov	r3, r9
 8004086:	f04f 0000 	mov.w	r0, #0
 800408a:	f04f 0100 	mov.w	r1, #0
 800408e:	0159      	lsls	r1, r3, #5
 8004090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004094:	0150      	lsls	r0, r2, #5
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4641      	mov	r1, r8
 800409c:	1a51      	subs	r1, r2, r1
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	4649      	mov	r1, r9
 80040a2:	eb63 0301 	sbc.w	r3, r3, r1
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040b4:	4659      	mov	r1, fp
 80040b6:	018b      	lsls	r3, r1, #6
 80040b8:	4651      	mov	r1, sl
 80040ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040be:	4651      	mov	r1, sl
 80040c0:	018a      	lsls	r2, r1, #6
 80040c2:	4651      	mov	r1, sl
 80040c4:	1a54      	subs	r4, r2, r1
 80040c6:	4659      	mov	r1, fp
 80040c8:	eb63 0501 	sbc.w	r5, r3, r1
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	00eb      	lsls	r3, r5, #3
 80040d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040da:	00e2      	lsls	r2, r4, #3
 80040dc:	4614      	mov	r4, r2
 80040de:	461d      	mov	r5, r3
 80040e0:	4643      	mov	r3, r8
 80040e2:	18e3      	adds	r3, r4, r3
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	464b      	mov	r3, r9
 80040e8:	eb45 0303 	adc.w	r3, r5, r3
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040fa:	4629      	mov	r1, r5
 80040fc:	028b      	lsls	r3, r1, #10
 80040fe:	4621      	mov	r1, r4
 8004100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004104:	4621      	mov	r1, r4
 8004106:	028a      	lsls	r2, r1, #10
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004110:	2200      	movs	r2, #0
 8004112:	64bb      	str	r3, [r7, #72]	; 0x48
 8004114:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004116:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800411a:	f7fc fd65 	bl	8000be8 <__aeabi_uldivmod>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4613      	mov	r3, r2
 8004124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004128:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <HAL_RCC_GetSysClockFreq+0x458>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	0f1b      	lsrs	r3, r3, #28
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800413a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800413e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004142:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004146:	e003      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_RCC_GetSysClockFreq+0x45c>)
 800414a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800414e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004150:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004154:	4618      	mov	r0, r3
 8004156:	37b8      	adds	r7, #184	; 0xb8
 8004158:	46bd      	mov	sp, r7
 800415a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800
 8004164:	00f42400 	.word	0x00f42400

08004168 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e28d      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8083 	beq.w	800428e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004188:	4b94      	ldr	r3, [pc, #592]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b04      	cmp	r3, #4
 8004192:	d019      	beq.n	80041c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004194:	4b91      	ldr	r3, [pc, #580]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800419c:	2b08      	cmp	r3, #8
 800419e:	d106      	bne.n	80041ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041a0:	4b8e      	ldr	r3, [pc, #568]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ac:	d00c      	beq.n	80041c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ae:	4b8b      	ldr	r3, [pc, #556]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041b6:	2b0c      	cmp	r3, #12
 80041b8:	d112      	bne.n	80041e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ba:	4b88      	ldr	r3, [pc, #544]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c6:	d10b      	bne.n	80041e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	4b84      	ldr	r3, [pc, #528]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d05b      	beq.n	800428c <HAL_RCC_OscConfig+0x124>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d157      	bne.n	800428c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e25a      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e8:	d106      	bne.n	80041f8 <HAL_RCC_OscConfig+0x90>
 80041ea:	4b7c      	ldr	r3, [pc, #496]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a7b      	ldr	r2, [pc, #492]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e01d      	b.n	8004234 <HAL_RCC_OscConfig+0xcc>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0xb4>
 8004202:	4b76      	ldr	r3, [pc, #472]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a75      	ldr	r2, [pc, #468]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 8004208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b73      	ldr	r3, [pc, #460]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a72      	ldr	r2, [pc, #456]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e00b      	b.n	8004234 <HAL_RCC_OscConfig+0xcc>
 800421c:	4b6f      	ldr	r3, [pc, #444]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a6e      	ldr	r2, [pc, #440]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 8004222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4b6c      	ldr	r3, [pc, #432]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a6b      	ldr	r2, [pc, #428]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 800422e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d013      	beq.n	8004264 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fd fc70 	bl	8001b20 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fd fc6c 	bl	8001b20 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e21f      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	4b61      	ldr	r3, [pc, #388]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0xdc>
 8004262:	e014      	b.n	800428e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fd fc5c 	bl	8001b20 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800426c:	f7fd fc58 	bl	8001b20 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e20b      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427e:	4b57      	ldr	r3, [pc, #348]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x104>
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d06f      	beq.n	800437a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800429a:	4b50      	ldr	r3, [pc, #320]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d017      	beq.n	80042d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042a6:	4b4d      	ldr	r3, [pc, #308]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d105      	bne.n	80042be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042b2:	4b4a      	ldr	r3, [pc, #296]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042be:	4b47      	ldr	r3, [pc, #284]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	d11c      	bne.n	8004304 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ca:	4b44      	ldr	r3, [pc, #272]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d116      	bne.n	8004304 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d6:	4b41      	ldr	r3, [pc, #260]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_RCC_OscConfig+0x186>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d001      	beq.n	80042ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e1d3      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ee:	4b3b      	ldr	r3, [pc, #236]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4937      	ldr	r1, [pc, #220]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004302:	e03a      	b.n	800437a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800430c:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <HAL_RCC_OscConfig+0x278>)
 800430e:	2201      	movs	r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fd fc05 	bl	8001b20 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431a:	f7fd fc01 	bl	8001b20 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e1b4      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432c:	4b2b      	ldr	r3, [pc, #172]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004338:	4b28      	ldr	r3, [pc, #160]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4925      	ldr	r1, [pc, #148]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
 800434c:	e015      	b.n	800437a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <HAL_RCC_OscConfig+0x278>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fd fbe4 	bl	8001b20 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800435c:	f7fd fbe0 	bl	8001b20 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e193      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436e:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d036      	beq.n	80043f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d016      	beq.n	80043bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <HAL_RCC_OscConfig+0x27c>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004394:	f7fd fbc4 	bl	8001b20 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439c:	f7fd fbc0 	bl	8001b20 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e173      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_OscConfig+0x274>)
 80043b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x234>
 80043ba:	e01b      	b.n	80043f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <HAL_RCC_OscConfig+0x27c>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c2:	f7fd fbad 	bl	8001b20 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c8:	e00e      	b.n	80043e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ca:	f7fd fba9 	bl	8001b20 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d907      	bls.n	80043e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e15c      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
 80043dc:	40023800 	.word	0x40023800
 80043e0:	42470000 	.word	0x42470000
 80043e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e8:	4b8a      	ldr	r3, [pc, #552]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 80043ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ea      	bne.n	80043ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 8097 	beq.w	8004530 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004402:	2300      	movs	r3, #0
 8004404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004406:	4b83      	ldr	r3, [pc, #524]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10f      	bne.n	8004432 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	4b7f      	ldr	r3, [pc, #508]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	4a7e      	ldr	r2, [pc, #504]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004420:	6413      	str	r3, [r2, #64]	; 0x40
 8004422:	4b7c      	ldr	r3, [pc, #496]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	60bb      	str	r3, [r7, #8]
 800442c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800442e:	2301      	movs	r3, #1
 8004430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004432:	4b79      	ldr	r3, [pc, #484]	; (8004618 <HAL_RCC_OscConfig+0x4b0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443a:	2b00      	cmp	r3, #0
 800443c:	d118      	bne.n	8004470 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800443e:	4b76      	ldr	r3, [pc, #472]	; (8004618 <HAL_RCC_OscConfig+0x4b0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a75      	ldr	r2, [pc, #468]	; (8004618 <HAL_RCC_OscConfig+0x4b0>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444a:	f7fd fb69 	bl	8001b20 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004452:	f7fd fb65 	bl	8001b20 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e118      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004464:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <HAL_RCC_OscConfig+0x4b0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d106      	bne.n	8004486 <HAL_RCC_OscConfig+0x31e>
 8004478:	4b66      	ldr	r3, [pc, #408]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	4a65      	ldr	r2, [pc, #404]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	6713      	str	r3, [r2, #112]	; 0x70
 8004484:	e01c      	b.n	80044c0 <HAL_RCC_OscConfig+0x358>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b05      	cmp	r3, #5
 800448c:	d10c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x340>
 800448e:	4b61      	ldr	r3, [pc, #388]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	4a60      	ldr	r2, [pc, #384]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 8004494:	f043 0304 	orr.w	r3, r3, #4
 8004498:	6713      	str	r3, [r2, #112]	; 0x70
 800449a:	4b5e      	ldr	r3, [pc, #376]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	4a5d      	ldr	r2, [pc, #372]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	6713      	str	r3, [r2, #112]	; 0x70
 80044a6:	e00b      	b.n	80044c0 <HAL_RCC_OscConfig+0x358>
 80044a8:	4b5a      	ldr	r3, [pc, #360]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	4a59      	ldr	r2, [pc, #356]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70
 80044b4:	4b57      	ldr	r3, [pc, #348]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4a56      	ldr	r2, [pc, #344]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 80044ba:	f023 0304 	bic.w	r3, r3, #4
 80044be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d015      	beq.n	80044f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c8:	f7fd fb2a 	bl	8001b20 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	e00a      	b.n	80044e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d0:	f7fd fb26 	bl	8001b20 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0d7      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e6:	4b4b      	ldr	r3, [pc, #300]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0ee      	beq.n	80044d0 <HAL_RCC_OscConfig+0x368>
 80044f2:	e014      	b.n	800451e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fd fb14 	bl	8001b20 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fa:	e00a      	b.n	8004512 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044fc:	f7fd fb10 	bl	8001b20 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f241 3288 	movw	r2, #5000	; 0x1388
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e0c1      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004512:	4b40      	ldr	r3, [pc, #256]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1ee      	bne.n	80044fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800451e:	7dfb      	ldrb	r3, [r7, #23]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d105      	bne.n	8004530 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004524:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	4a3a      	ldr	r2, [pc, #232]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 800452a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80ad 	beq.w	8004694 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800453a:	4b36      	ldr	r3, [pc, #216]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b08      	cmp	r3, #8
 8004544:	d060      	beq.n	8004608 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d145      	bne.n	80045da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454e:	4b33      	ldr	r3, [pc, #204]	; (800461c <HAL_RCC_OscConfig+0x4b4>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fd fae4 	bl	8001b20 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd fae0 	bl	8001b20 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e093      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456e:	4b29      	ldr	r3, [pc, #164]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	019b      	lsls	r3, r3, #6
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	3b01      	subs	r3, #1
 8004594:	041b      	lsls	r3, r3, #16
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a4:	071b      	lsls	r3, r3, #28
 80045a6:	491b      	ldr	r1, [pc, #108]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ac:	4b1b      	ldr	r3, [pc, #108]	; (800461c <HAL_RCC_OscConfig+0x4b4>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b2:	f7fd fab5 	bl	8001b20 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ba:	f7fd fab1 	bl	8001b20 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e064      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0f0      	beq.n	80045ba <HAL_RCC_OscConfig+0x452>
 80045d8:	e05c      	b.n	8004694 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045da:	4b10      	ldr	r3, [pc, #64]	; (800461c <HAL_RCC_OscConfig+0x4b4>)
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fd fa9e 	bl	8001b20 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e8:	f7fd fa9a 	bl	8001b20 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e04d      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_RCC_OscConfig+0x4ac>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x480>
 8004606:	e045      	b.n	8004694 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d107      	bne.n	8004620 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e040      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
 8004614:	40023800 	.word	0x40023800
 8004618:	40007000 	.word	0x40007000
 800461c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004620:	4b1f      	ldr	r3, [pc, #124]	; (80046a0 <HAL_RCC_OscConfig+0x538>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d030      	beq.n	8004690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004638:	429a      	cmp	r2, r3
 800463a:	d129      	bne.n	8004690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d122      	bne.n	8004690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004650:	4013      	ands	r3, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004656:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004658:	4293      	cmp	r3, r2
 800465a:	d119      	bne.n	8004690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	3b01      	subs	r3, #1
 800466a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d10f      	bne.n	8004690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d107      	bne.n	8004690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800

080046a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e07b      	b.n	80047ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d108      	bne.n	80046d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c6:	d009      	beq.n	80046dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	61da      	str	r2, [r3, #28]
 80046ce:	e005      	b.n	80046dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc ff84 	bl	8001604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004712:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004760:	ea42 0103 	orr.w	r1, r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	f003 0104 	and.w	r1, r3, #4
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	f003 0210 	and.w	r2, r3, #16
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69da      	ldr	r2, [r3, #28]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800479c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e041      	b.n	800484c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f839 	bl	8004854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f000 f9d7 	bl	8004ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	d001      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e04e      	b.n	800491e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a23      	ldr	r2, [pc, #140]	; (800492c <HAL_TIM_Base_Start_IT+0xc4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d022      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x80>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048aa:	d01d      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x80>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <HAL_TIM_Base_Start_IT+0xc8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d018      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x80>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1e      	ldr	r2, [pc, #120]	; (8004934 <HAL_TIM_Base_Start_IT+0xcc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d013      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x80>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1c      	ldr	r2, [pc, #112]	; (8004938 <HAL_TIM_Base_Start_IT+0xd0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00e      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x80>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1b      	ldr	r2, [pc, #108]	; (800493c <HAL_TIM_Base_Start_IT+0xd4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d009      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x80>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a19      	ldr	r2, [pc, #100]	; (8004940 <HAL_TIM_Base_Start_IT+0xd8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x80>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a18      	ldr	r2, [pc, #96]	; (8004944 <HAL_TIM_Base_Start_IT+0xdc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d111      	bne.n	800490c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b06      	cmp	r3, #6
 80048f8:	d010      	beq.n	800491c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490a:	e007      	b.n	800491c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40010400 	.word	0x40010400
 8004940:	40014000 	.word	0x40014000
 8004944:	40001800 	.word	0x40001800

08004948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d122      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b02      	cmp	r3, #2
 800496a:	d11b      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0202 	mvn.w	r2, #2
 8004974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f8ee 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8004990:	e005      	b.n	800499e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8e0 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f8f1 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d122      	bne.n	80049f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d11b      	bne.n	80049f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0204 	mvn.w	r2, #4
 80049c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f8c4 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 80049e4:	e005      	b.n	80049f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8b6 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f8c7 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d122      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d11b      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0208 	mvn.w	r2, #8
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2204      	movs	r2, #4
 8004a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f89a 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f88c 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f89d 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0210 	mvn.w	r2, #16
 8004a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2208      	movs	r2, #8
 8004a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f870 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f862 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f873 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d10e      	bne.n	8004acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d107      	bne.n	8004acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0201 	mvn.w	r2, #1
 8004ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc fc54 	bl	8001374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d10e      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae4:	2b80      	cmp	r3, #128	; 0x80
 8004ae6:	d107      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f902 	bl	8004cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d10e      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d107      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f838 	bl	8004b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d10e      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d107      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0220 	mvn.w	r2, #32
 8004b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8cc 	bl	8004ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a40      	ldr	r2, [pc, #256]	; (8004cbc <TIM_Base_SetConfig+0x114>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc6:	d00f      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a3d      	ldr	r2, [pc, #244]	; (8004cc0 <TIM_Base_SetConfig+0x118>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a3c      	ldr	r2, [pc, #240]	; (8004cc4 <TIM_Base_SetConfig+0x11c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d007      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a3b      	ldr	r2, [pc, #236]	; (8004cc8 <TIM_Base_SetConfig+0x120>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a3a      	ldr	r2, [pc, #232]	; (8004ccc <TIM_Base_SetConfig+0x124>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d108      	bne.n	8004bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a2f      	ldr	r2, [pc, #188]	; (8004cbc <TIM_Base_SetConfig+0x114>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d02b      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d027      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a2c      	ldr	r2, [pc, #176]	; (8004cc0 <TIM_Base_SetConfig+0x118>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d023      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a2b      	ldr	r2, [pc, #172]	; (8004cc4 <TIM_Base_SetConfig+0x11c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01f      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2a      	ldr	r2, [pc, #168]	; (8004cc8 <TIM_Base_SetConfig+0x120>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01b      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a29      	ldr	r2, [pc, #164]	; (8004ccc <TIM_Base_SetConfig+0x124>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d017      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a28      	ldr	r2, [pc, #160]	; (8004cd0 <TIM_Base_SetConfig+0x128>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a27      	ldr	r2, [pc, #156]	; (8004cd4 <TIM_Base_SetConfig+0x12c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00f      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a26      	ldr	r2, [pc, #152]	; (8004cd8 <TIM_Base_SetConfig+0x130>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00b      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <TIM_Base_SetConfig+0x134>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d007      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a24      	ldr	r2, [pc, #144]	; (8004ce0 <TIM_Base_SetConfig+0x138>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <TIM_Base_SetConfig+0x13c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d108      	bne.n	8004c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <TIM_Base_SetConfig+0x114>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0xf8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <TIM_Base_SetConfig+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d103      	bne.n	8004ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	615a      	str	r2, [r3, #20]
}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	40010400 	.word	0x40010400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800
 8004cdc:	40001800 	.word	0x40001800
 8004ce0:	40001c00 	.word	0x40001c00
 8004ce4:	40002000 	.word	0x40002000

08004ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e03f      	b.n	8004da2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fc fcac 	bl	8001694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2224      	movs	r2, #36	; 0x24
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f829 	bl	8004dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db0:	b0c0      	sub	sp, #256	; 0x100
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc8:	68d9      	ldr	r1, [r3, #12]
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	ea40 0301 	orr.w	r3, r0, r1
 8004dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e04:	f021 010c 	bic.w	r1, r1, #12
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e12:	430b      	orrs	r3, r1
 8004e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e26:	6999      	ldr	r1, [r3, #24]
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	ea40 0301 	orr.w	r3, r0, r1
 8004e32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4b8f      	ldr	r3, [pc, #572]	; (8005078 <UART_SetConfig+0x2cc>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d005      	beq.n	8004e4c <UART_SetConfig+0xa0>
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b8d      	ldr	r3, [pc, #564]	; (800507c <UART_SetConfig+0x2d0>)
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d104      	bne.n	8004e56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e4c:	f7fe ff16 	bl	8003c7c <HAL_RCC_GetPCLK2Freq>
 8004e50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e54:	e003      	b.n	8004e5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e56:	f7fe fefd 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8004e5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e68:	f040 810c 	bne.w	8005084 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e7e:	4622      	mov	r2, r4
 8004e80:	462b      	mov	r3, r5
 8004e82:	1891      	adds	r1, r2, r2
 8004e84:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e86:	415b      	adcs	r3, r3
 8004e88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e8e:	4621      	mov	r1, r4
 8004e90:	eb12 0801 	adds.w	r8, r2, r1
 8004e94:	4629      	mov	r1, r5
 8004e96:	eb43 0901 	adc.w	r9, r3, r1
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eae:	4690      	mov	r8, r2
 8004eb0:	4699      	mov	r9, r3
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	eb18 0303 	adds.w	r3, r8, r3
 8004eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ebc:	462b      	mov	r3, r5
 8004ebe:	eb49 0303 	adc.w	r3, r9, r3
 8004ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ed2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004eda:	460b      	mov	r3, r1
 8004edc:	18db      	adds	r3, r3, r3
 8004ede:	653b      	str	r3, [r7, #80]	; 0x50
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	eb42 0303 	adc.w	r3, r2, r3
 8004ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004eec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ef0:	f7fb fe7a 	bl	8000be8 <__aeabi_uldivmod>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4b61      	ldr	r3, [pc, #388]	; (8005080 <UART_SetConfig+0x2d4>)
 8004efa:	fba3 2302 	umull	r2, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	011c      	lsls	r4, r3, #4
 8004f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f14:	4642      	mov	r2, r8
 8004f16:	464b      	mov	r3, r9
 8004f18:	1891      	adds	r1, r2, r2
 8004f1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f1c:	415b      	adcs	r3, r3
 8004f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f24:	4641      	mov	r1, r8
 8004f26:	eb12 0a01 	adds.w	sl, r2, r1
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f44:	4692      	mov	sl, r2
 8004f46:	469b      	mov	fp, r3
 8004f48:	4643      	mov	r3, r8
 8004f4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f52:	464b      	mov	r3, r9
 8004f54:	eb4b 0303 	adc.w	r3, fp, r3
 8004f58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f70:	460b      	mov	r3, r1
 8004f72:	18db      	adds	r3, r3, r3
 8004f74:	643b      	str	r3, [r7, #64]	; 0x40
 8004f76:	4613      	mov	r3, r2
 8004f78:	eb42 0303 	adc.w	r3, r2, r3
 8004f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f86:	f7fb fe2f 	bl	8000be8 <__aeabi_uldivmod>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4b3b      	ldr	r3, [pc, #236]	; (8005080 <UART_SetConfig+0x2d4>)
 8004f92:	fba3 2301 	umull	r2, r3, r3, r1
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2264      	movs	r2, #100	; 0x64
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	1acb      	subs	r3, r1, r3
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fa6:	4b36      	ldr	r3, [pc, #216]	; (8005080 <UART_SetConfig+0x2d4>)
 8004fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fb4:	441c      	add	r4, r3
 8004fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	1891      	adds	r1, r2, r2
 8004fce:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fd0:	415b      	adcs	r3, r3
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fd8:	4641      	mov	r1, r8
 8004fda:	1851      	adds	r1, r2, r1
 8004fdc:	6339      	str	r1, [r7, #48]	; 0x30
 8004fde:	4649      	mov	r1, r9
 8004fe0:	414b      	adcs	r3, r1
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ff0:	4659      	mov	r1, fp
 8004ff2:	00cb      	lsls	r3, r1, #3
 8004ff4:	4651      	mov	r1, sl
 8004ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ffa:	4651      	mov	r1, sl
 8004ffc:	00ca      	lsls	r2, r1, #3
 8004ffe:	4610      	mov	r0, r2
 8005000:	4619      	mov	r1, r3
 8005002:	4603      	mov	r3, r0
 8005004:	4642      	mov	r2, r8
 8005006:	189b      	adds	r3, r3, r2
 8005008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800500c:	464b      	mov	r3, r9
 800500e:	460a      	mov	r2, r1
 8005010:	eb42 0303 	adc.w	r3, r2, r3
 8005014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005024:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800502c:	460b      	mov	r3, r1
 800502e:	18db      	adds	r3, r3, r3
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
 8005032:	4613      	mov	r3, r2
 8005034:	eb42 0303 	adc.w	r3, r2, r3
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800503a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800503e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005042:	f7fb fdd1 	bl	8000be8 <__aeabi_uldivmod>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <UART_SetConfig+0x2d4>)
 800504c:	fba3 1302 	umull	r1, r3, r3, r2
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	2164      	movs	r1, #100	; 0x64
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	3332      	adds	r3, #50	; 0x32
 800505e:	4a08      	ldr	r2, [pc, #32]	; (8005080 <UART_SetConfig+0x2d4>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	f003 0207 	and.w	r2, r3, #7
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4422      	add	r2, r4
 8005072:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005074:	e105      	b.n	8005282 <UART_SetConfig+0x4d6>
 8005076:	bf00      	nop
 8005078:	40011000 	.word	0x40011000
 800507c:	40011400 	.word	0x40011400
 8005080:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005088:	2200      	movs	r2, #0
 800508a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800508e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005092:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005096:	4642      	mov	r2, r8
 8005098:	464b      	mov	r3, r9
 800509a:	1891      	adds	r1, r2, r2
 800509c:	6239      	str	r1, [r7, #32]
 800509e:	415b      	adcs	r3, r3
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
 80050a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050a6:	4641      	mov	r1, r8
 80050a8:	1854      	adds	r4, r2, r1
 80050aa:	4649      	mov	r1, r9
 80050ac:	eb43 0501 	adc.w	r5, r3, r1
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	00eb      	lsls	r3, r5, #3
 80050ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050be:	00e2      	lsls	r2, r4, #3
 80050c0:	4614      	mov	r4, r2
 80050c2:	461d      	mov	r5, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	18e3      	adds	r3, r4, r3
 80050c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050cc:	464b      	mov	r3, r9
 80050ce:	eb45 0303 	adc.w	r3, r5, r3
 80050d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050f2:	4629      	mov	r1, r5
 80050f4:	008b      	lsls	r3, r1, #2
 80050f6:	4621      	mov	r1, r4
 80050f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050fc:	4621      	mov	r1, r4
 80050fe:	008a      	lsls	r2, r1, #2
 8005100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005104:	f7fb fd70 	bl	8000be8 <__aeabi_uldivmod>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4b60      	ldr	r3, [pc, #384]	; (8005290 <UART_SetConfig+0x4e4>)
 800510e:	fba3 2302 	umull	r2, r3, r3, r2
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	011c      	lsls	r4, r3, #4
 8005116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800511a:	2200      	movs	r2, #0
 800511c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005120:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005124:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005128:	4642      	mov	r2, r8
 800512a:	464b      	mov	r3, r9
 800512c:	1891      	adds	r1, r2, r2
 800512e:	61b9      	str	r1, [r7, #24]
 8005130:	415b      	adcs	r3, r3
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005138:	4641      	mov	r1, r8
 800513a:	1851      	adds	r1, r2, r1
 800513c:	6139      	str	r1, [r7, #16]
 800513e:	4649      	mov	r1, r9
 8005140:	414b      	adcs	r3, r1
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005150:	4659      	mov	r1, fp
 8005152:	00cb      	lsls	r3, r1, #3
 8005154:	4651      	mov	r1, sl
 8005156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800515a:	4651      	mov	r1, sl
 800515c:	00ca      	lsls	r2, r1, #3
 800515e:	4610      	mov	r0, r2
 8005160:	4619      	mov	r1, r3
 8005162:	4603      	mov	r3, r0
 8005164:	4642      	mov	r2, r8
 8005166:	189b      	adds	r3, r3, r2
 8005168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800516c:	464b      	mov	r3, r9
 800516e:	460a      	mov	r2, r1
 8005170:	eb42 0303 	adc.w	r3, r2, r3
 8005174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	67bb      	str	r3, [r7, #120]	; 0x78
 8005182:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005190:	4649      	mov	r1, r9
 8005192:	008b      	lsls	r3, r1, #2
 8005194:	4641      	mov	r1, r8
 8005196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800519a:	4641      	mov	r1, r8
 800519c:	008a      	lsls	r2, r1, #2
 800519e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051a2:	f7fb fd21 	bl	8000be8 <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4b39      	ldr	r3, [pc, #228]	; (8005290 <UART_SetConfig+0x4e4>)
 80051ac:	fba3 1302 	umull	r1, r3, r3, r2
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	2164      	movs	r1, #100	; 0x64
 80051b4:	fb01 f303 	mul.w	r3, r1, r3
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	3332      	adds	r3, #50	; 0x32
 80051be:	4a34      	ldr	r2, [pc, #208]	; (8005290 <UART_SetConfig+0x4e4>)
 80051c0:	fba2 2303 	umull	r2, r3, r2, r3
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ca:	441c      	add	r4, r3
 80051cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d0:	2200      	movs	r2, #0
 80051d2:	673b      	str	r3, [r7, #112]	; 0x70
 80051d4:	677a      	str	r2, [r7, #116]	; 0x74
 80051d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051da:	4642      	mov	r2, r8
 80051dc:	464b      	mov	r3, r9
 80051de:	1891      	adds	r1, r2, r2
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	415b      	adcs	r3, r3
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ea:	4641      	mov	r1, r8
 80051ec:	1851      	adds	r1, r2, r1
 80051ee:	6039      	str	r1, [r7, #0]
 80051f0:	4649      	mov	r1, r9
 80051f2:	414b      	adcs	r3, r1
 80051f4:	607b      	str	r3, [r7, #4]
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005202:	4659      	mov	r1, fp
 8005204:	00cb      	lsls	r3, r1, #3
 8005206:	4651      	mov	r1, sl
 8005208:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800520c:	4651      	mov	r1, sl
 800520e:	00ca      	lsls	r2, r1, #3
 8005210:	4610      	mov	r0, r2
 8005212:	4619      	mov	r1, r3
 8005214:	4603      	mov	r3, r0
 8005216:	4642      	mov	r2, r8
 8005218:	189b      	adds	r3, r3, r2
 800521a:	66bb      	str	r3, [r7, #104]	; 0x68
 800521c:	464b      	mov	r3, r9
 800521e:	460a      	mov	r2, r1
 8005220:	eb42 0303 	adc.w	r3, r2, r3
 8005224:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	663b      	str	r3, [r7, #96]	; 0x60
 8005230:	667a      	str	r2, [r7, #100]	; 0x64
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800523e:	4649      	mov	r1, r9
 8005240:	008b      	lsls	r3, r1, #2
 8005242:	4641      	mov	r1, r8
 8005244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005248:	4641      	mov	r1, r8
 800524a:	008a      	lsls	r2, r1, #2
 800524c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005250:	f7fb fcca 	bl	8000be8 <__aeabi_uldivmod>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <UART_SetConfig+0x4e4>)
 800525a:	fba3 1302 	umull	r1, r3, r3, r2
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	2164      	movs	r1, #100	; 0x64
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	3332      	adds	r3, #50	; 0x32
 800526c:	4a08      	ldr	r2, [pc, #32]	; (8005290 <UART_SetConfig+0x4e4>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	f003 020f 	and.w	r2, r3, #15
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4422      	add	r2, r4
 8005280:	609a      	str	r2, [r3, #8]
}
 8005282:	bf00      	nop
 8005284:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005288:	46bd      	mov	sp, r7
 800528a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800528e:	bf00      	nop
 8005290:	51eb851f 	.word	0x51eb851f

08005294 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	4613      	mov	r3, r2
 80052a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d165      	bne.n	8005374 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4a41      	ldr	r2, [pc, #260]	; (80053b0 <USB_SetTurnaroundTime+0x11c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d906      	bls.n	80052be <USB_SetTurnaroundTime+0x2a>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4a40      	ldr	r2, [pc, #256]	; (80053b4 <USB_SetTurnaroundTime+0x120>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d202      	bcs.n	80052be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052b8:	230f      	movs	r3, #15
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e062      	b.n	8005384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4a3c      	ldr	r2, [pc, #240]	; (80053b4 <USB_SetTurnaroundTime+0x120>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d306      	bcc.n	80052d4 <USB_SetTurnaroundTime+0x40>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4a3b      	ldr	r2, [pc, #236]	; (80053b8 <USB_SetTurnaroundTime+0x124>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d202      	bcs.n	80052d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052ce:	230e      	movs	r3, #14
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	e057      	b.n	8005384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4a38      	ldr	r2, [pc, #224]	; (80053b8 <USB_SetTurnaroundTime+0x124>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d306      	bcc.n	80052ea <USB_SetTurnaroundTime+0x56>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4a37      	ldr	r2, [pc, #220]	; (80053bc <USB_SetTurnaroundTime+0x128>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d202      	bcs.n	80052ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052e4:	230d      	movs	r3, #13
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	e04c      	b.n	8005384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4a33      	ldr	r2, [pc, #204]	; (80053bc <USB_SetTurnaroundTime+0x128>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d306      	bcc.n	8005300 <USB_SetTurnaroundTime+0x6c>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	4a32      	ldr	r2, [pc, #200]	; (80053c0 <USB_SetTurnaroundTime+0x12c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d802      	bhi.n	8005300 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052fa:	230c      	movs	r3, #12
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	e041      	b.n	8005384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4a2f      	ldr	r2, [pc, #188]	; (80053c0 <USB_SetTurnaroundTime+0x12c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d906      	bls.n	8005316 <USB_SetTurnaroundTime+0x82>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a2e      	ldr	r2, [pc, #184]	; (80053c4 <USB_SetTurnaroundTime+0x130>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d802      	bhi.n	8005316 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005310:	230b      	movs	r3, #11
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	e036      	b.n	8005384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4a2a      	ldr	r2, [pc, #168]	; (80053c4 <USB_SetTurnaroundTime+0x130>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d906      	bls.n	800532c <USB_SetTurnaroundTime+0x98>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4a29      	ldr	r2, [pc, #164]	; (80053c8 <USB_SetTurnaroundTime+0x134>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d802      	bhi.n	800532c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005326:	230a      	movs	r3, #10
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e02b      	b.n	8005384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a26      	ldr	r2, [pc, #152]	; (80053c8 <USB_SetTurnaroundTime+0x134>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d906      	bls.n	8005342 <USB_SetTurnaroundTime+0xae>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a25      	ldr	r2, [pc, #148]	; (80053cc <USB_SetTurnaroundTime+0x138>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d202      	bcs.n	8005342 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800533c:	2309      	movs	r3, #9
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	e020      	b.n	8005384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4a21      	ldr	r2, [pc, #132]	; (80053cc <USB_SetTurnaroundTime+0x138>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d306      	bcc.n	8005358 <USB_SetTurnaroundTime+0xc4>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4a20      	ldr	r2, [pc, #128]	; (80053d0 <USB_SetTurnaroundTime+0x13c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d802      	bhi.n	8005358 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005352:	2308      	movs	r3, #8
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e015      	b.n	8005384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <USB_SetTurnaroundTime+0x13c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d906      	bls.n	800536e <USB_SetTurnaroundTime+0xda>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <USB_SetTurnaroundTime+0x140>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d202      	bcs.n	800536e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005368:	2307      	movs	r3, #7
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e00a      	b.n	8005384 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800536e:	2306      	movs	r3, #6
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e007      	b.n	8005384 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800537a:	2309      	movs	r3, #9
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e001      	b.n	8005384 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005380:	2309      	movs	r3, #9
 8005382:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	029b      	lsls	r3, r3, #10
 8005398:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800539c:	431a      	orrs	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	00d8acbf 	.word	0x00d8acbf
 80053b4:	00e4e1c0 	.word	0x00e4e1c0
 80053b8:	00f42400 	.word	0x00f42400
 80053bc:	01067380 	.word	0x01067380
 80053c0:	011a499f 	.word	0x011a499f
 80053c4:	01312cff 	.word	0x01312cff
 80053c8:	014ca43f 	.word	0x014ca43f
 80053cc:	016e3600 	.word	0x016e3600
 80053d0:	01a6ab1f 	.word	0x01a6ab1f
 80053d4:	01e84800 	.word	0x01e84800

080053d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3301      	adds	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4a13      	ldr	r2, [pc, #76]	; (800543c <USB_FlushTxFifo+0x64>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e01b      	b.n	8005430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	daf2      	bge.n	80053e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	019b      	lsls	r3, r3, #6
 8005408:	f043 0220 	orr.w	r2, r3, #32
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3301      	adds	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4a08      	ldr	r2, [pc, #32]	; (800543c <USB_FlushTxFifo+0x64>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d901      	bls.n	8005422 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e006      	b.n	8005430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b20      	cmp	r3, #32
 800542c:	d0f0      	beq.n	8005410 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	00030d40 	.word	0x00030d40

08005440 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 0306 	and.w	r3, r3, #6
 8005458:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d102      	bne.n	8005466 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005460:	2300      	movs	r3, #0
 8005462:	75fb      	strb	r3, [r7, #23]
 8005464:	e00a      	b.n	800547c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d002      	beq.n	8005472 <USB_GetDevSpeed+0x32>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b06      	cmp	r3, #6
 8005470:	d102      	bne.n	8005478 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005472:	2302      	movs	r3, #2
 8005474:	75fb      	strb	r3, [r7, #23]
 8005476:	e001      	b.n	800547c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005478:	230f      	movs	r3, #15
 800547a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800547c:	7dfb      	ldrb	r3, [r7, #23]
}
 800547e:	4618      	mov	r0, r3
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d13a      	bne.n	800551c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	2101      	movs	r1, #1
 80054b8:	fa01 f303 	lsl.w	r3, r1, r3
 80054bc:	b29b      	uxth	r3, r3
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d155      	bne.n	800558a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	791b      	ldrb	r3, [r3, #4]
 80054f8:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054fa:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	059b      	lsls	r3, r3, #22
 8005500:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005502:	4313      	orrs	r3, r2
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	440a      	add	r2, r1
 800550c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	e036      	b.n	800558a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	2101      	movs	r1, #1
 800552e:	fa01 f303 	lsl.w	r3, r1, r3
 8005532:	041b      	lsls	r3, r3, #16
 8005534:	68f9      	ldr	r1, [r7, #12]
 8005536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800553a:	4313      	orrs	r3, r2
 800553c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d11a      	bne.n	800558a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	791b      	ldrb	r3, [r3, #4]
 800556e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005570:	430b      	orrs	r3, r1
 8005572:	4313      	orrs	r3, r2
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005588:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	785b      	ldrb	r3, [r3, #1]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	f040 815c 	bne.w	8005872 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d132      	bne.n	8005628 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005604:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	440a      	add	r2, r1
 800561c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005620:	0cdb      	lsrs	r3, r3, #19
 8005622:	04db      	lsls	r3, r3, #19
 8005624:	6113      	str	r3, [r2, #16]
 8005626:	e074      	b.n	8005712 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	440a      	add	r2, r1
 800563e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005642:	0cdb      	lsrs	r3, r3, #19
 8005644:	04db      	lsls	r3, r3, #19
 8005646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005662:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005666:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800566a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005678:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	6999      	ldr	r1, [r3, #24]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	440b      	add	r3, r1
 8005684:	1e59      	subs	r1, r3, #1
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	fbb1 f3f3 	udiv	r3, r1, r3
 800568e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005690:	4b9d      	ldr	r3, [pc, #628]	; (8005908 <USB_EPStartXfer+0x370>)
 8005692:	400b      	ands	r3, r1
 8005694:	69b9      	ldr	r1, [r7, #24]
 8005696:	0148      	lsls	r0, r1, #5
 8005698:	69f9      	ldr	r1, [r7, #28]
 800569a:	4401      	add	r1, r0
 800569c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056a0:	4313      	orrs	r3, r2
 80056a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ba:	69b9      	ldr	r1, [r7, #24]
 80056bc:	0148      	lsls	r0, r1, #5
 80056be:	69f9      	ldr	r1, [r7, #28]
 80056c0:	4401      	add	r1, r0
 80056c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056c6:	4313      	orrs	r3, r2
 80056c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	791b      	ldrb	r3, [r3, #4]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d11f      	bne.n	8005712 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80056f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005710:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d14b      	bne.n	80057b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572c:	461a      	mov	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	791b      	ldrb	r3, [r3, #4]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d128      	bne.n	800578e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d110      	bne.n	800576e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	0151      	lsls	r1, r2, #5
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	440a      	add	r2, r1
 8005762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005766:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	e00f      	b.n	800578e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	0151      	lsls	r1, r2, #5
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	440a      	add	r2, r1
 8005784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	e133      	b.n	8005a18 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	791b      	ldrb	r3, [r3, #4]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d015      	beq.n	8005804 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 811b 	beq.w	8005a18 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	2101      	movs	r1, #1
 80057f4:	fa01 f303 	lsl.w	r3, r1, r3
 80057f8:	69f9      	ldr	r1, [r7, #28]
 80057fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057fe:	4313      	orrs	r3, r2
 8005800:	634b      	str	r3, [r1, #52]	; 0x34
 8005802:	e109      	b.n	8005a18 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d110      	bne.n	8005836 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	0151      	lsls	r1, r2, #5
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	440a      	add	r2, r1
 800582a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	e00f      	b.n	8005856 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005854:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	6919      	ldr	r1, [r3, #16]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	781a      	ldrb	r2, [r3, #0]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	b298      	uxth	r0, r3
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	4603      	mov	r3, r0
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 fade 	bl	8005e2c <USB_WritePacket>
 8005870:	e0d2      	b.n	8005a18 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588c:	0cdb      	lsrs	r3, r3, #19
 800588e:	04db      	lsls	r3, r3, #19
 8005890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d126      	bne.n	800590c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	0148      	lsls	r0, r1, #5
 80058d8:	69f9      	ldr	r1, [r7, #28]
 80058da:	4401      	add	r1, r0
 80058dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058e0:	4313      	orrs	r3, r2
 80058e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005902:	6113      	str	r3, [r2, #16]
 8005904:	e03a      	b.n	800597c <USB_EPStartXfer+0x3e4>
 8005906:	bf00      	nop
 8005908:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	699a      	ldr	r2, [r3, #24]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4413      	add	r3, r2
 8005916:	1e5a      	subs	r2, r3, #1
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005920:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	8afa      	ldrh	r2, [r7, #22]
 8005928:	fb03 f202 	mul.w	r2, r3, r2
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	8afb      	ldrh	r3, [r7, #22]
 8005940:	04d9      	lsls	r1, r3, #19
 8005942:	4b38      	ldr	r3, [pc, #224]	; (8005a24 <USB_EPStartXfer+0x48c>)
 8005944:	400b      	ands	r3, r1
 8005946:	69b9      	ldr	r1, [r7, #24]
 8005948:	0148      	lsls	r0, r1, #5
 800594a:	69f9      	ldr	r1, [r7, #28]
 800594c:	4401      	add	r1, r0
 800594e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005952:	4313      	orrs	r3, r2
 8005954:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800596c:	69b9      	ldr	r1, [r7, #24]
 800596e:	0148      	lsls	r0, r1, #5
 8005970:	69f9      	ldr	r1, [r7, #28]
 8005972:	4401      	add	r1, r0
 8005974:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005978:	4313      	orrs	r3, r2
 800597a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d10d      	bne.n	800599e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	6919      	ldr	r1, [r3, #16]
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599a:	460a      	mov	r2, r1
 800599c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	791b      	ldrb	r3, [r3, #4]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d128      	bne.n	80059f8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d110      	bne.n	80059d8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	69fa      	ldr	r2, [r7, #28]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	e00f      	b.n	80059f8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3720      	adds	r7, #32
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	1ff80000 	.word	0x1ff80000

08005a28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	4613      	mov	r3, r2
 8005a34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	f040 80ce 	bne.w	8005be6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d132      	bne.n	8005ab8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	0151      	lsls	r1, r2, #5
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	440a      	add	r2, r1
 8005aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab0:	0cdb      	lsrs	r3, r3, #19
 8005ab2:	04db      	lsls	r3, r3, #19
 8005ab4:	6113      	str	r3, [r2, #16]
 8005ab6:	e04e      	b.n	8005b56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad2:	0cdb      	lsrs	r3, r3, #19
 8005ad4:	04db      	lsls	r3, r3, #19
 8005ad6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005af6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005afa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d903      	bls.n	8005b10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	691a      	ldr	r2, [r3, #16]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b46:	6939      	ldr	r1, [r7, #16]
 8005b48:	0148      	lsls	r0, r1, #5
 8005b4a:	6979      	ldr	r1, [r7, #20]
 8005b4c:	4401      	add	r1, r0
 8005b4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b52:	4313      	orrs	r3, r2
 8005b54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d11e      	bne.n	8005b9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d009      	beq.n	8005b78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	461a      	mov	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	e097      	b.n	8005cca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8083 	beq.w	8005cca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f003 030f 	and.w	r3, r3, #15
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005be0:	4313      	orrs	r3, r2
 8005be2:	634b      	str	r3, [r1, #52]	; 0x34
 8005be4:	e071      	b.n	8005cca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c00:	0cdb      	lsrs	r3, r3, #19
 8005c02:	04db      	lsls	r3, r3, #19
 8005c04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c78:	6939      	ldr	r1, [r7, #16]
 8005c7a:	0148      	lsls	r0, r1, #5
 8005c7c:	6979      	ldr	r1, [r7, #20]
 8005c7e:	4401      	add	r1, r0
 8005c80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c84:	4313      	orrs	r3, r2
 8005c86:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d10d      	bne.n	8005caa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	6919      	ldr	r1, [r3, #16]
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	460a      	mov	r2, r1
 8005ca8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	0151      	lsls	r1, r2, #5
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	440a      	add	r2, r1
 8005cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d14a      	bne.n	8005d8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d0e:	f040 8086 	bne.w	8005e1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	7812      	ldrb	r2, [r2, #0]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	7812      	ldrb	r2, [r2, #0]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d902      	bls.n	8005d70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d6e:	e056      	b.n	8005e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d88:	d0e7      	beq.n	8005d5a <USB_EPStopXfer+0x82>
 8005d8a:	e048      	b.n	8005e1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da4:	d13b      	bne.n	8005e1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	7812      	ldrb	r2, [r2, #0]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dc8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	7812      	ldrb	r2, [r2, #0]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3301      	adds	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d902      	bls.n	8005e04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
          break;
 8005e02:	e00c      	b.n	8005e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e1c:	d0e7      	beq.n	8005dee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b089      	sub	sp, #36	; 0x24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	4611      	mov	r1, r2
 8005e38:	461a      	mov	r2, r3
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	71fb      	strb	r3, [r7, #7]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d123      	bne.n	8005e9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e52:	88bb      	ldrh	r3, [r7, #4]
 8005e54:	3303      	adds	r3, #3
 8005e56:	089b      	lsrs	r3, r3, #2
 8005e58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61bb      	str	r3, [r7, #24]
 8005e5e:	e018      	b.n	8005e92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	031a      	lsls	r2, r3, #12
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	3301      	adds	r3, #1
 8005e78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	3301      	adds	r3, #1
 8005e84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d3e2      	bcc.n	8005e60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3724      	adds	r7, #36	; 0x24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b08b      	sub	sp, #44	; 0x2c
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	089b      	lsrs	r3, r3, #2
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	623b      	str	r3, [r7, #32]
 8005ed2:	e014      	b.n	8005efe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	3301      	adds	r3, #1
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	3301      	adds	r3, #1
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	3301      	adds	r3, #1
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	6a3a      	ldr	r2, [r7, #32]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d3e6      	bcc.n	8005ed4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f06:	8bfb      	ldrh	r3, [r7, #30]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01e      	beq.n	8005f4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f16:	461a      	mov	r2, r3
 8005f18:	f107 0310 	add.w	r3, r7, #16
 8005f1c:	6812      	ldr	r2, [r2, #0]
 8005f1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	701a      	strb	r2, [r3, #0]
      i++;
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	3301      	adds	r3, #1
 8005f36:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f3e:	8bfb      	ldrh	r3, [r7, #30]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f44:	8bfb      	ldrh	r3, [r7, #30]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1ea      	bne.n	8005f20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	372c      	adds	r7, #44	; 0x2c
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d12c      	bne.n	8005fce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	db12      	blt.n	8005fac <USB_EPSetStall+0x54>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00f      	beq.n	8005fac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005faa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	e02b      	b.n	8006026 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	db12      	blt.n	8006006 <USB_EPSetStall+0xae>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00f      	beq.n	8006006 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006000:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006004:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006024:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d128      	bne.n	80060a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800606e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	791b      	ldrb	r3, [r3, #4]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d003      	beq.n	8006080 <USB_EPClearStall+0x4c>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	791b      	ldrb	r3, [r3, #4]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d138      	bne.n	80060f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	e027      	b.n	80060f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	791b      	ldrb	r3, [r3, #4]
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d003      	beq.n	80060d2 <USB_EPClearStall+0x9e>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	791b      	ldrb	r3, [r3, #4]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d10f      	bne.n	80060f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800611e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006122:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006134:	68f9      	ldr	r1, [r7, #12]
 8006136:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800613a:	4313      	orrs	r3, r2
 800613c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4013      	ands	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006164:	68fb      	ldr	r3, [r7, #12]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006172:	b480      	push	{r7}
 8006174:	b085      	sub	sp, #20
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	4013      	ands	r3, r2
 8006194:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	0c1b      	lsrs	r3, r3, #16
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b085      	sub	sp, #20
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	4013      	ands	r3, r2
 80061c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	b29b      	uxth	r3, r3
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	4013      	ands	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006208:	68bb      	ldr	r3, [r7, #8]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006216:	b480      	push	{r7}
 8006218:	b087      	sub	sp, #28
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	460b      	mov	r3, r1
 8006220:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006238:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800623a:	78fb      	ldrb	r3, [r7, #3]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	fa22 f303 	lsr.w	r3, r2, r3
 8006246:	01db      	lsls	r3, r3, #7
 8006248:	b2db      	uxtb	r3, r3
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4013      	ands	r3, r2
 8006262:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006264:	68bb      	ldr	r3, [r7, #8]
}
 8006266:	4618      	mov	r0, r3
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f003 0301 	and.w	r3, r3, #1
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062ac:	f023 0307 	bic.w	r3, r3, #7
 80062b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	460b      	mov	r3, r1
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	333c      	adds	r3, #60	; 0x3c
 80062ea:	3304      	adds	r3, #4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4a26      	ldr	r2, [pc, #152]	; (800638c <USB_EP0_OutStart+0xb8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d90a      	bls.n	800630e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006308:	d101      	bne.n	800630e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	e037      	b.n	800637e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	461a      	mov	r2, r3
 8006316:	2300      	movs	r3, #0
 8006318:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006328:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800632c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800633c:	f043 0318 	orr.w	r3, r3, #24
 8006340:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006350:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006354:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006356:	7afb      	ldrb	r3, [r7, #11]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d10f      	bne.n	800637c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006362:	461a      	mov	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006376:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800637a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	4f54300a 	.word	0x4f54300a

08006390 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006398:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	460b      	mov	r3, r1
 80063b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	4611      	mov	r1, r2
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
 80063d0:	4603      	mov	r3, r0
 80063d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	460b      	mov	r3, r1
 80063e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	4611      	mov	r1, r2
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006404:	2303      	movs	r3, #3
 8006406:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006422:	6839      	ldr	r1, [r7, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	f001 f8dc 	bl	80075e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006438:	461a      	mov	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	2b02      	cmp	r3, #2
 800644c:	d01a      	beq.n	8006484 <USBD_LL_SetupStage+0x72>
 800644e:	2b02      	cmp	r3, #2
 8006450:	d822      	bhi.n	8006498 <USBD_LL_SetupStage+0x86>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <USBD_LL_SetupStage+0x4a>
 8006456:	2b01      	cmp	r3, #1
 8006458:	d00a      	beq.n	8006470 <USBD_LL_SetupStage+0x5e>
 800645a:	e01d      	b.n	8006498 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fb09 	bl	8006a7c <USBD_StdDevReq>
 800646a:	4603      	mov	r3, r0
 800646c:	73fb      	strb	r3, [r7, #15]
      break;
 800646e:	e020      	b.n	80064b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fb71 	bl	8006b60 <USBD_StdItfReq>
 800647e:	4603      	mov	r3, r0
 8006480:	73fb      	strb	r3, [r7, #15]
      break;
 8006482:	e016      	b.n	80064b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fbd3 	bl	8006c38 <USBD_StdEPReq>
 8006492:	4603      	mov	r3, r0
 8006494:	73fb      	strb	r3, [r7, #15]
      break;
 8006496:	e00c      	b.n	80064b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800649e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f003 fdca 	bl	800a040 <USBD_LL_StallEP>
 80064ac:	4603      	mov	r3, r0
 80064ae:	73fb      	strb	r3, [r7, #15]
      break;
 80064b0:	bf00      	nop
  }

  return ret;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	460b      	mov	r3, r1
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80064ce:	7afb      	ldrb	r3, [r7, #11]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d16e      	bne.n	80065b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	f040 8098 	bne.w	8006618 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d913      	bls.n	800651c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	1ad2      	subs	r2, r2, r3
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	4293      	cmp	r3, r2
 800650c:	bf28      	it	cs
 800650e:	4613      	movcs	r3, r2
 8006510:	461a      	mov	r2, r3
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f001 f8db 	bl	80076d0 <USBD_CtlContinueRx>
 800651a:	e07d      	b.n	8006618 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	2b02      	cmp	r3, #2
 8006528:	d014      	beq.n	8006554 <USBD_LL_DataOutStage+0x98>
 800652a:	2b02      	cmp	r3, #2
 800652c:	d81d      	bhi.n	800656a <USBD_LL_DataOutStage+0xae>
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <USBD_LL_DataOutStage+0x7c>
 8006532:	2b01      	cmp	r3, #1
 8006534:	d003      	beq.n	800653e <USBD_LL_DataOutStage+0x82>
 8006536:	e018      	b.n	800656a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	75bb      	strb	r3, [r7, #22]
            break;
 800653c:	e018      	b.n	8006570 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006544:	b2db      	uxtb	r3, r3
 8006546:	4619      	mov	r1, r3
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fa5e 	bl	8006a0a <USBD_CoreFindIF>
 800654e:	4603      	mov	r3, r0
 8006550:	75bb      	strb	r3, [r7, #22]
            break;
 8006552:	e00d      	b.n	8006570 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800655a:	b2db      	uxtb	r3, r3
 800655c:	4619      	mov	r1, r3
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 fa60 	bl	8006a24 <USBD_CoreFindEP>
 8006564:	4603      	mov	r3, r0
 8006566:	75bb      	strb	r3, [r7, #22]
            break;
 8006568:	e002      	b.n	8006570 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	75bb      	strb	r3, [r7, #22]
            break;
 800656e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006570:	7dbb      	ldrb	r3, [r7, #22]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d119      	bne.n	80065aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b03      	cmp	r3, #3
 8006580:	d113      	bne.n	80065aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006582:	7dba      	ldrb	r2, [r7, #22]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	32ae      	adds	r2, #174	; 0xae
 8006588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00b      	beq.n	80065aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006592:	7dba      	ldrb	r2, [r7, #22]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800659a:	7dba      	ldrb	r2, [r7, #22]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	32ae      	adds	r2, #174	; 0xae
 80065a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f001 f8a1 	bl	80076f2 <USBD_CtlSendStatus>
 80065b0:	e032      	b.n	8006618 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80065b2:	7afb      	ldrb	r3, [r7, #11]
 80065b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	4619      	mov	r1, r3
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fa31 	bl	8006a24 <USBD_CoreFindEP>
 80065c2:	4603      	mov	r3, r0
 80065c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065c6:	7dbb      	ldrb	r3, [r7, #22]
 80065c8:	2bff      	cmp	r3, #255	; 0xff
 80065ca:	d025      	beq.n	8006618 <USBD_LL_DataOutStage+0x15c>
 80065cc:	7dbb      	ldrb	r3, [r7, #22]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d122      	bne.n	8006618 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d117      	bne.n	800660e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065de:	7dba      	ldrb	r2, [r7, #22]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	32ae      	adds	r2, #174	; 0xae
 80065e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00f      	beq.n	800660e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80065ee:	7dba      	ldrb	r2, [r7, #22]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80065f6:	7dba      	ldrb	r2, [r7, #22]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	32ae      	adds	r2, #174	; 0xae
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	7afa      	ldrb	r2, [r7, #11]
 8006604:	4611      	mov	r1, r2
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	4798      	blx	r3
 800660a:	4603      	mov	r3, r0
 800660c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	e000      	b.n	800661a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b086      	sub	sp, #24
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	460b      	mov	r3, r1
 800662c:	607a      	str	r2, [r7, #4]
 800662e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006630:	7afb      	ldrb	r3, [r7, #11]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d16f      	bne.n	8006716 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3314      	adds	r3, #20
 800663a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006642:	2b02      	cmp	r3, #2
 8006644:	d15a      	bne.n	80066fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	429a      	cmp	r2, r3
 8006650:	d914      	bls.n	800667c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	1ad2      	subs	r2, r2, r3
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	461a      	mov	r2, r3
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f001 f820 	bl	80076ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800666e:	2300      	movs	r3, #0
 8006670:	2200      	movs	r2, #0
 8006672:	2100      	movs	r1, #0
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f003 fd8d 	bl	800a194 <USBD_LL_PrepareReceive>
 800667a:	e03f      	b.n	80066fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	429a      	cmp	r2, r3
 8006686:	d11c      	bne.n	80066c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006690:	429a      	cmp	r2, r3
 8006692:	d316      	bcc.n	80066c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800669e:	429a      	cmp	r2, r3
 80066a0:	d20f      	bcs.n	80066c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066a2:	2200      	movs	r2, #0
 80066a4:	2100      	movs	r1, #0
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f001 f801 	bl	80076ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066b4:	2300      	movs	r3, #0
 80066b6:	2200      	movs	r2, #0
 80066b8:	2100      	movs	r1, #0
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f003 fd6a 	bl	800a194 <USBD_LL_PrepareReceive>
 80066c0:	e01c      	b.n	80066fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d10f      	bne.n	80066ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066ee:	2180      	movs	r1, #128	; 0x80
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f003 fca5 	bl	800a040 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f001 f80e 	bl	8007718 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d03a      	beq.n	800677c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7ff fe42 	bl	8006390 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006714:	e032      	b.n	800677c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006716:	7afb      	ldrb	r3, [r7, #11]
 8006718:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800671c:	b2db      	uxtb	r3, r3
 800671e:	4619      	mov	r1, r3
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f97f 	bl	8006a24 <USBD_CoreFindEP>
 8006726:	4603      	mov	r3, r0
 8006728:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	2bff      	cmp	r3, #255	; 0xff
 800672e:	d025      	beq.n	800677c <USBD_LL_DataInStage+0x15a>
 8006730:	7dfb      	ldrb	r3, [r7, #23]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d122      	bne.n	800677c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b03      	cmp	r3, #3
 8006740:	d11c      	bne.n	800677c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006742:	7dfa      	ldrb	r2, [r7, #23]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	32ae      	adds	r2, #174	; 0xae
 8006748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d014      	beq.n	800677c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006752:	7dfa      	ldrb	r2, [r7, #23]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800675a:	7dfa      	ldrb	r2, [r7, #23]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	32ae      	adds	r2, #174	; 0xae
 8006760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	7afa      	ldrb	r2, [r7, #11]
 8006768:	4611      	mov	r1, r2
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	4798      	blx	r3
 800676e:	4603      	mov	r3, r0
 8006770:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006772:	7dbb      	ldrb	r3, [r7, #22]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006778:	7dbb      	ldrb	r3, [r7, #22]
 800677a:	e000      	b.n	800677e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d014      	beq.n	80067ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00e      	beq.n	80067ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6852      	ldr	r2, [r2, #4]
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	4611      	mov	r1, r2
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80067e8:	2303      	movs	r3, #3
 80067ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067ec:	2340      	movs	r3, #64	; 0x40
 80067ee:	2200      	movs	r2, #0
 80067f0:	2100      	movs	r1, #0
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f003 fbfe 	bl	8009ff4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2240      	movs	r2, #64	; 0x40
 8006804:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006808:	2340      	movs	r3, #64	; 0x40
 800680a:	2200      	movs	r2, #0
 800680c:	2180      	movs	r1, #128	; 0x80
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f003 fbf0 	bl	8009ff4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2240      	movs	r2, #64	; 0x40
 800681e:	621a      	str	r2, [r3, #32]

  return ret;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	460b      	mov	r3, r1
 8006834:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	78fa      	ldrb	r2, [r7, #3]
 800683a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006858:	b2da      	uxtb	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2204      	movs	r2, #4
 8006864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b04      	cmp	r3, #4
 8006888:	d106      	bne.n	8006898 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006890:	b2da      	uxtb	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d110      	bne.n	80068dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	460b      	mov	r3, r1
 80068f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	32ae      	adds	r2, #174	; 0xae
 80068fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006904:	2303      	movs	r3, #3
 8006906:	e01c      	b.n	8006942 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b03      	cmp	r3, #3
 8006912:	d115      	bne.n	8006940 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	32ae      	adds	r2, #174	; 0xae
 800691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00b      	beq.n	8006940 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	32ae      	adds	r2, #174	; 0xae
 8006932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	78fa      	ldrb	r2, [r7, #3]
 800693a:	4611      	mov	r1, r2
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	32ae      	adds	r2, #174	; 0xae
 8006960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006968:	2303      	movs	r3, #3
 800696a:	e01c      	b.n	80069a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b03      	cmp	r3, #3
 8006976:	d115      	bne.n	80069a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	32ae      	adds	r2, #174	; 0xae
 8006982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	32ae      	adds	r2, #174	; 0xae
 8006996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	4611      	mov	r1, r2
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00e      	beq.n	8006a00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6852      	ldr	r2, [r2, #4]
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	4611      	mov	r1, r2
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	4798      	blx	r3
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069fc:	2303      	movs	r3, #3
 80069fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	460b      	mov	r3, r1
 8006a14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b087      	sub	sp, #28
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	3301      	adds	r3, #1
 8006a54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a5c:	8a3b      	ldrh	r3, [r7, #16]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	b21a      	sxth	r2, r3
 8006a62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	b21b      	sxth	r3, r3
 8006a6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a6c:	89fb      	ldrh	r3, [r7, #14]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d005      	beq.n	8006aa2 <USBD_StdDevReq+0x26>
 8006a96:	2b40      	cmp	r3, #64	; 0x40
 8006a98:	d857      	bhi.n	8006b4a <USBD_StdDevReq+0xce>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00f      	beq.n	8006abe <USBD_StdDevReq+0x42>
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	d153      	bne.n	8006b4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	32ae      	adds	r2, #174	; 0xae
 8006aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]
      break;
 8006abc:	e04a      	b.n	8006b54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	785b      	ldrb	r3, [r3, #1]
 8006ac2:	2b09      	cmp	r3, #9
 8006ac4:	d83b      	bhi.n	8006b3e <USBD_StdDevReq+0xc2>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <USBD_StdDevReq+0x50>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006b21 	.word	0x08006b21
 8006ad0:	08006b35 	.word	0x08006b35
 8006ad4:	08006b3f 	.word	0x08006b3f
 8006ad8:	08006b2b 	.word	0x08006b2b
 8006adc:	08006b3f 	.word	0x08006b3f
 8006ae0:	08006aff 	.word	0x08006aff
 8006ae4:	08006af5 	.word	0x08006af5
 8006ae8:	08006b3f 	.word	0x08006b3f
 8006aec:	08006b17 	.word	0x08006b17
 8006af0:	08006b09 	.word	0x08006b09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa3c 	bl	8006f74 <USBD_GetDescriptor>
          break;
 8006afc:	e024      	b.n	8006b48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fbcb 	bl	800729c <USBD_SetAddress>
          break;
 8006b06:	e01f      	b.n	8006b48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fc0a 	bl	8007324 <USBD_SetConfig>
 8006b10:	4603      	mov	r3, r0
 8006b12:	73fb      	strb	r3, [r7, #15]
          break;
 8006b14:	e018      	b.n	8006b48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fcad 	bl	8007478 <USBD_GetConfig>
          break;
 8006b1e:	e013      	b.n	8006b48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fcde 	bl	80074e4 <USBD_GetStatus>
          break;
 8006b28:	e00e      	b.n	8006b48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fd0d 	bl	800754c <USBD_SetFeature>
          break;
 8006b32:	e009      	b.n	8006b48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fd31 	bl	800759e <USBD_ClrFeature>
          break;
 8006b3c:	e004      	b.n	8006b48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fd88 	bl	8007656 <USBD_CtlError>
          break;
 8006b46:	bf00      	nop
      }
      break;
 8006b48:	e004      	b.n	8006b54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fd82 	bl	8007656 <USBD_CtlError>
      break;
 8006b52:	bf00      	nop
  }

  return ret;
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop

08006b60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b76:	2b40      	cmp	r3, #64	; 0x40
 8006b78:	d005      	beq.n	8006b86 <USBD_StdItfReq+0x26>
 8006b7a:	2b40      	cmp	r3, #64	; 0x40
 8006b7c:	d852      	bhi.n	8006c24 <USBD_StdItfReq+0xc4>
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <USBD_StdItfReq+0x26>
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d14e      	bne.n	8006c24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d840      	bhi.n	8006c16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	889b      	ldrh	r3, [r3, #4]
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d836      	bhi.n	8006c0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	889b      	ldrh	r3, [r3, #4]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff ff2f 	bl	8006a0a <USBD_CoreFindIF>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	2bff      	cmp	r3, #255	; 0xff
 8006bb4:	d01d      	beq.n	8006bf2 <USBD_StdItfReq+0x92>
 8006bb6:	7bbb      	ldrb	r3, [r7, #14]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d11a      	bne.n	8006bf2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006bbc:	7bba      	ldrb	r2, [r7, #14]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	32ae      	adds	r2, #174	; 0xae
 8006bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00f      	beq.n	8006bec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006bcc:	7bba      	ldrb	r2, [r7, #14]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006bd4:	7bba      	ldrb	r2, [r7, #14]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	32ae      	adds	r2, #174	; 0xae
 8006bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
 8006be6:	4603      	mov	r3, r0
 8006be8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006bea:	e004      	b.n	8006bf6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006bec:	2303      	movs	r3, #3
 8006bee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006bf0:	e001      	b.n	8006bf6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	88db      	ldrh	r3, [r3, #6]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d110      	bne.n	8006c20 <USBD_StdItfReq+0xc0>
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10d      	bne.n	8006c20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fd74 	bl	80076f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c0a:	e009      	b.n	8006c20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fd21 	bl	8007656 <USBD_CtlError>
          break;
 8006c14:	e004      	b.n	8006c20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fd1c 	bl	8007656 <USBD_CtlError>
          break;
 8006c1e:	e000      	b.n	8006c22 <USBD_StdItfReq+0xc2>
          break;
 8006c20:	bf00      	nop
      }
      break;
 8006c22:	e004      	b.n	8006c2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fd15 	bl	8007656 <USBD_CtlError>
      break;
 8006c2c:	bf00      	nop
  }

  return ret;
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	889b      	ldrh	r3, [r3, #4]
 8006c4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c54:	2b40      	cmp	r3, #64	; 0x40
 8006c56:	d007      	beq.n	8006c68 <USBD_StdEPReq+0x30>
 8006c58:	2b40      	cmp	r3, #64	; 0x40
 8006c5a:	f200 817f 	bhi.w	8006f5c <USBD_StdEPReq+0x324>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d02a      	beq.n	8006cb8 <USBD_StdEPReq+0x80>
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	f040 817a 	bne.w	8006f5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff fed9 	bl	8006a24 <USBD_CoreFindEP>
 8006c72:	4603      	mov	r3, r0
 8006c74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c76:	7b7b      	ldrb	r3, [r7, #13]
 8006c78:	2bff      	cmp	r3, #255	; 0xff
 8006c7a:	f000 8174 	beq.w	8006f66 <USBD_StdEPReq+0x32e>
 8006c7e:	7b7b      	ldrb	r3, [r7, #13]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 8170 	bne.w	8006f66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006c86:	7b7a      	ldrb	r2, [r7, #13]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c8e:	7b7a      	ldrb	r2, [r7, #13]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	32ae      	adds	r2, #174	; 0xae
 8006c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 8163 	beq.w	8006f66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006ca0:	7b7a      	ldrb	r2, [r7, #13]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	32ae      	adds	r2, #174	; 0xae
 8006ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cb6:	e156      	b.n	8006f66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d008      	beq.n	8006cd2 <USBD_StdEPReq+0x9a>
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	f300 8145 	bgt.w	8006f50 <USBD_StdEPReq+0x318>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 809b 	beq.w	8006e02 <USBD_StdEPReq+0x1ca>
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d03c      	beq.n	8006d4a <USBD_StdEPReq+0x112>
 8006cd0:	e13e      	b.n	8006f50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d002      	beq.n	8006ce4 <USBD_StdEPReq+0xac>
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d016      	beq.n	8006d10 <USBD_StdEPReq+0xd8>
 8006ce2:	e02c      	b.n	8006d3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00d      	beq.n	8006d06 <USBD_StdEPReq+0xce>
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	2b80      	cmp	r3, #128	; 0x80
 8006cee:	d00a      	beq.n	8006d06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f003 f9a3 	bl	800a040 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cfa:	2180      	movs	r1, #128	; 0x80
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f003 f99f 	bl	800a040 <USBD_LL_StallEP>
 8006d02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d04:	e020      	b.n	8006d48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fca4 	bl	8007656 <USBD_CtlError>
              break;
 8006d0e:	e01b      	b.n	8006d48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	885b      	ldrh	r3, [r3, #2]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10e      	bne.n	8006d36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00b      	beq.n	8006d36 <USBD_StdEPReq+0xfe>
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	2b80      	cmp	r3, #128	; 0x80
 8006d22:	d008      	beq.n	8006d36 <USBD_StdEPReq+0xfe>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	88db      	ldrh	r3, [r3, #6]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d104      	bne.n	8006d36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f003 f985 	bl	800a040 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fcdb 	bl	80076f2 <USBD_CtlSendStatus>

              break;
 8006d3c:	e004      	b.n	8006d48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fc88 	bl	8007656 <USBD_CtlError>
              break;
 8006d46:	bf00      	nop
          }
          break;
 8006d48:	e107      	b.n	8006f5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d002      	beq.n	8006d5c <USBD_StdEPReq+0x124>
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d016      	beq.n	8006d88 <USBD_StdEPReq+0x150>
 8006d5a:	e04b      	b.n	8006df4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d5c:	7bbb      	ldrb	r3, [r7, #14]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00d      	beq.n	8006d7e <USBD_StdEPReq+0x146>
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b80      	cmp	r3, #128	; 0x80
 8006d66:	d00a      	beq.n	8006d7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f003 f967 	bl	800a040 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d72:	2180      	movs	r1, #128	; 0x80
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f003 f963 	bl	800a040 <USBD_LL_StallEP>
 8006d7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d7c:	e040      	b.n	8006e00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fc68 	bl	8007656 <USBD_CtlError>
              break;
 8006d86:	e03b      	b.n	8006e00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	885b      	ldrh	r3, [r3, #2]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d136      	bne.n	8006dfe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d004      	beq.n	8006da4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f003 f96d 	bl	800a07e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fca4 	bl	80076f2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	4619      	mov	r1, r3
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff fe38 	bl	8006a24 <USBD_CoreFindEP>
 8006db4:	4603      	mov	r3, r0
 8006db6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006db8:	7b7b      	ldrb	r3, [r7, #13]
 8006dba:	2bff      	cmp	r3, #255	; 0xff
 8006dbc:	d01f      	beq.n	8006dfe <USBD_StdEPReq+0x1c6>
 8006dbe:	7b7b      	ldrb	r3, [r7, #13]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d11c      	bne.n	8006dfe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006dc4:	7b7a      	ldrb	r2, [r7, #13]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006dcc:	7b7a      	ldrb	r2, [r7, #13]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	32ae      	adds	r2, #174	; 0xae
 8006dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d010      	beq.n	8006dfe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ddc:	7b7a      	ldrb	r2, [r7, #13]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	32ae      	adds	r2, #174	; 0xae
 8006de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4798      	blx	r3
 8006dee:	4603      	mov	r3, r0
 8006df0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006df2:	e004      	b.n	8006dfe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fc2d 	bl	8007656 <USBD_CtlError>
              break;
 8006dfc:	e000      	b.n	8006e00 <USBD_StdEPReq+0x1c8>
              break;
 8006dfe:	bf00      	nop
          }
          break;
 8006e00:	e0ab      	b.n	8006f5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d002      	beq.n	8006e14 <USBD_StdEPReq+0x1dc>
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d032      	beq.n	8006e78 <USBD_StdEPReq+0x240>
 8006e12:	e097      	b.n	8006f44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e14:	7bbb      	ldrb	r3, [r7, #14]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d007      	beq.n	8006e2a <USBD_StdEPReq+0x1f2>
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	2b80      	cmp	r3, #128	; 0x80
 8006e1e:	d004      	beq.n	8006e2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fc17 	bl	8007656 <USBD_CtlError>
                break;
 8006e28:	e091      	b.n	8006f4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	da0b      	bge.n	8006e4a <USBD_StdEPReq+0x212>
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	3310      	adds	r3, #16
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	4413      	add	r3, r2
 8006e46:	3304      	adds	r3, #4
 8006e48:	e00b      	b.n	8006e62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	4413      	add	r3, r2
 8006e60:	3304      	adds	r3, #4
 8006e62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fc01 	bl	8007678 <USBD_CtlSendData>
              break;
 8006e76:	e06a      	b.n	8006f4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	da11      	bge.n	8006ea4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	f003 020f 	and.w	r2, r3, #15
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	3324      	adds	r3, #36	; 0x24
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d117      	bne.n	8006eca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fbda 	bl	8007656 <USBD_CtlError>
                  break;
 8006ea2:	e054      	b.n	8006f4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	f003 020f 	and.w	r2, r3, #15
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d104      	bne.n	8006eca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fbc7 	bl	8007656 <USBD_CtlError>
                  break;
 8006ec8:	e041      	b.n	8006f4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	da0b      	bge.n	8006eea <USBD_StdEPReq+0x2b2>
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	3310      	adds	r3, #16
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	e00b      	b.n	8006f02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	4413      	add	r3, r2
 8006f00:	3304      	adds	r3, #4
 8006f02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <USBD_StdEPReq+0x2d8>
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	2b80      	cmp	r3, #128	; 0x80
 8006f0e:	d103      	bne.n	8006f18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e00e      	b.n	8006f36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f003 f8cd 	bl	800a0bc <USBD_LL_IsStallEP>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e002      	b.n	8006f36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fb9b 	bl	8007678 <USBD_CtlSendData>
              break;
 8006f42:	e004      	b.n	8006f4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fb85 	bl	8007656 <USBD_CtlError>
              break;
 8006f4c:	bf00      	nop
          }
          break;
 8006f4e:	e004      	b.n	8006f5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fb7f 	bl	8007656 <USBD_CtlError>
          break;
 8006f58:	bf00      	nop
      }
      break;
 8006f5a:	e005      	b.n	8006f68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fb79 	bl	8007656 <USBD_CtlError>
      break;
 8006f64:	e000      	b.n	8006f68 <USBD_StdEPReq+0x330>
      break;
 8006f66:	bf00      	nop
  }

  return ret;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	885b      	ldrh	r3, [r3, #2]
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	2b0e      	cmp	r3, #14
 8006f96:	f200 8152 	bhi.w	800723e <USBD_GetDescriptor+0x2ca>
 8006f9a:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USBD_GetDescriptor+0x2c>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08007011 	.word	0x08007011
 8006fa4:	08007029 	.word	0x08007029
 8006fa8:	08007069 	.word	0x08007069
 8006fac:	0800723f 	.word	0x0800723f
 8006fb0:	0800723f 	.word	0x0800723f
 8006fb4:	080071df 	.word	0x080071df
 8006fb8:	0800720b 	.word	0x0800720b
 8006fbc:	0800723f 	.word	0x0800723f
 8006fc0:	0800723f 	.word	0x0800723f
 8006fc4:	0800723f 	.word	0x0800723f
 8006fc8:	0800723f 	.word	0x0800723f
 8006fcc:	0800723f 	.word	0x0800723f
 8006fd0:	0800723f 	.word	0x0800723f
 8006fd4:	0800723f 	.word	0x0800723f
 8006fd8:	08006fdd 	.word	0x08006fdd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	f107 0108 	add.w	r1, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ffe:	e126      	b.n	800724e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fb27 	bl	8007656 <USBD_CtlError>
        err++;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	3301      	adds	r3, #1
 800700c:	72fb      	strb	r3, [r7, #11]
      break;
 800700e:	e11e      	b.n	800724e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	7c12      	ldrb	r2, [r2, #16]
 800701c:	f107 0108 	add.w	r1, r7, #8
 8007020:	4610      	mov	r0, r2
 8007022:	4798      	blx	r3
 8007024:	60f8      	str	r0, [r7, #12]
      break;
 8007026:	e112      	b.n	800724e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	7c1b      	ldrb	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10d      	bne.n	800704c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007038:	f107 0208 	add.w	r2, r7, #8
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	2202      	movs	r2, #2
 8007048:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800704a:	e100      	b.n	800724e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	f107 0208 	add.w	r2, r7, #8
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
 800705c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	2202      	movs	r2, #2
 8007064:	701a      	strb	r2, [r3, #0]
      break;
 8007066:	e0f2      	b.n	800724e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	885b      	ldrh	r3, [r3, #2]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b05      	cmp	r3, #5
 8007070:	f200 80ac 	bhi.w	80071cc <USBD_GetDescriptor+0x258>
 8007074:	a201      	add	r2, pc, #4	; (adr r2, 800707c <USBD_GetDescriptor+0x108>)
 8007076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707a:	bf00      	nop
 800707c:	08007095 	.word	0x08007095
 8007080:	080070c9 	.word	0x080070c9
 8007084:	080070fd 	.word	0x080070fd
 8007088:	08007131 	.word	0x08007131
 800708c:	08007165 	.word	0x08007165
 8007090:	08007199 	.word	0x08007199
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	7c12      	ldrb	r2, [r2, #16]
 80070ac:	f107 0108 	add.w	r1, r7, #8
 80070b0:	4610      	mov	r0, r2
 80070b2:	4798      	blx	r3
 80070b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070b6:	e091      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 facb 	bl	8007656 <USBD_CtlError>
            err++;
 80070c0:	7afb      	ldrb	r3, [r7, #11]
 80070c2:	3301      	adds	r3, #1
 80070c4:	72fb      	strb	r3, [r7, #11]
          break;
 80070c6:	e089      	b.n	80071dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	7c12      	ldrb	r2, [r2, #16]
 80070e0:	f107 0108 	add.w	r1, r7, #8
 80070e4:	4610      	mov	r0, r2
 80070e6:	4798      	blx	r3
 80070e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ea:	e077      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fab1 	bl	8007656 <USBD_CtlError>
            err++;
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	3301      	adds	r3, #1
 80070f8:	72fb      	strb	r3, [r7, #11]
          break;
 80070fa:	e06f      	b.n	80071dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00b      	beq.n	8007120 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	7c12      	ldrb	r2, [r2, #16]
 8007114:	f107 0108 	add.w	r1, r7, #8
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
 800711c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800711e:	e05d      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa97 	bl	8007656 <USBD_CtlError>
            err++;
 8007128:	7afb      	ldrb	r3, [r7, #11]
 800712a:	3301      	adds	r3, #1
 800712c:	72fb      	strb	r3, [r7, #11]
          break;
 800712e:	e055      	b.n	80071dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	7c12      	ldrb	r2, [r2, #16]
 8007148:	f107 0108 	add.w	r1, r7, #8
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
 8007150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007152:	e043      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa7d 	bl	8007656 <USBD_CtlError>
            err++;
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	3301      	adds	r3, #1
 8007160:	72fb      	strb	r3, [r7, #11]
          break;
 8007162:	e03b      	b.n	80071dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	7c12      	ldrb	r2, [r2, #16]
 800717c:	f107 0108 	add.w	r1, r7, #8
 8007180:	4610      	mov	r0, r2
 8007182:	4798      	blx	r3
 8007184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007186:	e029      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa63 	bl	8007656 <USBD_CtlError>
            err++;
 8007190:	7afb      	ldrb	r3, [r7, #11]
 8007192:	3301      	adds	r3, #1
 8007194:	72fb      	strb	r3, [r7, #11]
          break;
 8007196:	e021      	b.n	80071dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00b      	beq.n	80071bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	7c12      	ldrb	r2, [r2, #16]
 80071b0:	f107 0108 	add.w	r1, r7, #8
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
 80071b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ba:	e00f      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa49 	bl	8007656 <USBD_CtlError>
            err++;
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	3301      	adds	r3, #1
 80071c8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ca:	e007      	b.n	80071dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa41 	bl	8007656 <USBD_CtlError>
          err++;
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	3301      	adds	r3, #1
 80071d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80071da:	bf00      	nop
      }
      break;
 80071dc:	e037      	b.n	800724e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7c1b      	ldrb	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ee:	f107 0208 	add.w	r2, r7, #8
 80071f2:	4610      	mov	r0, r2
 80071f4:	4798      	blx	r3
 80071f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071f8:	e029      	b.n	800724e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fa2a 	bl	8007656 <USBD_CtlError>
        err++;
 8007202:	7afb      	ldrb	r3, [r7, #11]
 8007204:	3301      	adds	r3, #1
 8007206:	72fb      	strb	r3, [r7, #11]
      break;
 8007208:	e021      	b.n	800724e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7c1b      	ldrb	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10d      	bne.n	800722e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	f107 0208 	add.w	r2, r7, #8
 800721e:	4610      	mov	r0, r2
 8007220:	4798      	blx	r3
 8007222:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	2207      	movs	r2, #7
 800722a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800722c:	e00f      	b.n	800724e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fa10 	bl	8007656 <USBD_CtlError>
        err++;
 8007236:	7afb      	ldrb	r3, [r7, #11]
 8007238:	3301      	adds	r3, #1
 800723a:	72fb      	strb	r3, [r7, #11]
      break;
 800723c:	e007      	b.n	800724e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fa08 	bl	8007656 <USBD_CtlError>
      err++;
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	3301      	adds	r3, #1
 800724a:	72fb      	strb	r3, [r7, #11]
      break;
 800724c:	bf00      	nop
  }

  if (err != 0U)
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d11e      	bne.n	8007292 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	88db      	ldrh	r3, [r3, #6]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d016      	beq.n	800728a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800725c:	893b      	ldrh	r3, [r7, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00e      	beq.n	8007280 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	88da      	ldrh	r2, [r3, #6]
 8007266:	893b      	ldrh	r3, [r7, #8]
 8007268:	4293      	cmp	r3, r2
 800726a:	bf28      	it	cs
 800726c:	4613      	movcs	r3, r2
 800726e:	b29b      	uxth	r3, r3
 8007270:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007272:	893b      	ldrh	r3, [r7, #8]
 8007274:	461a      	mov	r2, r3
 8007276:	68f9      	ldr	r1, [r7, #12]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f9fd 	bl	8007678 <USBD_CtlSendData>
 800727e:	e009      	b.n	8007294 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f9e7 	bl	8007656 <USBD_CtlError>
 8007288:	e004      	b.n	8007294 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa31 	bl	80076f2 <USBD_CtlSendStatus>
 8007290:	e000      	b.n	8007294 <USBD_GetDescriptor+0x320>
    return;
 8007292:	bf00      	nop
  }
}
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop

0800729c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	889b      	ldrh	r3, [r3, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d131      	bne.n	8007312 <USBD_SetAddress+0x76>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	88db      	ldrh	r3, [r3, #6]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d12d      	bne.n	8007312 <USBD_SetAddress+0x76>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	885b      	ldrh	r3, [r3, #2]
 80072ba:	2b7f      	cmp	r3, #127	; 0x7f
 80072bc:	d829      	bhi.n	8007312 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	885b      	ldrh	r3, [r3, #2]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d104      	bne.n	80072e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f9bc 	bl	8007656 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072de:	e01d      	b.n	800731c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	7bfa      	ldrb	r2, [r7, #15]
 80072e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f002 ff11 	bl	800a114 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f9fd 	bl	80076f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d004      	beq.n	8007308 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2202      	movs	r2, #2
 8007302:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007306:	e009      	b.n	800731c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007310:	e004      	b.n	800731c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f99e 	bl	8007656 <USBD_CtlError>
  }
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	885b      	ldrh	r3, [r3, #2]
 8007336:	b2da      	uxtb	r2, r3
 8007338:	4b4e      	ldr	r3, [pc, #312]	; (8007474 <USBD_SetConfig+0x150>)
 800733a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800733c:	4b4d      	ldr	r3, [pc, #308]	; (8007474 <USBD_SetConfig+0x150>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d905      	bls.n	8007350 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f985 	bl	8007656 <USBD_CtlError>
    return USBD_FAIL;
 800734c:	2303      	movs	r3, #3
 800734e:	e08c      	b.n	800746a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d002      	beq.n	8007362 <USBD_SetConfig+0x3e>
 800735c:	2b03      	cmp	r3, #3
 800735e:	d029      	beq.n	80073b4 <USBD_SetConfig+0x90>
 8007360:	e075      	b.n	800744e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007362:	4b44      	ldr	r3, [pc, #272]	; (8007474 <USBD_SetConfig+0x150>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d020      	beq.n	80073ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800736a:	4b42      	ldr	r3, [pc, #264]	; (8007474 <USBD_SetConfig+0x150>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007374:	4b3f      	ldr	r3, [pc, #252]	; (8007474 <USBD_SetConfig+0x150>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff f813 	bl	80063a6 <USBD_SetClassConfig>
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d008      	beq.n	800739c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f962 	bl	8007656 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800739a:	e065      	b.n	8007468 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f9a8 	bl	80076f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2203      	movs	r2, #3
 80073a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073aa:	e05d      	b.n	8007468 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f9a0 	bl	80076f2 <USBD_CtlSendStatus>
      break;
 80073b2:	e059      	b.n	8007468 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073b4:	4b2f      	ldr	r3, [pc, #188]	; (8007474 <USBD_SetConfig+0x150>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d112      	bne.n	80073e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80073c4:	4b2b      	ldr	r3, [pc, #172]	; (8007474 <USBD_SetConfig+0x150>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073ce:	4b29      	ldr	r3, [pc, #164]	; (8007474 <USBD_SetConfig+0x150>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff f802 	bl	80063de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f989 	bl	80076f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073e0:	e042      	b.n	8007468 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80073e2:	4b24      	ldr	r3, [pc, #144]	; (8007474 <USBD_SetConfig+0x150>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d02a      	beq.n	8007446 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7fe fff0 	bl	80063de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80073fe:	4b1d      	ldr	r3, [pc, #116]	; (8007474 <USBD_SetConfig+0x150>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007408:	4b1a      	ldr	r3, [pc, #104]	; (8007474 <USBD_SetConfig+0x150>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fe ffc9 	bl	80063a6 <USBD_SetClassConfig>
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00f      	beq.n	800743e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f918 	bl	8007656 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fe ffd5 	bl	80063de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800743c:	e014      	b.n	8007468 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f957 	bl	80076f2 <USBD_CtlSendStatus>
      break;
 8007444:	e010      	b.n	8007468 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f953 	bl	80076f2 <USBD_CtlSendStatus>
      break;
 800744c:	e00c      	b.n	8007468 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f900 	bl	8007656 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007456:	4b07      	ldr	r3, [pc, #28]	; (8007474 <USBD_SetConfig+0x150>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7fe ffbe 	bl	80063de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007462:	2303      	movs	r3, #3
 8007464:	73fb      	strb	r3, [r7, #15]
      break;
 8007466:	bf00      	nop
  }

  return ret;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	200003d0 	.word	0x200003d0

08007478 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	88db      	ldrh	r3, [r3, #6]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d004      	beq.n	8007494 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f8e2 	bl	8007656 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007492:	e023      	b.n	80074dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	dc02      	bgt.n	80074a6 <USBD_GetConfig+0x2e>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	dc03      	bgt.n	80074ac <USBD_GetConfig+0x34>
 80074a4:	e015      	b.n	80074d2 <USBD_GetConfig+0x5a>
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d00b      	beq.n	80074c2 <USBD_GetConfig+0x4a>
 80074aa:	e012      	b.n	80074d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3308      	adds	r3, #8
 80074b6:	2201      	movs	r2, #1
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f8dc 	bl	8007678 <USBD_CtlSendData>
        break;
 80074c0:	e00c      	b.n	80074dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3304      	adds	r3, #4
 80074c6:	2201      	movs	r2, #1
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f8d4 	bl	8007678 <USBD_CtlSendData>
        break;
 80074d0:	e004      	b.n	80074dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f8be 	bl	8007656 <USBD_CtlError>
        break;
 80074da:	bf00      	nop
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d81e      	bhi.n	800753a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	88db      	ldrh	r3, [r3, #6]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d004      	beq.n	800750e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f8a5 	bl	8007656 <USBD_CtlError>
        break;
 800750c:	e01a      	b.n	8007544 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f043 0202 	orr.w	r2, r3, #2
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	330c      	adds	r3, #12
 800752e:	2202      	movs	r2, #2
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f8a0 	bl	8007678 <USBD_CtlSendData>
      break;
 8007538:	e004      	b.n	8007544 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f88a 	bl	8007656 <USBD_CtlError>
      break;
 8007542:	bf00      	nop
  }
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	885b      	ldrh	r3, [r3, #2]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d107      	bne.n	800756e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f8c3 	bl	80076f2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800756c:	e013      	b.n	8007596 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	885b      	ldrh	r3, [r3, #2]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d10b      	bne.n	800758e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	889b      	ldrh	r3, [r3, #4]
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	b29b      	uxth	r3, r3
 800757e:	b2da      	uxtb	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8b3 	bl	80076f2 <USBD_CtlSendStatus>
}
 800758c:	e003      	b.n	8007596 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f860 	bl	8007656 <USBD_CtlError>
}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d80b      	bhi.n	80075ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	885b      	ldrh	r3, [r3, #2]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d10c      	bne.n	80075d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f893 	bl	80076f2 <USBD_CtlSendStatus>
      }
      break;
 80075cc:	e004      	b.n	80075d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f840 	bl	8007656 <USBD_CtlError>
      break;
 80075d6:	e000      	b.n	80075da <USBD_ClrFeature+0x3c>
      break;
 80075d8:	bf00      	nop
  }
}
 80075da:	bf00      	nop
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	781a      	ldrb	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3301      	adds	r3, #1
 800760a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f7ff fa16 	bl	8006a3e <SWAPBYTE>
 8007612:	4603      	mov	r3, r0
 8007614:	461a      	mov	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3301      	adds	r3, #1
 800761e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3301      	adds	r3, #1
 8007624:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7ff fa09 	bl	8006a3e <SWAPBYTE>
 800762c:	4603      	mov	r3, r0
 800762e:	461a      	mov	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff f9fc 	bl	8006a3e <SWAPBYTE>
 8007646:	4603      	mov	r3, r0
 8007648:	461a      	mov	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	80da      	strh	r2, [r3, #6]
}
 800764e:	bf00      	nop
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007660:	2180      	movs	r1, #128	; 0x80
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f002 fcec 	bl	800a040 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007668:	2100      	movs	r1, #0
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f002 fce8 	bl	800a040 <USBD_LL_StallEP>
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2202      	movs	r2, #2
 8007688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	2100      	movs	r1, #0
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f002 fd57 	bl	800a152 <USBD_LL_Transmit>

  return USBD_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	2100      	movs	r1, #0
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f002 fd46 	bl	800a152 <USBD_LL_Transmit>

  return USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	2100      	movs	r1, #0
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f002 fd56 	bl	800a194 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2204      	movs	r2, #4
 80076fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007702:	2300      	movs	r3, #0
 8007704:	2200      	movs	r2, #0
 8007706:	2100      	movs	r1, #0
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f002 fd22 	bl	800a152 <USBD_LL_Transmit>

  return USBD_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2205      	movs	r2, #5
 8007724:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007728:	2300      	movs	r3, #0
 800772a:	2200      	movs	r2, #0
 800772c:	2100      	movs	r1, #0
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f002 fd30 	bl	800a194 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <__NVIC_SetPriority>:
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800774c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007750:	2b00      	cmp	r3, #0
 8007752:	db0a      	blt.n	800776a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	b2da      	uxtb	r2, r3
 8007758:	490c      	ldr	r1, [pc, #48]	; (800778c <__NVIC_SetPriority+0x4c>)
 800775a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800775e:	0112      	lsls	r2, r2, #4
 8007760:	b2d2      	uxtb	r2, r2
 8007762:	440b      	add	r3, r1
 8007764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007768:	e00a      	b.n	8007780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	b2da      	uxtb	r2, r3
 800776e:	4908      	ldr	r1, [pc, #32]	; (8007790 <__NVIC_SetPriority+0x50>)
 8007770:	79fb      	ldrb	r3, [r7, #7]
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	3b04      	subs	r3, #4
 8007778:	0112      	lsls	r2, r2, #4
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	440b      	add	r3, r1
 800777e:	761a      	strb	r2, [r3, #24]
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	e000e100 	.word	0xe000e100
 8007790:	e000ed00 	.word	0xe000ed00

08007794 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007798:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <SysTick_Handler+0x1c>)
 800779a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800779c:	f001 fc02 	bl	8008fa4 <xTaskGetSchedulerState>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d001      	beq.n	80077aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80077a6:	f002 f9e7 	bl	8009b78 <xPortSysTickHandler>
  }
}
 80077aa:	bf00      	nop
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	e000e010 	.word	0xe000e010

080077b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80077b8:	2100      	movs	r1, #0
 80077ba:	f06f 0004 	mvn.w	r0, #4
 80077be:	f7ff ffbf 	bl	8007740 <__NVIC_SetPriority>
#endif
}
 80077c2:	bf00      	nop
 80077c4:	bd80      	pop	{r7, pc}
	...

080077c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ce:	f3ef 8305 	mrs	r3, IPSR
 80077d2:	603b      	str	r3, [r7, #0]
  return(result);
 80077d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80077da:	f06f 0305 	mvn.w	r3, #5
 80077de:	607b      	str	r3, [r7, #4]
 80077e0:	e00c      	b.n	80077fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80077e2:	4b0a      	ldr	r3, [pc, #40]	; (800780c <osKernelInitialize+0x44>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80077ea:	4b08      	ldr	r3, [pc, #32]	; (800780c <osKernelInitialize+0x44>)
 80077ec:	2201      	movs	r2, #1
 80077ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	607b      	str	r3, [r7, #4]
 80077f4:	e002      	b.n	80077fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80077f6:	f04f 33ff 	mov.w	r3, #4294967295
 80077fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077fc:	687b      	ldr	r3, [r7, #4]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	200003d4 	.word	0x200003d4

08007810 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007816:	f3ef 8305 	mrs	r3, IPSR
 800781a:	603b      	str	r3, [r7, #0]
  return(result);
 800781c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007822:	f06f 0305 	mvn.w	r3, #5
 8007826:	607b      	str	r3, [r7, #4]
 8007828:	e010      	b.n	800784c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800782a:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <osKernelStart+0x48>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d109      	bne.n	8007846 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007832:	f7ff ffbf 	bl	80077b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007836:	4b08      	ldr	r3, [pc, #32]	; (8007858 <osKernelStart+0x48>)
 8007838:	2202      	movs	r2, #2
 800783a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800783c:	f000 ff56 	bl	80086ec <vTaskStartScheduler>
      stat = osOK;
 8007840:	2300      	movs	r3, #0
 8007842:	607b      	str	r3, [r7, #4]
 8007844:	e002      	b.n	800784c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007846:	f04f 33ff 	mov.w	r3, #4294967295
 800784a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800784c:	687b      	ldr	r3, [r7, #4]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	200003d4 	.word	0x200003d4

0800785c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4a07      	ldr	r2, [pc, #28]	; (8007888 <vApplicationGetIdleTaskMemory+0x2c>)
 800786c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4a06      	ldr	r2, [pc, #24]	; (800788c <vApplicationGetIdleTaskMemory+0x30>)
 8007872:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2280      	movs	r2, #128	; 0x80
 8007878:	601a      	str	r2, [r3, #0]
}
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	200003d8 	.word	0x200003d8
 800788c:	20000494 	.word	0x20000494

08007890 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4a07      	ldr	r2, [pc, #28]	; (80078bc <vApplicationGetTimerTaskMemory+0x2c>)
 80078a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	4a06      	ldr	r2, [pc, #24]	; (80078c0 <vApplicationGetTimerTaskMemory+0x30>)
 80078a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078ae:	601a      	str	r2, [r3, #0]
}
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	20000694 	.word	0x20000694
 80078c0:	20000750 	.word	0x20000750

080078c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f103 0208 	add.w	r2, r3, #8
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f04f 32ff 	mov.w	r2, #4294967295
 80078dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f103 0208 	add.w	r2, r3, #8
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f103 0208 	add.w	r2, r3, #8
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007912:	bf00      	nop
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800791e:	b480      	push	{r7}
 8007920:	b085      	sub	sp, #20
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
}
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007966:	b480      	push	{r7}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797c:	d103      	bne.n	8007986 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	e00c      	b.n	80079a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3308      	adds	r3, #8
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	e002      	b.n	8007994 <vListInsert+0x2e>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	429a      	cmp	r2, r3
 800799e:	d2f6      	bcs.n	800798e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	601a      	str	r2, [r3, #0]
}
 80079cc:	bf00      	nop
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6892      	ldr	r2, [r2, #8]
 80079ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6852      	ldr	r2, [r2, #4]
 80079f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d103      	bne.n	8007a0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	1e5a      	subs	r2, r3, #1
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a56:	f001 fffd 	bl	8009a54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a66:	fb01 f303 	mul.w	r3, r1, r3
 8007a6a:	441a      	add	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	3b01      	subs	r3, #1
 8007a88:	68f9      	ldr	r1, [r7, #12]
 8007a8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a8c:	fb01 f303 	mul.w	r3, r1, r3
 8007a90:	441a      	add	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	22ff      	movs	r2, #255	; 0xff
 8007a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	22ff      	movs	r2, #255	; 0xff
 8007aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d114      	bne.n	8007ad6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01a      	beq.n	8007aea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3310      	adds	r3, #16
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f001 f8b1 	bl	8008c20 <xTaskRemoveFromEventList>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d012      	beq.n	8007aea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <xQueueGenericReset+0xcc>)
 8007ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	e009      	b.n	8007aea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3310      	adds	r3, #16
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7ff fef2 	bl	80078c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3324      	adds	r3, #36	; 0x24
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff feed 	bl	80078c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007aea:	f001 ffe3 	bl	8009ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007aee:	2301      	movs	r3, #1
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	e000ed04 	.word	0xe000ed04

08007afc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08e      	sub	sp, #56	; 0x38
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10a      	bne.n	8007b26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10a      	bne.n	8007b42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <xQueueGenericCreateStatic+0x52>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <xQueueGenericCreateStatic+0x56>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e000      	b.n	8007b54 <xQueueGenericCreateStatic+0x58>
 8007b52:	2300      	movs	r3, #0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10a      	bne.n	8007b6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	623b      	str	r3, [r7, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	e7fe      	b.n	8007b6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <xQueueGenericCreateStatic+0x7e>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <xQueueGenericCreateStatic+0x82>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <xQueueGenericCreateStatic+0x84>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	61fb      	str	r3, [r7, #28]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b9a:	2350      	movs	r3, #80	; 0x50
 8007b9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b50      	cmp	r3, #80	; 0x50
 8007ba2:	d00a      	beq.n	8007bba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	61bb      	str	r3, [r7, #24]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00d      	beq.n	8007be2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	68b9      	ldr	r1, [r7, #8]
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 f805 	bl	8007bec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3730      	adds	r7, #48	; 0x30
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d103      	bne.n	8007c08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	e002      	b.n	8007c0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	69b8      	ldr	r0, [r7, #24]
 8007c1e:	f7ff ff05 	bl	8007a2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	78fa      	ldrb	r2, [r7, #3]
 8007c26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08e      	sub	sp, #56	; 0x38
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c42:	2300      	movs	r3, #0
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10a      	bne.n	8007c66 <xQueueGenericSend+0x32>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d103      	bne.n	8007c74 <xQueueGenericSend+0x40>
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <xQueueGenericSend+0x44>
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <xQueueGenericSend+0x46>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <xQueueGenericSend+0x60>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d103      	bne.n	8007ca2 <xQueueGenericSend+0x6e>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d101      	bne.n	8007ca6 <xQueueGenericSend+0x72>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <xQueueGenericSend+0x74>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	623b      	str	r3, [r7, #32]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cc2:	f001 f96f 	bl	8008fa4 <xTaskGetSchedulerState>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <xQueueGenericSend+0x9e>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <xQueueGenericSend+0xa2>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <xQueueGenericSend+0xa4>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <xQueueGenericSend+0xbe>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	61fb      	str	r3, [r7, #28]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cf2:	f001 feaf 	bl	8009a54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d302      	bcc.n	8007d08 <xQueueGenericSend+0xd4>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d129      	bne.n	8007d5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	68b9      	ldr	r1, [r7, #8]
 8007d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d0e:	f000 fa0b 	bl	8008128 <prvCopyDataToQueue>
 8007d12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d010      	beq.n	8007d3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	3324      	adds	r3, #36	; 0x24
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 ff7d 	bl	8008c20 <xTaskRemoveFromEventList>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d013      	beq.n	8007d54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d2c:	4b3f      	ldr	r3, [pc, #252]	; (8007e2c <xQueueGenericSend+0x1f8>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	e00a      	b.n	8007d54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d007      	beq.n	8007d54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d44:	4b39      	ldr	r3, [pc, #228]	; (8007e2c <xQueueGenericSend+0x1f8>)
 8007d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d54:	f001 feae 	bl	8009ab4 <vPortExitCritical>
				return pdPASS;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e063      	b.n	8007e24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d103      	bne.n	8007d6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d62:	f001 fea7 	bl	8009ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	e05c      	b.n	8007e24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d70:	f107 0314 	add.w	r3, r7, #20
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 ffb7 	bl	8008ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d7e:	f001 fe99 	bl	8009ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d82:	f000 fd23 	bl	80087cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d86:	f001 fe65 	bl	8009a54 <vPortEnterCritical>
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d90:	b25b      	sxtb	r3, r3
 8007d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d96:	d103      	bne.n	8007da0 <xQueueGenericSend+0x16c>
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007da6:	b25b      	sxtb	r3, r3
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d103      	bne.n	8007db6 <xQueueGenericSend+0x182>
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007db6:	f001 fe7d 	bl	8009ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dba:	1d3a      	adds	r2, r7, #4
 8007dbc:	f107 0314 	add.w	r3, r7, #20
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 ffa6 	bl	8008d14 <xTaskCheckForTimeOut>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d124      	bne.n	8007e18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dd0:	f000 faa2 	bl	8008318 <prvIsQueueFull>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d018      	beq.n	8007e0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	3310      	adds	r3, #16
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	4611      	mov	r1, r2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fecc 	bl	8008b80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dea:	f000 fa2d 	bl	8008248 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007dee:	f000 fcfb 	bl	80087e8 <xTaskResumeAll>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f47f af7c 	bne.w	8007cf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007dfa:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <xQueueGenericSend+0x1f8>)
 8007dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	e772      	b.n	8007cf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e0e:	f000 fa1b 	bl	8008248 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e12:	f000 fce9 	bl	80087e8 <xTaskResumeAll>
 8007e16:	e76c      	b.n	8007cf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e1a:	f000 fa15 	bl	8008248 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e1e:	f000 fce3 	bl	80087e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3738      	adds	r7, #56	; 0x38
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	e000ed04 	.word	0xe000ed04

08007e30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b090      	sub	sp, #64	; 0x40
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d103      	bne.n	8007e6c <xQueueGenericSendFromISR+0x3c>
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <xQueueGenericSendFromISR+0x40>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <xQueueGenericSendFromISR+0x42>
 8007e70:	2300      	movs	r3, #0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e88:	bf00      	nop
 8007e8a:	e7fe      	b.n	8007e8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d103      	bne.n	8007e9a <xQueueGenericSendFromISR+0x6a>
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d101      	bne.n	8007e9e <xQueueGenericSendFromISR+0x6e>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <xQueueGenericSendFromISR+0x70>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10a      	bne.n	8007eba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	623b      	str	r3, [r7, #32]
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007eba:	f001 fead 	bl	8009c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ebe:	f3ef 8211 	mrs	r2, BASEPRI
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	61fa      	str	r2, [r7, #28]
 8007ed4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ed6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d302      	bcc.n	8007eec <xQueueGenericSendFromISR+0xbc>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d12f      	bne.n	8007f4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	68b9      	ldr	r1, [r7, #8]
 8007f00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f02:	f000 f911 	bl	8008128 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0e:	d112      	bne.n	8007f36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d016      	beq.n	8007f46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	3324      	adds	r3, #36	; 0x24
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fe7f 	bl	8008c20 <xTaskRemoveFromEventList>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00e      	beq.n	8007f46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00b      	beq.n	8007f46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e007      	b.n	8007f46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	b25a      	sxtb	r2, r3
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f46:	2301      	movs	r3, #1
 8007f48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f4a:	e001      	b.n	8007f50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3740      	adds	r7, #64	; 0x40
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08c      	sub	sp, #48	; 0x30
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f74:	2300      	movs	r3, #0
 8007f76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <xQueueReceive+0x30>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	623b      	str	r3, [r7, #32]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d103      	bne.n	8007fa6 <xQueueReceive+0x3e>
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <xQueueReceive+0x42>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <xQueueReceive+0x44>
 8007faa:	2300      	movs	r3, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10a      	bne.n	8007fc6 <xQueueReceive+0x5e>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	61fb      	str	r3, [r7, #28]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fc6:	f000 ffed 	bl	8008fa4 <xTaskGetSchedulerState>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d102      	bne.n	8007fd6 <xQueueReceive+0x6e>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <xQueueReceive+0x72>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e000      	b.n	8007fdc <xQueueReceive+0x74>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <xQueueReceive+0x8e>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	61bb      	str	r3, [r7, #24]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ff6:	f001 fd2d 	bl	8009a54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	2b00      	cmp	r3, #0
 8008004:	d01f      	beq.n	8008046 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008006:	68b9      	ldr	r1, [r7, #8]
 8008008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800800a:	f000 f8f7 	bl	80081fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	1e5a      	subs	r2, r3, #1
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00f      	beq.n	800803e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008020:	3310      	adds	r3, #16
 8008022:	4618      	mov	r0, r3
 8008024:	f000 fdfc 	bl	8008c20 <xTaskRemoveFromEventList>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d007      	beq.n	800803e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800802e:	4b3d      	ldr	r3, [pc, #244]	; (8008124 <xQueueReceive+0x1bc>)
 8008030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800803e:	f001 fd39 	bl	8009ab4 <vPortExitCritical>
				return pdPASS;
 8008042:	2301      	movs	r3, #1
 8008044:	e069      	b.n	800811a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d103      	bne.n	8008054 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800804c:	f001 fd32 	bl	8009ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008050:	2300      	movs	r3, #0
 8008052:	e062      	b.n	800811a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	2b00      	cmp	r3, #0
 8008058:	d106      	bne.n	8008068 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800805a:	f107 0310 	add.w	r3, r7, #16
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fe42 	bl	8008ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008064:	2301      	movs	r3, #1
 8008066:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008068:	f001 fd24 	bl	8009ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800806c:	f000 fbae 	bl	80087cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008070:	f001 fcf0 	bl	8009a54 <vPortEnterCritical>
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800807a:	b25b      	sxtb	r3, r3
 800807c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008080:	d103      	bne.n	800808a <xQueueReceive+0x122>
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008090:	b25b      	sxtb	r3, r3
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008096:	d103      	bne.n	80080a0 <xQueueReceive+0x138>
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080a0:	f001 fd08 	bl	8009ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080a4:	1d3a      	adds	r2, r7, #4
 80080a6:	f107 0310 	add.w	r3, r7, #16
 80080aa:	4611      	mov	r1, r2
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fe31 	bl	8008d14 <xTaskCheckForTimeOut>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d123      	bne.n	8008100 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ba:	f000 f917 	bl	80082ec <prvIsQueueEmpty>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d017      	beq.n	80080f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	3324      	adds	r3, #36	; 0x24
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	4611      	mov	r1, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fd57 	bl	8008b80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080d4:	f000 f8b8 	bl	8008248 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080d8:	f000 fb86 	bl	80087e8 <xTaskResumeAll>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d189      	bne.n	8007ff6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80080e2:	4b10      	ldr	r3, [pc, #64]	; (8008124 <xQueueReceive+0x1bc>)
 80080e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	e780      	b.n	8007ff6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80080f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080f6:	f000 f8a7 	bl	8008248 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080fa:	f000 fb75 	bl	80087e8 <xTaskResumeAll>
 80080fe:	e77a      	b.n	8007ff6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008102:	f000 f8a1 	bl	8008248 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008106:	f000 fb6f 	bl	80087e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800810a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800810c:	f000 f8ee 	bl	80082ec <prvIsQueueEmpty>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	f43f af6f 	beq.w	8007ff6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008118:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800811a:	4618      	mov	r0, r3
 800811c:	3730      	adds	r7, #48	; 0x30
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	e000ed04 	.word	0xe000ed04

08008128 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008134:	2300      	movs	r3, #0
 8008136:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10d      	bne.n	8008162 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d14d      	bne.n	80081ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 ff44 	bl	8008fe0 <xTaskPriorityDisinherit>
 8008158:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	609a      	str	r2, [r3, #8]
 8008160:	e043      	b.n	80081ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d119      	bne.n	800819c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6858      	ldr	r0, [r3, #4]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008170:	461a      	mov	r2, r3
 8008172:	68b9      	ldr	r1, [r7, #8]
 8008174:	f002 f9cd 	bl	800a512 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	441a      	add	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	429a      	cmp	r2, r3
 8008190:	d32b      	bcc.n	80081ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	605a      	str	r2, [r3, #4]
 800819a:	e026      	b.n	80081ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	68d8      	ldr	r0, [r3, #12]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a4:	461a      	mov	r2, r3
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	f002 f9b3 	bl	800a512 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b4:	425b      	negs	r3, r3
 80081b6:	441a      	add	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	68da      	ldr	r2, [r3, #12]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d207      	bcs.n	80081d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689a      	ldr	r2, [r3, #8]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d0:	425b      	negs	r3, r3
 80081d2:	441a      	add	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d105      	bne.n	80081ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80081f2:	697b      	ldr	r3, [r7, #20]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	2b00      	cmp	r3, #0
 800820c:	d018      	beq.n	8008240 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	441a      	add	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	429a      	cmp	r2, r3
 8008226:	d303      	bcc.n	8008230 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68d9      	ldr	r1, [r3, #12]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	461a      	mov	r2, r3
 800823a:	6838      	ldr	r0, [r7, #0]
 800823c:	f002 f969 	bl	800a512 <memcpy>
	}
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008250:	f001 fc00 	bl	8009a54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800825a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800825c:	e011      	b.n	8008282 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	2b00      	cmp	r3, #0
 8008264:	d012      	beq.n	800828c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	3324      	adds	r3, #36	; 0x24
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fcd8 	bl	8008c20 <xTaskRemoveFromEventList>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008276:	f000 fdaf 	bl	8008dd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	3b01      	subs	r3, #1
 800827e:	b2db      	uxtb	r3, r3
 8008280:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008286:	2b00      	cmp	r3, #0
 8008288:	dce9      	bgt.n	800825e <prvUnlockQueue+0x16>
 800828a:	e000      	b.n	800828e <prvUnlockQueue+0x46>
					break;
 800828c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	22ff      	movs	r2, #255	; 0xff
 8008292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008296:	f001 fc0d 	bl	8009ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800829a:	f001 fbdb 	bl	8009a54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082a6:	e011      	b.n	80082cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d012      	beq.n	80082d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3310      	adds	r3, #16
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fcb3 	bl	8008c20 <xTaskRemoveFromEventList>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082c0:	f000 fd8a 	bl	8008dd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082c4:	7bbb      	ldrb	r3, [r7, #14]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	dce9      	bgt.n	80082a8 <prvUnlockQueue+0x60>
 80082d4:	e000      	b.n	80082d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	22ff      	movs	r2, #255	; 0xff
 80082dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80082e0:	f001 fbe8 	bl	8009ab4 <vPortExitCritical>
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082f4:	f001 fbae 	bl	8009a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d102      	bne.n	8008306 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008300:	2301      	movs	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e001      	b.n	800830a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800830a:	f001 fbd3 	bl	8009ab4 <vPortExitCritical>

	return xReturn;
 800830e:	68fb      	ldr	r3, [r7, #12]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008320:	f001 fb98 	bl	8009a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832c:	429a      	cmp	r2, r3
 800832e:	d102      	bne.n	8008336 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008330:	2301      	movs	r3, #1
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	e001      	b.n	800833a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800833a:	f001 fbbb 	bl	8009ab4 <vPortExitCritical>

	return xReturn;
 800833e:	68fb      	ldr	r3, [r7, #12]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	e014      	b.n	8008382 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008358:	4a0f      	ldr	r2, [pc, #60]	; (8008398 <vQueueAddToRegistry+0x50>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10b      	bne.n	800837c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008364:	490c      	ldr	r1, [pc, #48]	; (8008398 <vQueueAddToRegistry+0x50>)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800836e:	4a0a      	ldr	r2, [pc, #40]	; (8008398 <vQueueAddToRegistry+0x50>)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	4413      	add	r3, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800837a:	e006      	b.n	800838a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3301      	adds	r3, #1
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b07      	cmp	r3, #7
 8008386:	d9e7      	bls.n	8008358 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008388:	bf00      	nop
 800838a:	bf00      	nop
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20000b50 	.word	0x20000b50

0800839c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083ac:	f001 fb52 	bl	8009a54 <vPortEnterCritical>
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083b6:	b25b      	sxtb	r3, r3
 80083b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083bc:	d103      	bne.n	80083c6 <vQueueWaitForMessageRestricted+0x2a>
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083cc:	b25b      	sxtb	r3, r3
 80083ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d2:	d103      	bne.n	80083dc <vQueueWaitForMessageRestricted+0x40>
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083dc:	f001 fb6a 	bl	8009ab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d106      	bne.n	80083f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	3324      	adds	r3, #36	; 0x24
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 fbe9 	bl	8008bc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80083f6:	6978      	ldr	r0, [r7, #20]
 80083f8:	f7ff ff26 	bl	8008248 <prvUnlockQueue>
	}
 80083fc:	bf00      	nop
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08e      	sub	sp, #56	; 0x38
 8008408:	af04      	add	r7, sp, #16
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	623b      	str	r3, [r7, #32]
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800842e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10a      	bne.n	800844a <xTaskCreateStatic+0x46>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	61fb      	str	r3, [r7, #28]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800844a:	23bc      	movs	r3, #188	; 0xbc
 800844c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	2bbc      	cmp	r3, #188	; 0xbc
 8008452:	d00a      	beq.n	800846a <xTaskCreateStatic+0x66>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	61bb      	str	r3, [r7, #24]
}
 8008466:	bf00      	nop
 8008468:	e7fe      	b.n	8008468 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800846a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	2b00      	cmp	r3, #0
 8008470:	d01e      	beq.n	80084b0 <xTaskCreateStatic+0xac>
 8008472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01b      	beq.n	80084b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008480:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	2202      	movs	r2, #2
 8008486:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800848a:	2300      	movs	r3, #0
 800848c:	9303      	str	r3, [sp, #12]
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	9302      	str	r3, [sp, #8]
 8008492:	f107 0314 	add.w	r3, r7, #20
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 f80c 	bl	80084c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084aa:	f000 f8af 	bl	800860c <prvAddNewTaskToReadyList>
 80084ae:	e001      	b.n	80084b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084b4:	697b      	ldr	r3, [r7, #20]
	}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3728      	adds	r7, #40	; 0x28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	461a      	mov	r2, r3
 80084d8:	21a5      	movs	r1, #165	; 0xa5
 80084da:	f002 f828 	bl	800a52e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084e8:	3b01      	subs	r3, #1
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	f023 0307 	bic.w	r3, r3, #7
 80084f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	617b      	str	r3, [r7, #20]
}
 8008514:	bf00      	nop
 8008516:	e7fe      	b.n	8008516 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d01f      	beq.n	800855e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800851e:	2300      	movs	r3, #0
 8008520:	61fb      	str	r3, [r7, #28]
 8008522:	e012      	b.n	800854a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	4413      	add	r3, r2
 800852a:	7819      	ldrb	r1, [r3, #0]
 800852c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	4413      	add	r3, r2
 8008532:	3334      	adds	r3, #52	; 0x34
 8008534:	460a      	mov	r2, r1
 8008536:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	4413      	add	r3, r2
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d006      	beq.n	8008552 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	3301      	adds	r3, #1
 8008548:	61fb      	str	r3, [r7, #28]
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	2b0f      	cmp	r3, #15
 800854e:	d9e9      	bls.n	8008524 <prvInitialiseNewTask+0x64>
 8008550:	e000      	b.n	8008554 <prvInitialiseNewTask+0x94>
			{
				break;
 8008552:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800855c:	e003      	b.n	8008566 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	2b37      	cmp	r3, #55	; 0x37
 800856a:	d901      	bls.n	8008570 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800856c:	2337      	movs	r3, #55	; 0x37
 800856e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008574:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800857a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	2200      	movs	r2, #0
 8008580:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	3304      	adds	r3, #4
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff f9bc 	bl	8007904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	3318      	adds	r3, #24
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff f9b7 	bl	8007904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800859a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	3354      	adds	r3, #84	; 0x54
 80085c0:	2260      	movs	r2, #96	; 0x60
 80085c2:	2100      	movs	r1, #0
 80085c4:	4618      	mov	r0, r3
 80085c6:	f001 ffb2 	bl	800a52e <memset>
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	4a0c      	ldr	r2, [pc, #48]	; (8008600 <prvInitialiseNewTask+0x140>)
 80085ce:	659a      	str	r2, [r3, #88]	; 0x58
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	4a0c      	ldr	r2, [pc, #48]	; (8008604 <prvInitialiseNewTask+0x144>)
 80085d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	4a0b      	ldr	r2, [pc, #44]	; (8008608 <prvInitialiseNewTask+0x148>)
 80085da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	69b8      	ldr	r0, [r7, #24]
 80085e2:	f001 f90d 	bl	8009800 <pxPortInitialiseStack>
 80085e6:	4602      	mov	r2, r0
 80085e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085f8:	bf00      	nop
 80085fa:	3720      	adds	r7, #32
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	0800cea0 	.word	0x0800cea0
 8008604:	0800cec0 	.word	0x0800cec0
 8008608:	0800ce80 	.word	0x0800ce80

0800860c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008614:	f001 fa1e 	bl	8009a54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008618:	4b2d      	ldr	r3, [pc, #180]	; (80086d0 <prvAddNewTaskToReadyList+0xc4>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3301      	adds	r3, #1
 800861e:	4a2c      	ldr	r2, [pc, #176]	; (80086d0 <prvAddNewTaskToReadyList+0xc4>)
 8008620:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008622:	4b2c      	ldr	r3, [pc, #176]	; (80086d4 <prvAddNewTaskToReadyList+0xc8>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d109      	bne.n	800863e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800862a:	4a2a      	ldr	r2, [pc, #168]	; (80086d4 <prvAddNewTaskToReadyList+0xc8>)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008630:	4b27      	ldr	r3, [pc, #156]	; (80086d0 <prvAddNewTaskToReadyList+0xc4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d110      	bne.n	800865a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008638:	f000 fbf2 	bl	8008e20 <prvInitialiseTaskLists>
 800863c:	e00d      	b.n	800865a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800863e:	4b26      	ldr	r3, [pc, #152]	; (80086d8 <prvAddNewTaskToReadyList+0xcc>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d109      	bne.n	800865a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008646:	4b23      	ldr	r3, [pc, #140]	; (80086d4 <prvAddNewTaskToReadyList+0xc8>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	429a      	cmp	r2, r3
 8008652:	d802      	bhi.n	800865a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008654:	4a1f      	ldr	r2, [pc, #124]	; (80086d4 <prvAddNewTaskToReadyList+0xc8>)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800865a:	4b20      	ldr	r3, [pc, #128]	; (80086dc <prvAddNewTaskToReadyList+0xd0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3301      	adds	r3, #1
 8008660:	4a1e      	ldr	r2, [pc, #120]	; (80086dc <prvAddNewTaskToReadyList+0xd0>)
 8008662:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008664:	4b1d      	ldr	r3, [pc, #116]	; (80086dc <prvAddNewTaskToReadyList+0xd0>)
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008670:	4b1b      	ldr	r3, [pc, #108]	; (80086e0 <prvAddNewTaskToReadyList+0xd4>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	429a      	cmp	r2, r3
 8008676:	d903      	bls.n	8008680 <prvAddNewTaskToReadyList+0x74>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	4a18      	ldr	r2, [pc, #96]	; (80086e0 <prvAddNewTaskToReadyList+0xd4>)
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4a15      	ldr	r2, [pc, #84]	; (80086e4 <prvAddNewTaskToReadyList+0xd8>)
 800868e:	441a      	add	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3304      	adds	r3, #4
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f7ff f941 	bl	800791e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800869c:	f001 fa0a 	bl	8009ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086a0:	4b0d      	ldr	r3, [pc, #52]	; (80086d8 <prvAddNewTaskToReadyList+0xcc>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00e      	beq.n	80086c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086a8:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <prvAddNewTaskToReadyList+0xc8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d207      	bcs.n	80086c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086b6:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <prvAddNewTaskToReadyList+0xdc>)
 80086b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	20001064 	.word	0x20001064
 80086d4:	20000b90 	.word	0x20000b90
 80086d8:	20001070 	.word	0x20001070
 80086dc:	20001080 	.word	0x20001080
 80086e0:	2000106c 	.word	0x2000106c
 80086e4:	20000b94 	.word	0x20000b94
 80086e8:	e000ed04 	.word	0xe000ed04

080086ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08a      	sub	sp, #40	; 0x28
 80086f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086f6:	2300      	movs	r3, #0
 80086f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086fa:	463a      	mov	r2, r7
 80086fc:	1d39      	adds	r1, r7, #4
 80086fe:	f107 0308 	add.w	r3, r7, #8
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff f8aa 	bl	800785c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	9202      	str	r2, [sp, #8]
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	2300      	movs	r3, #0
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	2300      	movs	r3, #0
 8008718:	460a      	mov	r2, r1
 800871a:	4924      	ldr	r1, [pc, #144]	; (80087ac <vTaskStartScheduler+0xc0>)
 800871c:	4824      	ldr	r0, [pc, #144]	; (80087b0 <vTaskStartScheduler+0xc4>)
 800871e:	f7ff fe71 	bl	8008404 <xTaskCreateStatic>
 8008722:	4603      	mov	r3, r0
 8008724:	4a23      	ldr	r2, [pc, #140]	; (80087b4 <vTaskStartScheduler+0xc8>)
 8008726:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008728:	4b22      	ldr	r3, [pc, #136]	; (80087b4 <vTaskStartScheduler+0xc8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008730:	2301      	movs	r3, #1
 8008732:	617b      	str	r3, [r7, #20]
 8008734:	e001      	b.n	800873a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008736:	2300      	movs	r3, #0
 8008738:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d102      	bne.n	8008746 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008740:	f000 fd10 	bl	8009164 <xTimerCreateTimerTask>
 8008744:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d11b      	bne.n	8008784 <vTaskStartScheduler+0x98>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	613b      	str	r3, [r7, #16]
}
 800875e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008760:	4b15      	ldr	r3, [pc, #84]	; (80087b8 <vTaskStartScheduler+0xcc>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3354      	adds	r3, #84	; 0x54
 8008766:	4a15      	ldr	r2, [pc, #84]	; (80087bc <vTaskStartScheduler+0xd0>)
 8008768:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800876a:	4b15      	ldr	r3, [pc, #84]	; (80087c0 <vTaskStartScheduler+0xd4>)
 800876c:	f04f 32ff 	mov.w	r2, #4294967295
 8008770:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008772:	4b14      	ldr	r3, [pc, #80]	; (80087c4 <vTaskStartScheduler+0xd8>)
 8008774:	2201      	movs	r2, #1
 8008776:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008778:	4b13      	ldr	r3, [pc, #76]	; (80087c8 <vTaskStartScheduler+0xdc>)
 800877a:	2200      	movs	r2, #0
 800877c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800877e:	f001 f8c7 	bl	8009910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008782:	e00e      	b.n	80087a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d10a      	bne.n	80087a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	60fb      	str	r3, [r7, #12]
}
 800879e:	bf00      	nop
 80087a0:	e7fe      	b.n	80087a0 <vTaskStartScheduler+0xb4>
}
 80087a2:	bf00      	nop
 80087a4:	3718      	adds	r7, #24
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	0800ce50 	.word	0x0800ce50
 80087b0:	08008df1 	.word	0x08008df1
 80087b4:	20001088 	.word	0x20001088
 80087b8:	20000b90 	.word	0x20000b90
 80087bc:	20000010 	.word	0x20000010
 80087c0:	20001084 	.word	0x20001084
 80087c4:	20001070 	.word	0x20001070
 80087c8:	20001068 	.word	0x20001068

080087cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80087d0:	4b04      	ldr	r3, [pc, #16]	; (80087e4 <vTaskSuspendAll+0x18>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	4a03      	ldr	r2, [pc, #12]	; (80087e4 <vTaskSuspendAll+0x18>)
 80087d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80087da:	bf00      	nop
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	2000108c 	.word	0x2000108c

080087e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087f6:	4b42      	ldr	r3, [pc, #264]	; (8008900 <xTaskResumeAll+0x118>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10a      	bne.n	8008814 <xTaskResumeAll+0x2c>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	603b      	str	r3, [r7, #0]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008814:	f001 f91e 	bl	8009a54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008818:	4b39      	ldr	r3, [pc, #228]	; (8008900 <xTaskResumeAll+0x118>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3b01      	subs	r3, #1
 800881e:	4a38      	ldr	r2, [pc, #224]	; (8008900 <xTaskResumeAll+0x118>)
 8008820:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008822:	4b37      	ldr	r3, [pc, #220]	; (8008900 <xTaskResumeAll+0x118>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d162      	bne.n	80088f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800882a:	4b36      	ldr	r3, [pc, #216]	; (8008904 <xTaskResumeAll+0x11c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d05e      	beq.n	80088f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008832:	e02f      	b.n	8008894 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008834:	4b34      	ldr	r3, [pc, #208]	; (8008908 <xTaskResumeAll+0x120>)
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3318      	adds	r3, #24
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff f8c9 	bl	80079d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3304      	adds	r3, #4
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff f8c4 	bl	80079d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008854:	4b2d      	ldr	r3, [pc, #180]	; (800890c <xTaskResumeAll+0x124>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	429a      	cmp	r2, r3
 800885a:	d903      	bls.n	8008864 <xTaskResumeAll+0x7c>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	4a2a      	ldr	r2, [pc, #168]	; (800890c <xTaskResumeAll+0x124>)
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008868:	4613      	mov	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4413      	add	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4a27      	ldr	r2, [pc, #156]	; (8008910 <xTaskResumeAll+0x128>)
 8008872:	441a      	add	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3304      	adds	r3, #4
 8008878:	4619      	mov	r1, r3
 800887a:	4610      	mov	r0, r2
 800887c:	f7ff f84f 	bl	800791e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008884:	4b23      	ldr	r3, [pc, #140]	; (8008914 <xTaskResumeAll+0x12c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888a:	429a      	cmp	r2, r3
 800888c:	d302      	bcc.n	8008894 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800888e:	4b22      	ldr	r3, [pc, #136]	; (8008918 <xTaskResumeAll+0x130>)
 8008890:	2201      	movs	r2, #1
 8008892:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008894:	4b1c      	ldr	r3, [pc, #112]	; (8008908 <xTaskResumeAll+0x120>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1cb      	bne.n	8008834 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088a2:	f000 fb5f 	bl	8008f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80088a6:	4b1d      	ldr	r3, [pc, #116]	; (800891c <xTaskResumeAll+0x134>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d010      	beq.n	80088d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088b2:	f000 f847 	bl	8008944 <xTaskIncrementTick>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80088bc:	4b16      	ldr	r3, [pc, #88]	; (8008918 <xTaskResumeAll+0x130>)
 80088be:	2201      	movs	r2, #1
 80088c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f1      	bne.n	80088b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80088ce:	4b13      	ldr	r3, [pc, #76]	; (800891c <xTaskResumeAll+0x134>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088d4:	4b10      	ldr	r3, [pc, #64]	; (8008918 <xTaskResumeAll+0x130>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d009      	beq.n	80088f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088dc:	2301      	movs	r3, #1
 80088de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088e0:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <xTaskResumeAll+0x138>)
 80088e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088f0:	f001 f8e0 	bl	8009ab4 <vPortExitCritical>

	return xAlreadyYielded;
 80088f4:	68bb      	ldr	r3, [r7, #8]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	2000108c 	.word	0x2000108c
 8008904:	20001064 	.word	0x20001064
 8008908:	20001024 	.word	0x20001024
 800890c:	2000106c 	.word	0x2000106c
 8008910:	20000b94 	.word	0x20000b94
 8008914:	20000b90 	.word	0x20000b90
 8008918:	20001078 	.word	0x20001078
 800891c:	20001074 	.word	0x20001074
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800892a:	4b05      	ldr	r3, [pc, #20]	; (8008940 <xTaskGetTickCount+0x1c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008930:	687b      	ldr	r3, [r7, #4]
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	20001068 	.word	0x20001068

08008944 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800894a:	2300      	movs	r3, #0
 800894c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800894e:	4b4f      	ldr	r3, [pc, #316]	; (8008a8c <xTaskIncrementTick+0x148>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	f040 808f 	bne.w	8008a76 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008958:	4b4d      	ldr	r3, [pc, #308]	; (8008a90 <xTaskIncrementTick+0x14c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3301      	adds	r3, #1
 800895e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008960:	4a4b      	ldr	r2, [pc, #300]	; (8008a90 <xTaskIncrementTick+0x14c>)
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d120      	bne.n	80089ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800896c:	4b49      	ldr	r3, [pc, #292]	; (8008a94 <xTaskIncrementTick+0x150>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <xTaskIncrementTick+0x48>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	603b      	str	r3, [r7, #0]
}
 8008988:	bf00      	nop
 800898a:	e7fe      	b.n	800898a <xTaskIncrementTick+0x46>
 800898c:	4b41      	ldr	r3, [pc, #260]	; (8008a94 <xTaskIncrementTick+0x150>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	4b41      	ldr	r3, [pc, #260]	; (8008a98 <xTaskIncrementTick+0x154>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a3f      	ldr	r2, [pc, #252]	; (8008a94 <xTaskIncrementTick+0x150>)
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	4a3f      	ldr	r2, [pc, #252]	; (8008a98 <xTaskIncrementTick+0x154>)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	4b3e      	ldr	r3, [pc, #248]	; (8008a9c <xTaskIncrementTick+0x158>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3301      	adds	r3, #1
 80089a6:	4a3d      	ldr	r2, [pc, #244]	; (8008a9c <xTaskIncrementTick+0x158>)
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	f000 fadb 	bl	8008f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089ae:	4b3c      	ldr	r3, [pc, #240]	; (8008aa0 <xTaskIncrementTick+0x15c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d349      	bcc.n	8008a4c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089b8:	4b36      	ldr	r3, [pc, #216]	; (8008a94 <xTaskIncrementTick+0x150>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089c2:	4b37      	ldr	r3, [pc, #220]	; (8008aa0 <xTaskIncrementTick+0x15c>)
 80089c4:	f04f 32ff 	mov.w	r2, #4294967295
 80089c8:	601a      	str	r2, [r3, #0]
					break;
 80089ca:	e03f      	b.n	8008a4c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089cc:	4b31      	ldr	r3, [pc, #196]	; (8008a94 <xTaskIncrementTick+0x150>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d203      	bcs.n	80089ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089e4:	4a2e      	ldr	r2, [pc, #184]	; (8008aa0 <xTaskIncrementTick+0x15c>)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089ea:	e02f      	b.n	8008a4c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	3304      	adds	r3, #4
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe fff1 	bl	80079d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d004      	beq.n	8008a08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	3318      	adds	r3, #24
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe ffe8 	bl	80079d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0c:	4b25      	ldr	r3, [pc, #148]	; (8008aa4 <xTaskIncrementTick+0x160>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d903      	bls.n	8008a1c <xTaskIncrementTick+0xd8>
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a18:	4a22      	ldr	r2, [pc, #136]	; (8008aa4 <xTaskIncrementTick+0x160>)
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a20:	4613      	mov	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4a1f      	ldr	r2, [pc, #124]	; (8008aa8 <xTaskIncrementTick+0x164>)
 8008a2a:	441a      	add	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f7fe ff73 	bl	800791e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3c:	4b1b      	ldr	r3, [pc, #108]	; (8008aac <xTaskIncrementTick+0x168>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d3b8      	bcc.n	80089b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008a46:	2301      	movs	r3, #1
 8008a48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a4a:	e7b5      	b.n	80089b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a4c:	4b17      	ldr	r3, [pc, #92]	; (8008aac <xTaskIncrementTick+0x168>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a52:	4915      	ldr	r1, [pc, #84]	; (8008aa8 <xTaskIncrementTick+0x164>)
 8008a54:	4613      	mov	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	440b      	add	r3, r1
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d901      	bls.n	8008a68 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008a64:	2301      	movs	r3, #1
 8008a66:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a68:	4b11      	ldr	r3, [pc, #68]	; (8008ab0 <xTaskIncrementTick+0x16c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d007      	beq.n	8008a80 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008a70:	2301      	movs	r3, #1
 8008a72:	617b      	str	r3, [r7, #20]
 8008a74:	e004      	b.n	8008a80 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a76:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <xTaskIncrementTick+0x170>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	4a0d      	ldr	r2, [pc, #52]	; (8008ab4 <xTaskIncrementTick+0x170>)
 8008a7e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a80:	697b      	ldr	r3, [r7, #20]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	2000108c 	.word	0x2000108c
 8008a90:	20001068 	.word	0x20001068
 8008a94:	2000101c 	.word	0x2000101c
 8008a98:	20001020 	.word	0x20001020
 8008a9c:	2000107c 	.word	0x2000107c
 8008aa0:	20001084 	.word	0x20001084
 8008aa4:	2000106c 	.word	0x2000106c
 8008aa8:	20000b94 	.word	0x20000b94
 8008aac:	20000b90 	.word	0x20000b90
 8008ab0:	20001078 	.word	0x20001078
 8008ab4:	20001074 	.word	0x20001074

08008ab8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008abe:	4b2a      	ldr	r3, [pc, #168]	; (8008b68 <vTaskSwitchContext+0xb0>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ac6:	4b29      	ldr	r3, [pc, #164]	; (8008b6c <vTaskSwitchContext+0xb4>)
 8008ac8:	2201      	movs	r2, #1
 8008aca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008acc:	e046      	b.n	8008b5c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008ace:	4b27      	ldr	r3, [pc, #156]	; (8008b6c <vTaskSwitchContext+0xb4>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad4:	4b26      	ldr	r3, [pc, #152]	; (8008b70 <vTaskSwitchContext+0xb8>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	e010      	b.n	8008afe <vTaskSwitchContext+0x46>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10a      	bne.n	8008af8 <vTaskSwitchContext+0x40>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	607b      	str	r3, [r7, #4]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <vTaskSwitchContext+0x3e>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	491d      	ldr	r1, [pc, #116]	; (8008b74 <vTaskSwitchContext+0xbc>)
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4613      	mov	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	440b      	add	r3, r1
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0e4      	beq.n	8008adc <vTaskSwitchContext+0x24>
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4613      	mov	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4a15      	ldr	r2, [pc, #84]	; (8008b74 <vTaskSwitchContext+0xbc>)
 8008b1e:	4413      	add	r3, r2
 8008b20:	60bb      	str	r3, [r7, #8]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	605a      	str	r2, [r3, #4]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	3308      	adds	r3, #8
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d104      	bne.n	8008b42 <vTaskSwitchContext+0x8a>
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	605a      	str	r2, [r3, #4]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	4a0b      	ldr	r2, [pc, #44]	; (8008b78 <vTaskSwitchContext+0xc0>)
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	4a08      	ldr	r2, [pc, #32]	; (8008b70 <vTaskSwitchContext+0xb8>)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b52:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <vTaskSwitchContext+0xc0>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3354      	adds	r3, #84	; 0x54
 8008b58:	4a08      	ldr	r2, [pc, #32]	; (8008b7c <vTaskSwitchContext+0xc4>)
 8008b5a:	6013      	str	r3, [r2, #0]
}
 8008b5c:	bf00      	nop
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	2000108c 	.word	0x2000108c
 8008b6c:	20001078 	.word	0x20001078
 8008b70:	2000106c 	.word	0x2000106c
 8008b74:	20000b94 	.word	0x20000b94
 8008b78:	20000b90 	.word	0x20000b90
 8008b7c:	20000010 	.word	0x20000010

08008b80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	60fb      	str	r3, [r7, #12]
}
 8008ba2:	bf00      	nop
 8008ba4:	e7fe      	b.n	8008ba4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ba6:	4b07      	ldr	r3, [pc, #28]	; (8008bc4 <vTaskPlaceOnEventList+0x44>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3318      	adds	r3, #24
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7fe fed9 	bl	8007966 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	6838      	ldr	r0, [r7, #0]
 8008bb8:	f000 fa80 	bl	80090bc <prvAddCurrentTaskToDelayedList>
}
 8008bbc:	bf00      	nop
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	20000b90 	.word	0x20000b90

08008bc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10a      	bne.n	8008bf0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	617b      	str	r3, [r7, #20]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bf0:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <vTaskPlaceOnEventListRestricted+0x54>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3318      	adds	r3, #24
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7fe fe90 	bl	800791e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008c04:	f04f 33ff 	mov.w	r3, #4294967295
 8008c08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	68b8      	ldr	r0, [r7, #8]
 8008c0e:	f000 fa55 	bl	80090bc <prvAddCurrentTaskToDelayedList>
	}
 8008c12:	bf00      	nop
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20000b90 	.word	0x20000b90

08008c20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10a      	bne.n	8008c4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	60fb      	str	r3, [r7, #12]
}
 8008c48:	bf00      	nop
 8008c4a:	e7fe      	b.n	8008c4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	3318      	adds	r3, #24
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fe fec1 	bl	80079d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c56:	4b1e      	ldr	r3, [pc, #120]	; (8008cd0 <xTaskRemoveFromEventList+0xb0>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d11d      	bne.n	8008c9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	3304      	adds	r3, #4
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe feb8 	bl	80079d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6c:	4b19      	ldr	r3, [pc, #100]	; (8008cd4 <xTaskRemoveFromEventList+0xb4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d903      	bls.n	8008c7c <xTaskRemoveFromEventList+0x5c>
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c78:	4a16      	ldr	r2, [pc, #88]	; (8008cd4 <xTaskRemoveFromEventList+0xb4>)
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c80:	4613      	mov	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4a13      	ldr	r2, [pc, #76]	; (8008cd8 <xTaskRemoveFromEventList+0xb8>)
 8008c8a:	441a      	add	r2, r3
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	4619      	mov	r1, r3
 8008c92:	4610      	mov	r0, r2
 8008c94:	f7fe fe43 	bl	800791e <vListInsertEnd>
 8008c98:	e005      	b.n	8008ca6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	3318      	adds	r3, #24
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	480e      	ldr	r0, [pc, #56]	; (8008cdc <xTaskRemoveFromEventList+0xbc>)
 8008ca2:	f7fe fe3c 	bl	800791e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008caa:	4b0d      	ldr	r3, [pc, #52]	; (8008ce0 <xTaskRemoveFromEventList+0xc0>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d905      	bls.n	8008cc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ce4 <xTaskRemoveFromEventList+0xc4>)
 8008cba:	2201      	movs	r2, #1
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	e001      	b.n	8008cc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008cc4:	697b      	ldr	r3, [r7, #20]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	2000108c 	.word	0x2000108c
 8008cd4:	2000106c 	.word	0x2000106c
 8008cd8:	20000b94 	.word	0x20000b94
 8008cdc:	20001024 	.word	0x20001024
 8008ce0:	20000b90 	.word	0x20000b90
 8008ce4:	20001078 	.word	0x20001078

08008ce8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cf0:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <vTaskInternalSetTimeOutState+0x24>)
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cf8:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <vTaskInternalSetTimeOutState+0x28>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	605a      	str	r2, [r3, #4]
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	2000107c 	.word	0x2000107c
 8008d10:	20001068 	.word	0x20001068

08008d14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10a      	bne.n	8008d3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	613b      	str	r3, [r7, #16]
}
 8008d36:	bf00      	nop
 8008d38:	e7fe      	b.n	8008d38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10a      	bne.n	8008d56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	60fb      	str	r3, [r7, #12]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d56:	f000 fe7d 	bl	8009a54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d5a:	4b1d      	ldr	r3, [pc, #116]	; (8008dd0 <xTaskCheckForTimeOut+0xbc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d72:	d102      	bne.n	8008d7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d74:	2300      	movs	r3, #0
 8008d76:	61fb      	str	r3, [r7, #28]
 8008d78:	e023      	b.n	8008dc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <xTaskCheckForTimeOut+0xc0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d007      	beq.n	8008d96 <xTaskCheckForTimeOut+0x82>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d302      	bcc.n	8008d96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d90:	2301      	movs	r3, #1
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e015      	b.n	8008dc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d20b      	bcs.n	8008db8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	1ad2      	subs	r2, r2, r3
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff ff9b 	bl	8008ce8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008db2:	2300      	movs	r3, #0
 8008db4:	61fb      	str	r3, [r7, #28]
 8008db6:	e004      	b.n	8008dc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008dc2:	f000 fe77 	bl	8009ab4 <vPortExitCritical>

	return xReturn;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20001068 	.word	0x20001068
 8008dd4:	2000107c 	.word	0x2000107c

08008dd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008dd8:	b480      	push	{r7}
 8008dda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ddc:	4b03      	ldr	r3, [pc, #12]	; (8008dec <vTaskMissedYield+0x14>)
 8008dde:	2201      	movs	r2, #1
 8008de0:	601a      	str	r2, [r3, #0]
}
 8008de2:	bf00      	nop
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	20001078 	.word	0x20001078

08008df0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008df8:	f000 f852 	bl	8008ea0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008dfc:	4b06      	ldr	r3, [pc, #24]	; (8008e18 <prvIdleTask+0x28>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d9f9      	bls.n	8008df8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e04:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <prvIdleTask+0x2c>)
 8008e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e14:	e7f0      	b.n	8008df8 <prvIdleTask+0x8>
 8008e16:	bf00      	nop
 8008e18:	20000b94 	.word	0x20000b94
 8008e1c:	e000ed04 	.word	0xe000ed04

08008e20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e26:	2300      	movs	r3, #0
 8008e28:	607b      	str	r3, [r7, #4]
 8008e2a:	e00c      	b.n	8008e46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4413      	add	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4a12      	ldr	r2, [pc, #72]	; (8008e80 <prvInitialiseTaskLists+0x60>)
 8008e38:	4413      	add	r3, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe fd42 	bl	80078c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3301      	adds	r3, #1
 8008e44:	607b      	str	r3, [r7, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b37      	cmp	r3, #55	; 0x37
 8008e4a:	d9ef      	bls.n	8008e2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e4c:	480d      	ldr	r0, [pc, #52]	; (8008e84 <prvInitialiseTaskLists+0x64>)
 8008e4e:	f7fe fd39 	bl	80078c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e52:	480d      	ldr	r0, [pc, #52]	; (8008e88 <prvInitialiseTaskLists+0x68>)
 8008e54:	f7fe fd36 	bl	80078c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e58:	480c      	ldr	r0, [pc, #48]	; (8008e8c <prvInitialiseTaskLists+0x6c>)
 8008e5a:	f7fe fd33 	bl	80078c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e5e:	480c      	ldr	r0, [pc, #48]	; (8008e90 <prvInitialiseTaskLists+0x70>)
 8008e60:	f7fe fd30 	bl	80078c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e64:	480b      	ldr	r0, [pc, #44]	; (8008e94 <prvInitialiseTaskLists+0x74>)
 8008e66:	f7fe fd2d 	bl	80078c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e6a:	4b0b      	ldr	r3, [pc, #44]	; (8008e98 <prvInitialiseTaskLists+0x78>)
 8008e6c:	4a05      	ldr	r2, [pc, #20]	; (8008e84 <prvInitialiseTaskLists+0x64>)
 8008e6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e70:	4b0a      	ldr	r3, [pc, #40]	; (8008e9c <prvInitialiseTaskLists+0x7c>)
 8008e72:	4a05      	ldr	r2, [pc, #20]	; (8008e88 <prvInitialiseTaskLists+0x68>)
 8008e74:	601a      	str	r2, [r3, #0]
}
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	20000b94 	.word	0x20000b94
 8008e84:	20000ff4 	.word	0x20000ff4
 8008e88:	20001008 	.word	0x20001008
 8008e8c:	20001024 	.word	0x20001024
 8008e90:	20001038 	.word	0x20001038
 8008e94:	20001050 	.word	0x20001050
 8008e98:	2000101c 	.word	0x2000101c
 8008e9c:	20001020 	.word	0x20001020

08008ea0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ea6:	e019      	b.n	8008edc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ea8:	f000 fdd4 	bl	8009a54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eac:	4b10      	ldr	r3, [pc, #64]	; (8008ef0 <prvCheckTasksWaitingTermination+0x50>)
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe fd8d 	bl	80079d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ebe:	4b0d      	ldr	r3, [pc, #52]	; (8008ef4 <prvCheckTasksWaitingTermination+0x54>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	4a0b      	ldr	r2, [pc, #44]	; (8008ef4 <prvCheckTasksWaitingTermination+0x54>)
 8008ec6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ec8:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <prvCheckTasksWaitingTermination+0x58>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	4a0a      	ldr	r2, [pc, #40]	; (8008ef8 <prvCheckTasksWaitingTermination+0x58>)
 8008ed0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ed2:	f000 fdef 	bl	8009ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f810 	bl	8008efc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008edc:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <prvCheckTasksWaitingTermination+0x58>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e1      	bne.n	8008ea8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20001038 	.word	0x20001038
 8008ef4:	20001064 	.word	0x20001064
 8008ef8:	2000104c 	.word	0x2000104c

08008efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	3354      	adds	r3, #84	; 0x54
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f002 f825 	bl	800af58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d108      	bne.n	8008f2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 febb 	bl	8009c98 <vPortFree>
				vPortFree( pxTCB );
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 feb8 	bl	8009c98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f28:	e018      	b.n	8008f5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d103      	bne.n	8008f3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 feaf 	bl	8009c98 <vPortFree>
	}
 8008f3a:	e00f      	b.n	8008f5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d00a      	beq.n	8008f5c <prvDeleteTCB+0x60>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	60fb      	str	r3, [r7, #12]
}
 8008f58:	bf00      	nop
 8008f5a:	e7fe      	b.n	8008f5a <prvDeleteTCB+0x5e>
	}
 8008f5c:	bf00      	nop
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f6a:	4b0c      	ldr	r3, [pc, #48]	; (8008f9c <prvResetNextTaskUnblockTime+0x38>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d104      	bne.n	8008f7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f74:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8008f76:	f04f 32ff 	mov.w	r2, #4294967295
 8008f7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f7c:	e008      	b.n	8008f90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f7e:	4b07      	ldr	r3, [pc, #28]	; (8008f9c <prvResetNextTaskUnblockTime+0x38>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	4a04      	ldr	r2, [pc, #16]	; (8008fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8008f8e:	6013      	str	r3, [r2, #0]
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	2000101c 	.word	0x2000101c
 8008fa0:	20001084 	.word	0x20001084

08008fa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008faa:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <xTaskGetSchedulerState+0x34>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d102      	bne.n	8008fb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	607b      	str	r3, [r7, #4]
 8008fb6:	e008      	b.n	8008fca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fb8:	4b08      	ldr	r3, [pc, #32]	; (8008fdc <xTaskGetSchedulerState+0x38>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d102      	bne.n	8008fc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	607b      	str	r3, [r7, #4]
 8008fc4:	e001      	b.n	8008fca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fca:	687b      	ldr	r3, [r7, #4]
	}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	20001070 	.word	0x20001070
 8008fdc:	2000108c 	.word	0x2000108c

08008fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008fec:	2300      	movs	r3, #0
 8008fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d056      	beq.n	80090a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ff6:	4b2e      	ldr	r3, [pc, #184]	; (80090b0 <xTaskPriorityDisinherit+0xd0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d00a      	beq.n	8009016 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	60fb      	str	r3, [r7, #12]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10a      	bne.n	8009034 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60bb      	str	r3, [r7, #8]
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009038:	1e5a      	subs	r2, r3, #1
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009046:	429a      	cmp	r2, r3
 8009048:	d02c      	beq.n	80090a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800904e:	2b00      	cmp	r3, #0
 8009050:	d128      	bne.n	80090a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	3304      	adds	r3, #4
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe fcbe 	bl	80079d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009074:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <xTaskPriorityDisinherit+0xd4>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	d903      	bls.n	8009084 <xTaskPriorityDisinherit+0xa4>
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	4a0c      	ldr	r2, [pc, #48]	; (80090b4 <xTaskPriorityDisinherit+0xd4>)
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009088:	4613      	mov	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4a09      	ldr	r2, [pc, #36]	; (80090b8 <xTaskPriorityDisinherit+0xd8>)
 8009092:	441a      	add	r2, r3
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	3304      	adds	r3, #4
 8009098:	4619      	mov	r1, r3
 800909a:	4610      	mov	r0, r2
 800909c:	f7fe fc3f 	bl	800791e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090a0:	2301      	movs	r3, #1
 80090a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090a4:	697b      	ldr	r3, [r7, #20]
	}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20000b90 	.word	0x20000b90
 80090b4:	2000106c 	.word	0x2000106c
 80090b8:	20000b94 	.word	0x20000b94

080090bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090c6:	4b21      	ldr	r3, [pc, #132]	; (800914c <prvAddCurrentTaskToDelayedList+0x90>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090cc:	4b20      	ldr	r3, [pc, #128]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fc80 	bl	80079d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090de:	d10a      	bne.n	80090f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090e6:	4b1a      	ldr	r3, [pc, #104]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4819      	ldr	r0, [pc, #100]	; (8009154 <prvAddCurrentTaskToDelayedList+0x98>)
 80090f0:	f7fe fc15 	bl	800791e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090f4:	e026      	b.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4413      	add	r3, r2
 80090fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090fe:	4b14      	ldr	r3, [pc, #80]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	429a      	cmp	r2, r3
 800910c:	d209      	bcs.n	8009122 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800910e:	4b12      	ldr	r3, [pc, #72]	; (8009158 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3304      	adds	r3, #4
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f7fe fc23 	bl	8007966 <vListInsert>
}
 8009120:	e010      	b.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009122:	4b0e      	ldr	r3, [pc, #56]	; (800915c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	4b0a      	ldr	r3, [pc, #40]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fe fc19 	bl	8007966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009134:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	429a      	cmp	r2, r3
 800913c:	d202      	bcs.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800913e:	4a08      	ldr	r2, [pc, #32]	; (8009160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6013      	str	r3, [r2, #0]
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	20001068 	.word	0x20001068
 8009150:	20000b90 	.word	0x20000b90
 8009154:	20001050 	.word	0x20001050
 8009158:	20001020 	.word	0x20001020
 800915c:	2000101c 	.word	0x2000101c
 8009160:	20001084 	.word	0x20001084

08009164 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08a      	sub	sp, #40	; 0x28
 8009168:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800916e:	f000 fb07 	bl	8009780 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009172:	4b1c      	ldr	r3, [pc, #112]	; (80091e4 <xTimerCreateTimerTask+0x80>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d021      	beq.n	80091be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009182:	1d3a      	adds	r2, r7, #4
 8009184:	f107 0108 	add.w	r1, r7, #8
 8009188:	f107 030c 	add.w	r3, r7, #12
 800918c:	4618      	mov	r0, r3
 800918e:	f7fe fb7f 	bl	8007890 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	9202      	str	r2, [sp, #8]
 800919a:	9301      	str	r3, [sp, #4]
 800919c:	2302      	movs	r3, #2
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	2300      	movs	r3, #0
 80091a2:	460a      	mov	r2, r1
 80091a4:	4910      	ldr	r1, [pc, #64]	; (80091e8 <xTimerCreateTimerTask+0x84>)
 80091a6:	4811      	ldr	r0, [pc, #68]	; (80091ec <xTimerCreateTimerTask+0x88>)
 80091a8:	f7ff f92c 	bl	8008404 <xTaskCreateStatic>
 80091ac:	4603      	mov	r3, r0
 80091ae:	4a10      	ldr	r2, [pc, #64]	; (80091f0 <xTimerCreateTimerTask+0x8c>)
 80091b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091b2:	4b0f      	ldr	r3, [pc, #60]	; (80091f0 <xTimerCreateTimerTask+0x8c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091ba:	2301      	movs	r3, #1
 80091bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10a      	bne.n	80091da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80091c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	613b      	str	r3, [r7, #16]
}
 80091d6:	bf00      	nop
 80091d8:	e7fe      	b.n	80091d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80091da:	697b      	ldr	r3, [r7, #20]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	200010c0 	.word	0x200010c0
 80091e8:	0800ce58 	.word	0x0800ce58
 80091ec:	08009329 	.word	0x08009329
 80091f0:	200010c4 	.word	0x200010c4

080091f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08a      	sub	sp, #40	; 0x28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009202:	2300      	movs	r3, #0
 8009204:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10a      	bne.n	8009222 <xTimerGenericCommand+0x2e>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	623b      	str	r3, [r7, #32]
}
 800921e:	bf00      	nop
 8009220:	e7fe      	b.n	8009220 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009222:	4b1a      	ldr	r3, [pc, #104]	; (800928c <xTimerGenericCommand+0x98>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d02a      	beq.n	8009280 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b05      	cmp	r3, #5
 800923a:	dc18      	bgt.n	800926e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800923c:	f7ff feb2 	bl	8008fa4 <xTaskGetSchedulerState>
 8009240:	4603      	mov	r3, r0
 8009242:	2b02      	cmp	r3, #2
 8009244:	d109      	bne.n	800925a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009246:	4b11      	ldr	r3, [pc, #68]	; (800928c <xTimerGenericCommand+0x98>)
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	f107 0110 	add.w	r1, r7, #16
 800924e:	2300      	movs	r3, #0
 8009250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009252:	f7fe fcef 	bl	8007c34 <xQueueGenericSend>
 8009256:	6278      	str	r0, [r7, #36]	; 0x24
 8009258:	e012      	b.n	8009280 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800925a:	4b0c      	ldr	r3, [pc, #48]	; (800928c <xTimerGenericCommand+0x98>)
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	f107 0110 	add.w	r1, r7, #16
 8009262:	2300      	movs	r3, #0
 8009264:	2200      	movs	r2, #0
 8009266:	f7fe fce5 	bl	8007c34 <xQueueGenericSend>
 800926a:	6278      	str	r0, [r7, #36]	; 0x24
 800926c:	e008      	b.n	8009280 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800926e:	4b07      	ldr	r3, [pc, #28]	; (800928c <xTimerGenericCommand+0x98>)
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	f107 0110 	add.w	r1, r7, #16
 8009276:	2300      	movs	r3, #0
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	f7fe fdd9 	bl	8007e30 <xQueueGenericSendFromISR>
 800927e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009282:	4618      	mov	r0, r3
 8009284:	3728      	adds	r7, #40	; 0x28
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	200010c0 	.word	0x200010c0

08009290 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af02      	add	r7, sp, #8
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800929a:	4b22      	ldr	r3, [pc, #136]	; (8009324 <prvProcessExpiredTimer+0x94>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	3304      	adds	r3, #4
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fe fb95 	bl	80079d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092b4:	f003 0304 	and.w	r3, r3, #4
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d022      	beq.n	8009302 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	699a      	ldr	r2, [r3, #24]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	18d1      	adds	r1, r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	6978      	ldr	r0, [r7, #20]
 80092ca:	f000 f8d1 	bl	8009470 <prvInsertTimerInActiveList>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d01f      	beq.n	8009314 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092d4:	2300      	movs	r3, #0
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	2300      	movs	r3, #0
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	2100      	movs	r1, #0
 80092de:	6978      	ldr	r0, [r7, #20]
 80092e0:	f7ff ff88 	bl	80091f4 <xTimerGenericCommand>
 80092e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d113      	bne.n	8009314 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	60fb      	str	r3, [r7, #12]
}
 80092fe:	bf00      	nop
 8009300:	e7fe      	b.n	8009300 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009308:	f023 0301 	bic.w	r3, r3, #1
 800930c:	b2da      	uxtb	r2, r3
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	6a1b      	ldr	r3, [r3, #32]
 8009318:	6978      	ldr	r0, [r7, #20]
 800931a:	4798      	blx	r3
}
 800931c:	bf00      	nop
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	200010b8 	.word	0x200010b8

08009328 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009330:	f107 0308 	add.w	r3, r7, #8
 8009334:	4618      	mov	r0, r3
 8009336:	f000 f857 	bl	80093e8 <prvGetNextExpireTime>
 800933a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	4619      	mov	r1, r3
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 f803 	bl	800934c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009346:	f000 f8d5 	bl	80094f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800934a:	e7f1      	b.n	8009330 <prvTimerTask+0x8>

0800934c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009356:	f7ff fa39 	bl	80087cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800935a:	f107 0308 	add.w	r3, r7, #8
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f866 	bl	8009430 <prvSampleTimeNow>
 8009364:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d130      	bne.n	80093ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <prvProcessTimerOrBlockTask+0x3c>
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	429a      	cmp	r2, r3
 8009378:	d806      	bhi.n	8009388 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800937a:	f7ff fa35 	bl	80087e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7ff ff85 	bl	8009290 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009386:	e024      	b.n	80093d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d008      	beq.n	80093a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800938e:	4b13      	ldr	r3, [pc, #76]	; (80093dc <prvProcessTimerOrBlockTask+0x90>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d101      	bne.n	800939c <prvProcessTimerOrBlockTask+0x50>
 8009398:	2301      	movs	r3, #1
 800939a:	e000      	b.n	800939e <prvProcessTimerOrBlockTask+0x52>
 800939c:	2300      	movs	r3, #0
 800939e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093a0:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <prvProcessTimerOrBlockTask+0x94>)
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	4619      	mov	r1, r3
 80093ae:	f7fe fff5 	bl	800839c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093b2:	f7ff fa19 	bl	80087e8 <xTaskResumeAll>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10a      	bne.n	80093d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093bc:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <prvProcessTimerOrBlockTask+0x98>)
 80093be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	f3bf 8f6f 	isb	sy
}
 80093cc:	e001      	b.n	80093d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093ce:	f7ff fa0b 	bl	80087e8 <xTaskResumeAll>
}
 80093d2:	bf00      	nop
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	200010bc 	.word	0x200010bc
 80093e0:	200010c0 	.word	0x200010c0
 80093e4:	e000ed04 	.word	0xe000ed04

080093e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093f0:	4b0e      	ldr	r3, [pc, #56]	; (800942c <prvGetNextExpireTime+0x44>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <prvGetNextExpireTime+0x16>
 80093fa:	2201      	movs	r2, #1
 80093fc:	e000      	b.n	8009400 <prvGetNextExpireTime+0x18>
 80093fe:	2200      	movs	r2, #0
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d105      	bne.n	8009418 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800940c:	4b07      	ldr	r3, [pc, #28]	; (800942c <prvGetNextExpireTime+0x44>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	e001      	b.n	800941c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800941c:	68fb      	ldr	r3, [r7, #12]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	200010b8 	.word	0x200010b8

08009430 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009438:	f7ff fa74 	bl	8008924 <xTaskGetTickCount>
 800943c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800943e:	4b0b      	ldr	r3, [pc, #44]	; (800946c <prvSampleTimeNow+0x3c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	429a      	cmp	r2, r3
 8009446:	d205      	bcs.n	8009454 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009448:	f000 f936 	bl	80096b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	e002      	b.n	800945a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800945a:	4a04      	ldr	r2, [pc, #16]	; (800946c <prvSampleTimeNow+0x3c>)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009460:	68fb      	ldr	r3, [r7, #12]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	200010c8 	.word	0x200010c8

08009470 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
 800947c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800947e:	2300      	movs	r3, #0
 8009480:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	429a      	cmp	r2, r3
 8009494:	d812      	bhi.n	80094bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	1ad2      	subs	r2, r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d302      	bcc.n	80094aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094a4:	2301      	movs	r3, #1
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	e01b      	b.n	80094e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094aa:	4b10      	ldr	r3, [pc, #64]	; (80094ec <prvInsertTimerInActiveList+0x7c>)
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3304      	adds	r3, #4
 80094b2:	4619      	mov	r1, r3
 80094b4:	4610      	mov	r0, r2
 80094b6:	f7fe fa56 	bl	8007966 <vListInsert>
 80094ba:	e012      	b.n	80094e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d206      	bcs.n	80094d2 <prvInsertTimerInActiveList+0x62>
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d302      	bcc.n	80094d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094cc:	2301      	movs	r3, #1
 80094ce:	617b      	str	r3, [r7, #20]
 80094d0:	e007      	b.n	80094e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094d2:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <prvInsertTimerInActiveList+0x80>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3304      	adds	r3, #4
 80094da:	4619      	mov	r1, r3
 80094dc:	4610      	mov	r0, r2
 80094de:	f7fe fa42 	bl	8007966 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094e2:	697b      	ldr	r3, [r7, #20]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	200010bc 	.word	0x200010bc
 80094f0:	200010b8 	.word	0x200010b8

080094f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b08e      	sub	sp, #56	; 0x38
 80094f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094fa:	e0ca      	b.n	8009692 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	da18      	bge.n	8009534 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009502:	1d3b      	adds	r3, r7, #4
 8009504:	3304      	adds	r3, #4
 8009506:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	61fb      	str	r3, [r7, #28]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800952a:	6850      	ldr	r0, [r2, #4]
 800952c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800952e:	6892      	ldr	r2, [r2, #8]
 8009530:	4611      	mov	r1, r2
 8009532:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	f2c0 80aa 	blt.w	8009690 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d004      	beq.n	8009552 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954a:	3304      	adds	r3, #4
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe fa43 	bl	80079d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009552:	463b      	mov	r3, r7
 8009554:	4618      	mov	r0, r3
 8009556:	f7ff ff6b 	bl	8009430 <prvSampleTimeNow>
 800955a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b09      	cmp	r3, #9
 8009560:	f200 8097 	bhi.w	8009692 <prvProcessReceivedCommands+0x19e>
 8009564:	a201      	add	r2, pc, #4	; (adr r2, 800956c <prvProcessReceivedCommands+0x78>)
 8009566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956a:	bf00      	nop
 800956c:	08009595 	.word	0x08009595
 8009570:	08009595 	.word	0x08009595
 8009574:	08009595 	.word	0x08009595
 8009578:	08009609 	.word	0x08009609
 800957c:	0800961d 	.word	0x0800961d
 8009580:	08009667 	.word	0x08009667
 8009584:	08009595 	.word	0x08009595
 8009588:	08009595 	.word	0x08009595
 800958c:	08009609 	.word	0x08009609
 8009590:	0800961d 	.word	0x0800961d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800959a:	f043 0301 	orr.w	r3, r3, #1
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	18d1      	adds	r1, r2, r3
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b4:	f7ff ff5c 	bl	8009470 <prvInsertTimerInActiveList>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d069      	beq.n	8009692 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095cc:	f003 0304 	and.w	r3, r3, #4
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d05e      	beq.n	8009692 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	441a      	add	r2, r3
 80095dc:	2300      	movs	r3, #0
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	2300      	movs	r3, #0
 80095e2:	2100      	movs	r1, #0
 80095e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095e6:	f7ff fe05 	bl	80091f4 <xTimerGenericCommand>
 80095ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d14f      	bne.n	8009692 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	61bb      	str	r3, [r7, #24]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800960e:	f023 0301 	bic.w	r3, r3, #1
 8009612:	b2da      	uxtb	r2, r3
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800961a:	e03a      	b.n	8009692 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009622:	f043 0301 	orr.w	r3, r3, #1
 8009626:	b2da      	uxtb	r2, r3
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	617b      	str	r3, [r7, #20]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	699a      	ldr	r2, [r3, #24]
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	18d1      	adds	r1, r2, r3
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800965e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009660:	f7ff ff06 	bl	8009470 <prvInsertTimerInActiveList>
					break;
 8009664:	e015      	b.n	8009692 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d103      	bne.n	800967c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009676:	f000 fb0f 	bl	8009c98 <vPortFree>
 800967a:	e00a      	b.n	8009692 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009682:	f023 0301 	bic.w	r3, r3, #1
 8009686:	b2da      	uxtb	r2, r3
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800968e:	e000      	b.n	8009692 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009690:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009692:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <prvProcessReceivedCommands+0x1c0>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	1d39      	adds	r1, r7, #4
 8009698:	2200      	movs	r2, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fc64 	bl	8007f68 <xQueueReceive>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f47f af2a 	bne.w	80094fc <prvProcessReceivedCommands+0x8>
	}
}
 80096a8:	bf00      	nop
 80096aa:	bf00      	nop
 80096ac:	3730      	adds	r7, #48	; 0x30
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	200010c0 	.word	0x200010c0

080096b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096be:	e048      	b.n	8009752 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096c0:	4b2d      	ldr	r3, [pc, #180]	; (8009778 <prvSwitchTimerLists+0xc0>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ca:	4b2b      	ldr	r3, [pc, #172]	; (8009778 <prvSwitchTimerLists+0xc0>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe f97d 	bl	80079d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d02e      	beq.n	8009752 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4413      	add	r3, r2
 80096fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	429a      	cmp	r2, r3
 8009704:	d90e      	bls.n	8009724 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009712:	4b19      	ldr	r3, [pc, #100]	; (8009778 <prvSwitchTimerLists+0xc0>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	3304      	adds	r3, #4
 800971a:	4619      	mov	r1, r3
 800971c:	4610      	mov	r0, r2
 800971e:	f7fe f922 	bl	8007966 <vListInsert>
 8009722:	e016      	b.n	8009752 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009724:	2300      	movs	r3, #0
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	2300      	movs	r3, #0
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	2100      	movs	r1, #0
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f7ff fd60 	bl	80091f4 <xTimerGenericCommand>
 8009734:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	603b      	str	r3, [r7, #0]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009752:	4b09      	ldr	r3, [pc, #36]	; (8009778 <prvSwitchTimerLists+0xc0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1b1      	bne.n	80096c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800975c:	4b06      	ldr	r3, [pc, #24]	; (8009778 <prvSwitchTimerLists+0xc0>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009762:	4b06      	ldr	r3, [pc, #24]	; (800977c <prvSwitchTimerLists+0xc4>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a04      	ldr	r2, [pc, #16]	; (8009778 <prvSwitchTimerLists+0xc0>)
 8009768:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800976a:	4a04      	ldr	r2, [pc, #16]	; (800977c <prvSwitchTimerLists+0xc4>)
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	6013      	str	r3, [r2, #0]
}
 8009770:	bf00      	nop
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	200010b8 	.word	0x200010b8
 800977c:	200010bc 	.word	0x200010bc

08009780 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009786:	f000 f965 	bl	8009a54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800978a:	4b15      	ldr	r3, [pc, #84]	; (80097e0 <prvCheckForValidListAndQueue+0x60>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d120      	bne.n	80097d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009792:	4814      	ldr	r0, [pc, #80]	; (80097e4 <prvCheckForValidListAndQueue+0x64>)
 8009794:	f7fe f896 	bl	80078c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009798:	4813      	ldr	r0, [pc, #76]	; (80097e8 <prvCheckForValidListAndQueue+0x68>)
 800979a:	f7fe f893 	bl	80078c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800979e:	4b13      	ldr	r3, [pc, #76]	; (80097ec <prvCheckForValidListAndQueue+0x6c>)
 80097a0:	4a10      	ldr	r2, [pc, #64]	; (80097e4 <prvCheckForValidListAndQueue+0x64>)
 80097a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097a4:	4b12      	ldr	r3, [pc, #72]	; (80097f0 <prvCheckForValidListAndQueue+0x70>)
 80097a6:	4a10      	ldr	r2, [pc, #64]	; (80097e8 <prvCheckForValidListAndQueue+0x68>)
 80097a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097aa:	2300      	movs	r3, #0
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <prvCheckForValidListAndQueue+0x74>)
 80097b0:	4a11      	ldr	r2, [pc, #68]	; (80097f8 <prvCheckForValidListAndQueue+0x78>)
 80097b2:	2110      	movs	r1, #16
 80097b4:	200a      	movs	r0, #10
 80097b6:	f7fe f9a1 	bl	8007afc <xQueueGenericCreateStatic>
 80097ba:	4603      	mov	r3, r0
 80097bc:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <prvCheckForValidListAndQueue+0x60>)
 80097be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097c0:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <prvCheckForValidListAndQueue+0x60>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d005      	beq.n	80097d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <prvCheckForValidListAndQueue+0x60>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	490b      	ldr	r1, [pc, #44]	; (80097fc <prvCheckForValidListAndQueue+0x7c>)
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fe fdba 	bl	8008348 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097d4:	f000 f96e 	bl	8009ab4 <vPortExitCritical>
}
 80097d8:	bf00      	nop
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	200010c0 	.word	0x200010c0
 80097e4:	20001090 	.word	0x20001090
 80097e8:	200010a4 	.word	0x200010a4
 80097ec:	200010b8 	.word	0x200010b8
 80097f0:	200010bc 	.word	0x200010bc
 80097f4:	2000116c 	.word	0x2000116c
 80097f8:	200010cc 	.word	0x200010cc
 80097fc:	0800ce60 	.word	0x0800ce60

08009800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3b04      	subs	r3, #4
 8009810:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3b04      	subs	r3, #4
 800981e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f023 0201 	bic.w	r2, r3, #1
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3b04      	subs	r3, #4
 800982e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009830:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <pxPortInitialiseStack+0x64>)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3b14      	subs	r3, #20
 800983a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3b04      	subs	r3, #4
 8009846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f06f 0202 	mvn.w	r2, #2
 800984e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	3b20      	subs	r3, #32
 8009854:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009856:	68fb      	ldr	r3, [r7, #12]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	08009869 	.word	0x08009869

08009868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009872:	4b12      	ldr	r3, [pc, #72]	; (80098bc <prvTaskExitError+0x54>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987a:	d00a      	beq.n	8009892 <prvTaskExitError+0x2a>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	60fb      	str	r3, [r7, #12]
}
 800988e:	bf00      	nop
 8009890:	e7fe      	b.n	8009890 <prvTaskExitError+0x28>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	60bb      	str	r3, [r7, #8]
}
 80098a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098a6:	bf00      	nop
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0fc      	beq.n	80098a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098ae:	bf00      	nop
 80098b0:	bf00      	nop
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	2000000c 	.word	0x2000000c

080098c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <pxCurrentTCBConst2>)
 80098c2:	6819      	ldr	r1, [r3, #0]
 80098c4:	6808      	ldr	r0, [r1, #0]
 80098c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ca:	f380 8809 	msr	PSP, r0
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f04f 0000 	mov.w	r0, #0
 80098d6:	f380 8811 	msr	BASEPRI, r0
 80098da:	4770      	bx	lr
 80098dc:	f3af 8000 	nop.w

080098e0 <pxCurrentTCBConst2>:
 80098e0:	20000b90 	.word	0x20000b90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop

080098e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80098e8:	4808      	ldr	r0, [pc, #32]	; (800990c <prvPortStartFirstTask+0x24>)
 80098ea:	6800      	ldr	r0, [r0, #0]
 80098ec:	6800      	ldr	r0, [r0, #0]
 80098ee:	f380 8808 	msr	MSP, r0
 80098f2:	f04f 0000 	mov.w	r0, #0
 80098f6:	f380 8814 	msr	CONTROL, r0
 80098fa:	b662      	cpsie	i
 80098fc:	b661      	cpsie	f
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	df00      	svc	0
 8009908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800990a:	bf00      	nop
 800990c:	e000ed08 	.word	0xe000ed08

08009910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009916:	4b46      	ldr	r3, [pc, #280]	; (8009a30 <xPortStartScheduler+0x120>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a46      	ldr	r2, [pc, #280]	; (8009a34 <xPortStartScheduler+0x124>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d10a      	bne.n	8009936 <xPortStartScheduler+0x26>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	613b      	str	r3, [r7, #16]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009936:	4b3e      	ldr	r3, [pc, #248]	; (8009a30 <xPortStartScheduler+0x120>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a3f      	ldr	r2, [pc, #252]	; (8009a38 <xPortStartScheduler+0x128>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d10a      	bne.n	8009956 <xPortStartScheduler+0x46>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	60fb      	str	r3, [r7, #12]
}
 8009952:	bf00      	nop
 8009954:	e7fe      	b.n	8009954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009956:	4b39      	ldr	r3, [pc, #228]	; (8009a3c <xPortStartScheduler+0x12c>)
 8009958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	b2db      	uxtb	r3, r3
 8009960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	22ff      	movs	r2, #255	; 0xff
 8009966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	b2db      	uxtb	r3, r3
 8009974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009978:	b2da      	uxtb	r2, r3
 800997a:	4b31      	ldr	r3, [pc, #196]	; (8009a40 <xPortStartScheduler+0x130>)
 800997c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800997e:	4b31      	ldr	r3, [pc, #196]	; (8009a44 <xPortStartScheduler+0x134>)
 8009980:	2207      	movs	r2, #7
 8009982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009984:	e009      	b.n	800999a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009986:	4b2f      	ldr	r3, [pc, #188]	; (8009a44 <xPortStartScheduler+0x134>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	3b01      	subs	r3, #1
 800998c:	4a2d      	ldr	r2, [pc, #180]	; (8009a44 <xPortStartScheduler+0x134>)
 800998e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	b2db      	uxtb	r3, r3
 8009998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a2:	2b80      	cmp	r3, #128	; 0x80
 80099a4:	d0ef      	beq.n	8009986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099a6:	4b27      	ldr	r3, [pc, #156]	; (8009a44 <xPortStartScheduler+0x134>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f1c3 0307 	rsb	r3, r3, #7
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d00a      	beq.n	80099c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	60bb      	str	r3, [r7, #8]
}
 80099c4:	bf00      	nop
 80099c6:	e7fe      	b.n	80099c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099c8:	4b1e      	ldr	r3, [pc, #120]	; (8009a44 <xPortStartScheduler+0x134>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	021b      	lsls	r3, r3, #8
 80099ce:	4a1d      	ldr	r2, [pc, #116]	; (8009a44 <xPortStartScheduler+0x134>)
 80099d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099d2:	4b1c      	ldr	r3, [pc, #112]	; (8009a44 <xPortStartScheduler+0x134>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099da:	4a1a      	ldr	r2, [pc, #104]	; (8009a44 <xPortStartScheduler+0x134>)
 80099dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099e6:	4b18      	ldr	r3, [pc, #96]	; (8009a48 <xPortStartScheduler+0x138>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a17      	ldr	r2, [pc, #92]	; (8009a48 <xPortStartScheduler+0x138>)
 80099ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099f2:	4b15      	ldr	r3, [pc, #84]	; (8009a48 <xPortStartScheduler+0x138>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a14      	ldr	r2, [pc, #80]	; (8009a48 <xPortStartScheduler+0x138>)
 80099f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099fe:	f000 f8dd 	bl	8009bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a02:	4b12      	ldr	r3, [pc, #72]	; (8009a4c <xPortStartScheduler+0x13c>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a08:	f000 f8fc 	bl	8009c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a0c:	4b10      	ldr	r3, [pc, #64]	; (8009a50 <xPortStartScheduler+0x140>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a0f      	ldr	r2, [pc, #60]	; (8009a50 <xPortStartScheduler+0x140>)
 8009a12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a18:	f7ff ff66 	bl	80098e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a1c:	f7ff f84c 	bl	8008ab8 <vTaskSwitchContext>
	prvTaskExitError();
 8009a20:	f7ff ff22 	bl	8009868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	e000ed00 	.word	0xe000ed00
 8009a34:	410fc271 	.word	0x410fc271
 8009a38:	410fc270 	.word	0x410fc270
 8009a3c:	e000e400 	.word	0xe000e400
 8009a40:	200011bc 	.word	0x200011bc
 8009a44:	200011c0 	.word	0x200011c0
 8009a48:	e000ed20 	.word	0xe000ed20
 8009a4c:	2000000c 	.word	0x2000000c
 8009a50:	e000ef34 	.word	0xe000ef34

08009a54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	607b      	str	r3, [r7, #4]
}
 8009a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <vPortEnterCritical+0x58>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3301      	adds	r3, #1
 8009a74:	4a0d      	ldr	r2, [pc, #52]	; (8009aac <vPortEnterCritical+0x58>)
 8009a76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a78:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <vPortEnterCritical+0x58>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d10f      	bne.n	8009aa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a80:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <vPortEnterCritical+0x5c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00a      	beq.n	8009aa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	603b      	str	r3, [r7, #0]
}
 8009a9c:	bf00      	nop
 8009a9e:	e7fe      	b.n	8009a9e <vPortEnterCritical+0x4a>
	}
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	2000000c 	.word	0x2000000c
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009aba:	4b12      	ldr	r3, [pc, #72]	; (8009b04 <vPortExitCritical+0x50>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10a      	bne.n	8009ad8 <vPortExitCritical+0x24>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	607b      	str	r3, [r7, #4]
}
 8009ad4:	bf00      	nop
 8009ad6:	e7fe      	b.n	8009ad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ad8:	4b0a      	ldr	r3, [pc, #40]	; (8009b04 <vPortExitCritical+0x50>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	4a09      	ldr	r2, [pc, #36]	; (8009b04 <vPortExitCritical+0x50>)
 8009ae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ae2:	4b08      	ldr	r3, [pc, #32]	; (8009b04 <vPortExitCritical+0x50>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d105      	bne.n	8009af6 <vPortExitCritical+0x42>
 8009aea:	2300      	movs	r3, #0
 8009aec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	f383 8811 	msr	BASEPRI, r3
}
 8009af4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009af6:	bf00      	nop
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	2000000c 	.word	0x2000000c
	...

08009b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b10:	f3ef 8009 	mrs	r0, PSP
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	4b15      	ldr	r3, [pc, #84]	; (8009b70 <pxCurrentTCBConst>)
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	f01e 0f10 	tst.w	lr, #16
 8009b20:	bf08      	it	eq
 8009b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2a:	6010      	str	r0, [r2, #0]
 8009b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b34:	f380 8811 	msr	BASEPRI, r0
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f7fe ffba 	bl	8008ab8 <vTaskSwitchContext>
 8009b44:	f04f 0000 	mov.w	r0, #0
 8009b48:	f380 8811 	msr	BASEPRI, r0
 8009b4c:	bc09      	pop	{r0, r3}
 8009b4e:	6819      	ldr	r1, [r3, #0]
 8009b50:	6808      	ldr	r0, [r1, #0]
 8009b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b56:	f01e 0f10 	tst.w	lr, #16
 8009b5a:	bf08      	it	eq
 8009b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b60:	f380 8809 	msr	PSP, r0
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	f3af 8000 	nop.w

08009b70 <pxCurrentTCBConst>:
 8009b70:	20000b90 	.word	0x20000b90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop

08009b78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	607b      	str	r3, [r7, #4]
}
 8009b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b92:	f7fe fed7 	bl	8008944 <xTaskIncrementTick>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d003      	beq.n	8009ba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b9c:	4b06      	ldr	r3, [pc, #24]	; (8009bb8 <xPortSysTickHandler+0x40>)
 8009b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	f383 8811 	msr	BASEPRI, r3
}
 8009bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bb0:	bf00      	nop
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	e000ed04 	.word	0xe000ed04

08009bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009bc0:	4b0b      	ldr	r3, [pc, #44]	; (8009bf0 <vPortSetupTimerInterrupt+0x34>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009bc6:	4b0b      	ldr	r3, [pc, #44]	; (8009bf4 <vPortSetupTimerInterrupt+0x38>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	; (8009bf8 <vPortSetupTimerInterrupt+0x3c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a0a      	ldr	r2, [pc, #40]	; (8009bfc <vPortSetupTimerInterrupt+0x40>)
 8009bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd6:	099b      	lsrs	r3, r3, #6
 8009bd8:	4a09      	ldr	r2, [pc, #36]	; (8009c00 <vPortSetupTimerInterrupt+0x44>)
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bde:	4b04      	ldr	r3, [pc, #16]	; (8009bf0 <vPortSetupTimerInterrupt+0x34>)
 8009be0:	2207      	movs	r2, #7
 8009be2:	601a      	str	r2, [r3, #0]
}
 8009be4:	bf00      	nop
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	e000e010 	.word	0xe000e010
 8009bf4:	e000e018 	.word	0xe000e018
 8009bf8:	20000000 	.word	0x20000000
 8009bfc:	10624dd3 	.word	0x10624dd3
 8009c00:	e000e014 	.word	0xe000e014

08009c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c14 <vPortEnableVFP+0x10>
 8009c08:	6801      	ldr	r1, [r0, #0]
 8009c0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c0e:	6001      	str	r1, [r0, #0]
 8009c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c12:	bf00      	nop
 8009c14:	e000ed88 	.word	0xe000ed88

08009c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c1e:	f3ef 8305 	mrs	r3, IPSR
 8009c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b0f      	cmp	r3, #15
 8009c28:	d914      	bls.n	8009c54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c2a:	4a17      	ldr	r2, [pc, #92]	; (8009c88 <vPortValidateInterruptPriority+0x70>)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4413      	add	r3, r2
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c34:	4b15      	ldr	r3, [pc, #84]	; (8009c8c <vPortValidateInterruptPriority+0x74>)
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	7afa      	ldrb	r2, [r7, #11]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d20a      	bcs.n	8009c54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	607b      	str	r3, [r7, #4]
}
 8009c50:	bf00      	nop
 8009c52:	e7fe      	b.n	8009c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c54:	4b0e      	ldr	r3, [pc, #56]	; (8009c90 <vPortValidateInterruptPriority+0x78>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c5c:	4b0d      	ldr	r3, [pc, #52]	; (8009c94 <vPortValidateInterruptPriority+0x7c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d90a      	bls.n	8009c7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	603b      	str	r3, [r7, #0]
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <vPortValidateInterruptPriority+0x60>
	}
 8009c7a:	bf00      	nop
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	e000e3f0 	.word	0xe000e3f0
 8009c8c:	200011bc 	.word	0x200011bc
 8009c90:	e000ed0c 	.word	0xe000ed0c
 8009c94:	200011c0 	.word	0x200011c0

08009c98 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d04d      	beq.n	8009d46 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009caa:	2308      	movs	r3, #8
 8009cac:	425b      	negs	r3, r3
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	4b24      	ldr	r3, [pc, #144]	; (8009d50 <vPortFree+0xb8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10a      	bne.n	8009cdc <vPortFree+0x44>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	60fb      	str	r3, [r7, #12]
}
 8009cd8:	bf00      	nop
 8009cda:	e7fe      	b.n	8009cda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00a      	beq.n	8009cfa <vPortFree+0x62>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	60bb      	str	r3, [r7, #8]
}
 8009cf6:	bf00      	nop
 8009cf8:	e7fe      	b.n	8009cf8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	4b14      	ldr	r3, [pc, #80]	; (8009d50 <vPortFree+0xb8>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4013      	ands	r3, r2
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d01e      	beq.n	8009d46 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d11a      	bne.n	8009d46 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	4b0e      	ldr	r3, [pc, #56]	; (8009d50 <vPortFree+0xb8>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	43db      	mvns	r3, r3
 8009d1a:	401a      	ands	r2, r3
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d20:	f7fe fd54 	bl	80087cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <vPortFree+0xbc>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	4a09      	ldr	r2, [pc, #36]	; (8009d54 <vPortFree+0xbc>)
 8009d30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d32:	6938      	ldr	r0, [r7, #16]
 8009d34:	f000 f812 	bl	8009d5c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d38:	4b07      	ldr	r3, [pc, #28]	; (8009d58 <vPortFree+0xc0>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	4a06      	ldr	r2, [pc, #24]	; (8009d58 <vPortFree+0xc0>)
 8009d40:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d42:	f7fe fd51 	bl	80087e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d46:	bf00      	nop
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	200011d8 	.word	0x200011d8
 8009d54:	200011d0 	.word	0x200011d0
 8009d58:	200011d4 	.word	0x200011d4

08009d5c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d64:	4b28      	ldr	r3, [pc, #160]	; (8009e08 <prvInsertBlockIntoFreeList+0xac>)
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	e002      	b.n	8009d70 <prvInsertBlockIntoFreeList+0x14>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d8f7      	bhi.n	8009d6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	4413      	add	r3, r2
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d108      	bne.n	8009d9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	441a      	add	r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	441a      	add	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d118      	bne.n	8009de4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	4b15      	ldr	r3, [pc, #84]	; (8009e0c <prvInsertBlockIntoFreeList+0xb0>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d00d      	beq.n	8009dda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	441a      	add	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	e008      	b.n	8009dec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009dda:	4b0c      	ldr	r3, [pc, #48]	; (8009e0c <prvInsertBlockIntoFreeList+0xb0>)
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	e003      	b.n	8009dec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d002      	beq.n	8009dfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dfa:	bf00      	nop
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	200011c4 	.word	0x200011c4
 8009e0c:	200011cc 	.word	0x200011cc

08009e10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009e24:	4619      	mov	r1, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	f7fc faf3 	bl	8006412 <USBD_LL_SetupStage>
}
 8009e2c:	bf00      	nop
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e46:	78fa      	ldrb	r2, [r7, #3]
 8009e48:	6879      	ldr	r1, [r7, #4]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	4413      	add	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	440b      	add	r3, r1
 8009e54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f7fc fb2d 	bl	80064bc <USBD_LL_DataOutStage>
}
 8009e62:	bf00      	nop
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	460b      	mov	r3, r1
 8009e74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e7c:	78fa      	ldrb	r2, [r7, #3]
 8009e7e:	6879      	ldr	r1, [r7, #4]
 8009e80:	4613      	mov	r3, r2
 8009e82:	00db      	lsls	r3, r3, #3
 8009e84:	4413      	add	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	440b      	add	r3, r1
 8009e8a:	334c      	adds	r3, #76	; 0x4c
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	4619      	mov	r1, r3
 8009e92:	f7fc fbc6 	bl	8006622 <USBD_LL_DataInStage>
}
 8009e96:	bf00      	nop
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fc fcfa 	bl	80068a6 <USBD_LL_SOF>
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d102      	bne.n	8009ed4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	73fb      	strb	r3, [r7, #15]
 8009ed2:	e008      	b.n	8009ee6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d102      	bne.n	8009ee2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009edc:	2301      	movs	r3, #1
 8009ede:	73fb      	strb	r3, [r7, #15]
 8009ee0:	e001      	b.n	8009ee6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ee2:	f7f7 fa59 	bl	8001398 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009eec:	7bfa      	ldrb	r2, [r7, #15]
 8009eee:	4611      	mov	r1, r2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fc fc9a 	bl	800682a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fc fc42 	bl	8006786 <USBD_LL_Reset>
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fc fc95 	bl	800684a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	6812      	ldr	r2, [r2, #0]
 8009f2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f32:	f043 0301 	orr.w	r3, r3, #1
 8009f36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d005      	beq.n	8009f4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f40:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <HAL_PCD_SuspendCallback+0x48>)
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	4a03      	ldr	r2, [pc, #12]	; (8009f54 <HAL_PCD_SuspendCallback+0x48>)
 8009f46:	f043 0306 	orr.w	r3, r3, #6
 8009f4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f4c:	bf00      	nop
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	e000ed00 	.word	0xe000ed00

08009f58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fc fc85 	bl	8006876 <USBD_LL_Resume>
}
 8009f6c:	bf00      	nop
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f86:	78fa      	ldrb	r2, [r7, #3]
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fc fcdd 	bl	800694a <USBD_LL_IsoOUTIncomplete>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009faa:	78fa      	ldrb	r2, [r7, #3]
 8009fac:	4611      	mov	r1, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fc fc99 	bl	80068e6 <USBD_LL_IsoINIncomplete>
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fc fcef 	bl	80069ae <USBD_LL_DevConnected>
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fc fcec 	bl	80069c4 <USBD_LL_DevDisconnected>
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	4611      	mov	r1, r2
 800a000:	461a      	mov	r2, r3
 800a002:	4603      	mov	r3, r0
 800a004:	70fb      	strb	r3, [r7, #3]
 800a006:	460b      	mov	r3, r1
 800a008:	70bb      	strb	r3, [r7, #2]
 800a00a:	4613      	mov	r3, r2
 800a00c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a01c:	78bb      	ldrb	r3, [r7, #2]
 800a01e:	883a      	ldrh	r2, [r7, #0]
 800a020:	78f9      	ldrb	r1, [r7, #3]
 800a022:	f7f9 f8c0 	bl	80031a6 <HAL_PCD_EP_Open>
 800a026:	4603      	mov	r3, r0
 800a028:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 f921 	bl	800a274 <USBD_Get_USB_Status>
 800a032:	4603      	mov	r3, r0
 800a034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a036:	7bbb      	ldrb	r3, [r7, #14]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a05a:	78fa      	ldrb	r2, [r7, #3]
 800a05c:	4611      	mov	r1, r2
 800a05e:	4618      	mov	r0, r3
 800a060:	f7f9 f99e 	bl	80033a0 <HAL_PCD_EP_SetStall>
 800a064:	4603      	mov	r3, r0
 800a066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 f902 	bl	800a274 <USBD_Get_USB_Status>
 800a070:	4603      	mov	r3, r0
 800a072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a074:	7bbb      	ldrb	r3, [r7, #14]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	460b      	mov	r3, r1
 800a088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a098:	78fa      	ldrb	r2, [r7, #3]
 800a09a:	4611      	mov	r1, r2
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7f9 f9e3 	bl	8003468 <HAL_PCD_EP_ClrStall>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0a6:	7bfb      	ldrb	r3, [r7, #15]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 f8e3 	bl	800a274 <USBD_Get_USB_Status>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	da0b      	bge.n	800a0f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a0d8:	78fb      	ldrb	r3, [r7, #3]
 800a0da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0de:	68f9      	ldr	r1, [r7, #12]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	00db      	lsls	r3, r3, #3
 800a0e4:	4413      	add	r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	440b      	add	r3, r1
 800a0ea:	333e      	adds	r3, #62	; 0x3e
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	e00b      	b.n	800a108 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0f6:	68f9      	ldr	r1, [r7, #12]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	4413      	add	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	440b      	add	r3, r1
 800a102:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a106:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	460b      	mov	r3, r1
 800a11e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a12e:	78fa      	ldrb	r2, [r7, #3]
 800a130:	4611      	mov	r1, r2
 800a132:	4618      	mov	r0, r3
 800a134:	f7f9 f812 	bl	800315c <HAL_PCD_SetAddress>
 800a138:	4603      	mov	r3, r0
 800a13a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 f898 	bl	800a274 <USBD_Get_USB_Status>
 800a144:	4603      	mov	r3, r0
 800a146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a148:	7bbb      	ldrb	r3, [r7, #14]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b086      	sub	sp, #24
 800a156:	af00      	add	r7, sp, #0
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
 800a15e:	460b      	mov	r3, r1
 800a160:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a170:	7af9      	ldrb	r1, [r7, #11]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	f7f9 f8c9 	bl	800330c <HAL_PCD_EP_Transmit>
 800a17a:	4603      	mov	r3, r0
 800a17c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a17e:	7dfb      	ldrb	r3, [r7, #23]
 800a180:	4618      	mov	r0, r3
 800a182:	f000 f877 	bl	800a274 <USBD_Get_USB_Status>
 800a186:	4603      	mov	r3, r0
 800a188:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a18a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	607a      	str	r2, [r7, #4]
 800a19e:	603b      	str	r3, [r7, #0]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a1b2:	7af9      	ldrb	r1, [r7, #11]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	f7f9 f85d 	bl	8003276 <HAL_PCD_EP_Receive>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 f856 	bl	800a274 <USBD_Get_USB_Status>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3718      	adds	r7, #24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a1e4:	78fb      	ldrb	r3, [r7, #3]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d002      	beq.n	800a1f0 <HAL_PCDEx_LPM_Callback+0x18>
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d01f      	beq.n	800a22e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a1ee:	e03b      	b.n	800a268 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a1b      	ldr	r3, [r3, #32]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d007      	beq.n	800a208 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a1f8:	f7f6 fe90 	bl	8000f1c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1fc:	4b1c      	ldr	r3, [pc, #112]	; (800a270 <HAL_PCDEx_LPM_Callback+0x98>)
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	4a1b      	ldr	r2, [pc, #108]	; (800a270 <HAL_PCDEx_LPM_Callback+0x98>)
 800a202:	f023 0306 	bic.w	r3, r3, #6
 800a206:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	6812      	ldr	r2, [r2, #0]
 800a216:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a21a:	f023 0301 	bic.w	r3, r3, #1
 800a21e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a226:	4618      	mov	r0, r3
 800a228:	f7fc fb25 	bl	8006876 <USBD_LL_Resume>
    break;
 800a22c:	e01c      	b.n	800a268 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	6812      	ldr	r2, [r2, #0]
 800a23c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a240:	f043 0301 	orr.w	r3, r3, #1
 800a244:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fc fafc 	bl	800684a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d005      	beq.n	800a266 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a25a:	4b05      	ldr	r3, [pc, #20]	; (800a270 <HAL_PCDEx_LPM_Callback+0x98>)
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	4a04      	ldr	r2, [pc, #16]	; (800a270 <HAL_PCDEx_LPM_Callback+0x98>)
 800a260:	f043 0306 	orr.w	r3, r3, #6
 800a264:	6113      	str	r3, [r2, #16]
    break;
 800a266:	bf00      	nop
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	e000ed00 	.word	0xe000ed00

0800a274 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	2b03      	cmp	r3, #3
 800a286:	d817      	bhi.n	800a2b8 <USBD_Get_USB_Status+0x44>
 800a288:	a201      	add	r2, pc, #4	; (adr r2, 800a290 <USBD_Get_USB_Status+0x1c>)
 800a28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28e:	bf00      	nop
 800a290:	0800a2a1 	.word	0x0800a2a1
 800a294:	0800a2a7 	.word	0x0800a2a7
 800a298:	0800a2ad 	.word	0x0800a2ad
 800a29c:	0800a2b3 	.word	0x0800a2b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a4:	e00b      	b.n	800a2be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2aa:	e008      	b.n	800a2be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b0:	e005      	b.n	800a2be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2b2:	2303      	movs	r3, #3
 800a2b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b6:	e002      	b.n	800a2be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a2bc:	bf00      	nop
  }
  return usb_status;
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <__errno>:
 800a2cc:	4b01      	ldr	r3, [pc, #4]	; (800a2d4 <__errno+0x8>)
 800a2ce:	6818      	ldr	r0, [r3, #0]
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	20000010 	.word	0x20000010

0800a2d8 <std>:
 800a2d8:	2300      	movs	r3, #0
 800a2da:	b510      	push	{r4, lr}
 800a2dc:	4604      	mov	r4, r0
 800a2de:	e9c0 3300 	strd	r3, r3, [r0]
 800a2e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2e6:	6083      	str	r3, [r0, #8]
 800a2e8:	8181      	strh	r1, [r0, #12]
 800a2ea:	6643      	str	r3, [r0, #100]	; 0x64
 800a2ec:	81c2      	strh	r2, [r0, #14]
 800a2ee:	6183      	str	r3, [r0, #24]
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	2208      	movs	r2, #8
 800a2f4:	305c      	adds	r0, #92	; 0x5c
 800a2f6:	f000 f91a 	bl	800a52e <memset>
 800a2fa:	4b05      	ldr	r3, [pc, #20]	; (800a310 <std+0x38>)
 800a2fc:	6263      	str	r3, [r4, #36]	; 0x24
 800a2fe:	4b05      	ldr	r3, [pc, #20]	; (800a314 <std+0x3c>)
 800a300:	62a3      	str	r3, [r4, #40]	; 0x28
 800a302:	4b05      	ldr	r3, [pc, #20]	; (800a318 <std+0x40>)
 800a304:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a306:	4b05      	ldr	r3, [pc, #20]	; (800a31c <std+0x44>)
 800a308:	6224      	str	r4, [r4, #32]
 800a30a:	6323      	str	r3, [r4, #48]	; 0x30
 800a30c:	bd10      	pop	{r4, pc}
 800a30e:	bf00      	nop
 800a310:	0800b031 	.word	0x0800b031
 800a314:	0800b053 	.word	0x0800b053
 800a318:	0800b08b 	.word	0x0800b08b
 800a31c:	0800b0af 	.word	0x0800b0af

0800a320 <_cleanup_r>:
 800a320:	4901      	ldr	r1, [pc, #4]	; (800a328 <_cleanup_r+0x8>)
 800a322:	f000 b8af 	b.w	800a484 <_fwalk_reent>
 800a326:	bf00      	nop
 800a328:	0800bf01 	.word	0x0800bf01

0800a32c <__sfmoreglue>:
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	2268      	movs	r2, #104	; 0x68
 800a330:	1e4d      	subs	r5, r1, #1
 800a332:	4355      	muls	r5, r2
 800a334:	460e      	mov	r6, r1
 800a336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a33a:	f000 f921 	bl	800a580 <_malloc_r>
 800a33e:	4604      	mov	r4, r0
 800a340:	b140      	cbz	r0, 800a354 <__sfmoreglue+0x28>
 800a342:	2100      	movs	r1, #0
 800a344:	e9c0 1600 	strd	r1, r6, [r0]
 800a348:	300c      	adds	r0, #12
 800a34a:	60a0      	str	r0, [r4, #8]
 800a34c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a350:	f000 f8ed 	bl	800a52e <memset>
 800a354:	4620      	mov	r0, r4
 800a356:	bd70      	pop	{r4, r5, r6, pc}

0800a358 <__sfp_lock_acquire>:
 800a358:	4801      	ldr	r0, [pc, #4]	; (800a360 <__sfp_lock_acquire+0x8>)
 800a35a:	f000 b8d8 	b.w	800a50e <__retarget_lock_acquire_recursive>
 800a35e:	bf00      	nop
 800a360:	200016e9 	.word	0x200016e9

0800a364 <__sfp_lock_release>:
 800a364:	4801      	ldr	r0, [pc, #4]	; (800a36c <__sfp_lock_release+0x8>)
 800a366:	f000 b8d3 	b.w	800a510 <__retarget_lock_release_recursive>
 800a36a:	bf00      	nop
 800a36c:	200016e9 	.word	0x200016e9

0800a370 <__sinit_lock_acquire>:
 800a370:	4801      	ldr	r0, [pc, #4]	; (800a378 <__sinit_lock_acquire+0x8>)
 800a372:	f000 b8cc 	b.w	800a50e <__retarget_lock_acquire_recursive>
 800a376:	bf00      	nop
 800a378:	200016ea 	.word	0x200016ea

0800a37c <__sinit_lock_release>:
 800a37c:	4801      	ldr	r0, [pc, #4]	; (800a384 <__sinit_lock_release+0x8>)
 800a37e:	f000 b8c7 	b.w	800a510 <__retarget_lock_release_recursive>
 800a382:	bf00      	nop
 800a384:	200016ea 	.word	0x200016ea

0800a388 <__sinit>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	4604      	mov	r4, r0
 800a38c:	f7ff fff0 	bl	800a370 <__sinit_lock_acquire>
 800a390:	69a3      	ldr	r3, [r4, #24]
 800a392:	b11b      	cbz	r3, 800a39c <__sinit+0x14>
 800a394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a398:	f7ff bff0 	b.w	800a37c <__sinit_lock_release>
 800a39c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3a0:	6523      	str	r3, [r4, #80]	; 0x50
 800a3a2:	4b13      	ldr	r3, [pc, #76]	; (800a3f0 <__sinit+0x68>)
 800a3a4:	4a13      	ldr	r2, [pc, #76]	; (800a3f4 <__sinit+0x6c>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3aa:	42a3      	cmp	r3, r4
 800a3ac:	bf04      	itt	eq
 800a3ae:	2301      	moveq	r3, #1
 800a3b0:	61a3      	streq	r3, [r4, #24]
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 f820 	bl	800a3f8 <__sfp>
 800a3b8:	6060      	str	r0, [r4, #4]
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f000 f81c 	bl	800a3f8 <__sfp>
 800a3c0:	60a0      	str	r0, [r4, #8]
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 f818 	bl	800a3f8 <__sfp>
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	60e0      	str	r0, [r4, #12]
 800a3cc:	2104      	movs	r1, #4
 800a3ce:	6860      	ldr	r0, [r4, #4]
 800a3d0:	f7ff ff82 	bl	800a2d8 <std>
 800a3d4:	68a0      	ldr	r0, [r4, #8]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	2109      	movs	r1, #9
 800a3da:	f7ff ff7d 	bl	800a2d8 <std>
 800a3de:	68e0      	ldr	r0, [r4, #12]
 800a3e0:	2202      	movs	r2, #2
 800a3e2:	2112      	movs	r1, #18
 800a3e4:	f7ff ff78 	bl	800a2d8 <std>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	61a3      	str	r3, [r4, #24]
 800a3ec:	e7d2      	b.n	800a394 <__sinit+0xc>
 800a3ee:	bf00      	nop
 800a3f0:	0800cee0 	.word	0x0800cee0
 800a3f4:	0800a321 	.word	0x0800a321

0800a3f8 <__sfp>:
 800a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fa:	4607      	mov	r7, r0
 800a3fc:	f7ff ffac 	bl	800a358 <__sfp_lock_acquire>
 800a400:	4b1e      	ldr	r3, [pc, #120]	; (800a47c <__sfp+0x84>)
 800a402:	681e      	ldr	r6, [r3, #0]
 800a404:	69b3      	ldr	r3, [r6, #24]
 800a406:	b913      	cbnz	r3, 800a40e <__sfp+0x16>
 800a408:	4630      	mov	r0, r6
 800a40a:	f7ff ffbd 	bl	800a388 <__sinit>
 800a40e:	3648      	adds	r6, #72	; 0x48
 800a410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a414:	3b01      	subs	r3, #1
 800a416:	d503      	bpl.n	800a420 <__sfp+0x28>
 800a418:	6833      	ldr	r3, [r6, #0]
 800a41a:	b30b      	cbz	r3, 800a460 <__sfp+0x68>
 800a41c:	6836      	ldr	r6, [r6, #0]
 800a41e:	e7f7      	b.n	800a410 <__sfp+0x18>
 800a420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a424:	b9d5      	cbnz	r5, 800a45c <__sfp+0x64>
 800a426:	4b16      	ldr	r3, [pc, #88]	; (800a480 <__sfp+0x88>)
 800a428:	60e3      	str	r3, [r4, #12]
 800a42a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a42e:	6665      	str	r5, [r4, #100]	; 0x64
 800a430:	f000 f86c 	bl	800a50c <__retarget_lock_init_recursive>
 800a434:	f7ff ff96 	bl	800a364 <__sfp_lock_release>
 800a438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a43c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a440:	6025      	str	r5, [r4, #0]
 800a442:	61a5      	str	r5, [r4, #24]
 800a444:	2208      	movs	r2, #8
 800a446:	4629      	mov	r1, r5
 800a448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a44c:	f000 f86f 	bl	800a52e <memset>
 800a450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a458:	4620      	mov	r0, r4
 800a45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a45c:	3468      	adds	r4, #104	; 0x68
 800a45e:	e7d9      	b.n	800a414 <__sfp+0x1c>
 800a460:	2104      	movs	r1, #4
 800a462:	4638      	mov	r0, r7
 800a464:	f7ff ff62 	bl	800a32c <__sfmoreglue>
 800a468:	4604      	mov	r4, r0
 800a46a:	6030      	str	r0, [r6, #0]
 800a46c:	2800      	cmp	r0, #0
 800a46e:	d1d5      	bne.n	800a41c <__sfp+0x24>
 800a470:	f7ff ff78 	bl	800a364 <__sfp_lock_release>
 800a474:	230c      	movs	r3, #12
 800a476:	603b      	str	r3, [r7, #0]
 800a478:	e7ee      	b.n	800a458 <__sfp+0x60>
 800a47a:	bf00      	nop
 800a47c:	0800cee0 	.word	0x0800cee0
 800a480:	ffff0001 	.word	0xffff0001

0800a484 <_fwalk_reent>:
 800a484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a488:	4606      	mov	r6, r0
 800a48a:	4688      	mov	r8, r1
 800a48c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a490:	2700      	movs	r7, #0
 800a492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a496:	f1b9 0901 	subs.w	r9, r9, #1
 800a49a:	d505      	bpl.n	800a4a8 <_fwalk_reent+0x24>
 800a49c:	6824      	ldr	r4, [r4, #0]
 800a49e:	2c00      	cmp	r4, #0
 800a4a0:	d1f7      	bne.n	800a492 <_fwalk_reent+0xe>
 800a4a2:	4638      	mov	r0, r7
 800a4a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4a8:	89ab      	ldrh	r3, [r5, #12]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d907      	bls.n	800a4be <_fwalk_reent+0x3a>
 800a4ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	d003      	beq.n	800a4be <_fwalk_reent+0x3a>
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	47c0      	blx	r8
 800a4bc:	4307      	orrs	r7, r0
 800a4be:	3568      	adds	r5, #104	; 0x68
 800a4c0:	e7e9      	b.n	800a496 <_fwalk_reent+0x12>
	...

0800a4c4 <__libc_init_array>:
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	4d0d      	ldr	r5, [pc, #52]	; (800a4fc <__libc_init_array+0x38>)
 800a4c8:	4c0d      	ldr	r4, [pc, #52]	; (800a500 <__libc_init_array+0x3c>)
 800a4ca:	1b64      	subs	r4, r4, r5
 800a4cc:	10a4      	asrs	r4, r4, #2
 800a4ce:	2600      	movs	r6, #0
 800a4d0:	42a6      	cmp	r6, r4
 800a4d2:	d109      	bne.n	800a4e8 <__libc_init_array+0x24>
 800a4d4:	4d0b      	ldr	r5, [pc, #44]	; (800a504 <__libc_init_array+0x40>)
 800a4d6:	4c0c      	ldr	r4, [pc, #48]	; (800a508 <__libc_init_array+0x44>)
 800a4d8:	f002 fcac 	bl	800ce34 <_init>
 800a4dc:	1b64      	subs	r4, r4, r5
 800a4de:	10a4      	asrs	r4, r4, #2
 800a4e0:	2600      	movs	r6, #0
 800a4e2:	42a6      	cmp	r6, r4
 800a4e4:	d105      	bne.n	800a4f2 <__libc_init_array+0x2e>
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}
 800a4e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ec:	4798      	blx	r3
 800a4ee:	3601      	adds	r6, #1
 800a4f0:	e7ee      	b.n	800a4d0 <__libc_init_array+0xc>
 800a4f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4f6:	4798      	blx	r3
 800a4f8:	3601      	adds	r6, #1
 800a4fa:	e7f2      	b.n	800a4e2 <__libc_init_array+0x1e>
 800a4fc:	0800d264 	.word	0x0800d264
 800a500:	0800d264 	.word	0x0800d264
 800a504:	0800d264 	.word	0x0800d264
 800a508:	0800d268 	.word	0x0800d268

0800a50c <__retarget_lock_init_recursive>:
 800a50c:	4770      	bx	lr

0800a50e <__retarget_lock_acquire_recursive>:
 800a50e:	4770      	bx	lr

0800a510 <__retarget_lock_release_recursive>:
 800a510:	4770      	bx	lr

0800a512 <memcpy>:
 800a512:	440a      	add	r2, r1
 800a514:	4291      	cmp	r1, r2
 800a516:	f100 33ff 	add.w	r3, r0, #4294967295
 800a51a:	d100      	bne.n	800a51e <memcpy+0xc>
 800a51c:	4770      	bx	lr
 800a51e:	b510      	push	{r4, lr}
 800a520:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a524:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a528:	4291      	cmp	r1, r2
 800a52a:	d1f9      	bne.n	800a520 <memcpy+0xe>
 800a52c:	bd10      	pop	{r4, pc}

0800a52e <memset>:
 800a52e:	4402      	add	r2, r0
 800a530:	4603      	mov	r3, r0
 800a532:	4293      	cmp	r3, r2
 800a534:	d100      	bne.n	800a538 <memset+0xa>
 800a536:	4770      	bx	lr
 800a538:	f803 1b01 	strb.w	r1, [r3], #1
 800a53c:	e7f9      	b.n	800a532 <memset+0x4>
	...

0800a540 <sbrk_aligned>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	4e0e      	ldr	r6, [pc, #56]	; (800a57c <sbrk_aligned+0x3c>)
 800a544:	460c      	mov	r4, r1
 800a546:	6831      	ldr	r1, [r6, #0]
 800a548:	4605      	mov	r5, r0
 800a54a:	b911      	cbnz	r1, 800a552 <sbrk_aligned+0x12>
 800a54c:	f000 fd60 	bl	800b010 <_sbrk_r>
 800a550:	6030      	str	r0, [r6, #0]
 800a552:	4621      	mov	r1, r4
 800a554:	4628      	mov	r0, r5
 800a556:	f000 fd5b 	bl	800b010 <_sbrk_r>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	d00a      	beq.n	800a574 <sbrk_aligned+0x34>
 800a55e:	1cc4      	adds	r4, r0, #3
 800a560:	f024 0403 	bic.w	r4, r4, #3
 800a564:	42a0      	cmp	r0, r4
 800a566:	d007      	beq.n	800a578 <sbrk_aligned+0x38>
 800a568:	1a21      	subs	r1, r4, r0
 800a56a:	4628      	mov	r0, r5
 800a56c:	f000 fd50 	bl	800b010 <_sbrk_r>
 800a570:	3001      	adds	r0, #1
 800a572:	d101      	bne.n	800a578 <sbrk_aligned+0x38>
 800a574:	f04f 34ff 	mov.w	r4, #4294967295
 800a578:	4620      	mov	r0, r4
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	200016f0 	.word	0x200016f0

0800a580 <_malloc_r>:
 800a580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a584:	1ccd      	adds	r5, r1, #3
 800a586:	f025 0503 	bic.w	r5, r5, #3
 800a58a:	3508      	adds	r5, #8
 800a58c:	2d0c      	cmp	r5, #12
 800a58e:	bf38      	it	cc
 800a590:	250c      	movcc	r5, #12
 800a592:	2d00      	cmp	r5, #0
 800a594:	4607      	mov	r7, r0
 800a596:	db01      	blt.n	800a59c <_malloc_r+0x1c>
 800a598:	42a9      	cmp	r1, r5
 800a59a:	d905      	bls.n	800a5a8 <_malloc_r+0x28>
 800a59c:	230c      	movs	r3, #12
 800a59e:	603b      	str	r3, [r7, #0]
 800a5a0:	2600      	movs	r6, #0
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a8:	4e2e      	ldr	r6, [pc, #184]	; (800a664 <_malloc_r+0xe4>)
 800a5aa:	f001 fd03 	bl	800bfb4 <__malloc_lock>
 800a5ae:	6833      	ldr	r3, [r6, #0]
 800a5b0:	461c      	mov	r4, r3
 800a5b2:	bb34      	cbnz	r4, 800a602 <_malloc_r+0x82>
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	f7ff ffc2 	bl	800a540 <sbrk_aligned>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	4604      	mov	r4, r0
 800a5c0:	d14d      	bne.n	800a65e <_malloc_r+0xde>
 800a5c2:	6834      	ldr	r4, [r6, #0]
 800a5c4:	4626      	mov	r6, r4
 800a5c6:	2e00      	cmp	r6, #0
 800a5c8:	d140      	bne.n	800a64c <_malloc_r+0xcc>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	4631      	mov	r1, r6
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	eb04 0803 	add.w	r8, r4, r3
 800a5d4:	f000 fd1c 	bl	800b010 <_sbrk_r>
 800a5d8:	4580      	cmp	r8, r0
 800a5da:	d13a      	bne.n	800a652 <_malloc_r+0xd2>
 800a5dc:	6821      	ldr	r1, [r4, #0]
 800a5de:	3503      	adds	r5, #3
 800a5e0:	1a6d      	subs	r5, r5, r1
 800a5e2:	f025 0503 	bic.w	r5, r5, #3
 800a5e6:	3508      	adds	r5, #8
 800a5e8:	2d0c      	cmp	r5, #12
 800a5ea:	bf38      	it	cc
 800a5ec:	250c      	movcc	r5, #12
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	f7ff ffa5 	bl	800a540 <sbrk_aligned>
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	d02b      	beq.n	800a652 <_malloc_r+0xd2>
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	442b      	add	r3, r5
 800a5fe:	6023      	str	r3, [r4, #0]
 800a600:	e00e      	b.n	800a620 <_malloc_r+0xa0>
 800a602:	6822      	ldr	r2, [r4, #0]
 800a604:	1b52      	subs	r2, r2, r5
 800a606:	d41e      	bmi.n	800a646 <_malloc_r+0xc6>
 800a608:	2a0b      	cmp	r2, #11
 800a60a:	d916      	bls.n	800a63a <_malloc_r+0xba>
 800a60c:	1961      	adds	r1, r4, r5
 800a60e:	42a3      	cmp	r3, r4
 800a610:	6025      	str	r5, [r4, #0]
 800a612:	bf18      	it	ne
 800a614:	6059      	strne	r1, [r3, #4]
 800a616:	6863      	ldr	r3, [r4, #4]
 800a618:	bf08      	it	eq
 800a61a:	6031      	streq	r1, [r6, #0]
 800a61c:	5162      	str	r2, [r4, r5]
 800a61e:	604b      	str	r3, [r1, #4]
 800a620:	4638      	mov	r0, r7
 800a622:	f104 060b 	add.w	r6, r4, #11
 800a626:	f001 fccb 	bl	800bfc0 <__malloc_unlock>
 800a62a:	f026 0607 	bic.w	r6, r6, #7
 800a62e:	1d23      	adds	r3, r4, #4
 800a630:	1af2      	subs	r2, r6, r3
 800a632:	d0b6      	beq.n	800a5a2 <_malloc_r+0x22>
 800a634:	1b9b      	subs	r3, r3, r6
 800a636:	50a3      	str	r3, [r4, r2]
 800a638:	e7b3      	b.n	800a5a2 <_malloc_r+0x22>
 800a63a:	6862      	ldr	r2, [r4, #4]
 800a63c:	42a3      	cmp	r3, r4
 800a63e:	bf0c      	ite	eq
 800a640:	6032      	streq	r2, [r6, #0]
 800a642:	605a      	strne	r2, [r3, #4]
 800a644:	e7ec      	b.n	800a620 <_malloc_r+0xa0>
 800a646:	4623      	mov	r3, r4
 800a648:	6864      	ldr	r4, [r4, #4]
 800a64a:	e7b2      	b.n	800a5b2 <_malloc_r+0x32>
 800a64c:	4634      	mov	r4, r6
 800a64e:	6876      	ldr	r6, [r6, #4]
 800a650:	e7b9      	b.n	800a5c6 <_malloc_r+0x46>
 800a652:	230c      	movs	r3, #12
 800a654:	603b      	str	r3, [r7, #0]
 800a656:	4638      	mov	r0, r7
 800a658:	f001 fcb2 	bl	800bfc0 <__malloc_unlock>
 800a65c:	e7a1      	b.n	800a5a2 <_malloc_r+0x22>
 800a65e:	6025      	str	r5, [r4, #0]
 800a660:	e7de      	b.n	800a620 <_malloc_r+0xa0>
 800a662:	bf00      	nop
 800a664:	200016ec 	.word	0x200016ec

0800a668 <__cvt>:
 800a668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a66c:	ec55 4b10 	vmov	r4, r5, d0
 800a670:	2d00      	cmp	r5, #0
 800a672:	460e      	mov	r6, r1
 800a674:	4619      	mov	r1, r3
 800a676:	462b      	mov	r3, r5
 800a678:	bfbb      	ittet	lt
 800a67a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a67e:	461d      	movlt	r5, r3
 800a680:	2300      	movge	r3, #0
 800a682:	232d      	movlt	r3, #45	; 0x2d
 800a684:	700b      	strb	r3, [r1, #0]
 800a686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a688:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a68c:	4691      	mov	r9, r2
 800a68e:	f023 0820 	bic.w	r8, r3, #32
 800a692:	bfbc      	itt	lt
 800a694:	4622      	movlt	r2, r4
 800a696:	4614      	movlt	r4, r2
 800a698:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a69c:	d005      	beq.n	800a6aa <__cvt+0x42>
 800a69e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a6a2:	d100      	bne.n	800a6a6 <__cvt+0x3e>
 800a6a4:	3601      	adds	r6, #1
 800a6a6:	2102      	movs	r1, #2
 800a6a8:	e000      	b.n	800a6ac <__cvt+0x44>
 800a6aa:	2103      	movs	r1, #3
 800a6ac:	ab03      	add	r3, sp, #12
 800a6ae:	9301      	str	r3, [sp, #4]
 800a6b0:	ab02      	add	r3, sp, #8
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	ec45 4b10 	vmov	d0, r4, r5
 800a6b8:	4653      	mov	r3, sl
 800a6ba:	4632      	mov	r2, r6
 800a6bc:	f000 fdac 	bl	800b218 <_dtoa_r>
 800a6c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a6c4:	4607      	mov	r7, r0
 800a6c6:	d102      	bne.n	800a6ce <__cvt+0x66>
 800a6c8:	f019 0f01 	tst.w	r9, #1
 800a6cc:	d022      	beq.n	800a714 <__cvt+0xac>
 800a6ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6d2:	eb07 0906 	add.w	r9, r7, r6
 800a6d6:	d110      	bne.n	800a6fa <__cvt+0x92>
 800a6d8:	783b      	ldrb	r3, [r7, #0]
 800a6da:	2b30      	cmp	r3, #48	; 0x30
 800a6dc:	d10a      	bne.n	800a6f4 <__cvt+0x8c>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	f7f6 fa0f 	bl	8000b08 <__aeabi_dcmpeq>
 800a6ea:	b918      	cbnz	r0, 800a6f4 <__cvt+0x8c>
 800a6ec:	f1c6 0601 	rsb	r6, r6, #1
 800a6f0:	f8ca 6000 	str.w	r6, [sl]
 800a6f4:	f8da 3000 	ldr.w	r3, [sl]
 800a6f8:	4499      	add	r9, r3
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4620      	mov	r0, r4
 800a700:	4629      	mov	r1, r5
 800a702:	f7f6 fa01 	bl	8000b08 <__aeabi_dcmpeq>
 800a706:	b108      	cbz	r0, 800a70c <__cvt+0xa4>
 800a708:	f8cd 900c 	str.w	r9, [sp, #12]
 800a70c:	2230      	movs	r2, #48	; 0x30
 800a70e:	9b03      	ldr	r3, [sp, #12]
 800a710:	454b      	cmp	r3, r9
 800a712:	d307      	bcc.n	800a724 <__cvt+0xbc>
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a718:	1bdb      	subs	r3, r3, r7
 800a71a:	4638      	mov	r0, r7
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	b004      	add	sp, #16
 800a720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a724:	1c59      	adds	r1, r3, #1
 800a726:	9103      	str	r1, [sp, #12]
 800a728:	701a      	strb	r2, [r3, #0]
 800a72a:	e7f0      	b.n	800a70e <__cvt+0xa6>

0800a72c <__exponent>:
 800a72c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a72e:	4603      	mov	r3, r0
 800a730:	2900      	cmp	r1, #0
 800a732:	bfb8      	it	lt
 800a734:	4249      	neglt	r1, r1
 800a736:	f803 2b02 	strb.w	r2, [r3], #2
 800a73a:	bfb4      	ite	lt
 800a73c:	222d      	movlt	r2, #45	; 0x2d
 800a73e:	222b      	movge	r2, #43	; 0x2b
 800a740:	2909      	cmp	r1, #9
 800a742:	7042      	strb	r2, [r0, #1]
 800a744:	dd2a      	ble.n	800a79c <__exponent+0x70>
 800a746:	f10d 0407 	add.w	r4, sp, #7
 800a74a:	46a4      	mov	ip, r4
 800a74c:	270a      	movs	r7, #10
 800a74e:	46a6      	mov	lr, r4
 800a750:	460a      	mov	r2, r1
 800a752:	fb91 f6f7 	sdiv	r6, r1, r7
 800a756:	fb07 1516 	mls	r5, r7, r6, r1
 800a75a:	3530      	adds	r5, #48	; 0x30
 800a75c:	2a63      	cmp	r2, #99	; 0x63
 800a75e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a762:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a766:	4631      	mov	r1, r6
 800a768:	dcf1      	bgt.n	800a74e <__exponent+0x22>
 800a76a:	3130      	adds	r1, #48	; 0x30
 800a76c:	f1ae 0502 	sub.w	r5, lr, #2
 800a770:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a774:	1c44      	adds	r4, r0, #1
 800a776:	4629      	mov	r1, r5
 800a778:	4561      	cmp	r1, ip
 800a77a:	d30a      	bcc.n	800a792 <__exponent+0x66>
 800a77c:	f10d 0209 	add.w	r2, sp, #9
 800a780:	eba2 020e 	sub.w	r2, r2, lr
 800a784:	4565      	cmp	r5, ip
 800a786:	bf88      	it	hi
 800a788:	2200      	movhi	r2, #0
 800a78a:	4413      	add	r3, r2
 800a78c:	1a18      	subs	r0, r3, r0
 800a78e:	b003      	add	sp, #12
 800a790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a792:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a796:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a79a:	e7ed      	b.n	800a778 <__exponent+0x4c>
 800a79c:	2330      	movs	r3, #48	; 0x30
 800a79e:	3130      	adds	r1, #48	; 0x30
 800a7a0:	7083      	strb	r3, [r0, #2]
 800a7a2:	70c1      	strb	r1, [r0, #3]
 800a7a4:	1d03      	adds	r3, r0, #4
 800a7a6:	e7f1      	b.n	800a78c <__exponent+0x60>

0800a7a8 <_printf_float>:
 800a7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	ed2d 8b02 	vpush	{d8}
 800a7b0:	b08d      	sub	sp, #52	; 0x34
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a7b8:	4616      	mov	r6, r2
 800a7ba:	461f      	mov	r7, r3
 800a7bc:	4605      	mov	r5, r0
 800a7be:	f001 fbdb 	bl	800bf78 <_localeconv_r>
 800a7c2:	f8d0 a000 	ldr.w	sl, [r0]
 800a7c6:	4650      	mov	r0, sl
 800a7c8:	f7f5 fd22 	bl	8000210 <strlen>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	9305      	str	r3, [sp, #20]
 800a7d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a7d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a7dc:	3307      	adds	r3, #7
 800a7de:	f023 0307 	bic.w	r3, r3, #7
 800a7e2:	f103 0208 	add.w	r2, r3, #8
 800a7e6:	f8c8 2000 	str.w	r2, [r8]
 800a7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a7f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a7f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7fa:	9307      	str	r3, [sp, #28]
 800a7fc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a800:	ee08 0a10 	vmov	s16, r0
 800a804:	4b9f      	ldr	r3, [pc, #636]	; (800aa84 <_printf_float+0x2dc>)
 800a806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a80a:	f04f 32ff 	mov.w	r2, #4294967295
 800a80e:	f7f6 f9ad 	bl	8000b6c <__aeabi_dcmpun>
 800a812:	bb88      	cbnz	r0, 800a878 <_printf_float+0xd0>
 800a814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a818:	4b9a      	ldr	r3, [pc, #616]	; (800aa84 <_printf_float+0x2dc>)
 800a81a:	f04f 32ff 	mov.w	r2, #4294967295
 800a81e:	f7f6 f987 	bl	8000b30 <__aeabi_dcmple>
 800a822:	bb48      	cbnz	r0, 800a878 <_printf_float+0xd0>
 800a824:	2200      	movs	r2, #0
 800a826:	2300      	movs	r3, #0
 800a828:	4640      	mov	r0, r8
 800a82a:	4649      	mov	r1, r9
 800a82c:	f7f6 f976 	bl	8000b1c <__aeabi_dcmplt>
 800a830:	b110      	cbz	r0, 800a838 <_printf_float+0x90>
 800a832:	232d      	movs	r3, #45	; 0x2d
 800a834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a838:	4b93      	ldr	r3, [pc, #588]	; (800aa88 <_printf_float+0x2e0>)
 800a83a:	4894      	ldr	r0, [pc, #592]	; (800aa8c <_printf_float+0x2e4>)
 800a83c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a840:	bf94      	ite	ls
 800a842:	4698      	movls	r8, r3
 800a844:	4680      	movhi	r8, r0
 800a846:	2303      	movs	r3, #3
 800a848:	6123      	str	r3, [r4, #16]
 800a84a:	9b05      	ldr	r3, [sp, #20]
 800a84c:	f023 0204 	bic.w	r2, r3, #4
 800a850:	6022      	str	r2, [r4, #0]
 800a852:	f04f 0900 	mov.w	r9, #0
 800a856:	9700      	str	r7, [sp, #0]
 800a858:	4633      	mov	r3, r6
 800a85a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a85c:	4621      	mov	r1, r4
 800a85e:	4628      	mov	r0, r5
 800a860:	f000 f9d8 	bl	800ac14 <_printf_common>
 800a864:	3001      	adds	r0, #1
 800a866:	f040 8090 	bne.w	800a98a <_printf_float+0x1e2>
 800a86a:	f04f 30ff 	mov.w	r0, #4294967295
 800a86e:	b00d      	add	sp, #52	; 0x34
 800a870:	ecbd 8b02 	vpop	{d8}
 800a874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a878:	4642      	mov	r2, r8
 800a87a:	464b      	mov	r3, r9
 800a87c:	4640      	mov	r0, r8
 800a87e:	4649      	mov	r1, r9
 800a880:	f7f6 f974 	bl	8000b6c <__aeabi_dcmpun>
 800a884:	b140      	cbz	r0, 800a898 <_printf_float+0xf0>
 800a886:	464b      	mov	r3, r9
 800a888:	2b00      	cmp	r3, #0
 800a88a:	bfbc      	itt	lt
 800a88c:	232d      	movlt	r3, #45	; 0x2d
 800a88e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a892:	487f      	ldr	r0, [pc, #508]	; (800aa90 <_printf_float+0x2e8>)
 800a894:	4b7f      	ldr	r3, [pc, #508]	; (800aa94 <_printf_float+0x2ec>)
 800a896:	e7d1      	b.n	800a83c <_printf_float+0x94>
 800a898:	6863      	ldr	r3, [r4, #4]
 800a89a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a89e:	9206      	str	r2, [sp, #24]
 800a8a0:	1c5a      	adds	r2, r3, #1
 800a8a2:	d13f      	bne.n	800a924 <_printf_float+0x17c>
 800a8a4:	2306      	movs	r3, #6
 800a8a6:	6063      	str	r3, [r4, #4]
 800a8a8:	9b05      	ldr	r3, [sp, #20]
 800a8aa:	6861      	ldr	r1, [r4, #4]
 800a8ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9303      	str	r3, [sp, #12]
 800a8b4:	ab0a      	add	r3, sp, #40	; 0x28
 800a8b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a8ba:	ab09      	add	r3, sp, #36	; 0x24
 800a8bc:	ec49 8b10 	vmov	d0, r8, r9
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	6022      	str	r2, [r4, #0]
 800a8c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f7ff fecd 	bl	800a668 <__cvt>
 800a8ce:	9b06      	ldr	r3, [sp, #24]
 800a8d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8d2:	2b47      	cmp	r3, #71	; 0x47
 800a8d4:	4680      	mov	r8, r0
 800a8d6:	d108      	bne.n	800a8ea <_printf_float+0x142>
 800a8d8:	1cc8      	adds	r0, r1, #3
 800a8da:	db02      	blt.n	800a8e2 <_printf_float+0x13a>
 800a8dc:	6863      	ldr	r3, [r4, #4]
 800a8de:	4299      	cmp	r1, r3
 800a8e0:	dd41      	ble.n	800a966 <_printf_float+0x1be>
 800a8e2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a8e6:	fa5f fb8b 	uxtb.w	fp, fp
 800a8ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8ee:	d820      	bhi.n	800a932 <_printf_float+0x18a>
 800a8f0:	3901      	subs	r1, #1
 800a8f2:	465a      	mov	r2, fp
 800a8f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8f8:	9109      	str	r1, [sp, #36]	; 0x24
 800a8fa:	f7ff ff17 	bl	800a72c <__exponent>
 800a8fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a900:	1813      	adds	r3, r2, r0
 800a902:	2a01      	cmp	r2, #1
 800a904:	4681      	mov	r9, r0
 800a906:	6123      	str	r3, [r4, #16]
 800a908:	dc02      	bgt.n	800a910 <_printf_float+0x168>
 800a90a:	6822      	ldr	r2, [r4, #0]
 800a90c:	07d2      	lsls	r2, r2, #31
 800a90e:	d501      	bpl.n	800a914 <_printf_float+0x16c>
 800a910:	3301      	adds	r3, #1
 800a912:	6123      	str	r3, [r4, #16]
 800a914:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d09c      	beq.n	800a856 <_printf_float+0xae>
 800a91c:	232d      	movs	r3, #45	; 0x2d
 800a91e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a922:	e798      	b.n	800a856 <_printf_float+0xae>
 800a924:	9a06      	ldr	r2, [sp, #24]
 800a926:	2a47      	cmp	r2, #71	; 0x47
 800a928:	d1be      	bne.n	800a8a8 <_printf_float+0x100>
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1bc      	bne.n	800a8a8 <_printf_float+0x100>
 800a92e:	2301      	movs	r3, #1
 800a930:	e7b9      	b.n	800a8a6 <_printf_float+0xfe>
 800a932:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a936:	d118      	bne.n	800a96a <_printf_float+0x1c2>
 800a938:	2900      	cmp	r1, #0
 800a93a:	6863      	ldr	r3, [r4, #4]
 800a93c:	dd0b      	ble.n	800a956 <_printf_float+0x1ae>
 800a93e:	6121      	str	r1, [r4, #16]
 800a940:	b913      	cbnz	r3, 800a948 <_printf_float+0x1a0>
 800a942:	6822      	ldr	r2, [r4, #0]
 800a944:	07d0      	lsls	r0, r2, #31
 800a946:	d502      	bpl.n	800a94e <_printf_float+0x1a6>
 800a948:	3301      	adds	r3, #1
 800a94a:	440b      	add	r3, r1
 800a94c:	6123      	str	r3, [r4, #16]
 800a94e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a950:	f04f 0900 	mov.w	r9, #0
 800a954:	e7de      	b.n	800a914 <_printf_float+0x16c>
 800a956:	b913      	cbnz	r3, 800a95e <_printf_float+0x1b6>
 800a958:	6822      	ldr	r2, [r4, #0]
 800a95a:	07d2      	lsls	r2, r2, #31
 800a95c:	d501      	bpl.n	800a962 <_printf_float+0x1ba>
 800a95e:	3302      	adds	r3, #2
 800a960:	e7f4      	b.n	800a94c <_printf_float+0x1a4>
 800a962:	2301      	movs	r3, #1
 800a964:	e7f2      	b.n	800a94c <_printf_float+0x1a4>
 800a966:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a96c:	4299      	cmp	r1, r3
 800a96e:	db05      	blt.n	800a97c <_printf_float+0x1d4>
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	6121      	str	r1, [r4, #16]
 800a974:	07d8      	lsls	r0, r3, #31
 800a976:	d5ea      	bpl.n	800a94e <_printf_float+0x1a6>
 800a978:	1c4b      	adds	r3, r1, #1
 800a97a:	e7e7      	b.n	800a94c <_printf_float+0x1a4>
 800a97c:	2900      	cmp	r1, #0
 800a97e:	bfd4      	ite	le
 800a980:	f1c1 0202 	rsble	r2, r1, #2
 800a984:	2201      	movgt	r2, #1
 800a986:	4413      	add	r3, r2
 800a988:	e7e0      	b.n	800a94c <_printf_float+0x1a4>
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	055a      	lsls	r2, r3, #21
 800a98e:	d407      	bmi.n	800a9a0 <_printf_float+0x1f8>
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	4642      	mov	r2, r8
 800a994:	4631      	mov	r1, r6
 800a996:	4628      	mov	r0, r5
 800a998:	47b8      	blx	r7
 800a99a:	3001      	adds	r0, #1
 800a99c:	d12c      	bne.n	800a9f8 <_printf_float+0x250>
 800a99e:	e764      	b.n	800a86a <_printf_float+0xc2>
 800a9a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a9a4:	f240 80e0 	bls.w	800ab68 <_printf_float+0x3c0>
 800a9a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f7f6 f8aa 	bl	8000b08 <__aeabi_dcmpeq>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d034      	beq.n	800aa22 <_printf_float+0x27a>
 800a9b8:	4a37      	ldr	r2, [pc, #220]	; (800aa98 <_printf_float+0x2f0>)
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4628      	mov	r0, r5
 800a9c0:	47b8      	blx	r7
 800a9c2:	3001      	adds	r0, #1
 800a9c4:	f43f af51 	beq.w	800a86a <_printf_float+0xc2>
 800a9c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	db02      	blt.n	800a9d6 <_printf_float+0x22e>
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	07d8      	lsls	r0, r3, #31
 800a9d4:	d510      	bpl.n	800a9f8 <_printf_float+0x250>
 800a9d6:	ee18 3a10 	vmov	r3, s16
 800a9da:	4652      	mov	r2, sl
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4628      	mov	r0, r5
 800a9e0:	47b8      	blx	r7
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	f43f af41 	beq.w	800a86a <_printf_float+0xc2>
 800a9e8:	f04f 0800 	mov.w	r8, #0
 800a9ec:	f104 091a 	add.w	r9, r4, #26
 800a9f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	4543      	cmp	r3, r8
 800a9f6:	dc09      	bgt.n	800aa0c <_printf_float+0x264>
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	079b      	lsls	r3, r3, #30
 800a9fc:	f100 8105 	bmi.w	800ac0a <_printf_float+0x462>
 800aa00:	68e0      	ldr	r0, [r4, #12]
 800aa02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa04:	4298      	cmp	r0, r3
 800aa06:	bfb8      	it	lt
 800aa08:	4618      	movlt	r0, r3
 800aa0a:	e730      	b.n	800a86e <_printf_float+0xc6>
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	464a      	mov	r2, r9
 800aa10:	4631      	mov	r1, r6
 800aa12:	4628      	mov	r0, r5
 800aa14:	47b8      	blx	r7
 800aa16:	3001      	adds	r0, #1
 800aa18:	f43f af27 	beq.w	800a86a <_printf_float+0xc2>
 800aa1c:	f108 0801 	add.w	r8, r8, #1
 800aa20:	e7e6      	b.n	800a9f0 <_printf_float+0x248>
 800aa22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	dc39      	bgt.n	800aa9c <_printf_float+0x2f4>
 800aa28:	4a1b      	ldr	r2, [pc, #108]	; (800aa98 <_printf_float+0x2f0>)
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4628      	mov	r0, r5
 800aa30:	47b8      	blx	r7
 800aa32:	3001      	adds	r0, #1
 800aa34:	f43f af19 	beq.w	800a86a <_printf_float+0xc2>
 800aa38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	d102      	bne.n	800aa46 <_printf_float+0x29e>
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	07d9      	lsls	r1, r3, #31
 800aa44:	d5d8      	bpl.n	800a9f8 <_printf_float+0x250>
 800aa46:	ee18 3a10 	vmov	r3, s16
 800aa4a:	4652      	mov	r2, sl
 800aa4c:	4631      	mov	r1, r6
 800aa4e:	4628      	mov	r0, r5
 800aa50:	47b8      	blx	r7
 800aa52:	3001      	adds	r0, #1
 800aa54:	f43f af09 	beq.w	800a86a <_printf_float+0xc2>
 800aa58:	f04f 0900 	mov.w	r9, #0
 800aa5c:	f104 0a1a 	add.w	sl, r4, #26
 800aa60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa62:	425b      	negs	r3, r3
 800aa64:	454b      	cmp	r3, r9
 800aa66:	dc01      	bgt.n	800aa6c <_printf_float+0x2c4>
 800aa68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa6a:	e792      	b.n	800a992 <_printf_float+0x1ea>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	4652      	mov	r2, sl
 800aa70:	4631      	mov	r1, r6
 800aa72:	4628      	mov	r0, r5
 800aa74:	47b8      	blx	r7
 800aa76:	3001      	adds	r0, #1
 800aa78:	f43f aef7 	beq.w	800a86a <_printf_float+0xc2>
 800aa7c:	f109 0901 	add.w	r9, r9, #1
 800aa80:	e7ee      	b.n	800aa60 <_printf_float+0x2b8>
 800aa82:	bf00      	nop
 800aa84:	7fefffff 	.word	0x7fefffff
 800aa88:	0800cee4 	.word	0x0800cee4
 800aa8c:	0800cee8 	.word	0x0800cee8
 800aa90:	0800cef0 	.word	0x0800cef0
 800aa94:	0800ceec 	.word	0x0800ceec
 800aa98:	0800cef4 	.word	0x0800cef4
 800aa9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	bfa8      	it	ge
 800aaa4:	461a      	movge	r2, r3
 800aaa6:	2a00      	cmp	r2, #0
 800aaa8:	4691      	mov	r9, r2
 800aaaa:	dc37      	bgt.n	800ab1c <_printf_float+0x374>
 800aaac:	f04f 0b00 	mov.w	fp, #0
 800aab0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aab4:	f104 021a 	add.w	r2, r4, #26
 800aab8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aaba:	9305      	str	r3, [sp, #20]
 800aabc:	eba3 0309 	sub.w	r3, r3, r9
 800aac0:	455b      	cmp	r3, fp
 800aac2:	dc33      	bgt.n	800ab2c <_printf_float+0x384>
 800aac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aac8:	429a      	cmp	r2, r3
 800aaca:	db3b      	blt.n	800ab44 <_printf_float+0x39c>
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	07da      	lsls	r2, r3, #31
 800aad0:	d438      	bmi.n	800ab44 <_printf_float+0x39c>
 800aad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad4:	9a05      	ldr	r2, [sp, #20]
 800aad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aad8:	1a9a      	subs	r2, r3, r2
 800aada:	eba3 0901 	sub.w	r9, r3, r1
 800aade:	4591      	cmp	r9, r2
 800aae0:	bfa8      	it	ge
 800aae2:	4691      	movge	r9, r2
 800aae4:	f1b9 0f00 	cmp.w	r9, #0
 800aae8:	dc35      	bgt.n	800ab56 <_printf_float+0x3ae>
 800aaea:	f04f 0800 	mov.w	r8, #0
 800aaee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aaf2:	f104 0a1a 	add.w	sl, r4, #26
 800aaf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aafa:	1a9b      	subs	r3, r3, r2
 800aafc:	eba3 0309 	sub.w	r3, r3, r9
 800ab00:	4543      	cmp	r3, r8
 800ab02:	f77f af79 	ble.w	800a9f8 <_printf_float+0x250>
 800ab06:	2301      	movs	r3, #1
 800ab08:	4652      	mov	r2, sl
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	47b8      	blx	r7
 800ab10:	3001      	adds	r0, #1
 800ab12:	f43f aeaa 	beq.w	800a86a <_printf_float+0xc2>
 800ab16:	f108 0801 	add.w	r8, r8, #1
 800ab1a:	e7ec      	b.n	800aaf6 <_printf_float+0x34e>
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	4631      	mov	r1, r6
 800ab20:	4642      	mov	r2, r8
 800ab22:	4628      	mov	r0, r5
 800ab24:	47b8      	blx	r7
 800ab26:	3001      	adds	r0, #1
 800ab28:	d1c0      	bne.n	800aaac <_printf_float+0x304>
 800ab2a:	e69e      	b.n	800a86a <_printf_float+0xc2>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	4631      	mov	r1, r6
 800ab30:	4628      	mov	r0, r5
 800ab32:	9205      	str	r2, [sp, #20]
 800ab34:	47b8      	blx	r7
 800ab36:	3001      	adds	r0, #1
 800ab38:	f43f ae97 	beq.w	800a86a <_printf_float+0xc2>
 800ab3c:	9a05      	ldr	r2, [sp, #20]
 800ab3e:	f10b 0b01 	add.w	fp, fp, #1
 800ab42:	e7b9      	b.n	800aab8 <_printf_float+0x310>
 800ab44:	ee18 3a10 	vmov	r3, s16
 800ab48:	4652      	mov	r2, sl
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	47b8      	blx	r7
 800ab50:	3001      	adds	r0, #1
 800ab52:	d1be      	bne.n	800aad2 <_printf_float+0x32a>
 800ab54:	e689      	b.n	800a86a <_printf_float+0xc2>
 800ab56:	9a05      	ldr	r2, [sp, #20]
 800ab58:	464b      	mov	r3, r9
 800ab5a:	4442      	add	r2, r8
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	4628      	mov	r0, r5
 800ab60:	47b8      	blx	r7
 800ab62:	3001      	adds	r0, #1
 800ab64:	d1c1      	bne.n	800aaea <_printf_float+0x342>
 800ab66:	e680      	b.n	800a86a <_printf_float+0xc2>
 800ab68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab6a:	2a01      	cmp	r2, #1
 800ab6c:	dc01      	bgt.n	800ab72 <_printf_float+0x3ca>
 800ab6e:	07db      	lsls	r3, r3, #31
 800ab70:	d538      	bpl.n	800abe4 <_printf_float+0x43c>
 800ab72:	2301      	movs	r3, #1
 800ab74:	4642      	mov	r2, r8
 800ab76:	4631      	mov	r1, r6
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b8      	blx	r7
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	f43f ae74 	beq.w	800a86a <_printf_float+0xc2>
 800ab82:	ee18 3a10 	vmov	r3, s16
 800ab86:	4652      	mov	r2, sl
 800ab88:	4631      	mov	r1, r6
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	47b8      	blx	r7
 800ab8e:	3001      	adds	r0, #1
 800ab90:	f43f ae6b 	beq.w	800a86a <_printf_float+0xc2>
 800ab94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f7f5 ffb4 	bl	8000b08 <__aeabi_dcmpeq>
 800aba0:	b9d8      	cbnz	r0, 800abda <_printf_float+0x432>
 800aba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba4:	f108 0201 	add.w	r2, r8, #1
 800aba8:	3b01      	subs	r3, #1
 800abaa:	4631      	mov	r1, r6
 800abac:	4628      	mov	r0, r5
 800abae:	47b8      	blx	r7
 800abb0:	3001      	adds	r0, #1
 800abb2:	d10e      	bne.n	800abd2 <_printf_float+0x42a>
 800abb4:	e659      	b.n	800a86a <_printf_float+0xc2>
 800abb6:	2301      	movs	r3, #1
 800abb8:	4652      	mov	r2, sl
 800abba:	4631      	mov	r1, r6
 800abbc:	4628      	mov	r0, r5
 800abbe:	47b8      	blx	r7
 800abc0:	3001      	adds	r0, #1
 800abc2:	f43f ae52 	beq.w	800a86a <_printf_float+0xc2>
 800abc6:	f108 0801 	add.w	r8, r8, #1
 800abca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abcc:	3b01      	subs	r3, #1
 800abce:	4543      	cmp	r3, r8
 800abd0:	dcf1      	bgt.n	800abb6 <_printf_float+0x40e>
 800abd2:	464b      	mov	r3, r9
 800abd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800abd8:	e6dc      	b.n	800a994 <_printf_float+0x1ec>
 800abda:	f04f 0800 	mov.w	r8, #0
 800abde:	f104 0a1a 	add.w	sl, r4, #26
 800abe2:	e7f2      	b.n	800abca <_printf_float+0x422>
 800abe4:	2301      	movs	r3, #1
 800abe6:	4642      	mov	r2, r8
 800abe8:	e7df      	b.n	800abaa <_printf_float+0x402>
 800abea:	2301      	movs	r3, #1
 800abec:	464a      	mov	r2, r9
 800abee:	4631      	mov	r1, r6
 800abf0:	4628      	mov	r0, r5
 800abf2:	47b8      	blx	r7
 800abf4:	3001      	adds	r0, #1
 800abf6:	f43f ae38 	beq.w	800a86a <_printf_float+0xc2>
 800abfa:	f108 0801 	add.w	r8, r8, #1
 800abfe:	68e3      	ldr	r3, [r4, #12]
 800ac00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac02:	1a5b      	subs	r3, r3, r1
 800ac04:	4543      	cmp	r3, r8
 800ac06:	dcf0      	bgt.n	800abea <_printf_float+0x442>
 800ac08:	e6fa      	b.n	800aa00 <_printf_float+0x258>
 800ac0a:	f04f 0800 	mov.w	r8, #0
 800ac0e:	f104 0919 	add.w	r9, r4, #25
 800ac12:	e7f4      	b.n	800abfe <_printf_float+0x456>

0800ac14 <_printf_common>:
 800ac14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac18:	4616      	mov	r6, r2
 800ac1a:	4699      	mov	r9, r3
 800ac1c:	688a      	ldr	r2, [r1, #8]
 800ac1e:	690b      	ldr	r3, [r1, #16]
 800ac20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac24:	4293      	cmp	r3, r2
 800ac26:	bfb8      	it	lt
 800ac28:	4613      	movlt	r3, r2
 800ac2a:	6033      	str	r3, [r6, #0]
 800ac2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac30:	4607      	mov	r7, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	b10a      	cbz	r2, 800ac3a <_printf_common+0x26>
 800ac36:	3301      	adds	r3, #1
 800ac38:	6033      	str	r3, [r6, #0]
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	0699      	lsls	r1, r3, #26
 800ac3e:	bf42      	ittt	mi
 800ac40:	6833      	ldrmi	r3, [r6, #0]
 800ac42:	3302      	addmi	r3, #2
 800ac44:	6033      	strmi	r3, [r6, #0]
 800ac46:	6825      	ldr	r5, [r4, #0]
 800ac48:	f015 0506 	ands.w	r5, r5, #6
 800ac4c:	d106      	bne.n	800ac5c <_printf_common+0x48>
 800ac4e:	f104 0a19 	add.w	sl, r4, #25
 800ac52:	68e3      	ldr	r3, [r4, #12]
 800ac54:	6832      	ldr	r2, [r6, #0]
 800ac56:	1a9b      	subs	r3, r3, r2
 800ac58:	42ab      	cmp	r3, r5
 800ac5a:	dc26      	bgt.n	800acaa <_printf_common+0x96>
 800ac5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac60:	1e13      	subs	r3, r2, #0
 800ac62:	6822      	ldr	r2, [r4, #0]
 800ac64:	bf18      	it	ne
 800ac66:	2301      	movne	r3, #1
 800ac68:	0692      	lsls	r2, r2, #26
 800ac6a:	d42b      	bmi.n	800acc4 <_printf_common+0xb0>
 800ac6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac70:	4649      	mov	r1, r9
 800ac72:	4638      	mov	r0, r7
 800ac74:	47c0      	blx	r8
 800ac76:	3001      	adds	r0, #1
 800ac78:	d01e      	beq.n	800acb8 <_printf_common+0xa4>
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	68e5      	ldr	r5, [r4, #12]
 800ac7e:	6832      	ldr	r2, [r6, #0]
 800ac80:	f003 0306 	and.w	r3, r3, #6
 800ac84:	2b04      	cmp	r3, #4
 800ac86:	bf08      	it	eq
 800ac88:	1aad      	subeq	r5, r5, r2
 800ac8a:	68a3      	ldr	r3, [r4, #8]
 800ac8c:	6922      	ldr	r2, [r4, #16]
 800ac8e:	bf0c      	ite	eq
 800ac90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac94:	2500      	movne	r5, #0
 800ac96:	4293      	cmp	r3, r2
 800ac98:	bfc4      	itt	gt
 800ac9a:	1a9b      	subgt	r3, r3, r2
 800ac9c:	18ed      	addgt	r5, r5, r3
 800ac9e:	2600      	movs	r6, #0
 800aca0:	341a      	adds	r4, #26
 800aca2:	42b5      	cmp	r5, r6
 800aca4:	d11a      	bne.n	800acdc <_printf_common+0xc8>
 800aca6:	2000      	movs	r0, #0
 800aca8:	e008      	b.n	800acbc <_printf_common+0xa8>
 800acaa:	2301      	movs	r3, #1
 800acac:	4652      	mov	r2, sl
 800acae:	4649      	mov	r1, r9
 800acb0:	4638      	mov	r0, r7
 800acb2:	47c0      	blx	r8
 800acb4:	3001      	adds	r0, #1
 800acb6:	d103      	bne.n	800acc0 <_printf_common+0xac>
 800acb8:	f04f 30ff 	mov.w	r0, #4294967295
 800acbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc0:	3501      	adds	r5, #1
 800acc2:	e7c6      	b.n	800ac52 <_printf_common+0x3e>
 800acc4:	18e1      	adds	r1, r4, r3
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	2030      	movs	r0, #48	; 0x30
 800acca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acce:	4422      	add	r2, r4
 800acd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acd8:	3302      	adds	r3, #2
 800acda:	e7c7      	b.n	800ac6c <_printf_common+0x58>
 800acdc:	2301      	movs	r3, #1
 800acde:	4622      	mov	r2, r4
 800ace0:	4649      	mov	r1, r9
 800ace2:	4638      	mov	r0, r7
 800ace4:	47c0      	blx	r8
 800ace6:	3001      	adds	r0, #1
 800ace8:	d0e6      	beq.n	800acb8 <_printf_common+0xa4>
 800acea:	3601      	adds	r6, #1
 800acec:	e7d9      	b.n	800aca2 <_printf_common+0x8e>
	...

0800acf0 <_printf_i>:
 800acf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acf4:	7e0f      	ldrb	r7, [r1, #24]
 800acf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acf8:	2f78      	cmp	r7, #120	; 0x78
 800acfa:	4691      	mov	r9, r2
 800acfc:	4680      	mov	r8, r0
 800acfe:	460c      	mov	r4, r1
 800ad00:	469a      	mov	sl, r3
 800ad02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad06:	d807      	bhi.n	800ad18 <_printf_i+0x28>
 800ad08:	2f62      	cmp	r7, #98	; 0x62
 800ad0a:	d80a      	bhi.n	800ad22 <_printf_i+0x32>
 800ad0c:	2f00      	cmp	r7, #0
 800ad0e:	f000 80d8 	beq.w	800aec2 <_printf_i+0x1d2>
 800ad12:	2f58      	cmp	r7, #88	; 0x58
 800ad14:	f000 80a3 	beq.w	800ae5e <_printf_i+0x16e>
 800ad18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad20:	e03a      	b.n	800ad98 <_printf_i+0xa8>
 800ad22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad26:	2b15      	cmp	r3, #21
 800ad28:	d8f6      	bhi.n	800ad18 <_printf_i+0x28>
 800ad2a:	a101      	add	r1, pc, #4	; (adr r1, 800ad30 <_printf_i+0x40>)
 800ad2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad30:	0800ad89 	.word	0x0800ad89
 800ad34:	0800ad9d 	.word	0x0800ad9d
 800ad38:	0800ad19 	.word	0x0800ad19
 800ad3c:	0800ad19 	.word	0x0800ad19
 800ad40:	0800ad19 	.word	0x0800ad19
 800ad44:	0800ad19 	.word	0x0800ad19
 800ad48:	0800ad9d 	.word	0x0800ad9d
 800ad4c:	0800ad19 	.word	0x0800ad19
 800ad50:	0800ad19 	.word	0x0800ad19
 800ad54:	0800ad19 	.word	0x0800ad19
 800ad58:	0800ad19 	.word	0x0800ad19
 800ad5c:	0800aea9 	.word	0x0800aea9
 800ad60:	0800adcd 	.word	0x0800adcd
 800ad64:	0800ae8b 	.word	0x0800ae8b
 800ad68:	0800ad19 	.word	0x0800ad19
 800ad6c:	0800ad19 	.word	0x0800ad19
 800ad70:	0800aecb 	.word	0x0800aecb
 800ad74:	0800ad19 	.word	0x0800ad19
 800ad78:	0800adcd 	.word	0x0800adcd
 800ad7c:	0800ad19 	.word	0x0800ad19
 800ad80:	0800ad19 	.word	0x0800ad19
 800ad84:	0800ae93 	.word	0x0800ae93
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	1d1a      	adds	r2, r3, #4
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	602a      	str	r2, [r5, #0]
 800ad90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e0a3      	b.n	800aee4 <_printf_i+0x1f4>
 800ad9c:	6820      	ldr	r0, [r4, #0]
 800ad9e:	6829      	ldr	r1, [r5, #0]
 800ada0:	0606      	lsls	r6, r0, #24
 800ada2:	f101 0304 	add.w	r3, r1, #4
 800ada6:	d50a      	bpl.n	800adbe <_printf_i+0xce>
 800ada8:	680e      	ldr	r6, [r1, #0]
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	2e00      	cmp	r6, #0
 800adae:	da03      	bge.n	800adb8 <_printf_i+0xc8>
 800adb0:	232d      	movs	r3, #45	; 0x2d
 800adb2:	4276      	negs	r6, r6
 800adb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb8:	485e      	ldr	r0, [pc, #376]	; (800af34 <_printf_i+0x244>)
 800adba:	230a      	movs	r3, #10
 800adbc:	e019      	b.n	800adf2 <_printf_i+0x102>
 800adbe:	680e      	ldr	r6, [r1, #0]
 800adc0:	602b      	str	r3, [r5, #0]
 800adc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800adc6:	bf18      	it	ne
 800adc8:	b236      	sxthne	r6, r6
 800adca:	e7ef      	b.n	800adac <_printf_i+0xbc>
 800adcc:	682b      	ldr	r3, [r5, #0]
 800adce:	6820      	ldr	r0, [r4, #0]
 800add0:	1d19      	adds	r1, r3, #4
 800add2:	6029      	str	r1, [r5, #0]
 800add4:	0601      	lsls	r1, r0, #24
 800add6:	d501      	bpl.n	800addc <_printf_i+0xec>
 800add8:	681e      	ldr	r6, [r3, #0]
 800adda:	e002      	b.n	800ade2 <_printf_i+0xf2>
 800addc:	0646      	lsls	r6, r0, #25
 800adde:	d5fb      	bpl.n	800add8 <_printf_i+0xe8>
 800ade0:	881e      	ldrh	r6, [r3, #0]
 800ade2:	4854      	ldr	r0, [pc, #336]	; (800af34 <_printf_i+0x244>)
 800ade4:	2f6f      	cmp	r7, #111	; 0x6f
 800ade6:	bf0c      	ite	eq
 800ade8:	2308      	moveq	r3, #8
 800adea:	230a      	movne	r3, #10
 800adec:	2100      	movs	r1, #0
 800adee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adf2:	6865      	ldr	r5, [r4, #4]
 800adf4:	60a5      	str	r5, [r4, #8]
 800adf6:	2d00      	cmp	r5, #0
 800adf8:	bfa2      	ittt	ge
 800adfa:	6821      	ldrge	r1, [r4, #0]
 800adfc:	f021 0104 	bicge.w	r1, r1, #4
 800ae00:	6021      	strge	r1, [r4, #0]
 800ae02:	b90e      	cbnz	r6, 800ae08 <_printf_i+0x118>
 800ae04:	2d00      	cmp	r5, #0
 800ae06:	d04d      	beq.n	800aea4 <_printf_i+0x1b4>
 800ae08:	4615      	mov	r5, r2
 800ae0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae0e:	fb03 6711 	mls	r7, r3, r1, r6
 800ae12:	5dc7      	ldrb	r7, [r0, r7]
 800ae14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae18:	4637      	mov	r7, r6
 800ae1a:	42bb      	cmp	r3, r7
 800ae1c:	460e      	mov	r6, r1
 800ae1e:	d9f4      	bls.n	800ae0a <_printf_i+0x11a>
 800ae20:	2b08      	cmp	r3, #8
 800ae22:	d10b      	bne.n	800ae3c <_printf_i+0x14c>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	07de      	lsls	r6, r3, #31
 800ae28:	d508      	bpl.n	800ae3c <_printf_i+0x14c>
 800ae2a:	6923      	ldr	r3, [r4, #16]
 800ae2c:	6861      	ldr	r1, [r4, #4]
 800ae2e:	4299      	cmp	r1, r3
 800ae30:	bfde      	ittt	le
 800ae32:	2330      	movle	r3, #48	; 0x30
 800ae34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae3c:	1b52      	subs	r2, r2, r5
 800ae3e:	6122      	str	r2, [r4, #16]
 800ae40:	f8cd a000 	str.w	sl, [sp]
 800ae44:	464b      	mov	r3, r9
 800ae46:	aa03      	add	r2, sp, #12
 800ae48:	4621      	mov	r1, r4
 800ae4a:	4640      	mov	r0, r8
 800ae4c:	f7ff fee2 	bl	800ac14 <_printf_common>
 800ae50:	3001      	adds	r0, #1
 800ae52:	d14c      	bne.n	800aeee <_printf_i+0x1fe>
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	b004      	add	sp, #16
 800ae5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae5e:	4835      	ldr	r0, [pc, #212]	; (800af34 <_printf_i+0x244>)
 800ae60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae64:	6829      	ldr	r1, [r5, #0]
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae6c:	6029      	str	r1, [r5, #0]
 800ae6e:	061d      	lsls	r5, r3, #24
 800ae70:	d514      	bpl.n	800ae9c <_printf_i+0x1ac>
 800ae72:	07df      	lsls	r7, r3, #31
 800ae74:	bf44      	itt	mi
 800ae76:	f043 0320 	orrmi.w	r3, r3, #32
 800ae7a:	6023      	strmi	r3, [r4, #0]
 800ae7c:	b91e      	cbnz	r6, 800ae86 <_printf_i+0x196>
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	f023 0320 	bic.w	r3, r3, #32
 800ae84:	6023      	str	r3, [r4, #0]
 800ae86:	2310      	movs	r3, #16
 800ae88:	e7b0      	b.n	800adec <_printf_i+0xfc>
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	f043 0320 	orr.w	r3, r3, #32
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	2378      	movs	r3, #120	; 0x78
 800ae94:	4828      	ldr	r0, [pc, #160]	; (800af38 <_printf_i+0x248>)
 800ae96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae9a:	e7e3      	b.n	800ae64 <_printf_i+0x174>
 800ae9c:	0659      	lsls	r1, r3, #25
 800ae9e:	bf48      	it	mi
 800aea0:	b2b6      	uxthmi	r6, r6
 800aea2:	e7e6      	b.n	800ae72 <_printf_i+0x182>
 800aea4:	4615      	mov	r5, r2
 800aea6:	e7bb      	b.n	800ae20 <_printf_i+0x130>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	6826      	ldr	r6, [r4, #0]
 800aeac:	6961      	ldr	r1, [r4, #20]
 800aeae:	1d18      	adds	r0, r3, #4
 800aeb0:	6028      	str	r0, [r5, #0]
 800aeb2:	0635      	lsls	r5, r6, #24
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	d501      	bpl.n	800aebc <_printf_i+0x1cc>
 800aeb8:	6019      	str	r1, [r3, #0]
 800aeba:	e002      	b.n	800aec2 <_printf_i+0x1d2>
 800aebc:	0670      	lsls	r0, r6, #25
 800aebe:	d5fb      	bpl.n	800aeb8 <_printf_i+0x1c8>
 800aec0:	8019      	strh	r1, [r3, #0]
 800aec2:	2300      	movs	r3, #0
 800aec4:	6123      	str	r3, [r4, #16]
 800aec6:	4615      	mov	r5, r2
 800aec8:	e7ba      	b.n	800ae40 <_printf_i+0x150>
 800aeca:	682b      	ldr	r3, [r5, #0]
 800aecc:	1d1a      	adds	r2, r3, #4
 800aece:	602a      	str	r2, [r5, #0]
 800aed0:	681d      	ldr	r5, [r3, #0]
 800aed2:	6862      	ldr	r2, [r4, #4]
 800aed4:	2100      	movs	r1, #0
 800aed6:	4628      	mov	r0, r5
 800aed8:	f7f5 f9a2 	bl	8000220 <memchr>
 800aedc:	b108      	cbz	r0, 800aee2 <_printf_i+0x1f2>
 800aede:	1b40      	subs	r0, r0, r5
 800aee0:	6060      	str	r0, [r4, #4]
 800aee2:	6863      	ldr	r3, [r4, #4]
 800aee4:	6123      	str	r3, [r4, #16]
 800aee6:	2300      	movs	r3, #0
 800aee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeec:	e7a8      	b.n	800ae40 <_printf_i+0x150>
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	462a      	mov	r2, r5
 800aef2:	4649      	mov	r1, r9
 800aef4:	4640      	mov	r0, r8
 800aef6:	47d0      	blx	sl
 800aef8:	3001      	adds	r0, #1
 800aefa:	d0ab      	beq.n	800ae54 <_printf_i+0x164>
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	079b      	lsls	r3, r3, #30
 800af00:	d413      	bmi.n	800af2a <_printf_i+0x23a>
 800af02:	68e0      	ldr	r0, [r4, #12]
 800af04:	9b03      	ldr	r3, [sp, #12]
 800af06:	4298      	cmp	r0, r3
 800af08:	bfb8      	it	lt
 800af0a:	4618      	movlt	r0, r3
 800af0c:	e7a4      	b.n	800ae58 <_printf_i+0x168>
 800af0e:	2301      	movs	r3, #1
 800af10:	4632      	mov	r2, r6
 800af12:	4649      	mov	r1, r9
 800af14:	4640      	mov	r0, r8
 800af16:	47d0      	blx	sl
 800af18:	3001      	adds	r0, #1
 800af1a:	d09b      	beq.n	800ae54 <_printf_i+0x164>
 800af1c:	3501      	adds	r5, #1
 800af1e:	68e3      	ldr	r3, [r4, #12]
 800af20:	9903      	ldr	r1, [sp, #12]
 800af22:	1a5b      	subs	r3, r3, r1
 800af24:	42ab      	cmp	r3, r5
 800af26:	dcf2      	bgt.n	800af0e <_printf_i+0x21e>
 800af28:	e7eb      	b.n	800af02 <_printf_i+0x212>
 800af2a:	2500      	movs	r5, #0
 800af2c:	f104 0619 	add.w	r6, r4, #25
 800af30:	e7f5      	b.n	800af1e <_printf_i+0x22e>
 800af32:	bf00      	nop
 800af34:	0800cef6 	.word	0x0800cef6
 800af38:	0800cf07 	.word	0x0800cf07

0800af3c <cleanup_glue>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	460c      	mov	r4, r1
 800af40:	6809      	ldr	r1, [r1, #0]
 800af42:	4605      	mov	r5, r0
 800af44:	b109      	cbz	r1, 800af4a <cleanup_glue+0xe>
 800af46:	f7ff fff9 	bl	800af3c <cleanup_glue>
 800af4a:	4621      	mov	r1, r4
 800af4c:	4628      	mov	r0, r5
 800af4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af52:	f001 bbd5 	b.w	800c700 <_free_r>
	...

0800af58 <_reclaim_reent>:
 800af58:	4b2c      	ldr	r3, [pc, #176]	; (800b00c <_reclaim_reent+0xb4>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4283      	cmp	r3, r0
 800af5e:	b570      	push	{r4, r5, r6, lr}
 800af60:	4604      	mov	r4, r0
 800af62:	d051      	beq.n	800b008 <_reclaim_reent+0xb0>
 800af64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800af66:	b143      	cbz	r3, 800af7a <_reclaim_reent+0x22>
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d14a      	bne.n	800b004 <_reclaim_reent+0xac>
 800af6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af70:	6819      	ldr	r1, [r3, #0]
 800af72:	b111      	cbz	r1, 800af7a <_reclaim_reent+0x22>
 800af74:	4620      	mov	r0, r4
 800af76:	f001 fbc3 	bl	800c700 <_free_r>
 800af7a:	6961      	ldr	r1, [r4, #20]
 800af7c:	b111      	cbz	r1, 800af84 <_reclaim_reent+0x2c>
 800af7e:	4620      	mov	r0, r4
 800af80:	f001 fbbe 	bl	800c700 <_free_r>
 800af84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800af86:	b111      	cbz	r1, 800af8e <_reclaim_reent+0x36>
 800af88:	4620      	mov	r0, r4
 800af8a:	f001 fbb9 	bl	800c700 <_free_r>
 800af8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800af90:	b111      	cbz	r1, 800af98 <_reclaim_reent+0x40>
 800af92:	4620      	mov	r0, r4
 800af94:	f001 fbb4 	bl	800c700 <_free_r>
 800af98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800af9a:	b111      	cbz	r1, 800afa2 <_reclaim_reent+0x4a>
 800af9c:	4620      	mov	r0, r4
 800af9e:	f001 fbaf 	bl	800c700 <_free_r>
 800afa2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800afa4:	b111      	cbz	r1, 800afac <_reclaim_reent+0x54>
 800afa6:	4620      	mov	r0, r4
 800afa8:	f001 fbaa 	bl	800c700 <_free_r>
 800afac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800afae:	b111      	cbz	r1, 800afb6 <_reclaim_reent+0x5e>
 800afb0:	4620      	mov	r0, r4
 800afb2:	f001 fba5 	bl	800c700 <_free_r>
 800afb6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800afb8:	b111      	cbz	r1, 800afc0 <_reclaim_reent+0x68>
 800afba:	4620      	mov	r0, r4
 800afbc:	f001 fba0 	bl	800c700 <_free_r>
 800afc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afc2:	b111      	cbz	r1, 800afca <_reclaim_reent+0x72>
 800afc4:	4620      	mov	r0, r4
 800afc6:	f001 fb9b 	bl	800c700 <_free_r>
 800afca:	69a3      	ldr	r3, [r4, #24]
 800afcc:	b1e3      	cbz	r3, 800b008 <_reclaim_reent+0xb0>
 800afce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800afd0:	4620      	mov	r0, r4
 800afd2:	4798      	blx	r3
 800afd4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800afd6:	b1b9      	cbz	r1, 800b008 <_reclaim_reent+0xb0>
 800afd8:	4620      	mov	r0, r4
 800afda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800afde:	f7ff bfad 	b.w	800af3c <cleanup_glue>
 800afe2:	5949      	ldr	r1, [r1, r5]
 800afe4:	b941      	cbnz	r1, 800aff8 <_reclaim_reent+0xa0>
 800afe6:	3504      	adds	r5, #4
 800afe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afea:	2d80      	cmp	r5, #128	; 0x80
 800afec:	68d9      	ldr	r1, [r3, #12]
 800afee:	d1f8      	bne.n	800afe2 <_reclaim_reent+0x8a>
 800aff0:	4620      	mov	r0, r4
 800aff2:	f001 fb85 	bl	800c700 <_free_r>
 800aff6:	e7ba      	b.n	800af6e <_reclaim_reent+0x16>
 800aff8:	680e      	ldr	r6, [r1, #0]
 800affa:	4620      	mov	r0, r4
 800affc:	f001 fb80 	bl	800c700 <_free_r>
 800b000:	4631      	mov	r1, r6
 800b002:	e7ef      	b.n	800afe4 <_reclaim_reent+0x8c>
 800b004:	2500      	movs	r5, #0
 800b006:	e7ef      	b.n	800afe8 <_reclaim_reent+0x90>
 800b008:	bd70      	pop	{r4, r5, r6, pc}
 800b00a:	bf00      	nop
 800b00c:	20000010 	.word	0x20000010

0800b010 <_sbrk_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4d06      	ldr	r5, [pc, #24]	; (800b02c <_sbrk_r+0x1c>)
 800b014:	2300      	movs	r3, #0
 800b016:	4604      	mov	r4, r0
 800b018:	4608      	mov	r0, r1
 800b01a:	602b      	str	r3, [r5, #0]
 800b01c:	f7f6 fcd8 	bl	80019d0 <_sbrk>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	d102      	bne.n	800b02a <_sbrk_r+0x1a>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	b103      	cbz	r3, 800b02a <_sbrk_r+0x1a>
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	bd38      	pop	{r3, r4, r5, pc}
 800b02c:	200016f4 	.word	0x200016f4

0800b030 <__sread>:
 800b030:	b510      	push	{r4, lr}
 800b032:	460c      	mov	r4, r1
 800b034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b038:	f001 fbae 	bl	800c798 <_read_r>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	bfab      	itete	ge
 800b040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b042:	89a3      	ldrhlt	r3, [r4, #12]
 800b044:	181b      	addge	r3, r3, r0
 800b046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b04a:	bfac      	ite	ge
 800b04c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b04e:	81a3      	strhlt	r3, [r4, #12]
 800b050:	bd10      	pop	{r4, pc}

0800b052 <__swrite>:
 800b052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b056:	461f      	mov	r7, r3
 800b058:	898b      	ldrh	r3, [r1, #12]
 800b05a:	05db      	lsls	r3, r3, #23
 800b05c:	4605      	mov	r5, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	4616      	mov	r6, r2
 800b062:	d505      	bpl.n	800b070 <__swrite+0x1e>
 800b064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b068:	2302      	movs	r3, #2
 800b06a:	2200      	movs	r2, #0
 800b06c:	f000 ff88 	bl	800bf80 <_lseek_r>
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b07a:	81a3      	strh	r3, [r4, #12]
 800b07c:	4632      	mov	r2, r6
 800b07e:	463b      	mov	r3, r7
 800b080:	4628      	mov	r0, r5
 800b082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b086:	f000 b817 	b.w	800b0b8 <_write_r>

0800b08a <__sseek>:
 800b08a:	b510      	push	{r4, lr}
 800b08c:	460c      	mov	r4, r1
 800b08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b092:	f000 ff75 	bl	800bf80 <_lseek_r>
 800b096:	1c43      	adds	r3, r0, #1
 800b098:	89a3      	ldrh	r3, [r4, #12]
 800b09a:	bf15      	itete	ne
 800b09c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b09e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b0a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b0a6:	81a3      	strheq	r3, [r4, #12]
 800b0a8:	bf18      	it	ne
 800b0aa:	81a3      	strhne	r3, [r4, #12]
 800b0ac:	bd10      	pop	{r4, pc}

0800b0ae <__sclose>:
 800b0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b2:	f000 b813 	b.w	800b0dc <_close_r>
	...

0800b0b8 <_write_r>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	4d07      	ldr	r5, [pc, #28]	; (800b0d8 <_write_r+0x20>)
 800b0bc:	4604      	mov	r4, r0
 800b0be:	4608      	mov	r0, r1
 800b0c0:	4611      	mov	r1, r2
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	602a      	str	r2, [r5, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f7f6 fc31 	bl	800192e <_write>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d102      	bne.n	800b0d6 <_write_r+0x1e>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	b103      	cbz	r3, 800b0d6 <_write_r+0x1e>
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	200016f4 	.word	0x200016f4

0800b0dc <_close_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d06      	ldr	r5, [pc, #24]	; (800b0f8 <_close_r+0x1c>)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	602b      	str	r3, [r5, #0]
 800b0e8:	f7f6 fc3d 	bl	8001966 <_close>
 800b0ec:	1c43      	adds	r3, r0, #1
 800b0ee:	d102      	bne.n	800b0f6 <_close_r+0x1a>
 800b0f0:	682b      	ldr	r3, [r5, #0]
 800b0f2:	b103      	cbz	r3, 800b0f6 <_close_r+0x1a>
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	bd38      	pop	{r3, r4, r5, pc}
 800b0f8:	200016f4 	.word	0x200016f4

0800b0fc <quorem>:
 800b0fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b100:	6903      	ldr	r3, [r0, #16]
 800b102:	690c      	ldr	r4, [r1, #16]
 800b104:	42a3      	cmp	r3, r4
 800b106:	4607      	mov	r7, r0
 800b108:	f2c0 8081 	blt.w	800b20e <quorem+0x112>
 800b10c:	3c01      	subs	r4, #1
 800b10e:	f101 0814 	add.w	r8, r1, #20
 800b112:	f100 0514 	add.w	r5, r0, #20
 800b116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b11a:	9301      	str	r3, [sp, #4]
 800b11c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b124:	3301      	adds	r3, #1
 800b126:	429a      	cmp	r2, r3
 800b128:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b12c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b130:	fbb2 f6f3 	udiv	r6, r2, r3
 800b134:	d331      	bcc.n	800b19a <quorem+0x9e>
 800b136:	f04f 0e00 	mov.w	lr, #0
 800b13a:	4640      	mov	r0, r8
 800b13c:	46ac      	mov	ip, r5
 800b13e:	46f2      	mov	sl, lr
 800b140:	f850 2b04 	ldr.w	r2, [r0], #4
 800b144:	b293      	uxth	r3, r2
 800b146:	fb06 e303 	mla	r3, r6, r3, lr
 800b14a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b14e:	b29b      	uxth	r3, r3
 800b150:	ebaa 0303 	sub.w	r3, sl, r3
 800b154:	f8dc a000 	ldr.w	sl, [ip]
 800b158:	0c12      	lsrs	r2, r2, #16
 800b15a:	fa13 f38a 	uxtah	r3, r3, sl
 800b15e:	fb06 e202 	mla	r2, r6, r2, lr
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	9b00      	ldr	r3, [sp, #0]
 800b166:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b16a:	b292      	uxth	r2, r2
 800b16c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b170:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b174:	f8bd 3000 	ldrh.w	r3, [sp]
 800b178:	4581      	cmp	r9, r0
 800b17a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b17e:	f84c 3b04 	str.w	r3, [ip], #4
 800b182:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b186:	d2db      	bcs.n	800b140 <quorem+0x44>
 800b188:	f855 300b 	ldr.w	r3, [r5, fp]
 800b18c:	b92b      	cbnz	r3, 800b19a <quorem+0x9e>
 800b18e:	9b01      	ldr	r3, [sp, #4]
 800b190:	3b04      	subs	r3, #4
 800b192:	429d      	cmp	r5, r3
 800b194:	461a      	mov	r2, r3
 800b196:	d32e      	bcc.n	800b1f6 <quorem+0xfa>
 800b198:	613c      	str	r4, [r7, #16]
 800b19a:	4638      	mov	r0, r7
 800b19c:	f001 f998 	bl	800c4d0 <__mcmp>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	db24      	blt.n	800b1ee <quorem+0xf2>
 800b1a4:	3601      	adds	r6, #1
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f04f 0c00 	mov.w	ip, #0
 800b1ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1b0:	f8d0 e000 	ldr.w	lr, [r0]
 800b1b4:	b293      	uxth	r3, r2
 800b1b6:	ebac 0303 	sub.w	r3, ip, r3
 800b1ba:	0c12      	lsrs	r2, r2, #16
 800b1bc:	fa13 f38e 	uxtah	r3, r3, lr
 800b1c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b1c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1ce:	45c1      	cmp	r9, r8
 800b1d0:	f840 3b04 	str.w	r3, [r0], #4
 800b1d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1d8:	d2e8      	bcs.n	800b1ac <quorem+0xb0>
 800b1da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1e2:	b922      	cbnz	r2, 800b1ee <quorem+0xf2>
 800b1e4:	3b04      	subs	r3, #4
 800b1e6:	429d      	cmp	r5, r3
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	d30a      	bcc.n	800b202 <quorem+0x106>
 800b1ec:	613c      	str	r4, [r7, #16]
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	b003      	add	sp, #12
 800b1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f6:	6812      	ldr	r2, [r2, #0]
 800b1f8:	3b04      	subs	r3, #4
 800b1fa:	2a00      	cmp	r2, #0
 800b1fc:	d1cc      	bne.n	800b198 <quorem+0x9c>
 800b1fe:	3c01      	subs	r4, #1
 800b200:	e7c7      	b.n	800b192 <quorem+0x96>
 800b202:	6812      	ldr	r2, [r2, #0]
 800b204:	3b04      	subs	r3, #4
 800b206:	2a00      	cmp	r2, #0
 800b208:	d1f0      	bne.n	800b1ec <quorem+0xf0>
 800b20a:	3c01      	subs	r4, #1
 800b20c:	e7eb      	b.n	800b1e6 <quorem+0xea>
 800b20e:	2000      	movs	r0, #0
 800b210:	e7ee      	b.n	800b1f0 <quorem+0xf4>
 800b212:	0000      	movs	r0, r0
 800b214:	0000      	movs	r0, r0
	...

0800b218 <_dtoa_r>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	ed2d 8b04 	vpush	{d8-d9}
 800b220:	ec57 6b10 	vmov	r6, r7, d0
 800b224:	b093      	sub	sp, #76	; 0x4c
 800b226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b22c:	9106      	str	r1, [sp, #24]
 800b22e:	ee10 aa10 	vmov	sl, s0
 800b232:	4604      	mov	r4, r0
 800b234:	9209      	str	r2, [sp, #36]	; 0x24
 800b236:	930c      	str	r3, [sp, #48]	; 0x30
 800b238:	46bb      	mov	fp, r7
 800b23a:	b975      	cbnz	r5, 800b25a <_dtoa_r+0x42>
 800b23c:	2010      	movs	r0, #16
 800b23e:	f000 feb1 	bl	800bfa4 <malloc>
 800b242:	4602      	mov	r2, r0
 800b244:	6260      	str	r0, [r4, #36]	; 0x24
 800b246:	b920      	cbnz	r0, 800b252 <_dtoa_r+0x3a>
 800b248:	4ba7      	ldr	r3, [pc, #668]	; (800b4e8 <_dtoa_r+0x2d0>)
 800b24a:	21ea      	movs	r1, #234	; 0xea
 800b24c:	48a7      	ldr	r0, [pc, #668]	; (800b4ec <_dtoa_r+0x2d4>)
 800b24e:	f001 fab5 	bl	800c7bc <__assert_func>
 800b252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b256:	6005      	str	r5, [r0, #0]
 800b258:	60c5      	str	r5, [r0, #12]
 800b25a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b25c:	6819      	ldr	r1, [r3, #0]
 800b25e:	b151      	cbz	r1, 800b276 <_dtoa_r+0x5e>
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	604a      	str	r2, [r1, #4]
 800b264:	2301      	movs	r3, #1
 800b266:	4093      	lsls	r3, r2
 800b268:	608b      	str	r3, [r1, #8]
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 feee 	bl	800c04c <_Bfree>
 800b270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b272:	2200      	movs	r2, #0
 800b274:	601a      	str	r2, [r3, #0]
 800b276:	1e3b      	subs	r3, r7, #0
 800b278:	bfaa      	itet	ge
 800b27a:	2300      	movge	r3, #0
 800b27c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b280:	f8c8 3000 	strge.w	r3, [r8]
 800b284:	4b9a      	ldr	r3, [pc, #616]	; (800b4f0 <_dtoa_r+0x2d8>)
 800b286:	bfbc      	itt	lt
 800b288:	2201      	movlt	r2, #1
 800b28a:	f8c8 2000 	strlt.w	r2, [r8]
 800b28e:	ea33 030b 	bics.w	r3, r3, fp
 800b292:	d11b      	bne.n	800b2cc <_dtoa_r+0xb4>
 800b294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b296:	f242 730f 	movw	r3, #9999	; 0x270f
 800b29a:	6013      	str	r3, [r2, #0]
 800b29c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2a0:	4333      	orrs	r3, r6
 800b2a2:	f000 8592 	beq.w	800bdca <_dtoa_r+0xbb2>
 800b2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2a8:	b963      	cbnz	r3, 800b2c4 <_dtoa_r+0xac>
 800b2aa:	4b92      	ldr	r3, [pc, #584]	; (800b4f4 <_dtoa_r+0x2dc>)
 800b2ac:	e022      	b.n	800b2f4 <_dtoa_r+0xdc>
 800b2ae:	4b92      	ldr	r3, [pc, #584]	; (800b4f8 <_dtoa_r+0x2e0>)
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	9801      	ldr	r0, [sp, #4]
 800b2ba:	b013      	add	sp, #76	; 0x4c
 800b2bc:	ecbd 8b04 	vpop	{d8-d9}
 800b2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c4:	4b8b      	ldr	r3, [pc, #556]	; (800b4f4 <_dtoa_r+0x2dc>)
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	3303      	adds	r3, #3
 800b2ca:	e7f3      	b.n	800b2b4 <_dtoa_r+0x9c>
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	4659      	mov	r1, fp
 800b2d4:	f7f5 fc18 	bl	8000b08 <__aeabi_dcmpeq>
 800b2d8:	ec4b ab19 	vmov	d9, sl, fp
 800b2dc:	4680      	mov	r8, r0
 800b2de:	b158      	cbz	r0, 800b2f8 <_dtoa_r+0xe0>
 800b2e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	6013      	str	r3, [r2, #0]
 800b2e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 856b 	beq.w	800bdc4 <_dtoa_r+0xbac>
 800b2ee:	4883      	ldr	r0, [pc, #524]	; (800b4fc <_dtoa_r+0x2e4>)
 800b2f0:	6018      	str	r0, [r3, #0]
 800b2f2:	1e43      	subs	r3, r0, #1
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	e7df      	b.n	800b2b8 <_dtoa_r+0xa0>
 800b2f8:	ec4b ab10 	vmov	d0, sl, fp
 800b2fc:	aa10      	add	r2, sp, #64	; 0x40
 800b2fe:	a911      	add	r1, sp, #68	; 0x44
 800b300:	4620      	mov	r0, r4
 800b302:	f001 f98b 	bl	800c61c <__d2b>
 800b306:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b30a:	ee08 0a10 	vmov	s16, r0
 800b30e:	2d00      	cmp	r5, #0
 800b310:	f000 8084 	beq.w	800b41c <_dtoa_r+0x204>
 800b314:	ee19 3a90 	vmov	r3, s19
 800b318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b31c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b320:	4656      	mov	r6, sl
 800b322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b32a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b32e:	4b74      	ldr	r3, [pc, #464]	; (800b500 <_dtoa_r+0x2e8>)
 800b330:	2200      	movs	r2, #0
 800b332:	4630      	mov	r0, r6
 800b334:	4639      	mov	r1, r7
 800b336:	f7f4 ffc7 	bl	80002c8 <__aeabi_dsub>
 800b33a:	a365      	add	r3, pc, #404	; (adr r3, 800b4d0 <_dtoa_r+0x2b8>)
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	f7f5 f97a 	bl	8000638 <__aeabi_dmul>
 800b344:	a364      	add	r3, pc, #400	; (adr r3, 800b4d8 <_dtoa_r+0x2c0>)
 800b346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34a:	f7f4 ffbf 	bl	80002cc <__adddf3>
 800b34e:	4606      	mov	r6, r0
 800b350:	4628      	mov	r0, r5
 800b352:	460f      	mov	r7, r1
 800b354:	f7f5 f906 	bl	8000564 <__aeabi_i2d>
 800b358:	a361      	add	r3, pc, #388	; (adr r3, 800b4e0 <_dtoa_r+0x2c8>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f7f5 f96b 	bl	8000638 <__aeabi_dmul>
 800b362:	4602      	mov	r2, r0
 800b364:	460b      	mov	r3, r1
 800b366:	4630      	mov	r0, r6
 800b368:	4639      	mov	r1, r7
 800b36a:	f7f4 ffaf 	bl	80002cc <__adddf3>
 800b36e:	4606      	mov	r6, r0
 800b370:	460f      	mov	r7, r1
 800b372:	f7f5 fc11 	bl	8000b98 <__aeabi_d2iz>
 800b376:	2200      	movs	r2, #0
 800b378:	9000      	str	r0, [sp, #0]
 800b37a:	2300      	movs	r3, #0
 800b37c:	4630      	mov	r0, r6
 800b37e:	4639      	mov	r1, r7
 800b380:	f7f5 fbcc 	bl	8000b1c <__aeabi_dcmplt>
 800b384:	b150      	cbz	r0, 800b39c <_dtoa_r+0x184>
 800b386:	9800      	ldr	r0, [sp, #0]
 800b388:	f7f5 f8ec 	bl	8000564 <__aeabi_i2d>
 800b38c:	4632      	mov	r2, r6
 800b38e:	463b      	mov	r3, r7
 800b390:	f7f5 fbba 	bl	8000b08 <__aeabi_dcmpeq>
 800b394:	b910      	cbnz	r0, 800b39c <_dtoa_r+0x184>
 800b396:	9b00      	ldr	r3, [sp, #0]
 800b398:	3b01      	subs	r3, #1
 800b39a:	9300      	str	r3, [sp, #0]
 800b39c:	9b00      	ldr	r3, [sp, #0]
 800b39e:	2b16      	cmp	r3, #22
 800b3a0:	d85a      	bhi.n	800b458 <_dtoa_r+0x240>
 800b3a2:	9a00      	ldr	r2, [sp, #0]
 800b3a4:	4b57      	ldr	r3, [pc, #348]	; (800b504 <_dtoa_r+0x2ec>)
 800b3a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ae:	ec51 0b19 	vmov	r0, r1, d9
 800b3b2:	f7f5 fbb3 	bl	8000b1c <__aeabi_dcmplt>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d050      	beq.n	800b45c <_dtoa_r+0x244>
 800b3ba:	9b00      	ldr	r3, [sp, #0]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3c6:	1b5d      	subs	r5, r3, r5
 800b3c8:	1e6b      	subs	r3, r5, #1
 800b3ca:	9305      	str	r3, [sp, #20]
 800b3cc:	bf45      	ittet	mi
 800b3ce:	f1c5 0301 	rsbmi	r3, r5, #1
 800b3d2:	9304      	strmi	r3, [sp, #16]
 800b3d4:	2300      	movpl	r3, #0
 800b3d6:	2300      	movmi	r3, #0
 800b3d8:	bf4c      	ite	mi
 800b3da:	9305      	strmi	r3, [sp, #20]
 800b3dc:	9304      	strpl	r3, [sp, #16]
 800b3de:	9b00      	ldr	r3, [sp, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	db3d      	blt.n	800b460 <_dtoa_r+0x248>
 800b3e4:	9b05      	ldr	r3, [sp, #20]
 800b3e6:	9a00      	ldr	r2, [sp, #0]
 800b3e8:	920a      	str	r2, [sp, #40]	; 0x28
 800b3ea:	4413      	add	r3, r2
 800b3ec:	9305      	str	r3, [sp, #20]
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	9307      	str	r3, [sp, #28]
 800b3f2:	9b06      	ldr	r3, [sp, #24]
 800b3f4:	2b09      	cmp	r3, #9
 800b3f6:	f200 8089 	bhi.w	800b50c <_dtoa_r+0x2f4>
 800b3fa:	2b05      	cmp	r3, #5
 800b3fc:	bfc4      	itt	gt
 800b3fe:	3b04      	subgt	r3, #4
 800b400:	9306      	strgt	r3, [sp, #24]
 800b402:	9b06      	ldr	r3, [sp, #24]
 800b404:	f1a3 0302 	sub.w	r3, r3, #2
 800b408:	bfcc      	ite	gt
 800b40a:	2500      	movgt	r5, #0
 800b40c:	2501      	movle	r5, #1
 800b40e:	2b03      	cmp	r3, #3
 800b410:	f200 8087 	bhi.w	800b522 <_dtoa_r+0x30a>
 800b414:	e8df f003 	tbb	[pc, r3]
 800b418:	59383a2d 	.word	0x59383a2d
 800b41c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b420:	441d      	add	r5, r3
 800b422:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b426:	2b20      	cmp	r3, #32
 800b428:	bfc1      	itttt	gt
 800b42a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b42e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b432:	fa0b f303 	lslgt.w	r3, fp, r3
 800b436:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b43a:	bfda      	itte	le
 800b43c:	f1c3 0320 	rsble	r3, r3, #32
 800b440:	fa06 f003 	lslle.w	r0, r6, r3
 800b444:	4318      	orrgt	r0, r3
 800b446:	f7f5 f87d 	bl	8000544 <__aeabi_ui2d>
 800b44a:	2301      	movs	r3, #1
 800b44c:	4606      	mov	r6, r0
 800b44e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b452:	3d01      	subs	r5, #1
 800b454:	930e      	str	r3, [sp, #56]	; 0x38
 800b456:	e76a      	b.n	800b32e <_dtoa_r+0x116>
 800b458:	2301      	movs	r3, #1
 800b45a:	e7b2      	b.n	800b3c2 <_dtoa_r+0x1aa>
 800b45c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b45e:	e7b1      	b.n	800b3c4 <_dtoa_r+0x1ac>
 800b460:	9b04      	ldr	r3, [sp, #16]
 800b462:	9a00      	ldr	r2, [sp, #0]
 800b464:	1a9b      	subs	r3, r3, r2
 800b466:	9304      	str	r3, [sp, #16]
 800b468:	4253      	negs	r3, r2
 800b46a:	9307      	str	r3, [sp, #28]
 800b46c:	2300      	movs	r3, #0
 800b46e:	930a      	str	r3, [sp, #40]	; 0x28
 800b470:	e7bf      	b.n	800b3f2 <_dtoa_r+0x1da>
 800b472:	2300      	movs	r3, #0
 800b474:	9308      	str	r3, [sp, #32]
 800b476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dc55      	bgt.n	800b528 <_dtoa_r+0x310>
 800b47c:	2301      	movs	r3, #1
 800b47e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b482:	461a      	mov	r2, r3
 800b484:	9209      	str	r2, [sp, #36]	; 0x24
 800b486:	e00c      	b.n	800b4a2 <_dtoa_r+0x28a>
 800b488:	2301      	movs	r3, #1
 800b48a:	e7f3      	b.n	800b474 <_dtoa_r+0x25c>
 800b48c:	2300      	movs	r3, #0
 800b48e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b490:	9308      	str	r3, [sp, #32]
 800b492:	9b00      	ldr	r3, [sp, #0]
 800b494:	4413      	add	r3, r2
 800b496:	9302      	str	r3, [sp, #8]
 800b498:	3301      	adds	r3, #1
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	9303      	str	r3, [sp, #12]
 800b49e:	bfb8      	it	lt
 800b4a0:	2301      	movlt	r3, #1
 800b4a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	6042      	str	r2, [r0, #4]
 800b4a8:	2204      	movs	r2, #4
 800b4aa:	f102 0614 	add.w	r6, r2, #20
 800b4ae:	429e      	cmp	r6, r3
 800b4b0:	6841      	ldr	r1, [r0, #4]
 800b4b2:	d93d      	bls.n	800b530 <_dtoa_r+0x318>
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 fd89 	bl	800bfcc <_Balloc>
 800b4ba:	9001      	str	r0, [sp, #4]
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d13b      	bne.n	800b538 <_dtoa_r+0x320>
 800b4c0:	4b11      	ldr	r3, [pc, #68]	; (800b508 <_dtoa_r+0x2f0>)
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b4c8:	e6c0      	b.n	800b24c <_dtoa_r+0x34>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e7df      	b.n	800b48e <_dtoa_r+0x276>
 800b4ce:	bf00      	nop
 800b4d0:	636f4361 	.word	0x636f4361
 800b4d4:	3fd287a7 	.word	0x3fd287a7
 800b4d8:	8b60c8b3 	.word	0x8b60c8b3
 800b4dc:	3fc68a28 	.word	0x3fc68a28
 800b4e0:	509f79fb 	.word	0x509f79fb
 800b4e4:	3fd34413 	.word	0x3fd34413
 800b4e8:	0800cf25 	.word	0x0800cf25
 800b4ec:	0800cf3c 	.word	0x0800cf3c
 800b4f0:	7ff00000 	.word	0x7ff00000
 800b4f4:	0800cf21 	.word	0x0800cf21
 800b4f8:	0800cf18 	.word	0x0800cf18
 800b4fc:	0800cef5 	.word	0x0800cef5
 800b500:	3ff80000 	.word	0x3ff80000
 800b504:	0800d030 	.word	0x0800d030
 800b508:	0800cf97 	.word	0x0800cf97
 800b50c:	2501      	movs	r5, #1
 800b50e:	2300      	movs	r3, #0
 800b510:	9306      	str	r3, [sp, #24]
 800b512:	9508      	str	r5, [sp, #32]
 800b514:	f04f 33ff 	mov.w	r3, #4294967295
 800b518:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b51c:	2200      	movs	r2, #0
 800b51e:	2312      	movs	r3, #18
 800b520:	e7b0      	b.n	800b484 <_dtoa_r+0x26c>
 800b522:	2301      	movs	r3, #1
 800b524:	9308      	str	r3, [sp, #32]
 800b526:	e7f5      	b.n	800b514 <_dtoa_r+0x2fc>
 800b528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b52e:	e7b8      	b.n	800b4a2 <_dtoa_r+0x28a>
 800b530:	3101      	adds	r1, #1
 800b532:	6041      	str	r1, [r0, #4]
 800b534:	0052      	lsls	r2, r2, #1
 800b536:	e7b8      	b.n	800b4aa <_dtoa_r+0x292>
 800b538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b53a:	9a01      	ldr	r2, [sp, #4]
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	9b03      	ldr	r3, [sp, #12]
 800b540:	2b0e      	cmp	r3, #14
 800b542:	f200 809d 	bhi.w	800b680 <_dtoa_r+0x468>
 800b546:	2d00      	cmp	r5, #0
 800b548:	f000 809a 	beq.w	800b680 <_dtoa_r+0x468>
 800b54c:	9b00      	ldr	r3, [sp, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	dd32      	ble.n	800b5b8 <_dtoa_r+0x3a0>
 800b552:	4ab7      	ldr	r2, [pc, #732]	; (800b830 <_dtoa_r+0x618>)
 800b554:	f003 030f 	and.w	r3, r3, #15
 800b558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b55c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b560:	9b00      	ldr	r3, [sp, #0]
 800b562:	05d8      	lsls	r0, r3, #23
 800b564:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b568:	d516      	bpl.n	800b598 <_dtoa_r+0x380>
 800b56a:	4bb2      	ldr	r3, [pc, #712]	; (800b834 <_dtoa_r+0x61c>)
 800b56c:	ec51 0b19 	vmov	r0, r1, d9
 800b570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b574:	f7f5 f98a 	bl	800088c <__aeabi_ddiv>
 800b578:	f007 070f 	and.w	r7, r7, #15
 800b57c:	4682      	mov	sl, r0
 800b57e:	468b      	mov	fp, r1
 800b580:	2503      	movs	r5, #3
 800b582:	4eac      	ldr	r6, [pc, #688]	; (800b834 <_dtoa_r+0x61c>)
 800b584:	b957      	cbnz	r7, 800b59c <_dtoa_r+0x384>
 800b586:	4642      	mov	r2, r8
 800b588:	464b      	mov	r3, r9
 800b58a:	4650      	mov	r0, sl
 800b58c:	4659      	mov	r1, fp
 800b58e:	f7f5 f97d 	bl	800088c <__aeabi_ddiv>
 800b592:	4682      	mov	sl, r0
 800b594:	468b      	mov	fp, r1
 800b596:	e028      	b.n	800b5ea <_dtoa_r+0x3d2>
 800b598:	2502      	movs	r5, #2
 800b59a:	e7f2      	b.n	800b582 <_dtoa_r+0x36a>
 800b59c:	07f9      	lsls	r1, r7, #31
 800b59e:	d508      	bpl.n	800b5b2 <_dtoa_r+0x39a>
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5a8:	f7f5 f846 	bl	8000638 <__aeabi_dmul>
 800b5ac:	3501      	adds	r5, #1
 800b5ae:	4680      	mov	r8, r0
 800b5b0:	4689      	mov	r9, r1
 800b5b2:	107f      	asrs	r7, r7, #1
 800b5b4:	3608      	adds	r6, #8
 800b5b6:	e7e5      	b.n	800b584 <_dtoa_r+0x36c>
 800b5b8:	f000 809b 	beq.w	800b6f2 <_dtoa_r+0x4da>
 800b5bc:	9b00      	ldr	r3, [sp, #0]
 800b5be:	4f9d      	ldr	r7, [pc, #628]	; (800b834 <_dtoa_r+0x61c>)
 800b5c0:	425e      	negs	r6, r3
 800b5c2:	4b9b      	ldr	r3, [pc, #620]	; (800b830 <_dtoa_r+0x618>)
 800b5c4:	f006 020f 	and.w	r2, r6, #15
 800b5c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	ec51 0b19 	vmov	r0, r1, d9
 800b5d4:	f7f5 f830 	bl	8000638 <__aeabi_dmul>
 800b5d8:	1136      	asrs	r6, r6, #4
 800b5da:	4682      	mov	sl, r0
 800b5dc:	468b      	mov	fp, r1
 800b5de:	2300      	movs	r3, #0
 800b5e0:	2502      	movs	r5, #2
 800b5e2:	2e00      	cmp	r6, #0
 800b5e4:	d17a      	bne.n	800b6dc <_dtoa_r+0x4c4>
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1d3      	bne.n	800b592 <_dtoa_r+0x37a>
 800b5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 8082 	beq.w	800b6f6 <_dtoa_r+0x4de>
 800b5f2:	4b91      	ldr	r3, [pc, #580]	; (800b838 <_dtoa_r+0x620>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	4650      	mov	r0, sl
 800b5f8:	4659      	mov	r1, fp
 800b5fa:	f7f5 fa8f 	bl	8000b1c <__aeabi_dcmplt>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d079      	beq.n	800b6f6 <_dtoa_r+0x4de>
 800b602:	9b03      	ldr	r3, [sp, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d076      	beq.n	800b6f6 <_dtoa_r+0x4de>
 800b608:	9b02      	ldr	r3, [sp, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	dd36      	ble.n	800b67c <_dtoa_r+0x464>
 800b60e:	9b00      	ldr	r3, [sp, #0]
 800b610:	4650      	mov	r0, sl
 800b612:	4659      	mov	r1, fp
 800b614:	1e5f      	subs	r7, r3, #1
 800b616:	2200      	movs	r2, #0
 800b618:	4b88      	ldr	r3, [pc, #544]	; (800b83c <_dtoa_r+0x624>)
 800b61a:	f7f5 f80d 	bl	8000638 <__aeabi_dmul>
 800b61e:	9e02      	ldr	r6, [sp, #8]
 800b620:	4682      	mov	sl, r0
 800b622:	468b      	mov	fp, r1
 800b624:	3501      	adds	r5, #1
 800b626:	4628      	mov	r0, r5
 800b628:	f7f4 ff9c 	bl	8000564 <__aeabi_i2d>
 800b62c:	4652      	mov	r2, sl
 800b62e:	465b      	mov	r3, fp
 800b630:	f7f5 f802 	bl	8000638 <__aeabi_dmul>
 800b634:	4b82      	ldr	r3, [pc, #520]	; (800b840 <_dtoa_r+0x628>)
 800b636:	2200      	movs	r2, #0
 800b638:	f7f4 fe48 	bl	80002cc <__adddf3>
 800b63c:	46d0      	mov	r8, sl
 800b63e:	46d9      	mov	r9, fp
 800b640:	4682      	mov	sl, r0
 800b642:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b646:	2e00      	cmp	r6, #0
 800b648:	d158      	bne.n	800b6fc <_dtoa_r+0x4e4>
 800b64a:	4b7e      	ldr	r3, [pc, #504]	; (800b844 <_dtoa_r+0x62c>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	4640      	mov	r0, r8
 800b650:	4649      	mov	r1, r9
 800b652:	f7f4 fe39 	bl	80002c8 <__aeabi_dsub>
 800b656:	4652      	mov	r2, sl
 800b658:	465b      	mov	r3, fp
 800b65a:	4680      	mov	r8, r0
 800b65c:	4689      	mov	r9, r1
 800b65e:	f7f5 fa7b 	bl	8000b58 <__aeabi_dcmpgt>
 800b662:	2800      	cmp	r0, #0
 800b664:	f040 8295 	bne.w	800bb92 <_dtoa_r+0x97a>
 800b668:	4652      	mov	r2, sl
 800b66a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b66e:	4640      	mov	r0, r8
 800b670:	4649      	mov	r1, r9
 800b672:	f7f5 fa53 	bl	8000b1c <__aeabi_dcmplt>
 800b676:	2800      	cmp	r0, #0
 800b678:	f040 8289 	bne.w	800bb8e <_dtoa_r+0x976>
 800b67c:	ec5b ab19 	vmov	sl, fp, d9
 800b680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b682:	2b00      	cmp	r3, #0
 800b684:	f2c0 8148 	blt.w	800b918 <_dtoa_r+0x700>
 800b688:	9a00      	ldr	r2, [sp, #0]
 800b68a:	2a0e      	cmp	r2, #14
 800b68c:	f300 8144 	bgt.w	800b918 <_dtoa_r+0x700>
 800b690:	4b67      	ldr	r3, [pc, #412]	; (800b830 <_dtoa_r+0x618>)
 800b692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b696:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f280 80d5 	bge.w	800b84c <_dtoa_r+0x634>
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f300 80d1 	bgt.w	800b84c <_dtoa_r+0x634>
 800b6aa:	f040 826f 	bne.w	800bb8c <_dtoa_r+0x974>
 800b6ae:	4b65      	ldr	r3, [pc, #404]	; (800b844 <_dtoa_r+0x62c>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	4640      	mov	r0, r8
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	f7f4 ffbf 	bl	8000638 <__aeabi_dmul>
 800b6ba:	4652      	mov	r2, sl
 800b6bc:	465b      	mov	r3, fp
 800b6be:	f7f5 fa41 	bl	8000b44 <__aeabi_dcmpge>
 800b6c2:	9e03      	ldr	r6, [sp, #12]
 800b6c4:	4637      	mov	r7, r6
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	f040 8245 	bne.w	800bb56 <_dtoa_r+0x93e>
 800b6cc:	9d01      	ldr	r5, [sp, #4]
 800b6ce:	2331      	movs	r3, #49	; 0x31
 800b6d0:	f805 3b01 	strb.w	r3, [r5], #1
 800b6d4:	9b00      	ldr	r3, [sp, #0]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	e240      	b.n	800bb5e <_dtoa_r+0x946>
 800b6dc:	07f2      	lsls	r2, r6, #31
 800b6de:	d505      	bpl.n	800b6ec <_dtoa_r+0x4d4>
 800b6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6e4:	f7f4 ffa8 	bl	8000638 <__aeabi_dmul>
 800b6e8:	3501      	adds	r5, #1
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	1076      	asrs	r6, r6, #1
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	e777      	b.n	800b5e2 <_dtoa_r+0x3ca>
 800b6f2:	2502      	movs	r5, #2
 800b6f4:	e779      	b.n	800b5ea <_dtoa_r+0x3d2>
 800b6f6:	9f00      	ldr	r7, [sp, #0]
 800b6f8:	9e03      	ldr	r6, [sp, #12]
 800b6fa:	e794      	b.n	800b626 <_dtoa_r+0x40e>
 800b6fc:	9901      	ldr	r1, [sp, #4]
 800b6fe:	4b4c      	ldr	r3, [pc, #304]	; (800b830 <_dtoa_r+0x618>)
 800b700:	4431      	add	r1, r6
 800b702:	910d      	str	r1, [sp, #52]	; 0x34
 800b704:	9908      	ldr	r1, [sp, #32]
 800b706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b70a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b70e:	2900      	cmp	r1, #0
 800b710:	d043      	beq.n	800b79a <_dtoa_r+0x582>
 800b712:	494d      	ldr	r1, [pc, #308]	; (800b848 <_dtoa_r+0x630>)
 800b714:	2000      	movs	r0, #0
 800b716:	f7f5 f8b9 	bl	800088c <__aeabi_ddiv>
 800b71a:	4652      	mov	r2, sl
 800b71c:	465b      	mov	r3, fp
 800b71e:	f7f4 fdd3 	bl	80002c8 <__aeabi_dsub>
 800b722:	9d01      	ldr	r5, [sp, #4]
 800b724:	4682      	mov	sl, r0
 800b726:	468b      	mov	fp, r1
 800b728:	4649      	mov	r1, r9
 800b72a:	4640      	mov	r0, r8
 800b72c:	f7f5 fa34 	bl	8000b98 <__aeabi_d2iz>
 800b730:	4606      	mov	r6, r0
 800b732:	f7f4 ff17 	bl	8000564 <__aeabi_i2d>
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	4640      	mov	r0, r8
 800b73c:	4649      	mov	r1, r9
 800b73e:	f7f4 fdc3 	bl	80002c8 <__aeabi_dsub>
 800b742:	3630      	adds	r6, #48	; 0x30
 800b744:	f805 6b01 	strb.w	r6, [r5], #1
 800b748:	4652      	mov	r2, sl
 800b74a:	465b      	mov	r3, fp
 800b74c:	4680      	mov	r8, r0
 800b74e:	4689      	mov	r9, r1
 800b750:	f7f5 f9e4 	bl	8000b1c <__aeabi_dcmplt>
 800b754:	2800      	cmp	r0, #0
 800b756:	d163      	bne.n	800b820 <_dtoa_r+0x608>
 800b758:	4642      	mov	r2, r8
 800b75a:	464b      	mov	r3, r9
 800b75c:	4936      	ldr	r1, [pc, #216]	; (800b838 <_dtoa_r+0x620>)
 800b75e:	2000      	movs	r0, #0
 800b760:	f7f4 fdb2 	bl	80002c8 <__aeabi_dsub>
 800b764:	4652      	mov	r2, sl
 800b766:	465b      	mov	r3, fp
 800b768:	f7f5 f9d8 	bl	8000b1c <__aeabi_dcmplt>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	f040 80b5 	bne.w	800b8dc <_dtoa_r+0x6c4>
 800b772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b774:	429d      	cmp	r5, r3
 800b776:	d081      	beq.n	800b67c <_dtoa_r+0x464>
 800b778:	4b30      	ldr	r3, [pc, #192]	; (800b83c <_dtoa_r+0x624>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	4650      	mov	r0, sl
 800b77e:	4659      	mov	r1, fp
 800b780:	f7f4 ff5a 	bl	8000638 <__aeabi_dmul>
 800b784:	4b2d      	ldr	r3, [pc, #180]	; (800b83c <_dtoa_r+0x624>)
 800b786:	4682      	mov	sl, r0
 800b788:	468b      	mov	fp, r1
 800b78a:	4640      	mov	r0, r8
 800b78c:	4649      	mov	r1, r9
 800b78e:	2200      	movs	r2, #0
 800b790:	f7f4 ff52 	bl	8000638 <__aeabi_dmul>
 800b794:	4680      	mov	r8, r0
 800b796:	4689      	mov	r9, r1
 800b798:	e7c6      	b.n	800b728 <_dtoa_r+0x510>
 800b79a:	4650      	mov	r0, sl
 800b79c:	4659      	mov	r1, fp
 800b79e:	f7f4 ff4b 	bl	8000638 <__aeabi_dmul>
 800b7a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7a4:	9d01      	ldr	r5, [sp, #4]
 800b7a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7a8:	4682      	mov	sl, r0
 800b7aa:	468b      	mov	fp, r1
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	f7f5 f9f2 	bl	8000b98 <__aeabi_d2iz>
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	f7f4 fed5 	bl	8000564 <__aeabi_i2d>
 800b7ba:	3630      	adds	r6, #48	; 0x30
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4640      	mov	r0, r8
 800b7c2:	4649      	mov	r1, r9
 800b7c4:	f7f4 fd80 	bl	80002c8 <__aeabi_dsub>
 800b7c8:	f805 6b01 	strb.w	r6, [r5], #1
 800b7cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ce:	429d      	cmp	r5, r3
 800b7d0:	4680      	mov	r8, r0
 800b7d2:	4689      	mov	r9, r1
 800b7d4:	f04f 0200 	mov.w	r2, #0
 800b7d8:	d124      	bne.n	800b824 <_dtoa_r+0x60c>
 800b7da:	4b1b      	ldr	r3, [pc, #108]	; (800b848 <_dtoa_r+0x630>)
 800b7dc:	4650      	mov	r0, sl
 800b7de:	4659      	mov	r1, fp
 800b7e0:	f7f4 fd74 	bl	80002cc <__adddf3>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	f7f5 f9b4 	bl	8000b58 <__aeabi_dcmpgt>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d173      	bne.n	800b8dc <_dtoa_r+0x6c4>
 800b7f4:	4652      	mov	r2, sl
 800b7f6:	465b      	mov	r3, fp
 800b7f8:	4913      	ldr	r1, [pc, #76]	; (800b848 <_dtoa_r+0x630>)
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	f7f4 fd64 	bl	80002c8 <__aeabi_dsub>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4640      	mov	r0, r8
 800b806:	4649      	mov	r1, r9
 800b808:	f7f5 f988 	bl	8000b1c <__aeabi_dcmplt>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	f43f af35 	beq.w	800b67c <_dtoa_r+0x464>
 800b812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b814:	1e6b      	subs	r3, r5, #1
 800b816:	930f      	str	r3, [sp, #60]	; 0x3c
 800b818:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b81c:	2b30      	cmp	r3, #48	; 0x30
 800b81e:	d0f8      	beq.n	800b812 <_dtoa_r+0x5fa>
 800b820:	9700      	str	r7, [sp, #0]
 800b822:	e049      	b.n	800b8b8 <_dtoa_r+0x6a0>
 800b824:	4b05      	ldr	r3, [pc, #20]	; (800b83c <_dtoa_r+0x624>)
 800b826:	f7f4 ff07 	bl	8000638 <__aeabi_dmul>
 800b82a:	4680      	mov	r8, r0
 800b82c:	4689      	mov	r9, r1
 800b82e:	e7bd      	b.n	800b7ac <_dtoa_r+0x594>
 800b830:	0800d030 	.word	0x0800d030
 800b834:	0800d008 	.word	0x0800d008
 800b838:	3ff00000 	.word	0x3ff00000
 800b83c:	40240000 	.word	0x40240000
 800b840:	401c0000 	.word	0x401c0000
 800b844:	40140000 	.word	0x40140000
 800b848:	3fe00000 	.word	0x3fe00000
 800b84c:	9d01      	ldr	r5, [sp, #4]
 800b84e:	4656      	mov	r6, sl
 800b850:	465f      	mov	r7, fp
 800b852:	4642      	mov	r2, r8
 800b854:	464b      	mov	r3, r9
 800b856:	4630      	mov	r0, r6
 800b858:	4639      	mov	r1, r7
 800b85a:	f7f5 f817 	bl	800088c <__aeabi_ddiv>
 800b85e:	f7f5 f99b 	bl	8000b98 <__aeabi_d2iz>
 800b862:	4682      	mov	sl, r0
 800b864:	f7f4 fe7e 	bl	8000564 <__aeabi_i2d>
 800b868:	4642      	mov	r2, r8
 800b86a:	464b      	mov	r3, r9
 800b86c:	f7f4 fee4 	bl	8000638 <__aeabi_dmul>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4630      	mov	r0, r6
 800b876:	4639      	mov	r1, r7
 800b878:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b87c:	f7f4 fd24 	bl	80002c8 <__aeabi_dsub>
 800b880:	f805 6b01 	strb.w	r6, [r5], #1
 800b884:	9e01      	ldr	r6, [sp, #4]
 800b886:	9f03      	ldr	r7, [sp, #12]
 800b888:	1bae      	subs	r6, r5, r6
 800b88a:	42b7      	cmp	r7, r6
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	d135      	bne.n	800b8fe <_dtoa_r+0x6e6>
 800b892:	f7f4 fd1b 	bl	80002cc <__adddf3>
 800b896:	4642      	mov	r2, r8
 800b898:	464b      	mov	r3, r9
 800b89a:	4606      	mov	r6, r0
 800b89c:	460f      	mov	r7, r1
 800b89e:	f7f5 f95b 	bl	8000b58 <__aeabi_dcmpgt>
 800b8a2:	b9d0      	cbnz	r0, 800b8da <_dtoa_r+0x6c2>
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	f7f5 f92c 	bl	8000b08 <__aeabi_dcmpeq>
 800b8b0:	b110      	cbz	r0, 800b8b8 <_dtoa_r+0x6a0>
 800b8b2:	f01a 0f01 	tst.w	sl, #1
 800b8b6:	d110      	bne.n	800b8da <_dtoa_r+0x6c2>
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	ee18 1a10 	vmov	r1, s16
 800b8be:	f000 fbc5 	bl	800c04c <_Bfree>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	9800      	ldr	r0, [sp, #0]
 800b8c6:	702b      	strb	r3, [r5, #0]
 800b8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8ca:	3001      	adds	r0, #1
 800b8cc:	6018      	str	r0, [r3, #0]
 800b8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f43f acf1 	beq.w	800b2b8 <_dtoa_r+0xa0>
 800b8d6:	601d      	str	r5, [r3, #0]
 800b8d8:	e4ee      	b.n	800b2b8 <_dtoa_r+0xa0>
 800b8da:	9f00      	ldr	r7, [sp, #0]
 800b8dc:	462b      	mov	r3, r5
 800b8de:	461d      	mov	r5, r3
 800b8e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8e4:	2a39      	cmp	r2, #57	; 0x39
 800b8e6:	d106      	bne.n	800b8f6 <_dtoa_r+0x6de>
 800b8e8:	9a01      	ldr	r2, [sp, #4]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d1f7      	bne.n	800b8de <_dtoa_r+0x6c6>
 800b8ee:	9901      	ldr	r1, [sp, #4]
 800b8f0:	2230      	movs	r2, #48	; 0x30
 800b8f2:	3701      	adds	r7, #1
 800b8f4:	700a      	strb	r2, [r1, #0]
 800b8f6:	781a      	ldrb	r2, [r3, #0]
 800b8f8:	3201      	adds	r2, #1
 800b8fa:	701a      	strb	r2, [r3, #0]
 800b8fc:	e790      	b.n	800b820 <_dtoa_r+0x608>
 800b8fe:	4ba6      	ldr	r3, [pc, #664]	; (800bb98 <_dtoa_r+0x980>)
 800b900:	2200      	movs	r2, #0
 800b902:	f7f4 fe99 	bl	8000638 <__aeabi_dmul>
 800b906:	2200      	movs	r2, #0
 800b908:	2300      	movs	r3, #0
 800b90a:	4606      	mov	r6, r0
 800b90c:	460f      	mov	r7, r1
 800b90e:	f7f5 f8fb 	bl	8000b08 <__aeabi_dcmpeq>
 800b912:	2800      	cmp	r0, #0
 800b914:	d09d      	beq.n	800b852 <_dtoa_r+0x63a>
 800b916:	e7cf      	b.n	800b8b8 <_dtoa_r+0x6a0>
 800b918:	9a08      	ldr	r2, [sp, #32]
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	f000 80d7 	beq.w	800bace <_dtoa_r+0x8b6>
 800b920:	9a06      	ldr	r2, [sp, #24]
 800b922:	2a01      	cmp	r2, #1
 800b924:	f300 80ba 	bgt.w	800ba9c <_dtoa_r+0x884>
 800b928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b92a:	2a00      	cmp	r2, #0
 800b92c:	f000 80b2 	beq.w	800ba94 <_dtoa_r+0x87c>
 800b930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b934:	9e07      	ldr	r6, [sp, #28]
 800b936:	9d04      	ldr	r5, [sp, #16]
 800b938:	9a04      	ldr	r2, [sp, #16]
 800b93a:	441a      	add	r2, r3
 800b93c:	9204      	str	r2, [sp, #16]
 800b93e:	9a05      	ldr	r2, [sp, #20]
 800b940:	2101      	movs	r1, #1
 800b942:	441a      	add	r2, r3
 800b944:	4620      	mov	r0, r4
 800b946:	9205      	str	r2, [sp, #20]
 800b948:	f000 fc38 	bl	800c1bc <__i2b>
 800b94c:	4607      	mov	r7, r0
 800b94e:	2d00      	cmp	r5, #0
 800b950:	dd0c      	ble.n	800b96c <_dtoa_r+0x754>
 800b952:	9b05      	ldr	r3, [sp, #20]
 800b954:	2b00      	cmp	r3, #0
 800b956:	dd09      	ble.n	800b96c <_dtoa_r+0x754>
 800b958:	42ab      	cmp	r3, r5
 800b95a:	9a04      	ldr	r2, [sp, #16]
 800b95c:	bfa8      	it	ge
 800b95e:	462b      	movge	r3, r5
 800b960:	1ad2      	subs	r2, r2, r3
 800b962:	9204      	str	r2, [sp, #16]
 800b964:	9a05      	ldr	r2, [sp, #20]
 800b966:	1aed      	subs	r5, r5, r3
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	9305      	str	r3, [sp, #20]
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	b31b      	cbz	r3, 800b9b8 <_dtoa_r+0x7a0>
 800b970:	9b08      	ldr	r3, [sp, #32]
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 80af 	beq.w	800bad6 <_dtoa_r+0x8be>
 800b978:	2e00      	cmp	r6, #0
 800b97a:	dd13      	ble.n	800b9a4 <_dtoa_r+0x78c>
 800b97c:	4639      	mov	r1, r7
 800b97e:	4632      	mov	r2, r6
 800b980:	4620      	mov	r0, r4
 800b982:	f000 fcdb 	bl	800c33c <__pow5mult>
 800b986:	ee18 2a10 	vmov	r2, s16
 800b98a:	4601      	mov	r1, r0
 800b98c:	4607      	mov	r7, r0
 800b98e:	4620      	mov	r0, r4
 800b990:	f000 fc2a 	bl	800c1e8 <__multiply>
 800b994:	ee18 1a10 	vmov	r1, s16
 800b998:	4680      	mov	r8, r0
 800b99a:	4620      	mov	r0, r4
 800b99c:	f000 fb56 	bl	800c04c <_Bfree>
 800b9a0:	ee08 8a10 	vmov	s16, r8
 800b9a4:	9b07      	ldr	r3, [sp, #28]
 800b9a6:	1b9a      	subs	r2, r3, r6
 800b9a8:	d006      	beq.n	800b9b8 <_dtoa_r+0x7a0>
 800b9aa:	ee18 1a10 	vmov	r1, s16
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f000 fcc4 	bl	800c33c <__pow5mult>
 800b9b4:	ee08 0a10 	vmov	s16, r0
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 fbfe 	bl	800c1bc <__i2b>
 800b9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	4606      	mov	r6, r0
 800b9c6:	f340 8088 	ble.w	800bada <_dtoa_r+0x8c2>
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4601      	mov	r1, r0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 fcb4 	bl	800c33c <__pow5mult>
 800b9d4:	9b06      	ldr	r3, [sp, #24]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	4606      	mov	r6, r0
 800b9da:	f340 8081 	ble.w	800bae0 <_dtoa_r+0x8c8>
 800b9de:	f04f 0800 	mov.w	r8, #0
 800b9e2:	6933      	ldr	r3, [r6, #16]
 800b9e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b9e8:	6918      	ldr	r0, [r3, #16]
 800b9ea:	f000 fb97 	bl	800c11c <__hi0bits>
 800b9ee:	f1c0 0020 	rsb	r0, r0, #32
 800b9f2:	9b05      	ldr	r3, [sp, #20]
 800b9f4:	4418      	add	r0, r3
 800b9f6:	f010 001f 	ands.w	r0, r0, #31
 800b9fa:	f000 8092 	beq.w	800bb22 <_dtoa_r+0x90a>
 800b9fe:	f1c0 0320 	rsb	r3, r0, #32
 800ba02:	2b04      	cmp	r3, #4
 800ba04:	f340 808a 	ble.w	800bb1c <_dtoa_r+0x904>
 800ba08:	f1c0 001c 	rsb	r0, r0, #28
 800ba0c:	9b04      	ldr	r3, [sp, #16]
 800ba0e:	4403      	add	r3, r0
 800ba10:	9304      	str	r3, [sp, #16]
 800ba12:	9b05      	ldr	r3, [sp, #20]
 800ba14:	4403      	add	r3, r0
 800ba16:	4405      	add	r5, r0
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	9b04      	ldr	r3, [sp, #16]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dd07      	ble.n	800ba30 <_dtoa_r+0x818>
 800ba20:	ee18 1a10 	vmov	r1, s16
 800ba24:	461a      	mov	r2, r3
 800ba26:	4620      	mov	r0, r4
 800ba28:	f000 fce2 	bl	800c3f0 <__lshift>
 800ba2c:	ee08 0a10 	vmov	s16, r0
 800ba30:	9b05      	ldr	r3, [sp, #20]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	dd05      	ble.n	800ba42 <_dtoa_r+0x82a>
 800ba36:	4631      	mov	r1, r6
 800ba38:	461a      	mov	r2, r3
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f000 fcd8 	bl	800c3f0 <__lshift>
 800ba40:	4606      	mov	r6, r0
 800ba42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d06e      	beq.n	800bb26 <_dtoa_r+0x90e>
 800ba48:	ee18 0a10 	vmov	r0, s16
 800ba4c:	4631      	mov	r1, r6
 800ba4e:	f000 fd3f 	bl	800c4d0 <__mcmp>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	da67      	bge.n	800bb26 <_dtoa_r+0x90e>
 800ba56:	9b00      	ldr	r3, [sp, #0]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	ee18 1a10 	vmov	r1, s16
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	220a      	movs	r2, #10
 800ba62:	2300      	movs	r3, #0
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 fb13 	bl	800c090 <__multadd>
 800ba6a:	9b08      	ldr	r3, [sp, #32]
 800ba6c:	ee08 0a10 	vmov	s16, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 81b1 	beq.w	800bdd8 <_dtoa_r+0xbc0>
 800ba76:	2300      	movs	r3, #0
 800ba78:	4639      	mov	r1, r7
 800ba7a:	220a      	movs	r2, #10
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 fb07 	bl	800c090 <__multadd>
 800ba82:	9b02      	ldr	r3, [sp, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	4607      	mov	r7, r0
 800ba88:	f300 808e 	bgt.w	800bba8 <_dtoa_r+0x990>
 800ba8c:	9b06      	ldr	r3, [sp, #24]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	dc51      	bgt.n	800bb36 <_dtoa_r+0x91e>
 800ba92:	e089      	b.n	800bba8 <_dtoa_r+0x990>
 800ba94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba9a:	e74b      	b.n	800b934 <_dtoa_r+0x71c>
 800ba9c:	9b03      	ldr	r3, [sp, #12]
 800ba9e:	1e5e      	subs	r6, r3, #1
 800baa0:	9b07      	ldr	r3, [sp, #28]
 800baa2:	42b3      	cmp	r3, r6
 800baa4:	bfbf      	itttt	lt
 800baa6:	9b07      	ldrlt	r3, [sp, #28]
 800baa8:	9607      	strlt	r6, [sp, #28]
 800baaa:	1af2      	sublt	r2, r6, r3
 800baac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800baae:	bfb6      	itet	lt
 800bab0:	189b      	addlt	r3, r3, r2
 800bab2:	1b9e      	subge	r6, r3, r6
 800bab4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	bfb8      	it	lt
 800baba:	2600      	movlt	r6, #0
 800babc:	2b00      	cmp	r3, #0
 800babe:	bfb7      	itett	lt
 800bac0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bac4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bac8:	1a9d      	sublt	r5, r3, r2
 800baca:	2300      	movlt	r3, #0
 800bacc:	e734      	b.n	800b938 <_dtoa_r+0x720>
 800bace:	9e07      	ldr	r6, [sp, #28]
 800bad0:	9d04      	ldr	r5, [sp, #16]
 800bad2:	9f08      	ldr	r7, [sp, #32]
 800bad4:	e73b      	b.n	800b94e <_dtoa_r+0x736>
 800bad6:	9a07      	ldr	r2, [sp, #28]
 800bad8:	e767      	b.n	800b9aa <_dtoa_r+0x792>
 800bada:	9b06      	ldr	r3, [sp, #24]
 800badc:	2b01      	cmp	r3, #1
 800bade:	dc18      	bgt.n	800bb12 <_dtoa_r+0x8fa>
 800bae0:	f1ba 0f00 	cmp.w	sl, #0
 800bae4:	d115      	bne.n	800bb12 <_dtoa_r+0x8fa>
 800bae6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800baea:	b993      	cbnz	r3, 800bb12 <_dtoa_r+0x8fa>
 800baec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800baf0:	0d1b      	lsrs	r3, r3, #20
 800baf2:	051b      	lsls	r3, r3, #20
 800baf4:	b183      	cbz	r3, 800bb18 <_dtoa_r+0x900>
 800baf6:	9b04      	ldr	r3, [sp, #16]
 800baf8:	3301      	adds	r3, #1
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	9b05      	ldr	r3, [sp, #20]
 800bafe:	3301      	adds	r3, #1
 800bb00:	9305      	str	r3, [sp, #20]
 800bb02:	f04f 0801 	mov.w	r8, #1
 800bb06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f47f af6a 	bne.w	800b9e2 <_dtoa_r+0x7ca>
 800bb0e:	2001      	movs	r0, #1
 800bb10:	e76f      	b.n	800b9f2 <_dtoa_r+0x7da>
 800bb12:	f04f 0800 	mov.w	r8, #0
 800bb16:	e7f6      	b.n	800bb06 <_dtoa_r+0x8ee>
 800bb18:	4698      	mov	r8, r3
 800bb1a:	e7f4      	b.n	800bb06 <_dtoa_r+0x8ee>
 800bb1c:	f43f af7d 	beq.w	800ba1a <_dtoa_r+0x802>
 800bb20:	4618      	mov	r0, r3
 800bb22:	301c      	adds	r0, #28
 800bb24:	e772      	b.n	800ba0c <_dtoa_r+0x7f4>
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	dc37      	bgt.n	800bb9c <_dtoa_r+0x984>
 800bb2c:	9b06      	ldr	r3, [sp, #24]
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	dd34      	ble.n	800bb9c <_dtoa_r+0x984>
 800bb32:	9b03      	ldr	r3, [sp, #12]
 800bb34:	9302      	str	r3, [sp, #8]
 800bb36:	9b02      	ldr	r3, [sp, #8]
 800bb38:	b96b      	cbnz	r3, 800bb56 <_dtoa_r+0x93e>
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	2205      	movs	r2, #5
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f000 faa6 	bl	800c090 <__multadd>
 800bb44:	4601      	mov	r1, r0
 800bb46:	4606      	mov	r6, r0
 800bb48:	ee18 0a10 	vmov	r0, s16
 800bb4c:	f000 fcc0 	bl	800c4d0 <__mcmp>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	f73f adbb 	bgt.w	800b6cc <_dtoa_r+0x4b4>
 800bb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb58:	9d01      	ldr	r5, [sp, #4]
 800bb5a:	43db      	mvns	r3, r3
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	f04f 0800 	mov.w	r8, #0
 800bb62:	4631      	mov	r1, r6
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 fa71 	bl	800c04c <_Bfree>
 800bb6a:	2f00      	cmp	r7, #0
 800bb6c:	f43f aea4 	beq.w	800b8b8 <_dtoa_r+0x6a0>
 800bb70:	f1b8 0f00 	cmp.w	r8, #0
 800bb74:	d005      	beq.n	800bb82 <_dtoa_r+0x96a>
 800bb76:	45b8      	cmp	r8, r7
 800bb78:	d003      	beq.n	800bb82 <_dtoa_r+0x96a>
 800bb7a:	4641      	mov	r1, r8
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f000 fa65 	bl	800c04c <_Bfree>
 800bb82:	4639      	mov	r1, r7
 800bb84:	4620      	mov	r0, r4
 800bb86:	f000 fa61 	bl	800c04c <_Bfree>
 800bb8a:	e695      	b.n	800b8b8 <_dtoa_r+0x6a0>
 800bb8c:	2600      	movs	r6, #0
 800bb8e:	4637      	mov	r7, r6
 800bb90:	e7e1      	b.n	800bb56 <_dtoa_r+0x93e>
 800bb92:	9700      	str	r7, [sp, #0]
 800bb94:	4637      	mov	r7, r6
 800bb96:	e599      	b.n	800b6cc <_dtoa_r+0x4b4>
 800bb98:	40240000 	.word	0x40240000
 800bb9c:	9b08      	ldr	r3, [sp, #32]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f000 80ca 	beq.w	800bd38 <_dtoa_r+0xb20>
 800bba4:	9b03      	ldr	r3, [sp, #12]
 800bba6:	9302      	str	r3, [sp, #8]
 800bba8:	2d00      	cmp	r5, #0
 800bbaa:	dd05      	ble.n	800bbb8 <_dtoa_r+0x9a0>
 800bbac:	4639      	mov	r1, r7
 800bbae:	462a      	mov	r2, r5
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 fc1d 	bl	800c3f0 <__lshift>
 800bbb6:	4607      	mov	r7, r0
 800bbb8:	f1b8 0f00 	cmp.w	r8, #0
 800bbbc:	d05b      	beq.n	800bc76 <_dtoa_r+0xa5e>
 800bbbe:	6879      	ldr	r1, [r7, #4]
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 fa03 	bl	800bfcc <_Balloc>
 800bbc6:	4605      	mov	r5, r0
 800bbc8:	b928      	cbnz	r0, 800bbd6 <_dtoa_r+0x9be>
 800bbca:	4b87      	ldr	r3, [pc, #540]	; (800bde8 <_dtoa_r+0xbd0>)
 800bbcc:	4602      	mov	r2, r0
 800bbce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bbd2:	f7ff bb3b 	b.w	800b24c <_dtoa_r+0x34>
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	3202      	adds	r2, #2
 800bbda:	0092      	lsls	r2, r2, #2
 800bbdc:	f107 010c 	add.w	r1, r7, #12
 800bbe0:	300c      	adds	r0, #12
 800bbe2:	f7fe fc96 	bl	800a512 <memcpy>
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	4629      	mov	r1, r5
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 fc00 	bl	800c3f0 <__lshift>
 800bbf0:	9b01      	ldr	r3, [sp, #4]
 800bbf2:	f103 0901 	add.w	r9, r3, #1
 800bbf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	9305      	str	r3, [sp, #20]
 800bbfe:	f00a 0301 	and.w	r3, sl, #1
 800bc02:	46b8      	mov	r8, r7
 800bc04:	9304      	str	r3, [sp, #16]
 800bc06:	4607      	mov	r7, r0
 800bc08:	4631      	mov	r1, r6
 800bc0a:	ee18 0a10 	vmov	r0, s16
 800bc0e:	f7ff fa75 	bl	800b0fc <quorem>
 800bc12:	4641      	mov	r1, r8
 800bc14:	9002      	str	r0, [sp, #8]
 800bc16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc1a:	ee18 0a10 	vmov	r0, s16
 800bc1e:	f000 fc57 	bl	800c4d0 <__mcmp>
 800bc22:	463a      	mov	r2, r7
 800bc24:	9003      	str	r0, [sp, #12]
 800bc26:	4631      	mov	r1, r6
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f000 fc6d 	bl	800c508 <__mdiff>
 800bc2e:	68c2      	ldr	r2, [r0, #12]
 800bc30:	f109 3bff 	add.w	fp, r9, #4294967295
 800bc34:	4605      	mov	r5, r0
 800bc36:	bb02      	cbnz	r2, 800bc7a <_dtoa_r+0xa62>
 800bc38:	4601      	mov	r1, r0
 800bc3a:	ee18 0a10 	vmov	r0, s16
 800bc3e:	f000 fc47 	bl	800c4d0 <__mcmp>
 800bc42:	4602      	mov	r2, r0
 800bc44:	4629      	mov	r1, r5
 800bc46:	4620      	mov	r0, r4
 800bc48:	9207      	str	r2, [sp, #28]
 800bc4a:	f000 f9ff 	bl	800c04c <_Bfree>
 800bc4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bc52:	ea43 0102 	orr.w	r1, r3, r2
 800bc56:	9b04      	ldr	r3, [sp, #16]
 800bc58:	430b      	orrs	r3, r1
 800bc5a:	464d      	mov	r5, r9
 800bc5c:	d10f      	bne.n	800bc7e <_dtoa_r+0xa66>
 800bc5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc62:	d02a      	beq.n	800bcba <_dtoa_r+0xaa2>
 800bc64:	9b03      	ldr	r3, [sp, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	dd02      	ble.n	800bc70 <_dtoa_r+0xa58>
 800bc6a:	9b02      	ldr	r3, [sp, #8]
 800bc6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bc70:	f88b a000 	strb.w	sl, [fp]
 800bc74:	e775      	b.n	800bb62 <_dtoa_r+0x94a>
 800bc76:	4638      	mov	r0, r7
 800bc78:	e7ba      	b.n	800bbf0 <_dtoa_r+0x9d8>
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	e7e2      	b.n	800bc44 <_dtoa_r+0xa2c>
 800bc7e:	9b03      	ldr	r3, [sp, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	db04      	blt.n	800bc8e <_dtoa_r+0xa76>
 800bc84:	9906      	ldr	r1, [sp, #24]
 800bc86:	430b      	orrs	r3, r1
 800bc88:	9904      	ldr	r1, [sp, #16]
 800bc8a:	430b      	orrs	r3, r1
 800bc8c:	d122      	bne.n	800bcd4 <_dtoa_r+0xabc>
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	ddee      	ble.n	800bc70 <_dtoa_r+0xa58>
 800bc92:	ee18 1a10 	vmov	r1, s16
 800bc96:	2201      	movs	r2, #1
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f000 fba9 	bl	800c3f0 <__lshift>
 800bc9e:	4631      	mov	r1, r6
 800bca0:	ee08 0a10 	vmov	s16, r0
 800bca4:	f000 fc14 	bl	800c4d0 <__mcmp>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	dc03      	bgt.n	800bcb4 <_dtoa_r+0xa9c>
 800bcac:	d1e0      	bne.n	800bc70 <_dtoa_r+0xa58>
 800bcae:	f01a 0f01 	tst.w	sl, #1
 800bcb2:	d0dd      	beq.n	800bc70 <_dtoa_r+0xa58>
 800bcb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcb8:	d1d7      	bne.n	800bc6a <_dtoa_r+0xa52>
 800bcba:	2339      	movs	r3, #57	; 0x39
 800bcbc:	f88b 3000 	strb.w	r3, [fp]
 800bcc0:	462b      	mov	r3, r5
 800bcc2:	461d      	mov	r5, r3
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bcca:	2a39      	cmp	r2, #57	; 0x39
 800bccc:	d071      	beq.n	800bdb2 <_dtoa_r+0xb9a>
 800bcce:	3201      	adds	r2, #1
 800bcd0:	701a      	strb	r2, [r3, #0]
 800bcd2:	e746      	b.n	800bb62 <_dtoa_r+0x94a>
 800bcd4:	2a00      	cmp	r2, #0
 800bcd6:	dd07      	ble.n	800bce8 <_dtoa_r+0xad0>
 800bcd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcdc:	d0ed      	beq.n	800bcba <_dtoa_r+0xaa2>
 800bcde:	f10a 0301 	add.w	r3, sl, #1
 800bce2:	f88b 3000 	strb.w	r3, [fp]
 800bce6:	e73c      	b.n	800bb62 <_dtoa_r+0x94a>
 800bce8:	9b05      	ldr	r3, [sp, #20]
 800bcea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bcee:	4599      	cmp	r9, r3
 800bcf0:	d047      	beq.n	800bd82 <_dtoa_r+0xb6a>
 800bcf2:	ee18 1a10 	vmov	r1, s16
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	220a      	movs	r2, #10
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 f9c8 	bl	800c090 <__multadd>
 800bd00:	45b8      	cmp	r8, r7
 800bd02:	ee08 0a10 	vmov	s16, r0
 800bd06:	f04f 0300 	mov.w	r3, #0
 800bd0a:	f04f 020a 	mov.w	r2, #10
 800bd0e:	4641      	mov	r1, r8
 800bd10:	4620      	mov	r0, r4
 800bd12:	d106      	bne.n	800bd22 <_dtoa_r+0xb0a>
 800bd14:	f000 f9bc 	bl	800c090 <__multadd>
 800bd18:	4680      	mov	r8, r0
 800bd1a:	4607      	mov	r7, r0
 800bd1c:	f109 0901 	add.w	r9, r9, #1
 800bd20:	e772      	b.n	800bc08 <_dtoa_r+0x9f0>
 800bd22:	f000 f9b5 	bl	800c090 <__multadd>
 800bd26:	4639      	mov	r1, r7
 800bd28:	4680      	mov	r8, r0
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	220a      	movs	r2, #10
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 f9ae 	bl	800c090 <__multadd>
 800bd34:	4607      	mov	r7, r0
 800bd36:	e7f1      	b.n	800bd1c <_dtoa_r+0xb04>
 800bd38:	9b03      	ldr	r3, [sp, #12]
 800bd3a:	9302      	str	r3, [sp, #8]
 800bd3c:	9d01      	ldr	r5, [sp, #4]
 800bd3e:	ee18 0a10 	vmov	r0, s16
 800bd42:	4631      	mov	r1, r6
 800bd44:	f7ff f9da 	bl	800b0fc <quorem>
 800bd48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd4c:	9b01      	ldr	r3, [sp, #4]
 800bd4e:	f805 ab01 	strb.w	sl, [r5], #1
 800bd52:	1aea      	subs	r2, r5, r3
 800bd54:	9b02      	ldr	r3, [sp, #8]
 800bd56:	4293      	cmp	r3, r2
 800bd58:	dd09      	ble.n	800bd6e <_dtoa_r+0xb56>
 800bd5a:	ee18 1a10 	vmov	r1, s16
 800bd5e:	2300      	movs	r3, #0
 800bd60:	220a      	movs	r2, #10
 800bd62:	4620      	mov	r0, r4
 800bd64:	f000 f994 	bl	800c090 <__multadd>
 800bd68:	ee08 0a10 	vmov	s16, r0
 800bd6c:	e7e7      	b.n	800bd3e <_dtoa_r+0xb26>
 800bd6e:	9b02      	ldr	r3, [sp, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	bfc8      	it	gt
 800bd74:	461d      	movgt	r5, r3
 800bd76:	9b01      	ldr	r3, [sp, #4]
 800bd78:	bfd8      	it	le
 800bd7a:	2501      	movle	r5, #1
 800bd7c:	441d      	add	r5, r3
 800bd7e:	f04f 0800 	mov.w	r8, #0
 800bd82:	ee18 1a10 	vmov	r1, s16
 800bd86:	2201      	movs	r2, #1
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 fb31 	bl	800c3f0 <__lshift>
 800bd8e:	4631      	mov	r1, r6
 800bd90:	ee08 0a10 	vmov	s16, r0
 800bd94:	f000 fb9c 	bl	800c4d0 <__mcmp>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	dc91      	bgt.n	800bcc0 <_dtoa_r+0xaa8>
 800bd9c:	d102      	bne.n	800bda4 <_dtoa_r+0xb8c>
 800bd9e:	f01a 0f01 	tst.w	sl, #1
 800bda2:	d18d      	bne.n	800bcc0 <_dtoa_r+0xaa8>
 800bda4:	462b      	mov	r3, r5
 800bda6:	461d      	mov	r5, r3
 800bda8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdac:	2a30      	cmp	r2, #48	; 0x30
 800bdae:	d0fa      	beq.n	800bda6 <_dtoa_r+0xb8e>
 800bdb0:	e6d7      	b.n	800bb62 <_dtoa_r+0x94a>
 800bdb2:	9a01      	ldr	r2, [sp, #4]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d184      	bne.n	800bcc2 <_dtoa_r+0xaaa>
 800bdb8:	9b00      	ldr	r3, [sp, #0]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	2331      	movs	r3, #49	; 0x31
 800bdc0:	7013      	strb	r3, [r2, #0]
 800bdc2:	e6ce      	b.n	800bb62 <_dtoa_r+0x94a>
 800bdc4:	4b09      	ldr	r3, [pc, #36]	; (800bdec <_dtoa_r+0xbd4>)
 800bdc6:	f7ff ba95 	b.w	800b2f4 <_dtoa_r+0xdc>
 800bdca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f47f aa6e 	bne.w	800b2ae <_dtoa_r+0x96>
 800bdd2:	4b07      	ldr	r3, [pc, #28]	; (800bdf0 <_dtoa_r+0xbd8>)
 800bdd4:	f7ff ba8e 	b.w	800b2f4 <_dtoa_r+0xdc>
 800bdd8:	9b02      	ldr	r3, [sp, #8]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	dcae      	bgt.n	800bd3c <_dtoa_r+0xb24>
 800bdde:	9b06      	ldr	r3, [sp, #24]
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	f73f aea8 	bgt.w	800bb36 <_dtoa_r+0x91e>
 800bde6:	e7a9      	b.n	800bd3c <_dtoa_r+0xb24>
 800bde8:	0800cf97 	.word	0x0800cf97
 800bdec:	0800cef4 	.word	0x0800cef4
 800bdf0:	0800cf18 	.word	0x0800cf18

0800bdf4 <__sflush_r>:
 800bdf4:	898a      	ldrh	r2, [r1, #12]
 800bdf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfa:	4605      	mov	r5, r0
 800bdfc:	0710      	lsls	r0, r2, #28
 800bdfe:	460c      	mov	r4, r1
 800be00:	d458      	bmi.n	800beb4 <__sflush_r+0xc0>
 800be02:	684b      	ldr	r3, [r1, #4]
 800be04:	2b00      	cmp	r3, #0
 800be06:	dc05      	bgt.n	800be14 <__sflush_r+0x20>
 800be08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	dc02      	bgt.n	800be14 <__sflush_r+0x20>
 800be0e:	2000      	movs	r0, #0
 800be10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be16:	2e00      	cmp	r6, #0
 800be18:	d0f9      	beq.n	800be0e <__sflush_r+0x1a>
 800be1a:	2300      	movs	r3, #0
 800be1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be20:	682f      	ldr	r7, [r5, #0]
 800be22:	602b      	str	r3, [r5, #0]
 800be24:	d032      	beq.n	800be8c <__sflush_r+0x98>
 800be26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	075a      	lsls	r2, r3, #29
 800be2c:	d505      	bpl.n	800be3a <__sflush_r+0x46>
 800be2e:	6863      	ldr	r3, [r4, #4]
 800be30:	1ac0      	subs	r0, r0, r3
 800be32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be34:	b10b      	cbz	r3, 800be3a <__sflush_r+0x46>
 800be36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be38:	1ac0      	subs	r0, r0, r3
 800be3a:	2300      	movs	r3, #0
 800be3c:	4602      	mov	r2, r0
 800be3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be40:	6a21      	ldr	r1, [r4, #32]
 800be42:	4628      	mov	r0, r5
 800be44:	47b0      	blx	r6
 800be46:	1c43      	adds	r3, r0, #1
 800be48:	89a3      	ldrh	r3, [r4, #12]
 800be4a:	d106      	bne.n	800be5a <__sflush_r+0x66>
 800be4c:	6829      	ldr	r1, [r5, #0]
 800be4e:	291d      	cmp	r1, #29
 800be50:	d82c      	bhi.n	800beac <__sflush_r+0xb8>
 800be52:	4a2a      	ldr	r2, [pc, #168]	; (800befc <__sflush_r+0x108>)
 800be54:	40ca      	lsrs	r2, r1
 800be56:	07d6      	lsls	r6, r2, #31
 800be58:	d528      	bpl.n	800beac <__sflush_r+0xb8>
 800be5a:	2200      	movs	r2, #0
 800be5c:	6062      	str	r2, [r4, #4]
 800be5e:	04d9      	lsls	r1, r3, #19
 800be60:	6922      	ldr	r2, [r4, #16]
 800be62:	6022      	str	r2, [r4, #0]
 800be64:	d504      	bpl.n	800be70 <__sflush_r+0x7c>
 800be66:	1c42      	adds	r2, r0, #1
 800be68:	d101      	bne.n	800be6e <__sflush_r+0x7a>
 800be6a:	682b      	ldr	r3, [r5, #0]
 800be6c:	b903      	cbnz	r3, 800be70 <__sflush_r+0x7c>
 800be6e:	6560      	str	r0, [r4, #84]	; 0x54
 800be70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be72:	602f      	str	r7, [r5, #0]
 800be74:	2900      	cmp	r1, #0
 800be76:	d0ca      	beq.n	800be0e <__sflush_r+0x1a>
 800be78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be7c:	4299      	cmp	r1, r3
 800be7e:	d002      	beq.n	800be86 <__sflush_r+0x92>
 800be80:	4628      	mov	r0, r5
 800be82:	f000 fc3d 	bl	800c700 <_free_r>
 800be86:	2000      	movs	r0, #0
 800be88:	6360      	str	r0, [r4, #52]	; 0x34
 800be8a:	e7c1      	b.n	800be10 <__sflush_r+0x1c>
 800be8c:	6a21      	ldr	r1, [r4, #32]
 800be8e:	2301      	movs	r3, #1
 800be90:	4628      	mov	r0, r5
 800be92:	47b0      	blx	r6
 800be94:	1c41      	adds	r1, r0, #1
 800be96:	d1c7      	bne.n	800be28 <__sflush_r+0x34>
 800be98:	682b      	ldr	r3, [r5, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d0c4      	beq.n	800be28 <__sflush_r+0x34>
 800be9e:	2b1d      	cmp	r3, #29
 800bea0:	d001      	beq.n	800bea6 <__sflush_r+0xb2>
 800bea2:	2b16      	cmp	r3, #22
 800bea4:	d101      	bne.n	800beaa <__sflush_r+0xb6>
 800bea6:	602f      	str	r7, [r5, #0]
 800bea8:	e7b1      	b.n	800be0e <__sflush_r+0x1a>
 800beaa:	89a3      	ldrh	r3, [r4, #12]
 800beac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beb0:	81a3      	strh	r3, [r4, #12]
 800beb2:	e7ad      	b.n	800be10 <__sflush_r+0x1c>
 800beb4:	690f      	ldr	r7, [r1, #16]
 800beb6:	2f00      	cmp	r7, #0
 800beb8:	d0a9      	beq.n	800be0e <__sflush_r+0x1a>
 800beba:	0793      	lsls	r3, r2, #30
 800bebc:	680e      	ldr	r6, [r1, #0]
 800bebe:	bf08      	it	eq
 800bec0:	694b      	ldreq	r3, [r1, #20]
 800bec2:	600f      	str	r7, [r1, #0]
 800bec4:	bf18      	it	ne
 800bec6:	2300      	movne	r3, #0
 800bec8:	eba6 0807 	sub.w	r8, r6, r7
 800becc:	608b      	str	r3, [r1, #8]
 800bece:	f1b8 0f00 	cmp.w	r8, #0
 800bed2:	dd9c      	ble.n	800be0e <__sflush_r+0x1a>
 800bed4:	6a21      	ldr	r1, [r4, #32]
 800bed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bed8:	4643      	mov	r3, r8
 800beda:	463a      	mov	r2, r7
 800bedc:	4628      	mov	r0, r5
 800bede:	47b0      	blx	r6
 800bee0:	2800      	cmp	r0, #0
 800bee2:	dc06      	bgt.n	800bef2 <__sflush_r+0xfe>
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	f04f 30ff 	mov.w	r0, #4294967295
 800bef0:	e78e      	b.n	800be10 <__sflush_r+0x1c>
 800bef2:	4407      	add	r7, r0
 800bef4:	eba8 0800 	sub.w	r8, r8, r0
 800bef8:	e7e9      	b.n	800bece <__sflush_r+0xda>
 800befa:	bf00      	nop
 800befc:	20400001 	.word	0x20400001

0800bf00 <_fflush_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	690b      	ldr	r3, [r1, #16]
 800bf04:	4605      	mov	r5, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	b913      	cbnz	r3, 800bf10 <_fflush_r+0x10>
 800bf0a:	2500      	movs	r5, #0
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	bd38      	pop	{r3, r4, r5, pc}
 800bf10:	b118      	cbz	r0, 800bf1a <_fflush_r+0x1a>
 800bf12:	6983      	ldr	r3, [r0, #24]
 800bf14:	b90b      	cbnz	r3, 800bf1a <_fflush_r+0x1a>
 800bf16:	f7fe fa37 	bl	800a388 <__sinit>
 800bf1a:	4b14      	ldr	r3, [pc, #80]	; (800bf6c <_fflush_r+0x6c>)
 800bf1c:	429c      	cmp	r4, r3
 800bf1e:	d11b      	bne.n	800bf58 <_fflush_r+0x58>
 800bf20:	686c      	ldr	r4, [r5, #4]
 800bf22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d0ef      	beq.n	800bf0a <_fflush_r+0xa>
 800bf2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf2c:	07d0      	lsls	r0, r2, #31
 800bf2e:	d404      	bmi.n	800bf3a <_fflush_r+0x3a>
 800bf30:	0599      	lsls	r1, r3, #22
 800bf32:	d402      	bmi.n	800bf3a <_fflush_r+0x3a>
 800bf34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf36:	f7fe faea 	bl	800a50e <__retarget_lock_acquire_recursive>
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	f7ff ff59 	bl	800bdf4 <__sflush_r>
 800bf42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf44:	07da      	lsls	r2, r3, #31
 800bf46:	4605      	mov	r5, r0
 800bf48:	d4e0      	bmi.n	800bf0c <_fflush_r+0xc>
 800bf4a:	89a3      	ldrh	r3, [r4, #12]
 800bf4c:	059b      	lsls	r3, r3, #22
 800bf4e:	d4dd      	bmi.n	800bf0c <_fflush_r+0xc>
 800bf50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf52:	f7fe fadd 	bl	800a510 <__retarget_lock_release_recursive>
 800bf56:	e7d9      	b.n	800bf0c <_fflush_r+0xc>
 800bf58:	4b05      	ldr	r3, [pc, #20]	; (800bf70 <_fflush_r+0x70>)
 800bf5a:	429c      	cmp	r4, r3
 800bf5c:	d101      	bne.n	800bf62 <_fflush_r+0x62>
 800bf5e:	68ac      	ldr	r4, [r5, #8]
 800bf60:	e7df      	b.n	800bf22 <_fflush_r+0x22>
 800bf62:	4b04      	ldr	r3, [pc, #16]	; (800bf74 <_fflush_r+0x74>)
 800bf64:	429c      	cmp	r4, r3
 800bf66:	bf08      	it	eq
 800bf68:	68ec      	ldreq	r4, [r5, #12]
 800bf6a:	e7da      	b.n	800bf22 <_fflush_r+0x22>
 800bf6c:	0800cea0 	.word	0x0800cea0
 800bf70:	0800cec0 	.word	0x0800cec0
 800bf74:	0800ce80 	.word	0x0800ce80

0800bf78 <_localeconv_r>:
 800bf78:	4800      	ldr	r0, [pc, #0]	; (800bf7c <_localeconv_r+0x4>)
 800bf7a:	4770      	bx	lr
 800bf7c:	20000164 	.word	0x20000164

0800bf80 <_lseek_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4d07      	ldr	r5, [pc, #28]	; (800bfa0 <_lseek_r+0x20>)
 800bf84:	4604      	mov	r4, r0
 800bf86:	4608      	mov	r0, r1
 800bf88:	4611      	mov	r1, r2
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	602a      	str	r2, [r5, #0]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	f7f5 fd10 	bl	80019b4 <_lseek>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d102      	bne.n	800bf9e <_lseek_r+0x1e>
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	b103      	cbz	r3, 800bf9e <_lseek_r+0x1e>
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	200016f4 	.word	0x200016f4

0800bfa4 <malloc>:
 800bfa4:	4b02      	ldr	r3, [pc, #8]	; (800bfb0 <malloc+0xc>)
 800bfa6:	4601      	mov	r1, r0
 800bfa8:	6818      	ldr	r0, [r3, #0]
 800bfaa:	f7fe bae9 	b.w	800a580 <_malloc_r>
 800bfae:	bf00      	nop
 800bfb0:	20000010 	.word	0x20000010

0800bfb4 <__malloc_lock>:
 800bfb4:	4801      	ldr	r0, [pc, #4]	; (800bfbc <__malloc_lock+0x8>)
 800bfb6:	f7fe baaa 	b.w	800a50e <__retarget_lock_acquire_recursive>
 800bfba:	bf00      	nop
 800bfbc:	200016e8 	.word	0x200016e8

0800bfc0 <__malloc_unlock>:
 800bfc0:	4801      	ldr	r0, [pc, #4]	; (800bfc8 <__malloc_unlock+0x8>)
 800bfc2:	f7fe baa5 	b.w	800a510 <__retarget_lock_release_recursive>
 800bfc6:	bf00      	nop
 800bfc8:	200016e8 	.word	0x200016e8

0800bfcc <_Balloc>:
 800bfcc:	b570      	push	{r4, r5, r6, lr}
 800bfce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	460d      	mov	r5, r1
 800bfd4:	b976      	cbnz	r6, 800bff4 <_Balloc+0x28>
 800bfd6:	2010      	movs	r0, #16
 800bfd8:	f7ff ffe4 	bl	800bfa4 <malloc>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	6260      	str	r0, [r4, #36]	; 0x24
 800bfe0:	b920      	cbnz	r0, 800bfec <_Balloc+0x20>
 800bfe2:	4b18      	ldr	r3, [pc, #96]	; (800c044 <_Balloc+0x78>)
 800bfe4:	4818      	ldr	r0, [pc, #96]	; (800c048 <_Balloc+0x7c>)
 800bfe6:	2166      	movs	r1, #102	; 0x66
 800bfe8:	f000 fbe8 	bl	800c7bc <__assert_func>
 800bfec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bff0:	6006      	str	r6, [r0, #0]
 800bff2:	60c6      	str	r6, [r0, #12]
 800bff4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bff6:	68f3      	ldr	r3, [r6, #12]
 800bff8:	b183      	cbz	r3, 800c01c <_Balloc+0x50>
 800bffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c002:	b9b8      	cbnz	r0, 800c034 <_Balloc+0x68>
 800c004:	2101      	movs	r1, #1
 800c006:	fa01 f605 	lsl.w	r6, r1, r5
 800c00a:	1d72      	adds	r2, r6, #5
 800c00c:	0092      	lsls	r2, r2, #2
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 fb60 	bl	800c6d4 <_calloc_r>
 800c014:	b160      	cbz	r0, 800c030 <_Balloc+0x64>
 800c016:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c01a:	e00e      	b.n	800c03a <_Balloc+0x6e>
 800c01c:	2221      	movs	r2, #33	; 0x21
 800c01e:	2104      	movs	r1, #4
 800c020:	4620      	mov	r0, r4
 800c022:	f000 fb57 	bl	800c6d4 <_calloc_r>
 800c026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c028:	60f0      	str	r0, [r6, #12]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e4      	bne.n	800bffa <_Balloc+0x2e>
 800c030:	2000      	movs	r0, #0
 800c032:	bd70      	pop	{r4, r5, r6, pc}
 800c034:	6802      	ldr	r2, [r0, #0]
 800c036:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c03a:	2300      	movs	r3, #0
 800c03c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c040:	e7f7      	b.n	800c032 <_Balloc+0x66>
 800c042:	bf00      	nop
 800c044:	0800cf25 	.word	0x0800cf25
 800c048:	0800cfa8 	.word	0x0800cfa8

0800c04c <_Bfree>:
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c050:	4605      	mov	r5, r0
 800c052:	460c      	mov	r4, r1
 800c054:	b976      	cbnz	r6, 800c074 <_Bfree+0x28>
 800c056:	2010      	movs	r0, #16
 800c058:	f7ff ffa4 	bl	800bfa4 <malloc>
 800c05c:	4602      	mov	r2, r0
 800c05e:	6268      	str	r0, [r5, #36]	; 0x24
 800c060:	b920      	cbnz	r0, 800c06c <_Bfree+0x20>
 800c062:	4b09      	ldr	r3, [pc, #36]	; (800c088 <_Bfree+0x3c>)
 800c064:	4809      	ldr	r0, [pc, #36]	; (800c08c <_Bfree+0x40>)
 800c066:	218a      	movs	r1, #138	; 0x8a
 800c068:	f000 fba8 	bl	800c7bc <__assert_func>
 800c06c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c070:	6006      	str	r6, [r0, #0]
 800c072:	60c6      	str	r6, [r0, #12]
 800c074:	b13c      	cbz	r4, 800c086 <_Bfree+0x3a>
 800c076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c078:	6862      	ldr	r2, [r4, #4]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c080:	6021      	str	r1, [r4, #0]
 800c082:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c086:	bd70      	pop	{r4, r5, r6, pc}
 800c088:	0800cf25 	.word	0x0800cf25
 800c08c:	0800cfa8 	.word	0x0800cfa8

0800c090 <__multadd>:
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	690d      	ldr	r5, [r1, #16]
 800c096:	4607      	mov	r7, r0
 800c098:	460c      	mov	r4, r1
 800c09a:	461e      	mov	r6, r3
 800c09c:	f101 0c14 	add.w	ip, r1, #20
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	f8dc 3000 	ldr.w	r3, [ip]
 800c0a6:	b299      	uxth	r1, r3
 800c0a8:	fb02 6101 	mla	r1, r2, r1, r6
 800c0ac:	0c1e      	lsrs	r6, r3, #16
 800c0ae:	0c0b      	lsrs	r3, r1, #16
 800c0b0:	fb02 3306 	mla	r3, r2, r6, r3
 800c0b4:	b289      	uxth	r1, r1
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0bc:	4285      	cmp	r5, r0
 800c0be:	f84c 1b04 	str.w	r1, [ip], #4
 800c0c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0c6:	dcec      	bgt.n	800c0a2 <__multadd+0x12>
 800c0c8:	b30e      	cbz	r6, 800c10e <__multadd+0x7e>
 800c0ca:	68a3      	ldr	r3, [r4, #8]
 800c0cc:	42ab      	cmp	r3, r5
 800c0ce:	dc19      	bgt.n	800c104 <__multadd+0x74>
 800c0d0:	6861      	ldr	r1, [r4, #4]
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	3101      	adds	r1, #1
 800c0d6:	f7ff ff79 	bl	800bfcc <_Balloc>
 800c0da:	4680      	mov	r8, r0
 800c0dc:	b928      	cbnz	r0, 800c0ea <__multadd+0x5a>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	4b0c      	ldr	r3, [pc, #48]	; (800c114 <__multadd+0x84>)
 800c0e2:	480d      	ldr	r0, [pc, #52]	; (800c118 <__multadd+0x88>)
 800c0e4:	21b5      	movs	r1, #181	; 0xb5
 800c0e6:	f000 fb69 	bl	800c7bc <__assert_func>
 800c0ea:	6922      	ldr	r2, [r4, #16]
 800c0ec:	3202      	adds	r2, #2
 800c0ee:	f104 010c 	add.w	r1, r4, #12
 800c0f2:	0092      	lsls	r2, r2, #2
 800c0f4:	300c      	adds	r0, #12
 800c0f6:	f7fe fa0c 	bl	800a512 <memcpy>
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	f7ff ffa5 	bl	800c04c <_Bfree>
 800c102:	4644      	mov	r4, r8
 800c104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c108:	3501      	adds	r5, #1
 800c10a:	615e      	str	r6, [r3, #20]
 800c10c:	6125      	str	r5, [r4, #16]
 800c10e:	4620      	mov	r0, r4
 800c110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c114:	0800cf97 	.word	0x0800cf97
 800c118:	0800cfa8 	.word	0x0800cfa8

0800c11c <__hi0bits>:
 800c11c:	0c03      	lsrs	r3, r0, #16
 800c11e:	041b      	lsls	r3, r3, #16
 800c120:	b9d3      	cbnz	r3, 800c158 <__hi0bits+0x3c>
 800c122:	0400      	lsls	r0, r0, #16
 800c124:	2310      	movs	r3, #16
 800c126:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c12a:	bf04      	itt	eq
 800c12c:	0200      	lsleq	r0, r0, #8
 800c12e:	3308      	addeq	r3, #8
 800c130:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c134:	bf04      	itt	eq
 800c136:	0100      	lsleq	r0, r0, #4
 800c138:	3304      	addeq	r3, #4
 800c13a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c13e:	bf04      	itt	eq
 800c140:	0080      	lsleq	r0, r0, #2
 800c142:	3302      	addeq	r3, #2
 800c144:	2800      	cmp	r0, #0
 800c146:	db05      	blt.n	800c154 <__hi0bits+0x38>
 800c148:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c14c:	f103 0301 	add.w	r3, r3, #1
 800c150:	bf08      	it	eq
 800c152:	2320      	moveq	r3, #32
 800c154:	4618      	mov	r0, r3
 800c156:	4770      	bx	lr
 800c158:	2300      	movs	r3, #0
 800c15a:	e7e4      	b.n	800c126 <__hi0bits+0xa>

0800c15c <__lo0bits>:
 800c15c:	6803      	ldr	r3, [r0, #0]
 800c15e:	f013 0207 	ands.w	r2, r3, #7
 800c162:	4601      	mov	r1, r0
 800c164:	d00b      	beq.n	800c17e <__lo0bits+0x22>
 800c166:	07da      	lsls	r2, r3, #31
 800c168:	d423      	bmi.n	800c1b2 <__lo0bits+0x56>
 800c16a:	0798      	lsls	r0, r3, #30
 800c16c:	bf49      	itett	mi
 800c16e:	085b      	lsrmi	r3, r3, #1
 800c170:	089b      	lsrpl	r3, r3, #2
 800c172:	2001      	movmi	r0, #1
 800c174:	600b      	strmi	r3, [r1, #0]
 800c176:	bf5c      	itt	pl
 800c178:	600b      	strpl	r3, [r1, #0]
 800c17a:	2002      	movpl	r0, #2
 800c17c:	4770      	bx	lr
 800c17e:	b298      	uxth	r0, r3
 800c180:	b9a8      	cbnz	r0, 800c1ae <__lo0bits+0x52>
 800c182:	0c1b      	lsrs	r3, r3, #16
 800c184:	2010      	movs	r0, #16
 800c186:	b2da      	uxtb	r2, r3
 800c188:	b90a      	cbnz	r2, 800c18e <__lo0bits+0x32>
 800c18a:	3008      	adds	r0, #8
 800c18c:	0a1b      	lsrs	r3, r3, #8
 800c18e:	071a      	lsls	r2, r3, #28
 800c190:	bf04      	itt	eq
 800c192:	091b      	lsreq	r3, r3, #4
 800c194:	3004      	addeq	r0, #4
 800c196:	079a      	lsls	r2, r3, #30
 800c198:	bf04      	itt	eq
 800c19a:	089b      	lsreq	r3, r3, #2
 800c19c:	3002      	addeq	r0, #2
 800c19e:	07da      	lsls	r2, r3, #31
 800c1a0:	d403      	bmi.n	800c1aa <__lo0bits+0x4e>
 800c1a2:	085b      	lsrs	r3, r3, #1
 800c1a4:	f100 0001 	add.w	r0, r0, #1
 800c1a8:	d005      	beq.n	800c1b6 <__lo0bits+0x5a>
 800c1aa:	600b      	str	r3, [r1, #0]
 800c1ac:	4770      	bx	lr
 800c1ae:	4610      	mov	r0, r2
 800c1b0:	e7e9      	b.n	800c186 <__lo0bits+0x2a>
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	4770      	bx	lr
 800c1b6:	2020      	movs	r0, #32
 800c1b8:	4770      	bx	lr
	...

0800c1bc <__i2b>:
 800c1bc:	b510      	push	{r4, lr}
 800c1be:	460c      	mov	r4, r1
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	f7ff ff03 	bl	800bfcc <_Balloc>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	b928      	cbnz	r0, 800c1d6 <__i2b+0x1a>
 800c1ca:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <__i2b+0x24>)
 800c1cc:	4805      	ldr	r0, [pc, #20]	; (800c1e4 <__i2b+0x28>)
 800c1ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c1d2:	f000 faf3 	bl	800c7bc <__assert_func>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	6144      	str	r4, [r0, #20]
 800c1da:	6103      	str	r3, [r0, #16]
 800c1dc:	bd10      	pop	{r4, pc}
 800c1de:	bf00      	nop
 800c1e0:	0800cf97 	.word	0x0800cf97
 800c1e4:	0800cfa8 	.word	0x0800cfa8

0800c1e8 <__multiply>:
 800c1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	4691      	mov	r9, r2
 800c1ee:	690a      	ldr	r2, [r1, #16]
 800c1f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	bfb8      	it	lt
 800c1f8:	460b      	movlt	r3, r1
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	bfbc      	itt	lt
 800c1fe:	464c      	movlt	r4, r9
 800c200:	4699      	movlt	r9, r3
 800c202:	6927      	ldr	r7, [r4, #16]
 800c204:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c208:	68a3      	ldr	r3, [r4, #8]
 800c20a:	6861      	ldr	r1, [r4, #4]
 800c20c:	eb07 060a 	add.w	r6, r7, sl
 800c210:	42b3      	cmp	r3, r6
 800c212:	b085      	sub	sp, #20
 800c214:	bfb8      	it	lt
 800c216:	3101      	addlt	r1, #1
 800c218:	f7ff fed8 	bl	800bfcc <_Balloc>
 800c21c:	b930      	cbnz	r0, 800c22c <__multiply+0x44>
 800c21e:	4602      	mov	r2, r0
 800c220:	4b44      	ldr	r3, [pc, #272]	; (800c334 <__multiply+0x14c>)
 800c222:	4845      	ldr	r0, [pc, #276]	; (800c338 <__multiply+0x150>)
 800c224:	f240 115d 	movw	r1, #349	; 0x15d
 800c228:	f000 fac8 	bl	800c7bc <__assert_func>
 800c22c:	f100 0514 	add.w	r5, r0, #20
 800c230:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c234:	462b      	mov	r3, r5
 800c236:	2200      	movs	r2, #0
 800c238:	4543      	cmp	r3, r8
 800c23a:	d321      	bcc.n	800c280 <__multiply+0x98>
 800c23c:	f104 0314 	add.w	r3, r4, #20
 800c240:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c244:	f109 0314 	add.w	r3, r9, #20
 800c248:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c24c:	9202      	str	r2, [sp, #8]
 800c24e:	1b3a      	subs	r2, r7, r4
 800c250:	3a15      	subs	r2, #21
 800c252:	f022 0203 	bic.w	r2, r2, #3
 800c256:	3204      	adds	r2, #4
 800c258:	f104 0115 	add.w	r1, r4, #21
 800c25c:	428f      	cmp	r7, r1
 800c25e:	bf38      	it	cc
 800c260:	2204      	movcc	r2, #4
 800c262:	9201      	str	r2, [sp, #4]
 800c264:	9a02      	ldr	r2, [sp, #8]
 800c266:	9303      	str	r3, [sp, #12]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d80c      	bhi.n	800c286 <__multiply+0x9e>
 800c26c:	2e00      	cmp	r6, #0
 800c26e:	dd03      	ble.n	800c278 <__multiply+0x90>
 800c270:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c274:	2b00      	cmp	r3, #0
 800c276:	d05a      	beq.n	800c32e <__multiply+0x146>
 800c278:	6106      	str	r6, [r0, #16]
 800c27a:	b005      	add	sp, #20
 800c27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c280:	f843 2b04 	str.w	r2, [r3], #4
 800c284:	e7d8      	b.n	800c238 <__multiply+0x50>
 800c286:	f8b3 a000 	ldrh.w	sl, [r3]
 800c28a:	f1ba 0f00 	cmp.w	sl, #0
 800c28e:	d024      	beq.n	800c2da <__multiply+0xf2>
 800c290:	f104 0e14 	add.w	lr, r4, #20
 800c294:	46a9      	mov	r9, r5
 800c296:	f04f 0c00 	mov.w	ip, #0
 800c29a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c29e:	f8d9 1000 	ldr.w	r1, [r9]
 800c2a2:	fa1f fb82 	uxth.w	fp, r2
 800c2a6:	b289      	uxth	r1, r1
 800c2a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c2ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c2b0:	f8d9 2000 	ldr.w	r2, [r9]
 800c2b4:	4461      	add	r1, ip
 800c2b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800c2be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c2c2:	b289      	uxth	r1, r1
 800c2c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c2c8:	4577      	cmp	r7, lr
 800c2ca:	f849 1b04 	str.w	r1, [r9], #4
 800c2ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2d2:	d8e2      	bhi.n	800c29a <__multiply+0xb2>
 800c2d4:	9a01      	ldr	r2, [sp, #4]
 800c2d6:	f845 c002 	str.w	ip, [r5, r2]
 800c2da:	9a03      	ldr	r2, [sp, #12]
 800c2dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c2e0:	3304      	adds	r3, #4
 800c2e2:	f1b9 0f00 	cmp.w	r9, #0
 800c2e6:	d020      	beq.n	800c32a <__multiply+0x142>
 800c2e8:	6829      	ldr	r1, [r5, #0]
 800c2ea:	f104 0c14 	add.w	ip, r4, #20
 800c2ee:	46ae      	mov	lr, r5
 800c2f0:	f04f 0a00 	mov.w	sl, #0
 800c2f4:	f8bc b000 	ldrh.w	fp, [ip]
 800c2f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c2fc:	fb09 220b 	mla	r2, r9, fp, r2
 800c300:	4492      	add	sl, r2
 800c302:	b289      	uxth	r1, r1
 800c304:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c308:	f84e 1b04 	str.w	r1, [lr], #4
 800c30c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c310:	f8be 1000 	ldrh.w	r1, [lr]
 800c314:	0c12      	lsrs	r2, r2, #16
 800c316:	fb09 1102 	mla	r1, r9, r2, r1
 800c31a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c31e:	4567      	cmp	r7, ip
 800c320:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c324:	d8e6      	bhi.n	800c2f4 <__multiply+0x10c>
 800c326:	9a01      	ldr	r2, [sp, #4]
 800c328:	50a9      	str	r1, [r5, r2]
 800c32a:	3504      	adds	r5, #4
 800c32c:	e79a      	b.n	800c264 <__multiply+0x7c>
 800c32e:	3e01      	subs	r6, #1
 800c330:	e79c      	b.n	800c26c <__multiply+0x84>
 800c332:	bf00      	nop
 800c334:	0800cf97 	.word	0x0800cf97
 800c338:	0800cfa8 	.word	0x0800cfa8

0800c33c <__pow5mult>:
 800c33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c340:	4615      	mov	r5, r2
 800c342:	f012 0203 	ands.w	r2, r2, #3
 800c346:	4606      	mov	r6, r0
 800c348:	460f      	mov	r7, r1
 800c34a:	d007      	beq.n	800c35c <__pow5mult+0x20>
 800c34c:	4c25      	ldr	r4, [pc, #148]	; (800c3e4 <__pow5mult+0xa8>)
 800c34e:	3a01      	subs	r2, #1
 800c350:	2300      	movs	r3, #0
 800c352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c356:	f7ff fe9b 	bl	800c090 <__multadd>
 800c35a:	4607      	mov	r7, r0
 800c35c:	10ad      	asrs	r5, r5, #2
 800c35e:	d03d      	beq.n	800c3dc <__pow5mult+0xa0>
 800c360:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c362:	b97c      	cbnz	r4, 800c384 <__pow5mult+0x48>
 800c364:	2010      	movs	r0, #16
 800c366:	f7ff fe1d 	bl	800bfa4 <malloc>
 800c36a:	4602      	mov	r2, r0
 800c36c:	6270      	str	r0, [r6, #36]	; 0x24
 800c36e:	b928      	cbnz	r0, 800c37c <__pow5mult+0x40>
 800c370:	4b1d      	ldr	r3, [pc, #116]	; (800c3e8 <__pow5mult+0xac>)
 800c372:	481e      	ldr	r0, [pc, #120]	; (800c3ec <__pow5mult+0xb0>)
 800c374:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c378:	f000 fa20 	bl	800c7bc <__assert_func>
 800c37c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c380:	6004      	str	r4, [r0, #0]
 800c382:	60c4      	str	r4, [r0, #12]
 800c384:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c38c:	b94c      	cbnz	r4, 800c3a2 <__pow5mult+0x66>
 800c38e:	f240 2171 	movw	r1, #625	; 0x271
 800c392:	4630      	mov	r0, r6
 800c394:	f7ff ff12 	bl	800c1bc <__i2b>
 800c398:	2300      	movs	r3, #0
 800c39a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c39e:	4604      	mov	r4, r0
 800c3a0:	6003      	str	r3, [r0, #0]
 800c3a2:	f04f 0900 	mov.w	r9, #0
 800c3a6:	07eb      	lsls	r3, r5, #31
 800c3a8:	d50a      	bpl.n	800c3c0 <__pow5mult+0x84>
 800c3aa:	4639      	mov	r1, r7
 800c3ac:	4622      	mov	r2, r4
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	f7ff ff1a 	bl	800c1e8 <__multiply>
 800c3b4:	4639      	mov	r1, r7
 800c3b6:	4680      	mov	r8, r0
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	f7ff fe47 	bl	800c04c <_Bfree>
 800c3be:	4647      	mov	r7, r8
 800c3c0:	106d      	asrs	r5, r5, #1
 800c3c2:	d00b      	beq.n	800c3dc <__pow5mult+0xa0>
 800c3c4:	6820      	ldr	r0, [r4, #0]
 800c3c6:	b938      	cbnz	r0, 800c3d8 <__pow5mult+0x9c>
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	f7ff ff0b 	bl	800c1e8 <__multiply>
 800c3d2:	6020      	str	r0, [r4, #0]
 800c3d4:	f8c0 9000 	str.w	r9, [r0]
 800c3d8:	4604      	mov	r4, r0
 800c3da:	e7e4      	b.n	800c3a6 <__pow5mult+0x6a>
 800c3dc:	4638      	mov	r0, r7
 800c3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3e2:	bf00      	nop
 800c3e4:	0800d0f8 	.word	0x0800d0f8
 800c3e8:	0800cf25 	.word	0x0800cf25
 800c3ec:	0800cfa8 	.word	0x0800cfa8

0800c3f0 <__lshift>:
 800c3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f4:	460c      	mov	r4, r1
 800c3f6:	6849      	ldr	r1, [r1, #4]
 800c3f8:	6923      	ldr	r3, [r4, #16]
 800c3fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3fe:	68a3      	ldr	r3, [r4, #8]
 800c400:	4607      	mov	r7, r0
 800c402:	4691      	mov	r9, r2
 800c404:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c408:	f108 0601 	add.w	r6, r8, #1
 800c40c:	42b3      	cmp	r3, r6
 800c40e:	db0b      	blt.n	800c428 <__lshift+0x38>
 800c410:	4638      	mov	r0, r7
 800c412:	f7ff fddb 	bl	800bfcc <_Balloc>
 800c416:	4605      	mov	r5, r0
 800c418:	b948      	cbnz	r0, 800c42e <__lshift+0x3e>
 800c41a:	4602      	mov	r2, r0
 800c41c:	4b2a      	ldr	r3, [pc, #168]	; (800c4c8 <__lshift+0xd8>)
 800c41e:	482b      	ldr	r0, [pc, #172]	; (800c4cc <__lshift+0xdc>)
 800c420:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c424:	f000 f9ca 	bl	800c7bc <__assert_func>
 800c428:	3101      	adds	r1, #1
 800c42a:	005b      	lsls	r3, r3, #1
 800c42c:	e7ee      	b.n	800c40c <__lshift+0x1c>
 800c42e:	2300      	movs	r3, #0
 800c430:	f100 0114 	add.w	r1, r0, #20
 800c434:	f100 0210 	add.w	r2, r0, #16
 800c438:	4618      	mov	r0, r3
 800c43a:	4553      	cmp	r3, sl
 800c43c:	db37      	blt.n	800c4ae <__lshift+0xbe>
 800c43e:	6920      	ldr	r0, [r4, #16]
 800c440:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c444:	f104 0314 	add.w	r3, r4, #20
 800c448:	f019 091f 	ands.w	r9, r9, #31
 800c44c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c450:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c454:	d02f      	beq.n	800c4b6 <__lshift+0xc6>
 800c456:	f1c9 0e20 	rsb	lr, r9, #32
 800c45a:	468a      	mov	sl, r1
 800c45c:	f04f 0c00 	mov.w	ip, #0
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	fa02 f209 	lsl.w	r2, r2, r9
 800c466:	ea42 020c 	orr.w	r2, r2, ip
 800c46a:	f84a 2b04 	str.w	r2, [sl], #4
 800c46e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c472:	4298      	cmp	r0, r3
 800c474:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c478:	d8f2      	bhi.n	800c460 <__lshift+0x70>
 800c47a:	1b03      	subs	r3, r0, r4
 800c47c:	3b15      	subs	r3, #21
 800c47e:	f023 0303 	bic.w	r3, r3, #3
 800c482:	3304      	adds	r3, #4
 800c484:	f104 0215 	add.w	r2, r4, #21
 800c488:	4290      	cmp	r0, r2
 800c48a:	bf38      	it	cc
 800c48c:	2304      	movcc	r3, #4
 800c48e:	f841 c003 	str.w	ip, [r1, r3]
 800c492:	f1bc 0f00 	cmp.w	ip, #0
 800c496:	d001      	beq.n	800c49c <__lshift+0xac>
 800c498:	f108 0602 	add.w	r6, r8, #2
 800c49c:	3e01      	subs	r6, #1
 800c49e:	4638      	mov	r0, r7
 800c4a0:	612e      	str	r6, [r5, #16]
 800c4a2:	4621      	mov	r1, r4
 800c4a4:	f7ff fdd2 	bl	800c04c <_Bfree>
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	e7c1      	b.n	800c43a <__lshift+0x4a>
 800c4b6:	3904      	subs	r1, #4
 800c4b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4c0:	4298      	cmp	r0, r3
 800c4c2:	d8f9      	bhi.n	800c4b8 <__lshift+0xc8>
 800c4c4:	e7ea      	b.n	800c49c <__lshift+0xac>
 800c4c6:	bf00      	nop
 800c4c8:	0800cf97 	.word	0x0800cf97
 800c4cc:	0800cfa8 	.word	0x0800cfa8

0800c4d0 <__mcmp>:
 800c4d0:	b530      	push	{r4, r5, lr}
 800c4d2:	6902      	ldr	r2, [r0, #16]
 800c4d4:	690c      	ldr	r4, [r1, #16]
 800c4d6:	1b12      	subs	r2, r2, r4
 800c4d8:	d10e      	bne.n	800c4f8 <__mcmp+0x28>
 800c4da:	f100 0314 	add.w	r3, r0, #20
 800c4de:	3114      	adds	r1, #20
 800c4e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c4e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c4e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c4ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c4f0:	42a5      	cmp	r5, r4
 800c4f2:	d003      	beq.n	800c4fc <__mcmp+0x2c>
 800c4f4:	d305      	bcc.n	800c502 <__mcmp+0x32>
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	bd30      	pop	{r4, r5, pc}
 800c4fc:	4283      	cmp	r3, r0
 800c4fe:	d3f3      	bcc.n	800c4e8 <__mcmp+0x18>
 800c500:	e7fa      	b.n	800c4f8 <__mcmp+0x28>
 800c502:	f04f 32ff 	mov.w	r2, #4294967295
 800c506:	e7f7      	b.n	800c4f8 <__mcmp+0x28>

0800c508 <__mdiff>:
 800c508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	460c      	mov	r4, r1
 800c50e:	4606      	mov	r6, r0
 800c510:	4611      	mov	r1, r2
 800c512:	4620      	mov	r0, r4
 800c514:	4690      	mov	r8, r2
 800c516:	f7ff ffdb 	bl	800c4d0 <__mcmp>
 800c51a:	1e05      	subs	r5, r0, #0
 800c51c:	d110      	bne.n	800c540 <__mdiff+0x38>
 800c51e:	4629      	mov	r1, r5
 800c520:	4630      	mov	r0, r6
 800c522:	f7ff fd53 	bl	800bfcc <_Balloc>
 800c526:	b930      	cbnz	r0, 800c536 <__mdiff+0x2e>
 800c528:	4b3a      	ldr	r3, [pc, #232]	; (800c614 <__mdiff+0x10c>)
 800c52a:	4602      	mov	r2, r0
 800c52c:	f240 2132 	movw	r1, #562	; 0x232
 800c530:	4839      	ldr	r0, [pc, #228]	; (800c618 <__mdiff+0x110>)
 800c532:	f000 f943 	bl	800c7bc <__assert_func>
 800c536:	2301      	movs	r3, #1
 800c538:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c53c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c540:	bfa4      	itt	ge
 800c542:	4643      	movge	r3, r8
 800c544:	46a0      	movge	r8, r4
 800c546:	4630      	mov	r0, r6
 800c548:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c54c:	bfa6      	itte	ge
 800c54e:	461c      	movge	r4, r3
 800c550:	2500      	movge	r5, #0
 800c552:	2501      	movlt	r5, #1
 800c554:	f7ff fd3a 	bl	800bfcc <_Balloc>
 800c558:	b920      	cbnz	r0, 800c564 <__mdiff+0x5c>
 800c55a:	4b2e      	ldr	r3, [pc, #184]	; (800c614 <__mdiff+0x10c>)
 800c55c:	4602      	mov	r2, r0
 800c55e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c562:	e7e5      	b.n	800c530 <__mdiff+0x28>
 800c564:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c568:	6926      	ldr	r6, [r4, #16]
 800c56a:	60c5      	str	r5, [r0, #12]
 800c56c:	f104 0914 	add.w	r9, r4, #20
 800c570:	f108 0514 	add.w	r5, r8, #20
 800c574:	f100 0e14 	add.w	lr, r0, #20
 800c578:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c57c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c580:	f108 0210 	add.w	r2, r8, #16
 800c584:	46f2      	mov	sl, lr
 800c586:	2100      	movs	r1, #0
 800c588:	f859 3b04 	ldr.w	r3, [r9], #4
 800c58c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c590:	fa1f f883 	uxth.w	r8, r3
 800c594:	fa11 f18b 	uxtah	r1, r1, fp
 800c598:	0c1b      	lsrs	r3, r3, #16
 800c59a:	eba1 0808 	sub.w	r8, r1, r8
 800c59e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c5a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5a6:	fa1f f888 	uxth.w	r8, r8
 800c5aa:	1419      	asrs	r1, r3, #16
 800c5ac:	454e      	cmp	r6, r9
 800c5ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c5b2:	f84a 3b04 	str.w	r3, [sl], #4
 800c5b6:	d8e7      	bhi.n	800c588 <__mdiff+0x80>
 800c5b8:	1b33      	subs	r3, r6, r4
 800c5ba:	3b15      	subs	r3, #21
 800c5bc:	f023 0303 	bic.w	r3, r3, #3
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	3415      	adds	r4, #21
 800c5c4:	42a6      	cmp	r6, r4
 800c5c6:	bf38      	it	cc
 800c5c8:	2304      	movcc	r3, #4
 800c5ca:	441d      	add	r5, r3
 800c5cc:	4473      	add	r3, lr
 800c5ce:	469e      	mov	lr, r3
 800c5d0:	462e      	mov	r6, r5
 800c5d2:	4566      	cmp	r6, ip
 800c5d4:	d30e      	bcc.n	800c5f4 <__mdiff+0xec>
 800c5d6:	f10c 0203 	add.w	r2, ip, #3
 800c5da:	1b52      	subs	r2, r2, r5
 800c5dc:	f022 0203 	bic.w	r2, r2, #3
 800c5e0:	3d03      	subs	r5, #3
 800c5e2:	45ac      	cmp	ip, r5
 800c5e4:	bf38      	it	cc
 800c5e6:	2200      	movcc	r2, #0
 800c5e8:	441a      	add	r2, r3
 800c5ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c5ee:	b17b      	cbz	r3, 800c610 <__mdiff+0x108>
 800c5f0:	6107      	str	r7, [r0, #16]
 800c5f2:	e7a3      	b.n	800c53c <__mdiff+0x34>
 800c5f4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c5f8:	fa11 f288 	uxtah	r2, r1, r8
 800c5fc:	1414      	asrs	r4, r2, #16
 800c5fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c602:	b292      	uxth	r2, r2
 800c604:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c608:	f84e 2b04 	str.w	r2, [lr], #4
 800c60c:	1421      	asrs	r1, r4, #16
 800c60e:	e7e0      	b.n	800c5d2 <__mdiff+0xca>
 800c610:	3f01      	subs	r7, #1
 800c612:	e7ea      	b.n	800c5ea <__mdiff+0xe2>
 800c614:	0800cf97 	.word	0x0800cf97
 800c618:	0800cfa8 	.word	0x0800cfa8

0800c61c <__d2b>:
 800c61c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c620:	4689      	mov	r9, r1
 800c622:	2101      	movs	r1, #1
 800c624:	ec57 6b10 	vmov	r6, r7, d0
 800c628:	4690      	mov	r8, r2
 800c62a:	f7ff fccf 	bl	800bfcc <_Balloc>
 800c62e:	4604      	mov	r4, r0
 800c630:	b930      	cbnz	r0, 800c640 <__d2b+0x24>
 800c632:	4602      	mov	r2, r0
 800c634:	4b25      	ldr	r3, [pc, #148]	; (800c6cc <__d2b+0xb0>)
 800c636:	4826      	ldr	r0, [pc, #152]	; (800c6d0 <__d2b+0xb4>)
 800c638:	f240 310a 	movw	r1, #778	; 0x30a
 800c63c:	f000 f8be 	bl	800c7bc <__assert_func>
 800c640:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c644:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c648:	bb35      	cbnz	r5, 800c698 <__d2b+0x7c>
 800c64a:	2e00      	cmp	r6, #0
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	d028      	beq.n	800c6a2 <__d2b+0x86>
 800c650:	4668      	mov	r0, sp
 800c652:	9600      	str	r6, [sp, #0]
 800c654:	f7ff fd82 	bl	800c15c <__lo0bits>
 800c658:	9900      	ldr	r1, [sp, #0]
 800c65a:	b300      	cbz	r0, 800c69e <__d2b+0x82>
 800c65c:	9a01      	ldr	r2, [sp, #4]
 800c65e:	f1c0 0320 	rsb	r3, r0, #32
 800c662:	fa02 f303 	lsl.w	r3, r2, r3
 800c666:	430b      	orrs	r3, r1
 800c668:	40c2      	lsrs	r2, r0
 800c66a:	6163      	str	r3, [r4, #20]
 800c66c:	9201      	str	r2, [sp, #4]
 800c66e:	9b01      	ldr	r3, [sp, #4]
 800c670:	61a3      	str	r3, [r4, #24]
 800c672:	2b00      	cmp	r3, #0
 800c674:	bf14      	ite	ne
 800c676:	2202      	movne	r2, #2
 800c678:	2201      	moveq	r2, #1
 800c67a:	6122      	str	r2, [r4, #16]
 800c67c:	b1d5      	cbz	r5, 800c6b4 <__d2b+0x98>
 800c67e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c682:	4405      	add	r5, r0
 800c684:	f8c9 5000 	str.w	r5, [r9]
 800c688:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c68c:	f8c8 0000 	str.w	r0, [r8]
 800c690:	4620      	mov	r0, r4
 800c692:	b003      	add	sp, #12
 800c694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c69c:	e7d5      	b.n	800c64a <__d2b+0x2e>
 800c69e:	6161      	str	r1, [r4, #20]
 800c6a0:	e7e5      	b.n	800c66e <__d2b+0x52>
 800c6a2:	a801      	add	r0, sp, #4
 800c6a4:	f7ff fd5a 	bl	800c15c <__lo0bits>
 800c6a8:	9b01      	ldr	r3, [sp, #4]
 800c6aa:	6163      	str	r3, [r4, #20]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	6122      	str	r2, [r4, #16]
 800c6b0:	3020      	adds	r0, #32
 800c6b2:	e7e3      	b.n	800c67c <__d2b+0x60>
 800c6b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c6bc:	f8c9 0000 	str.w	r0, [r9]
 800c6c0:	6918      	ldr	r0, [r3, #16]
 800c6c2:	f7ff fd2b 	bl	800c11c <__hi0bits>
 800c6c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6ca:	e7df      	b.n	800c68c <__d2b+0x70>
 800c6cc:	0800cf97 	.word	0x0800cf97
 800c6d0:	0800cfa8 	.word	0x0800cfa8

0800c6d4 <_calloc_r>:
 800c6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6d6:	fba1 2402 	umull	r2, r4, r1, r2
 800c6da:	b94c      	cbnz	r4, 800c6f0 <_calloc_r+0x1c>
 800c6dc:	4611      	mov	r1, r2
 800c6de:	9201      	str	r2, [sp, #4]
 800c6e0:	f7fd ff4e 	bl	800a580 <_malloc_r>
 800c6e4:	9a01      	ldr	r2, [sp, #4]
 800c6e6:	4605      	mov	r5, r0
 800c6e8:	b930      	cbnz	r0, 800c6f8 <_calloc_r+0x24>
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	b003      	add	sp, #12
 800c6ee:	bd30      	pop	{r4, r5, pc}
 800c6f0:	220c      	movs	r2, #12
 800c6f2:	6002      	str	r2, [r0, #0]
 800c6f4:	2500      	movs	r5, #0
 800c6f6:	e7f8      	b.n	800c6ea <_calloc_r+0x16>
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	f7fd ff18 	bl	800a52e <memset>
 800c6fe:	e7f4      	b.n	800c6ea <_calloc_r+0x16>

0800c700 <_free_r>:
 800c700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c702:	2900      	cmp	r1, #0
 800c704:	d044      	beq.n	800c790 <_free_r+0x90>
 800c706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c70a:	9001      	str	r0, [sp, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f1a1 0404 	sub.w	r4, r1, #4
 800c712:	bfb8      	it	lt
 800c714:	18e4      	addlt	r4, r4, r3
 800c716:	f7ff fc4d 	bl	800bfb4 <__malloc_lock>
 800c71a:	4a1e      	ldr	r2, [pc, #120]	; (800c794 <_free_r+0x94>)
 800c71c:	9801      	ldr	r0, [sp, #4]
 800c71e:	6813      	ldr	r3, [r2, #0]
 800c720:	b933      	cbnz	r3, 800c730 <_free_r+0x30>
 800c722:	6063      	str	r3, [r4, #4]
 800c724:	6014      	str	r4, [r2, #0]
 800c726:	b003      	add	sp, #12
 800c728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c72c:	f7ff bc48 	b.w	800bfc0 <__malloc_unlock>
 800c730:	42a3      	cmp	r3, r4
 800c732:	d908      	bls.n	800c746 <_free_r+0x46>
 800c734:	6825      	ldr	r5, [r4, #0]
 800c736:	1961      	adds	r1, r4, r5
 800c738:	428b      	cmp	r3, r1
 800c73a:	bf01      	itttt	eq
 800c73c:	6819      	ldreq	r1, [r3, #0]
 800c73e:	685b      	ldreq	r3, [r3, #4]
 800c740:	1949      	addeq	r1, r1, r5
 800c742:	6021      	streq	r1, [r4, #0]
 800c744:	e7ed      	b.n	800c722 <_free_r+0x22>
 800c746:	461a      	mov	r2, r3
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	b10b      	cbz	r3, 800c750 <_free_r+0x50>
 800c74c:	42a3      	cmp	r3, r4
 800c74e:	d9fa      	bls.n	800c746 <_free_r+0x46>
 800c750:	6811      	ldr	r1, [r2, #0]
 800c752:	1855      	adds	r5, r2, r1
 800c754:	42a5      	cmp	r5, r4
 800c756:	d10b      	bne.n	800c770 <_free_r+0x70>
 800c758:	6824      	ldr	r4, [r4, #0]
 800c75a:	4421      	add	r1, r4
 800c75c:	1854      	adds	r4, r2, r1
 800c75e:	42a3      	cmp	r3, r4
 800c760:	6011      	str	r1, [r2, #0]
 800c762:	d1e0      	bne.n	800c726 <_free_r+0x26>
 800c764:	681c      	ldr	r4, [r3, #0]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	6053      	str	r3, [r2, #4]
 800c76a:	4421      	add	r1, r4
 800c76c:	6011      	str	r1, [r2, #0]
 800c76e:	e7da      	b.n	800c726 <_free_r+0x26>
 800c770:	d902      	bls.n	800c778 <_free_r+0x78>
 800c772:	230c      	movs	r3, #12
 800c774:	6003      	str	r3, [r0, #0]
 800c776:	e7d6      	b.n	800c726 <_free_r+0x26>
 800c778:	6825      	ldr	r5, [r4, #0]
 800c77a:	1961      	adds	r1, r4, r5
 800c77c:	428b      	cmp	r3, r1
 800c77e:	bf04      	itt	eq
 800c780:	6819      	ldreq	r1, [r3, #0]
 800c782:	685b      	ldreq	r3, [r3, #4]
 800c784:	6063      	str	r3, [r4, #4]
 800c786:	bf04      	itt	eq
 800c788:	1949      	addeq	r1, r1, r5
 800c78a:	6021      	streq	r1, [r4, #0]
 800c78c:	6054      	str	r4, [r2, #4]
 800c78e:	e7ca      	b.n	800c726 <_free_r+0x26>
 800c790:	b003      	add	sp, #12
 800c792:	bd30      	pop	{r4, r5, pc}
 800c794:	200016ec 	.word	0x200016ec

0800c798 <_read_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4d07      	ldr	r5, [pc, #28]	; (800c7b8 <_read_r+0x20>)
 800c79c:	4604      	mov	r4, r0
 800c79e:	4608      	mov	r0, r1
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	602a      	str	r2, [r5, #0]
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	f7f5 f8a4 	bl	80018f4 <_read>
 800c7ac:	1c43      	adds	r3, r0, #1
 800c7ae:	d102      	bne.n	800c7b6 <_read_r+0x1e>
 800c7b0:	682b      	ldr	r3, [r5, #0]
 800c7b2:	b103      	cbz	r3, 800c7b6 <_read_r+0x1e>
 800c7b4:	6023      	str	r3, [r4, #0]
 800c7b6:	bd38      	pop	{r3, r4, r5, pc}
 800c7b8:	200016f4 	.word	0x200016f4

0800c7bc <__assert_func>:
 800c7bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7be:	4614      	mov	r4, r2
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	4b09      	ldr	r3, [pc, #36]	; (800c7e8 <__assert_func+0x2c>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4605      	mov	r5, r0
 800c7c8:	68d8      	ldr	r0, [r3, #12]
 800c7ca:	b14c      	cbz	r4, 800c7e0 <__assert_func+0x24>
 800c7cc:	4b07      	ldr	r3, [pc, #28]	; (800c7ec <__assert_func+0x30>)
 800c7ce:	9100      	str	r1, [sp, #0]
 800c7d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7d4:	4906      	ldr	r1, [pc, #24]	; (800c7f0 <__assert_func+0x34>)
 800c7d6:	462b      	mov	r3, r5
 800c7d8:	f000 f80e 	bl	800c7f8 <fiprintf>
 800c7dc:	f000 fa58 	bl	800cc90 <abort>
 800c7e0:	4b04      	ldr	r3, [pc, #16]	; (800c7f4 <__assert_func+0x38>)
 800c7e2:	461c      	mov	r4, r3
 800c7e4:	e7f3      	b.n	800c7ce <__assert_func+0x12>
 800c7e6:	bf00      	nop
 800c7e8:	20000010 	.word	0x20000010
 800c7ec:	0800d104 	.word	0x0800d104
 800c7f0:	0800d111 	.word	0x0800d111
 800c7f4:	0800d13f 	.word	0x0800d13f

0800c7f8 <fiprintf>:
 800c7f8:	b40e      	push	{r1, r2, r3}
 800c7fa:	b503      	push	{r0, r1, lr}
 800c7fc:	4601      	mov	r1, r0
 800c7fe:	ab03      	add	r3, sp, #12
 800c800:	4805      	ldr	r0, [pc, #20]	; (800c818 <fiprintf+0x20>)
 800c802:	f853 2b04 	ldr.w	r2, [r3], #4
 800c806:	6800      	ldr	r0, [r0, #0]
 800c808:	9301      	str	r3, [sp, #4]
 800c80a:	f000 f843 	bl	800c894 <_vfiprintf_r>
 800c80e:	b002      	add	sp, #8
 800c810:	f85d eb04 	ldr.w	lr, [sp], #4
 800c814:	b003      	add	sp, #12
 800c816:	4770      	bx	lr
 800c818:	20000010 	.word	0x20000010

0800c81c <__ascii_mbtowc>:
 800c81c:	b082      	sub	sp, #8
 800c81e:	b901      	cbnz	r1, 800c822 <__ascii_mbtowc+0x6>
 800c820:	a901      	add	r1, sp, #4
 800c822:	b142      	cbz	r2, 800c836 <__ascii_mbtowc+0x1a>
 800c824:	b14b      	cbz	r3, 800c83a <__ascii_mbtowc+0x1e>
 800c826:	7813      	ldrb	r3, [r2, #0]
 800c828:	600b      	str	r3, [r1, #0]
 800c82a:	7812      	ldrb	r2, [r2, #0]
 800c82c:	1e10      	subs	r0, r2, #0
 800c82e:	bf18      	it	ne
 800c830:	2001      	movne	r0, #1
 800c832:	b002      	add	sp, #8
 800c834:	4770      	bx	lr
 800c836:	4610      	mov	r0, r2
 800c838:	e7fb      	b.n	800c832 <__ascii_mbtowc+0x16>
 800c83a:	f06f 0001 	mvn.w	r0, #1
 800c83e:	e7f8      	b.n	800c832 <__ascii_mbtowc+0x16>

0800c840 <__sfputc_r>:
 800c840:	6893      	ldr	r3, [r2, #8]
 800c842:	3b01      	subs	r3, #1
 800c844:	2b00      	cmp	r3, #0
 800c846:	b410      	push	{r4}
 800c848:	6093      	str	r3, [r2, #8]
 800c84a:	da08      	bge.n	800c85e <__sfputc_r+0x1e>
 800c84c:	6994      	ldr	r4, [r2, #24]
 800c84e:	42a3      	cmp	r3, r4
 800c850:	db01      	blt.n	800c856 <__sfputc_r+0x16>
 800c852:	290a      	cmp	r1, #10
 800c854:	d103      	bne.n	800c85e <__sfputc_r+0x1e>
 800c856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c85a:	f000 b94b 	b.w	800caf4 <__swbuf_r>
 800c85e:	6813      	ldr	r3, [r2, #0]
 800c860:	1c58      	adds	r0, r3, #1
 800c862:	6010      	str	r0, [r2, #0]
 800c864:	7019      	strb	r1, [r3, #0]
 800c866:	4608      	mov	r0, r1
 800c868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <__sfputs_r>:
 800c86e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c870:	4606      	mov	r6, r0
 800c872:	460f      	mov	r7, r1
 800c874:	4614      	mov	r4, r2
 800c876:	18d5      	adds	r5, r2, r3
 800c878:	42ac      	cmp	r4, r5
 800c87a:	d101      	bne.n	800c880 <__sfputs_r+0x12>
 800c87c:	2000      	movs	r0, #0
 800c87e:	e007      	b.n	800c890 <__sfputs_r+0x22>
 800c880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c884:	463a      	mov	r2, r7
 800c886:	4630      	mov	r0, r6
 800c888:	f7ff ffda 	bl	800c840 <__sfputc_r>
 800c88c:	1c43      	adds	r3, r0, #1
 800c88e:	d1f3      	bne.n	800c878 <__sfputs_r+0xa>
 800c890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c894 <_vfiprintf_r>:
 800c894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c898:	460d      	mov	r5, r1
 800c89a:	b09d      	sub	sp, #116	; 0x74
 800c89c:	4614      	mov	r4, r2
 800c89e:	4698      	mov	r8, r3
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	b118      	cbz	r0, 800c8ac <_vfiprintf_r+0x18>
 800c8a4:	6983      	ldr	r3, [r0, #24]
 800c8a6:	b90b      	cbnz	r3, 800c8ac <_vfiprintf_r+0x18>
 800c8a8:	f7fd fd6e 	bl	800a388 <__sinit>
 800c8ac:	4b89      	ldr	r3, [pc, #548]	; (800cad4 <_vfiprintf_r+0x240>)
 800c8ae:	429d      	cmp	r5, r3
 800c8b0:	d11b      	bne.n	800c8ea <_vfiprintf_r+0x56>
 800c8b2:	6875      	ldr	r5, [r6, #4]
 800c8b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8b6:	07d9      	lsls	r1, r3, #31
 800c8b8:	d405      	bmi.n	800c8c6 <_vfiprintf_r+0x32>
 800c8ba:	89ab      	ldrh	r3, [r5, #12]
 800c8bc:	059a      	lsls	r2, r3, #22
 800c8be:	d402      	bmi.n	800c8c6 <_vfiprintf_r+0x32>
 800c8c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8c2:	f7fd fe24 	bl	800a50e <__retarget_lock_acquire_recursive>
 800c8c6:	89ab      	ldrh	r3, [r5, #12]
 800c8c8:	071b      	lsls	r3, r3, #28
 800c8ca:	d501      	bpl.n	800c8d0 <_vfiprintf_r+0x3c>
 800c8cc:	692b      	ldr	r3, [r5, #16]
 800c8ce:	b9eb      	cbnz	r3, 800c90c <_vfiprintf_r+0x78>
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	f000 f96e 	bl	800cbb4 <__swsetup_r>
 800c8d8:	b1c0      	cbz	r0, 800c90c <_vfiprintf_r+0x78>
 800c8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8dc:	07dc      	lsls	r4, r3, #31
 800c8de:	d50e      	bpl.n	800c8fe <_vfiprintf_r+0x6a>
 800c8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e4:	b01d      	add	sp, #116	; 0x74
 800c8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ea:	4b7b      	ldr	r3, [pc, #492]	; (800cad8 <_vfiprintf_r+0x244>)
 800c8ec:	429d      	cmp	r5, r3
 800c8ee:	d101      	bne.n	800c8f4 <_vfiprintf_r+0x60>
 800c8f0:	68b5      	ldr	r5, [r6, #8]
 800c8f2:	e7df      	b.n	800c8b4 <_vfiprintf_r+0x20>
 800c8f4:	4b79      	ldr	r3, [pc, #484]	; (800cadc <_vfiprintf_r+0x248>)
 800c8f6:	429d      	cmp	r5, r3
 800c8f8:	bf08      	it	eq
 800c8fa:	68f5      	ldreq	r5, [r6, #12]
 800c8fc:	e7da      	b.n	800c8b4 <_vfiprintf_r+0x20>
 800c8fe:	89ab      	ldrh	r3, [r5, #12]
 800c900:	0598      	lsls	r0, r3, #22
 800c902:	d4ed      	bmi.n	800c8e0 <_vfiprintf_r+0x4c>
 800c904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c906:	f7fd fe03 	bl	800a510 <__retarget_lock_release_recursive>
 800c90a:	e7e9      	b.n	800c8e0 <_vfiprintf_r+0x4c>
 800c90c:	2300      	movs	r3, #0
 800c90e:	9309      	str	r3, [sp, #36]	; 0x24
 800c910:	2320      	movs	r3, #32
 800c912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c916:	f8cd 800c 	str.w	r8, [sp, #12]
 800c91a:	2330      	movs	r3, #48	; 0x30
 800c91c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cae0 <_vfiprintf_r+0x24c>
 800c920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c924:	f04f 0901 	mov.w	r9, #1
 800c928:	4623      	mov	r3, r4
 800c92a:	469a      	mov	sl, r3
 800c92c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c930:	b10a      	cbz	r2, 800c936 <_vfiprintf_r+0xa2>
 800c932:	2a25      	cmp	r2, #37	; 0x25
 800c934:	d1f9      	bne.n	800c92a <_vfiprintf_r+0x96>
 800c936:	ebba 0b04 	subs.w	fp, sl, r4
 800c93a:	d00b      	beq.n	800c954 <_vfiprintf_r+0xc0>
 800c93c:	465b      	mov	r3, fp
 800c93e:	4622      	mov	r2, r4
 800c940:	4629      	mov	r1, r5
 800c942:	4630      	mov	r0, r6
 800c944:	f7ff ff93 	bl	800c86e <__sfputs_r>
 800c948:	3001      	adds	r0, #1
 800c94a:	f000 80aa 	beq.w	800caa2 <_vfiprintf_r+0x20e>
 800c94e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c950:	445a      	add	r2, fp
 800c952:	9209      	str	r2, [sp, #36]	; 0x24
 800c954:	f89a 3000 	ldrb.w	r3, [sl]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f000 80a2 	beq.w	800caa2 <_vfiprintf_r+0x20e>
 800c95e:	2300      	movs	r3, #0
 800c960:	f04f 32ff 	mov.w	r2, #4294967295
 800c964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c968:	f10a 0a01 	add.w	sl, sl, #1
 800c96c:	9304      	str	r3, [sp, #16]
 800c96e:	9307      	str	r3, [sp, #28]
 800c970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c974:	931a      	str	r3, [sp, #104]	; 0x68
 800c976:	4654      	mov	r4, sl
 800c978:	2205      	movs	r2, #5
 800c97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c97e:	4858      	ldr	r0, [pc, #352]	; (800cae0 <_vfiprintf_r+0x24c>)
 800c980:	f7f3 fc4e 	bl	8000220 <memchr>
 800c984:	9a04      	ldr	r2, [sp, #16]
 800c986:	b9d8      	cbnz	r0, 800c9c0 <_vfiprintf_r+0x12c>
 800c988:	06d1      	lsls	r1, r2, #27
 800c98a:	bf44      	itt	mi
 800c98c:	2320      	movmi	r3, #32
 800c98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c992:	0713      	lsls	r3, r2, #28
 800c994:	bf44      	itt	mi
 800c996:	232b      	movmi	r3, #43	; 0x2b
 800c998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c99c:	f89a 3000 	ldrb.w	r3, [sl]
 800c9a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c9a2:	d015      	beq.n	800c9d0 <_vfiprintf_r+0x13c>
 800c9a4:	9a07      	ldr	r2, [sp, #28]
 800c9a6:	4654      	mov	r4, sl
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	f04f 0c0a 	mov.w	ip, #10
 800c9ae:	4621      	mov	r1, r4
 800c9b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9b4:	3b30      	subs	r3, #48	; 0x30
 800c9b6:	2b09      	cmp	r3, #9
 800c9b8:	d94e      	bls.n	800ca58 <_vfiprintf_r+0x1c4>
 800c9ba:	b1b0      	cbz	r0, 800c9ea <_vfiprintf_r+0x156>
 800c9bc:	9207      	str	r2, [sp, #28]
 800c9be:	e014      	b.n	800c9ea <_vfiprintf_r+0x156>
 800c9c0:	eba0 0308 	sub.w	r3, r0, r8
 800c9c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	9304      	str	r3, [sp, #16]
 800c9cc:	46a2      	mov	sl, r4
 800c9ce:	e7d2      	b.n	800c976 <_vfiprintf_r+0xe2>
 800c9d0:	9b03      	ldr	r3, [sp, #12]
 800c9d2:	1d19      	adds	r1, r3, #4
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	9103      	str	r1, [sp, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	bfbb      	ittet	lt
 800c9dc:	425b      	neglt	r3, r3
 800c9de:	f042 0202 	orrlt.w	r2, r2, #2
 800c9e2:	9307      	strge	r3, [sp, #28]
 800c9e4:	9307      	strlt	r3, [sp, #28]
 800c9e6:	bfb8      	it	lt
 800c9e8:	9204      	strlt	r2, [sp, #16]
 800c9ea:	7823      	ldrb	r3, [r4, #0]
 800c9ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c9ee:	d10c      	bne.n	800ca0a <_vfiprintf_r+0x176>
 800c9f0:	7863      	ldrb	r3, [r4, #1]
 800c9f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f4:	d135      	bne.n	800ca62 <_vfiprintf_r+0x1ce>
 800c9f6:	9b03      	ldr	r3, [sp, #12]
 800c9f8:	1d1a      	adds	r2, r3, #4
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	9203      	str	r2, [sp, #12]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	bfb8      	it	lt
 800ca02:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca06:	3402      	adds	r4, #2
 800ca08:	9305      	str	r3, [sp, #20]
 800ca0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800caf0 <_vfiprintf_r+0x25c>
 800ca0e:	7821      	ldrb	r1, [r4, #0]
 800ca10:	2203      	movs	r2, #3
 800ca12:	4650      	mov	r0, sl
 800ca14:	f7f3 fc04 	bl	8000220 <memchr>
 800ca18:	b140      	cbz	r0, 800ca2c <_vfiprintf_r+0x198>
 800ca1a:	2340      	movs	r3, #64	; 0x40
 800ca1c:	eba0 000a 	sub.w	r0, r0, sl
 800ca20:	fa03 f000 	lsl.w	r0, r3, r0
 800ca24:	9b04      	ldr	r3, [sp, #16]
 800ca26:	4303      	orrs	r3, r0
 800ca28:	3401      	adds	r4, #1
 800ca2a:	9304      	str	r3, [sp, #16]
 800ca2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca30:	482c      	ldr	r0, [pc, #176]	; (800cae4 <_vfiprintf_r+0x250>)
 800ca32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca36:	2206      	movs	r2, #6
 800ca38:	f7f3 fbf2 	bl	8000220 <memchr>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d03f      	beq.n	800cac0 <_vfiprintf_r+0x22c>
 800ca40:	4b29      	ldr	r3, [pc, #164]	; (800cae8 <_vfiprintf_r+0x254>)
 800ca42:	bb1b      	cbnz	r3, 800ca8c <_vfiprintf_r+0x1f8>
 800ca44:	9b03      	ldr	r3, [sp, #12]
 800ca46:	3307      	adds	r3, #7
 800ca48:	f023 0307 	bic.w	r3, r3, #7
 800ca4c:	3308      	adds	r3, #8
 800ca4e:	9303      	str	r3, [sp, #12]
 800ca50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca52:	443b      	add	r3, r7
 800ca54:	9309      	str	r3, [sp, #36]	; 0x24
 800ca56:	e767      	b.n	800c928 <_vfiprintf_r+0x94>
 800ca58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	2001      	movs	r0, #1
 800ca60:	e7a5      	b.n	800c9ae <_vfiprintf_r+0x11a>
 800ca62:	2300      	movs	r3, #0
 800ca64:	3401      	adds	r4, #1
 800ca66:	9305      	str	r3, [sp, #20]
 800ca68:	4619      	mov	r1, r3
 800ca6a:	f04f 0c0a 	mov.w	ip, #10
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca74:	3a30      	subs	r2, #48	; 0x30
 800ca76:	2a09      	cmp	r2, #9
 800ca78:	d903      	bls.n	800ca82 <_vfiprintf_r+0x1ee>
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d0c5      	beq.n	800ca0a <_vfiprintf_r+0x176>
 800ca7e:	9105      	str	r1, [sp, #20]
 800ca80:	e7c3      	b.n	800ca0a <_vfiprintf_r+0x176>
 800ca82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca86:	4604      	mov	r4, r0
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e7f0      	b.n	800ca6e <_vfiprintf_r+0x1da>
 800ca8c:	ab03      	add	r3, sp, #12
 800ca8e:	9300      	str	r3, [sp, #0]
 800ca90:	462a      	mov	r2, r5
 800ca92:	4b16      	ldr	r3, [pc, #88]	; (800caec <_vfiprintf_r+0x258>)
 800ca94:	a904      	add	r1, sp, #16
 800ca96:	4630      	mov	r0, r6
 800ca98:	f7fd fe86 	bl	800a7a8 <_printf_float>
 800ca9c:	4607      	mov	r7, r0
 800ca9e:	1c78      	adds	r0, r7, #1
 800caa0:	d1d6      	bne.n	800ca50 <_vfiprintf_r+0x1bc>
 800caa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caa4:	07d9      	lsls	r1, r3, #31
 800caa6:	d405      	bmi.n	800cab4 <_vfiprintf_r+0x220>
 800caa8:	89ab      	ldrh	r3, [r5, #12]
 800caaa:	059a      	lsls	r2, r3, #22
 800caac:	d402      	bmi.n	800cab4 <_vfiprintf_r+0x220>
 800caae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cab0:	f7fd fd2e 	bl	800a510 <__retarget_lock_release_recursive>
 800cab4:	89ab      	ldrh	r3, [r5, #12]
 800cab6:	065b      	lsls	r3, r3, #25
 800cab8:	f53f af12 	bmi.w	800c8e0 <_vfiprintf_r+0x4c>
 800cabc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cabe:	e711      	b.n	800c8e4 <_vfiprintf_r+0x50>
 800cac0:	ab03      	add	r3, sp, #12
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	462a      	mov	r2, r5
 800cac6:	4b09      	ldr	r3, [pc, #36]	; (800caec <_vfiprintf_r+0x258>)
 800cac8:	a904      	add	r1, sp, #16
 800caca:	4630      	mov	r0, r6
 800cacc:	f7fe f910 	bl	800acf0 <_printf_i>
 800cad0:	e7e4      	b.n	800ca9c <_vfiprintf_r+0x208>
 800cad2:	bf00      	nop
 800cad4:	0800cea0 	.word	0x0800cea0
 800cad8:	0800cec0 	.word	0x0800cec0
 800cadc:	0800ce80 	.word	0x0800ce80
 800cae0:	0800d14a 	.word	0x0800d14a
 800cae4:	0800d154 	.word	0x0800d154
 800cae8:	0800a7a9 	.word	0x0800a7a9
 800caec:	0800c86f 	.word	0x0800c86f
 800caf0:	0800d150 	.word	0x0800d150

0800caf4 <__swbuf_r>:
 800caf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf6:	460e      	mov	r6, r1
 800caf8:	4614      	mov	r4, r2
 800cafa:	4605      	mov	r5, r0
 800cafc:	b118      	cbz	r0, 800cb06 <__swbuf_r+0x12>
 800cafe:	6983      	ldr	r3, [r0, #24]
 800cb00:	b90b      	cbnz	r3, 800cb06 <__swbuf_r+0x12>
 800cb02:	f7fd fc41 	bl	800a388 <__sinit>
 800cb06:	4b21      	ldr	r3, [pc, #132]	; (800cb8c <__swbuf_r+0x98>)
 800cb08:	429c      	cmp	r4, r3
 800cb0a:	d12b      	bne.n	800cb64 <__swbuf_r+0x70>
 800cb0c:	686c      	ldr	r4, [r5, #4]
 800cb0e:	69a3      	ldr	r3, [r4, #24]
 800cb10:	60a3      	str	r3, [r4, #8]
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	071a      	lsls	r2, r3, #28
 800cb16:	d52f      	bpl.n	800cb78 <__swbuf_r+0x84>
 800cb18:	6923      	ldr	r3, [r4, #16]
 800cb1a:	b36b      	cbz	r3, 800cb78 <__swbuf_r+0x84>
 800cb1c:	6923      	ldr	r3, [r4, #16]
 800cb1e:	6820      	ldr	r0, [r4, #0]
 800cb20:	1ac0      	subs	r0, r0, r3
 800cb22:	6963      	ldr	r3, [r4, #20]
 800cb24:	b2f6      	uxtb	r6, r6
 800cb26:	4283      	cmp	r3, r0
 800cb28:	4637      	mov	r7, r6
 800cb2a:	dc04      	bgt.n	800cb36 <__swbuf_r+0x42>
 800cb2c:	4621      	mov	r1, r4
 800cb2e:	4628      	mov	r0, r5
 800cb30:	f7ff f9e6 	bl	800bf00 <_fflush_r>
 800cb34:	bb30      	cbnz	r0, 800cb84 <__swbuf_r+0x90>
 800cb36:	68a3      	ldr	r3, [r4, #8]
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	60a3      	str	r3, [r4, #8]
 800cb3c:	6823      	ldr	r3, [r4, #0]
 800cb3e:	1c5a      	adds	r2, r3, #1
 800cb40:	6022      	str	r2, [r4, #0]
 800cb42:	701e      	strb	r6, [r3, #0]
 800cb44:	6963      	ldr	r3, [r4, #20]
 800cb46:	3001      	adds	r0, #1
 800cb48:	4283      	cmp	r3, r0
 800cb4a:	d004      	beq.n	800cb56 <__swbuf_r+0x62>
 800cb4c:	89a3      	ldrh	r3, [r4, #12]
 800cb4e:	07db      	lsls	r3, r3, #31
 800cb50:	d506      	bpl.n	800cb60 <__swbuf_r+0x6c>
 800cb52:	2e0a      	cmp	r6, #10
 800cb54:	d104      	bne.n	800cb60 <__swbuf_r+0x6c>
 800cb56:	4621      	mov	r1, r4
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f7ff f9d1 	bl	800bf00 <_fflush_r>
 800cb5e:	b988      	cbnz	r0, 800cb84 <__swbuf_r+0x90>
 800cb60:	4638      	mov	r0, r7
 800cb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb64:	4b0a      	ldr	r3, [pc, #40]	; (800cb90 <__swbuf_r+0x9c>)
 800cb66:	429c      	cmp	r4, r3
 800cb68:	d101      	bne.n	800cb6e <__swbuf_r+0x7a>
 800cb6a:	68ac      	ldr	r4, [r5, #8]
 800cb6c:	e7cf      	b.n	800cb0e <__swbuf_r+0x1a>
 800cb6e:	4b09      	ldr	r3, [pc, #36]	; (800cb94 <__swbuf_r+0xa0>)
 800cb70:	429c      	cmp	r4, r3
 800cb72:	bf08      	it	eq
 800cb74:	68ec      	ldreq	r4, [r5, #12]
 800cb76:	e7ca      	b.n	800cb0e <__swbuf_r+0x1a>
 800cb78:	4621      	mov	r1, r4
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	f000 f81a 	bl	800cbb4 <__swsetup_r>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d0cb      	beq.n	800cb1c <__swbuf_r+0x28>
 800cb84:	f04f 37ff 	mov.w	r7, #4294967295
 800cb88:	e7ea      	b.n	800cb60 <__swbuf_r+0x6c>
 800cb8a:	bf00      	nop
 800cb8c:	0800cea0 	.word	0x0800cea0
 800cb90:	0800cec0 	.word	0x0800cec0
 800cb94:	0800ce80 	.word	0x0800ce80

0800cb98 <__ascii_wctomb>:
 800cb98:	b149      	cbz	r1, 800cbae <__ascii_wctomb+0x16>
 800cb9a:	2aff      	cmp	r2, #255	; 0xff
 800cb9c:	bf85      	ittet	hi
 800cb9e:	238a      	movhi	r3, #138	; 0x8a
 800cba0:	6003      	strhi	r3, [r0, #0]
 800cba2:	700a      	strbls	r2, [r1, #0]
 800cba4:	f04f 30ff 	movhi.w	r0, #4294967295
 800cba8:	bf98      	it	ls
 800cbaa:	2001      	movls	r0, #1
 800cbac:	4770      	bx	lr
 800cbae:	4608      	mov	r0, r1
 800cbb0:	4770      	bx	lr
	...

0800cbb4 <__swsetup_r>:
 800cbb4:	4b32      	ldr	r3, [pc, #200]	; (800cc80 <__swsetup_r+0xcc>)
 800cbb6:	b570      	push	{r4, r5, r6, lr}
 800cbb8:	681d      	ldr	r5, [r3, #0]
 800cbba:	4606      	mov	r6, r0
 800cbbc:	460c      	mov	r4, r1
 800cbbe:	b125      	cbz	r5, 800cbca <__swsetup_r+0x16>
 800cbc0:	69ab      	ldr	r3, [r5, #24]
 800cbc2:	b913      	cbnz	r3, 800cbca <__swsetup_r+0x16>
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	f7fd fbdf 	bl	800a388 <__sinit>
 800cbca:	4b2e      	ldr	r3, [pc, #184]	; (800cc84 <__swsetup_r+0xd0>)
 800cbcc:	429c      	cmp	r4, r3
 800cbce:	d10f      	bne.n	800cbf0 <__swsetup_r+0x3c>
 800cbd0:	686c      	ldr	r4, [r5, #4]
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbd8:	0719      	lsls	r1, r3, #28
 800cbda:	d42c      	bmi.n	800cc36 <__swsetup_r+0x82>
 800cbdc:	06dd      	lsls	r5, r3, #27
 800cbde:	d411      	bmi.n	800cc04 <__swsetup_r+0x50>
 800cbe0:	2309      	movs	r3, #9
 800cbe2:	6033      	str	r3, [r6, #0]
 800cbe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbe8:	81a3      	strh	r3, [r4, #12]
 800cbea:	f04f 30ff 	mov.w	r0, #4294967295
 800cbee:	e03e      	b.n	800cc6e <__swsetup_r+0xba>
 800cbf0:	4b25      	ldr	r3, [pc, #148]	; (800cc88 <__swsetup_r+0xd4>)
 800cbf2:	429c      	cmp	r4, r3
 800cbf4:	d101      	bne.n	800cbfa <__swsetup_r+0x46>
 800cbf6:	68ac      	ldr	r4, [r5, #8]
 800cbf8:	e7eb      	b.n	800cbd2 <__swsetup_r+0x1e>
 800cbfa:	4b24      	ldr	r3, [pc, #144]	; (800cc8c <__swsetup_r+0xd8>)
 800cbfc:	429c      	cmp	r4, r3
 800cbfe:	bf08      	it	eq
 800cc00:	68ec      	ldreq	r4, [r5, #12]
 800cc02:	e7e6      	b.n	800cbd2 <__swsetup_r+0x1e>
 800cc04:	0758      	lsls	r0, r3, #29
 800cc06:	d512      	bpl.n	800cc2e <__swsetup_r+0x7a>
 800cc08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc0a:	b141      	cbz	r1, 800cc1e <__swsetup_r+0x6a>
 800cc0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc10:	4299      	cmp	r1, r3
 800cc12:	d002      	beq.n	800cc1a <__swsetup_r+0x66>
 800cc14:	4630      	mov	r0, r6
 800cc16:	f7ff fd73 	bl	800c700 <_free_r>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	6363      	str	r3, [r4, #52]	; 0x34
 800cc1e:	89a3      	ldrh	r3, [r4, #12]
 800cc20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc24:	81a3      	strh	r3, [r4, #12]
 800cc26:	2300      	movs	r3, #0
 800cc28:	6063      	str	r3, [r4, #4]
 800cc2a:	6923      	ldr	r3, [r4, #16]
 800cc2c:	6023      	str	r3, [r4, #0]
 800cc2e:	89a3      	ldrh	r3, [r4, #12]
 800cc30:	f043 0308 	orr.w	r3, r3, #8
 800cc34:	81a3      	strh	r3, [r4, #12]
 800cc36:	6923      	ldr	r3, [r4, #16]
 800cc38:	b94b      	cbnz	r3, 800cc4e <__swsetup_r+0x9a>
 800cc3a:	89a3      	ldrh	r3, [r4, #12]
 800cc3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc44:	d003      	beq.n	800cc4e <__swsetup_r+0x9a>
 800cc46:	4621      	mov	r1, r4
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f000 f84d 	bl	800cce8 <__smakebuf_r>
 800cc4e:	89a0      	ldrh	r0, [r4, #12]
 800cc50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc54:	f010 0301 	ands.w	r3, r0, #1
 800cc58:	d00a      	beq.n	800cc70 <__swsetup_r+0xbc>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	60a3      	str	r3, [r4, #8]
 800cc5e:	6963      	ldr	r3, [r4, #20]
 800cc60:	425b      	negs	r3, r3
 800cc62:	61a3      	str	r3, [r4, #24]
 800cc64:	6923      	ldr	r3, [r4, #16]
 800cc66:	b943      	cbnz	r3, 800cc7a <__swsetup_r+0xc6>
 800cc68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc6c:	d1ba      	bne.n	800cbe4 <__swsetup_r+0x30>
 800cc6e:	bd70      	pop	{r4, r5, r6, pc}
 800cc70:	0781      	lsls	r1, r0, #30
 800cc72:	bf58      	it	pl
 800cc74:	6963      	ldrpl	r3, [r4, #20]
 800cc76:	60a3      	str	r3, [r4, #8]
 800cc78:	e7f4      	b.n	800cc64 <__swsetup_r+0xb0>
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	e7f7      	b.n	800cc6e <__swsetup_r+0xba>
 800cc7e:	bf00      	nop
 800cc80:	20000010 	.word	0x20000010
 800cc84:	0800cea0 	.word	0x0800cea0
 800cc88:	0800cec0 	.word	0x0800cec0
 800cc8c:	0800ce80 	.word	0x0800ce80

0800cc90 <abort>:
 800cc90:	b508      	push	{r3, lr}
 800cc92:	2006      	movs	r0, #6
 800cc94:	f000 f890 	bl	800cdb8 <raise>
 800cc98:	2001      	movs	r0, #1
 800cc9a:	f7f4 fe21 	bl	80018e0 <_exit>

0800cc9e <__swhatbuf_r>:
 800cc9e:	b570      	push	{r4, r5, r6, lr}
 800cca0:	460e      	mov	r6, r1
 800cca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cca6:	2900      	cmp	r1, #0
 800cca8:	b096      	sub	sp, #88	; 0x58
 800ccaa:	4614      	mov	r4, r2
 800ccac:	461d      	mov	r5, r3
 800ccae:	da08      	bge.n	800ccc2 <__swhatbuf_r+0x24>
 800ccb0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	602a      	str	r2, [r5, #0]
 800ccb8:	061a      	lsls	r2, r3, #24
 800ccba:	d410      	bmi.n	800ccde <__swhatbuf_r+0x40>
 800ccbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccc0:	e00e      	b.n	800cce0 <__swhatbuf_r+0x42>
 800ccc2:	466a      	mov	r2, sp
 800ccc4:	f000 f894 	bl	800cdf0 <_fstat_r>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	dbf1      	blt.n	800ccb0 <__swhatbuf_r+0x12>
 800cccc:	9a01      	ldr	r2, [sp, #4]
 800ccce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ccd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccd6:	425a      	negs	r2, r3
 800ccd8:	415a      	adcs	r2, r3
 800ccda:	602a      	str	r2, [r5, #0]
 800ccdc:	e7ee      	b.n	800ccbc <__swhatbuf_r+0x1e>
 800ccde:	2340      	movs	r3, #64	; 0x40
 800cce0:	2000      	movs	r0, #0
 800cce2:	6023      	str	r3, [r4, #0]
 800cce4:	b016      	add	sp, #88	; 0x58
 800cce6:	bd70      	pop	{r4, r5, r6, pc}

0800cce8 <__smakebuf_r>:
 800cce8:	898b      	ldrh	r3, [r1, #12]
 800ccea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccec:	079d      	lsls	r5, r3, #30
 800ccee:	4606      	mov	r6, r0
 800ccf0:	460c      	mov	r4, r1
 800ccf2:	d507      	bpl.n	800cd04 <__smakebuf_r+0x1c>
 800ccf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccf8:	6023      	str	r3, [r4, #0]
 800ccfa:	6123      	str	r3, [r4, #16]
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	6163      	str	r3, [r4, #20]
 800cd00:	b002      	add	sp, #8
 800cd02:	bd70      	pop	{r4, r5, r6, pc}
 800cd04:	ab01      	add	r3, sp, #4
 800cd06:	466a      	mov	r2, sp
 800cd08:	f7ff ffc9 	bl	800cc9e <__swhatbuf_r>
 800cd0c:	9900      	ldr	r1, [sp, #0]
 800cd0e:	4605      	mov	r5, r0
 800cd10:	4630      	mov	r0, r6
 800cd12:	f7fd fc35 	bl	800a580 <_malloc_r>
 800cd16:	b948      	cbnz	r0, 800cd2c <__smakebuf_r+0x44>
 800cd18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd1c:	059a      	lsls	r2, r3, #22
 800cd1e:	d4ef      	bmi.n	800cd00 <__smakebuf_r+0x18>
 800cd20:	f023 0303 	bic.w	r3, r3, #3
 800cd24:	f043 0302 	orr.w	r3, r3, #2
 800cd28:	81a3      	strh	r3, [r4, #12]
 800cd2a:	e7e3      	b.n	800ccf4 <__smakebuf_r+0xc>
 800cd2c:	4b0d      	ldr	r3, [pc, #52]	; (800cd64 <__smakebuf_r+0x7c>)
 800cd2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd30:	89a3      	ldrh	r3, [r4, #12]
 800cd32:	6020      	str	r0, [r4, #0]
 800cd34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd38:	81a3      	strh	r3, [r4, #12]
 800cd3a:	9b00      	ldr	r3, [sp, #0]
 800cd3c:	6163      	str	r3, [r4, #20]
 800cd3e:	9b01      	ldr	r3, [sp, #4]
 800cd40:	6120      	str	r0, [r4, #16]
 800cd42:	b15b      	cbz	r3, 800cd5c <__smakebuf_r+0x74>
 800cd44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd48:	4630      	mov	r0, r6
 800cd4a:	f000 f863 	bl	800ce14 <_isatty_r>
 800cd4e:	b128      	cbz	r0, 800cd5c <__smakebuf_r+0x74>
 800cd50:	89a3      	ldrh	r3, [r4, #12]
 800cd52:	f023 0303 	bic.w	r3, r3, #3
 800cd56:	f043 0301 	orr.w	r3, r3, #1
 800cd5a:	81a3      	strh	r3, [r4, #12]
 800cd5c:	89a0      	ldrh	r0, [r4, #12]
 800cd5e:	4305      	orrs	r5, r0
 800cd60:	81a5      	strh	r5, [r4, #12]
 800cd62:	e7cd      	b.n	800cd00 <__smakebuf_r+0x18>
 800cd64:	0800a321 	.word	0x0800a321

0800cd68 <_raise_r>:
 800cd68:	291f      	cmp	r1, #31
 800cd6a:	b538      	push	{r3, r4, r5, lr}
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	460d      	mov	r5, r1
 800cd70:	d904      	bls.n	800cd7c <_raise_r+0x14>
 800cd72:	2316      	movs	r3, #22
 800cd74:	6003      	str	r3, [r0, #0]
 800cd76:	f04f 30ff 	mov.w	r0, #4294967295
 800cd7a:	bd38      	pop	{r3, r4, r5, pc}
 800cd7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd7e:	b112      	cbz	r2, 800cd86 <_raise_r+0x1e>
 800cd80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd84:	b94b      	cbnz	r3, 800cd9a <_raise_r+0x32>
 800cd86:	4620      	mov	r0, r4
 800cd88:	f000 f830 	bl	800cdec <_getpid_r>
 800cd8c:	462a      	mov	r2, r5
 800cd8e:	4601      	mov	r1, r0
 800cd90:	4620      	mov	r0, r4
 800cd92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd96:	f000 b817 	b.w	800cdc8 <_kill_r>
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d00a      	beq.n	800cdb4 <_raise_r+0x4c>
 800cd9e:	1c59      	adds	r1, r3, #1
 800cda0:	d103      	bne.n	800cdaa <_raise_r+0x42>
 800cda2:	2316      	movs	r3, #22
 800cda4:	6003      	str	r3, [r0, #0]
 800cda6:	2001      	movs	r0, #1
 800cda8:	e7e7      	b.n	800cd7a <_raise_r+0x12>
 800cdaa:	2400      	movs	r4, #0
 800cdac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	4798      	blx	r3
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	e7e0      	b.n	800cd7a <_raise_r+0x12>

0800cdb8 <raise>:
 800cdb8:	4b02      	ldr	r3, [pc, #8]	; (800cdc4 <raise+0xc>)
 800cdba:	4601      	mov	r1, r0
 800cdbc:	6818      	ldr	r0, [r3, #0]
 800cdbe:	f7ff bfd3 	b.w	800cd68 <_raise_r>
 800cdc2:	bf00      	nop
 800cdc4:	20000010 	.word	0x20000010

0800cdc8 <_kill_r>:
 800cdc8:	b538      	push	{r3, r4, r5, lr}
 800cdca:	4d07      	ldr	r5, [pc, #28]	; (800cde8 <_kill_r+0x20>)
 800cdcc:	2300      	movs	r3, #0
 800cdce:	4604      	mov	r4, r0
 800cdd0:	4608      	mov	r0, r1
 800cdd2:	4611      	mov	r1, r2
 800cdd4:	602b      	str	r3, [r5, #0]
 800cdd6:	f7f4 fd73 	bl	80018c0 <_kill>
 800cdda:	1c43      	adds	r3, r0, #1
 800cddc:	d102      	bne.n	800cde4 <_kill_r+0x1c>
 800cdde:	682b      	ldr	r3, [r5, #0]
 800cde0:	b103      	cbz	r3, 800cde4 <_kill_r+0x1c>
 800cde2:	6023      	str	r3, [r4, #0]
 800cde4:	bd38      	pop	{r3, r4, r5, pc}
 800cde6:	bf00      	nop
 800cde8:	200016f4 	.word	0x200016f4

0800cdec <_getpid_r>:
 800cdec:	f7f4 bd60 	b.w	80018b0 <_getpid>

0800cdf0 <_fstat_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d07      	ldr	r5, [pc, #28]	; (800ce10 <_fstat_r+0x20>)
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	4608      	mov	r0, r1
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	602b      	str	r3, [r5, #0]
 800cdfe:	f7f4 fdbe 	bl	800197e <_fstat>
 800ce02:	1c43      	adds	r3, r0, #1
 800ce04:	d102      	bne.n	800ce0c <_fstat_r+0x1c>
 800ce06:	682b      	ldr	r3, [r5, #0]
 800ce08:	b103      	cbz	r3, 800ce0c <_fstat_r+0x1c>
 800ce0a:	6023      	str	r3, [r4, #0]
 800ce0c:	bd38      	pop	{r3, r4, r5, pc}
 800ce0e:	bf00      	nop
 800ce10:	200016f4 	.word	0x200016f4

0800ce14 <_isatty_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4d06      	ldr	r5, [pc, #24]	; (800ce30 <_isatty_r+0x1c>)
 800ce18:	2300      	movs	r3, #0
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	4608      	mov	r0, r1
 800ce1e:	602b      	str	r3, [r5, #0]
 800ce20:	f7f4 fdbd 	bl	800199e <_isatty>
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d102      	bne.n	800ce2e <_isatty_r+0x1a>
 800ce28:	682b      	ldr	r3, [r5, #0]
 800ce2a:	b103      	cbz	r3, 800ce2e <_isatty_r+0x1a>
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	200016f4 	.word	0x200016f4

0800ce34 <_init>:
 800ce34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce36:	bf00      	nop
 800ce38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce3a:	bc08      	pop	{r3}
 800ce3c:	469e      	mov	lr, r3
 800ce3e:	4770      	bx	lr

0800ce40 <_fini>:
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce42:	bf00      	nop
 800ce44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce46:	bc08      	pop	{r3}
 800ce48:	469e      	mov	lr, r3
 800ce4a:	4770      	bx	lr
