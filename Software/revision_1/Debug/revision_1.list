
revision_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008f68  08008f68  00018f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fc8  08008fc8  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fc8  08008fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fd0  08008fd0  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fd0  08008fd0  00018fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fd4  08008fd4  00018fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08008fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db0  2000010c  080090e4  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ebc  080090e4  00021ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3fa  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b7  00000000  00000000  0003a536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  0003f300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b59  00000000  00000000  000406c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcee  00000000  00000000  00067219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df7ef  00000000  00000000  00082f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001626f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000592c  00000000  00000000  00162748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008f50 	.word	0x08008f50

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08008f50 	.word	0x08008f50

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fca2 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f822 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f998 	bl	8000848 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000518:	f000 f90a 	bl	8000730 <MX_QUADSPI_Init>
  MX_USB_DEVICE_Init();
 800051c:	f007 ff82 	bl	8008424 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000520:	f000 f8d8 	bl	80006d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000524:	f000 f930 	bl	8000788 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000528:	f000 f882 	bl	8000630 <MX_ADC1_Init>
  MX_UART5_Init();
 800052c:	f000 f962 	bl	80007f4 <MX_UART5_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Buzzer ON
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2108      	movs	r1, #8
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <main+0x4c>)
 8000536:	f001 fa3b 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_Delay(0.5);
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fcfc 	bl	8000f38 <HAL_Delay>
	// Buzzer OFF
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2108      	movs	r1, #8
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <main+0x4c>)
 8000546:	f001 fa33 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_Delay(0.5);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fcf4 	bl	8000f38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000550:	e7ee      	b.n	8000530 <main+0x28>
 8000552:	bf00      	nop
 8000554:	40020000 	.word	0x40020000

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2234      	movs	r2, #52	; 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f008 fcea 	bl	8008f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <SystemClock_Config+0xd0>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a28      	ldr	r2, [pc, #160]	; (8000628 <SystemClock_Config+0xd0>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <SystemClock_Config+0xd0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000598:	2300      	movs	r3, #0
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd4>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005d0:	2348      	movs	r3, #72	; 0x48
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d8:	2303      	movs	r3, #3
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 fd41 	bl	800406c <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005f0:	f000 f9de 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f002 feb7 	bl	8003384 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800061c:	f000 f9c8 	bl	80009b0 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	463b      	mov	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <MX_ADC1_Init+0x9c>)
 8000646:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <MX_ADC1_Init+0xa0>)
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_ADC1_Init+0x98>)
 800067c:	2201      	movs	r2, #1
 800067e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_ADC1_Init+0x98>)
 800068a:	2201      	movs	r2, #1
 800068c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068e:	480e      	ldr	r0, [pc, #56]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000690:	f000 fc76 	bl	8000f80 <HAL_ADC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800069a:	f000 f989 	bl	80009b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800069e:	230f      	movs	r3, #15
 80006a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <MX_ADC1_Init+0x98>)
 80006b0:	f000 fcaa 	bl	8001008 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ba:	f000 f979 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000128 	.word	0x20000128
 80006cc:	40012000 	.word	0x40012000
 80006d0:	0f000001 	.word	0x0f000001

080006d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_I2C1_Init+0x50>)
 80006da:	4a13      	ldr	r2, [pc, #76]	; (8000728 <MX_I2C1_Init+0x54>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_I2C1_Init+0x50>)
 80006e0:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_I2C1_Init+0x58>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_I2C1_Init+0x50>)
 80006f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_I2C1_Init+0x50>)
 8000712:	f001 f967 	bl	80019e4 <HAL_I2C_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800071c:	f000 f948 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000170 	.word	0x20000170
 8000728:	40005400 	.word	0x40005400
 800072c:	000186a0 	.word	0x000186a0

08000730 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_QUADSPI_Init+0x50>)
 8000736:	4a13      	ldr	r2, [pc, #76]	; (8000784 <MX_QUADSPI_Init+0x54>)
 8000738:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_QUADSPI_Init+0x50>)
 800073c:	22ff      	movs	r2, #255	; 0xff
 800073e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_QUADSPI_Init+0x50>)
 8000742:	2201      	movs	r2, #1
 8000744:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_QUADSPI_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_QUADSPI_Init+0x50>)
 800074e:	2218      	movs	r2, #24
 8000750:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_QUADSPI_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_QUADSPI_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_QUADSPI_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_QUADSPI_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_QUADSPI_Init+0x50>)
 800076c:	f002 fd48 	bl	8003200 <HAL_QSPI_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000776:	f000 f91b 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200001c4 	.word	0x200001c4
 8000784:	a0001000 	.word	0xa0001000

08000788 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_SPI1_Init+0x64>)
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <MX_SPI1_Init+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_SPI1_Init+0x64>)
 8000794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_SPI1_Init+0x64>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_SPI1_Init+0x64>)
 80007d4:	220a      	movs	r2, #10
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_SPI1_Init+0x64>)
 80007da:	f003 fee5 	bl	80045a8 <HAL_SPI_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f8e4 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000210 	.word	0x20000210
 80007f0:	40013000 	.word	0x40013000

080007f4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_UART5_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_UART5_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_UART5_Init+0x4c>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_UART5_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_UART5_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_UART5_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_UART5_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_UART5_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_UART5_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_UART5_Init+0x4c>)
 800082c:	f003 ff45 	bl	80046ba <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f8bb 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000268 	.word	0x20000268
 8000844:	40005000 	.word	0x40005000

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b4f      	ldr	r3, [pc, #316]	; (80009a0 <MX_GPIO_Init+0x158>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a4e      	ldr	r2, [pc, #312]	; (80009a0 <MX_GPIO_Init+0x158>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b4c      	ldr	r3, [pc, #304]	; (80009a0 <MX_GPIO_Init+0x158>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b48      	ldr	r3, [pc, #288]	; (80009a0 <MX_GPIO_Init+0x158>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a47      	ldr	r2, [pc, #284]	; (80009a0 <MX_GPIO_Init+0x158>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b45      	ldr	r3, [pc, #276]	; (80009a0 <MX_GPIO_Init+0x158>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b41      	ldr	r3, [pc, #260]	; (80009a0 <MX_GPIO_Init+0x158>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a40      	ldr	r2, [pc, #256]	; (80009a0 <MX_GPIO_Init+0x158>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b3e      	ldr	r3, [pc, #248]	; (80009a0 <MX_GPIO_Init+0x158>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <MX_GPIO_Init+0x158>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a39      	ldr	r2, [pc, #228]	; (80009a0 <MX_GPIO_Init+0x158>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <MX_GPIO_Init+0x158>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <MX_GPIO_Init+0x158>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a32      	ldr	r2, [pc, #200]	; (80009a0 <MX_GPIO_Init+0x158>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <MX_GPIO_Init+0x158>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Radio_RX_Pin|Buzzer_Gate_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	210c      	movs	r1, #12
 80008ee:	482d      	ldr	r0, [pc, #180]	; (80009a4 <MX_GPIO_Init+0x15c>)
 80008f0:	f001 f85e 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Radio_Reset_Pin|Indicator_LED_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80008fa:	482b      	ldr	r0, [pc, #172]	; (80009a8 <MX_GPIO_Init+0x160>)
 80008fc:	f001 f858 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_Reset_GPIO_Port, GPS_Reset_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000906:	4829      	ldr	r0, [pc, #164]	; (80009ac <MX_GPIO_Init+0x164>)
 8000908:	f001 f852 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Acc_Int1_Pin Gyro_Int3_Pin Mag_Data_Ready_Pin */
  GPIO_InitStruct.Pin = Acc_Int1_Pin|Gyro_Int3_Pin|Mag_Data_Ready_Pin;
 800090c:	f44f 4341 	mov.w	r3, #49408	; 0xc100
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4822      	ldr	r0, [pc, #136]	; (80009ac <MX_GPIO_Init+0x164>)
 8000922:	f000 feb1 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pins : Radio_DIO1_Pin Radio_DIO0_Pin Radio_TX_Pin */
  GPIO_InitStruct.Pin = Radio_DIO1_Pin|Radio_DIO0_Pin|Radio_TX_Pin;
 8000926:	2313      	movs	r3, #19
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	481a      	ldr	r0, [pc, #104]	; (80009a4 <MX_GPIO_Init+0x15c>)
 800093a:	f000 fea5 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pins : Radio_RX_Pin Buzzer_Gate_Pin */
  GPIO_InitStruct.Pin = Radio_RX_Pin|Buzzer_Gate_Pin;
 800093e:	230c      	movs	r3, #12
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4813      	ldr	r0, [pc, #76]	; (80009a4 <MX_GPIO_Init+0x15c>)
 8000956:	f000 fe97 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pins : Radio_Reset_Pin Indicator_LED_Pin */
  GPIO_InitStruct.Pin = Radio_Reset_Pin|Indicator_LED_Pin;
 800095a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	480d      	ldr	r0, [pc, #52]	; (80009a8 <MX_GPIO_Init+0x160>)
 8000974:	f000 fe88 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_Reset_Pin */
  GPIO_InitStruct.Pin = GPS_Reset_Pin;
 8000978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_Reset_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_GPIO_Init+0x164>)
 8000992:	f000 fe79 	bl	8001688 <HAL_GPIO_Init>

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40020400 	.word	0x40020400
 80009ac:	40020800 	.word	0x40020800

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <HAL_ADC_MspInit+0x7c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d127      	bne.n	8000a7e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <HAL_ADC_MspInit+0x80>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <HAL_ADC_MspInit+0x80>)
 8000a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <HAL_ADC_MspInit+0x80>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_ADC_MspInit+0x80>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_ADC_MspInit+0x80>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_ADC_MspInit+0x80>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Radio_Enable_Pin;
 8000a66:	2330      	movs	r3, #48	; 0x30
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_ADC_MspInit+0x84>)
 8000a7a:	f000 fe05 	bl	8001688 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40012000 	.word	0x40012000
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020800 	.word	0x40020800

08000a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_I2C_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12c      	bne.n	8000b10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ad2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad8:	2312      	movs	r3, #18
 8000ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	480c      	ldr	r0, [pc, #48]	; (8000b20 <HAL_I2C_MspInit+0x8c>)
 8000af0:	f000 fdca 	bl	8001688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000afe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020400 	.word	0x40020400

08000b24 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a30      	ldr	r2, [pc, #192]	; (8000c04 <HAL_QSPI_MspInit+0xe0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d15a      	bne.n	8000bfc <HAL_QSPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <HAL_QSPI_MspInit+0xe4>)
 8000b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b4e:	4a2e      	ldr	r2, [pc, #184]	; (8000c08 <HAL_QSPI_MspInit+0xe4>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6393      	str	r3, [r2, #56]	; 0x38
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <HAL_QSPI_MspInit+0xe4>)
 8000b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <HAL_QSPI_MspInit+0xe4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <HAL_QSPI_MspInit+0xe4>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <HAL_QSPI_MspInit+0xe4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <HAL_QSPI_MspInit+0xe4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a20      	ldr	r2, [pc, #128]	; (8000c08 <HAL_QSPI_MspInit+0xe4>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <HAL_QSPI_MspInit+0xe4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = Flash_QUADSPI_CLK_Pin;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000baa:	2309      	movs	r3, #9
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Flash_QUADSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4815      	ldr	r0, [pc, #84]	; (8000c0c <HAL_QSPI_MspInit+0xe8>)
 8000bb6:	f000 fd67 	bl	8001688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_QUADSPI_BK1_IO0_Pin|Flash_QUADSPI_BK1_IO1_Pin;
 8000bba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000bcc:	2309      	movs	r3, #9
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480e      	ldr	r0, [pc, #56]	; (8000c10 <HAL_QSPI_MspInit+0xec>)
 8000bd8:	f000 fd56 	bl	8001688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_QUADSPI_BK1_NCS_Pin;
 8000bdc:	2340      	movs	r3, #64	; 0x40
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8000bec:	230a      	movs	r3, #10
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Flash_QUADSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_QSPI_MspInit+0xe8>)
 8000bf8:	f000 fd46 	bl	8001688 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3728      	adds	r7, #40	; 0x28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	a0001000 	.word	0xa0001000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020400 	.word	0x40020400
 8000c10:	40020800 	.word	0x40020800

08000c14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_SPI_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12b      	bne.n	8000c8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Radio_SPI1_SCK_Pin|Radio_SPI1_MISO_Pin|Radio_SPI1_MOSI_Pin;
 8000c6e:	23e0      	movs	r3, #224	; 0xe0
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c8a:	f000 fcfd 	bl	8001688 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	; 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40013000 	.word	0x40013000
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <HAL_UART_MspInit+0xc0>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d14a      	bne.n	8000d5c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <HAL_UART_MspInit+0xc4>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <HAL_UART_MspInit+0xc4>)
 8000cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <HAL_UART_MspInit+0xc4>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <HAL_UART_MspInit+0xc4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a1f      	ldr	r2, [pc, #124]	; (8000d68 <HAL_UART_MspInit+0xc4>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <HAL_UART_MspInit+0xc4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_UART_MspInit+0xc4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <HAL_UART_MspInit+0xc4>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_UART_MspInit+0xc4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_UART_TX_Pin;
 8000d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <HAL_UART_MspInit+0xc8>)
 8000d38:	f000 fca6 	bl	8001688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_UART_RX_Pin;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <HAL_UART_MspInit+0xcc>)
 8000d58:	f000 fc96 	bl	8001688 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40005000 	.word	0x40005000
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020c00 	.word	0x40020c00

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <NMI_Handler+0x4>

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc0:	f000 f89a 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <OTG_FS_IRQHandler+0x10>)
 8000dce:	f001 f8a4 	bl	8001f1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20001790 	.word	0x20001790

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e08:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e1c:	4c0b      	ldr	r4, [pc, #44]	; (8000e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2a:	f7ff ffd7 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f008 f863 	bl	8008ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fb69 	bl	8000508 <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000e44:	08008fd8 	.word	0x08008fd8
  ldr r2, =_sbss
 8000e48:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000e4c:	20001ebc 	.word	0x20001ebc

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <HAL_Init+0x40>)
 8000e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_Init+0x40>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_Init+0x40>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 fbc1 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	200f      	movs	r0, #15
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fd98 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023c00 	.word	0x40023c00

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fbd9 	bl	800166e <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 fba1 	bl	800161a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	200002ac 	.word	0x200002ac

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	200002ac 	.word	0x200002ac

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008

08000f80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e033      	b.n	8000ffe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d109      	bne.n	8000fb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff fd34 	bl	8000a0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d118      	bne.n	8000ff0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fc6:	f023 0302 	bic.w	r3, r3, #2
 8000fca:	f043 0202 	orr.w	r2, r3, #2
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f94a 	bl	800126c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f023 0303 	bic.w	r3, r3, #3
 8000fe6:	f043 0201 	orr.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	641a      	str	r2, [r3, #64]	; 0x40
 8000fee:	e001      	b.n	8000ff4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <HAL_ADC_ConfigChannel+0x1c>
 8001020:	2302      	movs	r3, #2
 8001022:	e113      	b.n	800124c <HAL_ADC_ConfigChannel+0x244>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b09      	cmp	r3, #9
 8001032:	d925      	bls.n	8001080 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68d9      	ldr	r1, [r3, #12]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	4613      	mov	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	3b1e      	subs	r3, #30
 800104a:	2207      	movs	r2, #7
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43da      	mvns	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	400a      	ands	r2, r1
 8001058:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68d9      	ldr	r1, [r3, #12]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	4603      	mov	r3, r0
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4403      	add	r3, r0
 8001072:	3b1e      	subs	r3, #30
 8001074:	409a      	lsls	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	e022      	b.n	80010c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6919      	ldr	r1, [r3, #16]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	2207      	movs	r2, #7
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	400a      	ands	r2, r1
 80010a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6919      	ldr	r1, [r3, #16]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	4603      	mov	r3, r0
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4403      	add	r3, r0
 80010bc:	409a      	lsls	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d824      	bhi.n	8001118 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	3b05      	subs	r3, #5
 80010e0:	221f      	movs	r2, #31
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	400a      	ands	r2, r1
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	3b05      	subs	r3, #5
 800110a:	fa00 f203 	lsl.w	r2, r0, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	635a      	str	r2, [r3, #52]	; 0x34
 8001116:	e04c      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b0c      	cmp	r3, #12
 800111e:	d824      	bhi.n	800116a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	3b23      	subs	r3, #35	; 0x23
 8001132:	221f      	movs	r2, #31
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43da      	mvns	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	400a      	ands	r2, r1
 8001140:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	3b23      	subs	r3, #35	; 0x23
 800115c:	fa00 f203 	lsl.w	r2, r0, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	631a      	str	r2, [r3, #48]	; 0x30
 8001168:	e023      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	3b41      	subs	r3, #65	; 0x41
 800117c:	221f      	movs	r2, #31
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	400a      	ands	r2, r1
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	4618      	mov	r0, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	3b41      	subs	r3, #65	; 0x41
 80011a6:	fa00 f203 	lsl.w	r2, r0, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <HAL_ADC_ConfigChannel+0x250>)
 80011b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a28      	ldr	r2, [pc, #160]	; (800125c <HAL_ADC_ConfigChannel+0x254>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d10f      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1d8>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b12      	cmp	r3, #18
 80011c6:	d10b      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <HAL_ADC_ConfigChannel+0x254>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d12b      	bne.n	8001242 <HAL_ADC_ConfigChannel+0x23a>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <HAL_ADC_ConfigChannel+0x258>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d003      	beq.n	80011fc <HAL_ADC_ConfigChannel+0x1f4>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b11      	cmp	r3, #17
 80011fa:	d122      	bne.n	8001242 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a11      	ldr	r2, [pc, #68]	; (8001260 <HAL_ADC_ConfigChannel+0x258>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d111      	bne.n	8001242 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_ADC_ConfigChannel+0x25c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a11      	ldr	r2, [pc, #68]	; (8001268 <HAL_ADC_ConfigChannel+0x260>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	0c9a      	lsrs	r2, r3, #18
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001234:	e002      	b.n	800123c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3b01      	subs	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f9      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40012300 	.word	0x40012300
 800125c:	40012000 	.word	0x40012000
 8001260:	10000012 	.word	0x10000012
 8001264:	20000000 	.word	0x20000000
 8001268:	431bde83 	.word	0x431bde83

0800126c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001274:	4b79      	ldr	r3, [pc, #484]	; (800145c <ADC_Init+0x1f0>)
 8001276:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	431a      	orrs	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6859      	ldr	r1, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	021a      	lsls	r2, r3, #8
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6899      	ldr	r1, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	4a58      	ldr	r2, [pc, #352]	; (8001460 <ADC_Init+0x1f4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d022      	beq.n	800134a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001312:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6899      	ldr	r1, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6899      	ldr	r1, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	e00f      	b.n	800136a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001368:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0202 	bic.w	r2, r2, #2
 8001378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6899      	ldr	r1, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7e1b      	ldrb	r3, [r3, #24]
 8001384:	005a      	lsls	r2, r3, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01b      	beq.n	80013d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6859      	ldr	r1, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	3b01      	subs	r3, #1
 80013c4:	035a      	lsls	r2, r3, #13
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	e007      	b.n	80013e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	051a      	lsls	r2, r3, #20
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6899      	ldr	r1, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001422:	025a      	lsls	r2, r3, #9
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800143a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6899      	ldr	r1, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	029a      	lsls	r2, r3, #10
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	609a      	str	r2, [r3, #8]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40012300 	.word	0x40012300
 8001460:	0f000001 	.word	0x0f000001

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <__NVIC_EnableIRQ+0x38>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff8e 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff29 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff3e 	bl	80014ac <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff8e 	bl	8001558 <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5d 	bl	8001504 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff31 	bl	80014c8 <__NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffa2 	bl	80015c0 <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	e165      	b.n	8001970 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016a4:	2201      	movs	r2, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	429a      	cmp	r2, r3
 80016be:	f040 8154 	bne.w	800196a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d005      	beq.n	80016da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d130      	bne.n	800173c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001710:	2201      	movs	r2, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 0201 	and.w	r2, r3, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b03      	cmp	r3, #3
 8001746:	d017      	beq.n	8001778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d123      	bne.n	80017cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	08da      	lsrs	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3208      	adds	r2, #8
 800178c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	220f      	movs	r2, #15
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	08da      	lsrs	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3208      	adds	r2, #8
 80017c6:	69b9      	ldr	r1, [r7, #24]
 80017c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0203 	and.w	r2, r3, #3
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80ae 	beq.w	800196a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b5d      	ldr	r3, [pc, #372]	; (8001988 <HAL_GPIO_Init+0x300>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a5c      	ldr	r2, [pc, #368]	; (8001988 <HAL_GPIO_Init+0x300>)
 8001818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b5a      	ldr	r3, [pc, #360]	; (8001988 <HAL_GPIO_Init+0x300>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800182a:	4a58      	ldr	r2, [pc, #352]	; (800198c <HAL_GPIO_Init+0x304>)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	220f      	movs	r2, #15
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4f      	ldr	r2, [pc, #316]	; (8001990 <HAL_GPIO_Init+0x308>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d025      	beq.n	80018a2 <HAL_GPIO_Init+0x21a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4e      	ldr	r2, [pc, #312]	; (8001994 <HAL_GPIO_Init+0x30c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d01f      	beq.n	800189e <HAL_GPIO_Init+0x216>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4d      	ldr	r2, [pc, #308]	; (8001998 <HAL_GPIO_Init+0x310>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d019      	beq.n	800189a <HAL_GPIO_Init+0x212>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4c      	ldr	r2, [pc, #304]	; (800199c <HAL_GPIO_Init+0x314>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_GPIO_Init+0x20e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <HAL_GPIO_Init+0x318>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00d      	beq.n	8001892 <HAL_GPIO_Init+0x20a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <HAL_GPIO_Init+0x31c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d007      	beq.n	800188e <HAL_GPIO_Init+0x206>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a49      	ldr	r2, [pc, #292]	; (80019a8 <HAL_GPIO_Init+0x320>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_GPIO_Init+0x202>
 8001886:	2306      	movs	r3, #6
 8001888:	e00c      	b.n	80018a4 <HAL_GPIO_Init+0x21c>
 800188a:	2307      	movs	r3, #7
 800188c:	e00a      	b.n	80018a4 <HAL_GPIO_Init+0x21c>
 800188e:	2305      	movs	r3, #5
 8001890:	e008      	b.n	80018a4 <HAL_GPIO_Init+0x21c>
 8001892:	2304      	movs	r3, #4
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x21c>
 8001896:	2303      	movs	r3, #3
 8001898:	e004      	b.n	80018a4 <HAL_GPIO_Init+0x21c>
 800189a:	2302      	movs	r3, #2
 800189c:	e002      	b.n	80018a4 <HAL_GPIO_Init+0x21c>
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_GPIO_Init+0x21c>
 80018a2:	2300      	movs	r3, #0
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	f002 0203 	and.w	r2, r2, #3
 80018aa:	0092      	lsls	r2, r2, #2
 80018ac:	4093      	lsls	r3, r2
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b4:	4935      	ldr	r1, [pc, #212]	; (800198c <HAL_GPIO_Init+0x304>)
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c2:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <HAL_GPIO_Init+0x324>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e6:	4a31      	ldr	r2, [pc, #196]	; (80019ac <HAL_GPIO_Init+0x324>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <HAL_GPIO_Init+0x324>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001910:	4a26      	ldr	r2, [pc, #152]	; (80019ac <HAL_GPIO_Init+0x324>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_GPIO_Init+0x324>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800193a:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_GPIO_Init+0x324>)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_GPIO_Init+0x324>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001964:	4a11      	ldr	r2, [pc, #68]	; (80019ac <HAL_GPIO_Init+0x324>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3301      	adds	r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	2b0f      	cmp	r3, #15
 8001974:	f67f ae96 	bls.w	80016a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40013800 	.word	0x40013800
 8001990:	40020000 	.word	0x40020000
 8001994:	40020400 	.word	0x40020400
 8001998:	40020800 	.word	0x40020800
 800199c:	40020c00 	.word	0x40020c00
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40021400 	.word	0x40021400
 80019a8:	40021800 	.word	0x40021800
 80019ac:	40013c00 	.word	0x40013c00

080019b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c0:	787b      	ldrb	r3, [r7, #1]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019cc:	e003      	b.n	80019d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	041a      	lsls	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	619a      	str	r2, [r3, #24]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e12b      	b.n	8001c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff f842 	bl	8000a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2224      	movs	r2, #36	; 0x24
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a48:	f001 fd8e 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4a81      	ldr	r2, [pc, #516]	; (8001c58 <HAL_I2C_Init+0x274>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d807      	bhi.n	8001a68 <HAL_I2C_Init+0x84>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4a80      	ldr	r2, [pc, #512]	; (8001c5c <HAL_I2C_Init+0x278>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	bf94      	ite	ls
 8001a60:	2301      	movls	r3, #1
 8001a62:	2300      	movhi	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	e006      	b.n	8001a76 <HAL_I2C_Init+0x92>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4a7d      	ldr	r2, [pc, #500]	; (8001c60 <HAL_I2C_Init+0x27c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	bf94      	ite	ls
 8001a70:	2301      	movls	r3, #1
 8001a72:	2300      	movhi	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0e7      	b.n	8001c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4a78      	ldr	r2, [pc, #480]	; (8001c64 <HAL_I2C_Init+0x280>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	0c9b      	lsrs	r3, r3, #18
 8001a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4a6a      	ldr	r2, [pc, #424]	; (8001c58 <HAL_I2C_Init+0x274>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d802      	bhi.n	8001ab8 <HAL_I2C_Init+0xd4>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	e009      	b.n	8001acc <HAL_I2C_Init+0xe8>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	4a69      	ldr	r2, [pc, #420]	; (8001c68 <HAL_I2C_Init+0x284>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	3301      	adds	r3, #1
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ade:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	495c      	ldr	r1, [pc, #368]	; (8001c58 <HAL_I2C_Init+0x274>)
 8001ae8:	428b      	cmp	r3, r1
 8001aea:	d819      	bhi.n	8001b20 <HAL_I2C_Init+0x13c>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e59      	subs	r1, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001afa:	1c59      	adds	r1, r3, #1
 8001afc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b00:	400b      	ands	r3, r1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00a      	beq.n	8001b1c <HAL_I2C_Init+0x138>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1e59      	subs	r1, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b14:	3301      	adds	r3, #1
 8001b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1a:	e051      	b.n	8001bc0 <HAL_I2C_Init+0x1dc>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e04f      	b.n	8001bc0 <HAL_I2C_Init+0x1dc>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d111      	bne.n	8001b4c <HAL_I2C_Init+0x168>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1e58      	subs	r0, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	440b      	add	r3, r1
 8001b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	e012      	b.n	8001b72 <HAL_I2C_Init+0x18e>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1e58      	subs	r0, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	0099      	lsls	r1, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2301      	moveq	r3, #1
 8001b6e:	2300      	movne	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Init+0x196>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e022      	b.n	8001bc0 <HAL_I2C_Init+0x1dc>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10e      	bne.n	8001ba0 <HAL_I2C_Init+0x1bc>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1e58      	subs	r0, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6859      	ldr	r1, [r3, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	440b      	add	r3, r1
 8001b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b94:	3301      	adds	r3, #1
 8001b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9e:	e00f      	b.n	8001bc0 <HAL_I2C_Init+0x1dc>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1e58      	subs	r0, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	0099      	lsls	r1, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	6809      	ldr	r1, [r1, #0]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69da      	ldr	r2, [r3, #28]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6911      	ldr	r1, [r2, #16]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68d2      	ldr	r2, [r2, #12]
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	430b      	orrs	r3, r1
 8001c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	000186a0 	.word	0x000186a0
 8001c5c:	001e847f 	.word	0x001e847f
 8001c60:	003d08ff 	.word	0x003d08ff
 8001c64:	431bde83 	.word	0x431bde83
 8001c68:	10624dd3 	.word	0x10624dd3

08001c6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6e:	b08f      	sub	sp, #60	; 0x3c
 8001c70:	af0a      	add	r7, sp, #40	; 0x28
 8001c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e116      	b.n	8001eac <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d106      	bne.n	8001c9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f006 fdb5 	bl	8008808 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 f8d2 	bl	8004e66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	687e      	ldr	r6, [r7, #4]
 8001cca:	466d      	mov	r5, sp
 8001ccc:	f106 0410 	add.w	r4, r6, #16
 8001cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ce0:	1d33      	adds	r3, r6, #4
 8001ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce4:	6838      	ldr	r0, [r7, #0]
 8001ce6:	f002 ffa9 	bl	8004c3c <USB_CoreInit>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0d7      	b.n	8001eac <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 f8c0 	bl	8004e88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e04a      	b.n	8001da4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	333d      	adds	r3, #61	; 0x3d
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	333c      	adds	r3, #60	; 0x3c
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	b298      	uxth	r0, r3
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	3344      	adds	r3, #68	; 0x44
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3340      	adds	r3, #64	; 0x40
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3348      	adds	r3, #72	; 0x48
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	334c      	adds	r3, #76	; 0x4c
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	3354      	adds	r3, #84	; 0x54
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	3301      	adds	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3af      	bcc.n	8001d0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e044      	b.n	8001e3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3b5      	bcc.n	8001db4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	687e      	ldr	r6, [r7, #4]
 8001e50:	466d      	mov	r5, sp
 8001e52:	f106 0410 	add.w	r4, r6, #16
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e66:	1d33      	adds	r3, r6, #4
 8001e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e6a:	6838      	ldr	r0, [r7, #0]
 8001e6c:	f003 f858 	bl	8004f20 <USB_DevInit>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e014      	b.n	8001eac <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d102      	bne.n	8001ea0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f001 f98c 	bl	80031b8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f004 f99a 	bl	80061de <USB_DevDisconnect>

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_PCD_Start+0x1c>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e020      	b.n	8001f12 <HAL_PCD_Start+0x5e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d109      	bne.n	8001ef4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d005      	beq.n	8001ef4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 ffa3 	bl	8004e44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f004 f94a 	bl	800619c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f1a:	b590      	push	{r4, r7, lr}
 8001f1c:	b08d      	sub	sp, #52	; 0x34
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fa08 	bl	8006346 <USB_GetMode>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f040 84b7 	bne.w	80028ac <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f004 f96c 	bl	8006220 <USB_ReadInterrupts>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 84ad 	beq.w	80028aa <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 f959 	bl	8006220 <USB_ReadInterrupts>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d107      	bne.n	8001f88 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f002 0202 	and.w	r2, r2, #2
 8001f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 f947 	bl	8006220 <USB_ReadInterrupts>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b10      	cmp	r3, #16
 8001f9a:	d161      	bne.n	8002060 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0210 	bic.w	r2, r2, #16
 8001faa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f003 020f 	and.w	r2, r3, #15
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	0c5b      	lsrs	r3, r3, #17
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d124      	bne.n	8002022 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d035      	beq.n	8002050 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	6a38      	ldr	r0, [r7, #32]
 8001ff8:	f003 ff7e 	bl	8005ef8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002008:	441a      	add	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	6a1a      	ldr	r2, [r3, #32]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800201a:	441a      	add	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	621a      	str	r2, [r3, #32]
 8002020:	e016      	b.n	8002050 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	0c5b      	lsrs	r3, r3, #17
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	2b06      	cmp	r3, #6
 800202c:	d110      	bne.n	8002050 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002034:	2208      	movs	r2, #8
 8002036:	4619      	mov	r1, r3
 8002038:	6a38      	ldr	r0, [r7, #32]
 800203a:	f003 ff5d 	bl	8005ef8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	6a1a      	ldr	r2, [r3, #32]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800204a:	441a      	add	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0210 	orr.w	r2, r2, #16
 800205e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f004 f8db 	bl	8006220 <USB_ReadInterrupts>
 800206a:	4603      	mov	r3, r0
 800206c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002070:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002074:	f040 80a7 	bne.w	80021c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f004 f8e0 	bl	8006246 <USB_ReadDevAllOutEpInterrupt>
 8002086:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002088:	e099      	b.n	80021be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 808e 	beq.w	80021b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f004 f904 	bl	80062ae <USB_ReadDevOutEPInterrupt>
 80020a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020be:	461a      	mov	r2, r3
 80020c0:	2301      	movs	r3, #1
 80020c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fef0 	bl	8002eac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e2:	461a      	mov	r2, r3
 80020e4:	2308      	movs	r3, #8
 80020e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 ffc6 	bl	800307c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d008      	beq.n	800210c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	4413      	add	r3, r2
 8002102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002106:	461a      	mov	r2, r3
 8002108:	2310      	movs	r3, #16
 800210a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d030      	beq.n	8002178 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	2b80      	cmp	r3, #128	; 0x80
 8002120:	d109      	bne.n	8002136 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002134:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	3304      	adds	r3, #4
 800214a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	78db      	ldrb	r3, [r3, #3]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d108      	bne.n	8002166 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2200      	movs	r2, #0
 8002158:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	b2db      	uxtb	r3, r3
 800215e:	4619      	mov	r1, r3
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f006 fc6d 	bl	8008a40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002172:	461a      	mov	r2, r3
 8002174:	2302      	movs	r3, #2
 8002176:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	4413      	add	r3, r2
 800218a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218e:	461a      	mov	r2, r3
 8002190:	2320      	movs	r3, #32
 8002192:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021aa:	461a      	mov	r2, r3
 80021ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	3301      	adds	r3, #1
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f47f af62 	bne.w	800208a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 f828 	bl	8006220 <USB_ReadInterrupts>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021da:	f040 80db 	bne.w	8002394 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 f849 	bl	800627a <USB_ReadDevAllInEpInterrupt>
 80021e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021ee:	e0cd      	b.n	800238c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80c2 	beq.w	8002380 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f004 f86f 	bl	80062ea <USB_ReadDevInEPInterrupt>
 800220c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d057      	beq.n	80022c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	2201      	movs	r2, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800222c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	69f9      	ldr	r1, [r7, #28]
 8002234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002238:	4013      	ands	r3, r2
 800223a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002248:	461a      	mov	r2, r3
 800224a:	2301      	movs	r3, #1
 800224c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d132      	bne.n	80022bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	334c      	adds	r3, #76	; 0x4c
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4403      	add	r3, r0
 8002276:	3348      	adds	r3, #72	; 0x48
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4419      	add	r1, r3
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4403      	add	r3, r0
 800228a:	334c      	adds	r3, #76	; 0x4c
 800228c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	2b00      	cmp	r3, #0
 8002292:	d113      	bne.n	80022bc <HAL_PCD_IRQHandler+0x3a2>
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3354      	adds	r3, #84	; 0x54
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d108      	bne.n	80022bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022b4:	461a      	mov	r2, r3
 80022b6:	2101      	movs	r1, #1
 80022b8:	f004 f876 	bl	80063a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	4619      	mov	r1, r3
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f006 fb37 	bl	8008936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022de:	461a      	mov	r2, r3
 80022e0:	2308      	movs	r3, #8
 80022e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022fa:	461a      	mov	r2, r3
 80022fc:	2310      	movs	r3, #16
 80022fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002316:	461a      	mov	r2, r3
 8002318:	2340      	movs	r3, #64	; 0x40
 800231a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d023      	beq.n	800236e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002328:	6a38      	ldr	r0, [r7, #32]
 800232a:	f002 ff57 	bl	80051dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800232e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	3338      	adds	r3, #56	; 0x38
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	3304      	adds	r3, #4
 8002340:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	78db      	ldrb	r3, [r3, #3]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d108      	bne.n	800235c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2200      	movs	r2, #0
 800234e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4619      	mov	r1, r3
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f006 fb84 	bl	8008a64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	4413      	add	r3, r2
 8002364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002368:	461a      	mov	r2, r3
 800236a:	2302      	movs	r3, #2
 800236c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fd08 	bl	8002d90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	3301      	adds	r3, #1
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	085b      	lsrs	r3, r3, #1
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	2b00      	cmp	r3, #0
 8002390:	f47f af2e 	bne.w	80021f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f003 ff41 	bl	8006220 <USB_ReadInterrupts>
 800239e:	4603      	mov	r3, r0
 80023a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023a8:	d122      	bne.n	80023f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d108      	bne.n	80023da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023d0:	2100      	movs	r1, #0
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f006 fcfe 	bl	8008dd4 <HAL_PCDEx_LPM_Callback>
 80023d8:	e002      	b.n	80023e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f006 fb22 	bl	8008a24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 ff13 	bl	8006220 <USB_ReadInterrupts>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002404:	d112      	bne.n	800242c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f006 fade 	bl	80089d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800242a:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f003 fef5 	bl	8006220 <USB_ReadInterrupts>
 8002436:	4603      	mov	r3, r0
 8002438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800243c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002440:	d121      	bne.n	8002486 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002450:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d111      	bne.n	8002480 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	089b      	lsrs	r3, r3, #2
 800246c:	f003 020f 	and.w	r2, r3, #15
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002476:	2101      	movs	r1, #1
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f006 fcab 	bl	8008dd4 <HAL_PCDEx_LPM_Callback>
 800247e:	e002      	b.n	8002486 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f006 faa9 	bl	80089d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f003 fec8 	bl	8006220 <USB_ReadInterrupts>
 8002490:	4603      	mov	r3, r0
 8002492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249a:	f040 80b7 	bne.w	800260c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2110      	movs	r1, #16
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 fe8f 	bl	80051dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c2:	e046      	b.n	8002552 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d0:	461a      	mov	r2, r3
 80024d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e8:	0151      	lsls	r1, r2, #5
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	440a      	add	r2, r1
 80024ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002504:	461a      	mov	r2, r3
 8002506:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800250a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251c:	0151      	lsls	r1, r2, #5
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	440a      	add	r2, r1
 8002522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800252a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800253c:	0151      	lsls	r1, r2, #5
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	440a      	add	r2, r1
 8002542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002546:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800254a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254e:	3301      	adds	r3, #1
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002558:	429a      	cmp	r2, r3
 800255a:	d3b3      	bcc.n	80024c4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800256a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800256e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	2b00      	cmp	r3, #0
 8002576:	d016      	beq.n	80025a6 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002588:	f043 030b 	orr.w	r3, r3, #11
 800258c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800259e:	f043 030b 	orr.w	r3, r3, #11
 80025a2:	6453      	str	r3, [r2, #68]	; 0x44
 80025a4:	e015      	b.n	80025d2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025cc:	f043 030b 	orr.w	r3, r3, #11
 80025d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025f6:	461a      	mov	r2, r3
 80025f8:	f003 fed6 	bl	80063a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800260a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f003 fe05 	bl	8006220 <USB_ReadInterrupts>
 8002616:	4603      	mov	r3, r0
 8002618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800261c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002620:	d124      	bne.n	800266c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fe9b 	bl	8006362 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f002 fe50 	bl	80052d6 <USB_GetDevSpeed>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681c      	ldr	r4, [r3, #0]
 8002642:	f000 ff85 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8002646:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800264c:	b2db      	uxtb	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	4620      	mov	r0, r4
 8002652:	f002 fb55 	bl	8004d00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f006 f995 	bl	8008986 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800266a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f003 fdd5 	bl	8006220 <USB_ReadInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b08      	cmp	r3, #8
 800267e:	d10a      	bne.n	8002696 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f006 f972 	bl	800896a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f002 0208 	and.w	r2, r2, #8
 8002694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f003 fdc0 	bl	8006220 <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b80      	cmp	r3, #128	; 0x80
 80026a8:	d122      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026b6:	2301      	movs	r3, #1
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ba:	e014      	b.n	80026e6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fb27 	bl	8002d2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	3301      	adds	r3, #1
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d3e5      	bcc.n	80026bc <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 fd93 	bl	8006220 <USB_ReadInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002704:	d13b      	bne.n	800277e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002706:	2301      	movs	r3, #1
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	e02b      	b.n	8002764 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	3340      	adds	r3, #64	; 0x40
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d115      	bne.n	800275e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002732:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002734:	2b00      	cmp	r3, #0
 8002736:	da12      	bge.n	800275e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	333f      	adds	r3, #63	; 0x3f
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002754:	b2db      	uxtb	r3, r3
 8002756:	4619      	mov	r1, r3
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fae8 	bl	8002d2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	3301      	adds	r3, #1
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276a:	429a      	cmp	r2, r3
 800276c:	d3ce      	bcc.n	800270c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800277c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fd4c 	bl	8006220 <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002792:	d155      	bne.n	8002840 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002794:	2301      	movs	r3, #1
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
 8002798:	e045      	b.n	8002826 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d12e      	bne.n	8002820 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	da2b      	bge.n	8002820 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027d4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027d8:	429a      	cmp	r2, r3
 80027da:	d121      	bne.n	8002820 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800281c:	6053      	str	r3, [r2, #4]
            break;
 800281e:	e007      	b.n	8002830 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	3301      	adds	r3, #1
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282c:	429a      	cmp	r2, r3
 800282e:	d3b4      	bcc.n	800279a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800283e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fceb 	bl	8006220 <USB_ReadInterrupts>
 800284a:	4603      	mov	r3, r0
 800284c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002854:	d10a      	bne.n	800286c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f006 f916 	bl	8008a88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800286a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f003 fcd5 	bl	8006220 <USB_ReadInterrupts>
 8002876:	4603      	mov	r3, r0
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d115      	bne.n	80028ac <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f006 f906 	bl	8008aa4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	e000      	b.n	80028ac <HAL_PCD_IRQHandler+0x992>
      return;
 80028aa:	bf00      	nop
    }
  }
}
 80028ac:	3734      	adds	r7, #52	; 0x34
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd90      	pop	{r4, r7, pc}

080028b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_PCD_SetAddress+0x1a>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e013      	b.n	80028f4 <HAL_PCD_SetAddress+0x42>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	78fa      	ldrb	r2, [r7, #3]
 80028d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 fc33 	bl	8006150 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	4608      	mov	r0, r1
 8002906:	4611      	mov	r1, r2
 8002908:	461a      	mov	r2, r3
 800290a:	4603      	mov	r3, r0
 800290c:	70fb      	strb	r3, [r7, #3]
 800290e:	460b      	mov	r3, r1
 8002910:	803b      	strh	r3, [r7, #0]
 8002912:	4613      	mov	r3, r2
 8002914:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800291a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800291e:	2b00      	cmp	r3, #0
 8002920:	da0f      	bge.n	8002942 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	f003 020f 	and.w	r2, r3, #15
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	3338      	adds	r3, #56	; 0x38
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	3304      	adds	r3, #4
 8002938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	705a      	strb	r2, [r3, #1]
 8002940:	e00f      	b.n	8002962 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	f003 020f 	and.w	r2, r3, #15
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	4413      	add	r3, r2
 8002958:	3304      	adds	r3, #4
 800295a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	b2da      	uxtb	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800296e:	883a      	ldrh	r2, [r7, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	78ba      	ldrb	r2, [r7, #2]
 8002978:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	785b      	ldrb	r3, [r3, #1]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d004      	beq.n	800298c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800298c:	78bb      	ldrb	r3, [r7, #2]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d102      	bne.n	8002998 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_PCD_EP_Open+0xaa>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e00e      	b.n	80029c4 <HAL_PCD_EP_Open+0xc8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 fcb3 	bl	8005320 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029c2:	7afb      	ldrb	r3, [r7, #11]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	da0f      	bge.n	8002a00 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 020f 	and.w	r2, r3, #15
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	3338      	adds	r3, #56	; 0x38
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	3304      	adds	r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	705a      	strb	r2, [r3, #1]
 80029fe:	e00f      	b.n	8002a20 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	f003 020f 	and.w	r2, r3, #15
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	3304      	adds	r3, #4
 8002a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_PCD_EP_Close+0x6e>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e00e      	b.n	8002a58 <HAL_PCD_EP_Close+0x8c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68f9      	ldr	r1, [r7, #12]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 fcf1 	bl	8005430 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a70:	7afb      	ldrb	r3, [r7, #11]
 8002a72:	f003 020f 	and.w	r2, r3, #15
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4413      	add	r3, r2
 8002a86:	3304      	adds	r3, #4
 8002a88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa2:	7afb      	ldrb	r3, [r7, #11]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d102      	bne.n	8002abc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002abc:	7afb      	ldrb	r3, [r7, #11]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6979      	ldr	r1, [r7, #20]
 8002ad4:	f002 ffd0 	bl	8005a78 <USB_EP0StartXfer>
 8002ad8:	e008      	b.n	8002aec <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6979      	ldr	r1, [r7, #20]
 8002ae8:	f002 fd7e 	bl	80055e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	f003 020f 	and.w	r2, r3, #15
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002b18:	681b      	ldr	r3, [r3, #0]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	460b      	mov	r3, r1
 8002b34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b36:	7afb      	ldrb	r3, [r7, #11]
 8002b38:	f003 020f 	and.w	r2, r3, #15
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	3338      	adds	r3, #56	; 0x38
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4413      	add	r3, r2
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2201      	movs	r2, #1
 8002b64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b66:	7afb      	ldrb	r3, [r7, #11]
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d102      	bne.n	8002b80 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b80:	7afb      	ldrb	r3, [r7, #11]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	6979      	ldr	r1, [r7, #20]
 8002b98:	f002 ff6e 	bl	8005a78 <USB_EP0StartXfer>
 8002b9c:	e008      	b.n	8002bb0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	6979      	ldr	r1, [r7, #20]
 8002bac:	f002 fd1c 	bl	80055e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 020f 	and.w	r2, r3, #15
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d901      	bls.n	8002bd8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e050      	b.n	8002c7a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	da0f      	bge.n	8002c00 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	f003 020f 	and.w	r2, r3, #15
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	3338      	adds	r3, #56	; 0x38
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	705a      	strb	r2, [r3, #1]
 8002bfe:	e00d      	b.n	8002c1c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	3304      	adds	r3, #4
 8002c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_PCD_EP_SetStall+0x82>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e01e      	b.n	8002c7a <HAL_PCD_EP_SetStall+0xc0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68f9      	ldr	r1, [r7, #12]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 f9ac 	bl	8005fa8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	b2d9      	uxtb	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f003 fb9c 	bl	80063a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 020f 	and.w	r2, r3, #15
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d901      	bls.n	8002ca0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e042      	b.n	8002d26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da0f      	bge.n	8002cc8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	3338      	adds	r3, #56	; 0x38
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	705a      	strb	r2, [r3, #1]
 8002cc6:	e00f      	b.n	8002ce8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 020f 	and.w	r2, r3, #15
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	3304      	adds	r3, #4
 8002ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_PCD_EP_ClrStall+0x86>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e00e      	b.n	8002d26 <HAL_PCD_EP_ClrStall+0xa4>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 f9b4 	bl	8006084 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	da0c      	bge.n	8002d5c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	f003 020f 	and.w	r2, r3, #15
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	3338      	adds	r3, #56	; 0x38
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	3304      	adds	r3, #4
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	e00c      	b.n	8002d76 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 020f 	and.w	r2, r3, #15
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	3304      	adds	r3, #4
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68f9      	ldr	r1, [r7, #12]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f002 ffd3 	bl	8005d28 <USB_EPStopXfer>
 8002d82:	4603      	mov	r3, r0
 8002d84:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d86:	7afb      	ldrb	r3, [r7, #11]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	3338      	adds	r3, #56	; 0x38
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	3304      	adds	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1a      	ldr	r2, [r3, #32]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d901      	bls.n	8002dc8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e06c      	b.n	8002ea2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d902      	bls.n	8002de4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3303      	adds	r3, #3
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dec:	e02b      	b.n	8002e46 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d902      	bls.n	8002e0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3303      	adds	r3, #3
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6919      	ldr	r1, [r3, #16]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	4603      	mov	r3, r0
 8002e28:	6978      	ldr	r0, [r7, #20]
 8002e2a:	f003 f827 	bl	8005e7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	441a      	add	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	441a      	add	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d809      	bhi.n	8002e70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d203      	bcs.n	8002e70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1be      	bne.n	8002dee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d811      	bhi.n	8002ea0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	2201      	movs	r2, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	6939      	ldr	r1, [r7, #16]
 8002e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3720      	adds	r7, #32
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	333c      	adds	r3, #60	; 0x3c
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d17b      	bne.n	8002fda <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d015      	beq.n	8002f18 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	4a61      	ldr	r2, [pc, #388]	; (8003074 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	f240 80b9 	bls.w	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80b3 	beq.w	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f14:	6093      	str	r3, [r2, #8]
 8002f16:	e0a7      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2320      	movs	r3, #32
 8002f32:	6093      	str	r3, [r2, #8]
 8002f34:	e098      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 8093 	bne.w	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	4a4b      	ldr	r2, [pc, #300]	; (8003074 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d90f      	bls.n	8002f6a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f60:	461a      	mov	r2, r3
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	6093      	str	r3, [r2, #8]
 8002f68:	e07e      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	0159      	lsls	r1, r3, #5
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f96:	1ad2      	subs	r2, r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d114      	bne.n	8002fcc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	f003 f9f6 	bl	80063a8 <USB_EP0_OutStart>
 8002fbc:	e006      	b.n	8002fcc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	441a      	add	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f005 fc94 	bl	8008900 <HAL_PCD_DataOutStageCallback>
 8002fd8:	e046      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	4a26      	ldr	r2, [pc, #152]	; (8003078 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d124      	bne.n	800302c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	e032      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	4413      	add	r3, r2
 8003014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003018:	461a      	mov	r2, r3
 800301a:	2320      	movs	r3, #32
 800301c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f005 fc6b 	bl	8008900 <HAL_PCD_DataOutStageCallback>
 800302a:	e01d      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d114      	bne.n	800305c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d108      	bne.n	800305c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003054:	461a      	mov	r2, r3
 8003056:	2100      	movs	r1, #0
 8003058:	f003 f9a6 	bl	80063a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f005 fc4c 	bl	8008900 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3720      	adds	r7, #32
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	4f54300a 	.word	0x4f54300a
 8003078:	4f54310a 	.word	0x4f54310a

0800307c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	333c      	adds	r3, #60	; 0x3c
 8003094:	3304      	adds	r3, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4a15      	ldr	r2, [pc, #84]	; (8003104 <PCD_EP_OutSetupPacket_int+0x88>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d90e      	bls.n	80030d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c8:	461a      	mov	r2, r3
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f005 fc03 	bl	80088dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <PCD_EP_OutSetupPacket_int+0x88>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d90c      	bls.n	80030f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d108      	bne.n	80030f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030f0:	461a      	mov	r2, r3
 80030f2:	2101      	movs	r1, #1
 80030f4:	f003 f958 	bl	80063a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	4f54300a 	.word	0x4f54300a

08003108 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
 8003114:	4613      	mov	r3, r2
 8003116:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d107      	bne.n	8003136 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003126:	883b      	ldrh	r3, [r7, #0]
 8003128:	0419      	lsls	r1, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	430a      	orrs	r2, r1
 8003132:	629a      	str	r2, [r3, #40]	; 0x28
 8003134:	e028      	b.n	8003188 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4413      	add	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	e00d      	b.n	8003166 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	3340      	adds	r3, #64	; 0x40
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	4413      	add	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	3301      	adds	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	3b01      	subs	r3, #1
 800316c:	429a      	cmp	r2, r3
 800316e:	d3ec      	bcc.n	800314a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003170:	883b      	ldrh	r3, [r7, #0]
 8003172:	0418      	lsls	r0, r3, #16
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6819      	ldr	r1, [r3, #0]
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	3b01      	subs	r3, #1
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	4302      	orrs	r2, r0
 8003180:	3340      	adds	r3, #64	; 0x40
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	887a      	ldrh	r2, [r7, #2]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ea:	f043 0303 	orr.w	r3, r3, #3
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af02      	add	r7, sp, #8
 8003206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7fd fe8a 	bl	8000f20 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e069      	b.n	80032ec <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fd fc79 	bl	8000b24 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003232:	f241 3188 	movw	r1, #5000	; 0x1388
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f85e 	bl	80032f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	3b01      	subs	r3, #1
 800324c:	021a      	lsls	r2, r3, #8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	2120      	movs	r1, #32
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f856 	bl	8003314 <QSPI_WaitFlagStateUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800326c:	7afb      	ldrb	r3, [r7, #11]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d137      	bne.n	80032e2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800327c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6852      	ldr	r2, [r2, #4]
 8003284:	0611      	lsls	r1, r2, #24
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68d2      	ldr	r2, [r2, #12]
 800328a:	4311      	orrs	r1, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	69d2      	ldr	r2, [r2, #28]
 8003290:	4311      	orrs	r1, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6a12      	ldr	r2, [r2, #32]
 8003296:	4311      	orrs	r1, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	430b      	orrs	r3, r1
 800329e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <HAL_QSPI_Init+0xf4>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6912      	ldr	r2, [r2, #16]
 80032ae:	0411      	lsls	r1, r2, #16
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6952      	ldr	r2, [r2, #20]
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6992      	ldr	r2, [r2, #24]
 80032ba:	4311      	orrs	r1, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80032ea:	7afb      	ldrb	r3, [r7, #11]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	ffe0f8fe 	.word	0xffe0f8fe

080032f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003324:	e01a      	b.n	800335c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d016      	beq.n	800335c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fd fdf7 	bl	8000f20 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10b      	bne.n	800335c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2204      	movs	r2, #4
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	f043 0201 	orr.w	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e00e      	b.n	800337a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	bf14      	ite	ne
 800336a:	2301      	movne	r3, #1
 800336c:	2300      	moveq	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	429a      	cmp	r2, r3
 8003376:	d1d6      	bne.n	8003326 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0cc      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003398:	4b68      	ldr	r3, [pc, #416]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d90c      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b65      	ldr	r3, [pc, #404]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0b8      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d8:	4b59      	ldr	r3, [pc, #356]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a58      	ldr	r2, [pc, #352]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a52      	ldr	r2, [pc, #328]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fc:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	494d      	ldr	r1, [pc, #308]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d044      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d119      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e07f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d003      	beq.n	8003442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800343e:	2b03      	cmp	r3, #3
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	4b3f      	ldr	r3, [pc, #252]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e06f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003452:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e067      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003462:	4b37      	ldr	r3, [pc, #220]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f023 0203 	bic.w	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4934      	ldr	r1, [pc, #208]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	4313      	orrs	r3, r2
 8003472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003474:	f7fd fd54 	bl	8000f20 <HAL_GetTick>
 8003478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	e00a      	b.n	8003492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347c:	f7fd fd50 	bl	8000f20 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e04f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 020c 	and.w	r2, r3, #12
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d1eb      	bne.n	800347c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d20c      	bcs.n	80034cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e032      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4916      	ldr	r1, [pc, #88]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f6:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	490e      	ldr	r1, [pc, #56]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800350a:	f000 fb7f 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 800350e:	4602      	mov	r2, r0
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	490a      	ldr	r1, [pc, #40]	; (8003544 <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	5ccb      	ldrb	r3, [r1, r3]
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fcb4 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023c00 	.word	0x40023c00
 8003540:	40023800 	.word	0x40023800
 8003544:	08008fb0 	.word	0x08008fb0
 8003548:	20000000 	.word	0x20000000
 800354c:	20000004 	.word	0x20000004

08003550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <HAL_RCC_GetHCLKFreq+0x14>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000000 	.word	0x20000000

08003568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800356c:	f7ff fff0 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	0a9b      	lsrs	r3, r3, #10
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4903      	ldr	r1, [pc, #12]	; (800358c <HAL_RCC_GetPCLK1Freq+0x24>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40023800 	.word	0x40023800
 800358c:	08008fc0 	.word	0x08008fc0

08003590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003594:	f7ff ffdc 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	0b5b      	lsrs	r3, r3, #13
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4903      	ldr	r1, [pc, #12]	; (80035b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40023800 	.word	0x40023800
 80035b4:	08008fc0 	.word	0x08008fc0

080035b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	; 0x30
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d010      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80035f0:	4b6f      	ldr	r3, [pc, #444]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	496c      	ldr	r1, [pc, #432]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800360e:	2301      	movs	r3, #1
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d010      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800361e:	4b64      	ldr	r3, [pc, #400]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003624:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	4960      	ldr	r1, [pc, #384]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800363c:	2301      	movs	r3, #1
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d017      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800364c:	4b58      	ldr	r3, [pc, #352]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800364e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4955      	ldr	r1, [pc, #340]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366a:	d101      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800366c:	2301      	movs	r3, #1
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003678:	2301      	movs	r3, #1
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d017      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003688:	4b49      	ldr	r3, [pc, #292]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800368a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800368e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003696:	4946      	ldr	r1, [pc, #280]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a6:	d101      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80036a8:	2301      	movs	r3, #1
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80036b4:	2301      	movs	r3, #1
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 808a 	beq.w	80037da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	4b39      	ldr	r3, [pc, #228]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a38      	ldr	r2, [pc, #224]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036e2:	4b34      	ldr	r3, [pc, #208]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a33      	ldr	r2, [pc, #204]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036ee:	f7fd fc17 	bl	8000f20 <HAL_GetTick>
 80036f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036f6:	f7fd fc13 	bl	8000f20 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e278      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003708:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003714:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d02f      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372c:	6a3a      	ldr	r2, [r7, #32]
 800372e:	429a      	cmp	r2, r3
 8003730:	d028      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003732:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800373c:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003742:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800374e:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b01      	cmp	r3, #1
 8003758:	d114      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800375a:	f7fd fbe1 	bl	8000f20 <HAL_GetTick>
 800375e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003760:	e00a      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fd fbdd 	bl	8000f20 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e240      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ee      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003790:	d114      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80037a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a6:	4902      	ldr	r1, [pc, #8]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	608b      	str	r3, [r1, #8]
 80037ac:	e00c      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40007000 	.word	0x40007000
 80037b8:	42470e40 	.word	0x42470e40
 80037bc:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4a49      	ldr	r2, [pc, #292]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037c6:	6093      	str	r3, [r2, #8]
 80037c8:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d4:	4944      	ldr	r1, [pc, #272]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d004      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80037ec:	4b3f      	ldr	r3, [pc, #252]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80037ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80037fc:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003802:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	4937      	ldr	r1, [pc, #220]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800381e:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003824:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382c:	492e      	ldr	r1, [pc, #184]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d011      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003840:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003846:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	4926      	ldr	r1, [pc, #152]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800385e:	d101      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003860:	2301      	movs	r3, #1
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003870:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003876:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	491a      	ldr	r1, [pc, #104]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388e:	2b00      	cmp	r3, #0
 8003890:	d011      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003898:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	4911      	ldr	r1, [pc, #68]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b0:	d101      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80038b2:	2301      	movs	r3, #1
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d005      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c4:	f040 80ff 	bne.w	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038c8:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038ce:	f7fd fb27 	bl	8000f20 <HAL_GetTick>
 80038d2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038d4:	e00e      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038d6:	f7fd fb23 	bl	8000f20 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d907      	bls.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e188      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80038e8:	40023800 	.word	0x40023800
 80038ec:	424711e0 	.word	0x424711e0
 80038f0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038f4:	4b7e      	ldr	r3, [pc, #504]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ea      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800391c:	2b00      	cmp	r3, #0
 800391e:	d028      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d124      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003928:	4b71      	ldr	r3, [pc, #452]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800392a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	3301      	adds	r3, #1
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800393a:	4b6d      	ldr	r3, [pc, #436]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800393c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003940:	0e1b      	lsrs	r3, r3, #24
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	019b      	lsls	r3, r3, #6
 8003952:	431a      	orrs	r2, r3
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	3b01      	subs	r3, #1
 800395a:	041b      	lsls	r3, r3, #16
 800395c:	431a      	orrs	r2, r3
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	071b      	lsls	r3, r3, #28
 800396a:	4961      	ldr	r1, [pc, #388]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	d004      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003990:	2b00      	cmp	r3, #0
 8003992:	d035      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399c:	d130      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800399e:	4b54      	ldr	r3, [pc, #336]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	3301      	adds	r3, #1
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039b0:	4b4f      	ldr	r3, [pc, #316]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b6:	0f1b      	lsrs	r3, r3, #28
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	019b      	lsls	r3, r3, #6
 80039c8:	431a      	orrs	r2, r3
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	3b01      	subs	r3, #1
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	431a      	orrs	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	071b      	lsls	r3, r3, #28
 80039e0:	4943      	ldr	r1, [pc, #268]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039e8:	4b41      	ldr	r3, [pc, #260]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ee:	f023 021f 	bic.w	r2, r3, #31
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	3b01      	subs	r3, #1
 80039f8:	493d      	ldr	r1, [pc, #244]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d029      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a14:	d124      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	3301      	adds	r3, #1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a28:	4b31      	ldr	r3, [pc, #196]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a2e:	0f1b      	lsrs	r3, r3, #28
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	019b      	lsls	r3, r3, #6
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	041b      	lsls	r3, r3, #16
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	431a      	orrs	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	071b      	lsls	r3, r3, #28
 8003a58:	4925      	ldr	r1, [pc, #148]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d016      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	019b      	lsls	r3, r3, #6
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	071b      	lsls	r3, r3, #28
 8003a92:	4917      	ldr	r1, [pc, #92]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a9a:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fd fa3e 	bl	8000f20 <HAL_GetTick>
 8003aa4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003aa8:	f7fd fa3a 	bl	8000f20 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e09f      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aba:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	f040 8095 	bne.w	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ad4:	f7fd fa24 	bl	8000f20 <HAL_GetTick>
 8003ad8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ada:	e00f      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003adc:	f7fd fa20 	bl	8000f20 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d908      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e085      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800
 8003af4:	42470068 	.word	0x42470068
 8003af8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003afc:	4b41      	ldr	r3, [pc, #260]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b08:	d0e8      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d02b      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d127      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003b32:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	019b      	lsls	r3, r3, #6
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	3b01      	subs	r3, #1
 8003b56:	041b      	lsls	r3, r3, #16
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	061b      	lsls	r3, r3, #24
 8003b60:	4928      	ldr	r1, [pc, #160]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b68:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b6e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	3b01      	subs	r3, #1
 8003b78:	021b      	lsls	r3, r3, #8
 8003b7a:	4922      	ldr	r1, [pc, #136]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01d      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b96:	d118      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	0e1b      	lsrs	r3, r3, #24
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	019b      	lsls	r3, r3, #6
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	4910      	ldr	r1, [pc, #64]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bca:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bd0:	f7fd f9a6 	bl	8000f20 <HAL_GetTick>
 8003bd4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003bd8:	f7fd f9a2 	bl	8000f20 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e007      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf6:	d1ef      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3730      	adds	r7, #48	; 0x30
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	42470070 	.word	0x42470070

08003c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c10:	b0ae      	sub	sp, #184	; 0xb8
 8003c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c32:	4bcb      	ldr	r3, [pc, #812]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	f200 8206 	bhi.w	800404c <HAL_RCC_GetSysClockFreq+0x440>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c7d 	.word	0x08003c7d
 8003c4c:	0800404d 	.word	0x0800404d
 8003c50:	0800404d 	.word	0x0800404d
 8003c54:	0800404d 	.word	0x0800404d
 8003c58:	08003c85 	.word	0x08003c85
 8003c5c:	0800404d 	.word	0x0800404d
 8003c60:	0800404d 	.word	0x0800404d
 8003c64:	0800404d 	.word	0x0800404d
 8003c68:	08003c8d 	.word	0x08003c8d
 8003c6c:	0800404d 	.word	0x0800404d
 8003c70:	0800404d 	.word	0x0800404d
 8003c74:	0800404d 	.word	0x0800404d
 8003c78:	08003e7d 	.word	0x08003e7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c7c:	4bb9      	ldr	r3, [pc, #740]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c82:	e1e7      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c84:	4bb8      	ldr	r3, [pc, #736]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c8a:	e1e3      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c8c:	4bb4      	ldr	r3, [pc, #720]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c98:	4bb1      	ldr	r3, [pc, #708]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d071      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca4:	4bae      	ldr	r3, [pc, #696]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	099b      	lsrs	r3, r3, #6
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cb0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cca:	4622      	mov	r2, r4
 8003ccc:	462b      	mov	r3, r5
 8003cce:	f04f 0000 	mov.w	r0, #0
 8003cd2:	f04f 0100 	mov.w	r1, #0
 8003cd6:	0159      	lsls	r1, r3, #5
 8003cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cdc:	0150      	lsls	r0, r2, #5
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	1a51      	subs	r1, r2, r1
 8003ce6:	6439      	str	r1, [r7, #64]	; 0x40
 8003ce8:	4629      	mov	r1, r5
 8003cea:	eb63 0301 	sbc.w	r3, r3, r1
 8003cee:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	018b      	lsls	r3, r1, #6
 8003d00:	4641      	mov	r1, r8
 8003d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d06:	4641      	mov	r1, r8
 8003d08:	018a      	lsls	r2, r1, #6
 8003d0a:	4641      	mov	r1, r8
 8003d0c:	1a51      	subs	r1, r2, r1
 8003d0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d10:	4649      	mov	r1, r9
 8003d12:	eb63 0301 	sbc.w	r3, r3, r1
 8003d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d24:	4649      	mov	r1, r9
 8003d26:	00cb      	lsls	r3, r1, #3
 8003d28:	4641      	mov	r1, r8
 8003d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2e:	4641      	mov	r1, r8
 8003d30:	00ca      	lsls	r2, r1, #3
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	4622      	mov	r2, r4
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d3e:	462b      	mov	r3, r5
 8003d40:	460a      	mov	r2, r1
 8003d42:	eb42 0303 	adc.w	r3, r2, r3
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d54:	4629      	mov	r1, r5
 8003d56:	024b      	lsls	r3, r1, #9
 8003d58:	4621      	mov	r1, r4
 8003d5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d5e:	4621      	mov	r1, r4
 8003d60:	024a      	lsls	r2, r1, #9
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d78:	f7fc fa44 	bl	8000204 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4613      	mov	r3, r2
 8003d82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d86:	e067      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d88:	4b75      	ldr	r3, [pc, #468]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d94:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003da2:	2300      	movs	r3, #0
 8003da4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003da6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003daa:	4622      	mov	r2, r4
 8003dac:	462b      	mov	r3, r5
 8003dae:	f04f 0000 	mov.w	r0, #0
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	0159      	lsls	r1, r3, #5
 8003db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dbc:	0150      	lsls	r0, r2, #5
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	1a51      	subs	r1, r2, r1
 8003dc6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dc8:	4629      	mov	r1, r5
 8003dca:	eb63 0301 	sbc.w	r3, r3, r1
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ddc:	4649      	mov	r1, r9
 8003dde:	018b      	lsls	r3, r1, #6
 8003de0:	4641      	mov	r1, r8
 8003de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003de6:	4641      	mov	r1, r8
 8003de8:	018a      	lsls	r2, r1, #6
 8003dea:	4641      	mov	r1, r8
 8003dec:	ebb2 0a01 	subs.w	sl, r2, r1
 8003df0:	4649      	mov	r1, r9
 8003df2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e0a:	4692      	mov	sl, r2
 8003e0c:	469b      	mov	fp, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	eb1a 0303 	adds.w	r3, sl, r3
 8003e14:	623b      	str	r3, [r7, #32]
 8003e16:	462b      	mov	r3, r5
 8003e18:	eb4b 0303 	adc.w	r3, fp, r3
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	028b      	lsls	r3, r1, #10
 8003e2e:	4621      	mov	r1, r4
 8003e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e34:	4621      	mov	r1, r4
 8003e36:	028a      	lsls	r2, r1, #10
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e40:	2200      	movs	r2, #0
 8003e42:	673b      	str	r3, [r7, #112]	; 0x70
 8003e44:	677a      	str	r2, [r7, #116]	; 0x74
 8003e46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e4a:	f7fc f9db 	bl	8000204 <__aeabi_uldivmod>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4613      	mov	r3, r2
 8003e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e58:	4b41      	ldr	r3, [pc, #260]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	0c1b      	lsrs	r3, r3, #16
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	3301      	adds	r3, #1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e7a:	e0eb      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e7c:	4b38      	ldr	r3, [pc, #224]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e88:	4b35      	ldr	r3, [pc, #212]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d06b      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e94:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	099b      	lsrs	r3, r3, #6
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	667b      	str	r3, [r7, #100]	; 0x64
 8003eac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	462b      	mov	r3, r5
 8003eb4:	f04f 0000 	mov.w	r0, #0
 8003eb8:	f04f 0100 	mov.w	r1, #0
 8003ebc:	0159      	lsls	r1, r3, #5
 8003ebe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec2:	0150      	lsls	r0, r2, #5
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4621      	mov	r1, r4
 8003eca:	1a51      	subs	r1, r2, r1
 8003ecc:	61b9      	str	r1, [r7, #24]
 8003ece:	4629      	mov	r1, r5
 8003ed0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ee2:	4659      	mov	r1, fp
 8003ee4:	018b      	lsls	r3, r1, #6
 8003ee6:	4651      	mov	r1, sl
 8003ee8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eec:	4651      	mov	r1, sl
 8003eee:	018a      	lsls	r2, r1, #6
 8003ef0:	4651      	mov	r1, sl
 8003ef2:	ebb2 0801 	subs.w	r8, r2, r1
 8003ef6:	4659      	mov	r1, fp
 8003ef8:	eb63 0901 	sbc.w	r9, r3, r1
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f10:	4690      	mov	r8, r2
 8003f12:	4699      	mov	r9, r3
 8003f14:	4623      	mov	r3, r4
 8003f16:	eb18 0303 	adds.w	r3, r8, r3
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	eb49 0303 	adc.w	r3, r9, r3
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f30:	4629      	mov	r1, r5
 8003f32:	024b      	lsls	r3, r1, #9
 8003f34:	4621      	mov	r1, r4
 8003f36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	024a      	lsls	r2, r1, #9
 8003f3e:	4610      	mov	r0, r2
 8003f40:	4619      	mov	r1, r3
 8003f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f46:	2200      	movs	r2, #0
 8003f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f50:	f7fc f958 	bl	8000204 <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4613      	mov	r3, r2
 8003f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f5e:	e065      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x420>
 8003f60:	40023800 	.word	0x40023800
 8003f64:	00f42400 	.word	0x00f42400
 8003f68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6c:	4b3d      	ldr	r3, [pc, #244]	; (8004064 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	099b      	lsrs	r3, r3, #6
 8003f72:	2200      	movs	r2, #0
 8003f74:	4618      	mov	r0, r3
 8003f76:	4611      	mov	r1, r2
 8003f78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f7c:	653b      	str	r3, [r7, #80]	; 0x50
 8003f7e:	2300      	movs	r3, #0
 8003f80:	657b      	str	r3, [r7, #84]	; 0x54
 8003f82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f86:	4642      	mov	r2, r8
 8003f88:	464b      	mov	r3, r9
 8003f8a:	f04f 0000 	mov.w	r0, #0
 8003f8e:	f04f 0100 	mov.w	r1, #0
 8003f92:	0159      	lsls	r1, r3, #5
 8003f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f98:	0150      	lsls	r0, r2, #5
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4641      	mov	r1, r8
 8003fa0:	1a51      	subs	r1, r2, r1
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fb8:	4659      	mov	r1, fp
 8003fba:	018b      	lsls	r3, r1, #6
 8003fbc:	4651      	mov	r1, sl
 8003fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fc2:	4651      	mov	r1, sl
 8003fc4:	018a      	lsls	r2, r1, #6
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	1a54      	subs	r4, r2, r1
 8003fca:	4659      	mov	r1, fp
 8003fcc:	eb63 0501 	sbc.w	r5, r3, r1
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	00eb      	lsls	r3, r5, #3
 8003fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fde:	00e2      	lsls	r2, r4, #3
 8003fe0:	4614      	mov	r4, r2
 8003fe2:	461d      	mov	r5, r3
 8003fe4:	4643      	mov	r3, r8
 8003fe6:	18e3      	adds	r3, r4, r3
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	464b      	mov	r3, r9
 8003fec:	eb45 0303 	adc.w	r3, r5, r3
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ffe:	4629      	mov	r1, r5
 8004000:	028b      	lsls	r3, r1, #10
 8004002:	4621      	mov	r1, r4
 8004004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004008:	4621      	mov	r1, r4
 800400a:	028a      	lsls	r2, r1, #10
 800400c:	4610      	mov	r0, r2
 800400e:	4619      	mov	r1, r3
 8004010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004014:	2200      	movs	r2, #0
 8004016:	64bb      	str	r3, [r7, #72]	; 0x48
 8004018:	64fa      	str	r2, [r7, #76]	; 0x4c
 800401a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800401e:	f7fc f8f1 	bl	8000204 <__aeabi_uldivmod>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4613      	mov	r3, r2
 8004028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <HAL_RCC_GetSysClockFreq+0x458>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	0f1b      	lsrs	r3, r3, #28
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800403a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800403e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800404a:	e003      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_RCC_GetSysClockFreq+0x45c>)
 800404e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004052:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004054:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004058:	4618      	mov	r0, r3
 800405a:	37b8      	adds	r7, #184	; 0xb8
 800405c:	46bd      	mov	sp, r7
 800405e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	00f42400 	.word	0x00f42400

0800406c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e28d      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8083 	beq.w	8004192 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800408c:	4b94      	ldr	r3, [pc, #592]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b04      	cmp	r3, #4
 8004096:	d019      	beq.n	80040cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004098:	4b91      	ldr	r3, [pc, #580]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d106      	bne.n	80040b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040a4:	4b8e      	ldr	r3, [pc, #568]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b0:	d00c      	beq.n	80040cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b2:	4b8b      	ldr	r3, [pc, #556]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040ba:	2b0c      	cmp	r3, #12
 80040bc:	d112      	bne.n	80040e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040be:	4b88      	ldr	r3, [pc, #544]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ca:	d10b      	bne.n	80040e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040cc:	4b84      	ldr	r3, [pc, #528]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d05b      	beq.n	8004190 <HAL_RCC_OscConfig+0x124>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d157      	bne.n	8004190 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e25a      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ec:	d106      	bne.n	80040fc <HAL_RCC_OscConfig+0x90>
 80040ee:	4b7c      	ldr	r3, [pc, #496]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a7b      	ldr	r2, [pc, #492]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e01d      	b.n	8004138 <HAL_RCC_OscConfig+0xcc>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0xb4>
 8004106:	4b76      	ldr	r3, [pc, #472]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a75      	ldr	r2, [pc, #468]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800410c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b73      	ldr	r3, [pc, #460]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a72      	ldr	r2, [pc, #456]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e00b      	b.n	8004138 <HAL_RCC_OscConfig+0xcc>
 8004120:	4b6f      	ldr	r3, [pc, #444]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a6e      	ldr	r2, [pc, #440]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	4b6c      	ldr	r3, [pc, #432]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a6b      	ldr	r2, [pc, #428]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d013      	beq.n	8004168 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fc feee 	bl	8000f20 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004148:	f7fc feea 	bl	8000f20 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e21f      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	4b61      	ldr	r3, [pc, #388]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0xdc>
 8004166:	e014      	b.n	8004192 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fc feda 	bl	8000f20 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004170:	f7fc fed6 	bl	8000f20 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	; 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e20b      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	4b57      	ldr	r3, [pc, #348]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x104>
 800418e:	e000      	b.n	8004192 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d06f      	beq.n	800427e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800419e:	4b50      	ldr	r3, [pc, #320]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d017      	beq.n	80041da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041aa:	4b4d      	ldr	r3, [pc, #308]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d105      	bne.n	80041c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041b6:	4b4a      	ldr	r3, [pc, #296]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c2:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ca:	2b0c      	cmp	r3, #12
 80041cc:	d11c      	bne.n	8004208 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ce:	4b44      	ldr	r3, [pc, #272]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d116      	bne.n	8004208 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_RCC_OscConfig+0x186>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d001      	beq.n	80041f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1d3      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f2:	4b3b      	ldr	r3, [pc, #236]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4937      	ldr	r1, [pc, #220]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	e03a      	b.n	800427e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d020      	beq.n	8004252 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004210:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <HAL_RCC_OscConfig+0x278>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fc fe83 	bl	8000f20 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421e:	f7fc fe7f 	bl	8000f20 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e1b4      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004230:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423c:	4b28      	ldr	r3, [pc, #160]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4925      	ldr	r1, [pc, #148]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]
 8004250:	e015      	b.n	800427e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_OscConfig+0x278>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fc fe62 	bl	8000f20 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004260:	f7fc fe5e 	bl	8000f20 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e193      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004272:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d036      	beq.n	80042f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fc fe42 	bl	8000f20 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fc fe3e 	bl	8000f20 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e173      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80042b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x234>
 80042be:	e01b      	b.n	80042f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c0:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fc fe2b 	bl	8000f20 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	e00e      	b.n	80042ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ce:	f7fc fe27 	bl	8000f20 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d907      	bls.n	80042ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e15c      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
 80042e0:	40023800 	.word	0x40023800
 80042e4:	42470000 	.word	0x42470000
 80042e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ec:	4b8a      	ldr	r3, [pc, #552]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 80042ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ea      	bne.n	80042ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8097 	beq.w	8004434 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004306:	2300      	movs	r3, #0
 8004308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430a:	4b83      	ldr	r3, [pc, #524]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10f      	bne.n	8004336 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	4b7f      	ldr	r3, [pc, #508]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	4a7e      	ldr	r2, [pc, #504]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 8004320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004324:	6413      	str	r3, [r2, #64]	; 0x40
 8004326:	4b7c      	ldr	r3, [pc, #496]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004336:	4b79      	ldr	r3, [pc, #484]	; (800451c <HAL_RCC_OscConfig+0x4b0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d118      	bne.n	8004374 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004342:	4b76      	ldr	r3, [pc, #472]	; (800451c <HAL_RCC_OscConfig+0x4b0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a75      	ldr	r2, [pc, #468]	; (800451c <HAL_RCC_OscConfig+0x4b0>)
 8004348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434e:	f7fc fde7 	bl	8000f20 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004356:	f7fc fde3 	bl	8000f20 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e118      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004368:	4b6c      	ldr	r3, [pc, #432]	; (800451c <HAL_RCC_OscConfig+0x4b0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d106      	bne.n	800438a <HAL_RCC_OscConfig+0x31e>
 800437c:	4b66      	ldr	r3, [pc, #408]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	4a65      	ldr	r2, [pc, #404]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6713      	str	r3, [r2, #112]	; 0x70
 8004388:	e01c      	b.n	80043c4 <HAL_RCC_OscConfig+0x358>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b05      	cmp	r3, #5
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0x340>
 8004392:	4b61      	ldr	r3, [pc, #388]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a60      	ldr	r2, [pc, #384]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 8004398:	f043 0304 	orr.w	r3, r3, #4
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
 800439e:	4b5e      	ldr	r3, [pc, #376]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4a5d      	ldr	r2, [pc, #372]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0x358>
 80043ac:	4b5a      	ldr	r3, [pc, #360]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a59      	ldr	r2, [pc, #356]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	4b57      	ldr	r3, [pc, #348]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	4a56      	ldr	r2, [pc, #344]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 80043be:	f023 0304 	bic.w	r3, r3, #4
 80043c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fc fda8 	bl	8000f20 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d2:	e00a      	b.n	80043ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fc fda4 	bl	8000f20 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e0d7      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ea:	4b4b      	ldr	r3, [pc, #300]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0ee      	beq.n	80043d4 <HAL_RCC_OscConfig+0x368>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fc fd92 	bl	8000f20 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004400:	f7fc fd8e 	bl	8000f20 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	; 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e0c1      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004416:	4b40      	ldr	r3, [pc, #256]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1ee      	bne.n	8004400 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d105      	bne.n	8004434 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004428:	4b3b      	ldr	r3, [pc, #236]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	4a3a      	ldr	r2, [pc, #232]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 800442e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004432:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80ad 	beq.w	8004598 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800443e:	4b36      	ldr	r3, [pc, #216]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b08      	cmp	r3, #8
 8004448:	d060      	beq.n	800450c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d145      	bne.n	80044de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	4b33      	ldr	r3, [pc, #204]	; (8004520 <HAL_RCC_OscConfig+0x4b4>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fc fd62 	bl	8000f20 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004460:	f7fc fd5e 	bl	8000f20 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e093      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004472:	4b29      	ldr	r3, [pc, #164]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	019b      	lsls	r3, r3, #6
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	3b01      	subs	r3, #1
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	071b      	lsls	r3, r3, #28
 80044aa:	491b      	ldr	r1, [pc, #108]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b0:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <HAL_RCC_OscConfig+0x4b4>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fc fd33 	bl	8000f20 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044be:	f7fc fd2f 	bl	8000f20 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e064      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d0:	4b11      	ldr	r3, [pc, #68]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x452>
 80044dc:	e05c      	b.n	8004598 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <HAL_RCC_OscConfig+0x4b4>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fc fd1c 	bl	8000f20 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fc fd18 	bl	8000f20 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e04d      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fe:	4b06      	ldr	r3, [pc, #24]	; (8004518 <HAL_RCC_OscConfig+0x4ac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x480>
 800450a:	e045      	b.n	8004598 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d107      	bne.n	8004524 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e040      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
 8004518:	40023800 	.word	0x40023800
 800451c:	40007000 	.word	0x40007000
 8004520:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004524:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <HAL_RCC_OscConfig+0x538>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d030      	beq.n	8004594 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d129      	bne.n	8004594 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d122      	bne.n	8004594 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004554:	4013      	ands	r3, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800455a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800455c:	4293      	cmp	r3, r2
 800455e:	d119      	bne.n	8004594 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	3b01      	subs	r3, #1
 800456e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004570:	429a      	cmp	r2, r3
 8004572:	d10f      	bne.n	8004594 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d107      	bne.n	8004594 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40023800 	.word	0x40023800

080045a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e07b      	b.n	80046b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d108      	bne.n	80045d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ca:	d009      	beq.n	80045e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	61da      	str	r2, [r3, #28]
 80045d2:	e005      	b.n	80045e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fc fb0a 	bl	8000c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004616:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	ea42 0103 	orr.w	r1, r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 0104 	and.w	r1, r3, #4
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	f003 0210 	and.w	r2, r3, #16
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e03f      	b.n	800474c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fc fadf 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2224      	movs	r2, #36	; 0x24
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f828 	bl	8004754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004712:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004722:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004732:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004758:	b0c0      	sub	sp, #256	; 0x100
 800475a:	af00      	add	r7, sp, #0
 800475c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004770:	68d9      	ldr	r1, [r3, #12]
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	ea40 0301 	orr.w	r3, r0, r1
 800477c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	431a      	orrs	r2, r3
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047ac:	f021 010c 	bic.w	r1, r1, #12
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047ba:	430b      	orrs	r3, r1
 80047bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	6999      	ldr	r1, [r3, #24]
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	ea40 0301 	orr.w	r3, r0, r1
 80047da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b8f      	ldr	r3, [pc, #572]	; (8004a20 <UART_SetConfig+0x2cc>)
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d005      	beq.n	80047f4 <UART_SetConfig+0xa0>
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b8d      	ldr	r3, [pc, #564]	; (8004a24 <UART_SetConfig+0x2d0>)
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d104      	bne.n	80047fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047f4:	f7fe fecc 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 80047f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047fc:	e003      	b.n	8004806 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047fe:	f7fe feb3 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8004802:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004810:	f040 810c 	bne.w	8004a2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800481e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004822:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004826:	4622      	mov	r2, r4
 8004828:	462b      	mov	r3, r5
 800482a:	1891      	adds	r1, r2, r2
 800482c:	65b9      	str	r1, [r7, #88]	; 0x58
 800482e:	415b      	adcs	r3, r3
 8004830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004836:	4621      	mov	r1, r4
 8004838:	eb12 0801 	adds.w	r8, r2, r1
 800483c:	4629      	mov	r1, r5
 800483e:	eb43 0901 	adc.w	r9, r3, r1
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800484e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004856:	4690      	mov	r8, r2
 8004858:	4699      	mov	r9, r3
 800485a:	4623      	mov	r3, r4
 800485c:	eb18 0303 	adds.w	r3, r8, r3
 8004860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004864:	462b      	mov	r3, r5
 8004866:	eb49 0303 	adc.w	r3, r9, r3
 800486a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800487a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800487e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004882:	460b      	mov	r3, r1
 8004884:	18db      	adds	r3, r3, r3
 8004886:	653b      	str	r3, [r7, #80]	; 0x50
 8004888:	4613      	mov	r3, r2
 800488a:	eb42 0303 	adc.w	r3, r2, r3
 800488e:	657b      	str	r3, [r7, #84]	; 0x54
 8004890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004898:	f7fb fcb4 	bl	8000204 <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4b61      	ldr	r3, [pc, #388]	; (8004a28 <UART_SetConfig+0x2d4>)
 80048a2:	fba3 2302 	umull	r2, r3, r3, r2
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	011c      	lsls	r4, r3, #4
 80048aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	1891      	adds	r1, r2, r2
 80048c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80048c4:	415b      	adcs	r3, r3
 80048c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048cc:	4641      	mov	r1, r8
 80048ce:	eb12 0a01 	adds.w	sl, r2, r1
 80048d2:	4649      	mov	r1, r9
 80048d4:	eb43 0b01 	adc.w	fp, r3, r1
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048ec:	4692      	mov	sl, r2
 80048ee:	469b      	mov	fp, r3
 80048f0:	4643      	mov	r3, r8
 80048f2:	eb1a 0303 	adds.w	r3, sl, r3
 80048f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048fa:	464b      	mov	r3, r9
 80048fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004910:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004914:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004918:	460b      	mov	r3, r1
 800491a:	18db      	adds	r3, r3, r3
 800491c:	643b      	str	r3, [r7, #64]	; 0x40
 800491e:	4613      	mov	r3, r2
 8004920:	eb42 0303 	adc.w	r3, r2, r3
 8004924:	647b      	str	r3, [r7, #68]	; 0x44
 8004926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800492a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800492e:	f7fb fc69 	bl	8000204 <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4611      	mov	r1, r2
 8004938:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <UART_SetConfig+0x2d4>)
 800493a:	fba3 2301 	umull	r2, r3, r3, r1
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2264      	movs	r2, #100	; 0x64
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	1acb      	subs	r3, r1, r3
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800494e:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <UART_SetConfig+0x2d4>)
 8004950:	fba3 2302 	umull	r2, r3, r3, r2
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800495c:	441c      	add	r4, r3
 800495e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004962:	2200      	movs	r2, #0
 8004964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004968:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800496c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004970:	4642      	mov	r2, r8
 8004972:	464b      	mov	r3, r9
 8004974:	1891      	adds	r1, r2, r2
 8004976:	63b9      	str	r1, [r7, #56]	; 0x38
 8004978:	415b      	adcs	r3, r3
 800497a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800497c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004980:	4641      	mov	r1, r8
 8004982:	1851      	adds	r1, r2, r1
 8004984:	6339      	str	r1, [r7, #48]	; 0x30
 8004986:	4649      	mov	r1, r9
 8004988:	414b      	adcs	r3, r1
 800498a:	637b      	str	r3, [r7, #52]	; 0x34
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004998:	4659      	mov	r1, fp
 800499a:	00cb      	lsls	r3, r1, #3
 800499c:	4651      	mov	r1, sl
 800499e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049a2:	4651      	mov	r1, sl
 80049a4:	00ca      	lsls	r2, r1, #3
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	4642      	mov	r2, r8
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049b4:	464b      	mov	r3, r9
 80049b6:	460a      	mov	r2, r1
 80049b8:	eb42 0303 	adc.w	r3, r2, r3
 80049bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049d4:	460b      	mov	r3, r1
 80049d6:	18db      	adds	r3, r3, r3
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049da:	4613      	mov	r3, r2
 80049dc:	eb42 0303 	adc.w	r3, r2, r3
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049ea:	f7fb fc0b 	bl	8000204 <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <UART_SetConfig+0x2d4>)
 80049f4:	fba3 1302 	umull	r1, r3, r3, r2
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	2164      	movs	r1, #100	; 0x64
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	3332      	adds	r3, #50	; 0x32
 8004a06:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <UART_SetConfig+0x2d4>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	f003 0207 	and.w	r2, r3, #7
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4422      	add	r2, r4
 8004a1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a1c:	e105      	b.n	8004c2a <UART_SetConfig+0x4d6>
 8004a1e:	bf00      	nop
 8004a20:	40011000 	.word	0x40011000
 8004a24:	40011400 	.word	0x40011400
 8004a28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a3e:	4642      	mov	r2, r8
 8004a40:	464b      	mov	r3, r9
 8004a42:	1891      	adds	r1, r2, r2
 8004a44:	6239      	str	r1, [r7, #32]
 8004a46:	415b      	adcs	r3, r3
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a4e:	4641      	mov	r1, r8
 8004a50:	1854      	adds	r4, r2, r1
 8004a52:	4649      	mov	r1, r9
 8004a54:	eb43 0501 	adc.w	r5, r3, r1
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	00eb      	lsls	r3, r5, #3
 8004a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a66:	00e2      	lsls	r2, r4, #3
 8004a68:	4614      	mov	r4, r2
 8004a6a:	461d      	mov	r5, r3
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	18e3      	adds	r3, r4, r3
 8004a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a74:	464b      	mov	r3, r9
 8004a76:	eb45 0303 	adc.w	r3, r5, r3
 8004a7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	008b      	lsls	r3, r1, #2
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	008a      	lsls	r2, r1, #2
 8004aa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004aac:	f7fb fbaa 	bl	8000204 <__aeabi_uldivmod>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4b60      	ldr	r3, [pc, #384]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	011c      	lsls	r4, r3, #4
 8004abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ac8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004acc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	1891      	adds	r1, r2, r2
 8004ad6:	61b9      	str	r1, [r7, #24]
 8004ad8:	415b      	adcs	r3, r3
 8004ada:	61fb      	str	r3, [r7, #28]
 8004adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	1851      	adds	r1, r2, r1
 8004ae4:	6139      	str	r1, [r7, #16]
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	414b      	adcs	r3, r1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af8:	4659      	mov	r1, fp
 8004afa:	00cb      	lsls	r3, r1, #3
 8004afc:	4651      	mov	r1, sl
 8004afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b02:	4651      	mov	r1, sl
 8004b04:	00ca      	lsls	r2, r1, #3
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b14:	464b      	mov	r3, r9
 8004b16:	460a      	mov	r2, r1
 8004b18:	eb42 0303 	adc.w	r3, r2, r3
 8004b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b38:	4649      	mov	r1, r9
 8004b3a:	008b      	lsls	r3, r1, #2
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b42:	4641      	mov	r1, r8
 8004b44:	008a      	lsls	r2, r1, #2
 8004b46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b4a:	f7fb fb5b 	bl	8000204 <__aeabi_uldivmod>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004b54:	fba3 1302 	umull	r1, r3, r3, r2
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	2164      	movs	r1, #100	; 0x64
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	3332      	adds	r3, #50	; 0x32
 8004b66:	4a34      	ldr	r2, [pc, #208]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004b68:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6c:	095b      	lsrs	r3, r3, #5
 8004b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b72:	441c      	add	r4, r3
 8004b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b78:	2200      	movs	r2, #0
 8004b7a:	673b      	str	r3, [r7, #112]	; 0x70
 8004b7c:	677a      	str	r2, [r7, #116]	; 0x74
 8004b7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b82:	4642      	mov	r2, r8
 8004b84:	464b      	mov	r3, r9
 8004b86:	1891      	adds	r1, r2, r2
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	415b      	adcs	r3, r3
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b92:	4641      	mov	r1, r8
 8004b94:	1851      	adds	r1, r2, r1
 8004b96:	6039      	str	r1, [r7, #0]
 8004b98:	4649      	mov	r1, r9
 8004b9a:	414b      	adcs	r3, r1
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004baa:	4659      	mov	r1, fp
 8004bac:	00cb      	lsls	r3, r1, #3
 8004bae:	4651      	mov	r1, sl
 8004bb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb4:	4651      	mov	r1, sl
 8004bb6:	00ca      	lsls	r2, r1, #3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4642      	mov	r2, r8
 8004bc0:	189b      	adds	r3, r3, r2
 8004bc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bc4:	464b      	mov	r3, r9
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	eb42 0303 	adc.w	r3, r2, r3
 8004bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	663b      	str	r3, [r7, #96]	; 0x60
 8004bd8:	667a      	str	r2, [r7, #100]	; 0x64
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004be6:	4649      	mov	r1, r9
 8004be8:	008b      	lsls	r3, r1, #2
 8004bea:	4641      	mov	r1, r8
 8004bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	008a      	lsls	r2, r1, #2
 8004bf4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bf8:	f7fb fb04 	bl	8000204 <__aeabi_uldivmod>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004c02:	fba3 1302 	umull	r1, r3, r3, r2
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2164      	movs	r1, #100	; 0x64
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	3332      	adds	r3, #50	; 0x32
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	f003 020f 	and.w	r2, r3, #15
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4422      	add	r2, r4
 8004c28:	609a      	str	r2, [r3, #8]
}
 8004c2a:	bf00      	nop
 8004c2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c30:	46bd      	mov	sp, r7
 8004c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c36:	bf00      	nop
 8004c38:	51eb851f 	.word	0x51eb851f

08004c3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	f107 001c 	add.w	r0, r7, #28
 8004c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d122      	bne.n	8004c9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d105      	bne.n	8004c8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f001 fbe8 	bl	8006464 <USB_CoreReset>
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	e01a      	b.n	8004cd0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f001 fbdc 	bl	8006464 <USB_CoreReset>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc2:	e005      	b.n	8004cd0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d10b      	bne.n	8004cee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f043 0206 	orr.w	r2, r3, #6
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cfa:	b004      	add	sp, #16
 8004cfc:	4770      	bx	lr
	...

08004d00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d165      	bne.n	8004de0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4a41      	ldr	r2, [pc, #260]	; (8004e1c <USB_SetTurnaroundTime+0x11c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d906      	bls.n	8004d2a <USB_SetTurnaroundTime+0x2a>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4a40      	ldr	r2, [pc, #256]	; (8004e20 <USB_SetTurnaroundTime+0x120>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d202      	bcs.n	8004d2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d24:	230f      	movs	r3, #15
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e062      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4a3c      	ldr	r2, [pc, #240]	; (8004e20 <USB_SetTurnaroundTime+0x120>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d306      	bcc.n	8004d40 <USB_SetTurnaroundTime+0x40>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4a3b      	ldr	r2, [pc, #236]	; (8004e24 <USB_SetTurnaroundTime+0x124>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d202      	bcs.n	8004d40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d3a:	230e      	movs	r3, #14
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e057      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4a38      	ldr	r2, [pc, #224]	; (8004e24 <USB_SetTurnaroundTime+0x124>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d306      	bcc.n	8004d56 <USB_SetTurnaroundTime+0x56>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4a37      	ldr	r2, [pc, #220]	; (8004e28 <USB_SetTurnaroundTime+0x128>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d202      	bcs.n	8004d56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d50:	230d      	movs	r3, #13
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e04c      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4a33      	ldr	r2, [pc, #204]	; (8004e28 <USB_SetTurnaroundTime+0x128>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d306      	bcc.n	8004d6c <USB_SetTurnaroundTime+0x6c>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4a32      	ldr	r2, [pc, #200]	; (8004e2c <USB_SetTurnaroundTime+0x12c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d802      	bhi.n	8004d6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d66:	230c      	movs	r3, #12
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	e041      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4a2f      	ldr	r2, [pc, #188]	; (8004e2c <USB_SetTurnaroundTime+0x12c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d906      	bls.n	8004d82 <USB_SetTurnaroundTime+0x82>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4a2e      	ldr	r2, [pc, #184]	; (8004e30 <USB_SetTurnaroundTime+0x130>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d802      	bhi.n	8004d82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d7c:	230b      	movs	r3, #11
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e036      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <USB_SetTurnaroundTime+0x130>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d906      	bls.n	8004d98 <USB_SetTurnaroundTime+0x98>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <USB_SetTurnaroundTime+0x134>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d802      	bhi.n	8004d98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d92:	230a      	movs	r3, #10
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e02b      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4a26      	ldr	r2, [pc, #152]	; (8004e34 <USB_SetTurnaroundTime+0x134>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d906      	bls.n	8004dae <USB_SetTurnaroundTime+0xae>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4a25      	ldr	r2, [pc, #148]	; (8004e38 <USB_SetTurnaroundTime+0x138>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d202      	bcs.n	8004dae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004da8:	2309      	movs	r3, #9
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e020      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <USB_SetTurnaroundTime+0x138>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d306      	bcc.n	8004dc4 <USB_SetTurnaroundTime+0xc4>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <USB_SetTurnaroundTime+0x13c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d802      	bhi.n	8004dc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	e015      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4a1d      	ldr	r2, [pc, #116]	; (8004e3c <USB_SetTurnaroundTime+0x13c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d906      	bls.n	8004dda <USB_SetTurnaroundTime+0xda>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4a1c      	ldr	r2, [pc, #112]	; (8004e40 <USB_SetTurnaroundTime+0x140>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d202      	bcs.n	8004dda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004dd4:	2307      	movs	r3, #7
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	e00a      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004dda:	2306      	movs	r3, #6
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e007      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004de6:	2309      	movs	r3, #9
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e001      	b.n	8004df0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004dec:	2309      	movs	r3, #9
 8004dee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	029b      	lsls	r3, r3, #10
 8004e04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	00d8acbf 	.word	0x00d8acbf
 8004e20:	00e4e1c0 	.word	0x00e4e1c0
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	01067380 	.word	0x01067380
 8004e2c:	011a499f 	.word	0x011a499f
 8004e30:	01312cff 	.word	0x01312cff
 8004e34:	014ca43f 	.word	0x014ca43f
 8004e38:	016e3600 	.word	0x016e3600
 8004e3c:	01a6ab1f 	.word	0x01a6ab1f
 8004e40:	01e84800 	.word	0x01e84800

08004e44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f043 0201 	orr.w	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d115      	bne.n	8004ed6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f7fc f83e 	bl	8000f38 <HAL_Delay>
      ms++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f001 fa3f 	bl	8006346 <USB_GetMode>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d01e      	beq.n	8004f0c <USB_SetCurrentMode+0x84>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b31      	cmp	r3, #49	; 0x31
 8004ed2:	d9f0      	bls.n	8004eb6 <USB_SetCurrentMode+0x2e>
 8004ed4:	e01a      	b.n	8004f0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d115      	bne.n	8004f08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ee8:	2001      	movs	r0, #1
 8004eea:	f7fc f825 	bl	8000f38 <HAL_Delay>
      ms++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f001 fa26 	bl	8006346 <USB_GetMode>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <USB_SetCurrentMode+0x84>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b31      	cmp	r3, #49	; 0x31
 8004f04:	d9f0      	bls.n	8004ee8 <USB_SetCurrentMode+0x60>
 8004f06:	e001      	b.n	8004f0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e005      	b.n	8004f18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b32      	cmp	r3, #50	; 0x32
 8004f10:	d101      	bne.n	8004f16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f20:	b084      	sub	sp, #16
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	e009      	b.n	8004f54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3340      	adds	r3, #64	; 0x40
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	3301      	adds	r3, #1
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b0e      	cmp	r3, #14
 8004f58:	d9f2      	bls.n	8004f40 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d11c      	bne.n	8004f9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f6e:	f043 0302 	orr.w	r3, r3, #2
 8004f72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e005      	b.n	8004fa6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fac:	461a      	mov	r2, r3
 8004fae:	2300      	movs	r3, #0
 8004fb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb8:	4619      	mov	r1, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	680b      	ldr	r3, [r1, #0]
 8004fc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d10c      	bne.n	8004fe6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d104      	bne.n	8004fdc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f965 	bl	80052a4 <USB_SetDevSpeed>
 8004fda:	e008      	b.n	8004fee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fdc:	2101      	movs	r1, #1
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f960 	bl	80052a4 <USB_SetDevSpeed>
 8004fe4:	e003      	b.n	8004fee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fe6:	2103      	movs	r1, #3
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f95b 	bl	80052a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fee:	2110      	movs	r1, #16
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f8f3 	bl	80051dc <USB_FlushTxFifo>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f91f 	bl	8005244 <USB_FlushRxFifo>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005016:	461a      	mov	r2, r3
 8005018:	2300      	movs	r3, #0
 800501a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005022:	461a      	mov	r2, r3
 8005024:	2300      	movs	r3, #0
 8005026:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	461a      	mov	r2, r3
 8005030:	2300      	movs	r3, #0
 8005032:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005034:	2300      	movs	r3, #0
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	e043      	b.n	80050c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800504c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005050:	d118      	bne.n	8005084 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10a      	bne.n	800506e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	461a      	mov	r2, r3
 8005066:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	e013      	b.n	8005096 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	461a      	mov	r2, r3
 800507c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e008      	b.n	8005096 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	461a      	mov	r2, r3
 8005092:	2300      	movs	r3, #0
 8005094:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a2:	461a      	mov	r2, r3
 80050a4:	2300      	movs	r3, #0
 80050a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b4:	461a      	mov	r2, r3
 80050b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	3301      	adds	r3, #1
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d3b7      	bcc.n	800503a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ca:	2300      	movs	r3, #0
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e043      	b.n	8005158 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e6:	d118      	bne.n	800511a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	461a      	mov	r2, r3
 80050fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	e013      	b.n	800512c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005110:	461a      	mov	r2, r3
 8005112:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	e008      	b.n	800512c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005126:	461a      	mov	r2, r3
 8005128:	2300      	movs	r3, #0
 800512a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	461a      	mov	r2, r3
 800513a:	2300      	movs	r3, #0
 800513c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	461a      	mov	r2, r3
 800514c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005150:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	3301      	adds	r3, #1
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	429a      	cmp	r2, r3
 800515e:	d3b7      	bcc.n	80050d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800516e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005172:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005180:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	2b00      	cmp	r3, #0
 8005186:	d105      	bne.n	8005194 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f043 0210 	orr.w	r2, r3, #16
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699a      	ldr	r2, [r3, #24]
 8005198:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <USB_DevInit+0x2b8>)
 800519a:	4313      	orrs	r3, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f043 0208 	orr.w	r2, r3, #8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d107      	bne.n	80051c8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051c0:	f043 0304 	orr.w	r3, r3, #4
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051d4:	b004      	add	sp, #16
 80051d6:	4770      	bx	lr
 80051d8:	803c3800 	.word	0x803c3800

080051dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3301      	adds	r3, #1
 80051ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4a13      	ldr	r2, [pc, #76]	; (8005240 <USB_FlushTxFifo+0x64>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d901      	bls.n	80051fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e01b      	b.n	8005234 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	daf2      	bge.n	80051ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	019b      	lsls	r3, r3, #6
 800520c:	f043 0220 	orr.w	r2, r3, #32
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3301      	adds	r3, #1
 8005218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a08      	ldr	r2, [pc, #32]	; (8005240 <USB_FlushTxFifo+0x64>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e006      	b.n	8005234 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b20      	cmp	r3, #32
 8005230:	d0f0      	beq.n	8005214 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	00030d40 	.word	0x00030d40

08005244 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3301      	adds	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a11      	ldr	r2, [pc, #68]	; (80052a0 <USB_FlushRxFifo+0x5c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e018      	b.n	8005294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	daf2      	bge.n	8005250 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2210      	movs	r2, #16
 8005272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3301      	adds	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4a08      	ldr	r2, [pc, #32]	; (80052a0 <USB_FlushRxFifo+0x5c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e006      	b.n	8005294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b10      	cmp	r3, #16
 8005290:	d0f0      	beq.n	8005274 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	00030d40 	.word	0x00030d40

080052a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c4:	4313      	orrs	r3, r2
 80052c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b087      	sub	sp, #28
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 0306 	and.w	r3, r3, #6
 80052ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d102      	bne.n	80052fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052f6:	2300      	movs	r3, #0
 80052f8:	75fb      	strb	r3, [r7, #23]
 80052fa:	e00a      	b.n	8005312 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d002      	beq.n	8005308 <USB_GetDevSpeed+0x32>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b06      	cmp	r3, #6
 8005306:	d102      	bne.n	800530e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005308:	2302      	movs	r3, #2
 800530a:	75fb      	strb	r3, [r7, #23]
 800530c:	e001      	b.n	8005312 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800530e:	230f      	movs	r3, #15
 8005310:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005312:	7dfb      	ldrb	r3, [r7, #23]
}
 8005314:	4618      	mov	r0, r3
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d13a      	bne.n	80053b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	2101      	movs	r1, #1
 800534e:	fa01 f303 	lsl.w	r3, r1, r3
 8005352:	b29b      	uxth	r3, r3
 8005354:	68f9      	ldr	r1, [r7, #12]
 8005356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800535a:	4313      	orrs	r3, r2
 800535c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d155      	bne.n	8005420 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	791b      	ldrb	r3, [r3, #4]
 800538e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005390:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	059b      	lsls	r3, r3, #22
 8005396:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005398:	4313      	orrs	r3, r2
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	0151      	lsls	r1, r2, #5
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	440a      	add	r2, r1
 80053a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	e036      	b.n	8005420 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b8:	69da      	ldr	r2, [r3, #28]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	2101      	movs	r1, #1
 80053c4:	fa01 f303 	lsl.w	r3, r1, r3
 80053c8:	041b      	lsls	r3, r3, #16
 80053ca:	68f9      	ldr	r1, [r7, #12]
 80053cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d11a      	bne.n	8005420 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	791b      	ldrb	r3, [r3, #4]
 8005404:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005406:	430b      	orrs	r3, r1
 8005408:	4313      	orrs	r3, r2
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d161      	bne.n	8005510 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800545e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005462:	d11f      	bne.n	80054a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	0151      	lsls	r1, r2, #5
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	440a      	add	r2, r1
 800547a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005482:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	440a      	add	r2, r1
 800549a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	f003 030f 	and.w	r3, r3, #15
 80054b4:	2101      	movs	r1, #1
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	43db      	mvns	r3, r3
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c4:	4013      	ands	r3, r2
 80054c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	2101      	movs	r1, #1
 80054da:	fa01 f303 	lsl.w	r3, r1, r3
 80054de:	b29b      	uxth	r3, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	68f9      	ldr	r1, [r7, #12]
 80054e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e8:	4013      	ands	r3, r2
 80054ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	0159      	lsls	r1, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	440b      	add	r3, r1
 8005502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005506:	4619      	mov	r1, r3
 8005508:	4b35      	ldr	r3, [pc, #212]	; (80055e0 <USB_DeactivateEndpoint+0x1b0>)
 800550a:	4013      	ands	r3, r2
 800550c:	600b      	str	r3, [r1, #0]
 800550e:	e060      	b.n	80055d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005526:	d11f      	bne.n	8005568 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	440a      	add	r2, r1
 800553e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005542:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005546:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005566:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	2101      	movs	r1, #1
 800557a:	fa01 f303 	lsl.w	r3, r1, r3
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	43db      	mvns	r3, r3
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005588:	4013      	ands	r3, r2
 800558a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	2101      	movs	r1, #1
 800559e:	fa01 f303 	lsl.w	r3, r1, r3
 80055a2:	041b      	lsls	r3, r3, #16
 80055a4:	43db      	mvns	r3, r3
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ac:	4013      	ands	r3, r2
 80055ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	0159      	lsls	r1, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	440b      	add	r3, r1
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	4619      	mov	r1, r3
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <USB_DeactivateEndpoint+0x1b4>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	ec337800 	.word	0xec337800
 80055e4:	eff37800 	.word	0xeff37800

080055e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	4613      	mov	r3, r2
 80055f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	2b01      	cmp	r3, #1
 8005606:	f040 815c 	bne.w	80058c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d132      	bne.n	8005678 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005630:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005634:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005654:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005670:	0cdb      	lsrs	r3, r3, #19
 8005672:	04db      	lsls	r3, r3, #19
 8005674:	6113      	str	r3, [r2, #16]
 8005676:	e074      	b.n	8005762 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005692:	0cdb      	lsrs	r3, r3, #19
 8005694:	04db      	lsls	r3, r3, #19
 8005696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	6999      	ldr	r1, [r3, #24]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	440b      	add	r3, r1
 80056d4:	1e59      	subs	r1, r3, #1
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	fbb1 f3f3 	udiv	r3, r1, r3
 80056de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056e0:	4b9d      	ldr	r3, [pc, #628]	; (8005958 <USB_EPStartXfer+0x370>)
 80056e2:	400b      	ands	r3, r1
 80056e4:	69b9      	ldr	r1, [r7, #24]
 80056e6:	0148      	lsls	r0, r1, #5
 80056e8:	69f9      	ldr	r1, [r7, #28]
 80056ea:	4401      	add	r1, r0
 80056ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056f0:	4313      	orrs	r3, r2
 80056f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570a:	69b9      	ldr	r1, [r7, #24]
 800570c:	0148      	lsls	r0, r1, #5
 800570e:	69f9      	ldr	r1, [r7, #28]
 8005710:	4401      	add	r1, r0
 8005712:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005716:	4313      	orrs	r3, r2
 8005718:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	791b      	ldrb	r3, [r3, #4]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d11f      	bne.n	8005762 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005740:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	440a      	add	r2, r1
 8005758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005760:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d14b      	bne.n	8005800 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d009      	beq.n	8005784 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	461a      	mov	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	791b      	ldrb	r3, [r3, #4]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d128      	bne.n	80057de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d110      	bne.n	80057be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	e00f      	b.n	80057de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e133      	b.n	8005a68 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	440a      	add	r2, r1
 8005816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800581e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	791b      	ldrb	r3, [r3, #4]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d015      	beq.n	8005854 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 811b 	beq.w	8005a68 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	2101      	movs	r1, #1
 8005844:	fa01 f303 	lsl.w	r3, r1, r3
 8005848:	69f9      	ldr	r1, [r7, #28]
 800584a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800584e:	4313      	orrs	r3, r2
 8005850:	634b      	str	r3, [r1, #52]	; 0x34
 8005852:	e109      	b.n	8005a68 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005860:	2b00      	cmp	r3, #0
 8005862:	d110      	bne.n	8005886 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	e00f      	b.n	80058a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6919      	ldr	r1, [r3, #16]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	b298      	uxth	r0, r3
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4603      	mov	r3, r0
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fade 	bl	8005e7c <USB_WritePacket>
 80058c0:	e0d2      	b.n	8005a68 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	0151      	lsls	r1, r2, #5
 80058d4:	69fa      	ldr	r2, [r7, #28]
 80058d6:	440a      	add	r2, r1
 80058d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058dc:	0cdb      	lsrs	r3, r3, #19
 80058de:	04db      	lsls	r3, r3, #19
 80058e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005900:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005904:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d126      	bne.n	800595c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005924:	69b9      	ldr	r1, [r7, #24]
 8005926:	0148      	lsls	r0, r1, #5
 8005928:	69f9      	ldr	r1, [r7, #28]
 800592a:	4401      	add	r1, r0
 800592c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005930:	4313      	orrs	r3, r2
 8005932:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005952:	6113      	str	r3, [r2, #16]
 8005954:	e03a      	b.n	80059cc <USB_EPStartXfer+0x3e4>
 8005956:	bf00      	nop
 8005958:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	699a      	ldr	r2, [r3, #24]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4413      	add	r3, r2
 8005966:	1e5a      	subs	r2, r3, #1
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	8afa      	ldrh	r2, [r7, #22]
 8005978:	fb03 f202 	mul.w	r2, r3, r2
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	8afb      	ldrh	r3, [r7, #22]
 8005990:	04d9      	lsls	r1, r3, #19
 8005992:	4b38      	ldr	r3, [pc, #224]	; (8005a74 <USB_EPStartXfer+0x48c>)
 8005994:	400b      	ands	r3, r1
 8005996:	69b9      	ldr	r1, [r7, #24]
 8005998:	0148      	lsls	r0, r1, #5
 800599a:	69f9      	ldr	r1, [r7, #28]
 800599c:	4401      	add	r1, r0
 800599e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059a2:	4313      	orrs	r3, r2
 80059a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059bc:	69b9      	ldr	r1, [r7, #24]
 80059be:	0148      	lsls	r0, r1, #5
 80059c0:	69f9      	ldr	r1, [r7, #28]
 80059c2:	4401      	add	r1, r0
 80059c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059c8:	4313      	orrs	r3, r2
 80059ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10d      	bne.n	80059ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6919      	ldr	r1, [r3, #16]
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	460a      	mov	r2, r1
 80059ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	791b      	ldrb	r3, [r3, #4]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d128      	bne.n	8005a48 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d110      	bne.n	8005a28 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	e00f      	b.n	8005a48 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3720      	adds	r7, #32
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	1ff80000 	.word	0x1ff80000

08005a78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	f040 80ce 	bne.w	8005c36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d132      	bne.n	8005b08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005abc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ac0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ac4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	0151      	lsls	r1, r2, #5
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	440a      	add	r2, r1
 8005adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ae4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b00:	0cdb      	lsrs	r3, r3, #19
 8005b02:	04db      	lsls	r3, r3, #19
 8005b04:	6113      	str	r3, [r2, #16]
 8005b06:	e04e      	b.n	8005ba6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b22:	0cdb      	lsrs	r3, r3, #19
 8005b24:	04db      	lsls	r3, r3, #19
 8005b26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	699a      	ldr	r2, [r3, #24]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d903      	bls.n	8005b60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b96:	6939      	ldr	r1, [r7, #16]
 8005b98:	0148      	lsls	r0, r1, #5
 8005b9a:	6979      	ldr	r1, [r7, #20]
 8005b9c:	4401      	add	r1, r0
 8005b9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d11e      	bne.n	8005bea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	e097      	b.n	8005d1a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 8083 	beq.w	8005d1a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	2101      	movs	r1, #1
 8005c26:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2a:	6979      	ldr	r1, [r7, #20]
 8005c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c30:	4313      	orrs	r3, r2
 8005c32:	634b      	str	r3, [r1, #52]	; 0x34
 8005c34:	e071      	b.n	8005d1a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c50:	0cdb      	lsrs	r3, r3, #19
 8005c52:	04db      	lsls	r3, r3, #19
 8005c54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cc8:	6939      	ldr	r1, [r7, #16]
 8005cca:	0148      	lsls	r0, r1, #5
 8005ccc:	6979      	ldr	r1, [r7, #20]
 8005cce:	4401      	add	r1, r0
 8005cd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d10d      	bne.n	8005cfa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6919      	ldr	r1, [r3, #16]
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf6:	460a      	mov	r2, r1
 8005cf8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d14a      	bne.n	8005ddc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d5e:	f040 8086 	bne.w	8005e6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	7812      	ldrb	r2, [r2, #0]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3301      	adds	r3, #1
 8005dae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d902      	bls.n	8005dc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8005dbe:	e056      	b.n	8005e6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd8:	d0e7      	beq.n	8005daa <USB_EPStopXfer+0x82>
 8005dda:	e048      	b.n	8005e6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df4:	d13b      	bne.n	8005e6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	7812      	ldrb	r2, [r2, #0]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d902      	bls.n	8005e54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
          break;
 8005e52:	e00c      	b.n	8005e6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6c:	d0e7      	beq.n	8005e3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b089      	sub	sp, #36	; 0x24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	4611      	mov	r1, r2
 8005e88:	461a      	mov	r2, r3
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	71fb      	strb	r3, [r7, #7]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d123      	bne.n	8005eea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ea2:	88bb      	ldrh	r3, [r7, #4]
 8005ea4:	3303      	adds	r3, #3
 8005ea6:	089b      	lsrs	r3, r3, #2
 8005ea8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e018      	b.n	8005ee2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	031a      	lsls	r2, r3, #12
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d3e2      	bcc.n	8005eb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3724      	adds	r7, #36	; 0x24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b08b      	sub	sp, #44	; 0x2c
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	4613      	mov	r3, r2
 8005f04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f0e:	88fb      	ldrh	r3, [r7, #6]
 8005f10:	089b      	lsrs	r3, r3, #2
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f1e:	2300      	movs	r3, #0
 8005f20:	623b      	str	r3, [r7, #32]
 8005f22:	e014      	b.n	8005f4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	3301      	adds	r3, #1
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	3301      	adds	r3, #1
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	3301      	adds	r3, #1
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	3301      	adds	r3, #1
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	623b      	str	r3, [r7, #32]
 8005f4e:	6a3a      	ldr	r2, [r7, #32]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d3e6      	bcc.n	8005f24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f56:	8bfb      	ldrh	r3, [r7, #30]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01e      	beq.n	8005f9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f66:	461a      	mov	r2, r3
 8005f68:	f107 0310 	add.w	r3, r7, #16
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	701a      	strb	r2, [r3, #0]
      i++;
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	3301      	adds	r3, #1
 8005f86:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f8e:	8bfb      	ldrh	r3, [r7, #30]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f94:	8bfb      	ldrh	r3, [r7, #30]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1ea      	bne.n	8005f70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	372c      	adds	r7, #44	; 0x2c
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	785b      	ldrb	r3, [r3, #1]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d12c      	bne.n	800601e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	db12      	blt.n	8005ffc <USB_EPSetStall+0x54>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00f      	beq.n	8005ffc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ffa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	e02b      	b.n	8006076 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	db12      	blt.n	8006056 <USB_EPSetStall+0xae>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00f      	beq.n	8006056 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006050:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006054:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006074:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d128      	bne.n	80060f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	791b      	ldrb	r3, [r3, #4]
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d003      	beq.n	80060d0 <USB_EPClearStall+0x4c>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	791b      	ldrb	r3, [r3, #4]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d138      	bne.n	8006142 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	e027      	b.n	8006142 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800610c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006110:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	791b      	ldrb	r3, [r3, #4]
 8006116:	2b03      	cmp	r3, #3
 8006118:	d003      	beq.n	8006122 <USB_EPClearStall+0x9e>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	791b      	ldrb	r3, [r3, #4]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d10f      	bne.n	8006142 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006140:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800616e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006172:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006184:	68f9      	ldr	r1, [r7, #12]
 8006186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800618a:	4313      	orrs	r3, r2
 800618c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061b6:	f023 0303 	bic.w	r3, r3, #3
 80061ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ca:	f023 0302 	bic.w	r3, r3, #2
 80061ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061f8:	f023 0303 	bic.w	r3, r3, #3
 80061fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800620c:	f043 0302 	orr.w	r3, r3, #2
 8006210:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4013      	ands	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006238:	68fb      	ldr	r3, [r7, #12]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	4013      	ands	r3, r2
 8006268:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	0c1b      	lsrs	r3, r3, #16
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	4013      	ands	r3, r2
 800629c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	b29b      	uxth	r3, r3
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b085      	sub	sp, #20
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	4013      	ands	r3, r2
 80062da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062dc:	68bb      	ldr	r3, [r7, #8]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b087      	sub	sp, #28
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	fa22 f303 	lsr.w	r3, r2, r3
 800631a:	01db      	lsls	r3, r3, #7
 800631c:	b2db      	uxtb	r3, r3
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4013      	ands	r3, r2
 8006336:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006338:	68bb      	ldr	r3, [r7, #8]
}
 800633a:	4618      	mov	r0, r3
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0301 	and.w	r3, r3, #1
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006380:	f023 0307 	bic.w	r3, r3, #7
 8006384:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006398:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	460b      	mov	r3, r1
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	333c      	adds	r3, #60	; 0x3c
 80063be:	3304      	adds	r3, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4a26      	ldr	r2, [pc, #152]	; (8006460 <USB_EP0_OutStart+0xb8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d90a      	bls.n	80063e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063dc:	d101      	bne.n	80063e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	e037      	b.n	8006452 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	461a      	mov	r2, r3
 80063ea:	2300      	movs	r3, #0
 80063ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006410:	f043 0318 	orr.w	r3, r3, #24
 8006414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006424:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006428:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800642a:	7afb      	ldrb	r3, [r7, #11]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d10f      	bne.n	8006450 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800644a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800644e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	4f54300a 	.word	0x4f54300a

08006464 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3301      	adds	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4a13      	ldr	r2, [pc, #76]	; (80064c8 <USB_CoreReset+0x64>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d901      	bls.n	8006482 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e01b      	b.n	80064ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	daf2      	bge.n	8006470 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f043 0201 	orr.w	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4a09      	ldr	r2, [pc, #36]	; (80064c8 <USB_CoreReset+0x64>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d901      	bls.n	80064ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e006      	b.n	80064ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d0f0      	beq.n	800649a <USB_CoreReset+0x36>

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	00030d40 	.word	0x00030d40

080064cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80064dc:	f002 fcc8 	bl	8008e70 <USBD_static_malloc>
 80064e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d109      	bne.n	80064fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	32b0      	adds	r2, #176	; 0xb0
 80064f2:	2100      	movs	r1, #0
 80064f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064f8:	2302      	movs	r3, #2
 80064fa:	e0d4      	b.n	80066a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80064fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006500:	2100      	movs	r1, #0
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f002 fd1c 	bl	8008f40 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	32b0      	adds	r2, #176	; 0xb0
 8006512:	68f9      	ldr	r1, [r7, #12]
 8006514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	32b0      	adds	r2, #176	; 0xb0
 8006522:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	7c1b      	ldrb	r3, [r3, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d138      	bne.n	80065a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006534:	4b5e      	ldr	r3, [pc, #376]	; (80066b0 <USBD_CDC_Init+0x1e4>)
 8006536:	7819      	ldrb	r1, [r3, #0]
 8006538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800653c:	2202      	movs	r2, #2
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f002 fb25 	bl	8008b8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006544:	4b5a      	ldr	r3, [pc, #360]	; (80066b0 <USBD_CDC_Init+0x1e4>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	f003 020f 	and.w	r2, r3, #15
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	440b      	add	r3, r1
 8006558:	3324      	adds	r3, #36	; 0x24
 800655a:	2201      	movs	r2, #1
 800655c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800655e:	4b55      	ldr	r3, [pc, #340]	; (80066b4 <USBD_CDC_Init+0x1e8>)
 8006560:	7819      	ldrb	r1, [r3, #0]
 8006562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006566:	2202      	movs	r2, #2
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f002 fb10 	bl	8008b8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800656e:	4b51      	ldr	r3, [pc, #324]	; (80066b4 <USBD_CDC_Init+0x1e8>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	f003 020f 	and.w	r2, r3, #15
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006586:	2201      	movs	r2, #1
 8006588:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800658a:	4b4b      	ldr	r3, [pc, #300]	; (80066b8 <USBD_CDC_Init+0x1ec>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	f003 020f 	and.w	r2, r3, #15
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	3326      	adds	r3, #38	; 0x26
 80065a0:	2210      	movs	r2, #16
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e035      	b.n	8006612 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065a6:	4b42      	ldr	r3, [pc, #264]	; (80066b0 <USBD_CDC_Init+0x1e4>)
 80065a8:	7819      	ldrb	r1, [r3, #0]
 80065aa:	2340      	movs	r3, #64	; 0x40
 80065ac:	2202      	movs	r2, #2
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f002 faed 	bl	8008b8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065b4:	4b3e      	ldr	r3, [pc, #248]	; (80066b0 <USBD_CDC_Init+0x1e4>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	3324      	adds	r3, #36	; 0x24
 80065ca:	2201      	movs	r2, #1
 80065cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065ce:	4b39      	ldr	r3, [pc, #228]	; (80066b4 <USBD_CDC_Init+0x1e8>)
 80065d0:	7819      	ldrb	r1, [r3, #0]
 80065d2:	2340      	movs	r3, #64	; 0x40
 80065d4:	2202      	movs	r2, #2
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f002 fad9 	bl	8008b8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065dc:	4b35      	ldr	r3, [pc, #212]	; (80066b4 <USBD_CDC_Init+0x1e8>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	f003 020f 	and.w	r2, r3, #15
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065f4:	2201      	movs	r2, #1
 80065f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065f8:	4b2f      	ldr	r3, [pc, #188]	; (80066b8 <USBD_CDC_Init+0x1ec>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	f003 020f 	and.w	r2, r3, #15
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	3326      	adds	r3, #38	; 0x26
 800660e:	2210      	movs	r2, #16
 8006610:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006612:	4b29      	ldr	r3, [pc, #164]	; (80066b8 <USBD_CDC_Init+0x1ec>)
 8006614:	7819      	ldrb	r1, [r3, #0]
 8006616:	2308      	movs	r3, #8
 8006618:	2203      	movs	r2, #3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f002 fab7 	bl	8008b8e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006620:	4b25      	ldr	r3, [pc, #148]	; (80066b8 <USBD_CDC_Init+0x1ec>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	f003 020f 	and.w	r2, r3, #15
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	440b      	add	r3, r1
 8006634:	3324      	adds	r3, #36	; 0x24
 8006636:	2201      	movs	r2, #1
 8006638:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	33b0      	adds	r3, #176	; 0xb0
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006670:	2302      	movs	r3, #2
 8006672:	e018      	b.n	80066a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	7c1b      	ldrb	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800667c:	4b0d      	ldr	r3, [pc, #52]	; (80066b4 <USBD_CDC_Init+0x1e8>)
 800667e:	7819      	ldrb	r1, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f002 fb6e 	bl	8008d6c <USBD_LL_PrepareReceive>
 8006690:	e008      	b.n	80066a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006692:	4b08      	ldr	r3, [pc, #32]	; (80066b4 <USBD_CDC_Init+0x1e8>)
 8006694:	7819      	ldrb	r1, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800669c:	2340      	movs	r3, #64	; 0x40
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f002 fb64 	bl	8008d6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20000093 	.word	0x20000093
 80066b4:	20000094 	.word	0x20000094
 80066b8:	20000095 	.word	0x20000095

080066bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80066c8:	4b3a      	ldr	r3, [pc, #232]	; (80067b4 <USBD_CDC_DeInit+0xf8>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f002 fa83 	bl	8008bda <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80066d4:	4b37      	ldr	r3, [pc, #220]	; (80067b4 <USBD_CDC_DeInit+0xf8>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 020f 	and.w	r2, r3, #15
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	3324      	adds	r3, #36	; 0x24
 80066ea:	2200      	movs	r2, #0
 80066ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80066ee:	4b32      	ldr	r3, [pc, #200]	; (80067b8 <USBD_CDC_DeInit+0xfc>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f002 fa70 	bl	8008bda <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80066fa:	4b2f      	ldr	r3, [pc, #188]	; (80067b8 <USBD_CDC_DeInit+0xfc>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f003 020f 	and.w	r2, r3, #15
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006712:	2200      	movs	r2, #0
 8006714:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006716:	4b29      	ldr	r3, [pc, #164]	; (80067bc <USBD_CDC_DeInit+0x100>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f002 fa5c 	bl	8008bda <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006722:	4b26      	ldr	r3, [pc, #152]	; (80067bc <USBD_CDC_DeInit+0x100>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	f003 020f 	and.w	r2, r3, #15
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	3324      	adds	r3, #36	; 0x24
 8006738:	2200      	movs	r2, #0
 800673a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800673c:	4b1f      	ldr	r3, [pc, #124]	; (80067bc <USBD_CDC_DeInit+0x100>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	f003 020f 	and.w	r2, r3, #15
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	3326      	adds	r3, #38	; 0x26
 8006752:	2200      	movs	r2, #0
 8006754:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	32b0      	adds	r2, #176	; 0xb0
 8006760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01f      	beq.n	80067a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	33b0      	adds	r3, #176	; 0xb0
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	32b0      	adds	r2, #176	; 0xb0
 8006786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678a:	4618      	mov	r0, r3
 800678c:	f002 fb7e 	bl	8008e8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	32b0      	adds	r2, #176	; 0xb0
 800679a:	2100      	movs	r1, #0
 800679c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20000093 	.word	0x20000093
 80067b8:	20000094 	.word	0x20000094
 80067bc:	20000095 	.word	0x20000095

080067c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	32b0      	adds	r2, #176	; 0xb0
 80067d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e0bf      	b.n	8006970 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d050      	beq.n	800689e <USBD_CDC_Setup+0xde>
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	f040 80af 	bne.w	8006960 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	88db      	ldrh	r3, [r3, #6]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d03a      	beq.n	8006880 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	b25b      	sxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	da1b      	bge.n	800684c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	33b0      	adds	r3, #176	; 0xb0
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800682a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	88d2      	ldrh	r2, [r2, #6]
 8006830:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	88db      	ldrh	r3, [r3, #6]
 8006836:	2b07      	cmp	r3, #7
 8006838:	bf28      	it	cs
 800683a:	2307      	movcs	r3, #7
 800683c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	89fa      	ldrh	r2, [r7, #14]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 fd6d 	bl	8008324 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800684a:	e090      	b.n	800696e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	785a      	ldrb	r2, [r3, #1]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	88db      	ldrh	r3, [r3, #6]
 800685a:	2b3f      	cmp	r3, #63	; 0x3f
 800685c:	d803      	bhi.n	8006866 <USBD_CDC_Setup+0xa6>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	88db      	ldrh	r3, [r3, #6]
 8006862:	b2da      	uxtb	r2, r3
 8006864:	e000      	b.n	8006868 <USBD_CDC_Setup+0xa8>
 8006866:	2240      	movs	r2, #64	; 0x40
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800686e:	6939      	ldr	r1, [r7, #16]
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006876:	461a      	mov	r2, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 fd7f 	bl	800837c <USBD_CtlPrepareRx>
      break;
 800687e:	e076      	b.n	800696e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	33b0      	adds	r3, #176	; 0xb0
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	7850      	ldrb	r0, [r2, #1]
 8006896:	2200      	movs	r2, #0
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	4798      	blx	r3
      break;
 800689c:	e067      	b.n	800696e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b0b      	cmp	r3, #11
 80068a4:	d851      	bhi.n	800694a <USBD_CDC_Setup+0x18a>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <USBD_CDC_Setup+0xec>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	080068dd 	.word	0x080068dd
 80068b0:	08006959 	.word	0x08006959
 80068b4:	0800694b 	.word	0x0800694b
 80068b8:	0800694b 	.word	0x0800694b
 80068bc:	0800694b 	.word	0x0800694b
 80068c0:	0800694b 	.word	0x0800694b
 80068c4:	0800694b 	.word	0x0800694b
 80068c8:	0800694b 	.word	0x0800694b
 80068cc:	0800694b 	.word	0x0800694b
 80068d0:	0800694b 	.word	0x0800694b
 80068d4:	08006907 	.word	0x08006907
 80068d8:	08006931 	.word	0x08006931
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d107      	bne.n	80068f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068e8:	f107 030a 	add.w	r3, r7, #10
 80068ec:	2202      	movs	r2, #2
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fd17 	bl	8008324 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068f6:	e032      	b.n	800695e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 fca1 	bl	8008242 <USBD_CtlError>
            ret = USBD_FAIL;
 8006900:	2303      	movs	r3, #3
 8006902:	75fb      	strb	r3, [r7, #23]
          break;
 8006904:	e02b      	b.n	800695e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b03      	cmp	r3, #3
 8006910:	d107      	bne.n	8006922 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006912:	f107 030d 	add.w	r3, r7, #13
 8006916:	2201      	movs	r2, #1
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fd02 	bl	8008324 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006920:	e01d      	b.n	800695e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 fc8c 	bl	8008242 <USBD_CtlError>
            ret = USBD_FAIL;
 800692a:	2303      	movs	r3, #3
 800692c:	75fb      	strb	r3, [r7, #23]
          break;
 800692e:	e016      	b.n	800695e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b03      	cmp	r3, #3
 800693a:	d00f      	beq.n	800695c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 fc7f 	bl	8008242 <USBD_CtlError>
            ret = USBD_FAIL;
 8006944:	2303      	movs	r3, #3
 8006946:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006948:	e008      	b.n	800695c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 fc78 	bl	8008242 <USBD_CtlError>
          ret = USBD_FAIL;
 8006952:	2303      	movs	r3, #3
 8006954:	75fb      	strb	r3, [r7, #23]
          break;
 8006956:	e002      	b.n	800695e <USBD_CDC_Setup+0x19e>
          break;
 8006958:	bf00      	nop
 800695a:	e008      	b.n	800696e <USBD_CDC_Setup+0x1ae>
          break;
 800695c:	bf00      	nop
      }
      break;
 800695e:	e006      	b.n	800696e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 fc6d 	bl	8008242 <USBD_CtlError>
      ret = USBD_FAIL;
 8006968:	2303      	movs	r3, #3
 800696a:	75fb      	strb	r3, [r7, #23]
      break;
 800696c:	bf00      	nop
  }

  return (uint8_t)ret;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800698a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	32b0      	adds	r2, #176	; 0xb0
 8006996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800699e:	2303      	movs	r3, #3
 80069a0:	e065      	b.n	8006a6e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	32b0      	adds	r2, #176	; 0xb0
 80069ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	f003 020f 	and.w	r2, r3, #15
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	4613      	mov	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	3318      	adds	r3, #24
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d02f      	beq.n	8006a2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	f003 020f 	and.w	r2, r3, #15
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	440b      	add	r3, r1
 80069de:	3318      	adds	r3, #24
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	78fb      	ldrb	r3, [r7, #3]
 80069e4:	f003 010f 	and.w	r1, r3, #15
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	460b      	mov	r3, r1
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	440b      	add	r3, r1
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4403      	add	r3, r0
 80069f4:	3348      	adds	r3, #72	; 0x48
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80069fc:	fb01 f303 	mul.w	r3, r1, r3
 8006a00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d112      	bne.n	8006a2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006a06:	78fb      	ldrb	r3, [r7, #3]
 8006a08:	f003 020f 	and.w	r2, r3, #15
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	440b      	add	r3, r1
 8006a18:	3318      	adds	r3, #24
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a1e:	78f9      	ldrb	r1, [r7, #3]
 8006a20:	2300      	movs	r3, #0
 8006a22:	2200      	movs	r2, #0
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f002 f980 	bl	8008d2a <USBD_LL_Transmit>
 8006a2a:	e01f      	b.n	8006a6c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	33b0      	adds	r3, #176	; 0xb0
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d010      	beq.n	8006a6c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	33b0      	adds	r3, #176	; 0xb0
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a68:	78fa      	ldrb	r2, [r7, #3]
 8006a6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	32b0      	adds	r2, #176	; 0xb0
 8006a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	32b0      	adds	r2, #176	; 0xb0
 8006a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e01a      	b.n	8006ade <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f002 f97e 	bl	8008dae <USBD_LL_GetRxDataSize>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	33b0      	adds	r3, #176	; 0xb0
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	32b0      	adds	r2, #176	; 0xb0
 8006af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e025      	b.n	8006b54 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	33b0      	adds	r3, #176	; 0xb0
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01a      	beq.n	8006b52 <USBD_CDC_EP0_RxReady+0x6c>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b22:	2bff      	cmp	r3, #255	; 0xff
 8006b24:	d015      	beq.n	8006b52 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	33b0      	adds	r3, #176	; 0xb0
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006b3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b46:	b292      	uxth	r2, r2
 8006b48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	22ff      	movs	r2, #255	; 0xff
 8006b4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b64:	2182      	movs	r1, #130	; 0x82
 8006b66:	4818      	ldr	r0, [pc, #96]	; (8006bc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b68:	f000 fd09 	bl	800757e <USBD_GetEpDesc>
 8006b6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b6e:	2101      	movs	r1, #1
 8006b70:	4815      	ldr	r0, [pc, #84]	; (8006bc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b72:	f000 fd04 	bl	800757e <USBD_GetEpDesc>
 8006b76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b78:	2181      	movs	r1, #129	; 0x81
 8006b7a:	4813      	ldr	r0, [pc, #76]	; (8006bc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b7c:	f000 fcff 	bl	800757e <USBD_GetEpDesc>
 8006b80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2210      	movs	r2, #16
 8006b8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d006      	beq.n	8006ba2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b9c:	711a      	strb	r2, [r3, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d006      	beq.n	8006bb6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bb0:	711a      	strb	r2, [r3, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2243      	movs	r2, #67	; 0x43
 8006bba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bbc:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000050 	.word	0x20000050

08006bcc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bd4:	2182      	movs	r1, #130	; 0x82
 8006bd6:	4818      	ldr	r0, [pc, #96]	; (8006c38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bd8:	f000 fcd1 	bl	800757e <USBD_GetEpDesc>
 8006bdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bde:	2101      	movs	r1, #1
 8006be0:	4815      	ldr	r0, [pc, #84]	; (8006c38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006be2:	f000 fccc 	bl	800757e <USBD_GetEpDesc>
 8006be6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006be8:	2181      	movs	r1, #129	; 0x81
 8006bea:	4813      	ldr	r0, [pc, #76]	; (8006c38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bec:	f000 fcc7 	bl	800757e <USBD_GetEpDesc>
 8006bf0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2210      	movs	r2, #16
 8006bfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d006      	beq.n	8006c12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2200      	movs	r2, #0
 8006c08:	711a      	strb	r2, [r3, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f042 0202 	orr.w	r2, r2, #2
 8006c10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d006      	beq.n	8006c26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	711a      	strb	r2, [r3, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f042 0202 	orr.w	r2, r2, #2
 8006c24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2243      	movs	r2, #67	; 0x43
 8006c2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c2c:	4b02      	ldr	r3, [pc, #8]	; (8006c38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000050 	.word	0x20000050

08006c3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c44:	2182      	movs	r1, #130	; 0x82
 8006c46:	4818      	ldr	r0, [pc, #96]	; (8006ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c48:	f000 fc99 	bl	800757e <USBD_GetEpDesc>
 8006c4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c4e:	2101      	movs	r1, #1
 8006c50:	4815      	ldr	r0, [pc, #84]	; (8006ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c52:	f000 fc94 	bl	800757e <USBD_GetEpDesc>
 8006c56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c58:	2181      	movs	r1, #129	; 0x81
 8006c5a:	4813      	ldr	r0, [pc, #76]	; (8006ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c5c:	f000 fc8f 	bl	800757e <USBD_GetEpDesc>
 8006c60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	2210      	movs	r2, #16
 8006c6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d006      	beq.n	8006c82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c7c:	711a      	strb	r2, [r3, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d006      	beq.n	8006c96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c90:	711a      	strb	r2, [r3, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2243      	movs	r2, #67	; 0x43
 8006c9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c9c:	4b02      	ldr	r3, [pc, #8]	; (8006ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000050 	.word	0x20000050

08006cac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	220a      	movs	r2, #10
 8006cb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006cba:	4b03      	ldr	r3, [pc, #12]	; (8006cc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	2000000c 	.word	0x2000000c

08006ccc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e009      	b.n	8006cf4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	33b0      	adds	r3, #176	; 0xb0
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	32b0      	adds	r2, #176	; 0xb0
 8006d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e008      	b.n	8006d38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	32b0      	adds	r2, #176	; 0xb0
 8006d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e004      	b.n	8006d72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
	...

08006d80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	32b0      	adds	r2, #176	; 0xb0
 8006d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	32b0      	adds	r2, #176	; 0xb0
 8006da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e018      	b.n	8006de0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	7c1b      	ldrb	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006db6:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <USBD_CDC_ReceivePacket+0x68>)
 8006db8:	7819      	ldrb	r1, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 ffd1 	bl	8008d6c <USBD_LL_PrepareReceive>
 8006dca:	e008      	b.n	8006dde <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <USBD_CDC_ReceivePacket+0x68>)
 8006dce:	7819      	ldrb	r1, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dd6:	2340      	movs	r3, #64	; 0x40
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 ffc7 	bl	8008d6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20000094 	.word	0x20000094

08006dec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	4613      	mov	r3, r2
 8006df8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e01f      	b.n	8006e44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	79fa      	ldrb	r2, [r7, #7]
 8006e36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f001 fe41 	bl	8008ac0 <USBD_LL_Init>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e025      	b.n	8006eb0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	32ae      	adds	r2, #174	; 0xae
 8006e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00f      	beq.n	8006ea0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	32ae      	adds	r2, #174	; 0xae
 8006e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	f107 020e 	add.w	r2, r7, #14
 8006e94:	4610      	mov	r0, r2
 8006e96:	4798      	blx	r3
 8006e98:	4602      	mov	r2, r0
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 fe49 	bl	8008b58 <USBD_LL_Start>
 8006ec6:	4603      	mov	r3, r0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ed8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	78fa      	ldrb	r2, [r7, #3]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	4798      	blx	r3
 8006f10:	4603      	mov	r3, r0
 8006f12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	460b      	mov	r3, r1
 8006f28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	4611      	mov	r1, r2
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f001 f932 	bl	80081ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f78:	461a      	mov	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d01a      	beq.n	8006fc4 <USBD_LL_SetupStage+0x72>
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d822      	bhi.n	8006fd8 <USBD_LL_SetupStage+0x86>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <USBD_LL_SetupStage+0x4a>
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d00a      	beq.n	8006fb0 <USBD_LL_SetupStage+0x5e>
 8006f9a:	e01d      	b.n	8006fd8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fb5f 	bl	8007668 <USBD_StdDevReq>
 8006faa:	4603      	mov	r3, r0
 8006fac:	73fb      	strb	r3, [r7, #15]
      break;
 8006fae:	e020      	b.n	8006ff2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fbc7 	bl	800774c <USBD_StdItfReq>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc2:	e016      	b.n	8006ff2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fc29 	bl	8007824 <USBD_StdEPReq>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd6:	e00c      	b.n	8006ff2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 fe16 	bl	8008c18 <USBD_LL_StallEP>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff0:	bf00      	nop
  }

  return ret;
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	460b      	mov	r3, r1
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800700e:	7afb      	ldrb	r3, [r7, #11]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d16e      	bne.n	80070f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800701a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007022:	2b03      	cmp	r3, #3
 8007024:	f040 8098 	bne.w	8007158 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	429a      	cmp	r2, r3
 8007032:	d913      	bls.n	800705c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	1ad2      	subs	r2, r2, r3
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	4293      	cmp	r3, r2
 800704c:	bf28      	it	cs
 800704e:	4613      	movcs	r3, r2
 8007050:	461a      	mov	r2, r3
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f001 f9ae 	bl	80083b6 <USBD_CtlContinueRx>
 800705a:	e07d      	b.n	8007158 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007062:	f003 031f 	and.w	r3, r3, #31
 8007066:	2b02      	cmp	r3, #2
 8007068:	d014      	beq.n	8007094 <USBD_LL_DataOutStage+0x98>
 800706a:	2b02      	cmp	r3, #2
 800706c:	d81d      	bhi.n	80070aa <USBD_LL_DataOutStage+0xae>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <USBD_LL_DataOutStage+0x7c>
 8007072:	2b01      	cmp	r3, #1
 8007074:	d003      	beq.n	800707e <USBD_LL_DataOutStage+0x82>
 8007076:	e018      	b.n	80070aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	75bb      	strb	r3, [r7, #22]
            break;
 800707c:	e018      	b.n	80070b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007084:	b2db      	uxtb	r3, r3
 8007086:	4619      	mov	r1, r3
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 fa5e 	bl	800754a <USBD_CoreFindIF>
 800708e:	4603      	mov	r3, r0
 8007090:	75bb      	strb	r3, [r7, #22]
            break;
 8007092:	e00d      	b.n	80070b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800709a:	b2db      	uxtb	r3, r3
 800709c:	4619      	mov	r1, r3
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 fa60 	bl	8007564 <USBD_CoreFindEP>
 80070a4:	4603      	mov	r3, r0
 80070a6:	75bb      	strb	r3, [r7, #22]
            break;
 80070a8:	e002      	b.n	80070b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	75bb      	strb	r3, [r7, #22]
            break;
 80070ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80070b0:	7dbb      	ldrb	r3, [r7, #22]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d119      	bne.n	80070ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d113      	bne.n	80070ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80070c2:	7dba      	ldrb	r2, [r7, #22]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	32ae      	adds	r2, #174	; 0xae
 80070c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00b      	beq.n	80070ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80070d2:	7dba      	ldrb	r2, [r7, #22]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80070da:	7dba      	ldrb	r2, [r7, #22]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	32ae      	adds	r2, #174	; 0xae
 80070e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f001 f974 	bl	80083d8 <USBD_CtlSendStatus>
 80070f0:	e032      	b.n	8007158 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80070f2:	7afb      	ldrb	r3, [r7, #11]
 80070f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	4619      	mov	r1, r3
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 fa31 	bl	8007564 <USBD_CoreFindEP>
 8007102:	4603      	mov	r3, r0
 8007104:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007106:	7dbb      	ldrb	r3, [r7, #22]
 8007108:	2bff      	cmp	r3, #255	; 0xff
 800710a:	d025      	beq.n	8007158 <USBD_LL_DataOutStage+0x15c>
 800710c:	7dbb      	ldrb	r3, [r7, #22]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d122      	bne.n	8007158 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b03      	cmp	r3, #3
 800711c:	d117      	bne.n	800714e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800711e:	7dba      	ldrb	r2, [r7, #22]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	32ae      	adds	r2, #174	; 0xae
 8007124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00f      	beq.n	800714e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800712e:	7dba      	ldrb	r2, [r7, #22]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007136:	7dba      	ldrb	r2, [r7, #22]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	32ae      	adds	r2, #174	; 0xae
 800713c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	7afa      	ldrb	r2, [r7, #11]
 8007144:	4611      	mov	r1, r2
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	4798      	blx	r3
 800714a:	4603      	mov	r3, r0
 800714c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800714e:	7dfb      	ldrb	r3, [r7, #23]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	e000      	b.n	800715a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	460b      	mov	r3, r1
 800716c:	607a      	str	r2, [r7, #4]
 800716e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007170:	7afb      	ldrb	r3, [r7, #11]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d16f      	bne.n	8007256 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3314      	adds	r3, #20
 800717a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007182:	2b02      	cmp	r3, #2
 8007184:	d15a      	bne.n	800723c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	429a      	cmp	r2, r3
 8007190:	d914      	bls.n	80071bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	1ad2      	subs	r2, r2, r3
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	461a      	mov	r2, r3
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f001 f8d6 	bl	800835a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071ae:	2300      	movs	r3, #0
 80071b0:	2200      	movs	r2, #0
 80071b2:	2100      	movs	r1, #0
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f001 fdd9 	bl	8008d6c <USBD_LL_PrepareReceive>
 80071ba:	e03f      	b.n	800723c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	68da      	ldr	r2, [r3, #12]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d11c      	bne.n	8007202 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d316      	bcc.n	8007202 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071de:	429a      	cmp	r2, r3
 80071e0:	d20f      	bcs.n	8007202 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071e2:	2200      	movs	r2, #0
 80071e4:	2100      	movs	r1, #0
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f001 f8b7 	bl	800835a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071f4:	2300      	movs	r3, #0
 80071f6:	2200      	movs	r2, #0
 80071f8:	2100      	movs	r1, #0
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f001 fdb6 	bl	8008d6c <USBD_LL_PrepareReceive>
 8007200:	e01c      	b.n	800723c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b03      	cmp	r3, #3
 800720c:	d10f      	bne.n	800722e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d009      	beq.n	800722e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800722e:	2180      	movs	r1, #128	; 0x80
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f001 fcf1 	bl	8008c18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f001 f8e1 	bl	80083fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d03a      	beq.n	80072bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f7ff fe42 	bl	8006ed0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007254:	e032      	b.n	80072bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007256:	7afb      	ldrb	r3, [r7, #11]
 8007258:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800725c:	b2db      	uxtb	r3, r3
 800725e:	4619      	mov	r1, r3
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 f97f 	bl	8007564 <USBD_CoreFindEP>
 8007266:	4603      	mov	r3, r0
 8007268:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	2bff      	cmp	r3, #255	; 0xff
 800726e:	d025      	beq.n	80072bc <USBD_LL_DataInStage+0x15a>
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d122      	bne.n	80072bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b03      	cmp	r3, #3
 8007280:	d11c      	bne.n	80072bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007282:	7dfa      	ldrb	r2, [r7, #23]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	32ae      	adds	r2, #174	; 0xae
 8007288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d014      	beq.n	80072bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007292:	7dfa      	ldrb	r2, [r7, #23]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800729a:	7dfa      	ldrb	r2, [r7, #23]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	32ae      	adds	r2, #174	; 0xae
 80072a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	7afa      	ldrb	r2, [r7, #11]
 80072a8:	4611      	mov	r1, r2
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	4798      	blx	r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80072b2:	7dbb      	ldrb	r3, [r7, #22]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80072b8:	7dbb      	ldrb	r3, [r7, #22]
 80072ba:	e000      	b.n	80072be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d014      	beq.n	800732c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00e      	beq.n	800732c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6852      	ldr	r2, [r2, #4]
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	4611      	mov	r1, r2
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007328:	2303      	movs	r3, #3
 800732a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800732c:	2340      	movs	r3, #64	; 0x40
 800732e:	2200      	movs	r2, #0
 8007330:	2100      	movs	r1, #0
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 fc2b 	bl	8008b8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2240      	movs	r2, #64	; 0x40
 8007344:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007348:	2340      	movs	r3, #64	; 0x40
 800734a:	2200      	movs	r2, #0
 800734c:	2180      	movs	r1, #128	; 0x80
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f001 fc1d 	bl	8008b8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2240      	movs	r2, #64	; 0x40
 800735e:	621a      	str	r2, [r3, #32]

  return ret;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	78fa      	ldrb	r2, [r7, #3]
 800737a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007398:	b2da      	uxtb	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2204      	movs	r2, #4
 80073a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d106      	bne.n	80073d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d110      	bne.n	800741c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d005      	beq.n	800741c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b082      	sub	sp, #8
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	32ae      	adds	r2, #174	; 0xae
 800743c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007444:	2303      	movs	r3, #3
 8007446:	e01c      	b.n	8007482 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b03      	cmp	r3, #3
 8007452:	d115      	bne.n	8007480 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	32ae      	adds	r2, #174	; 0xae
 800745e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00b      	beq.n	8007480 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	32ae      	adds	r2, #174	; 0xae
 8007472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	78fa      	ldrb	r2, [r7, #3]
 800747a:	4611      	mov	r1, r2
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	32ae      	adds	r2, #174	; 0xae
 80074a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e01c      	b.n	80074e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d115      	bne.n	80074e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	32ae      	adds	r2, #174	; 0xae
 80074c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00b      	beq.n	80074e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	32ae      	adds	r2, #174	; 0xae
 80074d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	78fa      	ldrb	r2, [r7, #3]
 80074de:	4611      	mov	r1, r2
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00e      	beq.n	8007540 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6852      	ldr	r2, [r2, #4]
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	4611      	mov	r1, r2
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800753c:	2303      	movs	r3, #3
 800753e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007556:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007570:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b086      	sub	sp, #24
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007592:	2300      	movs	r3, #0
 8007594:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	885b      	ldrh	r3, [r3, #2]
 800759a:	b29a      	uxth	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d920      	bls.n	80075e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80075ae:	e013      	b.n	80075d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80075b0:	f107 030a 	add.w	r3, r7, #10
 80075b4:	4619      	mov	r1, r3
 80075b6:	6978      	ldr	r0, [r7, #20]
 80075b8:	f000 f81b 	bl	80075f2 <USBD_GetNextDesc>
 80075bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	785b      	ldrb	r3, [r3, #1]
 80075c2:	2b05      	cmp	r3, #5
 80075c4:	d108      	bne.n	80075d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	789b      	ldrb	r3, [r3, #2]
 80075ce:	78fa      	ldrb	r2, [r7, #3]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d008      	beq.n	80075e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80075d4:	2300      	movs	r3, #0
 80075d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	885b      	ldrh	r3, [r3, #2]
 80075dc:	b29a      	uxth	r2, r3
 80075de:	897b      	ldrh	r3, [r7, #10]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d8e5      	bhi.n	80075b0 <USBD_GetEpDesc+0x32>
 80075e4:	e000      	b.n	80075e8 <USBD_GetEpDesc+0x6a>
          break;
 80075e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80075e8:	693b      	ldr	r3, [r7, #16]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	881a      	ldrh	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b29b      	uxth	r3, r3
 800760a:	4413      	add	r3, r2
 800760c:	b29a      	uxth	r2, r3
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4413      	add	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800761e:	68fb      	ldr	r3, [r7, #12]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	3301      	adds	r3, #1
 8007642:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800764a:	8a3b      	ldrh	r3, [r7, #16]
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	b21a      	sxth	r2, r3
 8007650:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007654:	4313      	orrs	r3, r2
 8007656:	b21b      	sxth	r3, r3
 8007658:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800765a:	89fb      	ldrh	r3, [r7, #14]
}
 800765c:	4618      	mov	r0, r3
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d005      	beq.n	800768e <USBD_StdDevReq+0x26>
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d857      	bhi.n	8007736 <USBD_StdDevReq+0xce>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00f      	beq.n	80076aa <USBD_StdDevReq+0x42>
 800768a:	2b20      	cmp	r3, #32
 800768c:	d153      	bne.n	8007736 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	32ae      	adds	r2, #174	; 0xae
 8007698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4798      	blx	r3
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]
      break;
 80076a8:	e04a      	b.n	8007740 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	785b      	ldrb	r3, [r3, #1]
 80076ae:	2b09      	cmp	r3, #9
 80076b0:	d83b      	bhi.n	800772a <USBD_StdDevReq+0xc2>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <USBD_StdDevReq+0x50>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	0800770d 	.word	0x0800770d
 80076bc:	08007721 	.word	0x08007721
 80076c0:	0800772b 	.word	0x0800772b
 80076c4:	08007717 	.word	0x08007717
 80076c8:	0800772b 	.word	0x0800772b
 80076cc:	080076eb 	.word	0x080076eb
 80076d0:	080076e1 	.word	0x080076e1
 80076d4:	0800772b 	.word	0x0800772b
 80076d8:	08007703 	.word	0x08007703
 80076dc:	080076f5 	.word	0x080076f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fa3c 	bl	8007b60 <USBD_GetDescriptor>
          break;
 80076e8:	e024      	b.n	8007734 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fbcb 	bl	8007e88 <USBD_SetAddress>
          break;
 80076f2:	e01f      	b.n	8007734 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fc0a 	bl	8007f10 <USBD_SetConfig>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73fb      	strb	r3, [r7, #15]
          break;
 8007700:	e018      	b.n	8007734 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fcad 	bl	8008064 <USBD_GetConfig>
          break;
 800770a:	e013      	b.n	8007734 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fcde 	bl	80080d0 <USBD_GetStatus>
          break;
 8007714:	e00e      	b.n	8007734 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fd0d 	bl	8008138 <USBD_SetFeature>
          break;
 800771e:	e009      	b.n	8007734 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fd31 	bl	800818a <USBD_ClrFeature>
          break;
 8007728:	e004      	b.n	8007734 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fd88 	bl	8008242 <USBD_CtlError>
          break;
 8007732:	bf00      	nop
      }
      break;
 8007734:	e004      	b.n	8007740 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fd82 	bl	8008242 <USBD_CtlError>
      break;
 800773e:	bf00      	nop
  }

  return ret;
 8007740:	7bfb      	ldrb	r3, [r7, #15]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop

0800774c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d005      	beq.n	8007772 <USBD_StdItfReq+0x26>
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d852      	bhi.n	8007810 <USBD_StdItfReq+0xc4>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <USBD_StdItfReq+0x26>
 800776e:	2b20      	cmp	r3, #32
 8007770:	d14e      	bne.n	8007810 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007778:	b2db      	uxtb	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	2b02      	cmp	r3, #2
 800777e:	d840      	bhi.n	8007802 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	889b      	ldrh	r3, [r3, #4]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b01      	cmp	r3, #1
 8007788:	d836      	bhi.n	80077f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	889b      	ldrh	r3, [r3, #4]
 800778e:	b2db      	uxtb	r3, r3
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff fed9 	bl	800754a <USBD_CoreFindIF>
 8007798:	4603      	mov	r3, r0
 800779a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	2bff      	cmp	r3, #255	; 0xff
 80077a0:	d01d      	beq.n	80077de <USBD_StdItfReq+0x92>
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d11a      	bne.n	80077de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80077a8:	7bba      	ldrb	r2, [r7, #14]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	32ae      	adds	r2, #174	; 0xae
 80077ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00f      	beq.n	80077d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80077b8:	7bba      	ldrb	r2, [r7, #14]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077c0:	7bba      	ldrb	r2, [r7, #14]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	32ae      	adds	r2, #174	; 0xae
 80077c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
 80077d2:	4603      	mov	r3, r0
 80077d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077d6:	e004      	b.n	80077e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80077d8:	2303      	movs	r3, #3
 80077da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077dc:	e001      	b.n	80077e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80077de:	2303      	movs	r3, #3
 80077e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	88db      	ldrh	r3, [r3, #6]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d110      	bne.n	800780c <USBD_StdItfReq+0xc0>
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10d      	bne.n	800780c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fdf1 	bl	80083d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077f6:	e009      	b.n	800780c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fd21 	bl	8008242 <USBD_CtlError>
          break;
 8007800:	e004      	b.n	800780c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fd1c 	bl	8008242 <USBD_CtlError>
          break;
 800780a:	e000      	b.n	800780e <USBD_StdItfReq+0xc2>
          break;
 800780c:	bf00      	nop
      }
      break;
 800780e:	e004      	b.n	800781a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fd15 	bl	8008242 <USBD_CtlError>
      break;
 8007818:	bf00      	nop
  }

  return ret;
 800781a:	7bfb      	ldrb	r3, [r7, #15]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	889b      	ldrh	r3, [r3, #4]
 8007836:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d007      	beq.n	8007854 <USBD_StdEPReq+0x30>
 8007844:	2b40      	cmp	r3, #64	; 0x40
 8007846:	f200 817f 	bhi.w	8007b48 <USBD_StdEPReq+0x324>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d02a      	beq.n	80078a4 <USBD_StdEPReq+0x80>
 800784e:	2b20      	cmp	r3, #32
 8007850:	f040 817a 	bne.w	8007b48 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff fe83 	bl	8007564 <USBD_CoreFindEP>
 800785e:	4603      	mov	r3, r0
 8007860:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007862:	7b7b      	ldrb	r3, [r7, #13]
 8007864:	2bff      	cmp	r3, #255	; 0xff
 8007866:	f000 8174 	beq.w	8007b52 <USBD_StdEPReq+0x32e>
 800786a:	7b7b      	ldrb	r3, [r7, #13]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f040 8170 	bne.w	8007b52 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007872:	7b7a      	ldrb	r2, [r7, #13]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800787a:	7b7a      	ldrb	r2, [r7, #13]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	32ae      	adds	r2, #174	; 0xae
 8007880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 8163 	beq.w	8007b52 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800788c:	7b7a      	ldrb	r2, [r7, #13]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	32ae      	adds	r2, #174	; 0xae
 8007892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	4798      	blx	r3
 800789e:	4603      	mov	r3, r0
 80078a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078a2:	e156      	b.n	8007b52 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	785b      	ldrb	r3, [r3, #1]
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d008      	beq.n	80078be <USBD_StdEPReq+0x9a>
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	f300 8145 	bgt.w	8007b3c <USBD_StdEPReq+0x318>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 809b 	beq.w	80079ee <USBD_StdEPReq+0x1ca>
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d03c      	beq.n	8007936 <USBD_StdEPReq+0x112>
 80078bc:	e13e      	b.n	8007b3c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d002      	beq.n	80078d0 <USBD_StdEPReq+0xac>
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d016      	beq.n	80078fc <USBD_StdEPReq+0xd8>
 80078ce:	e02c      	b.n	800792a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00d      	beq.n	80078f2 <USBD_StdEPReq+0xce>
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b80      	cmp	r3, #128	; 0x80
 80078da:	d00a      	beq.n	80078f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 f999 	bl	8008c18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078e6:	2180      	movs	r1, #128	; 0x80
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f995 	bl	8008c18 <USBD_LL_StallEP>
 80078ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078f0:	e020      	b.n	8007934 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fca4 	bl	8008242 <USBD_CtlError>
              break;
 80078fa:	e01b      	b.n	8007934 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	885b      	ldrh	r3, [r3, #2]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10e      	bne.n	8007922 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00b      	beq.n	8007922 <USBD_StdEPReq+0xfe>
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b80      	cmp	r3, #128	; 0x80
 800790e:	d008      	beq.n	8007922 <USBD_StdEPReq+0xfe>
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	88db      	ldrh	r3, [r3, #6]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d104      	bne.n	8007922 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 f97b 	bl	8008c18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fd58 	bl	80083d8 <USBD_CtlSendStatus>

              break;
 8007928:	e004      	b.n	8007934 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fc88 	bl	8008242 <USBD_CtlError>
              break;
 8007932:	bf00      	nop
          }
          break;
 8007934:	e107      	b.n	8007b46 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d002      	beq.n	8007948 <USBD_StdEPReq+0x124>
 8007942:	2b03      	cmp	r3, #3
 8007944:	d016      	beq.n	8007974 <USBD_StdEPReq+0x150>
 8007946:	e04b      	b.n	80079e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00d      	beq.n	800796a <USBD_StdEPReq+0x146>
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b80      	cmp	r3, #128	; 0x80
 8007952:	d00a      	beq.n	800796a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f001 f95d 	bl	8008c18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800795e:	2180      	movs	r1, #128	; 0x80
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 f959 	bl	8008c18 <USBD_LL_StallEP>
 8007966:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007968:	e040      	b.n	80079ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fc68 	bl	8008242 <USBD_CtlError>
              break;
 8007972:	e03b      	b.n	80079ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	885b      	ldrh	r3, [r3, #2]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d136      	bne.n	80079ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 f963 	bl	8008c56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fd21 	bl	80083d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7ff fde2 	bl	8007564 <USBD_CoreFindEP>
 80079a0:	4603      	mov	r3, r0
 80079a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079a4:	7b7b      	ldrb	r3, [r7, #13]
 80079a6:	2bff      	cmp	r3, #255	; 0xff
 80079a8:	d01f      	beq.n	80079ea <USBD_StdEPReq+0x1c6>
 80079aa:	7b7b      	ldrb	r3, [r7, #13]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d11c      	bne.n	80079ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80079b0:	7b7a      	ldrb	r2, [r7, #13]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80079b8:	7b7a      	ldrb	r2, [r7, #13]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	32ae      	adds	r2, #174	; 0xae
 80079be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d010      	beq.n	80079ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079c8:	7b7a      	ldrb	r2, [r7, #13]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	32ae      	adds	r2, #174	; 0xae
 80079ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	4798      	blx	r3
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80079de:	e004      	b.n	80079ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fc2d 	bl	8008242 <USBD_CtlError>
              break;
 80079e8:	e000      	b.n	80079ec <USBD_StdEPReq+0x1c8>
              break;
 80079ea:	bf00      	nop
          }
          break;
 80079ec:	e0ab      	b.n	8007b46 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d002      	beq.n	8007a00 <USBD_StdEPReq+0x1dc>
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d032      	beq.n	8007a64 <USBD_StdEPReq+0x240>
 80079fe:	e097      	b.n	8007b30 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <USBD_StdEPReq+0x1f2>
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b80      	cmp	r3, #128	; 0x80
 8007a0a:	d004      	beq.n	8007a16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fc17 	bl	8008242 <USBD_CtlError>
                break;
 8007a14:	e091      	b.n	8007b3a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	da0b      	bge.n	8007a36 <USBD_StdEPReq+0x212>
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	3310      	adds	r3, #16
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	4413      	add	r3, r2
 8007a32:	3304      	adds	r3, #4
 8007a34:	e00b      	b.n	8007a4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2202      	movs	r2, #2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fc61 	bl	8008324 <USBD_CtlSendData>
              break;
 8007a62:	e06a      	b.n	8007b3a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	da11      	bge.n	8007a90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	f003 020f 	and.w	r2, r3, #15
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	3324      	adds	r3, #36	; 0x24
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d117      	bne.n	8007ab6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fbda 	bl	8008242 <USBD_CtlError>
                  break;
 8007a8e:	e054      	b.n	8007b3a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	f003 020f 	and.w	r2, r3, #15
 8007a96:	6879      	ldr	r1, [r7, #4]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	440b      	add	r3, r1
 8007aa2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d104      	bne.n	8007ab6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fbc7 	bl	8008242 <USBD_CtlError>
                  break;
 8007ab4:	e041      	b.n	8007b3a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	da0b      	bge.n	8007ad6 <USBD_StdEPReq+0x2b2>
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	3310      	adds	r3, #16
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	e00b      	b.n	8007aee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007adc:	4613      	mov	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4413      	add	r3, r2
 8007aec:	3304      	adds	r3, #4
 8007aee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <USBD_StdEPReq+0x2d8>
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	2b80      	cmp	r3, #128	; 0x80
 8007afa:	d103      	bne.n	8007b04 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	e00e      	b.n	8007b22 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 f8c3 	bl	8008c94 <USBD_LL_IsStallEP>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2201      	movs	r2, #1
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	e002      	b.n	8007b22 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2202      	movs	r2, #2
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fbfb 	bl	8008324 <USBD_CtlSendData>
              break;
 8007b2e:	e004      	b.n	8007b3a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fb85 	bl	8008242 <USBD_CtlError>
              break;
 8007b38:	bf00      	nop
          }
          break;
 8007b3a:	e004      	b.n	8007b46 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fb7f 	bl	8008242 <USBD_CtlError>
          break;
 8007b44:	bf00      	nop
      }
      break;
 8007b46:	e005      	b.n	8007b54 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fb79 	bl	8008242 <USBD_CtlError>
      break;
 8007b50:	e000      	b.n	8007b54 <USBD_StdEPReq+0x330>
      break;
 8007b52:	bf00      	nop
  }

  return ret;
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	885b      	ldrh	r3, [r3, #2]
 8007b7a:	0a1b      	lsrs	r3, r3, #8
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	2b0e      	cmp	r3, #14
 8007b82:	f200 8152 	bhi.w	8007e2a <USBD_GetDescriptor+0x2ca>
 8007b86:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <USBD_GetDescriptor+0x2c>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007bfd 	.word	0x08007bfd
 8007b90:	08007c15 	.word	0x08007c15
 8007b94:	08007c55 	.word	0x08007c55
 8007b98:	08007e2b 	.word	0x08007e2b
 8007b9c:	08007e2b 	.word	0x08007e2b
 8007ba0:	08007dcb 	.word	0x08007dcb
 8007ba4:	08007df7 	.word	0x08007df7
 8007ba8:	08007e2b 	.word	0x08007e2b
 8007bac:	08007e2b 	.word	0x08007e2b
 8007bb0:	08007e2b 	.word	0x08007e2b
 8007bb4:	08007e2b 	.word	0x08007e2b
 8007bb8:	08007e2b 	.word	0x08007e2b
 8007bbc:	08007e2b 	.word	0x08007e2b
 8007bc0:	08007e2b 	.word	0x08007e2b
 8007bc4:	08007bc9 	.word	0x08007bc9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	7c12      	ldrb	r2, [r2, #16]
 8007be0:	f107 0108 	add.w	r1, r7, #8
 8007be4:	4610      	mov	r0, r2
 8007be6:	4798      	blx	r3
 8007be8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bea:	e126      	b.n	8007e3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fb27 	bl	8008242 <USBD_CtlError>
        err++;
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	72fb      	strb	r3, [r7, #11]
      break;
 8007bfa:	e11e      	b.n	8007e3a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
 8007c08:	f107 0108 	add.w	r1, r7, #8
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
      break;
 8007c12:	e112      	b.n	8007e3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	7c1b      	ldrb	r3, [r3, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10d      	bne.n	8007c38 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c24:	f107 0208 	add.w	r2, r7, #8
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
 8007c2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3301      	adds	r3, #1
 8007c32:	2202      	movs	r2, #2
 8007c34:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c36:	e100      	b.n	8007e3a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	f107 0208 	add.w	r2, r7, #8
 8007c44:	4610      	mov	r0, r2
 8007c46:	4798      	blx	r3
 8007c48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	2202      	movs	r2, #2
 8007c50:	701a      	strb	r2, [r3, #0]
      break;
 8007c52:	e0f2      	b.n	8007e3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	885b      	ldrh	r3, [r3, #2]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b05      	cmp	r3, #5
 8007c5c:	f200 80ac 	bhi.w	8007db8 <USBD_GetDescriptor+0x258>
 8007c60:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <USBD_GetDescriptor+0x108>)
 8007c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c66:	bf00      	nop
 8007c68:	08007c81 	.word	0x08007c81
 8007c6c:	08007cb5 	.word	0x08007cb5
 8007c70:	08007ce9 	.word	0x08007ce9
 8007c74:	08007d1d 	.word	0x08007d1d
 8007c78:	08007d51 	.word	0x08007d51
 8007c7c:	08007d85 	.word	0x08007d85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	7c12      	ldrb	r2, [r2, #16]
 8007c98:	f107 0108 	add.w	r1, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca2:	e091      	b.n	8007dc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 facb 	bl	8008242 <USBD_CtlError>
            err++;
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb2:	e089      	b.n	8007dc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7c12      	ldrb	r2, [r2, #16]
 8007ccc:	f107 0108 	add.w	r1, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd6:	e077      	b.n	8007dc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fab1 	bl	8008242 <USBD_CtlError>
            err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce6:	e06f      	b.n	8007dc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	7c12      	ldrb	r2, [r2, #16]
 8007d00:	f107 0108 	add.w	r1, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d0a:	e05d      	b.n	8007dc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa97 	bl	8008242 <USBD_CtlError>
            err++;
 8007d14:	7afb      	ldrb	r3, [r7, #11]
 8007d16:	3301      	adds	r3, #1
 8007d18:	72fb      	strb	r3, [r7, #11]
          break;
 8007d1a:	e055      	b.n	8007dc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	7c12      	ldrb	r2, [r2, #16]
 8007d34:	f107 0108 	add.w	r1, r7, #8
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d3e:	e043      	b.n	8007dc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa7d 	bl	8008242 <USBD_CtlError>
            err++;
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d4e:	e03b      	b.n	8007dc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7c12      	ldrb	r2, [r2, #16]
 8007d68:	f107 0108 	add.w	r1, r7, #8
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
 8007d70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d72:	e029      	b.n	8007dc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa63 	bl	8008242 <USBD_CtlError>
            err++;
 8007d7c:	7afb      	ldrb	r3, [r7, #11]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	72fb      	strb	r3, [r7, #11]
          break;
 8007d82:	e021      	b.n	8007dc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	7c12      	ldrb	r2, [r2, #16]
 8007d9c:	f107 0108 	add.w	r1, r7, #8
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
 8007da4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007da6:	e00f      	b.n	8007dc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa49 	bl	8008242 <USBD_CtlError>
            err++;
 8007db0:	7afb      	ldrb	r3, [r7, #11]
 8007db2:	3301      	adds	r3, #1
 8007db4:	72fb      	strb	r3, [r7, #11]
          break;
 8007db6:	e007      	b.n	8007dc8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa41 	bl	8008242 <USBD_CtlError>
          err++;
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007dc6:	bf00      	nop
      }
      break;
 8007dc8:	e037      	b.n	8007e3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	7c1b      	ldrb	r3, [r3, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dda:	f107 0208 	add.w	r2, r7, #8
 8007dde:	4610      	mov	r0, r2
 8007de0:	4798      	blx	r3
 8007de2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007de4:	e029      	b.n	8007e3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fa2a 	bl	8008242 <USBD_CtlError>
        err++;
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	3301      	adds	r3, #1
 8007df2:	72fb      	strb	r3, [r7, #11]
      break;
 8007df4:	e021      	b.n	8007e3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	7c1b      	ldrb	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10d      	bne.n	8007e1a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e06:	f107 0208 	add.w	r2, r7, #8
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	4798      	blx	r3
 8007e0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	2207      	movs	r2, #7
 8007e16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e18:	e00f      	b.n	8007e3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fa10 	bl	8008242 <USBD_CtlError>
        err++;
 8007e22:	7afb      	ldrb	r3, [r7, #11]
 8007e24:	3301      	adds	r3, #1
 8007e26:	72fb      	strb	r3, [r7, #11]
      break;
 8007e28:	e007      	b.n	8007e3a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fa08 	bl	8008242 <USBD_CtlError>
      err++;
 8007e32:	7afb      	ldrb	r3, [r7, #11]
 8007e34:	3301      	adds	r3, #1
 8007e36:	72fb      	strb	r3, [r7, #11]
      break;
 8007e38:	bf00      	nop
  }

  if (err != 0U)
 8007e3a:	7afb      	ldrb	r3, [r7, #11]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d11e      	bne.n	8007e7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	88db      	ldrh	r3, [r3, #6]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d016      	beq.n	8007e76 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007e48:	893b      	ldrh	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00e      	beq.n	8007e6c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	88da      	ldrh	r2, [r3, #6]
 8007e52:	893b      	ldrh	r3, [r7, #8]
 8007e54:	4293      	cmp	r3, r2
 8007e56:	bf28      	it	cs
 8007e58:	4613      	movcs	r3, r2
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e5e:	893b      	ldrh	r3, [r7, #8]
 8007e60:	461a      	mov	r2, r3
 8007e62:	68f9      	ldr	r1, [r7, #12]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fa5d 	bl	8008324 <USBD_CtlSendData>
 8007e6a:	e009      	b.n	8007e80 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f9e7 	bl	8008242 <USBD_CtlError>
 8007e74:	e004      	b.n	8007e80 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 faae 	bl	80083d8 <USBD_CtlSendStatus>
 8007e7c:	e000      	b.n	8007e80 <USBD_GetDescriptor+0x320>
    return;
 8007e7e:	bf00      	nop
  }
}
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop

08007e88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	889b      	ldrh	r3, [r3, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d131      	bne.n	8007efe <USBD_SetAddress+0x76>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	88db      	ldrh	r3, [r3, #6]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d12d      	bne.n	8007efe <USBD_SetAddress+0x76>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	885b      	ldrh	r3, [r3, #2]
 8007ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ea8:	d829      	bhi.n	8007efe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	885b      	ldrh	r3, [r3, #2]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d104      	bne.n	8007ecc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f9bc 	bl	8008242 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eca:	e01d      	b.n	8007f08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	7bfa      	ldrb	r2, [r7, #15]
 8007ed0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 ff07 	bl	8008cec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa7a 	bl	80083d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2202      	movs	r2, #2
 8007eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef2:	e009      	b.n	8007f08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efc:	e004      	b.n	8007f08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f99e 	bl	8008242 <USBD_CtlError>
  }
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	4b4e      	ldr	r3, [pc, #312]	; (8008060 <USBD_SetConfig+0x150>)
 8007f26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f28:	4b4d      	ldr	r3, [pc, #308]	; (8008060 <USBD_SetConfig+0x150>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d905      	bls.n	8007f3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f985 	bl	8008242 <USBD_CtlError>
    return USBD_FAIL;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e08c      	b.n	8008056 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d002      	beq.n	8007f4e <USBD_SetConfig+0x3e>
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d029      	beq.n	8007fa0 <USBD_SetConfig+0x90>
 8007f4c:	e075      	b.n	800803a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f4e:	4b44      	ldr	r3, [pc, #272]	; (8008060 <USBD_SetConfig+0x150>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d020      	beq.n	8007f98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f56:	4b42      	ldr	r3, [pc, #264]	; (8008060 <USBD_SetConfig+0x150>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f60:	4b3f      	ldr	r3, [pc, #252]	; (8008060 <USBD_SetConfig+0x150>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7fe ffbd 	bl	8006ee6 <USBD_SetClassConfig>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d008      	beq.n	8007f88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f962 	bl	8008242 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2202      	movs	r2, #2
 8007f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f86:	e065      	b.n	8008054 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fa25 	bl	80083d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2203      	movs	r2, #3
 8007f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f96:	e05d      	b.n	8008054 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa1d 	bl	80083d8 <USBD_CtlSendStatus>
      break;
 8007f9e:	e059      	b.n	8008054 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fa0:	4b2f      	ldr	r3, [pc, #188]	; (8008060 <USBD_SetConfig+0x150>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d112      	bne.n	8007fce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007fb0:	4b2b      	ldr	r3, [pc, #172]	; (8008060 <USBD_SetConfig+0x150>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fba:	4b29      	ldr	r3, [pc, #164]	; (8008060 <USBD_SetConfig+0x150>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7fe ffac 	bl	8006f1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fa06 	bl	80083d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fcc:	e042      	b.n	8008054 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007fce:	4b24      	ldr	r3, [pc, #144]	; (8008060 <USBD_SetConfig+0x150>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d02a      	beq.n	8008032 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7fe ff9a 	bl	8006f1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fea:	4b1d      	ldr	r3, [pc, #116]	; (8008060 <USBD_SetConfig+0x150>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ff4:	4b1a      	ldr	r3, [pc, #104]	; (8008060 <USBD_SetConfig+0x150>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7fe ff73 	bl	8006ee6 <USBD_SetClassConfig>
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00f      	beq.n	800802a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f918 	bl	8008242 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7fe ff7f 	bl	8006f1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008028:	e014      	b.n	8008054 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f9d4 	bl	80083d8 <USBD_CtlSendStatus>
      break;
 8008030:	e010      	b.n	8008054 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f9d0 	bl	80083d8 <USBD_CtlSendStatus>
      break;
 8008038:	e00c      	b.n	8008054 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f900 	bl	8008242 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008042:	4b07      	ldr	r3, [pc, #28]	; (8008060 <USBD_SetConfig+0x150>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7fe ff68 	bl	8006f1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800804e:	2303      	movs	r3, #3
 8008050:	73fb      	strb	r3, [r7, #15]
      break;
 8008052:	bf00      	nop
  }

  return ret;
 8008054:	7bfb      	ldrb	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	200002b0 	.word	0x200002b0

08008064 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	88db      	ldrh	r3, [r3, #6]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d004      	beq.n	8008080 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f8e2 	bl	8008242 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800807e:	e023      	b.n	80080c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b02      	cmp	r3, #2
 800808a:	dc02      	bgt.n	8008092 <USBD_GetConfig+0x2e>
 800808c:	2b00      	cmp	r3, #0
 800808e:	dc03      	bgt.n	8008098 <USBD_GetConfig+0x34>
 8008090:	e015      	b.n	80080be <USBD_GetConfig+0x5a>
 8008092:	2b03      	cmp	r3, #3
 8008094:	d00b      	beq.n	80080ae <USBD_GetConfig+0x4a>
 8008096:	e012      	b.n	80080be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3308      	adds	r3, #8
 80080a2:	2201      	movs	r2, #1
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f93c 	bl	8008324 <USBD_CtlSendData>
        break;
 80080ac:	e00c      	b.n	80080c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3304      	adds	r3, #4
 80080b2:	2201      	movs	r2, #1
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f934 	bl	8008324 <USBD_CtlSendData>
        break;
 80080bc:	e004      	b.n	80080c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f8be 	bl	8008242 <USBD_CtlError>
        break;
 80080c6:	bf00      	nop
}
 80080c8:	bf00      	nop
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	3b01      	subs	r3, #1
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d81e      	bhi.n	8008126 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	88db      	ldrh	r3, [r3, #6]
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d004      	beq.n	80080fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f8a5 	bl	8008242 <USBD_CtlError>
        break;
 80080f8:	e01a      	b.n	8008130 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008106:	2b00      	cmp	r3, #0
 8008108:	d005      	beq.n	8008116 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f043 0202 	orr.w	r2, r3, #2
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	330c      	adds	r3, #12
 800811a:	2202      	movs	r2, #2
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f900 	bl	8008324 <USBD_CtlSendData>
      break;
 8008124:	e004      	b.n	8008130 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f88a 	bl	8008242 <USBD_CtlError>
      break;
 800812e:	bf00      	nop
  }
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	885b      	ldrh	r3, [r3, #2]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d107      	bne.n	800815a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f940 	bl	80083d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008158:	e013      	b.n	8008182 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	885b      	ldrh	r3, [r3, #2]
 800815e:	2b02      	cmp	r3, #2
 8008160:	d10b      	bne.n	800817a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	889b      	ldrh	r3, [r3, #4]
 8008166:	0a1b      	lsrs	r3, r3, #8
 8008168:	b29b      	uxth	r3, r3
 800816a:	b2da      	uxtb	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f930 	bl	80083d8 <USBD_CtlSendStatus>
}
 8008178:	e003      	b.n	8008182 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f860 	bl	8008242 <USBD_CtlError>
}
 8008182:	bf00      	nop
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800819a:	b2db      	uxtb	r3, r3
 800819c:	3b01      	subs	r3, #1
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d80b      	bhi.n	80081ba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	885b      	ldrh	r3, [r3, #2]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d10c      	bne.n	80081c4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f910 	bl	80083d8 <USBD_CtlSendStatus>
      }
      break;
 80081b8:	e004      	b.n	80081c4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f840 	bl	8008242 <USBD_CtlError>
      break;
 80081c2:	e000      	b.n	80081c6 <USBD_ClrFeature+0x3c>
      break;
 80081c4:	bf00      	nop
  }
}
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3301      	adds	r3, #1
 80081e8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	781a      	ldrb	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3301      	adds	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f7ff fa17 	bl	800762c <SWAPBYTE>
 80081fe:	4603      	mov	r3, r0
 8008200:	461a      	mov	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3301      	adds	r3, #1
 8008210:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7ff fa0a 	bl	800762c <SWAPBYTE>
 8008218:	4603      	mov	r3, r0
 800821a:	461a      	mov	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3301      	adds	r3, #1
 8008224:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3301      	adds	r3, #1
 800822a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f7ff f9fd 	bl	800762c <SWAPBYTE>
 8008232:	4603      	mov	r3, r0
 8008234:	461a      	mov	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	80da      	strh	r2, [r3, #6]
}
 800823a:	bf00      	nop
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800824c:	2180      	movs	r1, #128	; 0x80
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fce2 	bl	8008c18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008254:	2100      	movs	r1, #0
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fcde 	bl	8008c18 <USBD_LL_StallEP>
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d036      	beq.n	80082e8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800827e:	6938      	ldr	r0, [r7, #16]
 8008280:	f000 f836 	bl	80082f0 <USBD_GetLen>
 8008284:	4603      	mov	r3, r0
 8008286:	3301      	adds	r3, #1
 8008288:	b29b      	uxth	r3, r3
 800828a:	005b      	lsls	r3, r3, #1
 800828c:	b29a      	uxth	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	4413      	add	r3, r2
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	7812      	ldrb	r2, [r2, #0]
 800829c:	701a      	strb	r2, [r3, #0]
  idx++;
 800829e:	7dfb      	ldrb	r3, [r7, #23]
 80082a0:	3301      	adds	r3, #1
 80082a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	4413      	add	r3, r2
 80082aa:	2203      	movs	r2, #3
 80082ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	3301      	adds	r3, #1
 80082b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082b4:	e013      	b.n	80082de <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	4413      	add	r3, r2
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	7812      	ldrb	r2, [r2, #0]
 80082c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	3301      	adds	r3, #1
 80082c6:	613b      	str	r3, [r7, #16]
    idx++;
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	3301      	adds	r3, #1
 80082cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	4413      	add	r3, r2
 80082d4:	2200      	movs	r2, #0
 80082d6:	701a      	strb	r2, [r3, #0]
    idx++;
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
 80082da:	3301      	adds	r3, #1
 80082dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e7      	bne.n	80082b6 <USBD_GetString+0x52>
 80082e6:	e000      	b.n	80082ea <USBD_GetString+0x86>
    return;
 80082e8:	bf00      	nop
  }
}
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008300:	e005      	b.n	800830e <USBD_GetLen+0x1e>
  {
    len++;
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	3301      	adds	r3, #1
 8008306:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	3301      	adds	r3, #1
 800830c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1f5      	bne.n	8008302 <USBD_GetLen+0x12>
  }

  return len;
 8008316:	7bfb      	ldrb	r3, [r7, #15]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2202      	movs	r2, #2
 8008334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	2100      	movs	r1, #0
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 fced 	bl	8008d2a <USBD_LL_Transmit>

  return USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	2100      	movs	r1, #0
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 fcdc 	bl	8008d2a <USBD_LL_Transmit>

  return USBD_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2203      	movs	r2, #3
 800838c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	2100      	movs	r1, #0
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 fce0 	bl	8008d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	2100      	movs	r1, #0
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 fccf 	bl	8008d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2204      	movs	r2, #4
 80083e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083e8:	2300      	movs	r3, #0
 80083ea:	2200      	movs	r2, #0
 80083ec:	2100      	movs	r1, #0
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fc9b 	bl	8008d2a <USBD_LL_Transmit>

  return USBD_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b082      	sub	sp, #8
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2205      	movs	r2, #5
 800840a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800840e:	2300      	movs	r3, #0
 8008410:	2200      	movs	r2, #0
 8008412:	2100      	movs	r1, #0
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fca9 	bl	8008d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008428:	2200      	movs	r2, #0
 800842a:	4912      	ldr	r1, [pc, #72]	; (8008474 <MX_USB_DEVICE_Init+0x50>)
 800842c:	4812      	ldr	r0, [pc, #72]	; (8008478 <MX_USB_DEVICE_Init+0x54>)
 800842e:	f7fe fcdd 	bl	8006dec <USBD_Init>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008438:	f7f8 faba 	bl	80009b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800843c:	490f      	ldr	r1, [pc, #60]	; (800847c <MX_USB_DEVICE_Init+0x58>)
 800843e:	480e      	ldr	r0, [pc, #56]	; (8008478 <MX_USB_DEVICE_Init+0x54>)
 8008440:	f7fe fd04 	bl	8006e4c <USBD_RegisterClass>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800844a:	f7f8 fab1 	bl	80009b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800844e:	490c      	ldr	r1, [pc, #48]	; (8008480 <MX_USB_DEVICE_Init+0x5c>)
 8008450:	4809      	ldr	r0, [pc, #36]	; (8008478 <MX_USB_DEVICE_Init+0x54>)
 8008452:	f7fe fc3b 	bl	8006ccc <USBD_CDC_RegisterInterface>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800845c:	f7f8 faa8 	bl	80009b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008460:	4805      	ldr	r0, [pc, #20]	; (8008478 <MX_USB_DEVICE_Init+0x54>)
 8008462:	f7fe fd29 	bl	8006eb8 <USBD_Start>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800846c:	f7f8 faa0 	bl	80009b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008470:	bf00      	nop
 8008472:	bd80      	pop	{r7, pc}
 8008474:	200000ac 	.word	0x200000ac
 8008478:	200002b4 	.word	0x200002b4
 800847c:	20000018 	.word	0x20000018
 8008480:	20000098 	.word	0x20000098

08008484 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008488:	2200      	movs	r2, #0
 800848a:	4905      	ldr	r1, [pc, #20]	; (80084a0 <CDC_Init_FS+0x1c>)
 800848c:	4805      	ldr	r0, [pc, #20]	; (80084a4 <CDC_Init_FS+0x20>)
 800848e:	f7fe fc37 	bl	8006d00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008492:	4905      	ldr	r1, [pc, #20]	; (80084a8 <CDC_Init_FS+0x24>)
 8008494:	4803      	ldr	r0, [pc, #12]	; (80084a4 <CDC_Init_FS+0x20>)
 8008496:	f7fe fc55 	bl	8006d44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800849a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800849c:	4618      	mov	r0, r3
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000d90 	.word	0x20000d90
 80084a4:	200002b4 	.word	0x200002b4
 80084a8:	20000590 	.word	0x20000590

080084ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	6039      	str	r1, [r7, #0]
 80084c6:	71fb      	strb	r3, [r7, #7]
 80084c8:	4613      	mov	r3, r2
 80084ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	2b23      	cmp	r3, #35	; 0x23
 80084d0:	d84a      	bhi.n	8008568 <CDC_Control_FS+0xac>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <CDC_Control_FS+0x1c>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	08008569 	.word	0x08008569
 80084dc:	08008569 	.word	0x08008569
 80084e0:	08008569 	.word	0x08008569
 80084e4:	08008569 	.word	0x08008569
 80084e8:	08008569 	.word	0x08008569
 80084ec:	08008569 	.word	0x08008569
 80084f0:	08008569 	.word	0x08008569
 80084f4:	08008569 	.word	0x08008569
 80084f8:	08008569 	.word	0x08008569
 80084fc:	08008569 	.word	0x08008569
 8008500:	08008569 	.word	0x08008569
 8008504:	08008569 	.word	0x08008569
 8008508:	08008569 	.word	0x08008569
 800850c:	08008569 	.word	0x08008569
 8008510:	08008569 	.word	0x08008569
 8008514:	08008569 	.word	0x08008569
 8008518:	08008569 	.word	0x08008569
 800851c:	08008569 	.word	0x08008569
 8008520:	08008569 	.word	0x08008569
 8008524:	08008569 	.word	0x08008569
 8008528:	08008569 	.word	0x08008569
 800852c:	08008569 	.word	0x08008569
 8008530:	08008569 	.word	0x08008569
 8008534:	08008569 	.word	0x08008569
 8008538:	08008569 	.word	0x08008569
 800853c:	08008569 	.word	0x08008569
 8008540:	08008569 	.word	0x08008569
 8008544:	08008569 	.word	0x08008569
 8008548:	08008569 	.word	0x08008569
 800854c:	08008569 	.word	0x08008569
 8008550:	08008569 	.word	0x08008569
 8008554:	08008569 	.word	0x08008569
 8008558:	08008569 	.word	0x08008569
 800855c:	08008569 	.word	0x08008569
 8008560:	08008569 	.word	0x08008569
 8008564:	08008569 	.word	0x08008569
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008568:	bf00      	nop
  }

  return (USBD_OK);
 800856a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008582:	6879      	ldr	r1, [r7, #4]
 8008584:	4805      	ldr	r0, [pc, #20]	; (800859c <CDC_Receive_FS+0x24>)
 8008586:	f7fe fbdd 	bl	8006d44 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800858a:	4804      	ldr	r0, [pc, #16]	; (800859c <CDC_Receive_FS+0x24>)
 800858c:	f7fe fbf8 	bl	8006d80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008590:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	200002b4 	.word	0x200002b4

080085a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	4613      	mov	r3, r2
 80085ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80085b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
	...

080085c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	6039      	str	r1, [r7, #0]
 80085ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2212      	movs	r2, #18
 80085d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085d6:	4b03      	ldr	r3, [pc, #12]	; (80085e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80085d8:	4618      	mov	r0, r3
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	200000cc 	.word	0x200000cc

080085e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	6039      	str	r1, [r7, #0]
 80085f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2204      	movs	r2, #4
 80085f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085fa:	4b03      	ldr	r3, [pc, #12]	; (8008608 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr
 8008608:	200000ec 	.word	0x200000ec

0800860c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	6039      	str	r1, [r7, #0]
 8008616:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d105      	bne.n	800862a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	4907      	ldr	r1, [pc, #28]	; (8008640 <USBD_FS_ProductStrDescriptor+0x34>)
 8008622:	4808      	ldr	r0, [pc, #32]	; (8008644 <USBD_FS_ProductStrDescriptor+0x38>)
 8008624:	f7ff fe1e 	bl	8008264 <USBD_GetString>
 8008628:	e004      	b.n	8008634 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	4904      	ldr	r1, [pc, #16]	; (8008640 <USBD_FS_ProductStrDescriptor+0x34>)
 800862e:	4805      	ldr	r0, [pc, #20]	; (8008644 <USBD_FS_ProductStrDescriptor+0x38>)
 8008630:	f7ff fe18 	bl	8008264 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008634:	4b02      	ldr	r3, [pc, #8]	; (8008640 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20001590 	.word	0x20001590
 8008644:	08008f68 	.word	0x08008f68

08008648 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	4603      	mov	r3, r0
 8008650:	6039      	str	r1, [r7, #0]
 8008652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	4904      	ldr	r1, [pc, #16]	; (8008668 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008658:	4804      	ldr	r0, [pc, #16]	; (800866c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800865a:	f7ff fe03 	bl	8008264 <USBD_GetString>
  return USBD_StrDesc;
 800865e:	4b02      	ldr	r3, [pc, #8]	; (8008668 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	20001590 	.word	0x20001590
 800866c:	08008f80 	.word	0x08008f80

08008670 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	6039      	str	r1, [r7, #0]
 800867a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	221a      	movs	r2, #26
 8008680:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008682:	f000 f855 	bl	8008730 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008686:	4b02      	ldr	r3, [pc, #8]	; (8008690 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	200000f0 	.word	0x200000f0

08008694 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	6039      	str	r1, [r7, #0]
 800869e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086a0:	79fb      	ldrb	r3, [r7, #7]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d105      	bne.n	80086b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	4907      	ldr	r1, [pc, #28]	; (80086c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086aa:	4808      	ldr	r0, [pc, #32]	; (80086cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80086ac:	f7ff fdda 	bl	8008264 <USBD_GetString>
 80086b0:	e004      	b.n	80086bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	4904      	ldr	r1, [pc, #16]	; (80086c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086b6:	4805      	ldr	r0, [pc, #20]	; (80086cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80086b8:	f7ff fdd4 	bl	8008264 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086bc:	4b02      	ldr	r3, [pc, #8]	; (80086c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20001590 	.word	0x20001590
 80086cc:	08008f94 	.word	0x08008f94

080086d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	6039      	str	r1, [r7, #0]
 80086da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d105      	bne.n	80086ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	4907      	ldr	r1, [pc, #28]	; (8008704 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086e6:	4808      	ldr	r0, [pc, #32]	; (8008708 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086e8:	f7ff fdbc 	bl	8008264 <USBD_GetString>
 80086ec:	e004      	b.n	80086f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	4904      	ldr	r1, [pc, #16]	; (8008704 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086f2:	4805      	ldr	r0, [pc, #20]	; (8008708 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086f4:	f7ff fdb6 	bl	8008264 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086f8:	4b02      	ldr	r3, [pc, #8]	; (8008704 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20001590 	.word	0x20001590
 8008708:	08008fa0 	.word	0x08008fa0

0800870c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	6039      	str	r1, [r7, #0]
 8008716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	220c      	movs	r2, #12
 800871c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800871e:	4b03      	ldr	r3, [pc, #12]	; (800872c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	200000e0 	.word	0x200000e0

08008730 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008736:	4b0f      	ldr	r3, [pc, #60]	; (8008774 <Get_SerialNum+0x44>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800873c:	4b0e      	ldr	r3, [pc, #56]	; (8008778 <Get_SerialNum+0x48>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008742:	4b0e      	ldr	r3, [pc, #56]	; (800877c <Get_SerialNum+0x4c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4413      	add	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d009      	beq.n	800876a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008756:	2208      	movs	r2, #8
 8008758:	4909      	ldr	r1, [pc, #36]	; (8008780 <Get_SerialNum+0x50>)
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 f814 	bl	8008788 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008760:	2204      	movs	r2, #4
 8008762:	4908      	ldr	r1, [pc, #32]	; (8008784 <Get_SerialNum+0x54>)
 8008764:	68b8      	ldr	r0, [r7, #8]
 8008766:	f000 f80f 	bl	8008788 <IntToUnicode>
  }
}
 800876a:	bf00      	nop
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	1fff7a10 	.word	0x1fff7a10
 8008778:	1fff7a14 	.word	0x1fff7a14
 800877c:	1fff7a18 	.word	0x1fff7a18
 8008780:	200000f2 	.word	0x200000f2
 8008784:	20000102 	.word	0x20000102

08008788 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008788:	b480      	push	{r7}
 800878a:	b087      	sub	sp, #28
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	4613      	mov	r3, r2
 8008794:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800879a:	2300      	movs	r3, #0
 800879c:	75fb      	strb	r3, [r7, #23]
 800879e:	e027      	b.n	80087f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	0f1b      	lsrs	r3, r3, #28
 80087a4:	2b09      	cmp	r3, #9
 80087a6:	d80b      	bhi.n	80087c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	0f1b      	lsrs	r3, r3, #28
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	4619      	mov	r1, r3
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	440b      	add	r3, r1
 80087b8:	3230      	adds	r2, #48	; 0x30
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	e00a      	b.n	80087d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	0f1b      	lsrs	r3, r3, #28
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	4619      	mov	r1, r3
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	440b      	add	r3, r1
 80087d0:	3237      	adds	r2, #55	; 0x37
 80087d2:	b2d2      	uxtb	r2, r2
 80087d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	011b      	lsls	r3, r3, #4
 80087da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	3301      	adds	r3, #1
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	4413      	add	r3, r2
 80087e6:	2200      	movs	r2, #0
 80087e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
 80087ec:	3301      	adds	r3, #1
 80087ee:	75fb      	strb	r3, [r7, #23]
 80087f0:	7dfa      	ldrb	r2, [r7, #23]
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d3d3      	bcc.n	80087a0 <IntToUnicode+0x18>
  }
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
	...

08008808 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b0a0      	sub	sp, #128	; 0x80
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008810:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	605a      	str	r2, [r3, #4]
 800881a:	609a      	str	r2, [r3, #8]
 800881c:	60da      	str	r2, [r3, #12]
 800881e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008820:	f107 0310 	add.w	r3, r7, #16
 8008824:	225c      	movs	r2, #92	; 0x5c
 8008826:	2100      	movs	r1, #0
 8008828:	4618      	mov	r0, r3
 800882a:	f000 fb89 	bl	8008f40 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008836:	d149      	bne.n	80088cc <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800883c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800883e:	2300      	movs	r3, #0
 8008840:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008842:	f107 0310 	add.w	r3, r7, #16
 8008846:	4618      	mov	r0, r3
 8008848:	f7fa feb6 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8008852:	f7f8 f8ad 	bl	80009b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	4b1e      	ldr	r3, [pc, #120]	; (80088d4 <HAL_PCD_MspInit+0xcc>)
 800885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885e:	4a1d      	ldr	r2, [pc, #116]	; (80088d4 <HAL_PCD_MspInit+0xcc>)
 8008860:	f043 0301 	orr.w	r3, r3, #1
 8008864:	6313      	str	r3, [r2, #48]	; 0x30
 8008866:	4b1b      	ldr	r3, [pc, #108]	; (80088d4 <HAL_PCD_MspInit+0xcc>)
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_D__Pin|USB_D_A12_Pin;
 8008872:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008876:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008878:	2302      	movs	r3, #2
 800887a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800887c:	2300      	movs	r3, #0
 800887e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008880:	2303      	movs	r3, #3
 8008882:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008884:	230a      	movs	r3, #10
 8008886:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008888:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800888c:	4619      	mov	r1, r3
 800888e:	4812      	ldr	r0, [pc, #72]	; (80088d8 <HAL_PCD_MspInit+0xd0>)
 8008890:	f7f8 fefa 	bl	8001688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008894:	4b0f      	ldr	r3, [pc, #60]	; (80088d4 <HAL_PCD_MspInit+0xcc>)
 8008896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008898:	4a0e      	ldr	r2, [pc, #56]	; (80088d4 <HAL_PCD_MspInit+0xcc>)
 800889a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889e:	6353      	str	r3, [r2, #52]	; 0x34
 80088a0:	2300      	movs	r3, #0
 80088a2:	60bb      	str	r3, [r7, #8]
 80088a4:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <HAL_PCD_MspInit+0xcc>)
 80088a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a8:	4a0a      	ldr	r2, [pc, #40]	; (80088d4 <HAL_PCD_MspInit+0xcc>)
 80088aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088ae:	6453      	str	r3, [r2, #68]	; 0x44
 80088b0:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <HAL_PCD_MspInit+0xcc>)
 80088b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088b8:	60bb      	str	r3, [r7, #8]
 80088ba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088bc:	2200      	movs	r2, #0
 80088be:	2100      	movs	r1, #0
 80088c0:	2043      	movs	r0, #67	; 0x43
 80088c2:	f7f8 feaa 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088c6:	2043      	movs	r0, #67	; 0x43
 80088c8:	f7f8 fec3 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088cc:	bf00      	nop
 80088ce:	3780      	adds	r7, #128	; 0x80
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	40023800 	.word	0x40023800
 80088d8:	40020000 	.word	0x40020000

080088dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80088f0:	4619      	mov	r1, r3
 80088f2:	4610      	mov	r0, r2
 80088f4:	f7fe fb2d 	bl	8006f52 <USBD_LL_SetupStage>
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008912:	78fa      	ldrb	r2, [r7, #3]
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	4613      	mov	r3, r2
 8008918:	00db      	lsls	r3, r3, #3
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	78fb      	ldrb	r3, [r7, #3]
 8008928:	4619      	mov	r1, r3
 800892a:	f7fe fb67 	bl	8006ffc <USBD_LL_DataOutStage>
}
 800892e:	bf00      	nop
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	460b      	mov	r3, r1
 8008940:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008948:	78fa      	ldrb	r2, [r7, #3]
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	4613      	mov	r3, r2
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	334c      	adds	r3, #76	; 0x4c
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	4619      	mov	r1, r3
 800895e:	f7fe fc00 	bl	8007162 <USBD_LL_DataInStage>
}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008978:	4618      	mov	r0, r3
 800897a:	f7fe fd34 	bl	80073e6 <USBD_LL_SOF>
}
 800897e:	bf00      	nop
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800898e:	2301      	movs	r3, #1
 8008990:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d102      	bne.n	80089a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]
 800899e:	e008      	b.n	80089b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d102      	bne.n	80089ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80089a8:	2301      	movs	r3, #1
 80089aa:	73fb      	strb	r3, [r7, #15]
 80089ac:	e001      	b.n	80089b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80089ae:	f7f7 ffff 	bl	80009b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089b8:	7bfa      	ldrb	r2, [r7, #15]
 80089ba:	4611      	mov	r1, r2
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe fcd4 	bl	800736a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fe fc7c 	bl	80072c6 <USBD_LL_Reset>
}
 80089ce:	bf00      	nop
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
	...

080089d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fccf 	bl	800738a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	6812      	ldr	r2, [r2, #0]
 80089fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089fe:	f043 0301 	orr.w	r3, r3, #1
 8008a02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d005      	beq.n	8008a18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a0c:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <HAL_PCD_SuspendCallback+0x48>)
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	4a03      	ldr	r2, [pc, #12]	; (8008a20 <HAL_PCD_SuspendCallback+0x48>)
 8008a12:	f043 0306 	orr.w	r3, r3, #6
 8008a16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a18:	bf00      	nop
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	e000ed00 	.word	0xe000ed00

08008a24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe fcbf 	bl	80073b6 <USBD_LL_Resume>
}
 8008a38:	bf00      	nop
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a52:	78fa      	ldrb	r2, [r7, #3]
 8008a54:	4611      	mov	r1, r2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe fd17 	bl	800748a <USBD_LL_IsoOUTIncomplete>
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a76:	78fa      	ldrb	r2, [r7, #3]
 8008a78:	4611      	mov	r1, r2
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe fcd3 	bl	8007426 <USBD_LL_IsoINIncomplete>
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe fd29 	bl	80074ee <USBD_LL_DevConnected>
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fe fd26 	bl	8007504 <USBD_LL_DevDisconnected>
}
 8008ab8:	bf00      	nop
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d13c      	bne.n	8008b4a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ad0:	4a20      	ldr	r2, [pc, #128]	; (8008b54 <USBD_LL_Init+0x94>)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a1e      	ldr	r2, [pc, #120]	; (8008b54 <USBD_LL_Init+0x94>)
 8008adc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ae0:	4b1c      	ldr	r3, [pc, #112]	; (8008b54 <USBD_LL_Init+0x94>)
 8008ae2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ae6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008ae8:	4b1a      	ldr	r3, [pc, #104]	; (8008b54 <USBD_LL_Init+0x94>)
 8008aea:	2206      	movs	r2, #6
 8008aec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008aee:	4b19      	ldr	r3, [pc, #100]	; (8008b54 <USBD_LL_Init+0x94>)
 8008af0:	2202      	movs	r2, #2
 8008af2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008af4:	4b17      	ldr	r3, [pc, #92]	; (8008b54 <USBD_LL_Init+0x94>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008afa:	4b16      	ldr	r3, [pc, #88]	; (8008b54 <USBD_LL_Init+0x94>)
 8008afc:	2202      	movs	r2, #2
 8008afe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b00:	4b14      	ldr	r3, [pc, #80]	; (8008b54 <USBD_LL_Init+0x94>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b06:	4b13      	ldr	r3, [pc, #76]	; (8008b54 <USBD_LL_Init+0x94>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b0c:	4b11      	ldr	r3, [pc, #68]	; (8008b54 <USBD_LL_Init+0x94>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b12:	4b10      	ldr	r3, [pc, #64]	; (8008b54 <USBD_LL_Init+0x94>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b18:	4b0e      	ldr	r3, [pc, #56]	; (8008b54 <USBD_LL_Init+0x94>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b1e:	480d      	ldr	r0, [pc, #52]	; (8008b54 <USBD_LL_Init+0x94>)
 8008b20:	f7f9 f8a4 	bl	8001c6c <HAL_PCD_Init>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b2a:	f7f7 ff41 	bl	80009b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b2e:	2180      	movs	r1, #128	; 0x80
 8008b30:	4808      	ldr	r0, [pc, #32]	; (8008b54 <USBD_LL_Init+0x94>)
 8008b32:	f7fa fb30 	bl	8003196 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b36:	2240      	movs	r2, #64	; 0x40
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4806      	ldr	r0, [pc, #24]	; (8008b54 <USBD_LL_Init+0x94>)
 8008b3c:	f7fa fae4 	bl	8003108 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b40:	2280      	movs	r2, #128	; 0x80
 8008b42:	2101      	movs	r1, #1
 8008b44:	4803      	ldr	r0, [pc, #12]	; (8008b54 <USBD_LL_Init+0x94>)
 8008b46:	f7fa fadf 	bl	8003108 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20001790 	.word	0x20001790

08008b58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7f9 f9a0 	bl	8001eb4 <HAL_PCD_Start>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 f990 	bl	8008ea0 <USBD_Get_USB_Status>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	4608      	mov	r0, r1
 8008b98:	4611      	mov	r1, r2
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	70fb      	strb	r3, [r7, #3]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70bb      	strb	r3, [r7, #2]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bb6:	78bb      	ldrb	r3, [r7, #2]
 8008bb8:	883a      	ldrh	r2, [r7, #0]
 8008bba:	78f9      	ldrb	r1, [r7, #3]
 8008bbc:	f7f9 fe9e 	bl	80028fc <HAL_PCD_EP_Open>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 f96a 	bl	8008ea0 <USBD_Get_USB_Status>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	460b      	mov	r3, r1
 8008be4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bf4:	78fa      	ldrb	r2, [r7, #3]
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7f9 fee7 	bl	80029cc <HAL_PCD_EP_Close>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 f94b 	bl	8008ea0 <USBD_Get_USB_Status>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	4611      	mov	r1, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7f9 ffbf 	bl	8002bba <HAL_PCD_EP_SetStall>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f92c 	bl	8008ea0 <USBD_Get_USB_Status>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	460b      	mov	r3, r1
 8008c60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c70:	78fa      	ldrb	r2, [r7, #3]
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fa f804 	bl	8002c82 <HAL_PCD_EP_ClrStall>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 f90d 	bl	8008ea0 <USBD_Get_USB_Status>
 8008c86:	4603      	mov	r3, r0
 8008c88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ca6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	da0b      	bge.n	8008cc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cb6:	68f9      	ldr	r1, [r7, #12]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	4413      	add	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	440b      	add	r3, r1
 8008cc2:	333e      	adds	r3, #62	; 0x3e
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	e00b      	b.n	8008ce0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cce:	68f9      	ldr	r1, [r7, #12]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	4413      	add	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	440b      	add	r3, r1
 8008cda:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008cde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d06:	78fa      	ldrb	r2, [r7, #3]
 8008d08:	4611      	mov	r1, r2
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7f9 fdd1 	bl	80028b2 <HAL_PCD_SetAddress>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 f8c2 	bl	8008ea0 <USBD_Get_USB_Status>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b086      	sub	sp, #24
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	603b      	str	r3, [r7, #0]
 8008d36:	460b      	mov	r3, r1
 8008d38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d48:	7af9      	ldrb	r1, [r7, #11]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	f7f9 feea 	bl	8002b26 <HAL_PCD_EP_Transmit>
 8008d52:	4603      	mov	r3, r0
 8008d54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 f8a1 	bl	8008ea0 <USBD_Get_USB_Status>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d62:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3718      	adds	r7, #24
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	607a      	str	r2, [r7, #4]
 8008d76:	603b      	str	r3, [r7, #0]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d8a:	7af9      	ldrb	r1, [r7, #11]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	f7f9 fe66 	bl	8002a60 <HAL_PCD_EP_Receive>
 8008d94:	4603      	mov	r3, r0
 8008d96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 f880 	bl	8008ea0 <USBD_Get_USB_Status>
 8008da0:	4603      	mov	r3, r0
 8008da2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008da4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	460b      	mov	r3, r1
 8008db8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dc0:	78fa      	ldrb	r2, [r7, #3]
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7f9 fe96 	bl	8002af6 <HAL_PCD_EP_GetRxCount>
 8008dca:	4603      	mov	r3, r0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <HAL_PCDEx_LPM_Callback+0x18>
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d01f      	beq.n	8008e2a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008dea:	e03b      	b.n	8008e64 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d007      	beq.n	8008e04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008df4:	f7f7 fbb0 	bl	8000558 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008df8:	4b1c      	ldr	r3, [pc, #112]	; (8008e6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	4a1b      	ldr	r2, [pc, #108]	; (8008e6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008dfe:	f023 0306 	bic.w	r3, r3, #6
 8008e02:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	6812      	ldr	r2, [r2, #0]
 8008e12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e16:	f023 0301 	bic.w	r3, r3, #1
 8008e1a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fe fac7 	bl	80073b6 <USBD_LL_Resume>
    break;
 8008e28:	e01c      	b.n	8008e64 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	6812      	ldr	r2, [r2, #0]
 8008e38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e3c:	f043 0301 	orr.w	r3, r3, #1
 8008e40:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fe fa9e 	bl	800738a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e56:	4b05      	ldr	r3, [pc, #20]	; (8008e6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	4a04      	ldr	r2, [pc, #16]	; (8008e6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008e5c:	f043 0306 	orr.w	r3, r3, #6
 8008e60:	6113      	str	r3, [r2, #16]
    break;
 8008e62:	bf00      	nop
}
 8008e64:	bf00      	nop
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	e000ed00 	.word	0xe000ed00

08008e70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e78:	4b03      	ldr	r3, [pc, #12]	; (8008e88 <USBD_static_malloc+0x18>)
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	20001c9c 	.word	0x20001c9c

08008e8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]

}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eae:	79fb      	ldrb	r3, [r7, #7]
 8008eb0:	2b03      	cmp	r3, #3
 8008eb2:	d817      	bhi.n	8008ee4 <USBD_Get_USB_Status+0x44>
 8008eb4:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <USBD_Get_USB_Status+0x1c>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008ecd 	.word	0x08008ecd
 8008ec0:	08008ed3 	.word	0x08008ed3
 8008ec4:	08008ed9 	.word	0x08008ed9
 8008ec8:	08008edf 	.word	0x08008edf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed0:	e00b      	b.n	8008eea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed6:	e008      	b.n	8008eea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	73fb      	strb	r3, [r7, #15]
    break;
 8008edc:	e005      	b.n	8008eea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee2:	e002      	b.n	8008eea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee8:	bf00      	nop
  }
  return usb_status;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <__libc_init_array>:
 8008ef8:	b570      	push	{r4, r5, r6, lr}
 8008efa:	4d0d      	ldr	r5, [pc, #52]	; (8008f30 <__libc_init_array+0x38>)
 8008efc:	4c0d      	ldr	r4, [pc, #52]	; (8008f34 <__libc_init_array+0x3c>)
 8008efe:	1b64      	subs	r4, r4, r5
 8008f00:	10a4      	asrs	r4, r4, #2
 8008f02:	2600      	movs	r6, #0
 8008f04:	42a6      	cmp	r6, r4
 8008f06:	d109      	bne.n	8008f1c <__libc_init_array+0x24>
 8008f08:	4d0b      	ldr	r5, [pc, #44]	; (8008f38 <__libc_init_array+0x40>)
 8008f0a:	4c0c      	ldr	r4, [pc, #48]	; (8008f3c <__libc_init_array+0x44>)
 8008f0c:	f000 f820 	bl	8008f50 <_init>
 8008f10:	1b64      	subs	r4, r4, r5
 8008f12:	10a4      	asrs	r4, r4, #2
 8008f14:	2600      	movs	r6, #0
 8008f16:	42a6      	cmp	r6, r4
 8008f18:	d105      	bne.n	8008f26 <__libc_init_array+0x2e>
 8008f1a:	bd70      	pop	{r4, r5, r6, pc}
 8008f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f20:	4798      	blx	r3
 8008f22:	3601      	adds	r6, #1
 8008f24:	e7ee      	b.n	8008f04 <__libc_init_array+0xc>
 8008f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f2a:	4798      	blx	r3
 8008f2c:	3601      	adds	r6, #1
 8008f2e:	e7f2      	b.n	8008f16 <__libc_init_array+0x1e>
 8008f30:	08008fd0 	.word	0x08008fd0
 8008f34:	08008fd0 	.word	0x08008fd0
 8008f38:	08008fd0 	.word	0x08008fd0
 8008f3c:	08008fd4 	.word	0x08008fd4

08008f40 <memset>:
 8008f40:	4402      	add	r2, r0
 8008f42:	4603      	mov	r3, r0
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d100      	bne.n	8008f4a <memset+0xa>
 8008f48:	4770      	bx	lr
 8008f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4e:	e7f9      	b.n	8008f44 <memset+0x4>

08008f50 <_init>:
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f52:	bf00      	nop
 8008f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f56:	bc08      	pop	{r3}
 8008f58:	469e      	mov	lr, r3
 8008f5a:	4770      	bx	lr

08008f5c <_fini>:
 8008f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5e:	bf00      	nop
 8008f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f62:	bc08      	pop	{r3}
 8008f64:	469e      	mov	lr, r3
 8008f66:	4770      	bx	lr
