
revision_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800c990  0800c990  0001c990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cddc  0800cddc  000202dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cddc  0800cddc  0001cddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cde4  0800cde4  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cde8  0800cde8  0001cde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  0800cdec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc4  200002dc  0800d0c8  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020a0  0800d0c8  000220a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acc7  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b43  00000000  00000000  0003afd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  0003eb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  000400f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002790b  00000000  00000000  00041558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca67  00000000  00000000  00068e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0f46  00000000  00000000  000858ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166810  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006de8  00000000  00000000  00166860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002dc 	.word	0x200002dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c978 	.word	0x0800c978

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002e0 	.word	0x200002e0
 800020c:	0800c978 	.word	0x0800c978

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	0000      	movs	r0, r0
	...

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08e      	sub	sp, #56	; 0x38
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 fd6d 	bl	80019d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f827 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f000 f99d 	bl	800123c <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000f02:	f000 f90f 	bl	8001124 <MX_QUADSPI_Init>
  MX_I2C1_Init();
 8000f06:	f000 f8df 	bl	80010c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f0a:	f000 f937 	bl	800117c <MX_SPI1_Init>
  MX_ADC1_Init();
 8000f0e:	f000 f889 	bl	8001024 <MX_ADC1_Init>
  MX_UART5_Init();
 8000f12:	f000 f969 	bl	80011e8 <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 8000f16:	f008 f88b 	bl	8009030 <MX_USB_DEVICE_Init>
//	// Buzzer OFF
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
//	HAL_Delay(1);

	// USB transmission
	sprintf(test_message, "Hello World: %f", 1.12);
 8000f1a:	1d38      	adds	r0, r7, #4
 8000f1c:	a309      	add	r3, pc, #36	; (adr r3, 8000f44 <main+0x54>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	4907      	ldr	r1, [pc, #28]	; (8000f40 <main+0x50>)
 8000f24:	f009 fab0 	bl	800a488 <siprintf>
	CDC_Transmit_FS((uint8_t*) test_message, strlen(test_message));
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff f970 	bl	8000210 <strlen>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f008 f937 	bl	80091ac <CDC_Transmit_FS>
	sprintf(test_message, "Hello World: %f", 1.12);
 8000f3e:	e7ec      	b.n	8000f1a <main+0x2a>
 8000f40:	0800c990 	.word	0x0800c990
 8000f44:	1eb851ec 	.word	0x1eb851ec
 8000f48:	3ff1eb85 	.word	0x3ff1eb85

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	; 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	2234      	movs	r2, #52	; 0x34
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f008 fe22 	bl	8009ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <SystemClock_Config+0xd0>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a28      	ldr	r2, [pc, #160]	; (800101c <SystemClock_Config+0xd0>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <SystemClock_Config+0xd0>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <SystemClock_Config+0xd4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f98:	4a21      	ldr	r2, [pc, #132]	; (8001020 <SystemClock_Config+0xd4>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <SystemClock_Config+0xd4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fc4:	2348      	movs	r3, #72	; 0x48
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 fe07 	bl	8004bec <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fe4:	f000 f9de 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	230f      	movs	r3, #15
 8000fea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2302      	movs	r3, #2
 8000fee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	2102      	movs	r1, #2
 8001004:	4618      	mov	r0, r3
 8001006:	f002 ff7d 	bl	8003f04 <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001010:	f000 f9c8 	bl	80013a4 <Error_Handler>
  }
}
 8001014:	bf00      	nop
 8001016:	3750      	adds	r7, #80	; 0x50
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40007000 	.word	0x40007000

08001024 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <MX_ADC1_Init+0x98>)
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <MX_ADC1_Init+0x9c>)
 800103a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <MX_ADC1_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_ADC1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_ADC1_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_ADC1_Init+0x98>)
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <MX_ADC1_Init+0xa0>)
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_ADC1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_ADC1_Init+0x98>)
 8001070:	2201      	movs	r2, #1
 8001072:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_ADC1_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_ADC1_Init+0x98>)
 800107e:	2201      	movs	r2, #1
 8001080:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001082:	480e      	ldr	r0, [pc, #56]	; (80010bc <MX_ADC1_Init+0x98>)
 8001084:	f000 fd3c 	bl	8001b00 <HAL_ADC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800108e:	f000 f989 	bl	80013a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001092:	230f      	movs	r3, #15
 8001094:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_ADC1_Init+0x98>)
 80010a4:	f000 fd70 	bl	8001b88 <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010ae:	f000 f979 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200002f8 	.word	0x200002f8
 80010c0:	40012000 	.word	0x40012000
 80010c4:	0f000001 	.word	0x0f000001

080010c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_I2C1_Init+0x50>)
 80010ce:	4a13      	ldr	r2, [pc, #76]	; (800111c <MX_I2C1_Init+0x54>)
 80010d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_I2C1_Init+0x50>)
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_I2C1_Init+0x58>)
 80010d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_I2C1_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_I2C1_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_I2C1_Init+0x50>)
 80010e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <MX_I2C1_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_I2C1_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_I2C1_Init+0x50>)
 8001106:	f001 fa2d 	bl	8002564 <HAL_I2C_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001110:	f000 f948 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000340 	.word	0x20000340
 800111c:	40005400 	.word	0x40005400
 8001120:	000186a0 	.word	0x000186a0

08001124 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_QUADSPI_Init+0x50>)
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <MX_QUADSPI_Init+0x54>)
 800112c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_QUADSPI_Init+0x50>)
 8001130:	22ff      	movs	r2, #255	; 0xff
 8001132:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_QUADSPI_Init+0x50>)
 8001136:	2201      	movs	r2, #1
 8001138:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_QUADSPI_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_QUADSPI_Init+0x50>)
 8001142:	2218      	movs	r2, #24
 8001144:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_QUADSPI_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_QUADSPI_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_QUADSPI_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_QUADSPI_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_QUADSPI_Init+0x50>)
 8001160:	f002 fe0e 	bl	8003d80 <HAL_QSPI_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800116a:	f000 f91b 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000394 	.word	0x20000394
 8001178:	a0001000 	.word	0xa0001000

0800117c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_SPI1_Init+0x64>)
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <MX_SPI1_Init+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_SPI1_Init+0x64>)
 8001188:	f44f 7282 	mov.w	r2, #260	; 0x104
 800118c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_SPI1_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_SPI1_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_SPI1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011c8:	220a      	movs	r2, #10
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011ce:	f003 ffab 	bl	8005128 <HAL_SPI_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011d8:	f000 f8e4 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200003e0 	.word	0x200003e0
 80011e4:	40013000 	.word	0x40013000

080011e8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_UART5_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_UART5_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_UART5_Init+0x4c>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_UART5_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_UART5_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_UART5_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_UART5_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_UART5_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_UART5_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_UART5_Init+0x4c>)
 8001220:	f004 f80b 	bl	800523a <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800122a:	f000 f8bb 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000438 	.word	0x20000438
 8001238:	40005000 	.word	0x40005000

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b4f      	ldr	r3, [pc, #316]	; (8001394 <MX_GPIO_Init+0x158>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a4e      	ldr	r2, [pc, #312]	; (8001394 <MX_GPIO_Init+0x158>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b4c      	ldr	r3, [pc, #304]	; (8001394 <MX_GPIO_Init+0x158>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b48      	ldr	r3, [pc, #288]	; (8001394 <MX_GPIO_Init+0x158>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a47      	ldr	r2, [pc, #284]	; (8001394 <MX_GPIO_Init+0x158>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b45      	ldr	r3, [pc, #276]	; (8001394 <MX_GPIO_Init+0x158>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <MX_GPIO_Init+0x158>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a40      	ldr	r2, [pc, #256]	; (8001394 <MX_GPIO_Init+0x158>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <MX_GPIO_Init+0x158>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <MX_GPIO_Init+0x158>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a39      	ldr	r2, [pc, #228]	; (8001394 <MX_GPIO_Init+0x158>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b37      	ldr	r3, [pc, #220]	; (8001394 <MX_GPIO_Init+0x158>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b33      	ldr	r3, [pc, #204]	; (8001394 <MX_GPIO_Init+0x158>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a32      	ldr	r2, [pc, #200]	; (8001394 <MX_GPIO_Init+0x158>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <MX_GPIO_Init+0x158>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Radio_RX_Pin|Buzzer_Gate_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	210c      	movs	r1, #12
 80012e2:	482d      	ldr	r0, [pc, #180]	; (8001398 <MX_GPIO_Init+0x15c>)
 80012e4:	f001 f924 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Radio_Reset_Pin|Indicator_LED_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80012ee:	482b      	ldr	r0, [pc, #172]	; (800139c <MX_GPIO_Init+0x160>)
 80012f0:	f001 f91e 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_Reset_GPIO_Port, GPS_Reset_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fa:	4829      	ldr	r0, [pc, #164]	; (80013a0 <MX_GPIO_Init+0x164>)
 80012fc:	f001 f918 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Acc_Int1_Pin Gyro_Int3_Pin Radio_DIO2_Pin Radio_DIO5_Pin
                           Radio_DIO4_Pin Radio_DIO3_Pin */
  GPIO_InitStruct.Pin = Acc_Int1_Pin|Gyro_Int3_Pin|Radio_DIO2_Pin|Radio_DIO5_Pin
 8001300:	f24c 13c2 	movw	r3, #49602	; 0xc1c2
 8001304:	617b      	str	r3, [r7, #20]
                          |Radio_DIO4_Pin|Radio_DIO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4822      	ldr	r0, [pc, #136]	; (80013a0 <MX_GPIO_Init+0x164>)
 8001316:	f000 ff77 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Radio_DIO1_Pin Radio_DIO0_Pin Radio_TX_Pin Mag_Data_Ready_Pin */
  GPIO_InitStruct.Pin = Radio_DIO1_Pin|Radio_DIO0_Pin|Radio_TX_Pin|Mag_Data_Ready_Pin;
 800131a:	f240 1313 	movw	r3, #275	; 0x113
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	481a      	ldr	r0, [pc, #104]	; (8001398 <MX_GPIO_Init+0x15c>)
 8001330:	f000 ff6a 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Radio_RX_Pin Buzzer_Gate_Pin */
  GPIO_InitStruct.Pin = Radio_RX_Pin|Buzzer_Gate_Pin;
 8001334:	230c      	movs	r3, #12
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4813      	ldr	r0, [pc, #76]	; (8001398 <MX_GPIO_Init+0x15c>)
 800134c:	f000 ff5c 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Radio_Reset_Pin Indicator_LED_Pin */
  GPIO_InitStruct.Pin = Radio_Reset_Pin|Indicator_LED_Pin;
 8001350:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_GPIO_Init+0x160>)
 800136a:	f000 ff4d 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_Reset_Pin */
  GPIO_InitStruct.Pin = GPS_Reset_Pin;
 800136e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_Reset_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <MX_GPIO_Init+0x164>)
 8001388:	f000 ff3e 	bl	8002208 <HAL_GPIO_Init>

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020800 	.word	0x40020800

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x8>
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_MspInit+0x4c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x4c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a17      	ldr	r2, [pc, #92]	; (800147c <HAL_ADC_MspInit+0x7c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d127      	bne.n	8001472 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_ADC_MspInit+0x80>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <HAL_ADC_MspInit+0x80>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_ADC_MspInit+0x80>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_ADC_MspInit+0x80>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_ADC_MspInit+0x80>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_ADC_MspInit+0x80>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Radio_Enable_Pin;
 800145a:	2330      	movs	r3, #48	; 0x30
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <HAL_ADC_MspInit+0x84>)
 800146e:	f000 fecb 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40012000 	.word	0x40012000
 8001480:	40023800 	.word	0x40023800
 8001484:	40020800 	.word	0x40020800

08001488 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <HAL_I2C_MspInit+0x84>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d12c      	bne.n	8001504 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014cc:	2312      	movs	r3, #18
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d8:	2304      	movs	r3, #4
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	480c      	ldr	r0, [pc, #48]	; (8001514 <HAL_I2C_MspInit+0x8c>)
 80014e4:	f000 fe90 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40005400 	.word	0x40005400
 8001510:	40023800 	.word	0x40023800
 8001514:	40020400 	.word	0x40020400

08001518 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a30      	ldr	r2, [pc, #192]	; (80015f8 <HAL_QSPI_MspInit+0xe0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d15a      	bne.n	80015f0 <HAL_QSPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <HAL_QSPI_MspInit+0xe4>)
 8001540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001542:	4a2e      	ldr	r2, [pc, #184]	; (80015fc <HAL_QSPI_MspInit+0xe4>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6393      	str	r3, [r2, #56]	; 0x38
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <HAL_QSPI_MspInit+0xe4>)
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b28      	ldr	r3, [pc, #160]	; (80015fc <HAL_QSPI_MspInit+0xe4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a27      	ldr	r2, [pc, #156]	; (80015fc <HAL_QSPI_MspInit+0xe4>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <HAL_QSPI_MspInit+0xe4>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_QSPI_MspInit+0xe4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a20      	ldr	r2, [pc, #128]	; (80015fc <HAL_QSPI_MspInit+0xe4>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_QSPI_MspInit+0xe4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = Flash_QUADSPI_CLK_Pin;
 800158e:	2304      	movs	r3, #4
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800159e:	2309      	movs	r3, #9
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Flash_QUADSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4815      	ldr	r0, [pc, #84]	; (8001600 <HAL_QSPI_MspInit+0xe8>)
 80015aa:	f000 fe2d 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_QUADSPI_BK1_IO0_Pin|Flash_QUADSPI_BK1_IO1_Pin;
 80015ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80015c0:	2309      	movs	r3, #9
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <HAL_QSPI_MspInit+0xec>)
 80015cc:	f000 fe1c 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_QUADSPI_BK1_NCS_Pin;
 80015d0:	2340      	movs	r3, #64	; 0x40
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80015e0:	230a      	movs	r3, #10
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Flash_QUADSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_QSPI_MspInit+0xe8>)
 80015ec:	f000 fe0c 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	a0001000 	.word	0xa0001000
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020400 	.word	0x40020400
 8001604:	40020800 	.word	0x40020800

08001608 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a19      	ldr	r2, [pc, #100]	; (800168c <HAL_SPI_MspInit+0x84>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d12b      	bne.n	8001682 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_SPI_MspInit+0x88>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a17      	ldr	r2, [pc, #92]	; (8001690 <HAL_SPI_MspInit+0x88>)
 8001634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_SPI_MspInit+0x88>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_SPI_MspInit+0x88>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_SPI_MspInit+0x88>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_SPI_MspInit+0x88>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Radio_SPI1_SCK_Pin|Radio_SPI1_MISO_Pin|Radio_SPI1_MOSI_Pin;
 8001662:	23e0      	movs	r3, #224	; 0xe0
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001672:	2305      	movs	r3, #5
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <HAL_SPI_MspInit+0x8c>)
 800167e:	f000 fdc3 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40013000 	.word	0x40013000
 8001690:	40023800 	.word	0x40023800
 8001694:	40020000 	.word	0x40020000

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a28      	ldr	r2, [pc, #160]	; (8001758 <HAL_UART_MspInit+0xc0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d14a      	bne.n	8001750 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a26      	ldr	r2, [pc, #152]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a1f      	ldr	r2, [pc, #124]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a18      	ldr	r2, [pc, #96]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_UART_MspInit+0xc4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_UART_TX_Pin;
 800170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001720:	2308      	movs	r3, #8
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <HAL_UART_MspInit+0xc8>)
 800172c:	f000 fd6c 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_UART_RX_Pin;
 8001730:	2304      	movs	r3, #4
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001740:	2308      	movs	r3, #8
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <HAL_UART_MspInit+0xcc>)
 800174c:	f000 fd5c 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40005000 	.word	0x40005000
 800175c:	40023800 	.word	0x40023800
 8001760:	40020800 	.word	0x40020800
 8001764:	40020c00 	.word	0x40020c00

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <MemManage_Handler+0x4>

0800177a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler+0x4>

08001786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b4:	f000 f960 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <OTG_FS_IRQHandler+0x10>)
 80017c2:	f001 f96a 	bl	8002a9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20001964 	.word	0x20001964

080017d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return 1;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_kill>:

int _kill(int pid, int sig)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ea:	f008 f9b1 	bl	8009b50 <__errno>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2216      	movs	r2, #22
 80017f2:	601a      	str	r2, [r3, #0]
  return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_exit>:

void _exit (int status)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ffe7 	bl	80017e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001812:	e7fe      	b.n	8001812 <_exit+0x12>

08001814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e00a      	b.n	800183c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001826:	f3af 8000 	nop.w
 800182a:	4601      	mov	r1, r0
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	60ba      	str	r2, [r7, #8]
 8001832:	b2ca      	uxtb	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	dbf0      	blt.n	8001826 <_read+0x12>
  }

  return len;
 8001844:	687b      	ldr	r3, [r7, #4]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	e009      	b.n	8001874 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60ba      	str	r2, [r7, #8]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3301      	adds	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	dbf1      	blt.n	8001860 <_write+0x12>
  }
  return len;
 800187c:	687b      	ldr	r3, [r7, #4]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <_close>:

int _close(int file)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ae:	605a      	str	r2, [r3, #4]
  return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_isatty>:

int _isatty(int file)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f008 f916 	bl	8009b50 <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20020000 	.word	0x20020000
 8001950:	00000400 	.word	0x00000400
 8001954:	2000047c 	.word	0x2000047c
 8001958:	200020a0 	.word	0x200020a0

0800195c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001986:	490e      	ldr	r1, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800199c:	4c0b      	ldr	r4, [pc, #44]	; (80019cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019aa:	f7ff ffd7 	bl	800195c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f008 f8d5 	bl	8009b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff fa9d 	bl	8000ef0 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 80019c4:	0800cdec 	.word	0x0800cdec
  ldr r2, =_sbss
 80019c8:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 80019cc:	200020a0 	.word	0x200020a0

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_Init+0x40>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_Init+0x40>)
 80019ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_Init+0x40>)
 80019f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 fbc1 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	200f      	movs	r0, #15
 8001a04:	f000 f808 	bl	8001a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff fcd2 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x54>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x58>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fbd9 	bl	80021ee <HAL_SYSTICK_Config>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00e      	b.n	8001a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d80a      	bhi.n	8001a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f000 fba1 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_InitTick+0x5c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x20>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_IncTick+0x24>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	20000480 	.word	0x20000480

08001aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_GetTick+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000480 	.word	0x20000480

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff ffee 	bl	8001aa0 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ffde 	bl	8001aa0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008

08001b00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e033      	b.n	8001b7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fc6e 	bl	8001400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b46:	f023 0302 	bic.w	r3, r3, #2
 8001b4a:	f043 0202 	orr.w	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f94a 	bl	8001dec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b6e:	e001      	b.n	8001b74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1c>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e113      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x244>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	d925      	bls.n	8001c00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68d9      	ldr	r1, [r3, #12]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b1e      	subs	r3, #30
 8001bca:	2207      	movs	r2, #7
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68d9      	ldr	r1, [r3, #12]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	4603      	mov	r3, r0
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4403      	add	r3, r0
 8001bf2:	3b1e      	subs	r3, #30
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	e022      	b.n	8001c46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6919      	ldr	r1, [r3, #16]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	2207      	movs	r2, #7
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	400a      	ands	r2, r1
 8001c22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6919      	ldr	r1, [r3, #16]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4403      	add	r3, r0
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d824      	bhi.n	8001c98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b05      	subs	r3, #5
 8001c60:	221f      	movs	r2, #31
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	3b05      	subs	r3, #5
 8001c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	635a      	str	r2, [r3, #52]	; 0x34
 8001c96:	e04c      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b0c      	cmp	r3, #12
 8001c9e:	d824      	bhi.n	8001cea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b23      	subs	r3, #35	; 0x23
 8001cb2:	221f      	movs	r2, #31
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b23      	subs	r3, #35	; 0x23
 8001cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ce8:	e023      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b41      	subs	r3, #65	; 0x41
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	400a      	ands	r2, r1
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3b41      	subs	r3, #65	; 0x41
 8001d26:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d32:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_ADC_ConfigChannel+0x250>)
 8001d34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a28      	ldr	r2, [pc, #160]	; (8001ddc <HAL_ADC_ConfigChannel+0x254>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d10f      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x1d8>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b12      	cmp	r3, #18
 8001d46:	d10b      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <HAL_ADC_ConfigChannel+0x254>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d12b      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x23a>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <HAL_ADC_ConfigChannel+0x258>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d003      	beq.n	8001d7c <HAL_ADC_ConfigChannel+0x1f4>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b11      	cmp	r3, #17
 8001d7a:	d122      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a11      	ldr	r2, [pc, #68]	; (8001de0 <HAL_ADC_ConfigChannel+0x258>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d111      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_ADC_ConfigChannel+0x25c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_ADC_ConfigChannel+0x260>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0c9a      	lsrs	r2, r3, #18
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001db4:	e002      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f9      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40012300 	.word	0x40012300
 8001ddc:	40012000 	.word	0x40012000
 8001de0:	10000012 	.word	0x10000012
 8001de4:	20000000 	.word	0x20000000
 8001de8:	431bde83 	.word	0x431bde83

08001dec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df4:	4b79      	ldr	r3, [pc, #484]	; (8001fdc <ADC_Init+0x1f0>)
 8001df6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	021a      	lsls	r2, r3, #8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6899      	ldr	r1, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <ADC_Init+0x1f4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d022      	beq.n	8001eca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	e00f      	b.n	8001eea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0202 	bic.w	r2, r2, #2
 8001ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7e1b      	ldrb	r3, [r3, #24]
 8001f04:	005a      	lsls	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	3b01      	subs	r3, #1
 8001f44:	035a      	lsls	r2, r3, #13
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	e007      	b.n	8001f60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	051a      	lsls	r2, r3, #20
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fa2:	025a      	lsls	r2, r3, #9
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6899      	ldr	r1, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	029a      	lsls	r2, r3, #10
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40012300 	.word	0x40012300
 8001fe0:	0f000001 	.word	0x0f000001

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff3e 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff31 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa2 	bl	8002140 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e165      	b.n	80024f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 8154 	bne.w	80024ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d005      	beq.n	800225a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002256:	2b02      	cmp	r3, #2
 8002258:	d130      	bne.n	80022bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 0201 	and.w	r2, r3, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d017      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d123      	bne.n	800234c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80ae 	beq.w	80024ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b5d      	ldr	r3, [pc, #372]	; (8002508 <HAL_GPIO_Init+0x300>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a5c      	ldr	r2, [pc, #368]	; (8002508 <HAL_GPIO_Init+0x300>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b5a      	ldr	r3, [pc, #360]	; (8002508 <HAL_GPIO_Init+0x300>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023aa:	4a58      	ldr	r2, [pc, #352]	; (800250c <HAL_GPIO_Init+0x304>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4f      	ldr	r2, [pc, #316]	; (8002510 <HAL_GPIO_Init+0x308>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d025      	beq.n	8002422 <HAL_GPIO_Init+0x21a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4e      	ldr	r2, [pc, #312]	; (8002514 <HAL_GPIO_Init+0x30c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01f      	beq.n	800241e <HAL_GPIO_Init+0x216>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4d      	ldr	r2, [pc, #308]	; (8002518 <HAL_GPIO_Init+0x310>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d019      	beq.n	800241a <HAL_GPIO_Init+0x212>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4c      	ldr	r2, [pc, #304]	; (800251c <HAL_GPIO_Init+0x314>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_GPIO_Init+0x20e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4b      	ldr	r2, [pc, #300]	; (8002520 <HAL_GPIO_Init+0x318>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00d      	beq.n	8002412 <HAL_GPIO_Init+0x20a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4a      	ldr	r2, [pc, #296]	; (8002524 <HAL_GPIO_Init+0x31c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <HAL_GPIO_Init+0x206>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a49      	ldr	r2, [pc, #292]	; (8002528 <HAL_GPIO_Init+0x320>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_GPIO_Init+0x202>
 8002406:	2306      	movs	r3, #6
 8002408:	e00c      	b.n	8002424 <HAL_GPIO_Init+0x21c>
 800240a:	2307      	movs	r3, #7
 800240c:	e00a      	b.n	8002424 <HAL_GPIO_Init+0x21c>
 800240e:	2305      	movs	r3, #5
 8002410:	e008      	b.n	8002424 <HAL_GPIO_Init+0x21c>
 8002412:	2304      	movs	r3, #4
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x21c>
 8002416:	2303      	movs	r3, #3
 8002418:	e004      	b.n	8002424 <HAL_GPIO_Init+0x21c>
 800241a:	2302      	movs	r3, #2
 800241c:	e002      	b.n	8002424 <HAL_GPIO_Init+0x21c>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_GPIO_Init+0x21c>
 8002422:	2300      	movs	r3, #0
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	f002 0203 	and.w	r2, r2, #3
 800242a:	0092      	lsls	r2, r2, #2
 800242c:	4093      	lsls	r3, r2
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002434:	4935      	ldr	r1, [pc, #212]	; (800250c <HAL_GPIO_Init+0x304>)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3302      	adds	r3, #2
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002442:	4b3a      	ldr	r3, [pc, #232]	; (800252c <HAL_GPIO_Init+0x324>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002466:	4a31      	ldr	r2, [pc, #196]	; (800252c <HAL_GPIO_Init+0x324>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800246c:	4b2f      	ldr	r3, [pc, #188]	; (800252c <HAL_GPIO_Init+0x324>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002490:	4a26      	ldr	r2, [pc, #152]	; (800252c <HAL_GPIO_Init+0x324>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002496:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_GPIO_Init+0x324>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ba:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_GPIO_Init+0x324>)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c0:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HAL_GPIO_Init+0x324>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e4:	4a11      	ldr	r2, [pc, #68]	; (800252c <HAL_GPIO_Init+0x324>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3301      	adds	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b0f      	cmp	r3, #15
 80024f4:	f67f ae96 	bls.w	8002224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	40013800 	.word	0x40013800
 8002510:	40020000 	.word	0x40020000
 8002514:	40020400 	.word	0x40020400
 8002518:	40020800 	.word	0x40020800
 800251c:	40020c00 	.word	0x40020c00
 8002520:	40021000 	.word	0x40021000
 8002524:	40021400 	.word	0x40021400
 8002528:	40021800 	.word	0x40021800
 800252c:	40013c00 	.word	0x40013c00

08002530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002540:	787b      	ldrb	r3, [r7, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800254c:	e003      	b.n	8002556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	041a      	lsls	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	619a      	str	r2, [r3, #24]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e12b      	b.n	80027ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe ff7c 	bl	8001488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2224      	movs	r2, #36	; 0x24
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025c8:	f001 fd8e 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 80025cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4a81      	ldr	r2, [pc, #516]	; (80027d8 <HAL_I2C_Init+0x274>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d807      	bhi.n	80025e8 <HAL_I2C_Init+0x84>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a80      	ldr	r2, [pc, #512]	; (80027dc <HAL_I2C_Init+0x278>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	bf94      	ite	ls
 80025e0:	2301      	movls	r3, #1
 80025e2:	2300      	movhi	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	e006      	b.n	80025f6 <HAL_I2C_Init+0x92>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a7d      	ldr	r2, [pc, #500]	; (80027e0 <HAL_I2C_Init+0x27c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	bf94      	ite	ls
 80025f0:	2301      	movls	r3, #1
 80025f2:	2300      	movhi	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0e7      	b.n	80027ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4a78      	ldr	r2, [pc, #480]	; (80027e4 <HAL_I2C_Init+0x280>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0c9b      	lsrs	r3, r3, #18
 8002608:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a6a      	ldr	r2, [pc, #424]	; (80027d8 <HAL_I2C_Init+0x274>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d802      	bhi.n	8002638 <HAL_I2C_Init+0xd4>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	3301      	adds	r3, #1
 8002636:	e009      	b.n	800264c <HAL_I2C_Init+0xe8>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	4a69      	ldr	r2, [pc, #420]	; (80027e8 <HAL_I2C_Init+0x284>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	099b      	lsrs	r3, r3, #6
 800264a:	3301      	adds	r3, #1
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	430b      	orrs	r3, r1
 8002652:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800265e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	495c      	ldr	r1, [pc, #368]	; (80027d8 <HAL_I2C_Init+0x274>)
 8002668:	428b      	cmp	r3, r1
 800266a:	d819      	bhi.n	80026a0 <HAL_I2C_Init+0x13c>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1e59      	subs	r1, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fbb1 f3f3 	udiv	r3, r1, r3
 800267a:	1c59      	adds	r1, r3, #1
 800267c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002680:	400b      	ands	r3, r1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_I2C_Init+0x138>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1e59      	subs	r1, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fbb1 f3f3 	udiv	r3, r1, r3
 8002694:	3301      	adds	r3, #1
 8002696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269a:	e051      	b.n	8002740 <HAL_I2C_Init+0x1dc>
 800269c:	2304      	movs	r3, #4
 800269e:	e04f      	b.n	8002740 <HAL_I2C_Init+0x1dc>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d111      	bne.n	80026cc <HAL_I2C_Init+0x168>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1e58      	subs	r0, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e012      	b.n	80026f2 <HAL_I2C_Init+0x18e>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1e58      	subs	r0, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	0099      	lsls	r1, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_Init+0x196>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e022      	b.n	8002740 <HAL_I2C_Init+0x1dc>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10e      	bne.n	8002720 <HAL_I2C_Init+0x1bc>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e58      	subs	r0, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	440b      	add	r3, r1
 8002710:	fbb0 f3f3 	udiv	r3, r0, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271e:	e00f      	b.n	8002740 <HAL_I2C_Init+0x1dc>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1e58      	subs	r0, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	0099      	lsls	r1, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	fbb0 f3f3 	udiv	r3, r0, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	6809      	ldr	r1, [r1, #0]
 8002744:	4313      	orrs	r3, r2
 8002746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800276e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6911      	ldr	r1, [r2, #16]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68d2      	ldr	r2, [r2, #12]
 800277a:	4311      	orrs	r1, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	430b      	orrs	r3, r1
 8002782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	000186a0 	.word	0x000186a0
 80027dc:	001e847f 	.word	0x001e847f
 80027e0:	003d08ff 	.word	0x003d08ff
 80027e4:	431bde83 	.word	0x431bde83
 80027e8:	10624dd3 	.word	0x10624dd3

080027ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ee:	b08f      	sub	sp, #60	; 0x3c
 80027f0:	af0a      	add	r7, sp, #40	; 0x28
 80027f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e116      	b.n	8002a2c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f006 fe21 	bl	8009460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2203      	movs	r2, #3
 8002822:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f003 f8d2 	bl	80059e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	687e      	ldr	r6, [r7, #4]
 800284a:	466d      	mov	r5, sp
 800284c:	f106 0410 	add.w	r4, r6, #16
 8002850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002858:	e894 0003 	ldmia.w	r4, {r0, r1}
 800285c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002860:	1d33      	adds	r3, r6, #4
 8002862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002864:	6838      	ldr	r0, [r7, #0]
 8002866:	f002 ffa9 	bl	80057bc <USB_CoreInit>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0d7      	b.n	8002a2c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f003 f8c0 	bl	8005a08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e04a      	b.n	8002924 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	333d      	adds	r3, #61	; 0x3d
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	333c      	adds	r3, #60	; 0x3c
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	b298      	uxth	r0, r3
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3344      	adds	r3, #68	; 0x44
 80028ca:	4602      	mov	r2, r0
 80028cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3340      	adds	r3, #64	; 0x40
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3348      	adds	r3, #72	; 0x48
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	334c      	adds	r3, #76	; 0x4c
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	3354      	adds	r3, #84	; 0x54
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	3301      	adds	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	d3af      	bcc.n	800288e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	e044      	b.n	80029be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	3301      	adds	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d3b5      	bcc.n	8002934 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	687e      	ldr	r6, [r7, #4]
 80029d0:	466d      	mov	r5, sp
 80029d2:	f106 0410 	add.w	r4, r6, #16
 80029d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80029e6:	1d33      	adds	r3, r6, #4
 80029e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ea:	6838      	ldr	r0, [r7, #0]
 80029ec:	f003 f858 	bl	8005aa0 <USB_DevInit>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e014      	b.n	8002a2c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f001 f98c 	bl	8003d38 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f004 f99a 	bl	8006d5e <USB_DevDisconnect>

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_PCD_Start+0x1c>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e020      	b.n	8002a92 <HAL_PCD_Start+0x5e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d109      	bne.n	8002a74 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d005      	beq.n	8002a74 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f002 ffa3 	bl	80059c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f004 f94a 	bl	8006d1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a9a:	b590      	push	{r4, r7, lr}
 8002a9c:	b08d      	sub	sp, #52	; 0x34
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f004 fa08 	bl	8006ec6 <USB_GetMode>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f040 84b7 	bne.w	800342c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 f96c 	bl	8006da0 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 84ad 	beq.w	800342a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f004 f959 	bl	8006da0 <USB_ReadInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d107      	bne.n	8002b08 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f002 0202 	and.w	r2, r2, #2
 8002b06:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 f947 	bl	8006da0 <USB_ReadInterrupts>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d161      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0210 	bic.w	r2, r2, #16
 8002b2a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	0c5b      	lsrs	r3, r3, #17
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d124      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d035      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6a38      	ldr	r0, [r7, #32]
 8002b78:	f003 ff7e 	bl	8006a78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b88:	441a      	add	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	6a1a      	ldr	r2, [r3, #32]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b9a:	441a      	add	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	621a      	str	r2, [r3, #32]
 8002ba0:	e016      	b.n	8002bd0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	0c5b      	lsrs	r3, r3, #17
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d110      	bne.n	8002bd0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6a38      	ldr	r0, [r7, #32]
 8002bba:	f003 ff5d 	bl	8006a78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	6a1a      	ldr	r2, [r3, #32]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bca:	441a      	add	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0210 	orr.w	r2, r2, #16
 8002bde:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f004 f8db 	bl	8006da0 <USB_ReadInterrupts>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bf4:	f040 80a7 	bne.w	8002d46 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f004 f8e0 	bl	8006dc6 <USB_ReadDevAllOutEpInterrupt>
 8002c06:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c08:	e099      	b.n	8002d3e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 808e 	beq.w	8002d32 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f004 f904 	bl	8006e2e <USB_ReadDevOutEPInterrupt>
 8002c26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00c      	beq.n	8002c4c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2301      	movs	r3, #1
 8002c42:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fef0 	bl	8003a2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00c      	beq.n	8002c70 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c62:	461a      	mov	r2, r3
 8002c64:	2308      	movs	r3, #8
 8002c66:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 ffc6 	bl	8003bfc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c86:	461a      	mov	r2, r3
 8002c88:	2310      	movs	r3, #16
 8002c8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d030      	beq.n	8002cf8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	2b80      	cmp	r3, #128	; 0x80
 8002ca0:	d109      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3304      	adds	r3, #4
 8002cca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	78db      	ldrb	r3, [r3, #3]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d108      	bne.n	8002ce6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f006 fcd9 	bl	8009698 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2320      	movs	r3, #32
 8002d12:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d30:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	3301      	adds	r3, #1
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f47f af62 	bne.w	8002c0a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f004 f828 	bl	8006da0 <USB_ReadInterrupts>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d5a:	f040 80db 	bne.w	8002f14 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f004 f849 	bl	8006dfa <USB_ReadDevAllInEpInterrupt>
 8002d68:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d6e:	e0cd      	b.n	8002f0c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80c2 	beq.w	8002f00 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f004 f86f 	bl	8006e6a <USB_ReadDevInEPInterrupt>
 8002d8c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d057      	beq.n	8002e48 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	2201      	movs	r2, #1
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69f9      	ldr	r1, [r7, #28]
 8002db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002db8:	4013      	ands	r3, r2
 8002dba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2301      	movs	r3, #1
 8002dcc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d132      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	334c      	adds	r3, #76	; 0x4c
 8002de6:	6819      	ldr	r1, [r3, #0]
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4403      	add	r3, r0
 8002df6:	3348      	adds	r3, #72	; 0x48
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4419      	add	r1, r3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4403      	add	r3, r0
 8002e0a:	334c      	adds	r3, #76	; 0x4c
 8002e0c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d113      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x3a2>
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	3354      	adds	r3, #84	; 0x54
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e34:	461a      	mov	r2, r3
 8002e36:	2101      	movs	r1, #1
 8002e38:	f004 f876 	bl	8006f28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4619      	mov	r1, r3
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f006 fba3 	bl	800958e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2308      	movs	r3, #8
 8002e62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e96:	461a      	mov	r2, r3
 8002e98:	2340      	movs	r3, #64	; 0x40
 8002e9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d023      	beq.n	8002eee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ea6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea8:	6a38      	ldr	r0, [r7, #32]
 8002eaa:	f002 ff57 	bl	8005d5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	3338      	adds	r3, #56	; 0x38
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	78db      	ldrb	r3, [r3, #3]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d108      	bne.n	8002edc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f006 fbf0 	bl	80096bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2302      	movs	r3, #2
 8002eec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fd08 	bl	8003910 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	3301      	adds	r3, #1
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f47f af2e 	bne.w	8002d70 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 ff41 	bl	8006da0 <USB_ReadInterrupts>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f28:	d122      	bne.n	8002f70 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d108      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f50:	2100      	movs	r1, #0
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f006 fd6a 	bl	8009a2c <HAL_PCDEx_LPM_Callback>
 8002f58:	e002      	b.n	8002f60 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f006 fb8e 	bl	800967c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 ff13 	bl	8006da0 <USB_ReadInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f84:	d112      	bne.n	8002fac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d102      	bne.n	8002f9c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f006 fb4a 	bl	8009630 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002faa:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f003 fef5 	bl	8006da0 <USB_ReadInterrupts>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc0:	d121      	bne.n	8003006 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002fd0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d111      	bne.n	8003000 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	089b      	lsrs	r3, r3, #2
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f006 fd17 	bl	8009a2c <HAL_PCDEx_LPM_Callback>
 8002ffe:	e002      	b.n	8003006 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f006 fb15 	bl	8009630 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f003 fec8 	bl	8006da0 <USB_ReadInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	f040 80b7 	bne.w	800318c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2110      	movs	r1, #16
 8003038:	4618      	mov	r0, r3
 800303a:	f002 fe8f 	bl	8005d5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303e:	2300      	movs	r3, #0
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003042:	e046      	b.n	80030d2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	4413      	add	r3, r2
 800304c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003050:	461a      	mov	r2, r3
 8003052:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003056:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003068:	0151      	lsls	r1, r2, #5
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	440a      	add	r2, r1
 800306e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003072:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003076:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	4413      	add	r3, r2
 8003080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003084:	461a      	mov	r2, r3
 8003086:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800308a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309c:	0151      	lsls	r1, r2, #5
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	440a      	add	r2, r1
 80030a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030bc:	0151      	lsls	r1, r2, #5
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	440a      	add	r2, r1
 80030c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	3301      	adds	r3, #1
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d8:	429a      	cmp	r2, r3
 80030da:	d3b3      	bcc.n	8003044 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d016      	beq.n	8003126 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003108:	f043 030b 	orr.w	r3, r3, #11
 800310c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311e:	f043 030b 	orr.w	r3, r3, #11
 8003122:	6453      	str	r3, [r2, #68]	; 0x44
 8003124:	e015      	b.n	8003152 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003134:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003138:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800313c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800314c:	f043 030b 	orr.w	r3, r3, #11
 8003150:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003160:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003164:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003176:	461a      	mov	r2, r3
 8003178:	f003 fed6 	bl	8006f28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800318a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f003 fe05 	bl	8006da0 <USB_ReadInterrupts>
 8003196:	4603      	mov	r3, r0
 8003198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a0:	d124      	bne.n	80031ec <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f003 fe9b 	bl	8006ee2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f002 fe50 	bl	8005e56 <USB_GetDevSpeed>
 80031b6:	4603      	mov	r3, r0
 80031b8:	461a      	mov	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681c      	ldr	r4, [r3, #0]
 80031c2:	f000 ff85 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 80031c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	4620      	mov	r0, r4
 80031d2:	f002 fb55 	bl	8005880 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f006 fa01 	bl	80095de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 fdd5 	bl	8006da0 <USB_ReadInterrupts>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d10a      	bne.n	8003216 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f006 f9de 	bl	80095c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f002 0208 	and.w	r2, r2, #8
 8003214:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f003 fdc0 	bl	8006da0 <USB_ReadInterrupts>
 8003220:	4603      	mov	r3, r0
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b80      	cmp	r3, #128	; 0x80
 8003228:	d122      	bne.n	8003270 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003236:	2301      	movs	r3, #1
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
 800323a:	e014      	b.n	8003266 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	b2db      	uxtb	r3, r3
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fb27 	bl	80038ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	3301      	adds	r3, #1
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	429a      	cmp	r2, r3
 800326e:	d3e5      	bcc.n	800323c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f003 fd93 	bl	8006da0 <USB_ReadInterrupts>
 800327a:	4603      	mov	r3, r0
 800327c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003284:	d13b      	bne.n	80032fe <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003286:	2301      	movs	r3, #1
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
 800328a:	e02b      	b.n	80032e4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	3340      	adds	r3, #64	; 0x40
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d115      	bne.n	80032de <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80032b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	da12      	bge.n	80032de <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	333f      	adds	r3, #63	; 0x3f
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fae8 	bl	80038ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	3301      	adds	r3, #1
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d3ce      	bcc.n	800328c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f003 fd4c 	bl	8006da0 <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800330e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003312:	d155      	bne.n	80033c0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003314:	2301      	movs	r3, #1
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
 8003318:	e045      	b.n	80033a6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d12e      	bne.n	80033a0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003342:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003344:	2b00      	cmp	r3, #0
 8003346:	da2b      	bge.n	80033a0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003354:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003358:	429a      	cmp	r2, r3
 800335a:	d121      	bne.n	80033a0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003398:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800339c:	6053      	str	r3, [r2, #4]
            break;
 800339e:	e007      	b.n	80033b0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	3301      	adds	r3, #1
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d3b4      	bcc.n	800331a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f003 fceb 	bl	8006da0 <USB_ReadInterrupts>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d10a      	bne.n	80033ec <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f006 f982 	bl	80096e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f003 fcd5 	bl	8006da0 <USB_ReadInterrupts>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d115      	bne.n	800342c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f006 f972 	bl	80096fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
 8003428:	e000      	b.n	800342c <HAL_PCD_IRQHandler+0x992>
      return;
 800342a:	bf00      	nop
    }
  }
}
 800342c:	3734      	adds	r7, #52	; 0x34
 800342e:	46bd      	mov	sp, r7
 8003430:	bd90      	pop	{r4, r7, pc}

08003432 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_PCD_SetAddress+0x1a>
 8003448:	2302      	movs	r3, #2
 800344a:	e013      	b.n	8003474 <HAL_PCD_SetAddress+0x42>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	4611      	mov	r1, r2
 8003464:	4618      	mov	r0, r3
 8003466:	f003 fc33 	bl	8006cd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	4603      	mov	r3, r0
 800348c:	70fb      	strb	r3, [r7, #3]
 800348e:	460b      	mov	r3, r1
 8003490:	803b      	strh	r3, [r7, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800349a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	da0f      	bge.n	80034c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	f003 020f 	and.w	r2, r3, #15
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	3338      	adds	r3, #56	; 0x38
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	3304      	adds	r3, #4
 80034b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	705a      	strb	r2, [r3, #1]
 80034c0:	e00f      	b.n	80034e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	f003 020f 	and.w	r2, r3, #15
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034ee:	883a      	ldrh	r2, [r7, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	78ba      	ldrb	r2, [r7, #2]
 80034f8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	785b      	ldrb	r3, [r3, #1]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d004      	beq.n	800350c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800350c:	78bb      	ldrb	r3, [r7, #2]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d102      	bne.n	8003518 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_PCD_EP_Open+0xaa>
 8003522:	2302      	movs	r3, #2
 8003524:	e00e      	b.n	8003544 <HAL_PCD_EP_Open+0xc8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68f9      	ldr	r1, [r7, #12]
 8003534:	4618      	mov	r0, r3
 8003536:	f002 fcb3 	bl	8005ea0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003542:	7afb      	ldrb	r3, [r7, #11]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800355c:	2b00      	cmp	r3, #0
 800355e:	da0f      	bge.n	8003580 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	f003 020f 	and.w	r2, r3, #15
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	3338      	adds	r3, #56	; 0x38
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4413      	add	r3, r2
 8003574:	3304      	adds	r3, #4
 8003576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	705a      	strb	r2, [r3, #1]
 800357e:	e00f      	b.n	80035a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	f003 020f 	and.w	r2, r3, #15
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	3304      	adds	r3, #4
 8003598:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_PCD_EP_Close+0x6e>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e00e      	b.n	80035d8 <HAL_PCD_EP_Close+0x8c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f002 fcf1 	bl	8005fb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	460b      	mov	r3, r1
 80035ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f0:	7afb      	ldrb	r3, [r7, #11]
 80035f2:	f003 020f 	and.w	r2, r3, #15
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4413      	add	r3, r2
 8003606:	3304      	adds	r3, #4
 8003608:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2200      	movs	r2, #0
 800361a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003622:	7afb      	ldrb	r3, [r7, #11]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	b2da      	uxtb	r2, r3
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d102      	bne.n	800363c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800363c:	7afb      	ldrb	r3, [r7, #11]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	f002 ffd0 	bl	80065f8 <USB_EP0StartXfer>
 8003658:	e008      	b.n	800366c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	6979      	ldr	r1, [r7, #20]
 8003668:	f002 fd7e 	bl	8006168 <USB_EPStartXfer>
  }

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	f003 020f 	and.w	r2, r3, #15
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003698:	681b      	ldr	r3, [r3, #0]
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
 80036b2:	460b      	mov	r3, r1
 80036b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b6:	7afb      	ldrb	r3, [r7, #11]
 80036b8:	f003 020f 	and.w	r2, r3, #15
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	3338      	adds	r3, #56	; 0x38
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4413      	add	r3, r2
 80036ca:	3304      	adds	r3, #4
 80036cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2200      	movs	r2, #0
 80036de:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2201      	movs	r2, #1
 80036e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036e6:	7afb      	ldrb	r3, [r7, #11]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d102      	bne.n	8003700 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003700:	7afb      	ldrb	r3, [r7, #11]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	6979      	ldr	r1, [r7, #20]
 8003718:	f002 ff6e 	bl	80065f8 <USB_EP0StartXfer>
 800371c:	e008      	b.n	8003730 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	6979      	ldr	r1, [r7, #20]
 800372c:	f002 fd1c 	bl	8006168 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	f003 020f 	and.w	r2, r3, #15
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	d901      	bls.n	8003758 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e050      	b.n	80037fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800375c:	2b00      	cmp	r3, #0
 800375e:	da0f      	bge.n	8003780 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	f003 020f 	and.w	r2, r3, #15
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	3338      	adds	r3, #56	; 0x38
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	705a      	strb	r2, [r3, #1]
 800377e:	e00d      	b.n	800379c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	3304      	adds	r3, #4
 8003794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_PCD_EP_SetStall+0x82>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e01e      	b.n	80037fa <HAL_PCD_EP_SetStall+0xc0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68f9      	ldr	r1, [r7, #12]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f003 f9ac 	bl	8006b28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	b2d9      	uxtb	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037ea:	461a      	mov	r2, r3
 80037ec:	f003 fb9c 	bl	8006f28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	460b      	mov	r3, r1
 800380c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	f003 020f 	and.w	r2, r3, #15
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	429a      	cmp	r2, r3
 800381a:	d901      	bls.n	8003820 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e042      	b.n	80038a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003824:	2b00      	cmp	r3, #0
 8003826:	da0f      	bge.n	8003848 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	f003 020f 	and.w	r2, r3, #15
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	3338      	adds	r3, #56	; 0x38
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	3304      	adds	r3, #4
 800383e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	705a      	strb	r2, [r3, #1]
 8003846:	e00f      	b.n	8003868 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	f003 020f 	and.w	r2, r3, #15
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4413      	add	r3, r2
 800385e:	3304      	adds	r3, #4
 8003860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	b2da      	uxtb	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_PCD_EP_ClrStall+0x86>
 8003884:	2302      	movs	r3, #2
 8003886:	e00e      	b.n	80038a6 <HAL_PCD_EP_ClrStall+0xa4>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68f9      	ldr	r1, [r7, #12]
 8003896:	4618      	mov	r0, r3
 8003898:	f003 f9b4 	bl	8006c04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	da0c      	bge.n	80038dc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	f003 020f 	and.w	r2, r3, #15
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	3338      	adds	r3, #56	; 0x38
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	3304      	adds	r3, #4
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	e00c      	b.n	80038f6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	f003 020f 	and.w	r2, r3, #15
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	3304      	adds	r3, #4
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68f9      	ldr	r1, [r7, #12]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f002 ffd3 	bl	80068a8 <USB_EPStopXfer>
 8003902:	4603      	mov	r3, r0
 8003904:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003906:	7afb      	ldrb	r3, [r7, #11]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	; 0x28
 8003914:	af02      	add	r7, sp, #8
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	3338      	adds	r3, #56	; 0x38
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	3304      	adds	r3, #4
 8003936:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	429a      	cmp	r2, r3
 8003942:	d901      	bls.n	8003948 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e06c      	b.n	8003a22 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	699a      	ldr	r2, [r3, #24]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	429a      	cmp	r2, r3
 800395c:	d902      	bls.n	8003964 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3303      	adds	r3, #3
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800396c:	e02b      	b.n	80039c6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	429a      	cmp	r2, r3
 8003982:	d902      	bls.n	800398a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3303      	adds	r3, #3
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6919      	ldr	r1, [r3, #16]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	4603      	mov	r3, r0
 80039a8:	6978      	ldr	r0, [r7, #20]
 80039aa:	f003 f827 	bl	80069fc <USB_WritePacket>

    ep->xfer_buff  += len;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	441a      	add	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a1a      	ldr	r2, [r3, #32]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	441a      	add	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d809      	bhi.n	80039f0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d203      	bcs.n	80039f0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1be      	bne.n	800396e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d811      	bhi.n	8003a20 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	2201      	movs	r2, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	6939      	ldr	r1, [r7, #16]
 8003a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	333c      	adds	r3, #60	; 0x3c
 8003a44:	3304      	adds	r3, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d17b      	bne.n	8003b5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d015      	beq.n	8003a98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	4a61      	ldr	r2, [pc, #388]	; (8003bf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	f240 80b9 	bls.w	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80b3 	beq.w	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a94:	6093      	str	r3, [r2, #8]
 8003a96:	e0a7      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	6093      	str	r3, [r2, #8]
 8003ab4:	e098      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 8093 	bne.w	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	4a4b      	ldr	r2, [pc, #300]	; (8003bf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d90f      	bls.n	8003aea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae6:	6093      	str	r3, [r2, #8]
 8003ae8:	e07e      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4413      	add	r3, r2
 8003afc:	3304      	adds	r3, #4
 8003afe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	0159      	lsls	r1, r3, #5
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	440b      	add	r3, r1
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b16:	1ad2      	subs	r2, r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d114      	bne.n	8003b4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b34:	461a      	mov	r2, r3
 8003b36:	2101      	movs	r1, #1
 8003b38:	f003 f9f6 	bl	8006f28 <USB_EP0_OutStart>
 8003b3c:	e006      	b.n	8003b4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	441a      	add	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f005 fd00 	bl	8009558 <HAL_PCD_DataOutStageCallback>
 8003b58:	e046      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4a26      	ldr	r2, [pc, #152]	; (8003bf8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d124      	bne.n	8003bac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	e032      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f005 fcd7 	bl	8009558 <HAL_PCD_DataOutStageCallback>
 8003baa:	e01d      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d114      	bne.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d108      	bne.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	f003 f9a6 	bl	8006f28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f005 fcb8 	bl	8009558 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	4f54300a 	.word	0x4f54300a
 8003bf8:	4f54310a 	.word	0x4f54310a

08003bfc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	333c      	adds	r3, #60	; 0x3c
 8003c14:	3304      	adds	r3, #4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a15      	ldr	r2, [pc, #84]	; (8003c84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d90e      	bls.n	8003c50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f005 fc6f 	bl	8009534 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d90c      	bls.n	8003c78 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d108      	bne.n	8003c78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c70:	461a      	mov	r2, r3
 8003c72:	2101      	movs	r1, #1
 8003c74:	f003 f958 	bl	8006f28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	4f54300a 	.word	0x4f54300a

08003c88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
 8003c94:	4613      	mov	r3, r2
 8003c96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ca6:	883b      	ldrh	r3, [r7, #0]
 8003ca8:	0419      	lsls	r1, r3, #16
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb4:	e028      	b.n	8003d08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	73fb      	strb	r3, [r7, #15]
 8003cc8:	e00d      	b.n	8003ce6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	3340      	adds	r3, #64	; 0x40
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	4413      	add	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d3ec      	bcc.n	8003cca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cf0:	883b      	ldrh	r3, [r7, #0]
 8003cf2:	0418      	lsls	r0, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	4302      	orrs	r2, r0
 8003d00:	3340      	adds	r3, #64	; 0x40
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	887a      	ldrh	r2, [r7, #2]
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	f043 0303 	orr.w	r3, r3, #3
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003d88:	f7fd fe8a 	bl	8001aa0 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e069      	b.n	8003e6c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fd fbb3 	bl	8001518 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003db2:	f241 3188 	movw	r1, #5000	; 0x1388
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f85e 	bl	8003e78 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	021a      	lsls	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	2120      	movs	r1, #32
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f856 	bl	8003e94 <QSPI_WaitFlagStateUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003dec:	7afb      	ldrb	r3, [r7, #11]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d137      	bne.n	8003e62 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003dfc:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6852      	ldr	r2, [r2, #4]
 8003e04:	0611      	lsls	r1, r2, #24
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68d2      	ldr	r2, [r2, #12]
 8003e0a:	4311      	orrs	r1, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	69d2      	ldr	r2, [r2, #28]
 8003e10:	4311      	orrs	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6a12      	ldr	r2, [r2, #32]
 8003e16:	4311      	orrs	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <HAL_QSPI_Init+0xf4>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6912      	ldr	r2, [r2, #16]
 8003e2e:	0411      	lsls	r1, r2, #16
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6952      	ldr	r2, [r2, #20]
 8003e34:	4311      	orrs	r1, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6992      	ldr	r2, [r2, #24]
 8003e3a:	4311      	orrs	r1, r2
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	ffe0f8fe 	.word	0xffe0f8fe

08003e78 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ea4:	e01a      	b.n	8003edc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d016      	beq.n	8003edc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eae:	f7fd fdf7 	bl	8001aa0 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	f043 0201 	orr.w	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e00e      	b.n	8003efa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bf14      	ite	ne
 8003eea:	2301      	movne	r3, #1
 8003eec:	2300      	moveq	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d1d6      	bne.n	8003ea6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0cc      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f18:	4b68      	ldr	r3, [pc, #416]	; (80040bc <HAL_RCC_ClockConfig+0x1b8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d90c      	bls.n	8003f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f26:	4b65      	ldr	r3, [pc, #404]	; (80040bc <HAL_RCC_ClockConfig+0x1b8>)
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b63      	ldr	r3, [pc, #396]	; (80040bc <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0b8      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f58:	4b59      	ldr	r3, [pc, #356]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a58      	ldr	r2, [pc, #352]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f70:	4b53      	ldr	r3, [pc, #332]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a52      	ldr	r2, [pc, #328]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f7c:	4b50      	ldr	r3, [pc, #320]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	494d      	ldr	r1, [pc, #308]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d044      	beq.n	8004024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d119      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e07f      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d107      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc2:	4b3f      	ldr	r3, [pc, #252]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e06f      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd2:	4b3b      	ldr	r3, [pc, #236]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e067      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fe2:	4b37      	ldr	r3, [pc, #220]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f023 0203 	bic.w	r2, r3, #3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4934      	ldr	r1, [pc, #208]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff4:	f7fd fd54 	bl	8001aa0 <HAL_GetTick>
 8003ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffa:	e00a      	b.n	8004012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ffc:	f7fd fd50 	bl	8001aa0 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f241 3288 	movw	r2, #5000	; 0x1388
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e04f      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 020c 	and.w	r2, r3, #12
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	429a      	cmp	r2, r3
 8004022:	d1eb      	bne.n	8003ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004024:	4b25      	ldr	r3, [pc, #148]	; (80040bc <HAL_RCC_ClockConfig+0x1b8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d20c      	bcs.n	800404c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004032:	4b22      	ldr	r3, [pc, #136]	; (80040bc <HAL_RCC_ClockConfig+0x1b8>)
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e032      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4916      	ldr	r1, [pc, #88]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	490e      	ldr	r1, [pc, #56]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800408a:	f000 fb7f 	bl	800478c <HAL_RCC_GetSysClockFreq>
 800408e:	4602      	mov	r2, r0
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	490a      	ldr	r1, [pc, #40]	; (80040c4 <HAL_RCC_ClockConfig+0x1c0>)
 800409c:	5ccb      	ldrb	r3, [r1, r3]
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1c4>)
 80040a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fd fcb4 	bl	8001a18 <HAL_InitTick>

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023c00 	.word	0x40023c00
 80040c0:	40023800 	.word	0x40023800
 80040c4:	0800c9e8 	.word	0x0800c9e8
 80040c8:	20000000 	.word	0x20000000
 80040cc:	20000004 	.word	0x20000004

080040d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000000 	.word	0x20000000

080040e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040ec:	f7ff fff0 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	0a9b      	lsrs	r3, r3, #10
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4903      	ldr	r1, [pc, #12]	; (800410c <HAL_RCC_GetPCLK1Freq+0x24>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40023800 	.word	0x40023800
 800410c:	0800c9f8 	.word	0x0800c9f8

08004110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004114:	f7ff ffdc 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	0b5b      	lsrs	r3, r3, #13
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	4903      	ldr	r1, [pc, #12]	; (8004134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40023800 	.word	0x40023800
 8004134:	0800c9f8 	.word	0x0800c9f8

08004138 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08c      	sub	sp, #48	; 0x30
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d010      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004170:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004176:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	496c      	ldr	r1, [pc, #432]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800418e:	2301      	movs	r3, #1
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d010      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800419e:	4b64      	ldr	r3, [pc, #400]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ac:	4960      	ldr	r1, [pc, #384]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80041bc:	2301      	movs	r3, #1
 80041be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d017      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041cc:	4b58      	ldr	r3, [pc, #352]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	4955      	ldr	r1, [pc, #340]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ea:	d101      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80041ec:	2301      	movs	r3, #1
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80041f8:	2301      	movs	r3, #1
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d017      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004208:	4b49      	ldr	r3, [pc, #292]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800420a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800420e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	4946      	ldr	r1, [pc, #280]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004226:	d101      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004228:	2301      	movs	r3, #1
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004234:	2301      	movs	r3, #1
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 808a 	beq.w	800435a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	4b39      	ldr	r3, [pc, #228]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	4a38      	ldr	r2, [pc, #224]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004254:	6413      	str	r3, [r2, #64]	; 0x40
 8004256:	4b36      	ldr	r3, [pc, #216]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004262:	4b34      	ldr	r3, [pc, #208]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a33      	ldr	r2, [pc, #204]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800426e:	f7fd fc17 	bl	8001aa0 <HAL_GetTick>
 8004272:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004276:	f7fd fc13 	bl	8001aa0 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e278      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004288:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004294:	4b26      	ldr	r3, [pc, #152]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d02f      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ac:	6a3a      	ldr	r2, [r7, #32]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d028      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b2:	4b1f      	ldr	r3, [pc, #124]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042bc:	4b1e      	ldr	r3, [pc, #120]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042c2:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042c8:	4a19      	ldr	r2, [pc, #100]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042ce:	4b18      	ldr	r3, [pc, #96]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d114      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042da:	f7fd fbe1 	bl	8001aa0 <HAL_GetTick>
 80042de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7fd fbdd 	bl	8001aa0 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e240      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ee      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004310:	d114      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004326:	4902      	ldr	r1, [pc, #8]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004328:	4313      	orrs	r3, r2
 800432a:	608b      	str	r3, [r1, #8]
 800432c:	e00c      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800432e:	bf00      	nop
 8004330:	40023800 	.word	0x40023800
 8004334:	40007000 	.word	0x40007000
 8004338:	42470e40 	.word	0x42470e40
 800433c:	4b4a      	ldr	r3, [pc, #296]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4a49      	ldr	r2, [pc, #292]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004342:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004346:	6093      	str	r3, [r2, #8]
 8004348:	4b47      	ldr	r3, [pc, #284]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800434a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004354:	4944      	ldr	r1, [pc, #272]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004356:	4313      	orrs	r3, r2
 8004358:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b00      	cmp	r3, #0
 8004364:	d004      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800436c:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800436e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800437c:	4b3a      	ldr	r3, [pc, #232]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800437e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004382:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438a:	4937      	ldr	r1, [pc, #220]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800439e:	4b32      	ldr	r3, [pc, #200]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ac:	492e      	ldr	r1, [pc, #184]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d011      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043c0:	4b29      	ldr	r3, [pc, #164]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	4926      	ldr	r1, [pc, #152]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043de:	d101      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80043e0:	2301      	movs	r3, #1
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80043f0:	4b1d      	ldr	r3, [pc, #116]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	491a      	ldr	r1, [pc, #104]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440e:	2b00      	cmp	r3, #0
 8004410:	d011      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004412:	4b15      	ldr	r3, [pc, #84]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004418:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004420:	4911      	ldr	r1, [pc, #68]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004430:	d101      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004432:	2301      	movs	r3, #1
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d005      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004444:	f040 80ff 	bne.w	8004646 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004448:	4b09      	ldr	r3, [pc, #36]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800444e:	f7fd fb27 	bl	8001aa0 <HAL_GetTick>
 8004452:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004454:	e00e      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004456:	f7fd fb23 	bl	8001aa0 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d907      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e188      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004468:	40023800 	.word	0x40023800
 800446c:	424711e0 	.word	0x424711e0
 8004470:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004474:	4b7e      	ldr	r3, [pc, #504]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ea      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d009      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800449c:	2b00      	cmp	r3, #0
 800449e:	d028      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d124      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80044a8:	4b71      	ldr	r3, [pc, #452]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ae:	0c1b      	lsrs	r3, r3, #16
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	3301      	adds	r3, #1
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044ba:	4b6d      	ldr	r3, [pc, #436]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c0:	0e1b      	lsrs	r3, r3, #24
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	019b      	lsls	r3, r3, #6
 80044d2:	431a      	orrs	r2, r3
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	061b      	lsls	r3, r3, #24
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	071b      	lsls	r3, r3, #28
 80044ea:	4961      	ldr	r1, [pc, #388]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d004      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004510:	2b00      	cmp	r3, #0
 8004512:	d035      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800451c:	d130      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800451e:	4b54      	ldr	r3, [pc, #336]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004524:	0c1b      	lsrs	r3, r3, #16
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	3301      	adds	r3, #1
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004530:	4b4f      	ldr	r3, [pc, #316]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004536:	0f1b      	lsrs	r3, r3, #28
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	019b      	lsls	r3, r3, #6
 8004548:	431a      	orrs	r2, r3
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	3b01      	subs	r3, #1
 8004550:	041b      	lsls	r3, r3, #16
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	061b      	lsls	r3, r3, #24
 800455a:	431a      	orrs	r2, r3
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	071b      	lsls	r3, r3, #28
 8004560:	4943      	ldr	r1, [pc, #268]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004568:	4b41      	ldr	r3, [pc, #260]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800456a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456e:	f023 021f 	bic.w	r2, r3, #31
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	3b01      	subs	r3, #1
 8004578:	493d      	ldr	r1, [pc, #244]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004588:	2b00      	cmp	r3, #0
 800458a:	d029      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004594:	d124      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004596:	4b36      	ldr	r3, [pc, #216]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	3301      	adds	r3, #1
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045a8:	4b31      	ldr	r3, [pc, #196]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ae:	0f1b      	lsrs	r3, r3, #28
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	019b      	lsls	r3, r3, #6
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	085b      	lsrs	r3, r3, #1
 80045c8:	3b01      	subs	r3, #1
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	431a      	orrs	r2, r3
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	061b      	lsls	r3, r3, #24
 80045d2:	431a      	orrs	r2, r3
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	071b      	lsls	r3, r3, #28
 80045d8:	4925      	ldr	r1, [pc, #148]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d016      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	3b01      	subs	r3, #1
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	071b      	lsls	r3, r3, #28
 8004612:	4917      	ldr	r1, [pc, #92]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800461a:	4b16      	ldr	r3, [pc, #88]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004620:	f7fd fa3e 	bl	8001aa0 <HAL_GetTick>
 8004624:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004626:	e008      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004628:	f7fd fa3a 	bl	8001aa0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e09f      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	2b01      	cmp	r3, #1
 800464a:	f040 8095 	bne.w	8004778 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800464e:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004654:	f7fd fa24 	bl	8001aa0 <HAL_GetTick>
 8004658:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800465a:	e00f      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800465c:	f7fd fa20 	bl	8001aa0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d908      	bls.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e085      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800
 8004674:	42470068 	.word	0x42470068
 8004678:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800467c:	4b41      	ldr	r3, [pc, #260]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004688:	d0e8      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d02b      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d127      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80046b2:	4b34      	ldr	r3, [pc, #208]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	3301      	adds	r3, #1
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699a      	ldr	r2, [r3, #24]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	019b      	lsls	r3, r3, #6
 80046ce:	431a      	orrs	r2, r3
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	3b01      	subs	r3, #1
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	061b      	lsls	r3, r3, #24
 80046e0:	4928      	ldr	r1, [pc, #160]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046e8:	4b26      	ldr	r3, [pc, #152]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	3b01      	subs	r3, #1
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	4922      	ldr	r1, [pc, #136]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01d      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004716:	d118      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004718:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	0e1b      	lsrs	r3, r3, #24
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	019b      	lsls	r3, r3, #6
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	3b01      	subs	r3, #1
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	431a      	orrs	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	061b      	lsls	r3, r3, #24
 8004742:	4910      	ldr	r1, [pc, #64]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004750:	f7fd f9a6 	bl	8001aa0 <HAL_GetTick>
 8004754:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004758:	f7fd f9a2 	bl	8001aa0 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e007      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004776:	d1ef      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3730      	adds	r7, #48	; 0x30
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800
 8004788:	42470070 	.word	0x42470070

0800478c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800478c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004790:	b0ae      	sub	sp, #184	; 0xb8
 8004792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047b2:	4bcb      	ldr	r3, [pc, #812]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	f200 8206 	bhi.w	8004bcc <HAL_RCC_GetSysClockFreq+0x440>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	080047fd 	.word	0x080047fd
 80047cc:	08004bcd 	.word	0x08004bcd
 80047d0:	08004bcd 	.word	0x08004bcd
 80047d4:	08004bcd 	.word	0x08004bcd
 80047d8:	08004805 	.word	0x08004805
 80047dc:	08004bcd 	.word	0x08004bcd
 80047e0:	08004bcd 	.word	0x08004bcd
 80047e4:	08004bcd 	.word	0x08004bcd
 80047e8:	0800480d 	.word	0x0800480d
 80047ec:	08004bcd 	.word	0x08004bcd
 80047f0:	08004bcd 	.word	0x08004bcd
 80047f4:	08004bcd 	.word	0x08004bcd
 80047f8:	080049fd 	.word	0x080049fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047fc:	4bb9      	ldr	r3, [pc, #740]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x358>)
 80047fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004802:	e1e7      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004804:	4bb8      	ldr	r3, [pc, #736]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800480a:	e1e3      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800480c:	4bb4      	ldr	r3, [pc, #720]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004818:	4bb1      	ldr	r3, [pc, #708]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d071      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004824:	4bae      	ldr	r3, [pc, #696]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	099b      	lsrs	r3, r3, #6
 800482a:	2200      	movs	r2, #0
 800482c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004830:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800484a:	4622      	mov	r2, r4
 800484c:	462b      	mov	r3, r5
 800484e:	f04f 0000 	mov.w	r0, #0
 8004852:	f04f 0100 	mov.w	r1, #0
 8004856:	0159      	lsls	r1, r3, #5
 8004858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800485c:	0150      	lsls	r0, r2, #5
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4621      	mov	r1, r4
 8004864:	1a51      	subs	r1, r2, r1
 8004866:	6439      	str	r1, [r7, #64]	; 0x40
 8004868:	4629      	mov	r1, r5
 800486a:	eb63 0301 	sbc.w	r3, r3, r1
 800486e:	647b      	str	r3, [r7, #68]	; 0x44
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800487c:	4649      	mov	r1, r9
 800487e:	018b      	lsls	r3, r1, #6
 8004880:	4641      	mov	r1, r8
 8004882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004886:	4641      	mov	r1, r8
 8004888:	018a      	lsls	r2, r1, #6
 800488a:	4641      	mov	r1, r8
 800488c:	1a51      	subs	r1, r2, r1
 800488e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004890:	4649      	mov	r1, r9
 8004892:	eb63 0301 	sbc.w	r3, r3, r1
 8004896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80048a4:	4649      	mov	r1, r9
 80048a6:	00cb      	lsls	r3, r1, #3
 80048a8:	4641      	mov	r1, r8
 80048aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ae:	4641      	mov	r1, r8
 80048b0:	00ca      	lsls	r2, r1, #3
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	4603      	mov	r3, r0
 80048b8:	4622      	mov	r2, r4
 80048ba:	189b      	adds	r3, r3, r2
 80048bc:	633b      	str	r3, [r7, #48]	; 0x30
 80048be:	462b      	mov	r3, r5
 80048c0:	460a      	mov	r2, r1
 80048c2:	eb42 0303 	adc.w	r3, r2, r3
 80048c6:	637b      	str	r3, [r7, #52]	; 0x34
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048d4:	4629      	mov	r1, r5
 80048d6:	024b      	lsls	r3, r1, #9
 80048d8:	4621      	mov	r1, r4
 80048da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048de:	4621      	mov	r1, r4
 80048e0:	024a      	lsls	r2, r1, #9
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80048f8:	f7fc f976 	bl	8000be8 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4613      	mov	r3, r2
 8004902:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004906:	e067      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004908:	4b75      	ldr	r3, [pc, #468]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	099b      	lsrs	r3, r3, #6
 800490e:	2200      	movs	r2, #0
 8004910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004914:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004918:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800491c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004920:	67bb      	str	r3, [r7, #120]	; 0x78
 8004922:	2300      	movs	r3, #0
 8004924:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004926:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800492a:	4622      	mov	r2, r4
 800492c:	462b      	mov	r3, r5
 800492e:	f04f 0000 	mov.w	r0, #0
 8004932:	f04f 0100 	mov.w	r1, #0
 8004936:	0159      	lsls	r1, r3, #5
 8004938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800493c:	0150      	lsls	r0, r2, #5
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4621      	mov	r1, r4
 8004944:	1a51      	subs	r1, r2, r1
 8004946:	62b9      	str	r1, [r7, #40]	; 0x28
 8004948:	4629      	mov	r1, r5
 800494a:	eb63 0301 	sbc.w	r3, r3, r1
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800495c:	4649      	mov	r1, r9
 800495e:	018b      	lsls	r3, r1, #6
 8004960:	4641      	mov	r1, r8
 8004962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004966:	4641      	mov	r1, r8
 8004968:	018a      	lsls	r2, r1, #6
 800496a:	4641      	mov	r1, r8
 800496c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004970:	4649      	mov	r1, r9
 8004972:	eb63 0b01 	sbc.w	fp, r3, r1
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004982:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004986:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800498a:	4692      	mov	sl, r2
 800498c:	469b      	mov	fp, r3
 800498e:	4623      	mov	r3, r4
 8004990:	eb1a 0303 	adds.w	r3, sl, r3
 8004994:	623b      	str	r3, [r7, #32]
 8004996:	462b      	mov	r3, r5
 8004998:	eb4b 0303 	adc.w	r3, fp, r3
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80049aa:	4629      	mov	r1, r5
 80049ac:	028b      	lsls	r3, r1, #10
 80049ae:	4621      	mov	r1, r4
 80049b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049b4:	4621      	mov	r1, r4
 80049b6:	028a      	lsls	r2, r1, #10
 80049b8:	4610      	mov	r0, r2
 80049ba:	4619      	mov	r1, r3
 80049bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049c0:	2200      	movs	r2, #0
 80049c2:	673b      	str	r3, [r7, #112]	; 0x70
 80049c4:	677a      	str	r2, [r7, #116]	; 0x74
 80049c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80049ca:	f7fc f90d 	bl	8000be8 <__aeabi_uldivmod>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4613      	mov	r3, r2
 80049d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049d8:	4b41      	ldr	r3, [pc, #260]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	3301      	adds	r3, #1
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80049ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049fa:	e0eb      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049fc:	4b38      	ldr	r3, [pc, #224]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a08:	4b35      	ldr	r3, [pc, #212]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d06b      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a14:	4b32      	ldr	r3, [pc, #200]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	099b      	lsrs	r3, r3, #6
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a26:	663b      	str	r3, [r7, #96]	; 0x60
 8004a28:	2300      	movs	r3, #0
 8004a2a:	667b      	str	r3, [r7, #100]	; 0x64
 8004a2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004a30:	4622      	mov	r2, r4
 8004a32:	462b      	mov	r3, r5
 8004a34:	f04f 0000 	mov.w	r0, #0
 8004a38:	f04f 0100 	mov.w	r1, #0
 8004a3c:	0159      	lsls	r1, r3, #5
 8004a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a42:	0150      	lsls	r0, r2, #5
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4621      	mov	r1, r4
 8004a4a:	1a51      	subs	r1, r2, r1
 8004a4c:	61b9      	str	r1, [r7, #24]
 8004a4e:	4629      	mov	r1, r5
 8004a50:	eb63 0301 	sbc.w	r3, r3, r1
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a62:	4659      	mov	r1, fp
 8004a64:	018b      	lsls	r3, r1, #6
 8004a66:	4651      	mov	r1, sl
 8004a68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a6c:	4651      	mov	r1, sl
 8004a6e:	018a      	lsls	r2, r1, #6
 8004a70:	4651      	mov	r1, sl
 8004a72:	ebb2 0801 	subs.w	r8, r2, r1
 8004a76:	4659      	mov	r1, fp
 8004a78:	eb63 0901 	sbc.w	r9, r3, r1
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a90:	4690      	mov	r8, r2
 8004a92:	4699      	mov	r9, r3
 8004a94:	4623      	mov	r3, r4
 8004a96:	eb18 0303 	adds.w	r3, r8, r3
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	462b      	mov	r3, r5
 8004a9e:	eb49 0303 	adc.w	r3, r9, r3
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	024b      	lsls	r3, r1, #9
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004aba:	4621      	mov	r1, r4
 8004abc:	024a      	lsls	r2, r1, #9
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004acc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ad0:	f7fc f88a 	bl	8000be8 <__aeabi_uldivmod>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4613      	mov	r3, r2
 8004ada:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ade:	e065      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x420>
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	00f42400 	.word	0x00f42400
 8004ae8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aec:	4b3d      	ldr	r3, [pc, #244]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	099b      	lsrs	r3, r3, #6
 8004af2:	2200      	movs	r2, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	4611      	mov	r1, r2
 8004af8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004afc:	653b      	str	r3, [r7, #80]	; 0x50
 8004afe:	2300      	movs	r3, #0
 8004b00:	657b      	str	r3, [r7, #84]	; 0x54
 8004b02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004b06:	4642      	mov	r2, r8
 8004b08:	464b      	mov	r3, r9
 8004b0a:	f04f 0000 	mov.w	r0, #0
 8004b0e:	f04f 0100 	mov.w	r1, #0
 8004b12:	0159      	lsls	r1, r3, #5
 8004b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b18:	0150      	lsls	r0, r2, #5
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4641      	mov	r1, r8
 8004b20:	1a51      	subs	r1, r2, r1
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	4649      	mov	r1, r9
 8004b26:	eb63 0301 	sbc.w	r3, r3, r1
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b38:	4659      	mov	r1, fp
 8004b3a:	018b      	lsls	r3, r1, #6
 8004b3c:	4651      	mov	r1, sl
 8004b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b42:	4651      	mov	r1, sl
 8004b44:	018a      	lsls	r2, r1, #6
 8004b46:	4651      	mov	r1, sl
 8004b48:	1a54      	subs	r4, r2, r1
 8004b4a:	4659      	mov	r1, fp
 8004b4c:	eb63 0501 	sbc.w	r5, r3, r1
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	00eb      	lsls	r3, r5, #3
 8004b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b5e:	00e2      	lsls	r2, r4, #3
 8004b60:	4614      	mov	r4, r2
 8004b62:	461d      	mov	r5, r3
 8004b64:	4643      	mov	r3, r8
 8004b66:	18e3      	adds	r3, r4, r3
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	eb45 0303 	adc.w	r3, r5, r3
 8004b70:	607b      	str	r3, [r7, #4]
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b7e:	4629      	mov	r1, r5
 8004b80:	028b      	lsls	r3, r1, #10
 8004b82:	4621      	mov	r1, r4
 8004b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b88:	4621      	mov	r1, r4
 8004b8a:	028a      	lsls	r2, r1, #10
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4619      	mov	r1, r3
 8004b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b94:	2200      	movs	r2, #0
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b98:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b9e:	f7fc f823 	bl	8000be8 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bac:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	0f1b      	lsrs	r3, r3, #28
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004bba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bca:	e003      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	37b8      	adds	r7, #184	; 0xb8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400

08004bec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e28d      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8083 	beq.w	8004d12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c0c:	4b94      	ldr	r3, [pc, #592]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d019      	beq.n	8004c4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c18:	4b91      	ldr	r3, [pc, #580]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d106      	bne.n	8004c32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c24:	4b8e      	ldr	r3, [pc, #568]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c30:	d00c      	beq.n	8004c4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c32:	4b8b      	ldr	r3, [pc, #556]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c3a:	2b0c      	cmp	r3, #12
 8004c3c:	d112      	bne.n	8004c64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3e:	4b88      	ldr	r3, [pc, #544]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c4a:	d10b      	bne.n	8004c64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4c:	4b84      	ldr	r3, [pc, #528]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d05b      	beq.n	8004d10 <HAL_RCC_OscConfig+0x124>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d157      	bne.n	8004d10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e25a      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d106      	bne.n	8004c7c <HAL_RCC_OscConfig+0x90>
 8004c6e:	4b7c      	ldr	r3, [pc, #496]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a7b      	ldr	r2, [pc, #492]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e01d      	b.n	8004cb8 <HAL_RCC_OscConfig+0xcc>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0xb4>
 8004c86:	4b76      	ldr	r3, [pc, #472]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a75      	ldr	r2, [pc, #468]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	4b73      	ldr	r3, [pc, #460]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a72      	ldr	r2, [pc, #456]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCC_OscConfig+0xcc>
 8004ca0:	4b6f      	ldr	r3, [pc, #444]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a6e      	ldr	r2, [pc, #440]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	4b6c      	ldr	r3, [pc, #432]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a6b      	ldr	r2, [pc, #428]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d013      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fc feee 	bl	8001aa0 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fc feea 	bl	8001aa0 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	; 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e21f      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	4b61      	ldr	r3, [pc, #388]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xdc>
 8004ce6:	e014      	b.n	8004d12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fc feda 	bl	8001aa0 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fc fed6 	bl	8001aa0 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e20b      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d02:	4b57      	ldr	r3, [pc, #348]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x104>
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d06f      	beq.n	8004dfe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d1e:	4b50      	ldr	r3, [pc, #320]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d017      	beq.n	8004d5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d2a:	4b4d      	ldr	r3, [pc, #308]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d105      	bne.n	8004d42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d36:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d42:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d4a:	2b0c      	cmp	r3, #12
 8004d4c:	d11c      	bne.n	8004d88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d4e:	4b44      	ldr	r3, [pc, #272]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d116      	bne.n	8004d88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5a:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <HAL_RCC_OscConfig+0x186>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d001      	beq.n	8004d72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e1d3      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d72:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4937      	ldr	r1, [pc, #220]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d86:	e03a      	b.n	8004dfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d020      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d90:	4b34      	ldr	r3, [pc, #208]	; (8004e64 <HAL_RCC_OscConfig+0x278>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d96:	f7fc fe83 	bl	8001aa0 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d9e:	f7fc fe7f 	bl	8001aa0 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e1b4      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db0:	4b2b      	ldr	r3, [pc, #172]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dbc:	4b28      	ldr	r3, [pc, #160]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4925      	ldr	r1, [pc, #148]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	600b      	str	r3, [r1, #0]
 8004dd0:	e015      	b.n	8004dfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dd2:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <HAL_RCC_OscConfig+0x278>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fc fe62 	bl	8001aa0 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de0:	f7fc fe5e 	bl	8001aa0 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e193      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004df2:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d036      	beq.n	8004e78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d016      	beq.n	8004e40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e12:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e18:	f7fc fe42 	bl	8001aa0 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e20:	f7fc fe3e 	bl	8001aa0 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e173      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x234>
 8004e3e:	e01b      	b.n	8004e78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e46:	f7fc fe2b 	bl	8001aa0 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e4c:	e00e      	b.n	8004e6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e4e:	f7fc fe27 	bl	8001aa0 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d907      	bls.n	8004e6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e15c      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
 8004e60:	40023800 	.word	0x40023800
 8004e64:	42470000 	.word	0x42470000
 8004e68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e6c:	4b8a      	ldr	r3, [pc, #552]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1ea      	bne.n	8004e4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8097 	beq.w	8004fb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e86:	2300      	movs	r3, #0
 8004e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e8a:	4b83      	ldr	r3, [pc, #524]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10f      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	4b7f      	ldr	r3, [pc, #508]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	4a7e      	ldr	r2, [pc, #504]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea6:	4b7c      	ldr	r3, [pc, #496]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eae:	60bb      	str	r3, [r7, #8]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb6:	4b79      	ldr	r3, [pc, #484]	; (800509c <HAL_RCC_OscConfig+0x4b0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d118      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ec2:	4b76      	ldr	r3, [pc, #472]	; (800509c <HAL_RCC_OscConfig+0x4b0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a75      	ldr	r2, [pc, #468]	; (800509c <HAL_RCC_OscConfig+0x4b0>)
 8004ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ece:	f7fc fde7 	bl	8001aa0 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed6:	f7fc fde3 	bl	8001aa0 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e118      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee8:	4b6c      	ldr	r3, [pc, #432]	; (800509c <HAL_RCC_OscConfig+0x4b0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d106      	bne.n	8004f0a <HAL_RCC_OscConfig+0x31e>
 8004efc:	4b66      	ldr	r3, [pc, #408]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	4a65      	ldr	r2, [pc, #404]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	6713      	str	r3, [r2, #112]	; 0x70
 8004f08:	e01c      	b.n	8004f44 <HAL_RCC_OscConfig+0x358>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b05      	cmp	r3, #5
 8004f10:	d10c      	bne.n	8004f2c <HAL_RCC_OscConfig+0x340>
 8004f12:	4b61      	ldr	r3, [pc, #388]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	4a60      	ldr	r2, [pc, #384]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f18:	f043 0304 	orr.w	r3, r3, #4
 8004f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1e:	4b5e      	ldr	r3, [pc, #376]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	4a5d      	ldr	r2, [pc, #372]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2a:	e00b      	b.n	8004f44 <HAL_RCC_OscConfig+0x358>
 8004f2c:	4b5a      	ldr	r3, [pc, #360]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	4a59      	ldr	r2, [pc, #356]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	6713      	str	r3, [r2, #112]	; 0x70
 8004f38:	4b57      	ldr	r3, [pc, #348]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a56      	ldr	r2, [pc, #344]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f3e:	f023 0304 	bic.w	r3, r3, #4
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d015      	beq.n	8004f78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4c:	f7fc fda8 	bl	8001aa0 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f52:	e00a      	b.n	8004f6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f54:	f7fc fda4 	bl	8001aa0 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e0d7      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f6a:	4b4b      	ldr	r3, [pc, #300]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0ee      	beq.n	8004f54 <HAL_RCC_OscConfig+0x368>
 8004f76:	e014      	b.n	8004fa2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7fc fd92 	bl	8001aa0 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7e:	e00a      	b.n	8004f96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f80:	f7fc fd8e 	bl	8001aa0 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e0c1      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f96:	4b40      	ldr	r3, [pc, #256]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1ee      	bne.n	8004f80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d105      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa8:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	4a3a      	ldr	r2, [pc, #232]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80ad 	beq.w	8005118 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fbe:	4b36      	ldr	r3, [pc, #216]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d060      	beq.n	800508c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d145      	bne.n	800505e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd2:	4b33      	ldr	r3, [pc, #204]	; (80050a0 <HAL_RCC_OscConfig+0x4b4>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fc fd62 	bl	8001aa0 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fc fd5e 	bl	8001aa0 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e093      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff2:	4b29      	ldr	r3, [pc, #164]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69da      	ldr	r2, [r3, #28]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	019b      	lsls	r3, r3, #6
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	3b01      	subs	r3, #1
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	061b      	lsls	r3, r3, #24
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	071b      	lsls	r3, r3, #28
 800502a:	491b      	ldr	r1, [pc, #108]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 800502c:	4313      	orrs	r3, r2
 800502e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005030:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <HAL_RCC_OscConfig+0x4b4>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005036:	f7fc fd33 	bl	8001aa0 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503e:	f7fc fd2f 	bl	8001aa0 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e064      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005050:	4b11      	ldr	r3, [pc, #68]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_OscConfig+0x452>
 800505c:	e05c      	b.n	8005118 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <HAL_RCC_OscConfig+0x4b4>)
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fc fd1c 	bl	8001aa0 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506c:	f7fc fd18 	bl	8001aa0 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e04d      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x480>
 800508a:	e045      	b.n	8005118 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d107      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e040      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
 8005098:	40023800 	.word	0x40023800
 800509c:	40007000 	.word	0x40007000
 80050a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050a4:	4b1f      	ldr	r3, [pc, #124]	; (8005124 <HAL_RCC_OscConfig+0x538>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d030      	beq.n	8005114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050bc:	429a      	cmp	r2, r3
 80050be:	d129      	bne.n	8005114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d122      	bne.n	8005114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050dc:	4293      	cmp	r3, r2
 80050de:	d119      	bne.n	8005114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	3b01      	subs	r3, #1
 80050ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d10f      	bne.n	8005114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d107      	bne.n	8005114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800

08005128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e07b      	b.n	8005232 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	2b00      	cmp	r3, #0
 8005140:	d108      	bne.n	8005154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800514a:	d009      	beq.n	8005160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	61da      	str	r2, [r3, #28]
 8005152:	e005      	b.n	8005160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc fa44 	bl	8001608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005196:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	ea42 0103 	orr.w	r1, r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	f003 0104 	and.w	r1, r3, #4
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0210 	and.w	r2, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e03f      	b.n	80052cc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7fc fa19 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2224      	movs	r2, #36	; 0x24
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800527c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f828 	bl	80052d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005292:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d8:	b0c0      	sub	sp, #256	; 0x100
 80052da:	af00      	add	r7, sp, #0
 80052dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f0:	68d9      	ldr	r1, [r3, #12]
 80052f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	ea40 0301 	orr.w	r3, r0, r1
 80052fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	431a      	orrs	r2, r3
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	431a      	orrs	r2, r3
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800532c:	f021 010c 	bic.w	r1, r1, #12
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800533a:	430b      	orrs	r3, r1
 800533c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800533e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800534a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534e:	6999      	ldr	r1, [r3, #24]
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	ea40 0301 	orr.w	r3, r0, r1
 800535a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b8f      	ldr	r3, [pc, #572]	; (80055a0 <UART_SetConfig+0x2cc>)
 8005364:	429a      	cmp	r2, r3
 8005366:	d005      	beq.n	8005374 <UART_SetConfig+0xa0>
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b8d      	ldr	r3, [pc, #564]	; (80055a4 <UART_SetConfig+0x2d0>)
 8005370:	429a      	cmp	r2, r3
 8005372:	d104      	bne.n	800537e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005374:	f7fe fecc 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 8005378:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800537c:	e003      	b.n	8005386 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800537e:	f7fe feb3 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 8005382:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005390:	f040 810c 	bne.w	80055ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005398:	2200      	movs	r2, #0
 800539a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800539e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053a6:	4622      	mov	r2, r4
 80053a8:	462b      	mov	r3, r5
 80053aa:	1891      	adds	r1, r2, r2
 80053ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80053ae:	415b      	adcs	r3, r3
 80053b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053b6:	4621      	mov	r1, r4
 80053b8:	eb12 0801 	adds.w	r8, r2, r1
 80053bc:	4629      	mov	r1, r5
 80053be:	eb43 0901 	adc.w	r9, r3, r1
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053d6:	4690      	mov	r8, r2
 80053d8:	4699      	mov	r9, r3
 80053da:	4623      	mov	r3, r4
 80053dc:	eb18 0303 	adds.w	r3, r8, r3
 80053e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053e4:	462b      	mov	r3, r5
 80053e6:	eb49 0303 	adc.w	r3, r9, r3
 80053ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005402:	460b      	mov	r3, r1
 8005404:	18db      	adds	r3, r3, r3
 8005406:	653b      	str	r3, [r7, #80]	; 0x50
 8005408:	4613      	mov	r3, r2
 800540a:	eb42 0303 	adc.w	r3, r2, r3
 800540e:	657b      	str	r3, [r7, #84]	; 0x54
 8005410:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005414:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005418:	f7fb fbe6 	bl	8000be8 <__aeabi_uldivmod>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4b61      	ldr	r3, [pc, #388]	; (80055a8 <UART_SetConfig+0x2d4>)
 8005422:	fba3 2302 	umull	r2, r3, r3, r2
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	011c      	lsls	r4, r3, #4
 800542a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800542e:	2200      	movs	r2, #0
 8005430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005434:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005438:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800543c:	4642      	mov	r2, r8
 800543e:	464b      	mov	r3, r9
 8005440:	1891      	adds	r1, r2, r2
 8005442:	64b9      	str	r1, [r7, #72]	; 0x48
 8005444:	415b      	adcs	r3, r3
 8005446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005448:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800544c:	4641      	mov	r1, r8
 800544e:	eb12 0a01 	adds.w	sl, r2, r1
 8005452:	4649      	mov	r1, r9
 8005454:	eb43 0b01 	adc.w	fp, r3, r1
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005464:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800546c:	4692      	mov	sl, r2
 800546e:	469b      	mov	fp, r3
 8005470:	4643      	mov	r3, r8
 8005472:	eb1a 0303 	adds.w	r3, sl, r3
 8005476:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800547a:	464b      	mov	r3, r9
 800547c:	eb4b 0303 	adc.w	r3, fp, r3
 8005480:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005490:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005494:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005498:	460b      	mov	r3, r1
 800549a:	18db      	adds	r3, r3, r3
 800549c:	643b      	str	r3, [r7, #64]	; 0x40
 800549e:	4613      	mov	r3, r2
 80054a0:	eb42 0303 	adc.w	r3, r2, r3
 80054a4:	647b      	str	r3, [r7, #68]	; 0x44
 80054a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054ae:	f7fb fb9b 	bl	8000be8 <__aeabi_uldivmod>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4611      	mov	r1, r2
 80054b8:	4b3b      	ldr	r3, [pc, #236]	; (80055a8 <UART_SetConfig+0x2d4>)
 80054ba:	fba3 2301 	umull	r2, r3, r3, r1
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	2264      	movs	r2, #100	; 0x64
 80054c2:	fb02 f303 	mul.w	r3, r2, r3
 80054c6:	1acb      	subs	r3, r1, r3
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054ce:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <UART_SetConfig+0x2d4>)
 80054d0:	fba3 2302 	umull	r2, r3, r3, r2
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054dc:	441c      	add	r4, r3
 80054de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054f0:	4642      	mov	r2, r8
 80054f2:	464b      	mov	r3, r9
 80054f4:	1891      	adds	r1, r2, r2
 80054f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80054f8:	415b      	adcs	r3, r3
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005500:	4641      	mov	r1, r8
 8005502:	1851      	adds	r1, r2, r1
 8005504:	6339      	str	r1, [r7, #48]	; 0x30
 8005506:	4649      	mov	r1, r9
 8005508:	414b      	adcs	r3, r1
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005518:	4659      	mov	r1, fp
 800551a:	00cb      	lsls	r3, r1, #3
 800551c:	4651      	mov	r1, sl
 800551e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005522:	4651      	mov	r1, sl
 8005524:	00ca      	lsls	r2, r1, #3
 8005526:	4610      	mov	r0, r2
 8005528:	4619      	mov	r1, r3
 800552a:	4603      	mov	r3, r0
 800552c:	4642      	mov	r2, r8
 800552e:	189b      	adds	r3, r3, r2
 8005530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005534:	464b      	mov	r3, r9
 8005536:	460a      	mov	r2, r1
 8005538:	eb42 0303 	adc.w	r3, r2, r3
 800553c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800554c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005550:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005554:	460b      	mov	r3, r1
 8005556:	18db      	adds	r3, r3, r3
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
 800555a:	4613      	mov	r3, r2
 800555c:	eb42 0303 	adc.w	r3, r2, r3
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005562:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005566:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800556a:	f7fb fb3d 	bl	8000be8 <__aeabi_uldivmod>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <UART_SetConfig+0x2d4>)
 8005574:	fba3 1302 	umull	r1, r3, r3, r2
 8005578:	095b      	lsrs	r3, r3, #5
 800557a:	2164      	movs	r1, #100	; 0x64
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	3332      	adds	r3, #50	; 0x32
 8005586:	4a08      	ldr	r2, [pc, #32]	; (80055a8 <UART_SetConfig+0x2d4>)
 8005588:	fba2 2303 	umull	r2, r3, r2, r3
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	f003 0207 	and.w	r2, r3, #7
 8005592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4422      	add	r2, r4
 800559a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800559c:	e105      	b.n	80057aa <UART_SetConfig+0x4d6>
 800559e:	bf00      	nop
 80055a0:	40011000 	.word	0x40011000
 80055a4:	40011400 	.word	0x40011400
 80055a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055b0:	2200      	movs	r2, #0
 80055b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055be:	4642      	mov	r2, r8
 80055c0:	464b      	mov	r3, r9
 80055c2:	1891      	adds	r1, r2, r2
 80055c4:	6239      	str	r1, [r7, #32]
 80055c6:	415b      	adcs	r3, r3
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055ce:	4641      	mov	r1, r8
 80055d0:	1854      	adds	r4, r2, r1
 80055d2:	4649      	mov	r1, r9
 80055d4:	eb43 0501 	adc.w	r5, r3, r1
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	00eb      	lsls	r3, r5, #3
 80055e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055e6:	00e2      	lsls	r2, r4, #3
 80055e8:	4614      	mov	r4, r2
 80055ea:	461d      	mov	r5, r3
 80055ec:	4643      	mov	r3, r8
 80055ee:	18e3      	adds	r3, r4, r3
 80055f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055f4:	464b      	mov	r3, r9
 80055f6:	eb45 0303 	adc.w	r3, r5, r3
 80055fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800560a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800561a:	4629      	mov	r1, r5
 800561c:	008b      	lsls	r3, r1, #2
 800561e:	4621      	mov	r1, r4
 8005620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005624:	4621      	mov	r1, r4
 8005626:	008a      	lsls	r2, r1, #2
 8005628:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800562c:	f7fb fadc 	bl	8000be8 <__aeabi_uldivmod>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4b60      	ldr	r3, [pc, #384]	; (80057b8 <UART_SetConfig+0x4e4>)
 8005636:	fba3 2302 	umull	r2, r3, r3, r2
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	011c      	lsls	r4, r3, #4
 800563e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005642:	2200      	movs	r2, #0
 8005644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005648:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800564c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005650:	4642      	mov	r2, r8
 8005652:	464b      	mov	r3, r9
 8005654:	1891      	adds	r1, r2, r2
 8005656:	61b9      	str	r1, [r7, #24]
 8005658:	415b      	adcs	r3, r3
 800565a:	61fb      	str	r3, [r7, #28]
 800565c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005660:	4641      	mov	r1, r8
 8005662:	1851      	adds	r1, r2, r1
 8005664:	6139      	str	r1, [r7, #16]
 8005666:	4649      	mov	r1, r9
 8005668:	414b      	adcs	r3, r1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005678:	4659      	mov	r1, fp
 800567a:	00cb      	lsls	r3, r1, #3
 800567c:	4651      	mov	r1, sl
 800567e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005682:	4651      	mov	r1, sl
 8005684:	00ca      	lsls	r2, r1, #3
 8005686:	4610      	mov	r0, r2
 8005688:	4619      	mov	r1, r3
 800568a:	4603      	mov	r3, r0
 800568c:	4642      	mov	r2, r8
 800568e:	189b      	adds	r3, r3, r2
 8005690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005694:	464b      	mov	r3, r9
 8005696:	460a      	mov	r2, r1
 8005698:	eb42 0303 	adc.w	r3, r2, r3
 800569c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80056aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056b8:	4649      	mov	r1, r9
 80056ba:	008b      	lsls	r3, r1, #2
 80056bc:	4641      	mov	r1, r8
 80056be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c2:	4641      	mov	r1, r8
 80056c4:	008a      	lsls	r2, r1, #2
 80056c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056ca:	f7fb fa8d 	bl	8000be8 <__aeabi_uldivmod>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4b39      	ldr	r3, [pc, #228]	; (80057b8 <UART_SetConfig+0x4e4>)
 80056d4:	fba3 1302 	umull	r1, r3, r3, r2
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	2164      	movs	r1, #100	; 0x64
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	3332      	adds	r3, #50	; 0x32
 80056e6:	4a34      	ldr	r2, [pc, #208]	; (80057b8 <UART_SetConfig+0x4e4>)
 80056e8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ec:	095b      	lsrs	r3, r3, #5
 80056ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056f2:	441c      	add	r4, r3
 80056f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f8:	2200      	movs	r2, #0
 80056fa:	673b      	str	r3, [r7, #112]	; 0x70
 80056fc:	677a      	str	r2, [r7, #116]	; 0x74
 80056fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005702:	4642      	mov	r2, r8
 8005704:	464b      	mov	r3, r9
 8005706:	1891      	adds	r1, r2, r2
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	415b      	adcs	r3, r3
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005712:	4641      	mov	r1, r8
 8005714:	1851      	adds	r1, r2, r1
 8005716:	6039      	str	r1, [r7, #0]
 8005718:	4649      	mov	r1, r9
 800571a:	414b      	adcs	r3, r1
 800571c:	607b      	str	r3, [r7, #4]
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800572a:	4659      	mov	r1, fp
 800572c:	00cb      	lsls	r3, r1, #3
 800572e:	4651      	mov	r1, sl
 8005730:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005734:	4651      	mov	r1, sl
 8005736:	00ca      	lsls	r2, r1, #3
 8005738:	4610      	mov	r0, r2
 800573a:	4619      	mov	r1, r3
 800573c:	4603      	mov	r3, r0
 800573e:	4642      	mov	r2, r8
 8005740:	189b      	adds	r3, r3, r2
 8005742:	66bb      	str	r3, [r7, #104]	; 0x68
 8005744:	464b      	mov	r3, r9
 8005746:	460a      	mov	r2, r1
 8005748:	eb42 0303 	adc.w	r3, r2, r3
 800574c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	663b      	str	r3, [r7, #96]	; 0x60
 8005758:	667a      	str	r2, [r7, #100]	; 0x64
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005766:	4649      	mov	r1, r9
 8005768:	008b      	lsls	r3, r1, #2
 800576a:	4641      	mov	r1, r8
 800576c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005770:	4641      	mov	r1, r8
 8005772:	008a      	lsls	r2, r1, #2
 8005774:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005778:	f7fb fa36 	bl	8000be8 <__aeabi_uldivmod>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <UART_SetConfig+0x4e4>)
 8005782:	fba3 1302 	umull	r1, r3, r3, r2
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	2164      	movs	r1, #100	; 0x64
 800578a:	fb01 f303 	mul.w	r3, r1, r3
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	3332      	adds	r3, #50	; 0x32
 8005794:	4a08      	ldr	r2, [pc, #32]	; (80057b8 <UART_SetConfig+0x4e4>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	f003 020f 	and.w	r2, r3, #15
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4422      	add	r2, r4
 80057a8:	609a      	str	r2, [r3, #8]
}
 80057aa:	bf00      	nop
 80057ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057b0:	46bd      	mov	sp, r7
 80057b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057b6:	bf00      	nop
 80057b8:	51eb851f 	.word	0x51eb851f

080057bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057bc:	b084      	sub	sp, #16
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	f107 001c 	add.w	r0, r7, #28
 80057ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d122      	bne.n	800581a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d105      	bne.n	800580e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f001 fbe8 	bl	8006fe4 <USB_CoreReset>
 8005814:	4603      	mov	r3, r0
 8005816:	73fb      	strb	r3, [r7, #15]
 8005818:	e01a      	b.n	8005850 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fbdc 	bl	8006fe4 <USB_CoreReset>
 800582c:	4603      	mov	r3, r0
 800582e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	639a      	str	r2, [r3, #56]	; 0x38
 8005842:	e005      	b.n	8005850 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	2b01      	cmp	r3, #1
 8005854:	d10b      	bne.n	800586e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f043 0206 	orr.w	r2, r3, #6
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800586e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800587a:	b004      	add	sp, #16
 800587c:	4770      	bx	lr
	...

08005880 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	4613      	mov	r3, r2
 800588c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d165      	bne.n	8005960 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4a41      	ldr	r2, [pc, #260]	; (800599c <USB_SetTurnaroundTime+0x11c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d906      	bls.n	80058aa <USB_SetTurnaroundTime+0x2a>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4a40      	ldr	r2, [pc, #256]	; (80059a0 <USB_SetTurnaroundTime+0x120>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d202      	bcs.n	80058aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058a4:	230f      	movs	r3, #15
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e062      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4a3c      	ldr	r2, [pc, #240]	; (80059a0 <USB_SetTurnaroundTime+0x120>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d306      	bcc.n	80058c0 <USB_SetTurnaroundTime+0x40>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4a3b      	ldr	r2, [pc, #236]	; (80059a4 <USB_SetTurnaroundTime+0x124>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d202      	bcs.n	80058c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80058ba:	230e      	movs	r3, #14
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e057      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4a38      	ldr	r2, [pc, #224]	; (80059a4 <USB_SetTurnaroundTime+0x124>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d306      	bcc.n	80058d6 <USB_SetTurnaroundTime+0x56>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4a37      	ldr	r2, [pc, #220]	; (80059a8 <USB_SetTurnaroundTime+0x128>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d202      	bcs.n	80058d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80058d0:	230d      	movs	r3, #13
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e04c      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4a33      	ldr	r2, [pc, #204]	; (80059a8 <USB_SetTurnaroundTime+0x128>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d306      	bcc.n	80058ec <USB_SetTurnaroundTime+0x6c>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4a32      	ldr	r2, [pc, #200]	; (80059ac <USB_SetTurnaroundTime+0x12c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d802      	bhi.n	80058ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80058e6:	230c      	movs	r3, #12
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e041      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4a2f      	ldr	r2, [pc, #188]	; (80059ac <USB_SetTurnaroundTime+0x12c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d906      	bls.n	8005902 <USB_SetTurnaroundTime+0x82>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4a2e      	ldr	r2, [pc, #184]	; (80059b0 <USB_SetTurnaroundTime+0x130>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d802      	bhi.n	8005902 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80058fc:	230b      	movs	r3, #11
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	e036      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4a2a      	ldr	r2, [pc, #168]	; (80059b0 <USB_SetTurnaroundTime+0x130>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d906      	bls.n	8005918 <USB_SetTurnaroundTime+0x98>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4a29      	ldr	r2, [pc, #164]	; (80059b4 <USB_SetTurnaroundTime+0x134>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d802      	bhi.n	8005918 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005912:	230a      	movs	r3, #10
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e02b      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4a26      	ldr	r2, [pc, #152]	; (80059b4 <USB_SetTurnaroundTime+0x134>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d906      	bls.n	800592e <USB_SetTurnaroundTime+0xae>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4a25      	ldr	r2, [pc, #148]	; (80059b8 <USB_SetTurnaroundTime+0x138>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d202      	bcs.n	800592e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005928:	2309      	movs	r3, #9
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	e020      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <USB_SetTurnaroundTime+0x138>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d306      	bcc.n	8005944 <USB_SetTurnaroundTime+0xc4>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4a20      	ldr	r2, [pc, #128]	; (80059bc <USB_SetTurnaroundTime+0x13c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d802      	bhi.n	8005944 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800593e:	2308      	movs	r3, #8
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e015      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <USB_SetTurnaroundTime+0x13c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d906      	bls.n	800595a <USB_SetTurnaroundTime+0xda>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <USB_SetTurnaroundTime+0x140>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d202      	bcs.n	800595a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005954:	2307      	movs	r3, #7
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	e00a      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800595a:	2306      	movs	r3, #6
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e007      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005966:	2309      	movs	r3, #9
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e001      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800596c:	2309      	movs	r3, #9
 800596e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	029b      	lsls	r3, r3, #10
 8005984:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005988:	431a      	orrs	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	00d8acbf 	.word	0x00d8acbf
 80059a0:	00e4e1c0 	.word	0x00e4e1c0
 80059a4:	00f42400 	.word	0x00f42400
 80059a8:	01067380 	.word	0x01067380
 80059ac:	011a499f 	.word	0x011a499f
 80059b0:	01312cff 	.word	0x01312cff
 80059b4:	014ca43f 	.word	0x014ca43f
 80059b8:	016e3600 	.word	0x016e3600
 80059bc:	01a6ab1f 	.word	0x01a6ab1f
 80059c0:	01e84800 	.word	0x01e84800

080059c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f043 0201 	orr.w	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f023 0201 	bic.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d115      	bne.n	8005a56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a36:	2001      	movs	r0, #1
 8005a38:	f7fc f83e 	bl	8001ab8 <HAL_Delay>
      ms++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 fa3f 	bl	8006ec6 <USB_GetMode>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d01e      	beq.n	8005a8c <USB_SetCurrentMode+0x84>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b31      	cmp	r3, #49	; 0x31
 8005a52:	d9f0      	bls.n	8005a36 <USB_SetCurrentMode+0x2e>
 8005a54:	e01a      	b.n	8005a8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d115      	bne.n	8005a88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a68:	2001      	movs	r0, #1
 8005a6a:	f7fc f825 	bl	8001ab8 <HAL_Delay>
      ms++;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3301      	adds	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fa26 	bl	8006ec6 <USB_GetMode>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <USB_SetCurrentMode+0x84>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b31      	cmp	r3, #49	; 0x31
 8005a84:	d9f0      	bls.n	8005a68 <USB_SetCurrentMode+0x60>
 8005a86:	e001      	b.n	8005a8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e005      	b.n	8005a98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b32      	cmp	r3, #50	; 0x32
 8005a90:	d101      	bne.n	8005a96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005aba:	2300      	movs	r3, #0
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	e009      	b.n	8005ad4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	3340      	adds	r3, #64	; 0x40
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	2200      	movs	r2, #0
 8005acc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2b0e      	cmp	r3, #14
 8005ad8:	d9f2      	bls.n	8005ac0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d11c      	bne.n	8005b1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aee:	f043 0302 	orr.w	r3, r3, #2
 8005af2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e005      	b.n	8005b26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	2300      	movs	r3, #0
 8005b30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b38:	4619      	mov	r1, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b40:	461a      	mov	r2, r3
 8005b42:	680b      	ldr	r3, [r1, #0]
 8005b44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d10c      	bne.n	8005b66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d104      	bne.n	8005b5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b52:	2100      	movs	r1, #0
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f965 	bl	8005e24 <USB_SetDevSpeed>
 8005b5a:	e008      	b.n	8005b6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f960 	bl	8005e24 <USB_SetDevSpeed>
 8005b64:	e003      	b.n	8005b6e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b66:	2103      	movs	r1, #3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f95b 	bl	8005e24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b6e:	2110      	movs	r1, #16
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f8f3 	bl	8005d5c <USB_FlushTxFifo>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f91f 	bl	8005dc4 <USB_FlushRxFifo>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b96:	461a      	mov	r2, r3
 8005b98:	2300      	movs	r3, #0
 8005b9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	461a      	mov	r2, r3
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	e043      	b.n	8005c42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd0:	d118      	bne.n	8005c04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	461a      	mov	r2, r3
 8005be6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	e013      	b.n	8005c16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	e008      	b.n	8005c16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	461a      	mov	r2, r3
 8005c12:	2300      	movs	r3, #0
 8005c14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	461a      	mov	r2, r3
 8005c24:	2300      	movs	r3, #0
 8005c26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c34:	461a      	mov	r2, r3
 8005c36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d3b7      	bcc.n	8005bba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	e043      	b.n	8005cd8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c66:	d118      	bne.n	8005c9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	e013      	b.n	8005cac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c90:	461a      	mov	r2, r3
 8005c92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	e008      	b.n	8005cac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	2300      	movs	r3, #0
 8005caa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2300      	movs	r3, #0
 8005cbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d3b7      	bcc.n	8005c50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f043 0210 	orr.w	r2, r3, #16
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699a      	ldr	r2, [r3, #24]
 8005d18:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <USB_DevInit+0x2b8>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	f043 0208 	orr.w	r2, r3, #8
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d107      	bne.n	8005d48 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d40:	f043 0304 	orr.w	r3, r3, #4
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d54:	b004      	add	sp, #16
 8005d56:	4770      	bx	lr
 8005d58:	803c3800 	.word	0x803c3800

08005d5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4a13      	ldr	r2, [pc, #76]	; (8005dc0 <USB_FlushTxFifo+0x64>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e01b      	b.n	8005db4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	daf2      	bge.n	8005d6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	019b      	lsls	r3, r3, #6
 8005d8c:	f043 0220 	orr.w	r2, r3, #32
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4a08      	ldr	r2, [pc, #32]	; (8005dc0 <USB_FlushTxFifo+0x64>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d901      	bls.n	8005da6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e006      	b.n	8005db4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d0f0      	beq.n	8005d94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	00030d40 	.word	0x00030d40

08005dc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4a11      	ldr	r2, [pc, #68]	; (8005e20 <USB_FlushRxFifo+0x5c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d901      	bls.n	8005de2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e018      	b.n	8005e14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	daf2      	bge.n	8005dd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2210      	movs	r2, #16
 8005df2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <USB_FlushRxFifo+0x5c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e006      	b.n	8005e14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0310 	and.w	r3, r3, #16
 8005e0e:	2b10      	cmp	r3, #16
 8005e10:	d0f0      	beq.n	8005df4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	00030d40 	.word	0x00030d40

08005e24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	68f9      	ldr	r1, [r7, #12]
 8005e40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e44:	4313      	orrs	r3, r2
 8005e46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b087      	sub	sp, #28
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 0306 	and.w	r3, r3, #6
 8005e6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e76:	2300      	movs	r3, #0
 8005e78:	75fb      	strb	r3, [r7, #23]
 8005e7a:	e00a      	b.n	8005e92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d002      	beq.n	8005e88 <USB_GetDevSpeed+0x32>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b06      	cmp	r3, #6
 8005e86:	d102      	bne.n	8005e8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	75fb      	strb	r3, [r7, #23]
 8005e8c:	e001      	b.n	8005e92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e8e:	230f      	movs	r3, #15
 8005e90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d13a      	bne.n	8005f32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec2:	69da      	ldr	r2, [r3, #28]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	2101      	movs	r1, #1
 8005ece:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	68f9      	ldr	r1, [r7, #12]
 8005ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eda:	4313      	orrs	r3, r2
 8005edc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d155      	bne.n	8005fa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	791b      	ldrb	r3, [r3, #4]
 8005f0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	059b      	lsls	r3, r3, #22
 8005f16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	e036      	b.n	8005fa0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f38:	69da      	ldr	r2, [r3, #28]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	2101      	movs	r1, #1
 8005f44:	fa01 f303 	lsl.w	r3, r1, r3
 8005f48:	041b      	lsls	r3, r3, #16
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f50:	4313      	orrs	r3, r2
 8005f52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d11a      	bne.n	8005fa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	791b      	ldrb	r3, [r3, #4]
 8005f84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f86:	430b      	orrs	r3, r1
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
	...

08005fb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d161      	bne.n	8006090 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fe2:	d11f      	bne.n	8006024 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006002:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006022:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	2101      	movs	r1, #1
 8006036:	fa01 f303 	lsl.w	r3, r1, r3
 800603a:	b29b      	uxth	r3, r3
 800603c:	43db      	mvns	r3, r3
 800603e:	68f9      	ldr	r1, [r7, #12]
 8006040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006044:	4013      	ands	r3, r2
 8006046:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	f003 030f 	and.w	r3, r3, #15
 8006058:	2101      	movs	r1, #1
 800605a:	fa01 f303 	lsl.w	r3, r1, r3
 800605e:	b29b      	uxth	r3, r3
 8006060:	43db      	mvns	r3, r3
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006068:	4013      	ands	r3, r2
 800606a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	0159      	lsls	r1, r3, #5
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	440b      	add	r3, r1
 8006082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006086:	4619      	mov	r1, r3
 8006088:	4b35      	ldr	r3, [pc, #212]	; (8006160 <USB_DeactivateEndpoint+0x1b0>)
 800608a:	4013      	ands	r3, r2
 800608c:	600b      	str	r3, [r1, #0]
 800608e:	e060      	b.n	8006152 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060a6:	d11f      	bne.n	80060e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	f003 030f 	and.w	r3, r3, #15
 80060f8:	2101      	movs	r1, #1
 80060fa:	fa01 f303 	lsl.w	r3, r1, r3
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	43db      	mvns	r3, r3
 8006102:	68f9      	ldr	r1, [r7, #12]
 8006104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006108:	4013      	ands	r3, r2
 800610a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	2101      	movs	r1, #1
 800611e:	fa01 f303 	lsl.w	r3, r1, r3
 8006122:	041b      	lsls	r3, r3, #16
 8006124:	43db      	mvns	r3, r3
 8006126:	68f9      	ldr	r1, [r7, #12]
 8006128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800612c:	4013      	ands	r3, r2
 800612e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	0159      	lsls	r1, r3, #5
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	440b      	add	r3, r1
 8006146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614a:	4619      	mov	r1, r3
 800614c:	4b05      	ldr	r3, [pc, #20]	; (8006164 <USB_DeactivateEndpoint+0x1b4>)
 800614e:	4013      	ands	r3, r2
 8006150:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	ec337800 	.word	0xec337800
 8006164:	eff37800 	.word	0xeff37800

08006168 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	4613      	mov	r3, r2
 8006174:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	785b      	ldrb	r3, [r3, #1]
 8006184:	2b01      	cmp	r3, #1
 8006186:	f040 815c 	bne.w	8006442 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d132      	bne.n	80061f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f0:	0cdb      	lsrs	r3, r3, #19
 80061f2:	04db      	lsls	r3, r3, #19
 80061f4:	6113      	str	r3, [r2, #16]
 80061f6:	e074      	b.n	80062e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006212:	0cdb      	lsrs	r3, r3, #19
 8006214:	04db      	lsls	r3, r3, #19
 8006216:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006232:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006236:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800623a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006248:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6999      	ldr	r1, [r3, #24]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	440b      	add	r3, r1
 8006254:	1e59      	subs	r1, r3, #1
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	fbb1 f3f3 	udiv	r3, r1, r3
 800625e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006260:	4b9d      	ldr	r3, [pc, #628]	; (80064d8 <USB_EPStartXfer+0x370>)
 8006262:	400b      	ands	r3, r1
 8006264:	69b9      	ldr	r1, [r7, #24]
 8006266:	0148      	lsls	r0, r1, #5
 8006268:	69f9      	ldr	r1, [r7, #28]
 800626a:	4401      	add	r1, r0
 800626c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006270:	4313      	orrs	r3, r2
 8006272:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800628a:	69b9      	ldr	r1, [r7, #24]
 800628c:	0148      	lsls	r0, r1, #5
 800628e:	69f9      	ldr	r1, [r7, #28]
 8006290:	4401      	add	r1, r0
 8006292:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006296:	4313      	orrs	r3, r2
 8006298:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	791b      	ldrb	r3, [r3, #4]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d11f      	bne.n	80062e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80062c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d14b      	bne.n	8006380 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d009      	beq.n	8006304 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	461a      	mov	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	791b      	ldrb	r3, [r3, #4]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d128      	bne.n	800635e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006318:	2b00      	cmp	r3, #0
 800631a:	d110      	bne.n	800633e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	440a      	add	r2, r1
 8006332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006336:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	e00f      	b.n	800635e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	440a      	add	r2, r1
 8006354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	440a      	add	r2, r1
 8006374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006378:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	e133      	b.n	80065e8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800639e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	791b      	ldrb	r3, [r3, #4]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d015      	beq.n	80063d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 811b 	beq.w	80065e8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	2101      	movs	r1, #1
 80063c4:	fa01 f303 	lsl.w	r3, r1, r3
 80063c8:	69f9      	ldr	r1, [r7, #28]
 80063ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063ce:	4313      	orrs	r3, r2
 80063d0:	634b      	str	r3, [r1, #52]	; 0x34
 80063d2:	e109      	b.n	80065e8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d110      	bne.n	8006406 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	e00f      	b.n	8006426 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	69fa      	ldr	r2, [r7, #28]
 800641a:	440a      	add	r2, r1
 800641c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006424:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6919      	ldr	r1, [r3, #16]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	781a      	ldrb	r2, [r3, #0]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	b298      	uxth	r0, r3
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	4603      	mov	r3, r0
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fade 	bl	80069fc <USB_WritePacket>
 8006440:	e0d2      	b.n	80065e8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	440a      	add	r2, r1
 8006458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645c:	0cdb      	lsrs	r3, r3, #19
 800645e:	04db      	lsls	r3, r3, #19
 8006460:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	440a      	add	r2, r1
 8006478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006480:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006484:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d126      	bne.n	80064dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a4:	69b9      	ldr	r1, [r7, #24]
 80064a6:	0148      	lsls	r0, r1, #5
 80064a8:	69f9      	ldr	r1, [r7, #28]
 80064aa:	4401      	add	r1, r0
 80064ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064b0:	4313      	orrs	r3, r2
 80064b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064d2:	6113      	str	r3, [r2, #16]
 80064d4:	e03a      	b.n	800654c <USB_EPStartXfer+0x3e4>
 80064d6:	bf00      	nop
 80064d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	699a      	ldr	r2, [r3, #24]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	4413      	add	r3, r2
 80064e6:	1e5a      	subs	r2, r3, #1
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	8afa      	ldrh	r2, [r7, #22]
 80064f8:	fb03 f202 	mul.w	r2, r3, r2
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	8afb      	ldrh	r3, [r7, #22]
 8006510:	04d9      	lsls	r1, r3, #19
 8006512:	4b38      	ldr	r3, [pc, #224]	; (80065f4 <USB_EPStartXfer+0x48c>)
 8006514:	400b      	ands	r3, r1
 8006516:	69b9      	ldr	r1, [r7, #24]
 8006518:	0148      	lsls	r0, r1, #5
 800651a:	69f9      	ldr	r1, [r7, #28]
 800651c:	4401      	add	r1, r0
 800651e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006522:	4313      	orrs	r3, r2
 8006524:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800653c:	69b9      	ldr	r1, [r7, #24]
 800653e:	0148      	lsls	r0, r1, #5
 8006540:	69f9      	ldr	r1, [r7, #28]
 8006542:	4401      	add	r1, r0
 8006544:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006548:	4313      	orrs	r3, r2
 800654a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d10d      	bne.n	800656e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6919      	ldr	r1, [r3, #16]
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656a:	460a      	mov	r2, r1
 800656c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	791b      	ldrb	r3, [r3, #4]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d128      	bne.n	80065c8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006582:	2b00      	cmp	r3, #0
 8006584:	d110      	bne.n	80065a8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	e00f      	b.n	80065c8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	0151      	lsls	r1, r2, #5
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	440a      	add	r2, r1
 80065be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	1ff80000 	.word	0x1ff80000

080065f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	4613      	mov	r3, r2
 8006604:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b01      	cmp	r3, #1
 8006616:	f040 80ce 	bne.w	80067b6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d132      	bne.n	8006688 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006640:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006644:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006664:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006680:	0cdb      	lsrs	r3, r3, #19
 8006682:	04db      	lsls	r3, r3, #19
 8006684:	6113      	str	r3, [r2, #16]
 8006686:	e04e      	b.n	8006726 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a2:	0cdb      	lsrs	r3, r3, #19
 80066a4:	04db      	lsls	r3, r3, #19
 80066a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	699a      	ldr	r2, [r3, #24]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d903      	bls.n	80066e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006716:	6939      	ldr	r1, [r7, #16]
 8006718:	0148      	lsls	r0, r1, #5
 800671a:	6979      	ldr	r1, [r7, #20]
 800671c:	4401      	add	r1, r0
 800671e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006722:	4313      	orrs	r3, r2
 8006724:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d11e      	bne.n	800676a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d009      	beq.n	8006748 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	461a      	mov	r2, r3
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	0151      	lsls	r1, r2, #5
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	440a      	add	r2, r1
 800675e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006762:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	e097      	b.n	800689a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	440a      	add	r2, r1
 8006780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006784:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006788:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 8083 	beq.w	800689a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	f003 030f 	and.w	r3, r3, #15
 80067a4:	2101      	movs	r1, #1
 80067a6:	fa01 f303 	lsl.w	r3, r1, r3
 80067aa:	6979      	ldr	r1, [r7, #20]
 80067ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067b0:	4313      	orrs	r3, r2
 80067b2:	634b      	str	r3, [r1, #52]	; 0x34
 80067b4:	e071      	b.n	800689a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d0:	0cdb      	lsrs	r3, r3, #19
 80067d2:	04db      	lsls	r3, r3, #19
 80067d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	440a      	add	r2, r1
 8006828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800682c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006830:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683e:	691a      	ldr	r2, [r3, #16]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006848:	6939      	ldr	r1, [r7, #16]
 800684a:	0148      	lsls	r0, r1, #5
 800684c:	6979      	ldr	r1, [r7, #20]
 800684e:	4401      	add	r1, r0
 8006850:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006854:	4313      	orrs	r3, r2
 8006856:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d10d      	bne.n	800687a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d009      	beq.n	800687a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6919      	ldr	r1, [r3, #16]
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006876:	460a      	mov	r2, r1
 8006878:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	440a      	add	r2, r1
 8006890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006894:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006898:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d14a      	bne.n	800695c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068de:	f040 8086 	bne.w	80069ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006900:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006904:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	7812      	ldrb	r2, [r2, #0]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	440a      	add	r2, r1
 8006920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006924:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006928:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3301      	adds	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f242 7210 	movw	r2, #10000	; 0x2710
 8006936:	4293      	cmp	r3, r2
 8006938:	d902      	bls.n	8006940 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	75fb      	strb	r3, [r7, #23]
          break;
 800693e:	e056      	b.n	80069ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006958:	d0e7      	beq.n	800692a <USB_EPStopXfer+0x82>
 800695a:	e048      	b.n	80069ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006974:	d13b      	bne.n	80069ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	7812      	ldrb	r2, [r2, #0]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006994:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006998:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	7812      	ldrb	r2, [r2, #0]
 80069ae:	0151      	lsls	r1, r2, #5
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	440a      	add	r2, r1
 80069b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3301      	adds	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d902      	bls.n	80069d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	75fb      	strb	r3, [r7, #23]
          break;
 80069d2:	e00c      	b.n	80069ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ec:	d0e7      	beq.n	80069be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	371c      	adds	r7, #28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b089      	sub	sp, #36	; 0x24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	4611      	mov	r1, r2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	71fb      	strb	r3, [r7, #7]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d123      	bne.n	8006a6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a22:	88bb      	ldrh	r3, [r7, #4]
 8006a24:	3303      	adds	r3, #3
 8006a26:	089b      	lsrs	r3, r3, #2
 8006a28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	e018      	b.n	8006a62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	031a      	lsls	r2, r3, #12
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	3301      	adds	r3, #1
 8006a48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	3301      	adds	r3, #1
 8006a54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d3e2      	bcc.n	8006a30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3724      	adds	r7, #36	; 0x24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b08b      	sub	sp, #44	; 0x2c
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a8e:	88fb      	ldrh	r3, [r7, #6]
 8006a90:	089b      	lsrs	r3, r3, #2
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	f003 0303 	and.w	r3, r3, #3
 8006a9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	623b      	str	r3, [r7, #32]
 8006aa2:	e014      	b.n	8006ace <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	3301      	adds	r3, #1
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	3301      	adds	r3, #1
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	3301      	adds	r3, #1
 8006acc:	623b      	str	r3, [r7, #32]
 8006ace:	6a3a      	ldr	r2, [r7, #32]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d3e6      	bcc.n	8006aa4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ad6:	8bfb      	ldrh	r3, [r7, #30]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01e      	beq.n	8006b1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f107 0310 	add.w	r3, r7, #16
 8006aec:	6812      	ldr	r2, [r2, #0]
 8006aee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	701a      	strb	r2, [r3, #0]
      i++;
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	3301      	adds	r3, #1
 8006b06:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b0e:	8bfb      	ldrh	r3, [r7, #30]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b14:	8bfb      	ldrh	r3, [r7, #30]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1ea      	bne.n	8006af0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	372c      	adds	r7, #44	; 0x2c
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d12c      	bne.n	8006b9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	db12      	blt.n	8006b7c <USB_EPSetStall+0x54>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00f      	beq.n	8006b7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	0151      	lsls	r1, r2, #5
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	440a      	add	r2, r1
 8006b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	0151      	lsls	r1, r2, #5
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	440a      	add	r2, r1
 8006b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	e02b      	b.n	8006bf6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	db12      	blt.n	8006bd6 <USB_EPSetStall+0xae>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00f      	beq.n	8006bd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	0151      	lsls	r1, r2, #5
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	440a      	add	r2, r1
 8006bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d128      	bne.n	8006c72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	791b      	ldrb	r3, [r3, #4]
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d003      	beq.n	8006c50 <USB_EPClearStall+0x4c>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	791b      	ldrb	r3, [r3, #4]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d138      	bne.n	8006cc2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	e027      	b.n	8006cc2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	0151      	lsls	r1, r2, #5
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	440a      	add	r2, r1
 8006c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	791b      	ldrb	r3, [r3, #4]
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d003      	beq.n	8006ca2 <USB_EPClearStall+0x9e>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	791b      	ldrb	r3, [r3, #4]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d10f      	bne.n	8006cc2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006cf2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d04:	68f9      	ldr	r1, [r7, #12]
 8006d06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d36:	f023 0303 	bic.w	r3, r3, #3
 8006d3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d4a:	f023 0302 	bic.w	r3, r3, #2
 8006d4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d78:	f023 0303 	bic.w	r3, r3, #3
 8006d7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d8c:	f043 0302 	orr.w	r3, r3, #2
 8006d90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4013      	ands	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006db8:	68fb      	ldr	r3, [r7, #12]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b085      	sub	sp, #20
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	4013      	ands	r3, r2
 8006de8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	0c1b      	lsrs	r3, r3, #16
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b085      	sub	sp, #20
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	b29b      	uxth	r3, r3
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b085      	sub	sp, #20
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	460b      	mov	r3, r1
 8006e38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b087      	sub	sp, #28
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	f003 030f 	and.w	r3, r3, #15
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9a:	01db      	lsls	r3, r3, #7
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f00:	f023 0307 	bic.w	r3, r3, #7
 8006f04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	460b      	mov	r3, r1
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	333c      	adds	r3, #60	; 0x3c
 8006f3e:	3304      	adds	r3, #4
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	4a26      	ldr	r2, [pc, #152]	; (8006fe0 <USB_EP0_OutStart+0xb8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d90a      	bls.n	8006f62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f5c:	d101      	bne.n	8006f62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e037      	b.n	8006fd2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f68:	461a      	mov	r2, r3
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f90:	f043 0318 	orr.w	r3, r3, #24
 8006f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006fa8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006faa:	7afb      	ldrb	r3, [r7, #11]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d10f      	bne.n	8006fd0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006fce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	4f54300a 	.word	0x4f54300a

08006fe4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a13      	ldr	r2, [pc, #76]	; (8007048 <USB_CoreReset+0x64>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d901      	bls.n	8007002 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e01b      	b.n	800703a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	daf2      	bge.n	8006ff0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f043 0201 	orr.w	r2, r3, #1
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3301      	adds	r3, #1
 800701e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4a09      	ldr	r2, [pc, #36]	; (8007048 <USB_CoreReset+0x64>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d901      	bls.n	800702c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e006      	b.n	800703a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b01      	cmp	r3, #1
 8007036:	d0f0      	beq.n	800701a <USB_CoreReset+0x36>

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	00030d40 	.word	0x00030d40

0800704c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007058:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800705c:	f002 fd34 	bl	8009ac8 <USBD_static_malloc>
 8007060:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d109      	bne.n	800707c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	32b0      	adds	r2, #176	; 0xb0
 8007072:	2100      	movs	r1, #0
 8007074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007078:	2302      	movs	r3, #2
 800707a:	e0d4      	b.n	8007226 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800707c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007080:	2100      	movs	r1, #0
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f002 fd8e 	bl	8009ba4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	32b0      	adds	r2, #176	; 0xb0
 8007092:	68f9      	ldr	r1, [r7, #12]
 8007094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	32b0      	adds	r2, #176	; 0xb0
 80070a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7c1b      	ldrb	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d138      	bne.n	8007126 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80070b4:	4b5e      	ldr	r3, [pc, #376]	; (8007230 <USBD_CDC_Init+0x1e4>)
 80070b6:	7819      	ldrb	r1, [r3, #0]
 80070b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070bc:	2202      	movs	r2, #2
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f002 fb91 	bl	80097e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80070c4:	4b5a      	ldr	r3, [pc, #360]	; (8007230 <USBD_CDC_Init+0x1e4>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	f003 020f 	and.w	r2, r3, #15
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	3324      	adds	r3, #36	; 0x24
 80070da:	2201      	movs	r2, #1
 80070dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80070de:	4b55      	ldr	r3, [pc, #340]	; (8007234 <USBD_CDC_Init+0x1e8>)
 80070e0:	7819      	ldrb	r1, [r3, #0]
 80070e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070e6:	2202      	movs	r2, #2
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f002 fb7c 	bl	80097e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80070ee:	4b51      	ldr	r3, [pc, #324]	; (8007234 <USBD_CDC_Init+0x1e8>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	f003 020f 	and.w	r2, r3, #15
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	440b      	add	r3, r1
 8007102:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007106:	2201      	movs	r2, #1
 8007108:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800710a:	4b4b      	ldr	r3, [pc, #300]	; (8007238 <USBD_CDC_Init+0x1ec>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	f003 020f 	and.w	r2, r3, #15
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	3326      	adds	r3, #38	; 0x26
 8007120:	2210      	movs	r2, #16
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	e035      	b.n	8007192 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007126:	4b42      	ldr	r3, [pc, #264]	; (8007230 <USBD_CDC_Init+0x1e4>)
 8007128:	7819      	ldrb	r1, [r3, #0]
 800712a:	2340      	movs	r3, #64	; 0x40
 800712c:	2202      	movs	r2, #2
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f002 fb59 	bl	80097e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007134:	4b3e      	ldr	r3, [pc, #248]	; (8007230 <USBD_CDC_Init+0x1e4>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f003 020f 	and.w	r2, r3, #15
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	3324      	adds	r3, #36	; 0x24
 800714a:	2201      	movs	r2, #1
 800714c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800714e:	4b39      	ldr	r3, [pc, #228]	; (8007234 <USBD_CDC_Init+0x1e8>)
 8007150:	7819      	ldrb	r1, [r3, #0]
 8007152:	2340      	movs	r3, #64	; 0x40
 8007154:	2202      	movs	r2, #2
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f002 fb45 	bl	80097e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800715c:	4b35      	ldr	r3, [pc, #212]	; (8007234 <USBD_CDC_Init+0x1e8>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	f003 020f 	and.w	r2, r3, #15
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	4613      	mov	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	440b      	add	r3, r1
 8007170:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007174:	2201      	movs	r2, #1
 8007176:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007178:	4b2f      	ldr	r3, [pc, #188]	; (8007238 <USBD_CDC_Init+0x1ec>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	f003 020f 	and.w	r2, r3, #15
 8007180:	6879      	ldr	r1, [r7, #4]
 8007182:	4613      	mov	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	440b      	add	r3, r1
 800718c:	3326      	adds	r3, #38	; 0x26
 800718e:	2210      	movs	r2, #16
 8007190:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007192:	4b29      	ldr	r3, [pc, #164]	; (8007238 <USBD_CDC_Init+0x1ec>)
 8007194:	7819      	ldrb	r1, [r3, #0]
 8007196:	2308      	movs	r3, #8
 8007198:	2203      	movs	r2, #3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f002 fb23 	bl	80097e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80071a0:	4b25      	ldr	r3, [pc, #148]	; (8007238 <USBD_CDC_Init+0x1ec>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f003 020f 	and.w	r2, r3, #15
 80071a8:	6879      	ldr	r1, [r7, #4]
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	440b      	add	r3, r1
 80071b4:	3324      	adds	r3, #36	; 0x24
 80071b6:	2201      	movs	r2, #1
 80071b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	33b0      	adds	r3, #176	; 0xb0
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80071f0:	2302      	movs	r3, #2
 80071f2:	e018      	b.n	8007226 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7c1b      	ldrb	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071fc:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <USBD_CDC_Init+0x1e8>)
 80071fe:	7819      	ldrb	r1, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f002 fbda 	bl	80099c4 <USBD_LL_PrepareReceive>
 8007210:	e008      	b.n	8007224 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007212:	4b08      	ldr	r3, [pc, #32]	; (8007234 <USBD_CDC_Init+0x1e8>)
 8007214:	7819      	ldrb	r1, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800721c:	2340      	movs	r3, #64	; 0x40
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f002 fbd0 	bl	80099c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20000093 	.word	0x20000093
 8007234:	20000094 	.word	0x20000094
 8007238:	20000095 	.word	0x20000095

0800723c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007248:	4b3a      	ldr	r3, [pc, #232]	; (8007334 <USBD_CDC_DeInit+0xf8>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f002 faef 	bl	8009832 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007254:	4b37      	ldr	r3, [pc, #220]	; (8007334 <USBD_CDC_DeInit+0xf8>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	f003 020f 	and.w	r2, r3, #15
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	3324      	adds	r3, #36	; 0x24
 800726a:	2200      	movs	r2, #0
 800726c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800726e:	4b32      	ldr	r3, [pc, #200]	; (8007338 <USBD_CDC_DeInit+0xfc>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f002 fadc 	bl	8009832 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800727a:	4b2f      	ldr	r3, [pc, #188]	; (8007338 <USBD_CDC_DeInit+0xfc>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	f003 020f 	and.w	r2, r3, #15
 8007282:	6879      	ldr	r1, [r7, #4]
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	440b      	add	r3, r1
 800728e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007292:	2200      	movs	r2, #0
 8007294:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007296:	4b29      	ldr	r3, [pc, #164]	; (800733c <USBD_CDC_DeInit+0x100>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f002 fac8 	bl	8009832 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80072a2:	4b26      	ldr	r3, [pc, #152]	; (800733c <USBD_CDC_DeInit+0x100>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f003 020f 	and.w	r2, r3, #15
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	440b      	add	r3, r1
 80072b6:	3324      	adds	r3, #36	; 0x24
 80072b8:	2200      	movs	r2, #0
 80072ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80072bc:	4b1f      	ldr	r3, [pc, #124]	; (800733c <USBD_CDC_DeInit+0x100>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	f003 020f 	and.w	r2, r3, #15
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	3326      	adds	r3, #38	; 0x26
 80072d2:	2200      	movs	r2, #0
 80072d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	32b0      	adds	r2, #176	; 0xb0
 80072e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01f      	beq.n	8007328 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	33b0      	adds	r3, #176	; 0xb0
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	32b0      	adds	r2, #176	; 0xb0
 8007306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730a:	4618      	mov	r0, r3
 800730c:	f002 fbea 	bl	8009ae4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	32b0      	adds	r2, #176	; 0xb0
 800731a:	2100      	movs	r1, #0
 800731c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000093 	.word	0x20000093
 8007338:	20000094 	.word	0x20000094
 800733c:	20000095 	.word	0x20000095

08007340 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	32b0      	adds	r2, #176	; 0xb0
 8007354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007358:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800736c:	2303      	movs	r3, #3
 800736e:	e0bf      	b.n	80074f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007378:	2b00      	cmp	r3, #0
 800737a:	d050      	beq.n	800741e <USBD_CDC_Setup+0xde>
 800737c:	2b20      	cmp	r3, #32
 800737e:	f040 80af 	bne.w	80074e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	88db      	ldrh	r3, [r3, #6]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d03a      	beq.n	8007400 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b25b      	sxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	da1b      	bge.n	80073cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	33b0      	adds	r3, #176	; 0xb0
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80073aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	88d2      	ldrh	r2, [r2, #6]
 80073b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	88db      	ldrh	r3, [r3, #6]
 80073b6:	2b07      	cmp	r3, #7
 80073b8:	bf28      	it	cs
 80073ba:	2307      	movcs	r3, #7
 80073bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	89fa      	ldrh	r2, [r7, #14]
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 fdb3 	bl	8008f30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80073ca:	e090      	b.n	80074ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	785a      	ldrb	r2, [r3, #1]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	88db      	ldrh	r3, [r3, #6]
 80073da:	2b3f      	cmp	r3, #63	; 0x3f
 80073dc:	d803      	bhi.n	80073e6 <USBD_CDC_Setup+0xa6>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	88db      	ldrh	r3, [r3, #6]
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	e000      	b.n	80073e8 <USBD_CDC_Setup+0xa8>
 80073e6:	2240      	movs	r2, #64	; 0x40
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80073ee:	6939      	ldr	r1, [r7, #16]
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80073f6:	461a      	mov	r2, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 fdc5 	bl	8008f88 <USBD_CtlPrepareRx>
      break;
 80073fe:	e076      	b.n	80074ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	33b0      	adds	r3, #176	; 0xb0
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	7850      	ldrb	r0, [r2, #1]
 8007416:	2200      	movs	r2, #0
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	4798      	blx	r3
      break;
 800741c:	e067      	b.n	80074ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	785b      	ldrb	r3, [r3, #1]
 8007422:	2b0b      	cmp	r3, #11
 8007424:	d851      	bhi.n	80074ca <USBD_CDC_Setup+0x18a>
 8007426:	a201      	add	r2, pc, #4	; (adr r2, 800742c <USBD_CDC_Setup+0xec>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	0800745d 	.word	0x0800745d
 8007430:	080074d9 	.word	0x080074d9
 8007434:	080074cb 	.word	0x080074cb
 8007438:	080074cb 	.word	0x080074cb
 800743c:	080074cb 	.word	0x080074cb
 8007440:	080074cb 	.word	0x080074cb
 8007444:	080074cb 	.word	0x080074cb
 8007448:	080074cb 	.word	0x080074cb
 800744c:	080074cb 	.word	0x080074cb
 8007450:	080074cb 	.word	0x080074cb
 8007454:	08007487 	.word	0x08007487
 8007458:	080074b1 	.word	0x080074b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b03      	cmp	r3, #3
 8007466:	d107      	bne.n	8007478 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007468:	f107 030a 	add.w	r3, r7, #10
 800746c:	2202      	movs	r2, #2
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 fd5d 	bl	8008f30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007476:	e032      	b.n	80074de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 fce7 	bl	8008e4e <USBD_CtlError>
            ret = USBD_FAIL;
 8007480:	2303      	movs	r3, #3
 8007482:	75fb      	strb	r3, [r7, #23]
          break;
 8007484:	e02b      	b.n	80074de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b03      	cmp	r3, #3
 8007490:	d107      	bne.n	80074a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007492:	f107 030d 	add.w	r3, r7, #13
 8007496:	2201      	movs	r2, #1
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f001 fd48 	bl	8008f30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074a0:	e01d      	b.n	80074de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 fcd2 	bl	8008e4e <USBD_CtlError>
            ret = USBD_FAIL;
 80074aa:	2303      	movs	r3, #3
 80074ac:	75fb      	strb	r3, [r7, #23]
          break;
 80074ae:	e016      	b.n	80074de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d00f      	beq.n	80074dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 fcc5 	bl	8008e4e <USBD_CtlError>
            ret = USBD_FAIL;
 80074c4:	2303      	movs	r3, #3
 80074c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80074c8:	e008      	b.n	80074dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 fcbe 	bl	8008e4e <USBD_CtlError>
          ret = USBD_FAIL;
 80074d2:	2303      	movs	r3, #3
 80074d4:	75fb      	strb	r3, [r7, #23]
          break;
 80074d6:	e002      	b.n	80074de <USBD_CDC_Setup+0x19e>
          break;
 80074d8:	bf00      	nop
 80074da:	e008      	b.n	80074ee <USBD_CDC_Setup+0x1ae>
          break;
 80074dc:	bf00      	nop
      }
      break;
 80074de:	e006      	b.n	80074ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fcb3 	bl	8008e4e <USBD_CtlError>
      ret = USBD_FAIL;
 80074e8:	2303      	movs	r3, #3
 80074ea:	75fb      	strb	r3, [r7, #23]
      break;
 80074ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800750a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	32b0      	adds	r2, #176	; 0xb0
 8007516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800751e:	2303      	movs	r3, #3
 8007520:	e065      	b.n	80075ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	32b0      	adds	r2, #176	; 0xb0
 800752c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007530:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	f003 020f 	and.w	r2, r3, #15
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	3318      	adds	r3, #24
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d02f      	beq.n	80075ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	f003 020f 	and.w	r2, r3, #15
 8007552:	6879      	ldr	r1, [r7, #4]
 8007554:	4613      	mov	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	440b      	add	r3, r1
 800755e:	3318      	adds	r3, #24
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	78fb      	ldrb	r3, [r7, #3]
 8007564:	f003 010f 	and.w	r1, r3, #15
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	460b      	mov	r3, r1
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	440b      	add	r3, r1
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4403      	add	r3, r0
 8007574:	3348      	adds	r3, #72	; 0x48
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	fbb2 f1f3 	udiv	r1, r2, r3
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007582:	2b00      	cmp	r3, #0
 8007584:	d112      	bne.n	80075ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007586:	78fb      	ldrb	r3, [r7, #3]
 8007588:	f003 020f 	and.w	r2, r3, #15
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	440b      	add	r3, r1
 8007598:	3318      	adds	r3, #24
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800759e:	78f9      	ldrb	r1, [r7, #3]
 80075a0:	2300      	movs	r3, #0
 80075a2:	2200      	movs	r2, #0
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f002 f9ec 	bl	8009982 <USBD_LL_Transmit>
 80075aa:	e01f      	b.n	80075ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	33b0      	adds	r3, #176	; 0xb0
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d010      	beq.n	80075ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	33b0      	adds	r3, #176	; 0xb0
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80075e8:	78fa      	ldrb	r2, [r7, #3]
 80075ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	460b      	mov	r3, r1
 8007600:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	32b0      	adds	r2, #176	; 0xb0
 800760c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007610:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	32b0      	adds	r2, #176	; 0xb0
 800761c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007624:	2303      	movs	r3, #3
 8007626:	e01a      	b.n	800765e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007628:	78fb      	ldrb	r3, [r7, #3]
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f002 f9ea 	bl	8009a06 <USBD_LL_GetRxDataSize>
 8007632:	4602      	mov	r2, r0
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	33b0      	adds	r3, #176	; 0xb0
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007658:	4611      	mov	r1, r2
 800765a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	32b0      	adds	r2, #176	; 0xb0
 8007678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	e025      	b.n	80076d4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	33b0      	adds	r3, #176	; 0xb0
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01a      	beq.n	80076d2 <USBD_CDC_EP0_RxReady+0x6c>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076a2:	2bff      	cmp	r3, #255	; 0xff
 80076a4:	d015      	beq.n	80076d2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	33b0      	adds	r3, #176	; 0xb0
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80076be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80076c6:	b292      	uxth	r2, r2
 80076c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	22ff      	movs	r2, #255	; 0xff
 80076ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076e4:	2182      	movs	r1, #130	; 0x82
 80076e6:	4818      	ldr	r0, [pc, #96]	; (8007748 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076e8:	f000 fd4f 	bl	800818a <USBD_GetEpDesc>
 80076ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076ee:	2101      	movs	r1, #1
 80076f0:	4815      	ldr	r0, [pc, #84]	; (8007748 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076f2:	f000 fd4a 	bl	800818a <USBD_GetEpDesc>
 80076f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076f8:	2181      	movs	r1, #129	; 0x81
 80076fa:	4813      	ldr	r0, [pc, #76]	; (8007748 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076fc:	f000 fd45 	bl	800818a <USBD_GetEpDesc>
 8007700:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2210      	movs	r2, #16
 800770c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d006      	beq.n	8007722 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2200      	movs	r2, #0
 8007718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800771c:	711a      	strb	r2, [r3, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d006      	beq.n	8007736 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007730:	711a      	strb	r2, [r3, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2243      	movs	r2, #67	; 0x43
 800773a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800773c:	4b02      	ldr	r3, [pc, #8]	; (8007748 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800773e:	4618      	mov	r0, r3
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000050 	.word	0x20000050

0800774c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007754:	2182      	movs	r1, #130	; 0x82
 8007756:	4818      	ldr	r0, [pc, #96]	; (80077b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007758:	f000 fd17 	bl	800818a <USBD_GetEpDesc>
 800775c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800775e:	2101      	movs	r1, #1
 8007760:	4815      	ldr	r0, [pc, #84]	; (80077b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007762:	f000 fd12 	bl	800818a <USBD_GetEpDesc>
 8007766:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007768:	2181      	movs	r1, #129	; 0x81
 800776a:	4813      	ldr	r0, [pc, #76]	; (80077b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800776c:	f000 fd0d 	bl	800818a <USBD_GetEpDesc>
 8007770:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2210      	movs	r2, #16
 800777c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d006      	beq.n	8007792 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	2200      	movs	r2, #0
 8007788:	711a      	strb	r2, [r3, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f042 0202 	orr.w	r2, r2, #2
 8007790:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d006      	beq.n	80077a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	711a      	strb	r2, [r3, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f042 0202 	orr.w	r2, r2, #2
 80077a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2243      	movs	r2, #67	; 0x43
 80077aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80077ac:	4b02      	ldr	r3, [pc, #8]	; (80077b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20000050 	.word	0x20000050

080077bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077c4:	2182      	movs	r1, #130	; 0x82
 80077c6:	4818      	ldr	r0, [pc, #96]	; (8007828 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077c8:	f000 fcdf 	bl	800818a <USBD_GetEpDesc>
 80077cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077ce:	2101      	movs	r1, #1
 80077d0:	4815      	ldr	r0, [pc, #84]	; (8007828 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077d2:	f000 fcda 	bl	800818a <USBD_GetEpDesc>
 80077d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077d8:	2181      	movs	r1, #129	; 0x81
 80077da:	4813      	ldr	r0, [pc, #76]	; (8007828 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077dc:	f000 fcd5 	bl	800818a <USBD_GetEpDesc>
 80077e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2210      	movs	r2, #16
 80077ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d006      	beq.n	8007802 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077fc:	711a      	strb	r2, [r3, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d006      	beq.n	8007816 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007810:	711a      	strb	r2, [r3, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2243      	movs	r2, #67	; 0x43
 800781a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800781c:	4b02      	ldr	r3, [pc, #8]	; (8007828 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000050 	.word	0x20000050

0800782c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	220a      	movs	r2, #10
 8007838:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800783a:	4b03      	ldr	r3, [pc, #12]	; (8007848 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	2000000c 	.word	0x2000000c

0800784c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800785c:	2303      	movs	r3, #3
 800785e:	e009      	b.n	8007874 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	33b0      	adds	r3, #176	; 0xb0
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	32b0      	adds	r2, #176	; 0xb0
 8007896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e008      	b.n	80078b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	371c      	adds	r7, #28
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	32b0      	adds	r2, #176	; 0xb0
 80078d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e004      	b.n	80078f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
	...

08007900 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	32b0      	adds	r2, #176	; 0xb0
 8007912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007916:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007918:	2301      	movs	r3, #1
 800791a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	32b0      	adds	r2, #176	; 0xb0
 8007926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800792e:	2303      	movs	r3, #3
 8007930:	e025      	b.n	800797e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11f      	bne.n	800797c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2201      	movs	r2, #1
 8007940:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007944:	4b10      	ldr	r3, [pc, #64]	; (8007988 <USBD_CDC_TransmitPacket+0x88>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	f003 020f 	and.w	r2, r3, #15
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4613      	mov	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4403      	add	r3, r0
 800795e:	3318      	adds	r3, #24
 8007960:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007962:	4b09      	ldr	r3, [pc, #36]	; (8007988 <USBD_CDC_TransmitPacket+0x88>)
 8007964:	7819      	ldrb	r1, [r3, #0]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f002 f805 	bl	8009982 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800797c:	7bfb      	ldrb	r3, [r7, #15]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000093 	.word	0x20000093

0800798c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	32b0      	adds	r2, #176	; 0xb0
 800799e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	32b0      	adds	r2, #176	; 0xb0
 80079ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e018      	b.n	80079ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7c1b      	ldrb	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079c2:	4b0c      	ldr	r3, [pc, #48]	; (80079f4 <USBD_CDC_ReceivePacket+0x68>)
 80079c4:	7819      	ldrb	r1, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 fff7 	bl	80099c4 <USBD_LL_PrepareReceive>
 80079d6:	e008      	b.n	80079ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079d8:	4b06      	ldr	r3, [pc, #24]	; (80079f4 <USBD_CDC_ReceivePacket+0x68>)
 80079da:	7819      	ldrb	r1, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079e2:	2340      	movs	r3, #64	; 0x40
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 ffed 	bl	80099c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20000094 	.word	0x20000094

080079f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	4613      	mov	r3, r2
 8007a04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e01f      	b.n	8007a50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	79fa      	ldrb	r2, [r7, #7]
 8007a42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f001 fe67 	bl	8009718 <USBD_LL_Init>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e025      	b.n	8007abc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	32ae      	adds	r2, #174	; 0xae
 8007a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00f      	beq.n	8007aac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	32ae      	adds	r2, #174	; 0xae
 8007a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	f107 020e 	add.w	r2, r7, #14
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4798      	blx	r3
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 fe6f 	bl	80097b0 <USBD_LL_Start>
 8007ad2:	4603      	mov	r3, r0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ae4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d009      	beq.n	8007b20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	78fa      	ldrb	r2, [r7, #3]
 8007b16:	4611      	mov	r1, r2
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	4798      	blx	r3
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	78fa      	ldrb	r2, [r7, #3]
 8007b44:	4611      	mov	r1, r2
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	4798      	blx	r3
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b50:	2303      	movs	r3, #3
 8007b52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 f932 	bl	8008dda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007b84:	461a      	mov	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b92:	f003 031f 	and.w	r3, r3, #31
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d01a      	beq.n	8007bd0 <USBD_LL_SetupStage+0x72>
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d822      	bhi.n	8007be4 <USBD_LL_SetupStage+0x86>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <USBD_LL_SetupStage+0x4a>
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d00a      	beq.n	8007bbc <USBD_LL_SetupStage+0x5e>
 8007ba6:	e01d      	b.n	8007be4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fb5f 	bl	8008274 <USBD_StdDevReq>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8007bba:	e020      	b.n	8007bfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fbc7 	bl	8008358 <USBD_StdItfReq>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8007bce:	e016      	b.n	8007bfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fc29 	bl	8008430 <USBD_StdEPReq>
 8007bde:	4603      	mov	r3, r0
 8007be0:	73fb      	strb	r3, [r7, #15]
      break;
 8007be2:	e00c      	b.n	8007bfe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 fe3c 	bl	8009870 <USBD_LL_StallEP>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8007bfc:	bf00      	nop
  }

  return ret;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	460b      	mov	r3, r1
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d16e      	bne.n	8007cfe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	f040 8098 	bne.w	8007d64 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d913      	bls.n	8007c68 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	1ad2      	subs	r2, r2, r3
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	4293      	cmp	r3, r2
 8007c58:	bf28      	it	cs
 8007c5a:	4613      	movcs	r3, r2
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f001 f9ae 	bl	8008fc2 <USBD_CtlContinueRx>
 8007c66:	e07d      	b.n	8007d64 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c6e:	f003 031f 	and.w	r3, r3, #31
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d014      	beq.n	8007ca0 <USBD_LL_DataOutStage+0x98>
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d81d      	bhi.n	8007cb6 <USBD_LL_DataOutStage+0xae>
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <USBD_LL_DataOutStage+0x7c>
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d003      	beq.n	8007c8a <USBD_LL_DataOutStage+0x82>
 8007c82:	e018      	b.n	8007cb6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	75bb      	strb	r3, [r7, #22]
            break;
 8007c88:	e018      	b.n	8007cbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	4619      	mov	r1, r3
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 fa5e 	bl	8008156 <USBD_CoreFindIF>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	75bb      	strb	r3, [r7, #22]
            break;
 8007c9e:	e00d      	b.n	8007cbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	4619      	mov	r1, r3
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fa60 	bl	8008170 <USBD_CoreFindEP>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75bb      	strb	r3, [r7, #22]
            break;
 8007cb4:	e002      	b.n	8007cbc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	75bb      	strb	r3, [r7, #22]
            break;
 8007cba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007cbc:	7dbb      	ldrb	r3, [r7, #22]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d119      	bne.n	8007cf6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d113      	bne.n	8007cf6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007cce:	7dba      	ldrb	r2, [r7, #22]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	32ae      	adds	r2, #174	; 0xae
 8007cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00b      	beq.n	8007cf6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007cde:	7dba      	ldrb	r2, [r7, #22]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ce6:	7dba      	ldrb	r2, [r7, #22]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	32ae      	adds	r2, #174	; 0xae
 8007cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f001 f974 	bl	8008fe4 <USBD_CtlSendStatus>
 8007cfc:	e032      	b.n	8007d64 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007cfe:	7afb      	ldrb	r3, [r7, #11]
 8007d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	4619      	mov	r1, r3
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fa31 	bl	8008170 <USBD_CoreFindEP>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d12:	7dbb      	ldrb	r3, [r7, #22]
 8007d14:	2bff      	cmp	r3, #255	; 0xff
 8007d16:	d025      	beq.n	8007d64 <USBD_LL_DataOutStage+0x15c>
 8007d18:	7dbb      	ldrb	r3, [r7, #22]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d122      	bne.n	8007d64 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d117      	bne.n	8007d5a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d2a:	7dba      	ldrb	r2, [r7, #22]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	32ae      	adds	r2, #174	; 0xae
 8007d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00f      	beq.n	8007d5a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d3a:	7dba      	ldrb	r2, [r7, #22]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d42:	7dba      	ldrb	r2, [r7, #22]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	32ae      	adds	r2, #174	; 0xae
 8007d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	7afa      	ldrb	r2, [r7, #11]
 8007d50:	4611      	mov	r1, r2
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	4798      	blx	r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
 8007d62:	e000      	b.n	8007d66 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b086      	sub	sp, #24
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	460b      	mov	r3, r1
 8007d78:	607a      	str	r2, [r7, #4]
 8007d7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007d7c:	7afb      	ldrb	r3, [r7, #11]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d16f      	bne.n	8007e62 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3314      	adds	r3, #20
 8007d86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d15a      	bne.n	8007e48 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d914      	bls.n	8007dc8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	1ad2      	subs	r2, r2, r3
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	461a      	mov	r2, r3
 8007db2:	6879      	ldr	r1, [r7, #4]
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f001 f8d6 	bl	8008f66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dba:	2300      	movs	r3, #0
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f001 fdff 	bl	80099c4 <USBD_LL_PrepareReceive>
 8007dc6:	e03f      	b.n	8007e48 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d11c      	bne.n	8007e0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d316      	bcc.n	8007e0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d20f      	bcs.n	8007e0e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007dee:	2200      	movs	r2, #0
 8007df0:	2100      	movs	r1, #0
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f001 f8b7 	bl	8008f66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e00:	2300      	movs	r3, #0
 8007e02:	2200      	movs	r2, #0
 8007e04:	2100      	movs	r1, #0
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f001 fddc 	bl	80099c4 <USBD_LL_PrepareReceive>
 8007e0c:	e01c      	b.n	8007e48 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d10f      	bne.n	8007e3a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e3a:	2180      	movs	r1, #128	; 0x80
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f001 fd17 	bl	8009870 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f001 f8e1 	bl	800900a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d03a      	beq.n	8007ec8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff fe42 	bl	8007adc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e60:	e032      	b.n	8007ec8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007e62:	7afb      	ldrb	r3, [r7, #11]
 8007e64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 f97f 	bl	8008170 <USBD_CoreFindEP>
 8007e72:	4603      	mov	r3, r0
 8007e74:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	2bff      	cmp	r3, #255	; 0xff
 8007e7a:	d025      	beq.n	8007ec8 <USBD_LL_DataInStage+0x15a>
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d122      	bne.n	8007ec8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d11c      	bne.n	8007ec8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007e8e:	7dfa      	ldrb	r2, [r7, #23]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	32ae      	adds	r2, #174	; 0xae
 8007e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d014      	beq.n	8007ec8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007e9e:	7dfa      	ldrb	r2, [r7, #23]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007ea6:	7dfa      	ldrb	r2, [r7, #23]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	32ae      	adds	r2, #174	; 0xae
 8007eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	7afa      	ldrb	r2, [r7, #11]
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	4798      	blx	r3
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007ebe:	7dbb      	ldrb	r3, [r7, #22]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007ec4:	7dbb      	ldrb	r3, [r7, #22]
 8007ec6:	e000      	b.n	8007eca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d014      	beq.n	8007f38 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00e      	beq.n	8007f38 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	6852      	ldr	r2, [r2, #4]
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	4611      	mov	r1, r2
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f34:	2303      	movs	r3, #3
 8007f36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f38:	2340      	movs	r3, #64	; 0x40
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f001 fc51 	bl	80097e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2240      	movs	r2, #64	; 0x40
 8007f50:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f54:	2340      	movs	r3, #64	; 0x40
 8007f56:	2200      	movs	r2, #0
 8007f58:	2180      	movs	r1, #128	; 0x80
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 fc43 	bl	80097e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2240      	movs	r2, #64	; 0x40
 8007f6a:	621a      	str	r2, [r3, #32]

  return ret;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	460b      	mov	r3, r1
 8007f80:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2204      	movs	r2, #4
 8007fb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	d106      	bne.n	8007fe4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b03      	cmp	r3, #3
 8008004:	d110      	bne.n	8008028 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00b      	beq.n	8008028 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	460b      	mov	r3, r1
 800803c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	32ae      	adds	r2, #174	; 0xae
 8008048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008050:	2303      	movs	r3, #3
 8008052:	e01c      	b.n	800808e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b03      	cmp	r3, #3
 800805e:	d115      	bne.n	800808c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	32ae      	adds	r2, #174	; 0xae
 800806a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00b      	beq.n	800808c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	32ae      	adds	r2, #174	; 0xae
 800807e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	78fa      	ldrb	r2, [r7, #3]
 8008086:	4611      	mov	r1, r2
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b082      	sub	sp, #8
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	32ae      	adds	r2, #174	; 0xae
 80080ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e01c      	b.n	80080f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d115      	bne.n	80080f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	32ae      	adds	r2, #174	; 0xae
 80080ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00b      	beq.n	80080f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	32ae      	adds	r2, #174	; 0xae
 80080e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	78fa      	ldrb	r2, [r7, #3]
 80080ea:	4611      	mov	r1, r2
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00e      	beq.n	800814c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	6852      	ldr	r2, [r2, #4]
 800813a:	b2d2      	uxtb	r2, r2
 800813c:	4611      	mov	r1, r2
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008148:	2303      	movs	r3, #3
 800814a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800814c:	7bfb      	ldrb	r3, [r7, #15]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	460b      	mov	r3, r1
 8008160:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008162:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800817c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800817e:	4618      	mov	r0, r3
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b086      	sub	sp, #24
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	885b      	ldrh	r3, [r3, #2]
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d920      	bls.n	80081f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80081ba:	e013      	b.n	80081e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80081bc:	f107 030a 	add.w	r3, r7, #10
 80081c0:	4619      	mov	r1, r3
 80081c2:	6978      	ldr	r0, [r7, #20]
 80081c4:	f000 f81b 	bl	80081fe <USBD_GetNextDesc>
 80081c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	785b      	ldrb	r3, [r3, #1]
 80081ce:	2b05      	cmp	r3, #5
 80081d0:	d108      	bne.n	80081e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	789b      	ldrb	r3, [r3, #2]
 80081da:	78fa      	ldrb	r2, [r7, #3]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d008      	beq.n	80081f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80081e0:	2300      	movs	r3, #0
 80081e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	885b      	ldrh	r3, [r3, #2]
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	897b      	ldrh	r3, [r7, #10]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d8e5      	bhi.n	80081bc <USBD_GetEpDesc+0x32>
 80081f0:	e000      	b.n	80081f4 <USBD_GetEpDesc+0x6a>
          break;
 80081f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80081f4:	693b      	ldr	r3, [r7, #16]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80081fe:	b480      	push	{r7}
 8008200:	b085      	sub	sp, #20
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	881a      	ldrh	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	b29b      	uxth	r3, r3
 8008216:	4413      	add	r3, r2
 8008218:	b29a      	uxth	r2, r3
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4413      	add	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800822a:	68fb      	ldr	r3, [r7, #12]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	3301      	adds	r3, #1
 800824e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008256:	8a3b      	ldrh	r3, [r7, #16]
 8008258:	021b      	lsls	r3, r3, #8
 800825a:	b21a      	sxth	r2, r3
 800825c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008260:	4313      	orrs	r3, r2
 8008262:	b21b      	sxth	r3, r3
 8008264:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008266:	89fb      	ldrh	r3, [r7, #14]
}
 8008268:	4618      	mov	r0, r3
 800826a:	371c      	adds	r7, #28
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800828a:	2b40      	cmp	r3, #64	; 0x40
 800828c:	d005      	beq.n	800829a <USBD_StdDevReq+0x26>
 800828e:	2b40      	cmp	r3, #64	; 0x40
 8008290:	d857      	bhi.n	8008342 <USBD_StdDevReq+0xce>
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00f      	beq.n	80082b6 <USBD_StdDevReq+0x42>
 8008296:	2b20      	cmp	r3, #32
 8008298:	d153      	bne.n	8008342 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	32ae      	adds	r2, #174	; 0xae
 80082a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	4798      	blx	r3
 80082b0:	4603      	mov	r3, r0
 80082b2:	73fb      	strb	r3, [r7, #15]
      break;
 80082b4:	e04a      	b.n	800834c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2b09      	cmp	r3, #9
 80082bc:	d83b      	bhi.n	8008336 <USBD_StdDevReq+0xc2>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <USBD_StdDevReq+0x50>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	08008319 	.word	0x08008319
 80082c8:	0800832d 	.word	0x0800832d
 80082cc:	08008337 	.word	0x08008337
 80082d0:	08008323 	.word	0x08008323
 80082d4:	08008337 	.word	0x08008337
 80082d8:	080082f7 	.word	0x080082f7
 80082dc:	080082ed 	.word	0x080082ed
 80082e0:	08008337 	.word	0x08008337
 80082e4:	0800830f 	.word	0x0800830f
 80082e8:	08008301 	.word	0x08008301
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa3c 	bl	800876c <USBD_GetDescriptor>
          break;
 80082f4:	e024      	b.n	8008340 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fbcb 	bl	8008a94 <USBD_SetAddress>
          break;
 80082fe:	e01f      	b.n	8008340 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fc0a 	bl	8008b1c <USBD_SetConfig>
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]
          break;
 800830c:	e018      	b.n	8008340 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fcad 	bl	8008c70 <USBD_GetConfig>
          break;
 8008316:	e013      	b.n	8008340 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fcde 	bl	8008cdc <USBD_GetStatus>
          break;
 8008320:	e00e      	b.n	8008340 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fd0d 	bl	8008d44 <USBD_SetFeature>
          break;
 800832a:	e009      	b.n	8008340 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fd31 	bl	8008d96 <USBD_ClrFeature>
          break;
 8008334:	e004      	b.n	8008340 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fd88 	bl	8008e4e <USBD_CtlError>
          break;
 800833e:	bf00      	nop
      }
      break;
 8008340:	e004      	b.n	800834c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fd82 	bl	8008e4e <USBD_CtlError>
      break;
 800834a:	bf00      	nop
  }

  return ret;
 800834c:	7bfb      	ldrb	r3, [r7, #15]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop

08008358 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	d005      	beq.n	800837e <USBD_StdItfReq+0x26>
 8008372:	2b40      	cmp	r3, #64	; 0x40
 8008374:	d852      	bhi.n	800841c <USBD_StdItfReq+0xc4>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <USBD_StdItfReq+0x26>
 800837a:	2b20      	cmp	r3, #32
 800837c:	d14e      	bne.n	800841c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008384:	b2db      	uxtb	r3, r3
 8008386:	3b01      	subs	r3, #1
 8008388:	2b02      	cmp	r3, #2
 800838a:	d840      	bhi.n	800840e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	889b      	ldrh	r3, [r3, #4]
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b01      	cmp	r3, #1
 8008394:	d836      	bhi.n	8008404 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	889b      	ldrh	r3, [r3, #4]
 800839a:	b2db      	uxtb	r3, r3
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7ff fed9 	bl	8008156 <USBD_CoreFindIF>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	2bff      	cmp	r3, #255	; 0xff
 80083ac:	d01d      	beq.n	80083ea <USBD_StdItfReq+0x92>
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d11a      	bne.n	80083ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80083b4:	7bba      	ldrb	r2, [r7, #14]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	32ae      	adds	r2, #174	; 0xae
 80083ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00f      	beq.n	80083e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80083c4:	7bba      	ldrb	r2, [r7, #14]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083cc:	7bba      	ldrb	r2, [r7, #14]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	32ae      	adds	r2, #174	; 0xae
 80083d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	4798      	blx	r3
 80083de:	4603      	mov	r3, r0
 80083e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083e2:	e004      	b.n	80083ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80083e4:	2303      	movs	r3, #3
 80083e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083e8:	e001      	b.n	80083ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80083ea:	2303      	movs	r3, #3
 80083ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	88db      	ldrh	r3, [r3, #6]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d110      	bne.n	8008418 <USBD_StdItfReq+0xc0>
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10d      	bne.n	8008418 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fdf1 	bl	8008fe4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008402:	e009      	b.n	8008418 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fd21 	bl	8008e4e <USBD_CtlError>
          break;
 800840c:	e004      	b.n	8008418 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fd1c 	bl	8008e4e <USBD_CtlError>
          break;
 8008416:	e000      	b.n	800841a <USBD_StdItfReq+0xc2>
          break;
 8008418:	bf00      	nop
      }
      break;
 800841a:	e004      	b.n	8008426 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fd15 	bl	8008e4e <USBD_CtlError>
      break;
 8008424:	bf00      	nop
  }

  return ret;
 8008426:	7bfb      	ldrb	r3, [r7, #15]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	889b      	ldrh	r3, [r3, #4]
 8008442:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800844c:	2b40      	cmp	r3, #64	; 0x40
 800844e:	d007      	beq.n	8008460 <USBD_StdEPReq+0x30>
 8008450:	2b40      	cmp	r3, #64	; 0x40
 8008452:	f200 817f 	bhi.w	8008754 <USBD_StdEPReq+0x324>
 8008456:	2b00      	cmp	r3, #0
 8008458:	d02a      	beq.n	80084b0 <USBD_StdEPReq+0x80>
 800845a:	2b20      	cmp	r3, #32
 800845c:	f040 817a 	bne.w	8008754 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff fe83 	bl	8008170 <USBD_CoreFindEP>
 800846a:	4603      	mov	r3, r0
 800846c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800846e:	7b7b      	ldrb	r3, [r7, #13]
 8008470:	2bff      	cmp	r3, #255	; 0xff
 8008472:	f000 8174 	beq.w	800875e <USBD_StdEPReq+0x32e>
 8008476:	7b7b      	ldrb	r3, [r7, #13]
 8008478:	2b00      	cmp	r3, #0
 800847a:	f040 8170 	bne.w	800875e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800847e:	7b7a      	ldrb	r2, [r7, #13]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008486:	7b7a      	ldrb	r2, [r7, #13]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	32ae      	adds	r2, #174	; 0xae
 800848c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 8163 	beq.w	800875e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008498:	7b7a      	ldrb	r2, [r7, #13]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	32ae      	adds	r2, #174	; 0xae
 800849e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	4798      	blx	r3
 80084aa:	4603      	mov	r3, r0
 80084ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084ae:	e156      	b.n	800875e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	785b      	ldrb	r3, [r3, #1]
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d008      	beq.n	80084ca <USBD_StdEPReq+0x9a>
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	f300 8145 	bgt.w	8008748 <USBD_StdEPReq+0x318>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 809b 	beq.w	80085fa <USBD_StdEPReq+0x1ca>
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d03c      	beq.n	8008542 <USBD_StdEPReq+0x112>
 80084c8:	e13e      	b.n	8008748 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d002      	beq.n	80084dc <USBD_StdEPReq+0xac>
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d016      	beq.n	8008508 <USBD_StdEPReq+0xd8>
 80084da:	e02c      	b.n	8008536 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00d      	beq.n	80084fe <USBD_StdEPReq+0xce>
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	2b80      	cmp	r3, #128	; 0x80
 80084e6:	d00a      	beq.n	80084fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f001 f9bf 	bl	8009870 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084f2:	2180      	movs	r1, #128	; 0x80
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 f9bb 	bl	8009870 <USBD_LL_StallEP>
 80084fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084fc:	e020      	b.n	8008540 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fca4 	bl	8008e4e <USBD_CtlError>
              break;
 8008506:	e01b      	b.n	8008540 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	885b      	ldrh	r3, [r3, #2]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10e      	bne.n	800852e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008510:	7bbb      	ldrb	r3, [r7, #14]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00b      	beq.n	800852e <USBD_StdEPReq+0xfe>
 8008516:	7bbb      	ldrb	r3, [r7, #14]
 8008518:	2b80      	cmp	r3, #128	; 0x80
 800851a:	d008      	beq.n	800852e <USBD_StdEPReq+0xfe>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	88db      	ldrh	r3, [r3, #6]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d104      	bne.n	800852e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008524:	7bbb      	ldrb	r3, [r7, #14]
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 f9a1 	bl	8009870 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fd58 	bl	8008fe4 <USBD_CtlSendStatus>

              break;
 8008534:	e004      	b.n	8008540 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fc88 	bl	8008e4e <USBD_CtlError>
              break;
 800853e:	bf00      	nop
          }
          break;
 8008540:	e107      	b.n	8008752 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b02      	cmp	r3, #2
 800854c:	d002      	beq.n	8008554 <USBD_StdEPReq+0x124>
 800854e:	2b03      	cmp	r3, #3
 8008550:	d016      	beq.n	8008580 <USBD_StdEPReq+0x150>
 8008552:	e04b      	b.n	80085ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00d      	beq.n	8008576 <USBD_StdEPReq+0x146>
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b80      	cmp	r3, #128	; 0x80
 800855e:	d00a      	beq.n	8008576 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 f983 	bl	8009870 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800856a:	2180      	movs	r1, #128	; 0x80
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 f97f 	bl	8009870 <USBD_LL_StallEP>
 8008572:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008574:	e040      	b.n	80085f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fc68 	bl	8008e4e <USBD_CtlError>
              break;
 800857e:	e03b      	b.n	80085f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	885b      	ldrh	r3, [r3, #2]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d136      	bne.n	80085f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800858e:	2b00      	cmp	r3, #0
 8008590:	d004      	beq.n	800859c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 f989 	bl	80098ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fd21 	bl	8008fe4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff fde2 	bl	8008170 <USBD_CoreFindEP>
 80085ac:	4603      	mov	r3, r0
 80085ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085b0:	7b7b      	ldrb	r3, [r7, #13]
 80085b2:	2bff      	cmp	r3, #255	; 0xff
 80085b4:	d01f      	beq.n	80085f6 <USBD_StdEPReq+0x1c6>
 80085b6:	7b7b      	ldrb	r3, [r7, #13]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d11c      	bne.n	80085f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80085bc:	7b7a      	ldrb	r2, [r7, #13]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80085c4:	7b7a      	ldrb	r2, [r7, #13]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	32ae      	adds	r2, #174	; 0xae
 80085ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d010      	beq.n	80085f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085d4:	7b7a      	ldrb	r2, [r7, #13]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	32ae      	adds	r2, #174	; 0xae
 80085da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	4798      	blx	r3
 80085e6:	4603      	mov	r3, r0
 80085e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80085ea:	e004      	b.n	80085f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fc2d 	bl	8008e4e <USBD_CtlError>
              break;
 80085f4:	e000      	b.n	80085f8 <USBD_StdEPReq+0x1c8>
              break;
 80085f6:	bf00      	nop
          }
          break;
 80085f8:	e0ab      	b.n	8008752 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d002      	beq.n	800860c <USBD_StdEPReq+0x1dc>
 8008606:	2b03      	cmp	r3, #3
 8008608:	d032      	beq.n	8008670 <USBD_StdEPReq+0x240>
 800860a:	e097      	b.n	800873c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d007      	beq.n	8008622 <USBD_StdEPReq+0x1f2>
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b80      	cmp	r3, #128	; 0x80
 8008616:	d004      	beq.n	8008622 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fc17 	bl	8008e4e <USBD_CtlError>
                break;
 8008620:	e091      	b.n	8008746 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008622:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008626:	2b00      	cmp	r3, #0
 8008628:	da0b      	bge.n	8008642 <USBD_StdEPReq+0x212>
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	3310      	adds	r3, #16
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	4413      	add	r3, r2
 800863e:	3304      	adds	r3, #4
 8008640:	e00b      	b.n	800865a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	4413      	add	r3, r2
 8008658:	3304      	adds	r3, #4
 800865a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2202      	movs	r2, #2
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fc61 	bl	8008f30 <USBD_CtlSendData>
              break;
 800866e:	e06a      	b.n	8008746 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008674:	2b00      	cmp	r3, #0
 8008676:	da11      	bge.n	800869c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	f003 020f 	and.w	r2, r3, #15
 800867e:	6879      	ldr	r1, [r7, #4]
 8008680:	4613      	mov	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	440b      	add	r3, r1
 800868a:	3324      	adds	r3, #36	; 0x24
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d117      	bne.n	80086c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fbda 	bl	8008e4e <USBD_CtlError>
                  break;
 800869a:	e054      	b.n	8008746 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	f003 020f 	and.w	r2, r3, #15
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d104      	bne.n	80086c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fbc7 	bl	8008e4e <USBD_CtlError>
                  break;
 80086c0:	e041      	b.n	8008746 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	da0b      	bge.n	80086e2 <USBD_StdEPReq+0x2b2>
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086d0:	4613      	mov	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	3310      	adds	r3, #16
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	4413      	add	r3, r2
 80086de:	3304      	adds	r3, #4
 80086e0:	e00b      	b.n	80086fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	4413      	add	r3, r2
 80086f8:	3304      	adds	r3, #4
 80086fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <USBD_StdEPReq+0x2d8>
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b80      	cmp	r3, #128	; 0x80
 8008706:	d103      	bne.n	8008710 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	e00e      	b.n	800872e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 f8e9 	bl	80098ec <USBD_LL_IsStallEP>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d003      	beq.n	8008728 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2201      	movs	r2, #1
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	e002      	b.n	800872e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2202      	movs	r2, #2
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fbfb 	bl	8008f30 <USBD_CtlSendData>
              break;
 800873a:	e004      	b.n	8008746 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fb85 	bl	8008e4e <USBD_CtlError>
              break;
 8008744:	bf00      	nop
          }
          break;
 8008746:	e004      	b.n	8008752 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fb7f 	bl	8008e4e <USBD_CtlError>
          break;
 8008750:	bf00      	nop
      }
      break;
 8008752:	e005      	b.n	8008760 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fb79 	bl	8008e4e <USBD_CtlError>
      break;
 800875c:	e000      	b.n	8008760 <USBD_StdEPReq+0x330>
      break;
 800875e:	bf00      	nop
  }

  return ret;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800877a:	2300      	movs	r3, #0
 800877c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	885b      	ldrh	r3, [r3, #2]
 8008786:	0a1b      	lsrs	r3, r3, #8
 8008788:	b29b      	uxth	r3, r3
 800878a:	3b01      	subs	r3, #1
 800878c:	2b0e      	cmp	r3, #14
 800878e:	f200 8152 	bhi.w	8008a36 <USBD_GetDescriptor+0x2ca>
 8008792:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <USBD_GetDescriptor+0x2c>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	08008809 	.word	0x08008809
 800879c:	08008821 	.word	0x08008821
 80087a0:	08008861 	.word	0x08008861
 80087a4:	08008a37 	.word	0x08008a37
 80087a8:	08008a37 	.word	0x08008a37
 80087ac:	080089d7 	.word	0x080089d7
 80087b0:	08008a03 	.word	0x08008a03
 80087b4:	08008a37 	.word	0x08008a37
 80087b8:	08008a37 	.word	0x08008a37
 80087bc:	08008a37 	.word	0x08008a37
 80087c0:	08008a37 	.word	0x08008a37
 80087c4:	08008a37 	.word	0x08008a37
 80087c8:	08008a37 	.word	0x08008a37
 80087cc:	08008a37 	.word	0x08008a37
 80087d0:	080087d5 	.word	0x080087d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087da:	69db      	ldr	r3, [r3, #28]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00b      	beq.n	80087f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	7c12      	ldrb	r2, [r2, #16]
 80087ec:	f107 0108 	add.w	r1, r7, #8
 80087f0:	4610      	mov	r0, r2
 80087f2:	4798      	blx	r3
 80087f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087f6:	e126      	b.n	8008a46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fb27 	bl	8008e4e <USBD_CtlError>
        err++;
 8008800:	7afb      	ldrb	r3, [r7, #11]
 8008802:	3301      	adds	r3, #1
 8008804:	72fb      	strb	r3, [r7, #11]
      break;
 8008806:	e11e      	b.n	8008a46 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	7c12      	ldrb	r2, [r2, #16]
 8008814:	f107 0108 	add.w	r1, r7, #8
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	60f8      	str	r0, [r7, #12]
      break;
 800881e:	e112      	b.n	8008a46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	7c1b      	ldrb	r3, [r3, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10d      	bne.n	8008844 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008830:	f107 0208 	add.w	r2, r7, #8
 8008834:	4610      	mov	r0, r2
 8008836:	4798      	blx	r3
 8008838:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	2202      	movs	r2, #2
 8008840:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008842:	e100      	b.n	8008a46 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	f107 0208 	add.w	r2, r7, #8
 8008850:	4610      	mov	r0, r2
 8008852:	4798      	blx	r3
 8008854:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3301      	adds	r3, #1
 800885a:	2202      	movs	r2, #2
 800885c:	701a      	strb	r2, [r3, #0]
      break;
 800885e:	e0f2      	b.n	8008a46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	885b      	ldrh	r3, [r3, #2]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b05      	cmp	r3, #5
 8008868:	f200 80ac 	bhi.w	80089c4 <USBD_GetDescriptor+0x258>
 800886c:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <USBD_GetDescriptor+0x108>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	0800888d 	.word	0x0800888d
 8008878:	080088c1 	.word	0x080088c1
 800887c:	080088f5 	.word	0x080088f5
 8008880:	08008929 	.word	0x08008929
 8008884:	0800895d 	.word	0x0800895d
 8008888:	08008991 	.word	0x08008991
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00b      	beq.n	80088b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	7c12      	ldrb	r2, [r2, #16]
 80088a4:	f107 0108 	add.w	r1, r7, #8
 80088a8:	4610      	mov	r0, r2
 80088aa:	4798      	blx	r3
 80088ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ae:	e091      	b.n	80089d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 facb 	bl	8008e4e <USBD_CtlError>
            err++;
 80088b8:	7afb      	ldrb	r3, [r7, #11]
 80088ba:	3301      	adds	r3, #1
 80088bc:	72fb      	strb	r3, [r7, #11]
          break;
 80088be:	e089      	b.n	80089d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00b      	beq.n	80088e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7c12      	ldrb	r2, [r2, #16]
 80088d8:	f107 0108 	add.w	r1, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088e2:	e077      	b.n	80089d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fab1 	bl	8008e4e <USBD_CtlError>
            err++;
 80088ec:	7afb      	ldrb	r3, [r7, #11]
 80088ee:	3301      	adds	r3, #1
 80088f0:	72fb      	strb	r3, [r7, #11]
          break;
 80088f2:	e06f      	b.n	80089d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	7c12      	ldrb	r2, [r2, #16]
 800890c:	f107 0108 	add.w	r1, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008916:	e05d      	b.n	80089d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fa97 	bl	8008e4e <USBD_CtlError>
            err++;
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	3301      	adds	r3, #1
 8008924:	72fb      	strb	r3, [r7, #11]
          break;
 8008926:	e055      	b.n	80089d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00b      	beq.n	800894c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	7c12      	ldrb	r2, [r2, #16]
 8008940:	f107 0108 	add.w	r1, r7, #8
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
 8008948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800894a:	e043      	b.n	80089d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fa7d 	bl	8008e4e <USBD_CtlError>
            err++;
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	3301      	adds	r3, #1
 8008958:	72fb      	strb	r3, [r7, #11]
          break;
 800895a:	e03b      	b.n	80089d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00b      	beq.n	8008980 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	7c12      	ldrb	r2, [r2, #16]
 8008974:	f107 0108 	add.w	r1, r7, #8
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
 800897c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800897e:	e029      	b.n	80089d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fa63 	bl	8008e4e <USBD_CtlError>
            err++;
 8008988:	7afb      	ldrb	r3, [r7, #11]
 800898a:	3301      	adds	r3, #1
 800898c:	72fb      	strb	r3, [r7, #11]
          break;
 800898e:	e021      	b.n	80089d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	7c12      	ldrb	r2, [r2, #16]
 80089a8:	f107 0108 	add.w	r1, r7, #8
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089b2:	e00f      	b.n	80089d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa49 	bl	8008e4e <USBD_CtlError>
            err++;
 80089bc:	7afb      	ldrb	r3, [r7, #11]
 80089be:	3301      	adds	r3, #1
 80089c0:	72fb      	strb	r3, [r7, #11]
          break;
 80089c2:	e007      	b.n	80089d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa41 	bl	8008e4e <USBD_CtlError>
          err++;
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	3301      	adds	r3, #1
 80089d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089d2:	bf00      	nop
      }
      break;
 80089d4:	e037      	b.n	8008a46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7c1b      	ldrb	r3, [r3, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d109      	bne.n	80089f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e6:	f107 0208 	add.w	r2, r7, #8
 80089ea:	4610      	mov	r0, r2
 80089ec:	4798      	blx	r3
 80089ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089f0:	e029      	b.n	8008a46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fa2a 	bl	8008e4e <USBD_CtlError>
        err++;
 80089fa:	7afb      	ldrb	r3, [r7, #11]
 80089fc:	3301      	adds	r3, #1
 80089fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008a00:	e021      	b.n	8008a46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	7c1b      	ldrb	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10d      	bne.n	8008a26 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	f107 0208 	add.w	r2, r7, #8
 8008a16:	4610      	mov	r0, r2
 8008a18:	4798      	blx	r3
 8008a1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	2207      	movs	r2, #7
 8008a22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a24:	e00f      	b.n	8008a46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fa10 	bl	8008e4e <USBD_CtlError>
        err++;
 8008a2e:	7afb      	ldrb	r3, [r7, #11]
 8008a30:	3301      	adds	r3, #1
 8008a32:	72fb      	strb	r3, [r7, #11]
      break;
 8008a34:	e007      	b.n	8008a46 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fa08 	bl	8008e4e <USBD_CtlError>
      err++;
 8008a3e:	7afb      	ldrb	r3, [r7, #11]
 8008a40:	3301      	adds	r3, #1
 8008a42:	72fb      	strb	r3, [r7, #11]
      break;
 8008a44:	bf00      	nop
  }

  if (err != 0U)
 8008a46:	7afb      	ldrb	r3, [r7, #11]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d11e      	bne.n	8008a8a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	88db      	ldrh	r3, [r3, #6]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d016      	beq.n	8008a82 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008a54:	893b      	ldrh	r3, [r7, #8]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00e      	beq.n	8008a78 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	88da      	ldrh	r2, [r3, #6]
 8008a5e:	893b      	ldrh	r3, [r7, #8]
 8008a60:	4293      	cmp	r3, r2
 8008a62:	bf28      	it	cs
 8008a64:	4613      	movcs	r3, r2
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a6a:	893b      	ldrh	r3, [r7, #8]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	68f9      	ldr	r1, [r7, #12]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fa5d 	bl	8008f30 <USBD_CtlSendData>
 8008a76:	e009      	b.n	8008a8c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f9e7 	bl	8008e4e <USBD_CtlError>
 8008a80:	e004      	b.n	8008a8c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 faae 	bl	8008fe4 <USBD_CtlSendStatus>
 8008a88:	e000      	b.n	8008a8c <USBD_GetDescriptor+0x320>
    return;
 8008a8a:	bf00      	nop
  }
}
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop

08008a94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	889b      	ldrh	r3, [r3, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d131      	bne.n	8008b0a <USBD_SetAddress+0x76>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	88db      	ldrh	r3, [r3, #6]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d12d      	bne.n	8008b0a <USBD_SetAddress+0x76>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	885b      	ldrh	r3, [r3, #2]
 8008ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8008ab4:	d829      	bhi.n	8008b0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	885b      	ldrh	r3, [r3, #2]
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ac0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d104      	bne.n	8008ad8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f9bc 	bl	8008e4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad6:	e01d      	b.n	8008b14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	7bfa      	ldrb	r2, [r7, #15]
 8008adc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 ff2d 	bl	8009944 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fa7a 	bl	8008fe4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d004      	beq.n	8008b00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2202      	movs	r2, #2
 8008afa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afe:	e009      	b.n	8008b14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b08:	e004      	b.n	8008b14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f99e 	bl	8008e4e <USBD_CtlError>
  }
}
 8008b12:	bf00      	nop
 8008b14:	bf00      	nop
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	885b      	ldrh	r3, [r3, #2]
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	4b4e      	ldr	r3, [pc, #312]	; (8008c6c <USBD_SetConfig+0x150>)
 8008b32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b34:	4b4d      	ldr	r3, [pc, #308]	; (8008c6c <USBD_SetConfig+0x150>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d905      	bls.n	8008b48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f985 	bl	8008e4e <USBD_CtlError>
    return USBD_FAIL;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e08c      	b.n	8008c62 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d002      	beq.n	8008b5a <USBD_SetConfig+0x3e>
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d029      	beq.n	8008bac <USBD_SetConfig+0x90>
 8008b58:	e075      	b.n	8008c46 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b5a:	4b44      	ldr	r3, [pc, #272]	; (8008c6c <USBD_SetConfig+0x150>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d020      	beq.n	8008ba4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b62:	4b42      	ldr	r3, [pc, #264]	; (8008c6c <USBD_SetConfig+0x150>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b6c:	4b3f      	ldr	r3, [pc, #252]	; (8008c6c <USBD_SetConfig+0x150>)
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7fe ffbd 	bl	8007af2 <USBD_SetClassConfig>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d008      	beq.n	8008b94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f962 	bl	8008e4e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b92:	e065      	b.n	8008c60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fa25 	bl	8008fe4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ba2:	e05d      	b.n	8008c60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fa1d 	bl	8008fe4 <USBD_CtlSendStatus>
      break;
 8008baa:	e059      	b.n	8008c60 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008bac:	4b2f      	ldr	r3, [pc, #188]	; (8008c6c <USBD_SetConfig+0x150>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d112      	bne.n	8008bda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008bbc:	4b2b      	ldr	r3, [pc, #172]	; (8008c6c <USBD_SetConfig+0x150>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bc6:	4b29      	ldr	r3, [pc, #164]	; (8008c6c <USBD_SetConfig+0x150>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7fe ffac 	bl	8007b2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fa06 	bl	8008fe4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bd8:	e042      	b.n	8008c60 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008bda:	4b24      	ldr	r3, [pc, #144]	; (8008c6c <USBD_SetConfig+0x150>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d02a      	beq.n	8008c3e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7fe ff9a 	bl	8007b2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008bf6:	4b1d      	ldr	r3, [pc, #116]	; (8008c6c <USBD_SetConfig+0x150>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c00:	4b1a      	ldr	r3, [pc, #104]	; (8008c6c <USBD_SetConfig+0x150>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7fe ff73 	bl	8007af2 <USBD_SetClassConfig>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00f      	beq.n	8008c36 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f918 	bl	8008e4e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7fe ff7f 	bl	8007b2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c34:	e014      	b.n	8008c60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f9d4 	bl	8008fe4 <USBD_CtlSendStatus>
      break;
 8008c3c:	e010      	b.n	8008c60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f9d0 	bl	8008fe4 <USBD_CtlSendStatus>
      break;
 8008c44:	e00c      	b.n	8008c60 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f900 	bl	8008e4e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c4e:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <USBD_SetConfig+0x150>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7fe ff68 	bl	8007b2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c5e:	bf00      	nop
  }

  return ret;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000484 	.word	0x20000484

08008c70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	88db      	ldrh	r3, [r3, #6]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d004      	beq.n	8008c8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f8e2 	bl	8008e4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c8a:	e023      	b.n	8008cd4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	dc02      	bgt.n	8008c9e <USBD_GetConfig+0x2e>
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	dc03      	bgt.n	8008ca4 <USBD_GetConfig+0x34>
 8008c9c:	e015      	b.n	8008cca <USBD_GetConfig+0x5a>
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d00b      	beq.n	8008cba <USBD_GetConfig+0x4a>
 8008ca2:	e012      	b.n	8008cca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	3308      	adds	r3, #8
 8008cae:	2201      	movs	r2, #1
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f93c 	bl	8008f30 <USBD_CtlSendData>
        break;
 8008cb8:	e00c      	b.n	8008cd4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f934 	bl	8008f30 <USBD_CtlSendData>
        break;
 8008cc8:	e004      	b.n	8008cd4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f8be 	bl	8008e4e <USBD_CtlError>
        break;
 8008cd2:	bf00      	nop
}
 8008cd4:	bf00      	nop
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d81e      	bhi.n	8008d32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	88db      	ldrh	r3, [r3, #6]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d004      	beq.n	8008d06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f8a5 	bl	8008e4e <USBD_CtlError>
        break;
 8008d04:	e01a      	b.n	8008d3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f043 0202 	orr.w	r2, r3, #2
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	330c      	adds	r3, #12
 8008d26:	2202      	movs	r2, #2
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f900 	bl	8008f30 <USBD_CtlSendData>
      break;
 8008d30:	e004      	b.n	8008d3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f88a 	bl	8008e4e <USBD_CtlError>
      break;
 8008d3a:	bf00      	nop
  }
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	885b      	ldrh	r3, [r3, #2]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d107      	bne.n	8008d66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f940 	bl	8008fe4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d64:	e013      	b.n	8008d8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	885b      	ldrh	r3, [r3, #2]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d10b      	bne.n	8008d86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	889b      	ldrh	r3, [r3, #4]
 8008d72:	0a1b      	lsrs	r3, r3, #8
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f930 	bl	8008fe4 <USBD_CtlSendStatus>
}
 8008d84:	e003      	b.n	8008d8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f860 	bl	8008e4e <USBD_CtlError>
}
 8008d8e:	bf00      	nop
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	3b01      	subs	r3, #1
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d80b      	bhi.n	8008dc6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	885b      	ldrh	r3, [r3, #2]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d10c      	bne.n	8008dd0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f910 	bl	8008fe4 <USBD_CtlSendStatus>
      }
      break;
 8008dc4:	e004      	b.n	8008dd0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f840 	bl	8008e4e <USBD_CtlError>
      break;
 8008dce:	e000      	b.n	8008dd2 <USBD_ClrFeature+0x3c>
      break;
 8008dd0:	bf00      	nop
  }
}
 8008dd2:	bf00      	nop
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	781a      	ldrb	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3301      	adds	r3, #1
 8008df4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	781a      	ldrb	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3301      	adds	r3, #1
 8008e02:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f7ff fa17 	bl	8008238 <SWAPBYTE>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3301      	adds	r3, #1
 8008e16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f7ff fa0a 	bl	8008238 <SWAPBYTE>
 8008e24:	4603      	mov	r3, r0
 8008e26:	461a      	mov	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3301      	adds	r3, #1
 8008e36:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f7ff f9fd 	bl	8008238 <SWAPBYTE>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	461a      	mov	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	80da      	strh	r2, [r3, #6]
}
 8008e46:	bf00      	nop
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b082      	sub	sp, #8
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e58:	2180      	movs	r1, #128	; 0x80
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fd08 	bl	8009870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e60:	2100      	movs	r1, #0
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fd04 	bl	8009870 <USBD_LL_StallEP>
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d036      	beq.n	8008ef4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e8a:	6938      	ldr	r0, [r7, #16]
 8008e8c:	f000 f836 	bl	8008efc <USBD_GetLen>
 8008e90:	4603      	mov	r3, r0
 8008e92:	3301      	adds	r3, #1
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	7812      	ldrb	r2, [r2, #0]
 8008ea8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	3301      	adds	r3, #1
 8008eae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	2203      	movs	r2, #3
 8008eb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ec0:	e013      	b.n	8008eea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ec2:	7dfb      	ldrb	r3, [r7, #23]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	7812      	ldrb	r2, [r2, #0]
 8008ecc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	613b      	str	r3, [r7, #16]
    idx++;
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	4413      	add	r3, r2
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e7      	bne.n	8008ec2 <USBD_GetString+0x52>
 8008ef2:	e000      	b.n	8008ef6 <USBD_GetString+0x86>
    return;
 8008ef4:	bf00      	nop
  }
}
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f0c:	e005      	b.n	8008f1a <USBD_GetLen+0x1e>
  {
    len++;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	3301      	adds	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	3301      	adds	r3, #1
 8008f18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1f5      	bne.n	8008f0e <USBD_GetLen+0x12>
  }

  return len;
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	2100      	movs	r1, #0
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f000 fd13 	bl	8009982 <USBD_LL_Transmit>

  return USBD_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	2100      	movs	r1, #0
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 fd02 	bl	8009982 <USBD_LL_Transmit>

  return USBD_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2203      	movs	r2, #3
 8008f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 fd06 	bl	80099c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 fcf5 	bl	80099c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2204      	movs	r2, #4
 8008ff0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fcc1 	bl	8009982 <USBD_LL_Transmit>

  return USBD_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2205      	movs	r2, #5
 8009016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800901a:	2300      	movs	r3, #0
 800901c:	2200      	movs	r2, #0
 800901e:	2100      	movs	r1, #0
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fccf 	bl	80099c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009034:	2200      	movs	r2, #0
 8009036:	4912      	ldr	r1, [pc, #72]	; (8009080 <MX_USB_DEVICE_Init+0x50>)
 8009038:	4812      	ldr	r0, [pc, #72]	; (8009084 <MX_USB_DEVICE_Init+0x54>)
 800903a:	f7fe fcdd 	bl	80079f8 <USBD_Init>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009044:	f7f8 f9ae 	bl	80013a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009048:	490f      	ldr	r1, [pc, #60]	; (8009088 <MX_USB_DEVICE_Init+0x58>)
 800904a:	480e      	ldr	r0, [pc, #56]	; (8009084 <MX_USB_DEVICE_Init+0x54>)
 800904c:	f7fe fd04 	bl	8007a58 <USBD_RegisterClass>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009056:	f7f8 f9a5 	bl	80013a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800905a:	490c      	ldr	r1, [pc, #48]	; (800908c <MX_USB_DEVICE_Init+0x5c>)
 800905c:	4809      	ldr	r0, [pc, #36]	; (8009084 <MX_USB_DEVICE_Init+0x54>)
 800905e:	f7fe fbf5 	bl	800784c <USBD_CDC_RegisterInterface>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009068:	f7f8 f99c 	bl	80013a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800906c:	4805      	ldr	r0, [pc, #20]	; (8009084 <MX_USB_DEVICE_Init+0x54>)
 800906e:	f7fe fd29 	bl	8007ac4 <USBD_Start>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009078:	f7f8 f994 	bl	80013a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800907c:	bf00      	nop
 800907e:	bd80      	pop	{r7, pc}
 8009080:	200000ac 	.word	0x200000ac
 8009084:	20000488 	.word	0x20000488
 8009088:	20000018 	.word	0x20000018
 800908c:	20000098 	.word	0x20000098

08009090 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009094:	2200      	movs	r2, #0
 8009096:	4905      	ldr	r1, [pc, #20]	; (80090ac <CDC_Init_FS+0x1c>)
 8009098:	4805      	ldr	r0, [pc, #20]	; (80090b0 <CDC_Init_FS+0x20>)
 800909a:	f7fe fbf1 	bl	8007880 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800909e:	4905      	ldr	r1, [pc, #20]	; (80090b4 <CDC_Init_FS+0x24>)
 80090a0:	4803      	ldr	r0, [pc, #12]	; (80090b0 <CDC_Init_FS+0x20>)
 80090a2:	f7fe fc0f 	bl	80078c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	20000f64 	.word	0x20000f64
 80090b0:	20000488 	.word	0x20000488
 80090b4:	20000764 	.word	0x20000764

080090b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090be:	4618      	mov	r0, r3
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	6039      	str	r1, [r7, #0]
 80090d2:	71fb      	strb	r3, [r7, #7]
 80090d4:	4613      	mov	r3, r2
 80090d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	2b23      	cmp	r3, #35	; 0x23
 80090dc:	d84a      	bhi.n	8009174 <CDC_Control_FS+0xac>
 80090de:	a201      	add	r2, pc, #4	; (adr r2, 80090e4 <CDC_Control_FS+0x1c>)
 80090e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e4:	08009175 	.word	0x08009175
 80090e8:	08009175 	.word	0x08009175
 80090ec:	08009175 	.word	0x08009175
 80090f0:	08009175 	.word	0x08009175
 80090f4:	08009175 	.word	0x08009175
 80090f8:	08009175 	.word	0x08009175
 80090fc:	08009175 	.word	0x08009175
 8009100:	08009175 	.word	0x08009175
 8009104:	08009175 	.word	0x08009175
 8009108:	08009175 	.word	0x08009175
 800910c:	08009175 	.word	0x08009175
 8009110:	08009175 	.word	0x08009175
 8009114:	08009175 	.word	0x08009175
 8009118:	08009175 	.word	0x08009175
 800911c:	08009175 	.word	0x08009175
 8009120:	08009175 	.word	0x08009175
 8009124:	08009175 	.word	0x08009175
 8009128:	08009175 	.word	0x08009175
 800912c:	08009175 	.word	0x08009175
 8009130:	08009175 	.word	0x08009175
 8009134:	08009175 	.word	0x08009175
 8009138:	08009175 	.word	0x08009175
 800913c:	08009175 	.word	0x08009175
 8009140:	08009175 	.word	0x08009175
 8009144:	08009175 	.word	0x08009175
 8009148:	08009175 	.word	0x08009175
 800914c:	08009175 	.word	0x08009175
 8009150:	08009175 	.word	0x08009175
 8009154:	08009175 	.word	0x08009175
 8009158:	08009175 	.word	0x08009175
 800915c:	08009175 	.word	0x08009175
 8009160:	08009175 	.word	0x08009175
 8009164:	08009175 	.word	0x08009175
 8009168:	08009175 	.word	0x08009175
 800916c:	08009175 	.word	0x08009175
 8009170:	08009175 	.word	0x08009175
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009174:	bf00      	nop
  }

  return (USBD_OK);
 8009176:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009178:	4618      	mov	r0, r3
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800918e:	6879      	ldr	r1, [r7, #4]
 8009190:	4805      	ldr	r0, [pc, #20]	; (80091a8 <CDC_Receive_FS+0x24>)
 8009192:	f7fe fb97 	bl	80078c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009196:	4804      	ldr	r0, [pc, #16]	; (80091a8 <CDC_Receive_FS+0x24>)
 8009198:	f7fe fbf8 	bl	800798c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800919c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20000488 	.word	0x20000488

080091ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80091bc:	4b0d      	ldr	r3, [pc, #52]	; (80091f4 <CDC_Transmit_FS+0x48>)
 80091be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e00b      	b.n	80091ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80091d2:	887b      	ldrh	r3, [r7, #2]
 80091d4:	461a      	mov	r2, r3
 80091d6:	6879      	ldr	r1, [r7, #4]
 80091d8:	4806      	ldr	r0, [pc, #24]	; (80091f4 <CDC_Transmit_FS+0x48>)
 80091da:	f7fe fb51 	bl	8007880 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80091de:	4805      	ldr	r0, [pc, #20]	; (80091f4 <CDC_Transmit_FS+0x48>)
 80091e0:	f7fe fb8e 	bl	8007900 <USBD_CDC_TransmitPacket>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	20000488 	.word	0x20000488

080091f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	4613      	mov	r3, r2
 8009204:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800920a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800920e:	4618      	mov	r0, r3
 8009210:	371c      	adds	r7, #28
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
	...

0800921c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	6039      	str	r1, [r7, #0]
 8009226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2212      	movs	r2, #18
 800922c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800922e:	4b03      	ldr	r3, [pc, #12]	; (800923c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	200000cc 	.word	0x200000cc

08009240 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	6039      	str	r1, [r7, #0]
 800924a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2204      	movs	r2, #4
 8009250:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009252:	4b03      	ldr	r3, [pc, #12]	; (8009260 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	200000ec 	.word	0x200000ec

08009264 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	6039      	str	r1, [r7, #0]
 800926e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009270:	79fb      	ldrb	r3, [r7, #7]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d105      	bne.n	8009282 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	4907      	ldr	r1, [pc, #28]	; (8009298 <USBD_FS_ProductStrDescriptor+0x34>)
 800927a:	4808      	ldr	r0, [pc, #32]	; (800929c <USBD_FS_ProductStrDescriptor+0x38>)
 800927c:	f7ff fdf8 	bl	8008e70 <USBD_GetString>
 8009280:	e004      	b.n	800928c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	4904      	ldr	r1, [pc, #16]	; (8009298 <USBD_FS_ProductStrDescriptor+0x34>)
 8009286:	4805      	ldr	r0, [pc, #20]	; (800929c <USBD_FS_ProductStrDescriptor+0x38>)
 8009288:	f7ff fdf2 	bl	8008e70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800928c:	4b02      	ldr	r3, [pc, #8]	; (8009298 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20001764 	.word	0x20001764
 800929c:	0800c9a0 	.word	0x0800c9a0

080092a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	6039      	str	r1, [r7, #0]
 80092aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	4904      	ldr	r1, [pc, #16]	; (80092c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092b0:	4804      	ldr	r0, [pc, #16]	; (80092c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092b2:	f7ff fddd 	bl	8008e70 <USBD_GetString>
  return USBD_StrDesc;
 80092b6:	4b02      	ldr	r3, [pc, #8]	; (80092c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20001764 	.word	0x20001764
 80092c4:	0800c9b8 	.word	0x0800c9b8

080092c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	6039      	str	r1, [r7, #0]
 80092d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	221a      	movs	r2, #26
 80092d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092da:	f000 f855 	bl	8009388 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092de:	4b02      	ldr	r3, [pc, #8]	; (80092e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	200000f0 	.word	0x200000f0

080092ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	6039      	str	r1, [r7, #0]
 80092f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d105      	bne.n	800930a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	4907      	ldr	r1, [pc, #28]	; (8009320 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009302:	4808      	ldr	r0, [pc, #32]	; (8009324 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009304:	f7ff fdb4 	bl	8008e70 <USBD_GetString>
 8009308:	e004      	b.n	8009314 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	4904      	ldr	r1, [pc, #16]	; (8009320 <USBD_FS_ConfigStrDescriptor+0x34>)
 800930e:	4805      	ldr	r0, [pc, #20]	; (8009324 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009310:	f7ff fdae 	bl	8008e70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009314:	4b02      	ldr	r3, [pc, #8]	; (8009320 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20001764 	.word	0x20001764
 8009324:	0800c9cc 	.word	0x0800c9cc

08009328 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d105      	bne.n	8009346 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	4907      	ldr	r1, [pc, #28]	; (800935c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800933e:	4808      	ldr	r0, [pc, #32]	; (8009360 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009340:	f7ff fd96 	bl	8008e70 <USBD_GetString>
 8009344:	e004      	b.n	8009350 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	4904      	ldr	r1, [pc, #16]	; (800935c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800934a:	4805      	ldr	r0, [pc, #20]	; (8009360 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800934c:	f7ff fd90 	bl	8008e70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009350:	4b02      	ldr	r3, [pc, #8]	; (800935c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	20001764 	.word	0x20001764
 8009360:	0800c9d8 	.word	0x0800c9d8

08009364 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	6039      	str	r1, [r7, #0]
 800936e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	220c      	movs	r2, #12
 8009374:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009376:	4b03      	ldr	r3, [pc, #12]	; (8009384 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009378:	4618      	mov	r0, r3
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	200000e0 	.word	0x200000e0

08009388 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800938e:	4b0f      	ldr	r3, [pc, #60]	; (80093cc <Get_SerialNum+0x44>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009394:	4b0e      	ldr	r3, [pc, #56]	; (80093d0 <Get_SerialNum+0x48>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800939a:	4b0e      	ldr	r3, [pc, #56]	; (80093d4 <Get_SerialNum+0x4c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4413      	add	r3, r2
 80093a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d009      	beq.n	80093c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093ae:	2208      	movs	r2, #8
 80093b0:	4909      	ldr	r1, [pc, #36]	; (80093d8 <Get_SerialNum+0x50>)
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f000 f814 	bl	80093e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093b8:	2204      	movs	r2, #4
 80093ba:	4908      	ldr	r1, [pc, #32]	; (80093dc <Get_SerialNum+0x54>)
 80093bc:	68b8      	ldr	r0, [r7, #8]
 80093be:	f000 f80f 	bl	80093e0 <IntToUnicode>
  }
}
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	1fff7a10 	.word	0x1fff7a10
 80093d0:	1fff7a14 	.word	0x1fff7a14
 80093d4:	1fff7a18 	.word	0x1fff7a18
 80093d8:	200000f2 	.word	0x200000f2
 80093dc:	20000102 	.word	0x20000102

080093e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	4613      	mov	r3, r2
 80093ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093ee:	2300      	movs	r3, #0
 80093f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093f2:	2300      	movs	r3, #0
 80093f4:	75fb      	strb	r3, [r7, #23]
 80093f6:	e027      	b.n	8009448 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	0f1b      	lsrs	r3, r3, #28
 80093fc:	2b09      	cmp	r3, #9
 80093fe:	d80b      	bhi.n	8009418 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	0f1b      	lsrs	r3, r3, #28
 8009404:	b2da      	uxtb	r2, r3
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	005b      	lsls	r3, r3, #1
 800940a:	4619      	mov	r1, r3
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	440b      	add	r3, r1
 8009410:	3230      	adds	r2, #48	; 0x30
 8009412:	b2d2      	uxtb	r2, r2
 8009414:	701a      	strb	r2, [r3, #0]
 8009416:	e00a      	b.n	800942e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	0f1b      	lsrs	r3, r3, #28
 800941c:	b2da      	uxtb	r2, r3
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	4619      	mov	r1, r3
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	440b      	add	r3, r1
 8009428:	3237      	adds	r2, #55	; 0x37
 800942a:	b2d2      	uxtb	r2, r2
 800942c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	011b      	lsls	r3, r3, #4
 8009432:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	005b      	lsls	r3, r3, #1
 8009438:	3301      	adds	r3, #1
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	4413      	add	r3, r2
 800943e:	2200      	movs	r2, #0
 8009440:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	3301      	adds	r3, #1
 8009446:	75fb      	strb	r3, [r7, #23]
 8009448:	7dfa      	ldrb	r2, [r7, #23]
 800944a:	79fb      	ldrb	r3, [r7, #7]
 800944c:	429a      	cmp	r2, r3
 800944e:	d3d3      	bcc.n	80093f8 <IntToUnicode+0x18>
  }
}
 8009450:	bf00      	nop
 8009452:	bf00      	nop
 8009454:	371c      	adds	r7, #28
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
	...

08009460 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b0a0      	sub	sp, #128	; 0x80
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009468:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800946c:	2200      	movs	r2, #0
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	605a      	str	r2, [r3, #4]
 8009472:	609a      	str	r2, [r3, #8]
 8009474:	60da      	str	r2, [r3, #12]
 8009476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009478:	f107 0310 	add.w	r3, r7, #16
 800947c:	225c      	movs	r2, #92	; 0x5c
 800947e:	2100      	movs	r1, #0
 8009480:	4618      	mov	r0, r3
 8009482:	f000 fb8f 	bl	8009ba4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800948e:	d149      	bne.n	8009524 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009494:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009496:	2300      	movs	r3, #0
 8009498:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800949a:	f107 0310 	add.w	r3, r7, #16
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fa fe4a 	bl	8004138 <HAL_RCCEx_PeriphCLKConfig>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80094aa:	f7f7 ff7b 	bl	80013a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094ae:	2300      	movs	r3, #0
 80094b0:	60fb      	str	r3, [r7, #12]
 80094b2:	4b1e      	ldr	r3, [pc, #120]	; (800952c <HAL_PCD_MspInit+0xcc>)
 80094b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b6:	4a1d      	ldr	r2, [pc, #116]	; (800952c <HAL_PCD_MspInit+0xcc>)
 80094b8:	f043 0301 	orr.w	r3, r3, #1
 80094bc:	6313      	str	r3, [r2, #48]	; 0x30
 80094be:	4b1b      	ldr	r3, [pc, #108]	; (800952c <HAL_PCD_MspInit+0xcc>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80094ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094d0:	2302      	movs	r3, #2
 80094d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094d4:	2300      	movs	r3, #0
 80094d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094d8:	2303      	movs	r3, #3
 80094da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094dc:	230a      	movs	r3, #10
 80094de:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80094e4:	4619      	mov	r1, r3
 80094e6:	4812      	ldr	r0, [pc, #72]	; (8009530 <HAL_PCD_MspInit+0xd0>)
 80094e8:	f7f8 fe8e 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094ec:	4b0f      	ldr	r3, [pc, #60]	; (800952c <HAL_PCD_MspInit+0xcc>)
 80094ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f0:	4a0e      	ldr	r2, [pc, #56]	; (800952c <HAL_PCD_MspInit+0xcc>)
 80094f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f6:	6353      	str	r3, [r2, #52]	; 0x34
 80094f8:	2300      	movs	r3, #0
 80094fa:	60bb      	str	r3, [r7, #8]
 80094fc:	4b0b      	ldr	r3, [pc, #44]	; (800952c <HAL_PCD_MspInit+0xcc>)
 80094fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009500:	4a0a      	ldr	r2, [pc, #40]	; (800952c <HAL_PCD_MspInit+0xcc>)
 8009502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009506:	6453      	str	r3, [r2, #68]	; 0x44
 8009508:	4b08      	ldr	r3, [pc, #32]	; (800952c <HAL_PCD_MspInit+0xcc>)
 800950a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009510:	60bb      	str	r3, [r7, #8]
 8009512:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009514:	2200      	movs	r2, #0
 8009516:	2100      	movs	r1, #0
 8009518:	2043      	movs	r0, #67	; 0x43
 800951a:	f7f8 fe3e 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800951e:	2043      	movs	r0, #67	; 0x43
 8009520:	f7f8 fe57 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009524:	bf00      	nop
 8009526:	3780      	adds	r7, #128	; 0x80
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	40023800 	.word	0x40023800
 8009530:	40020000 	.word	0x40020000

08009534 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009548:	4619      	mov	r1, r3
 800954a:	4610      	mov	r0, r2
 800954c:	f7fe fb07 	bl	8007b5e <USBD_LL_SetupStage>
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800956a:	78fa      	ldrb	r2, [r7, #3]
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	4613      	mov	r3, r2
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	440b      	add	r3, r1
 8009578:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	78fb      	ldrb	r3, [r7, #3]
 8009580:	4619      	mov	r1, r3
 8009582:	f7fe fb41 	bl	8007c08 <USBD_LL_DataOutStage>
}
 8009586:	bf00      	nop
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	460b      	mov	r3, r1
 8009598:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80095a0:	78fa      	ldrb	r2, [r7, #3]
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	4613      	mov	r3, r2
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	440b      	add	r3, r1
 80095ae:	334c      	adds	r3, #76	; 0x4c
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	78fb      	ldrb	r3, [r7, #3]
 80095b4:	4619      	mov	r1, r3
 80095b6:	f7fe fbda 	bl	8007d6e <USBD_LL_DataInStage>
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe fd0e 	bl	8007ff2 <USBD_LL_SOF>
}
 80095d6:	bf00      	nop
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b084      	sub	sp, #16
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095e6:	2301      	movs	r3, #1
 80095e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d102      	bne.n	80095f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
 80095f6:	e008      	b.n	800960a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d102      	bne.n	8009606 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009600:	2301      	movs	r3, #1
 8009602:	73fb      	strb	r3, [r7, #15]
 8009604:	e001      	b.n	800960a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009606:	f7f7 fecd 	bl	80013a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009610:	7bfa      	ldrb	r2, [r7, #15]
 8009612:	4611      	mov	r1, r2
 8009614:	4618      	mov	r0, r3
 8009616:	f7fe fcae 	bl	8007f76 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009620:	4618      	mov	r0, r3
 8009622:	f7fe fc56 	bl	8007ed2 <USBD_LL_Reset>
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
	...

08009630 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe fca9 	bl	8007f96 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	6812      	ldr	r2, [r2, #0]
 8009652:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a1b      	ldr	r3, [r3, #32]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d005      	beq.n	8009670 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009664:	4b04      	ldr	r3, [pc, #16]	; (8009678 <HAL_PCD_SuspendCallback+0x48>)
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	4a03      	ldr	r2, [pc, #12]	; (8009678 <HAL_PCD_SuspendCallback+0x48>)
 800966a:	f043 0306 	orr.w	r3, r3, #6
 800966e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	e000ed00 	.word	0xe000ed00

0800967c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fc99 	bl	8007fc2 <USBD_LL_Resume>
}
 8009690:	bf00      	nop
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096aa:	78fa      	ldrb	r2, [r7, #3]
 80096ac:	4611      	mov	r1, r2
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fe fcf1 	bl	8008096 <USBD_LL_IsoOUTIncomplete>
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ce:	78fa      	ldrb	r2, [r7, #3]
 80096d0:	4611      	mov	r1, r2
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fcad 	bl	8008032 <USBD_LL_IsoINIncomplete>
}
 80096d8:	bf00      	nop
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fd03 	bl	80080fa <USBD_LL_DevConnected>
}
 80096f4:	bf00      	nop
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fd00 	bl	8008110 <USBD_LL_DevDisconnected>
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d13c      	bne.n	80097a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009728:	4a20      	ldr	r2, [pc, #128]	; (80097ac <USBD_LL_Init+0x94>)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a1e      	ldr	r2, [pc, #120]	; (80097ac <USBD_LL_Init+0x94>)
 8009734:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009738:	4b1c      	ldr	r3, [pc, #112]	; (80097ac <USBD_LL_Init+0x94>)
 800973a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800973e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009740:	4b1a      	ldr	r3, [pc, #104]	; (80097ac <USBD_LL_Init+0x94>)
 8009742:	2206      	movs	r2, #6
 8009744:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009746:	4b19      	ldr	r3, [pc, #100]	; (80097ac <USBD_LL_Init+0x94>)
 8009748:	2202      	movs	r2, #2
 800974a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800974c:	4b17      	ldr	r3, [pc, #92]	; (80097ac <USBD_LL_Init+0x94>)
 800974e:	2200      	movs	r2, #0
 8009750:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009752:	4b16      	ldr	r3, [pc, #88]	; (80097ac <USBD_LL_Init+0x94>)
 8009754:	2202      	movs	r2, #2
 8009756:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009758:	4b14      	ldr	r3, [pc, #80]	; (80097ac <USBD_LL_Init+0x94>)
 800975a:	2200      	movs	r2, #0
 800975c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800975e:	4b13      	ldr	r3, [pc, #76]	; (80097ac <USBD_LL_Init+0x94>)
 8009760:	2200      	movs	r2, #0
 8009762:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009764:	4b11      	ldr	r3, [pc, #68]	; (80097ac <USBD_LL_Init+0x94>)
 8009766:	2200      	movs	r2, #0
 8009768:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800976a:	4b10      	ldr	r3, [pc, #64]	; (80097ac <USBD_LL_Init+0x94>)
 800976c:	2200      	movs	r2, #0
 800976e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009770:	4b0e      	ldr	r3, [pc, #56]	; (80097ac <USBD_LL_Init+0x94>)
 8009772:	2200      	movs	r2, #0
 8009774:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009776:	480d      	ldr	r0, [pc, #52]	; (80097ac <USBD_LL_Init+0x94>)
 8009778:	f7f9 f838 	bl	80027ec <HAL_PCD_Init>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009782:	f7f7 fe0f 	bl	80013a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009786:	2180      	movs	r1, #128	; 0x80
 8009788:	4808      	ldr	r0, [pc, #32]	; (80097ac <USBD_LL_Init+0x94>)
 800978a:	f7fa fac4 	bl	8003d16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800978e:	2240      	movs	r2, #64	; 0x40
 8009790:	2100      	movs	r1, #0
 8009792:	4806      	ldr	r0, [pc, #24]	; (80097ac <USBD_LL_Init+0x94>)
 8009794:	f7fa fa78 	bl	8003c88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009798:	2280      	movs	r2, #128	; 0x80
 800979a:	2101      	movs	r1, #1
 800979c:	4803      	ldr	r0, [pc, #12]	; (80097ac <USBD_LL_Init+0x94>)
 800979e:	f7fa fa73 	bl	8003c88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20001964 	.word	0x20001964

080097b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7f9 f934 	bl	8002a34 <HAL_PCD_Start>
 80097cc:	4603      	mov	r3, r0
 80097ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 f990 	bl	8009af8 <USBD_Get_USB_Status>
 80097d8:	4603      	mov	r3, r0
 80097da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	4608      	mov	r0, r1
 80097f0:	4611      	mov	r1, r2
 80097f2:	461a      	mov	r2, r3
 80097f4:	4603      	mov	r3, r0
 80097f6:	70fb      	strb	r3, [r7, #3]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70bb      	strb	r3, [r7, #2]
 80097fc:	4613      	mov	r3, r2
 80097fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800980e:	78bb      	ldrb	r3, [r7, #2]
 8009810:	883a      	ldrh	r2, [r7, #0]
 8009812:	78f9      	ldrb	r1, [r7, #3]
 8009814:	f7f9 fe32 	bl	800347c <HAL_PCD_EP_Open>
 8009818:	4603      	mov	r3, r0
 800981a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800981c:	7bfb      	ldrb	r3, [r7, #15]
 800981e:	4618      	mov	r0, r3
 8009820:	f000 f96a 	bl	8009af8 <USBD_Get_USB_Status>
 8009824:	4603      	mov	r3, r0
 8009826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009828:	7bbb      	ldrb	r3, [r7, #14]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	460b      	mov	r3, r1
 800983c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800984c:	78fa      	ldrb	r2, [r7, #3]
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f7f9 fe7b 	bl	800354c <HAL_PCD_EP_Close>
 8009856:	4603      	mov	r3, r0
 8009858:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 f94b 	bl	8009af8 <USBD_Get_USB_Status>
 8009862:	4603      	mov	r3, r0
 8009864:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009866:	7bbb      	ldrb	r3, [r7, #14]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800988a:	78fa      	ldrb	r2, [r7, #3]
 800988c:	4611      	mov	r1, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7f9 ff53 	bl	800373a <HAL_PCD_EP_SetStall>
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009898:	7bfb      	ldrb	r3, [r7, #15]
 800989a:	4618      	mov	r0, r3
 800989c:	f000 f92c 	bl	8009af8 <USBD_Get_USB_Status>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7f9 ff98 	bl	8003802 <HAL_PCD_EP_ClrStall>
 80098d2:	4603      	mov	r3, r0
 80098d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f90d 	bl	8009af8 <USBD_Get_USB_Status>
 80098de:	4603      	mov	r3, r0
 80098e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009904:	2b00      	cmp	r3, #0
 8009906:	da0b      	bge.n	8009920 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009908:	78fb      	ldrb	r3, [r7, #3]
 800990a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800990e:	68f9      	ldr	r1, [r7, #12]
 8009910:	4613      	mov	r3, r2
 8009912:	00db      	lsls	r3, r3, #3
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	440b      	add	r3, r1
 800991a:	333e      	adds	r3, #62	; 0x3e
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	e00b      	b.n	8009938 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009926:	68f9      	ldr	r1, [r7, #12]
 8009928:	4613      	mov	r3, r2
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	4413      	add	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	440b      	add	r3, r1
 8009932:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009936:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800995e:	78fa      	ldrb	r2, [r7, #3]
 8009960:	4611      	mov	r1, r2
 8009962:	4618      	mov	r0, r3
 8009964:	f7f9 fd65 	bl	8003432 <HAL_PCD_SetAddress>
 8009968:	4603      	mov	r3, r0
 800996a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	4618      	mov	r0, r3
 8009970:	f000 f8c2 	bl	8009af8 <USBD_Get_USB_Status>
 8009974:	4603      	mov	r3, r0
 8009976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009978:	7bbb      	ldrb	r3, [r7, #14]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b086      	sub	sp, #24
 8009986:	af00      	add	r7, sp, #0
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
 800998e:	460b      	mov	r3, r1
 8009990:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099a0:	7af9      	ldrb	r1, [r7, #11]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	f7f9 fe7e 	bl	80036a6 <HAL_PCD_EP_Transmit>
 80099aa:	4603      	mov	r3, r0
 80099ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 f8a1 	bl	8009af8 <USBD_Get_USB_Status>
 80099b6:	4603      	mov	r3, r0
 80099b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	607a      	str	r2, [r7, #4]
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	460b      	mov	r3, r1
 80099d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099e2:	7af9      	ldrb	r1, [r7, #11]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	f7f9 fdfa 	bl	80035e0 <HAL_PCD_EP_Receive>
 80099ec:	4603      	mov	r3, r0
 80099ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 f880 	bl	8009af8 <USBD_Get_USB_Status>
 80099f8:	4603      	mov	r3, r0
 80099fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b082      	sub	sp, #8
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a18:	78fa      	ldrb	r2, [r7, #3]
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7f9 fe2a 	bl	8003676 <HAL_PCD_EP_GetRxCount>
 8009a22:	4603      	mov	r3, r0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	460b      	mov	r3, r1
 8009a36:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <HAL_PCDEx_LPM_Callback+0x18>
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d01f      	beq.n	8009a82 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009a42:	e03b      	b.n	8009abc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d007      	beq.n	8009a5c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009a4c:	f7f7 fa7e 	bl	8000f4c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a50:	4b1c      	ldr	r3, [pc, #112]	; (8009ac4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	4a1b      	ldr	r2, [pc, #108]	; (8009ac4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009a56:	f023 0306 	bic.w	r3, r3, #6
 8009a5a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	6812      	ldr	r2, [r2, #0]
 8009a6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a6e:	f023 0301 	bic.w	r3, r3, #1
 8009a72:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe faa1 	bl	8007fc2 <USBD_LL_Resume>
    break;
 8009a80:	e01c      	b.n	8009abc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	6812      	ldr	r2, [r2, #0]
 8009a90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a94:	f043 0301 	orr.w	r3, r3, #1
 8009a98:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fa78 	bl	8007f96 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d005      	beq.n	8009aba <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009aae:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	4a04      	ldr	r2, [pc, #16]	; (8009ac4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009ab4:	f043 0306 	orr.w	r3, r3, #6
 8009ab8:	6113      	str	r3, [r2, #16]
    break;
 8009aba:	bf00      	nop
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	e000ed00 	.word	0xe000ed00

08009ac8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ad0:	4b03      	ldr	r3, [pc, #12]	; (8009ae0 <USBD_static_malloc+0x18>)
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	20001e70 	.word	0x20001e70

08009ae4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]

}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	4603      	mov	r3, r0
 8009b00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b06:	79fb      	ldrb	r3, [r7, #7]
 8009b08:	2b03      	cmp	r3, #3
 8009b0a:	d817      	bhi.n	8009b3c <USBD_Get_USB_Status+0x44>
 8009b0c:	a201      	add	r2, pc, #4	; (adr r2, 8009b14 <USBD_Get_USB_Status+0x1c>)
 8009b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b12:	bf00      	nop
 8009b14:	08009b25 	.word	0x08009b25
 8009b18:	08009b2b 	.word	0x08009b2b
 8009b1c:	08009b31 	.word	0x08009b31
 8009b20:	08009b37 	.word	0x08009b37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
    break;
 8009b28:	e00b      	b.n	8009b42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b2e:	e008      	b.n	8009b42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b30:	2301      	movs	r3, #1
 8009b32:	73fb      	strb	r3, [r7, #15]
    break;
 8009b34:	e005      	b.n	8009b42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b36:	2303      	movs	r3, #3
 8009b38:	73fb      	strb	r3, [r7, #15]
    break;
 8009b3a:	e002      	b.n	8009b42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b40:	bf00      	nop
  }
  return usb_status;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <__errno>:
 8009b50:	4b01      	ldr	r3, [pc, #4]	; (8009b58 <__errno+0x8>)
 8009b52:	6818      	ldr	r0, [r3, #0]
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	2000010c 	.word	0x2000010c

08009b5c <__libc_init_array>:
 8009b5c:	b570      	push	{r4, r5, r6, lr}
 8009b5e:	4d0d      	ldr	r5, [pc, #52]	; (8009b94 <__libc_init_array+0x38>)
 8009b60:	4c0d      	ldr	r4, [pc, #52]	; (8009b98 <__libc_init_array+0x3c>)
 8009b62:	1b64      	subs	r4, r4, r5
 8009b64:	10a4      	asrs	r4, r4, #2
 8009b66:	2600      	movs	r6, #0
 8009b68:	42a6      	cmp	r6, r4
 8009b6a:	d109      	bne.n	8009b80 <__libc_init_array+0x24>
 8009b6c:	4d0b      	ldr	r5, [pc, #44]	; (8009b9c <__libc_init_array+0x40>)
 8009b6e:	4c0c      	ldr	r4, [pc, #48]	; (8009ba0 <__libc_init_array+0x44>)
 8009b70:	f002 ff02 	bl	800c978 <_init>
 8009b74:	1b64      	subs	r4, r4, r5
 8009b76:	10a4      	asrs	r4, r4, #2
 8009b78:	2600      	movs	r6, #0
 8009b7a:	42a6      	cmp	r6, r4
 8009b7c:	d105      	bne.n	8009b8a <__libc_init_array+0x2e>
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}
 8009b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b84:	4798      	blx	r3
 8009b86:	3601      	adds	r6, #1
 8009b88:	e7ee      	b.n	8009b68 <__libc_init_array+0xc>
 8009b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b8e:	4798      	blx	r3
 8009b90:	3601      	adds	r6, #1
 8009b92:	e7f2      	b.n	8009b7a <__libc_init_array+0x1e>
 8009b94:	0800cde4 	.word	0x0800cde4
 8009b98:	0800cde4 	.word	0x0800cde4
 8009b9c:	0800cde4 	.word	0x0800cde4
 8009ba0:	0800cde8 	.word	0x0800cde8

08009ba4 <memset>:
 8009ba4:	4402      	add	r2, r0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d100      	bne.n	8009bae <memset+0xa>
 8009bac:	4770      	bx	lr
 8009bae:	f803 1b01 	strb.w	r1, [r3], #1
 8009bb2:	e7f9      	b.n	8009ba8 <memset+0x4>

08009bb4 <__cvt>:
 8009bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb8:	ec55 4b10 	vmov	r4, r5, d0
 8009bbc:	2d00      	cmp	r5, #0
 8009bbe:	460e      	mov	r6, r1
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	462b      	mov	r3, r5
 8009bc4:	bfbb      	ittet	lt
 8009bc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009bca:	461d      	movlt	r5, r3
 8009bcc:	2300      	movge	r3, #0
 8009bce:	232d      	movlt	r3, #45	; 0x2d
 8009bd0:	700b      	strb	r3, [r1, #0]
 8009bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009bd8:	4691      	mov	r9, r2
 8009bda:	f023 0820 	bic.w	r8, r3, #32
 8009bde:	bfbc      	itt	lt
 8009be0:	4622      	movlt	r2, r4
 8009be2:	4614      	movlt	r4, r2
 8009be4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009be8:	d005      	beq.n	8009bf6 <__cvt+0x42>
 8009bea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009bee:	d100      	bne.n	8009bf2 <__cvt+0x3e>
 8009bf0:	3601      	adds	r6, #1
 8009bf2:	2102      	movs	r1, #2
 8009bf4:	e000      	b.n	8009bf8 <__cvt+0x44>
 8009bf6:	2103      	movs	r1, #3
 8009bf8:	ab03      	add	r3, sp, #12
 8009bfa:	9301      	str	r3, [sp, #4]
 8009bfc:	ab02      	add	r3, sp, #8
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	ec45 4b10 	vmov	d0, r4, r5
 8009c04:	4653      	mov	r3, sl
 8009c06:	4632      	mov	r2, r6
 8009c08:	f000 fcea 	bl	800a5e0 <_dtoa_r>
 8009c0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c10:	4607      	mov	r7, r0
 8009c12:	d102      	bne.n	8009c1a <__cvt+0x66>
 8009c14:	f019 0f01 	tst.w	r9, #1
 8009c18:	d022      	beq.n	8009c60 <__cvt+0xac>
 8009c1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c1e:	eb07 0906 	add.w	r9, r7, r6
 8009c22:	d110      	bne.n	8009c46 <__cvt+0x92>
 8009c24:	783b      	ldrb	r3, [r7, #0]
 8009c26:	2b30      	cmp	r3, #48	; 0x30
 8009c28:	d10a      	bne.n	8009c40 <__cvt+0x8c>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4620      	mov	r0, r4
 8009c30:	4629      	mov	r1, r5
 8009c32:	f7f6 ff69 	bl	8000b08 <__aeabi_dcmpeq>
 8009c36:	b918      	cbnz	r0, 8009c40 <__cvt+0x8c>
 8009c38:	f1c6 0601 	rsb	r6, r6, #1
 8009c3c:	f8ca 6000 	str.w	r6, [sl]
 8009c40:	f8da 3000 	ldr.w	r3, [sl]
 8009c44:	4499      	add	r9, r3
 8009c46:	2200      	movs	r2, #0
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	f7f6 ff5b 	bl	8000b08 <__aeabi_dcmpeq>
 8009c52:	b108      	cbz	r0, 8009c58 <__cvt+0xa4>
 8009c54:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c58:	2230      	movs	r2, #48	; 0x30
 8009c5a:	9b03      	ldr	r3, [sp, #12]
 8009c5c:	454b      	cmp	r3, r9
 8009c5e:	d307      	bcc.n	8009c70 <__cvt+0xbc>
 8009c60:	9b03      	ldr	r3, [sp, #12]
 8009c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c64:	1bdb      	subs	r3, r3, r7
 8009c66:	4638      	mov	r0, r7
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	b004      	add	sp, #16
 8009c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c70:	1c59      	adds	r1, r3, #1
 8009c72:	9103      	str	r1, [sp, #12]
 8009c74:	701a      	strb	r2, [r3, #0]
 8009c76:	e7f0      	b.n	8009c5a <__cvt+0xa6>

08009c78 <__exponent>:
 8009c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2900      	cmp	r1, #0
 8009c7e:	bfb8      	it	lt
 8009c80:	4249      	neglt	r1, r1
 8009c82:	f803 2b02 	strb.w	r2, [r3], #2
 8009c86:	bfb4      	ite	lt
 8009c88:	222d      	movlt	r2, #45	; 0x2d
 8009c8a:	222b      	movge	r2, #43	; 0x2b
 8009c8c:	2909      	cmp	r1, #9
 8009c8e:	7042      	strb	r2, [r0, #1]
 8009c90:	dd2a      	ble.n	8009ce8 <__exponent+0x70>
 8009c92:	f10d 0407 	add.w	r4, sp, #7
 8009c96:	46a4      	mov	ip, r4
 8009c98:	270a      	movs	r7, #10
 8009c9a:	46a6      	mov	lr, r4
 8009c9c:	460a      	mov	r2, r1
 8009c9e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009ca2:	fb07 1516 	mls	r5, r7, r6, r1
 8009ca6:	3530      	adds	r5, #48	; 0x30
 8009ca8:	2a63      	cmp	r2, #99	; 0x63
 8009caa:	f104 34ff 	add.w	r4, r4, #4294967295
 8009cae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	dcf1      	bgt.n	8009c9a <__exponent+0x22>
 8009cb6:	3130      	adds	r1, #48	; 0x30
 8009cb8:	f1ae 0502 	sub.w	r5, lr, #2
 8009cbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009cc0:	1c44      	adds	r4, r0, #1
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	4561      	cmp	r1, ip
 8009cc6:	d30a      	bcc.n	8009cde <__exponent+0x66>
 8009cc8:	f10d 0209 	add.w	r2, sp, #9
 8009ccc:	eba2 020e 	sub.w	r2, r2, lr
 8009cd0:	4565      	cmp	r5, ip
 8009cd2:	bf88      	it	hi
 8009cd4:	2200      	movhi	r2, #0
 8009cd6:	4413      	add	r3, r2
 8009cd8:	1a18      	subs	r0, r3, r0
 8009cda:	b003      	add	sp, #12
 8009cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ce2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ce6:	e7ed      	b.n	8009cc4 <__exponent+0x4c>
 8009ce8:	2330      	movs	r3, #48	; 0x30
 8009cea:	3130      	adds	r1, #48	; 0x30
 8009cec:	7083      	strb	r3, [r0, #2]
 8009cee:	70c1      	strb	r1, [r0, #3]
 8009cf0:	1d03      	adds	r3, r0, #4
 8009cf2:	e7f1      	b.n	8009cd8 <__exponent+0x60>

08009cf4 <_printf_float>:
 8009cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf8:	ed2d 8b02 	vpush	{d8}
 8009cfc:	b08d      	sub	sp, #52	; 0x34
 8009cfe:	460c      	mov	r4, r1
 8009d00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d04:	4616      	mov	r6, r2
 8009d06:	461f      	mov	r7, r3
 8009d08:	4605      	mov	r5, r0
 8009d0a:	f001 fa57 	bl	800b1bc <_localeconv_r>
 8009d0e:	f8d0 a000 	ldr.w	sl, [r0]
 8009d12:	4650      	mov	r0, sl
 8009d14:	f7f6 fa7c 	bl	8000210 <strlen>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	9305      	str	r3, [sp, #20]
 8009d20:	f8d8 3000 	ldr.w	r3, [r8]
 8009d24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d28:	3307      	adds	r3, #7
 8009d2a:	f023 0307 	bic.w	r3, r3, #7
 8009d2e:	f103 0208 	add.w	r2, r3, #8
 8009d32:	f8c8 2000 	str.w	r2, [r8]
 8009d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d46:	9307      	str	r3, [sp, #28]
 8009d48:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d4c:	ee08 0a10 	vmov	s16, r0
 8009d50:	4b9f      	ldr	r3, [pc, #636]	; (8009fd0 <_printf_float+0x2dc>)
 8009d52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d56:	f04f 32ff 	mov.w	r2, #4294967295
 8009d5a:	f7f6 ff07 	bl	8000b6c <__aeabi_dcmpun>
 8009d5e:	bb88      	cbnz	r0, 8009dc4 <_printf_float+0xd0>
 8009d60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d64:	4b9a      	ldr	r3, [pc, #616]	; (8009fd0 <_printf_float+0x2dc>)
 8009d66:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6a:	f7f6 fee1 	bl	8000b30 <__aeabi_dcmple>
 8009d6e:	bb48      	cbnz	r0, 8009dc4 <_printf_float+0xd0>
 8009d70:	2200      	movs	r2, #0
 8009d72:	2300      	movs	r3, #0
 8009d74:	4640      	mov	r0, r8
 8009d76:	4649      	mov	r1, r9
 8009d78:	f7f6 fed0 	bl	8000b1c <__aeabi_dcmplt>
 8009d7c:	b110      	cbz	r0, 8009d84 <_printf_float+0x90>
 8009d7e:	232d      	movs	r3, #45	; 0x2d
 8009d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d84:	4b93      	ldr	r3, [pc, #588]	; (8009fd4 <_printf_float+0x2e0>)
 8009d86:	4894      	ldr	r0, [pc, #592]	; (8009fd8 <_printf_float+0x2e4>)
 8009d88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d8c:	bf94      	ite	ls
 8009d8e:	4698      	movls	r8, r3
 8009d90:	4680      	movhi	r8, r0
 8009d92:	2303      	movs	r3, #3
 8009d94:	6123      	str	r3, [r4, #16]
 8009d96:	9b05      	ldr	r3, [sp, #20]
 8009d98:	f023 0204 	bic.w	r2, r3, #4
 8009d9c:	6022      	str	r2, [r4, #0]
 8009d9e:	f04f 0900 	mov.w	r9, #0
 8009da2:	9700      	str	r7, [sp, #0]
 8009da4:	4633      	mov	r3, r6
 8009da6:	aa0b      	add	r2, sp, #44	; 0x2c
 8009da8:	4621      	mov	r1, r4
 8009daa:	4628      	mov	r0, r5
 8009dac:	f000 f9d8 	bl	800a160 <_printf_common>
 8009db0:	3001      	adds	r0, #1
 8009db2:	f040 8090 	bne.w	8009ed6 <_printf_float+0x1e2>
 8009db6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dba:	b00d      	add	sp, #52	; 0x34
 8009dbc:	ecbd 8b02 	vpop	{d8}
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc4:	4642      	mov	r2, r8
 8009dc6:	464b      	mov	r3, r9
 8009dc8:	4640      	mov	r0, r8
 8009dca:	4649      	mov	r1, r9
 8009dcc:	f7f6 fece 	bl	8000b6c <__aeabi_dcmpun>
 8009dd0:	b140      	cbz	r0, 8009de4 <_printf_float+0xf0>
 8009dd2:	464b      	mov	r3, r9
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	bfbc      	itt	lt
 8009dd8:	232d      	movlt	r3, #45	; 0x2d
 8009dda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009dde:	487f      	ldr	r0, [pc, #508]	; (8009fdc <_printf_float+0x2e8>)
 8009de0:	4b7f      	ldr	r3, [pc, #508]	; (8009fe0 <_printf_float+0x2ec>)
 8009de2:	e7d1      	b.n	8009d88 <_printf_float+0x94>
 8009de4:	6863      	ldr	r3, [r4, #4]
 8009de6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009dea:	9206      	str	r2, [sp, #24]
 8009dec:	1c5a      	adds	r2, r3, #1
 8009dee:	d13f      	bne.n	8009e70 <_printf_float+0x17c>
 8009df0:	2306      	movs	r3, #6
 8009df2:	6063      	str	r3, [r4, #4]
 8009df4:	9b05      	ldr	r3, [sp, #20]
 8009df6:	6861      	ldr	r1, [r4, #4]
 8009df8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	9303      	str	r3, [sp, #12]
 8009e00:	ab0a      	add	r3, sp, #40	; 0x28
 8009e02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e06:	ab09      	add	r3, sp, #36	; 0x24
 8009e08:	ec49 8b10 	vmov	d0, r8, r9
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	6022      	str	r2, [r4, #0]
 8009e10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e14:	4628      	mov	r0, r5
 8009e16:	f7ff fecd 	bl	8009bb4 <__cvt>
 8009e1a:	9b06      	ldr	r3, [sp, #24]
 8009e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e1e:	2b47      	cmp	r3, #71	; 0x47
 8009e20:	4680      	mov	r8, r0
 8009e22:	d108      	bne.n	8009e36 <_printf_float+0x142>
 8009e24:	1cc8      	adds	r0, r1, #3
 8009e26:	db02      	blt.n	8009e2e <_printf_float+0x13a>
 8009e28:	6863      	ldr	r3, [r4, #4]
 8009e2a:	4299      	cmp	r1, r3
 8009e2c:	dd41      	ble.n	8009eb2 <_printf_float+0x1be>
 8009e2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009e32:	fa5f fb8b 	uxtb.w	fp, fp
 8009e36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e3a:	d820      	bhi.n	8009e7e <_printf_float+0x18a>
 8009e3c:	3901      	subs	r1, #1
 8009e3e:	465a      	mov	r2, fp
 8009e40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e44:	9109      	str	r1, [sp, #36]	; 0x24
 8009e46:	f7ff ff17 	bl	8009c78 <__exponent>
 8009e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e4c:	1813      	adds	r3, r2, r0
 8009e4e:	2a01      	cmp	r2, #1
 8009e50:	4681      	mov	r9, r0
 8009e52:	6123      	str	r3, [r4, #16]
 8009e54:	dc02      	bgt.n	8009e5c <_printf_float+0x168>
 8009e56:	6822      	ldr	r2, [r4, #0]
 8009e58:	07d2      	lsls	r2, r2, #31
 8009e5a:	d501      	bpl.n	8009e60 <_printf_float+0x16c>
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	6123      	str	r3, [r4, #16]
 8009e60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d09c      	beq.n	8009da2 <_printf_float+0xae>
 8009e68:	232d      	movs	r3, #45	; 0x2d
 8009e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e6e:	e798      	b.n	8009da2 <_printf_float+0xae>
 8009e70:	9a06      	ldr	r2, [sp, #24]
 8009e72:	2a47      	cmp	r2, #71	; 0x47
 8009e74:	d1be      	bne.n	8009df4 <_printf_float+0x100>
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1bc      	bne.n	8009df4 <_printf_float+0x100>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e7b9      	b.n	8009df2 <_printf_float+0xfe>
 8009e7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e82:	d118      	bne.n	8009eb6 <_printf_float+0x1c2>
 8009e84:	2900      	cmp	r1, #0
 8009e86:	6863      	ldr	r3, [r4, #4]
 8009e88:	dd0b      	ble.n	8009ea2 <_printf_float+0x1ae>
 8009e8a:	6121      	str	r1, [r4, #16]
 8009e8c:	b913      	cbnz	r3, 8009e94 <_printf_float+0x1a0>
 8009e8e:	6822      	ldr	r2, [r4, #0]
 8009e90:	07d0      	lsls	r0, r2, #31
 8009e92:	d502      	bpl.n	8009e9a <_printf_float+0x1a6>
 8009e94:	3301      	adds	r3, #1
 8009e96:	440b      	add	r3, r1
 8009e98:	6123      	str	r3, [r4, #16]
 8009e9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e9c:	f04f 0900 	mov.w	r9, #0
 8009ea0:	e7de      	b.n	8009e60 <_printf_float+0x16c>
 8009ea2:	b913      	cbnz	r3, 8009eaa <_printf_float+0x1b6>
 8009ea4:	6822      	ldr	r2, [r4, #0]
 8009ea6:	07d2      	lsls	r2, r2, #31
 8009ea8:	d501      	bpl.n	8009eae <_printf_float+0x1ba>
 8009eaa:	3302      	adds	r3, #2
 8009eac:	e7f4      	b.n	8009e98 <_printf_float+0x1a4>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e7f2      	b.n	8009e98 <_printf_float+0x1a4>
 8009eb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb8:	4299      	cmp	r1, r3
 8009eba:	db05      	blt.n	8009ec8 <_printf_float+0x1d4>
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	6121      	str	r1, [r4, #16]
 8009ec0:	07d8      	lsls	r0, r3, #31
 8009ec2:	d5ea      	bpl.n	8009e9a <_printf_float+0x1a6>
 8009ec4:	1c4b      	adds	r3, r1, #1
 8009ec6:	e7e7      	b.n	8009e98 <_printf_float+0x1a4>
 8009ec8:	2900      	cmp	r1, #0
 8009eca:	bfd4      	ite	le
 8009ecc:	f1c1 0202 	rsble	r2, r1, #2
 8009ed0:	2201      	movgt	r2, #1
 8009ed2:	4413      	add	r3, r2
 8009ed4:	e7e0      	b.n	8009e98 <_printf_float+0x1a4>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	055a      	lsls	r2, r3, #21
 8009eda:	d407      	bmi.n	8009eec <_printf_float+0x1f8>
 8009edc:	6923      	ldr	r3, [r4, #16]
 8009ede:	4642      	mov	r2, r8
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	47b8      	blx	r7
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d12c      	bne.n	8009f44 <_printf_float+0x250>
 8009eea:	e764      	b.n	8009db6 <_printf_float+0xc2>
 8009eec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ef0:	f240 80e0 	bls.w	800a0b4 <_printf_float+0x3c0>
 8009ef4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ef8:	2200      	movs	r2, #0
 8009efa:	2300      	movs	r3, #0
 8009efc:	f7f6 fe04 	bl	8000b08 <__aeabi_dcmpeq>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d034      	beq.n	8009f6e <_printf_float+0x27a>
 8009f04:	4a37      	ldr	r2, [pc, #220]	; (8009fe4 <_printf_float+0x2f0>)
 8009f06:	2301      	movs	r3, #1
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	47b8      	blx	r7
 8009f0e:	3001      	adds	r0, #1
 8009f10:	f43f af51 	beq.w	8009db6 <_printf_float+0xc2>
 8009f14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	db02      	blt.n	8009f22 <_printf_float+0x22e>
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	07d8      	lsls	r0, r3, #31
 8009f20:	d510      	bpl.n	8009f44 <_printf_float+0x250>
 8009f22:	ee18 3a10 	vmov	r3, s16
 8009f26:	4652      	mov	r2, sl
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	47b8      	blx	r7
 8009f2e:	3001      	adds	r0, #1
 8009f30:	f43f af41 	beq.w	8009db6 <_printf_float+0xc2>
 8009f34:	f04f 0800 	mov.w	r8, #0
 8009f38:	f104 091a 	add.w	r9, r4, #26
 8009f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	4543      	cmp	r3, r8
 8009f42:	dc09      	bgt.n	8009f58 <_printf_float+0x264>
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	079b      	lsls	r3, r3, #30
 8009f48:	f100 8105 	bmi.w	800a156 <_printf_float+0x462>
 8009f4c:	68e0      	ldr	r0, [r4, #12]
 8009f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f50:	4298      	cmp	r0, r3
 8009f52:	bfb8      	it	lt
 8009f54:	4618      	movlt	r0, r3
 8009f56:	e730      	b.n	8009dba <_printf_float+0xc6>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	464a      	mov	r2, r9
 8009f5c:	4631      	mov	r1, r6
 8009f5e:	4628      	mov	r0, r5
 8009f60:	47b8      	blx	r7
 8009f62:	3001      	adds	r0, #1
 8009f64:	f43f af27 	beq.w	8009db6 <_printf_float+0xc2>
 8009f68:	f108 0801 	add.w	r8, r8, #1
 8009f6c:	e7e6      	b.n	8009f3c <_printf_float+0x248>
 8009f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	dc39      	bgt.n	8009fe8 <_printf_float+0x2f4>
 8009f74:	4a1b      	ldr	r2, [pc, #108]	; (8009fe4 <_printf_float+0x2f0>)
 8009f76:	2301      	movs	r3, #1
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	47b8      	blx	r7
 8009f7e:	3001      	adds	r0, #1
 8009f80:	f43f af19 	beq.w	8009db6 <_printf_float+0xc2>
 8009f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	d102      	bne.n	8009f92 <_printf_float+0x29e>
 8009f8c:	6823      	ldr	r3, [r4, #0]
 8009f8e:	07d9      	lsls	r1, r3, #31
 8009f90:	d5d8      	bpl.n	8009f44 <_printf_float+0x250>
 8009f92:	ee18 3a10 	vmov	r3, s16
 8009f96:	4652      	mov	r2, sl
 8009f98:	4631      	mov	r1, r6
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	47b8      	blx	r7
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	f43f af09 	beq.w	8009db6 <_printf_float+0xc2>
 8009fa4:	f04f 0900 	mov.w	r9, #0
 8009fa8:	f104 0a1a 	add.w	sl, r4, #26
 8009fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fae:	425b      	negs	r3, r3
 8009fb0:	454b      	cmp	r3, r9
 8009fb2:	dc01      	bgt.n	8009fb8 <_printf_float+0x2c4>
 8009fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb6:	e792      	b.n	8009ede <_printf_float+0x1ea>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	4652      	mov	r2, sl
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	47b8      	blx	r7
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	f43f aef7 	beq.w	8009db6 <_printf_float+0xc2>
 8009fc8:	f109 0901 	add.w	r9, r9, #1
 8009fcc:	e7ee      	b.n	8009fac <_printf_float+0x2b8>
 8009fce:	bf00      	nop
 8009fd0:	7fefffff 	.word	0x7fefffff
 8009fd4:	0800ca04 	.word	0x0800ca04
 8009fd8:	0800ca08 	.word	0x0800ca08
 8009fdc:	0800ca10 	.word	0x0800ca10
 8009fe0:	0800ca0c 	.word	0x0800ca0c
 8009fe4:	0800ca14 	.word	0x0800ca14
 8009fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fec:	429a      	cmp	r2, r3
 8009fee:	bfa8      	it	ge
 8009ff0:	461a      	movge	r2, r3
 8009ff2:	2a00      	cmp	r2, #0
 8009ff4:	4691      	mov	r9, r2
 8009ff6:	dc37      	bgt.n	800a068 <_printf_float+0x374>
 8009ff8:	f04f 0b00 	mov.w	fp, #0
 8009ffc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a000:	f104 021a 	add.w	r2, r4, #26
 800a004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a006:	9305      	str	r3, [sp, #20]
 800a008:	eba3 0309 	sub.w	r3, r3, r9
 800a00c:	455b      	cmp	r3, fp
 800a00e:	dc33      	bgt.n	800a078 <_printf_float+0x384>
 800a010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a014:	429a      	cmp	r2, r3
 800a016:	db3b      	blt.n	800a090 <_printf_float+0x39c>
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	07da      	lsls	r2, r3, #31
 800a01c:	d438      	bmi.n	800a090 <_printf_float+0x39c>
 800a01e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a020:	9a05      	ldr	r2, [sp, #20]
 800a022:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a024:	1a9a      	subs	r2, r3, r2
 800a026:	eba3 0901 	sub.w	r9, r3, r1
 800a02a:	4591      	cmp	r9, r2
 800a02c:	bfa8      	it	ge
 800a02e:	4691      	movge	r9, r2
 800a030:	f1b9 0f00 	cmp.w	r9, #0
 800a034:	dc35      	bgt.n	800a0a2 <_printf_float+0x3ae>
 800a036:	f04f 0800 	mov.w	r8, #0
 800a03a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a03e:	f104 0a1a 	add.w	sl, r4, #26
 800a042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a046:	1a9b      	subs	r3, r3, r2
 800a048:	eba3 0309 	sub.w	r3, r3, r9
 800a04c:	4543      	cmp	r3, r8
 800a04e:	f77f af79 	ble.w	8009f44 <_printf_float+0x250>
 800a052:	2301      	movs	r3, #1
 800a054:	4652      	mov	r2, sl
 800a056:	4631      	mov	r1, r6
 800a058:	4628      	mov	r0, r5
 800a05a:	47b8      	blx	r7
 800a05c:	3001      	adds	r0, #1
 800a05e:	f43f aeaa 	beq.w	8009db6 <_printf_float+0xc2>
 800a062:	f108 0801 	add.w	r8, r8, #1
 800a066:	e7ec      	b.n	800a042 <_printf_float+0x34e>
 800a068:	4613      	mov	r3, r2
 800a06a:	4631      	mov	r1, r6
 800a06c:	4642      	mov	r2, r8
 800a06e:	4628      	mov	r0, r5
 800a070:	47b8      	blx	r7
 800a072:	3001      	adds	r0, #1
 800a074:	d1c0      	bne.n	8009ff8 <_printf_float+0x304>
 800a076:	e69e      	b.n	8009db6 <_printf_float+0xc2>
 800a078:	2301      	movs	r3, #1
 800a07a:	4631      	mov	r1, r6
 800a07c:	4628      	mov	r0, r5
 800a07e:	9205      	str	r2, [sp, #20]
 800a080:	47b8      	blx	r7
 800a082:	3001      	adds	r0, #1
 800a084:	f43f ae97 	beq.w	8009db6 <_printf_float+0xc2>
 800a088:	9a05      	ldr	r2, [sp, #20]
 800a08a:	f10b 0b01 	add.w	fp, fp, #1
 800a08e:	e7b9      	b.n	800a004 <_printf_float+0x310>
 800a090:	ee18 3a10 	vmov	r3, s16
 800a094:	4652      	mov	r2, sl
 800a096:	4631      	mov	r1, r6
 800a098:	4628      	mov	r0, r5
 800a09a:	47b8      	blx	r7
 800a09c:	3001      	adds	r0, #1
 800a09e:	d1be      	bne.n	800a01e <_printf_float+0x32a>
 800a0a0:	e689      	b.n	8009db6 <_printf_float+0xc2>
 800a0a2:	9a05      	ldr	r2, [sp, #20]
 800a0a4:	464b      	mov	r3, r9
 800a0a6:	4442      	add	r2, r8
 800a0a8:	4631      	mov	r1, r6
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	47b8      	blx	r7
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	d1c1      	bne.n	800a036 <_printf_float+0x342>
 800a0b2:	e680      	b.n	8009db6 <_printf_float+0xc2>
 800a0b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0b6:	2a01      	cmp	r2, #1
 800a0b8:	dc01      	bgt.n	800a0be <_printf_float+0x3ca>
 800a0ba:	07db      	lsls	r3, r3, #31
 800a0bc:	d538      	bpl.n	800a130 <_printf_float+0x43c>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	4631      	mov	r1, r6
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	47b8      	blx	r7
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	f43f ae74 	beq.w	8009db6 <_printf_float+0xc2>
 800a0ce:	ee18 3a10 	vmov	r3, s16
 800a0d2:	4652      	mov	r2, sl
 800a0d4:	4631      	mov	r1, r6
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	47b8      	blx	r7
 800a0da:	3001      	adds	r0, #1
 800a0dc:	f43f ae6b 	beq.w	8009db6 <_printf_float+0xc2>
 800a0e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f7f6 fd0e 	bl	8000b08 <__aeabi_dcmpeq>
 800a0ec:	b9d8      	cbnz	r0, 800a126 <_printf_float+0x432>
 800a0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f0:	f108 0201 	add.w	r2, r8, #1
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	4631      	mov	r1, r6
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	47b8      	blx	r7
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	d10e      	bne.n	800a11e <_printf_float+0x42a>
 800a100:	e659      	b.n	8009db6 <_printf_float+0xc2>
 800a102:	2301      	movs	r3, #1
 800a104:	4652      	mov	r2, sl
 800a106:	4631      	mov	r1, r6
 800a108:	4628      	mov	r0, r5
 800a10a:	47b8      	blx	r7
 800a10c:	3001      	adds	r0, #1
 800a10e:	f43f ae52 	beq.w	8009db6 <_printf_float+0xc2>
 800a112:	f108 0801 	add.w	r8, r8, #1
 800a116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a118:	3b01      	subs	r3, #1
 800a11a:	4543      	cmp	r3, r8
 800a11c:	dcf1      	bgt.n	800a102 <_printf_float+0x40e>
 800a11e:	464b      	mov	r3, r9
 800a120:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a124:	e6dc      	b.n	8009ee0 <_printf_float+0x1ec>
 800a126:	f04f 0800 	mov.w	r8, #0
 800a12a:	f104 0a1a 	add.w	sl, r4, #26
 800a12e:	e7f2      	b.n	800a116 <_printf_float+0x422>
 800a130:	2301      	movs	r3, #1
 800a132:	4642      	mov	r2, r8
 800a134:	e7df      	b.n	800a0f6 <_printf_float+0x402>
 800a136:	2301      	movs	r3, #1
 800a138:	464a      	mov	r2, r9
 800a13a:	4631      	mov	r1, r6
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b8      	blx	r7
 800a140:	3001      	adds	r0, #1
 800a142:	f43f ae38 	beq.w	8009db6 <_printf_float+0xc2>
 800a146:	f108 0801 	add.w	r8, r8, #1
 800a14a:	68e3      	ldr	r3, [r4, #12]
 800a14c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a14e:	1a5b      	subs	r3, r3, r1
 800a150:	4543      	cmp	r3, r8
 800a152:	dcf0      	bgt.n	800a136 <_printf_float+0x442>
 800a154:	e6fa      	b.n	8009f4c <_printf_float+0x258>
 800a156:	f04f 0800 	mov.w	r8, #0
 800a15a:	f104 0919 	add.w	r9, r4, #25
 800a15e:	e7f4      	b.n	800a14a <_printf_float+0x456>

0800a160 <_printf_common>:
 800a160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a164:	4616      	mov	r6, r2
 800a166:	4699      	mov	r9, r3
 800a168:	688a      	ldr	r2, [r1, #8]
 800a16a:	690b      	ldr	r3, [r1, #16]
 800a16c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a170:	4293      	cmp	r3, r2
 800a172:	bfb8      	it	lt
 800a174:	4613      	movlt	r3, r2
 800a176:	6033      	str	r3, [r6, #0]
 800a178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a17c:	4607      	mov	r7, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	b10a      	cbz	r2, 800a186 <_printf_common+0x26>
 800a182:	3301      	adds	r3, #1
 800a184:	6033      	str	r3, [r6, #0]
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	0699      	lsls	r1, r3, #26
 800a18a:	bf42      	ittt	mi
 800a18c:	6833      	ldrmi	r3, [r6, #0]
 800a18e:	3302      	addmi	r3, #2
 800a190:	6033      	strmi	r3, [r6, #0]
 800a192:	6825      	ldr	r5, [r4, #0]
 800a194:	f015 0506 	ands.w	r5, r5, #6
 800a198:	d106      	bne.n	800a1a8 <_printf_common+0x48>
 800a19a:	f104 0a19 	add.w	sl, r4, #25
 800a19e:	68e3      	ldr	r3, [r4, #12]
 800a1a0:	6832      	ldr	r2, [r6, #0]
 800a1a2:	1a9b      	subs	r3, r3, r2
 800a1a4:	42ab      	cmp	r3, r5
 800a1a6:	dc26      	bgt.n	800a1f6 <_printf_common+0x96>
 800a1a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1ac:	1e13      	subs	r3, r2, #0
 800a1ae:	6822      	ldr	r2, [r4, #0]
 800a1b0:	bf18      	it	ne
 800a1b2:	2301      	movne	r3, #1
 800a1b4:	0692      	lsls	r2, r2, #26
 800a1b6:	d42b      	bmi.n	800a210 <_printf_common+0xb0>
 800a1b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1bc:	4649      	mov	r1, r9
 800a1be:	4638      	mov	r0, r7
 800a1c0:	47c0      	blx	r8
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	d01e      	beq.n	800a204 <_printf_common+0xa4>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	68e5      	ldr	r5, [r4, #12]
 800a1ca:	6832      	ldr	r2, [r6, #0]
 800a1cc:	f003 0306 	and.w	r3, r3, #6
 800a1d0:	2b04      	cmp	r3, #4
 800a1d2:	bf08      	it	eq
 800a1d4:	1aad      	subeq	r5, r5, r2
 800a1d6:	68a3      	ldr	r3, [r4, #8]
 800a1d8:	6922      	ldr	r2, [r4, #16]
 800a1da:	bf0c      	ite	eq
 800a1dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1e0:	2500      	movne	r5, #0
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	bfc4      	itt	gt
 800a1e6:	1a9b      	subgt	r3, r3, r2
 800a1e8:	18ed      	addgt	r5, r5, r3
 800a1ea:	2600      	movs	r6, #0
 800a1ec:	341a      	adds	r4, #26
 800a1ee:	42b5      	cmp	r5, r6
 800a1f0:	d11a      	bne.n	800a228 <_printf_common+0xc8>
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	e008      	b.n	800a208 <_printf_common+0xa8>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	4652      	mov	r2, sl
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	4638      	mov	r0, r7
 800a1fe:	47c0      	blx	r8
 800a200:	3001      	adds	r0, #1
 800a202:	d103      	bne.n	800a20c <_printf_common+0xac>
 800a204:	f04f 30ff 	mov.w	r0, #4294967295
 800a208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a20c:	3501      	adds	r5, #1
 800a20e:	e7c6      	b.n	800a19e <_printf_common+0x3e>
 800a210:	18e1      	adds	r1, r4, r3
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	2030      	movs	r0, #48	; 0x30
 800a216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a21a:	4422      	add	r2, r4
 800a21c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a224:	3302      	adds	r3, #2
 800a226:	e7c7      	b.n	800a1b8 <_printf_common+0x58>
 800a228:	2301      	movs	r3, #1
 800a22a:	4622      	mov	r2, r4
 800a22c:	4649      	mov	r1, r9
 800a22e:	4638      	mov	r0, r7
 800a230:	47c0      	blx	r8
 800a232:	3001      	adds	r0, #1
 800a234:	d0e6      	beq.n	800a204 <_printf_common+0xa4>
 800a236:	3601      	adds	r6, #1
 800a238:	e7d9      	b.n	800a1ee <_printf_common+0x8e>
	...

0800a23c <_printf_i>:
 800a23c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a240:	7e0f      	ldrb	r7, [r1, #24]
 800a242:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a244:	2f78      	cmp	r7, #120	; 0x78
 800a246:	4691      	mov	r9, r2
 800a248:	4680      	mov	r8, r0
 800a24a:	460c      	mov	r4, r1
 800a24c:	469a      	mov	sl, r3
 800a24e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a252:	d807      	bhi.n	800a264 <_printf_i+0x28>
 800a254:	2f62      	cmp	r7, #98	; 0x62
 800a256:	d80a      	bhi.n	800a26e <_printf_i+0x32>
 800a258:	2f00      	cmp	r7, #0
 800a25a:	f000 80d8 	beq.w	800a40e <_printf_i+0x1d2>
 800a25e:	2f58      	cmp	r7, #88	; 0x58
 800a260:	f000 80a3 	beq.w	800a3aa <_printf_i+0x16e>
 800a264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a26c:	e03a      	b.n	800a2e4 <_printf_i+0xa8>
 800a26e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a272:	2b15      	cmp	r3, #21
 800a274:	d8f6      	bhi.n	800a264 <_printf_i+0x28>
 800a276:	a101      	add	r1, pc, #4	; (adr r1, 800a27c <_printf_i+0x40>)
 800a278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a27c:	0800a2d5 	.word	0x0800a2d5
 800a280:	0800a2e9 	.word	0x0800a2e9
 800a284:	0800a265 	.word	0x0800a265
 800a288:	0800a265 	.word	0x0800a265
 800a28c:	0800a265 	.word	0x0800a265
 800a290:	0800a265 	.word	0x0800a265
 800a294:	0800a2e9 	.word	0x0800a2e9
 800a298:	0800a265 	.word	0x0800a265
 800a29c:	0800a265 	.word	0x0800a265
 800a2a0:	0800a265 	.word	0x0800a265
 800a2a4:	0800a265 	.word	0x0800a265
 800a2a8:	0800a3f5 	.word	0x0800a3f5
 800a2ac:	0800a319 	.word	0x0800a319
 800a2b0:	0800a3d7 	.word	0x0800a3d7
 800a2b4:	0800a265 	.word	0x0800a265
 800a2b8:	0800a265 	.word	0x0800a265
 800a2bc:	0800a417 	.word	0x0800a417
 800a2c0:	0800a265 	.word	0x0800a265
 800a2c4:	0800a319 	.word	0x0800a319
 800a2c8:	0800a265 	.word	0x0800a265
 800a2cc:	0800a265 	.word	0x0800a265
 800a2d0:	0800a3df 	.word	0x0800a3df
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	1d1a      	adds	r2, r3, #4
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	602a      	str	r2, [r5, #0]
 800a2dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e0a3      	b.n	800a430 <_printf_i+0x1f4>
 800a2e8:	6820      	ldr	r0, [r4, #0]
 800a2ea:	6829      	ldr	r1, [r5, #0]
 800a2ec:	0606      	lsls	r6, r0, #24
 800a2ee:	f101 0304 	add.w	r3, r1, #4
 800a2f2:	d50a      	bpl.n	800a30a <_printf_i+0xce>
 800a2f4:	680e      	ldr	r6, [r1, #0]
 800a2f6:	602b      	str	r3, [r5, #0]
 800a2f8:	2e00      	cmp	r6, #0
 800a2fa:	da03      	bge.n	800a304 <_printf_i+0xc8>
 800a2fc:	232d      	movs	r3, #45	; 0x2d
 800a2fe:	4276      	negs	r6, r6
 800a300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a304:	485e      	ldr	r0, [pc, #376]	; (800a480 <_printf_i+0x244>)
 800a306:	230a      	movs	r3, #10
 800a308:	e019      	b.n	800a33e <_printf_i+0x102>
 800a30a:	680e      	ldr	r6, [r1, #0]
 800a30c:	602b      	str	r3, [r5, #0]
 800a30e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a312:	bf18      	it	ne
 800a314:	b236      	sxthne	r6, r6
 800a316:	e7ef      	b.n	800a2f8 <_printf_i+0xbc>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	6820      	ldr	r0, [r4, #0]
 800a31c:	1d19      	adds	r1, r3, #4
 800a31e:	6029      	str	r1, [r5, #0]
 800a320:	0601      	lsls	r1, r0, #24
 800a322:	d501      	bpl.n	800a328 <_printf_i+0xec>
 800a324:	681e      	ldr	r6, [r3, #0]
 800a326:	e002      	b.n	800a32e <_printf_i+0xf2>
 800a328:	0646      	lsls	r6, r0, #25
 800a32a:	d5fb      	bpl.n	800a324 <_printf_i+0xe8>
 800a32c:	881e      	ldrh	r6, [r3, #0]
 800a32e:	4854      	ldr	r0, [pc, #336]	; (800a480 <_printf_i+0x244>)
 800a330:	2f6f      	cmp	r7, #111	; 0x6f
 800a332:	bf0c      	ite	eq
 800a334:	2308      	moveq	r3, #8
 800a336:	230a      	movne	r3, #10
 800a338:	2100      	movs	r1, #0
 800a33a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a33e:	6865      	ldr	r5, [r4, #4]
 800a340:	60a5      	str	r5, [r4, #8]
 800a342:	2d00      	cmp	r5, #0
 800a344:	bfa2      	ittt	ge
 800a346:	6821      	ldrge	r1, [r4, #0]
 800a348:	f021 0104 	bicge.w	r1, r1, #4
 800a34c:	6021      	strge	r1, [r4, #0]
 800a34e:	b90e      	cbnz	r6, 800a354 <_printf_i+0x118>
 800a350:	2d00      	cmp	r5, #0
 800a352:	d04d      	beq.n	800a3f0 <_printf_i+0x1b4>
 800a354:	4615      	mov	r5, r2
 800a356:	fbb6 f1f3 	udiv	r1, r6, r3
 800a35a:	fb03 6711 	mls	r7, r3, r1, r6
 800a35e:	5dc7      	ldrb	r7, [r0, r7]
 800a360:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a364:	4637      	mov	r7, r6
 800a366:	42bb      	cmp	r3, r7
 800a368:	460e      	mov	r6, r1
 800a36a:	d9f4      	bls.n	800a356 <_printf_i+0x11a>
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d10b      	bne.n	800a388 <_printf_i+0x14c>
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	07de      	lsls	r6, r3, #31
 800a374:	d508      	bpl.n	800a388 <_printf_i+0x14c>
 800a376:	6923      	ldr	r3, [r4, #16]
 800a378:	6861      	ldr	r1, [r4, #4]
 800a37a:	4299      	cmp	r1, r3
 800a37c:	bfde      	ittt	le
 800a37e:	2330      	movle	r3, #48	; 0x30
 800a380:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a384:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a388:	1b52      	subs	r2, r2, r5
 800a38a:	6122      	str	r2, [r4, #16]
 800a38c:	f8cd a000 	str.w	sl, [sp]
 800a390:	464b      	mov	r3, r9
 800a392:	aa03      	add	r2, sp, #12
 800a394:	4621      	mov	r1, r4
 800a396:	4640      	mov	r0, r8
 800a398:	f7ff fee2 	bl	800a160 <_printf_common>
 800a39c:	3001      	adds	r0, #1
 800a39e:	d14c      	bne.n	800a43a <_printf_i+0x1fe>
 800a3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a4:	b004      	add	sp, #16
 800a3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3aa:	4835      	ldr	r0, [pc, #212]	; (800a480 <_printf_i+0x244>)
 800a3ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a3b0:	6829      	ldr	r1, [r5, #0]
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3b8:	6029      	str	r1, [r5, #0]
 800a3ba:	061d      	lsls	r5, r3, #24
 800a3bc:	d514      	bpl.n	800a3e8 <_printf_i+0x1ac>
 800a3be:	07df      	lsls	r7, r3, #31
 800a3c0:	bf44      	itt	mi
 800a3c2:	f043 0320 	orrmi.w	r3, r3, #32
 800a3c6:	6023      	strmi	r3, [r4, #0]
 800a3c8:	b91e      	cbnz	r6, 800a3d2 <_printf_i+0x196>
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	f023 0320 	bic.w	r3, r3, #32
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	2310      	movs	r3, #16
 800a3d4:	e7b0      	b.n	800a338 <_printf_i+0xfc>
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	f043 0320 	orr.w	r3, r3, #32
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	2378      	movs	r3, #120	; 0x78
 800a3e0:	4828      	ldr	r0, [pc, #160]	; (800a484 <_printf_i+0x248>)
 800a3e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3e6:	e7e3      	b.n	800a3b0 <_printf_i+0x174>
 800a3e8:	0659      	lsls	r1, r3, #25
 800a3ea:	bf48      	it	mi
 800a3ec:	b2b6      	uxthmi	r6, r6
 800a3ee:	e7e6      	b.n	800a3be <_printf_i+0x182>
 800a3f0:	4615      	mov	r5, r2
 800a3f2:	e7bb      	b.n	800a36c <_printf_i+0x130>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	6826      	ldr	r6, [r4, #0]
 800a3f8:	6961      	ldr	r1, [r4, #20]
 800a3fa:	1d18      	adds	r0, r3, #4
 800a3fc:	6028      	str	r0, [r5, #0]
 800a3fe:	0635      	lsls	r5, r6, #24
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	d501      	bpl.n	800a408 <_printf_i+0x1cc>
 800a404:	6019      	str	r1, [r3, #0]
 800a406:	e002      	b.n	800a40e <_printf_i+0x1d2>
 800a408:	0670      	lsls	r0, r6, #25
 800a40a:	d5fb      	bpl.n	800a404 <_printf_i+0x1c8>
 800a40c:	8019      	strh	r1, [r3, #0]
 800a40e:	2300      	movs	r3, #0
 800a410:	6123      	str	r3, [r4, #16]
 800a412:	4615      	mov	r5, r2
 800a414:	e7ba      	b.n	800a38c <_printf_i+0x150>
 800a416:	682b      	ldr	r3, [r5, #0]
 800a418:	1d1a      	adds	r2, r3, #4
 800a41a:	602a      	str	r2, [r5, #0]
 800a41c:	681d      	ldr	r5, [r3, #0]
 800a41e:	6862      	ldr	r2, [r4, #4]
 800a420:	2100      	movs	r1, #0
 800a422:	4628      	mov	r0, r5
 800a424:	f7f5 fefc 	bl	8000220 <memchr>
 800a428:	b108      	cbz	r0, 800a42e <_printf_i+0x1f2>
 800a42a:	1b40      	subs	r0, r0, r5
 800a42c:	6060      	str	r0, [r4, #4]
 800a42e:	6863      	ldr	r3, [r4, #4]
 800a430:	6123      	str	r3, [r4, #16]
 800a432:	2300      	movs	r3, #0
 800a434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a438:	e7a8      	b.n	800a38c <_printf_i+0x150>
 800a43a:	6923      	ldr	r3, [r4, #16]
 800a43c:	462a      	mov	r2, r5
 800a43e:	4649      	mov	r1, r9
 800a440:	4640      	mov	r0, r8
 800a442:	47d0      	blx	sl
 800a444:	3001      	adds	r0, #1
 800a446:	d0ab      	beq.n	800a3a0 <_printf_i+0x164>
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	079b      	lsls	r3, r3, #30
 800a44c:	d413      	bmi.n	800a476 <_printf_i+0x23a>
 800a44e:	68e0      	ldr	r0, [r4, #12]
 800a450:	9b03      	ldr	r3, [sp, #12]
 800a452:	4298      	cmp	r0, r3
 800a454:	bfb8      	it	lt
 800a456:	4618      	movlt	r0, r3
 800a458:	e7a4      	b.n	800a3a4 <_printf_i+0x168>
 800a45a:	2301      	movs	r3, #1
 800a45c:	4632      	mov	r2, r6
 800a45e:	4649      	mov	r1, r9
 800a460:	4640      	mov	r0, r8
 800a462:	47d0      	blx	sl
 800a464:	3001      	adds	r0, #1
 800a466:	d09b      	beq.n	800a3a0 <_printf_i+0x164>
 800a468:	3501      	adds	r5, #1
 800a46a:	68e3      	ldr	r3, [r4, #12]
 800a46c:	9903      	ldr	r1, [sp, #12]
 800a46e:	1a5b      	subs	r3, r3, r1
 800a470:	42ab      	cmp	r3, r5
 800a472:	dcf2      	bgt.n	800a45a <_printf_i+0x21e>
 800a474:	e7eb      	b.n	800a44e <_printf_i+0x212>
 800a476:	2500      	movs	r5, #0
 800a478:	f104 0619 	add.w	r6, r4, #25
 800a47c:	e7f5      	b.n	800a46a <_printf_i+0x22e>
 800a47e:	bf00      	nop
 800a480:	0800ca16 	.word	0x0800ca16
 800a484:	0800ca27 	.word	0x0800ca27

0800a488 <siprintf>:
 800a488:	b40e      	push	{r1, r2, r3}
 800a48a:	b500      	push	{lr}
 800a48c:	b09c      	sub	sp, #112	; 0x70
 800a48e:	ab1d      	add	r3, sp, #116	; 0x74
 800a490:	9002      	str	r0, [sp, #8]
 800a492:	9006      	str	r0, [sp, #24]
 800a494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a498:	4809      	ldr	r0, [pc, #36]	; (800a4c0 <siprintf+0x38>)
 800a49a:	9107      	str	r1, [sp, #28]
 800a49c:	9104      	str	r1, [sp, #16]
 800a49e:	4909      	ldr	r1, [pc, #36]	; (800a4c4 <siprintf+0x3c>)
 800a4a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a4:	9105      	str	r1, [sp, #20]
 800a4a6:	6800      	ldr	r0, [r0, #0]
 800a4a8:	9301      	str	r3, [sp, #4]
 800a4aa:	a902      	add	r1, sp, #8
 800a4ac:	f001 fb76 	bl	800bb9c <_svfiprintf_r>
 800a4b0:	9b02      	ldr	r3, [sp, #8]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	701a      	strb	r2, [r3, #0]
 800a4b6:	b01c      	add	sp, #112	; 0x70
 800a4b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4bc:	b003      	add	sp, #12
 800a4be:	4770      	bx	lr
 800a4c0:	2000010c 	.word	0x2000010c
 800a4c4:	ffff0208 	.word	0xffff0208

0800a4c8 <quorem>:
 800a4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	6903      	ldr	r3, [r0, #16]
 800a4ce:	690c      	ldr	r4, [r1, #16]
 800a4d0:	42a3      	cmp	r3, r4
 800a4d2:	4607      	mov	r7, r0
 800a4d4:	f2c0 8081 	blt.w	800a5da <quorem+0x112>
 800a4d8:	3c01      	subs	r4, #1
 800a4da:	f101 0814 	add.w	r8, r1, #20
 800a4de:	f100 0514 	add.w	r5, r0, #20
 800a4e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4e6:	9301      	str	r3, [sp, #4]
 800a4e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a500:	d331      	bcc.n	800a566 <quorem+0x9e>
 800a502:	f04f 0e00 	mov.w	lr, #0
 800a506:	4640      	mov	r0, r8
 800a508:	46ac      	mov	ip, r5
 800a50a:	46f2      	mov	sl, lr
 800a50c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a510:	b293      	uxth	r3, r2
 800a512:	fb06 e303 	mla	r3, r6, r3, lr
 800a516:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	ebaa 0303 	sub.w	r3, sl, r3
 800a520:	f8dc a000 	ldr.w	sl, [ip]
 800a524:	0c12      	lsrs	r2, r2, #16
 800a526:	fa13 f38a 	uxtah	r3, r3, sl
 800a52a:	fb06 e202 	mla	r2, r6, r2, lr
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	9b00      	ldr	r3, [sp, #0]
 800a532:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a536:	b292      	uxth	r2, r2
 800a538:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a53c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a540:	f8bd 3000 	ldrh.w	r3, [sp]
 800a544:	4581      	cmp	r9, r0
 800a546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a54a:	f84c 3b04 	str.w	r3, [ip], #4
 800a54e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a552:	d2db      	bcs.n	800a50c <quorem+0x44>
 800a554:	f855 300b 	ldr.w	r3, [r5, fp]
 800a558:	b92b      	cbnz	r3, 800a566 <quorem+0x9e>
 800a55a:	9b01      	ldr	r3, [sp, #4]
 800a55c:	3b04      	subs	r3, #4
 800a55e:	429d      	cmp	r5, r3
 800a560:	461a      	mov	r2, r3
 800a562:	d32e      	bcc.n	800a5c2 <quorem+0xfa>
 800a564:	613c      	str	r4, [r7, #16]
 800a566:	4638      	mov	r0, r7
 800a568:	f001 f8c4 	bl	800b6f4 <__mcmp>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	db24      	blt.n	800a5ba <quorem+0xf2>
 800a570:	3601      	adds	r6, #1
 800a572:	4628      	mov	r0, r5
 800a574:	f04f 0c00 	mov.w	ip, #0
 800a578:	f858 2b04 	ldr.w	r2, [r8], #4
 800a57c:	f8d0 e000 	ldr.w	lr, [r0]
 800a580:	b293      	uxth	r3, r2
 800a582:	ebac 0303 	sub.w	r3, ip, r3
 800a586:	0c12      	lsrs	r2, r2, #16
 800a588:	fa13 f38e 	uxtah	r3, r3, lr
 800a58c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a594:	b29b      	uxth	r3, r3
 800a596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a59a:	45c1      	cmp	r9, r8
 800a59c:	f840 3b04 	str.w	r3, [r0], #4
 800a5a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5a4:	d2e8      	bcs.n	800a578 <quorem+0xb0>
 800a5a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5ae:	b922      	cbnz	r2, 800a5ba <quorem+0xf2>
 800a5b0:	3b04      	subs	r3, #4
 800a5b2:	429d      	cmp	r5, r3
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	d30a      	bcc.n	800a5ce <quorem+0x106>
 800a5b8:	613c      	str	r4, [r7, #16]
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	b003      	add	sp, #12
 800a5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c2:	6812      	ldr	r2, [r2, #0]
 800a5c4:	3b04      	subs	r3, #4
 800a5c6:	2a00      	cmp	r2, #0
 800a5c8:	d1cc      	bne.n	800a564 <quorem+0x9c>
 800a5ca:	3c01      	subs	r4, #1
 800a5cc:	e7c7      	b.n	800a55e <quorem+0x96>
 800a5ce:	6812      	ldr	r2, [r2, #0]
 800a5d0:	3b04      	subs	r3, #4
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	d1f0      	bne.n	800a5b8 <quorem+0xf0>
 800a5d6:	3c01      	subs	r4, #1
 800a5d8:	e7eb      	b.n	800a5b2 <quorem+0xea>
 800a5da:	2000      	movs	r0, #0
 800a5dc:	e7ee      	b.n	800a5bc <quorem+0xf4>
	...

0800a5e0 <_dtoa_r>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	ed2d 8b04 	vpush	{d8-d9}
 800a5e8:	ec57 6b10 	vmov	r6, r7, d0
 800a5ec:	b093      	sub	sp, #76	; 0x4c
 800a5ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a5f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5f4:	9106      	str	r1, [sp, #24]
 800a5f6:	ee10 aa10 	vmov	sl, s0
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a5fe:	930c      	str	r3, [sp, #48]	; 0x30
 800a600:	46bb      	mov	fp, r7
 800a602:	b975      	cbnz	r5, 800a622 <_dtoa_r+0x42>
 800a604:	2010      	movs	r0, #16
 800a606:	f000 fddd 	bl	800b1c4 <malloc>
 800a60a:	4602      	mov	r2, r0
 800a60c:	6260      	str	r0, [r4, #36]	; 0x24
 800a60e:	b920      	cbnz	r0, 800a61a <_dtoa_r+0x3a>
 800a610:	4ba7      	ldr	r3, [pc, #668]	; (800a8b0 <_dtoa_r+0x2d0>)
 800a612:	21ea      	movs	r1, #234	; 0xea
 800a614:	48a7      	ldr	r0, [pc, #668]	; (800a8b4 <_dtoa_r+0x2d4>)
 800a616:	f001 fbd1 	bl	800bdbc <__assert_func>
 800a61a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a61e:	6005      	str	r5, [r0, #0]
 800a620:	60c5      	str	r5, [r0, #12]
 800a622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a624:	6819      	ldr	r1, [r3, #0]
 800a626:	b151      	cbz	r1, 800a63e <_dtoa_r+0x5e>
 800a628:	685a      	ldr	r2, [r3, #4]
 800a62a:	604a      	str	r2, [r1, #4]
 800a62c:	2301      	movs	r3, #1
 800a62e:	4093      	lsls	r3, r2
 800a630:	608b      	str	r3, [r1, #8]
 800a632:	4620      	mov	r0, r4
 800a634:	f000 fe1c 	bl	800b270 <_Bfree>
 800a638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]
 800a63e:	1e3b      	subs	r3, r7, #0
 800a640:	bfaa      	itet	ge
 800a642:	2300      	movge	r3, #0
 800a644:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a648:	f8c8 3000 	strge.w	r3, [r8]
 800a64c:	4b9a      	ldr	r3, [pc, #616]	; (800a8b8 <_dtoa_r+0x2d8>)
 800a64e:	bfbc      	itt	lt
 800a650:	2201      	movlt	r2, #1
 800a652:	f8c8 2000 	strlt.w	r2, [r8]
 800a656:	ea33 030b 	bics.w	r3, r3, fp
 800a65a:	d11b      	bne.n	800a694 <_dtoa_r+0xb4>
 800a65c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a65e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a662:	6013      	str	r3, [r2, #0]
 800a664:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a668:	4333      	orrs	r3, r6
 800a66a:	f000 8592 	beq.w	800b192 <_dtoa_r+0xbb2>
 800a66e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a670:	b963      	cbnz	r3, 800a68c <_dtoa_r+0xac>
 800a672:	4b92      	ldr	r3, [pc, #584]	; (800a8bc <_dtoa_r+0x2dc>)
 800a674:	e022      	b.n	800a6bc <_dtoa_r+0xdc>
 800a676:	4b92      	ldr	r3, [pc, #584]	; (800a8c0 <_dtoa_r+0x2e0>)
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	3308      	adds	r3, #8
 800a67c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	9801      	ldr	r0, [sp, #4]
 800a682:	b013      	add	sp, #76	; 0x4c
 800a684:	ecbd 8b04 	vpop	{d8-d9}
 800a688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68c:	4b8b      	ldr	r3, [pc, #556]	; (800a8bc <_dtoa_r+0x2dc>)
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	3303      	adds	r3, #3
 800a692:	e7f3      	b.n	800a67c <_dtoa_r+0x9c>
 800a694:	2200      	movs	r2, #0
 800a696:	2300      	movs	r3, #0
 800a698:	4650      	mov	r0, sl
 800a69a:	4659      	mov	r1, fp
 800a69c:	f7f6 fa34 	bl	8000b08 <__aeabi_dcmpeq>
 800a6a0:	ec4b ab19 	vmov	d9, sl, fp
 800a6a4:	4680      	mov	r8, r0
 800a6a6:	b158      	cbz	r0, 800a6c0 <_dtoa_r+0xe0>
 800a6a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 856b 	beq.w	800b18c <_dtoa_r+0xbac>
 800a6b6:	4883      	ldr	r0, [pc, #524]	; (800a8c4 <_dtoa_r+0x2e4>)
 800a6b8:	6018      	str	r0, [r3, #0]
 800a6ba:	1e43      	subs	r3, r0, #1
 800a6bc:	9301      	str	r3, [sp, #4]
 800a6be:	e7df      	b.n	800a680 <_dtoa_r+0xa0>
 800a6c0:	ec4b ab10 	vmov	d0, sl, fp
 800a6c4:	aa10      	add	r2, sp, #64	; 0x40
 800a6c6:	a911      	add	r1, sp, #68	; 0x44
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f001 f8b9 	bl	800b840 <__d2b>
 800a6ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a6d2:	ee08 0a10 	vmov	s16, r0
 800a6d6:	2d00      	cmp	r5, #0
 800a6d8:	f000 8084 	beq.w	800a7e4 <_dtoa_r+0x204>
 800a6dc:	ee19 3a90 	vmov	r3, s19
 800a6e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a6e8:	4656      	mov	r6, sl
 800a6ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a6ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a6f6:	4b74      	ldr	r3, [pc, #464]	; (800a8c8 <_dtoa_r+0x2e8>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	4639      	mov	r1, r7
 800a6fe:	f7f5 fde3 	bl	80002c8 <__aeabi_dsub>
 800a702:	a365      	add	r3, pc, #404	; (adr r3, 800a898 <_dtoa_r+0x2b8>)
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f7f5 ff96 	bl	8000638 <__aeabi_dmul>
 800a70c:	a364      	add	r3, pc, #400	; (adr r3, 800a8a0 <_dtoa_r+0x2c0>)
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	f7f5 fddb 	bl	80002cc <__adddf3>
 800a716:	4606      	mov	r6, r0
 800a718:	4628      	mov	r0, r5
 800a71a:	460f      	mov	r7, r1
 800a71c:	f7f5 ff22 	bl	8000564 <__aeabi_i2d>
 800a720:	a361      	add	r3, pc, #388	; (adr r3, 800a8a8 <_dtoa_r+0x2c8>)
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	f7f5 ff87 	bl	8000638 <__aeabi_dmul>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4630      	mov	r0, r6
 800a730:	4639      	mov	r1, r7
 800a732:	f7f5 fdcb 	bl	80002cc <__adddf3>
 800a736:	4606      	mov	r6, r0
 800a738:	460f      	mov	r7, r1
 800a73a:	f7f6 fa2d 	bl	8000b98 <__aeabi_d2iz>
 800a73e:	2200      	movs	r2, #0
 800a740:	9000      	str	r0, [sp, #0]
 800a742:	2300      	movs	r3, #0
 800a744:	4630      	mov	r0, r6
 800a746:	4639      	mov	r1, r7
 800a748:	f7f6 f9e8 	bl	8000b1c <__aeabi_dcmplt>
 800a74c:	b150      	cbz	r0, 800a764 <_dtoa_r+0x184>
 800a74e:	9800      	ldr	r0, [sp, #0]
 800a750:	f7f5 ff08 	bl	8000564 <__aeabi_i2d>
 800a754:	4632      	mov	r2, r6
 800a756:	463b      	mov	r3, r7
 800a758:	f7f6 f9d6 	bl	8000b08 <__aeabi_dcmpeq>
 800a75c:	b910      	cbnz	r0, 800a764 <_dtoa_r+0x184>
 800a75e:	9b00      	ldr	r3, [sp, #0]
 800a760:	3b01      	subs	r3, #1
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	9b00      	ldr	r3, [sp, #0]
 800a766:	2b16      	cmp	r3, #22
 800a768:	d85a      	bhi.n	800a820 <_dtoa_r+0x240>
 800a76a:	9a00      	ldr	r2, [sp, #0]
 800a76c:	4b57      	ldr	r3, [pc, #348]	; (800a8cc <_dtoa_r+0x2ec>)
 800a76e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	ec51 0b19 	vmov	r0, r1, d9
 800a77a:	f7f6 f9cf 	bl	8000b1c <__aeabi_dcmplt>
 800a77e:	2800      	cmp	r0, #0
 800a780:	d050      	beq.n	800a824 <_dtoa_r+0x244>
 800a782:	9b00      	ldr	r3, [sp, #0]
 800a784:	3b01      	subs	r3, #1
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	2300      	movs	r3, #0
 800a78a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a78c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a78e:	1b5d      	subs	r5, r3, r5
 800a790:	1e6b      	subs	r3, r5, #1
 800a792:	9305      	str	r3, [sp, #20]
 800a794:	bf45      	ittet	mi
 800a796:	f1c5 0301 	rsbmi	r3, r5, #1
 800a79a:	9304      	strmi	r3, [sp, #16]
 800a79c:	2300      	movpl	r3, #0
 800a79e:	2300      	movmi	r3, #0
 800a7a0:	bf4c      	ite	mi
 800a7a2:	9305      	strmi	r3, [sp, #20]
 800a7a4:	9304      	strpl	r3, [sp, #16]
 800a7a6:	9b00      	ldr	r3, [sp, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	db3d      	blt.n	800a828 <_dtoa_r+0x248>
 800a7ac:	9b05      	ldr	r3, [sp, #20]
 800a7ae:	9a00      	ldr	r2, [sp, #0]
 800a7b0:	920a      	str	r2, [sp, #40]	; 0x28
 800a7b2:	4413      	add	r3, r2
 800a7b4:	9305      	str	r3, [sp, #20]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	9307      	str	r3, [sp, #28]
 800a7ba:	9b06      	ldr	r3, [sp, #24]
 800a7bc:	2b09      	cmp	r3, #9
 800a7be:	f200 8089 	bhi.w	800a8d4 <_dtoa_r+0x2f4>
 800a7c2:	2b05      	cmp	r3, #5
 800a7c4:	bfc4      	itt	gt
 800a7c6:	3b04      	subgt	r3, #4
 800a7c8:	9306      	strgt	r3, [sp, #24]
 800a7ca:	9b06      	ldr	r3, [sp, #24]
 800a7cc:	f1a3 0302 	sub.w	r3, r3, #2
 800a7d0:	bfcc      	ite	gt
 800a7d2:	2500      	movgt	r5, #0
 800a7d4:	2501      	movle	r5, #1
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	f200 8087 	bhi.w	800a8ea <_dtoa_r+0x30a>
 800a7dc:	e8df f003 	tbb	[pc, r3]
 800a7e0:	59383a2d 	.word	0x59383a2d
 800a7e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a7e8:	441d      	add	r5, r3
 800a7ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7ee:	2b20      	cmp	r3, #32
 800a7f0:	bfc1      	itttt	gt
 800a7f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a7fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800a7fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a802:	bfda      	itte	le
 800a804:	f1c3 0320 	rsble	r3, r3, #32
 800a808:	fa06 f003 	lslle.w	r0, r6, r3
 800a80c:	4318      	orrgt	r0, r3
 800a80e:	f7f5 fe99 	bl	8000544 <__aeabi_ui2d>
 800a812:	2301      	movs	r3, #1
 800a814:	4606      	mov	r6, r0
 800a816:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a81a:	3d01      	subs	r5, #1
 800a81c:	930e      	str	r3, [sp, #56]	; 0x38
 800a81e:	e76a      	b.n	800a6f6 <_dtoa_r+0x116>
 800a820:	2301      	movs	r3, #1
 800a822:	e7b2      	b.n	800a78a <_dtoa_r+0x1aa>
 800a824:	900b      	str	r0, [sp, #44]	; 0x2c
 800a826:	e7b1      	b.n	800a78c <_dtoa_r+0x1ac>
 800a828:	9b04      	ldr	r3, [sp, #16]
 800a82a:	9a00      	ldr	r2, [sp, #0]
 800a82c:	1a9b      	subs	r3, r3, r2
 800a82e:	9304      	str	r3, [sp, #16]
 800a830:	4253      	negs	r3, r2
 800a832:	9307      	str	r3, [sp, #28]
 800a834:	2300      	movs	r3, #0
 800a836:	930a      	str	r3, [sp, #40]	; 0x28
 800a838:	e7bf      	b.n	800a7ba <_dtoa_r+0x1da>
 800a83a:	2300      	movs	r3, #0
 800a83c:	9308      	str	r3, [sp, #32]
 800a83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a840:	2b00      	cmp	r3, #0
 800a842:	dc55      	bgt.n	800a8f0 <_dtoa_r+0x310>
 800a844:	2301      	movs	r3, #1
 800a846:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a84a:	461a      	mov	r2, r3
 800a84c:	9209      	str	r2, [sp, #36]	; 0x24
 800a84e:	e00c      	b.n	800a86a <_dtoa_r+0x28a>
 800a850:	2301      	movs	r3, #1
 800a852:	e7f3      	b.n	800a83c <_dtoa_r+0x25c>
 800a854:	2300      	movs	r3, #0
 800a856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a858:	9308      	str	r3, [sp, #32]
 800a85a:	9b00      	ldr	r3, [sp, #0]
 800a85c:	4413      	add	r3, r2
 800a85e:	9302      	str	r3, [sp, #8]
 800a860:	3301      	adds	r3, #1
 800a862:	2b01      	cmp	r3, #1
 800a864:	9303      	str	r3, [sp, #12]
 800a866:	bfb8      	it	lt
 800a868:	2301      	movlt	r3, #1
 800a86a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a86c:	2200      	movs	r2, #0
 800a86e:	6042      	str	r2, [r0, #4]
 800a870:	2204      	movs	r2, #4
 800a872:	f102 0614 	add.w	r6, r2, #20
 800a876:	429e      	cmp	r6, r3
 800a878:	6841      	ldr	r1, [r0, #4]
 800a87a:	d93d      	bls.n	800a8f8 <_dtoa_r+0x318>
 800a87c:	4620      	mov	r0, r4
 800a87e:	f000 fcb7 	bl	800b1f0 <_Balloc>
 800a882:	9001      	str	r0, [sp, #4]
 800a884:	2800      	cmp	r0, #0
 800a886:	d13b      	bne.n	800a900 <_dtoa_r+0x320>
 800a888:	4b11      	ldr	r3, [pc, #68]	; (800a8d0 <_dtoa_r+0x2f0>)
 800a88a:	4602      	mov	r2, r0
 800a88c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a890:	e6c0      	b.n	800a614 <_dtoa_r+0x34>
 800a892:	2301      	movs	r3, #1
 800a894:	e7df      	b.n	800a856 <_dtoa_r+0x276>
 800a896:	bf00      	nop
 800a898:	636f4361 	.word	0x636f4361
 800a89c:	3fd287a7 	.word	0x3fd287a7
 800a8a0:	8b60c8b3 	.word	0x8b60c8b3
 800a8a4:	3fc68a28 	.word	0x3fc68a28
 800a8a8:	509f79fb 	.word	0x509f79fb
 800a8ac:	3fd34413 	.word	0x3fd34413
 800a8b0:	0800ca45 	.word	0x0800ca45
 800a8b4:	0800ca5c 	.word	0x0800ca5c
 800a8b8:	7ff00000 	.word	0x7ff00000
 800a8bc:	0800ca41 	.word	0x0800ca41
 800a8c0:	0800ca38 	.word	0x0800ca38
 800a8c4:	0800ca15 	.word	0x0800ca15
 800a8c8:	3ff80000 	.word	0x3ff80000
 800a8cc:	0800cb50 	.word	0x0800cb50
 800a8d0:	0800cab7 	.word	0x0800cab7
 800a8d4:	2501      	movs	r5, #1
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	9306      	str	r3, [sp, #24]
 800a8da:	9508      	str	r5, [sp, #32]
 800a8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2312      	movs	r3, #18
 800a8e8:	e7b0      	b.n	800a84c <_dtoa_r+0x26c>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	9308      	str	r3, [sp, #32]
 800a8ee:	e7f5      	b.n	800a8dc <_dtoa_r+0x2fc>
 800a8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8f6:	e7b8      	b.n	800a86a <_dtoa_r+0x28a>
 800a8f8:	3101      	adds	r1, #1
 800a8fa:	6041      	str	r1, [r0, #4]
 800a8fc:	0052      	lsls	r2, r2, #1
 800a8fe:	e7b8      	b.n	800a872 <_dtoa_r+0x292>
 800a900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a902:	9a01      	ldr	r2, [sp, #4]
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	9b03      	ldr	r3, [sp, #12]
 800a908:	2b0e      	cmp	r3, #14
 800a90a:	f200 809d 	bhi.w	800aa48 <_dtoa_r+0x468>
 800a90e:	2d00      	cmp	r5, #0
 800a910:	f000 809a 	beq.w	800aa48 <_dtoa_r+0x468>
 800a914:	9b00      	ldr	r3, [sp, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	dd32      	ble.n	800a980 <_dtoa_r+0x3a0>
 800a91a:	4ab7      	ldr	r2, [pc, #732]	; (800abf8 <_dtoa_r+0x618>)
 800a91c:	f003 030f 	and.w	r3, r3, #15
 800a920:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a924:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a928:	9b00      	ldr	r3, [sp, #0]
 800a92a:	05d8      	lsls	r0, r3, #23
 800a92c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a930:	d516      	bpl.n	800a960 <_dtoa_r+0x380>
 800a932:	4bb2      	ldr	r3, [pc, #712]	; (800abfc <_dtoa_r+0x61c>)
 800a934:	ec51 0b19 	vmov	r0, r1, d9
 800a938:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a93c:	f7f5 ffa6 	bl	800088c <__aeabi_ddiv>
 800a940:	f007 070f 	and.w	r7, r7, #15
 800a944:	4682      	mov	sl, r0
 800a946:	468b      	mov	fp, r1
 800a948:	2503      	movs	r5, #3
 800a94a:	4eac      	ldr	r6, [pc, #688]	; (800abfc <_dtoa_r+0x61c>)
 800a94c:	b957      	cbnz	r7, 800a964 <_dtoa_r+0x384>
 800a94e:	4642      	mov	r2, r8
 800a950:	464b      	mov	r3, r9
 800a952:	4650      	mov	r0, sl
 800a954:	4659      	mov	r1, fp
 800a956:	f7f5 ff99 	bl	800088c <__aeabi_ddiv>
 800a95a:	4682      	mov	sl, r0
 800a95c:	468b      	mov	fp, r1
 800a95e:	e028      	b.n	800a9b2 <_dtoa_r+0x3d2>
 800a960:	2502      	movs	r5, #2
 800a962:	e7f2      	b.n	800a94a <_dtoa_r+0x36a>
 800a964:	07f9      	lsls	r1, r7, #31
 800a966:	d508      	bpl.n	800a97a <_dtoa_r+0x39a>
 800a968:	4640      	mov	r0, r8
 800a96a:	4649      	mov	r1, r9
 800a96c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a970:	f7f5 fe62 	bl	8000638 <__aeabi_dmul>
 800a974:	3501      	adds	r5, #1
 800a976:	4680      	mov	r8, r0
 800a978:	4689      	mov	r9, r1
 800a97a:	107f      	asrs	r7, r7, #1
 800a97c:	3608      	adds	r6, #8
 800a97e:	e7e5      	b.n	800a94c <_dtoa_r+0x36c>
 800a980:	f000 809b 	beq.w	800aaba <_dtoa_r+0x4da>
 800a984:	9b00      	ldr	r3, [sp, #0]
 800a986:	4f9d      	ldr	r7, [pc, #628]	; (800abfc <_dtoa_r+0x61c>)
 800a988:	425e      	negs	r6, r3
 800a98a:	4b9b      	ldr	r3, [pc, #620]	; (800abf8 <_dtoa_r+0x618>)
 800a98c:	f006 020f 	and.w	r2, r6, #15
 800a990:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	ec51 0b19 	vmov	r0, r1, d9
 800a99c:	f7f5 fe4c 	bl	8000638 <__aeabi_dmul>
 800a9a0:	1136      	asrs	r6, r6, #4
 800a9a2:	4682      	mov	sl, r0
 800a9a4:	468b      	mov	fp, r1
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	2502      	movs	r5, #2
 800a9aa:	2e00      	cmp	r6, #0
 800a9ac:	d17a      	bne.n	800aaa4 <_dtoa_r+0x4c4>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1d3      	bne.n	800a95a <_dtoa_r+0x37a>
 800a9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f000 8082 	beq.w	800aabe <_dtoa_r+0x4de>
 800a9ba:	4b91      	ldr	r3, [pc, #580]	; (800ac00 <_dtoa_r+0x620>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4650      	mov	r0, sl
 800a9c0:	4659      	mov	r1, fp
 800a9c2:	f7f6 f8ab 	bl	8000b1c <__aeabi_dcmplt>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	d079      	beq.n	800aabe <_dtoa_r+0x4de>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d076      	beq.n	800aabe <_dtoa_r+0x4de>
 800a9d0:	9b02      	ldr	r3, [sp, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dd36      	ble.n	800aa44 <_dtoa_r+0x464>
 800a9d6:	9b00      	ldr	r3, [sp, #0]
 800a9d8:	4650      	mov	r0, sl
 800a9da:	4659      	mov	r1, fp
 800a9dc:	1e5f      	subs	r7, r3, #1
 800a9de:	2200      	movs	r2, #0
 800a9e0:	4b88      	ldr	r3, [pc, #544]	; (800ac04 <_dtoa_r+0x624>)
 800a9e2:	f7f5 fe29 	bl	8000638 <__aeabi_dmul>
 800a9e6:	9e02      	ldr	r6, [sp, #8]
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	468b      	mov	fp, r1
 800a9ec:	3501      	adds	r5, #1
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f7f5 fdb8 	bl	8000564 <__aeabi_i2d>
 800a9f4:	4652      	mov	r2, sl
 800a9f6:	465b      	mov	r3, fp
 800a9f8:	f7f5 fe1e 	bl	8000638 <__aeabi_dmul>
 800a9fc:	4b82      	ldr	r3, [pc, #520]	; (800ac08 <_dtoa_r+0x628>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f7f5 fc64 	bl	80002cc <__adddf3>
 800aa04:	46d0      	mov	r8, sl
 800aa06:	46d9      	mov	r9, fp
 800aa08:	4682      	mov	sl, r0
 800aa0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aa0e:	2e00      	cmp	r6, #0
 800aa10:	d158      	bne.n	800aac4 <_dtoa_r+0x4e4>
 800aa12:	4b7e      	ldr	r3, [pc, #504]	; (800ac0c <_dtoa_r+0x62c>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	4640      	mov	r0, r8
 800aa18:	4649      	mov	r1, r9
 800aa1a:	f7f5 fc55 	bl	80002c8 <__aeabi_dsub>
 800aa1e:	4652      	mov	r2, sl
 800aa20:	465b      	mov	r3, fp
 800aa22:	4680      	mov	r8, r0
 800aa24:	4689      	mov	r9, r1
 800aa26:	f7f6 f897 	bl	8000b58 <__aeabi_dcmpgt>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	f040 8295 	bne.w	800af5a <_dtoa_r+0x97a>
 800aa30:	4652      	mov	r2, sl
 800aa32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa36:	4640      	mov	r0, r8
 800aa38:	4649      	mov	r1, r9
 800aa3a:	f7f6 f86f 	bl	8000b1c <__aeabi_dcmplt>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	f040 8289 	bne.w	800af56 <_dtoa_r+0x976>
 800aa44:	ec5b ab19 	vmov	sl, fp, d9
 800aa48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f2c0 8148 	blt.w	800ace0 <_dtoa_r+0x700>
 800aa50:	9a00      	ldr	r2, [sp, #0]
 800aa52:	2a0e      	cmp	r2, #14
 800aa54:	f300 8144 	bgt.w	800ace0 <_dtoa_r+0x700>
 800aa58:	4b67      	ldr	r3, [pc, #412]	; (800abf8 <_dtoa_r+0x618>)
 800aa5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f280 80d5 	bge.w	800ac14 <_dtoa_r+0x634>
 800aa6a:	9b03      	ldr	r3, [sp, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f300 80d1 	bgt.w	800ac14 <_dtoa_r+0x634>
 800aa72:	f040 826f 	bne.w	800af54 <_dtoa_r+0x974>
 800aa76:	4b65      	ldr	r3, [pc, #404]	; (800ac0c <_dtoa_r+0x62c>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	f7f5 fddb 	bl	8000638 <__aeabi_dmul>
 800aa82:	4652      	mov	r2, sl
 800aa84:	465b      	mov	r3, fp
 800aa86:	f7f6 f85d 	bl	8000b44 <__aeabi_dcmpge>
 800aa8a:	9e03      	ldr	r6, [sp, #12]
 800aa8c:	4637      	mov	r7, r6
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	f040 8245 	bne.w	800af1e <_dtoa_r+0x93e>
 800aa94:	9d01      	ldr	r5, [sp, #4]
 800aa96:	2331      	movs	r3, #49	; 0x31
 800aa98:	f805 3b01 	strb.w	r3, [r5], #1
 800aa9c:	9b00      	ldr	r3, [sp, #0]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	e240      	b.n	800af26 <_dtoa_r+0x946>
 800aaa4:	07f2      	lsls	r2, r6, #31
 800aaa6:	d505      	bpl.n	800aab4 <_dtoa_r+0x4d4>
 800aaa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaac:	f7f5 fdc4 	bl	8000638 <__aeabi_dmul>
 800aab0:	3501      	adds	r5, #1
 800aab2:	2301      	movs	r3, #1
 800aab4:	1076      	asrs	r6, r6, #1
 800aab6:	3708      	adds	r7, #8
 800aab8:	e777      	b.n	800a9aa <_dtoa_r+0x3ca>
 800aaba:	2502      	movs	r5, #2
 800aabc:	e779      	b.n	800a9b2 <_dtoa_r+0x3d2>
 800aabe:	9f00      	ldr	r7, [sp, #0]
 800aac0:	9e03      	ldr	r6, [sp, #12]
 800aac2:	e794      	b.n	800a9ee <_dtoa_r+0x40e>
 800aac4:	9901      	ldr	r1, [sp, #4]
 800aac6:	4b4c      	ldr	r3, [pc, #304]	; (800abf8 <_dtoa_r+0x618>)
 800aac8:	4431      	add	r1, r6
 800aaca:	910d      	str	r1, [sp, #52]	; 0x34
 800aacc:	9908      	ldr	r1, [sp, #32]
 800aace:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aad2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aad6:	2900      	cmp	r1, #0
 800aad8:	d043      	beq.n	800ab62 <_dtoa_r+0x582>
 800aada:	494d      	ldr	r1, [pc, #308]	; (800ac10 <_dtoa_r+0x630>)
 800aadc:	2000      	movs	r0, #0
 800aade:	f7f5 fed5 	bl	800088c <__aeabi_ddiv>
 800aae2:	4652      	mov	r2, sl
 800aae4:	465b      	mov	r3, fp
 800aae6:	f7f5 fbef 	bl	80002c8 <__aeabi_dsub>
 800aaea:	9d01      	ldr	r5, [sp, #4]
 800aaec:	4682      	mov	sl, r0
 800aaee:	468b      	mov	fp, r1
 800aaf0:	4649      	mov	r1, r9
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	f7f6 f850 	bl	8000b98 <__aeabi_d2iz>
 800aaf8:	4606      	mov	r6, r0
 800aafa:	f7f5 fd33 	bl	8000564 <__aeabi_i2d>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	4640      	mov	r0, r8
 800ab04:	4649      	mov	r1, r9
 800ab06:	f7f5 fbdf 	bl	80002c8 <__aeabi_dsub>
 800ab0a:	3630      	adds	r6, #48	; 0x30
 800ab0c:	f805 6b01 	strb.w	r6, [r5], #1
 800ab10:	4652      	mov	r2, sl
 800ab12:	465b      	mov	r3, fp
 800ab14:	4680      	mov	r8, r0
 800ab16:	4689      	mov	r9, r1
 800ab18:	f7f6 f800 	bl	8000b1c <__aeabi_dcmplt>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d163      	bne.n	800abe8 <_dtoa_r+0x608>
 800ab20:	4642      	mov	r2, r8
 800ab22:	464b      	mov	r3, r9
 800ab24:	4936      	ldr	r1, [pc, #216]	; (800ac00 <_dtoa_r+0x620>)
 800ab26:	2000      	movs	r0, #0
 800ab28:	f7f5 fbce 	bl	80002c8 <__aeabi_dsub>
 800ab2c:	4652      	mov	r2, sl
 800ab2e:	465b      	mov	r3, fp
 800ab30:	f7f5 fff4 	bl	8000b1c <__aeabi_dcmplt>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	f040 80b5 	bne.w	800aca4 <_dtoa_r+0x6c4>
 800ab3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab3c:	429d      	cmp	r5, r3
 800ab3e:	d081      	beq.n	800aa44 <_dtoa_r+0x464>
 800ab40:	4b30      	ldr	r3, [pc, #192]	; (800ac04 <_dtoa_r+0x624>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	4650      	mov	r0, sl
 800ab46:	4659      	mov	r1, fp
 800ab48:	f7f5 fd76 	bl	8000638 <__aeabi_dmul>
 800ab4c:	4b2d      	ldr	r3, [pc, #180]	; (800ac04 <_dtoa_r+0x624>)
 800ab4e:	4682      	mov	sl, r0
 800ab50:	468b      	mov	fp, r1
 800ab52:	4640      	mov	r0, r8
 800ab54:	4649      	mov	r1, r9
 800ab56:	2200      	movs	r2, #0
 800ab58:	f7f5 fd6e 	bl	8000638 <__aeabi_dmul>
 800ab5c:	4680      	mov	r8, r0
 800ab5e:	4689      	mov	r9, r1
 800ab60:	e7c6      	b.n	800aaf0 <_dtoa_r+0x510>
 800ab62:	4650      	mov	r0, sl
 800ab64:	4659      	mov	r1, fp
 800ab66:	f7f5 fd67 	bl	8000638 <__aeabi_dmul>
 800ab6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab6c:	9d01      	ldr	r5, [sp, #4]
 800ab6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab70:	4682      	mov	sl, r0
 800ab72:	468b      	mov	fp, r1
 800ab74:	4649      	mov	r1, r9
 800ab76:	4640      	mov	r0, r8
 800ab78:	f7f6 f80e 	bl	8000b98 <__aeabi_d2iz>
 800ab7c:	4606      	mov	r6, r0
 800ab7e:	f7f5 fcf1 	bl	8000564 <__aeabi_i2d>
 800ab82:	3630      	adds	r6, #48	; 0x30
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4640      	mov	r0, r8
 800ab8a:	4649      	mov	r1, r9
 800ab8c:	f7f5 fb9c 	bl	80002c8 <__aeabi_dsub>
 800ab90:	f805 6b01 	strb.w	r6, [r5], #1
 800ab94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab96:	429d      	cmp	r5, r3
 800ab98:	4680      	mov	r8, r0
 800ab9a:	4689      	mov	r9, r1
 800ab9c:	f04f 0200 	mov.w	r2, #0
 800aba0:	d124      	bne.n	800abec <_dtoa_r+0x60c>
 800aba2:	4b1b      	ldr	r3, [pc, #108]	; (800ac10 <_dtoa_r+0x630>)
 800aba4:	4650      	mov	r0, sl
 800aba6:	4659      	mov	r1, fp
 800aba8:	f7f5 fb90 	bl	80002cc <__adddf3>
 800abac:	4602      	mov	r2, r0
 800abae:	460b      	mov	r3, r1
 800abb0:	4640      	mov	r0, r8
 800abb2:	4649      	mov	r1, r9
 800abb4:	f7f5 ffd0 	bl	8000b58 <__aeabi_dcmpgt>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d173      	bne.n	800aca4 <_dtoa_r+0x6c4>
 800abbc:	4652      	mov	r2, sl
 800abbe:	465b      	mov	r3, fp
 800abc0:	4913      	ldr	r1, [pc, #76]	; (800ac10 <_dtoa_r+0x630>)
 800abc2:	2000      	movs	r0, #0
 800abc4:	f7f5 fb80 	bl	80002c8 <__aeabi_dsub>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4640      	mov	r0, r8
 800abce:	4649      	mov	r1, r9
 800abd0:	f7f5 ffa4 	bl	8000b1c <__aeabi_dcmplt>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	f43f af35 	beq.w	800aa44 <_dtoa_r+0x464>
 800abda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800abdc:	1e6b      	subs	r3, r5, #1
 800abde:	930f      	str	r3, [sp, #60]	; 0x3c
 800abe0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abe4:	2b30      	cmp	r3, #48	; 0x30
 800abe6:	d0f8      	beq.n	800abda <_dtoa_r+0x5fa>
 800abe8:	9700      	str	r7, [sp, #0]
 800abea:	e049      	b.n	800ac80 <_dtoa_r+0x6a0>
 800abec:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <_dtoa_r+0x624>)
 800abee:	f7f5 fd23 	bl	8000638 <__aeabi_dmul>
 800abf2:	4680      	mov	r8, r0
 800abf4:	4689      	mov	r9, r1
 800abf6:	e7bd      	b.n	800ab74 <_dtoa_r+0x594>
 800abf8:	0800cb50 	.word	0x0800cb50
 800abfc:	0800cb28 	.word	0x0800cb28
 800ac00:	3ff00000 	.word	0x3ff00000
 800ac04:	40240000 	.word	0x40240000
 800ac08:	401c0000 	.word	0x401c0000
 800ac0c:	40140000 	.word	0x40140000
 800ac10:	3fe00000 	.word	0x3fe00000
 800ac14:	9d01      	ldr	r5, [sp, #4]
 800ac16:	4656      	mov	r6, sl
 800ac18:	465f      	mov	r7, fp
 800ac1a:	4642      	mov	r2, r8
 800ac1c:	464b      	mov	r3, r9
 800ac1e:	4630      	mov	r0, r6
 800ac20:	4639      	mov	r1, r7
 800ac22:	f7f5 fe33 	bl	800088c <__aeabi_ddiv>
 800ac26:	f7f5 ffb7 	bl	8000b98 <__aeabi_d2iz>
 800ac2a:	4682      	mov	sl, r0
 800ac2c:	f7f5 fc9a 	bl	8000564 <__aeabi_i2d>
 800ac30:	4642      	mov	r2, r8
 800ac32:	464b      	mov	r3, r9
 800ac34:	f7f5 fd00 	bl	8000638 <__aeabi_dmul>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	4639      	mov	r1, r7
 800ac40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac44:	f7f5 fb40 	bl	80002c8 <__aeabi_dsub>
 800ac48:	f805 6b01 	strb.w	r6, [r5], #1
 800ac4c:	9e01      	ldr	r6, [sp, #4]
 800ac4e:	9f03      	ldr	r7, [sp, #12]
 800ac50:	1bae      	subs	r6, r5, r6
 800ac52:	42b7      	cmp	r7, r6
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	d135      	bne.n	800acc6 <_dtoa_r+0x6e6>
 800ac5a:	f7f5 fb37 	bl	80002cc <__adddf3>
 800ac5e:	4642      	mov	r2, r8
 800ac60:	464b      	mov	r3, r9
 800ac62:	4606      	mov	r6, r0
 800ac64:	460f      	mov	r7, r1
 800ac66:	f7f5 ff77 	bl	8000b58 <__aeabi_dcmpgt>
 800ac6a:	b9d0      	cbnz	r0, 800aca2 <_dtoa_r+0x6c2>
 800ac6c:	4642      	mov	r2, r8
 800ac6e:	464b      	mov	r3, r9
 800ac70:	4630      	mov	r0, r6
 800ac72:	4639      	mov	r1, r7
 800ac74:	f7f5 ff48 	bl	8000b08 <__aeabi_dcmpeq>
 800ac78:	b110      	cbz	r0, 800ac80 <_dtoa_r+0x6a0>
 800ac7a:	f01a 0f01 	tst.w	sl, #1
 800ac7e:	d110      	bne.n	800aca2 <_dtoa_r+0x6c2>
 800ac80:	4620      	mov	r0, r4
 800ac82:	ee18 1a10 	vmov	r1, s16
 800ac86:	f000 faf3 	bl	800b270 <_Bfree>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	9800      	ldr	r0, [sp, #0]
 800ac8e:	702b      	strb	r3, [r5, #0]
 800ac90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac92:	3001      	adds	r0, #1
 800ac94:	6018      	str	r0, [r3, #0]
 800ac96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f43f acf1 	beq.w	800a680 <_dtoa_r+0xa0>
 800ac9e:	601d      	str	r5, [r3, #0]
 800aca0:	e4ee      	b.n	800a680 <_dtoa_r+0xa0>
 800aca2:	9f00      	ldr	r7, [sp, #0]
 800aca4:	462b      	mov	r3, r5
 800aca6:	461d      	mov	r5, r3
 800aca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acac:	2a39      	cmp	r2, #57	; 0x39
 800acae:	d106      	bne.n	800acbe <_dtoa_r+0x6de>
 800acb0:	9a01      	ldr	r2, [sp, #4]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d1f7      	bne.n	800aca6 <_dtoa_r+0x6c6>
 800acb6:	9901      	ldr	r1, [sp, #4]
 800acb8:	2230      	movs	r2, #48	; 0x30
 800acba:	3701      	adds	r7, #1
 800acbc:	700a      	strb	r2, [r1, #0]
 800acbe:	781a      	ldrb	r2, [r3, #0]
 800acc0:	3201      	adds	r2, #1
 800acc2:	701a      	strb	r2, [r3, #0]
 800acc4:	e790      	b.n	800abe8 <_dtoa_r+0x608>
 800acc6:	4ba6      	ldr	r3, [pc, #664]	; (800af60 <_dtoa_r+0x980>)
 800acc8:	2200      	movs	r2, #0
 800acca:	f7f5 fcb5 	bl	8000638 <__aeabi_dmul>
 800acce:	2200      	movs	r2, #0
 800acd0:	2300      	movs	r3, #0
 800acd2:	4606      	mov	r6, r0
 800acd4:	460f      	mov	r7, r1
 800acd6:	f7f5 ff17 	bl	8000b08 <__aeabi_dcmpeq>
 800acda:	2800      	cmp	r0, #0
 800acdc:	d09d      	beq.n	800ac1a <_dtoa_r+0x63a>
 800acde:	e7cf      	b.n	800ac80 <_dtoa_r+0x6a0>
 800ace0:	9a08      	ldr	r2, [sp, #32]
 800ace2:	2a00      	cmp	r2, #0
 800ace4:	f000 80d7 	beq.w	800ae96 <_dtoa_r+0x8b6>
 800ace8:	9a06      	ldr	r2, [sp, #24]
 800acea:	2a01      	cmp	r2, #1
 800acec:	f300 80ba 	bgt.w	800ae64 <_dtoa_r+0x884>
 800acf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	f000 80b2 	beq.w	800ae5c <_dtoa_r+0x87c>
 800acf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acfc:	9e07      	ldr	r6, [sp, #28]
 800acfe:	9d04      	ldr	r5, [sp, #16]
 800ad00:	9a04      	ldr	r2, [sp, #16]
 800ad02:	441a      	add	r2, r3
 800ad04:	9204      	str	r2, [sp, #16]
 800ad06:	9a05      	ldr	r2, [sp, #20]
 800ad08:	2101      	movs	r1, #1
 800ad0a:	441a      	add	r2, r3
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	9205      	str	r2, [sp, #20]
 800ad10:	f000 fb66 	bl	800b3e0 <__i2b>
 800ad14:	4607      	mov	r7, r0
 800ad16:	2d00      	cmp	r5, #0
 800ad18:	dd0c      	ble.n	800ad34 <_dtoa_r+0x754>
 800ad1a:	9b05      	ldr	r3, [sp, #20]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	dd09      	ble.n	800ad34 <_dtoa_r+0x754>
 800ad20:	42ab      	cmp	r3, r5
 800ad22:	9a04      	ldr	r2, [sp, #16]
 800ad24:	bfa8      	it	ge
 800ad26:	462b      	movge	r3, r5
 800ad28:	1ad2      	subs	r2, r2, r3
 800ad2a:	9204      	str	r2, [sp, #16]
 800ad2c:	9a05      	ldr	r2, [sp, #20]
 800ad2e:	1aed      	subs	r5, r5, r3
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	9305      	str	r3, [sp, #20]
 800ad34:	9b07      	ldr	r3, [sp, #28]
 800ad36:	b31b      	cbz	r3, 800ad80 <_dtoa_r+0x7a0>
 800ad38:	9b08      	ldr	r3, [sp, #32]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 80af 	beq.w	800ae9e <_dtoa_r+0x8be>
 800ad40:	2e00      	cmp	r6, #0
 800ad42:	dd13      	ble.n	800ad6c <_dtoa_r+0x78c>
 800ad44:	4639      	mov	r1, r7
 800ad46:	4632      	mov	r2, r6
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f000 fc09 	bl	800b560 <__pow5mult>
 800ad4e:	ee18 2a10 	vmov	r2, s16
 800ad52:	4601      	mov	r1, r0
 800ad54:	4607      	mov	r7, r0
 800ad56:	4620      	mov	r0, r4
 800ad58:	f000 fb58 	bl	800b40c <__multiply>
 800ad5c:	ee18 1a10 	vmov	r1, s16
 800ad60:	4680      	mov	r8, r0
 800ad62:	4620      	mov	r0, r4
 800ad64:	f000 fa84 	bl	800b270 <_Bfree>
 800ad68:	ee08 8a10 	vmov	s16, r8
 800ad6c:	9b07      	ldr	r3, [sp, #28]
 800ad6e:	1b9a      	subs	r2, r3, r6
 800ad70:	d006      	beq.n	800ad80 <_dtoa_r+0x7a0>
 800ad72:	ee18 1a10 	vmov	r1, s16
 800ad76:	4620      	mov	r0, r4
 800ad78:	f000 fbf2 	bl	800b560 <__pow5mult>
 800ad7c:	ee08 0a10 	vmov	s16, r0
 800ad80:	2101      	movs	r1, #1
 800ad82:	4620      	mov	r0, r4
 800ad84:	f000 fb2c 	bl	800b3e0 <__i2b>
 800ad88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	f340 8088 	ble.w	800aea2 <_dtoa_r+0x8c2>
 800ad92:	461a      	mov	r2, r3
 800ad94:	4601      	mov	r1, r0
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 fbe2 	bl	800b560 <__pow5mult>
 800ad9c:	9b06      	ldr	r3, [sp, #24]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	4606      	mov	r6, r0
 800ada2:	f340 8081 	ble.w	800aea8 <_dtoa_r+0x8c8>
 800ada6:	f04f 0800 	mov.w	r8, #0
 800adaa:	6933      	ldr	r3, [r6, #16]
 800adac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800adb0:	6918      	ldr	r0, [r3, #16]
 800adb2:	f000 fac5 	bl	800b340 <__hi0bits>
 800adb6:	f1c0 0020 	rsb	r0, r0, #32
 800adba:	9b05      	ldr	r3, [sp, #20]
 800adbc:	4418      	add	r0, r3
 800adbe:	f010 001f 	ands.w	r0, r0, #31
 800adc2:	f000 8092 	beq.w	800aeea <_dtoa_r+0x90a>
 800adc6:	f1c0 0320 	rsb	r3, r0, #32
 800adca:	2b04      	cmp	r3, #4
 800adcc:	f340 808a 	ble.w	800aee4 <_dtoa_r+0x904>
 800add0:	f1c0 001c 	rsb	r0, r0, #28
 800add4:	9b04      	ldr	r3, [sp, #16]
 800add6:	4403      	add	r3, r0
 800add8:	9304      	str	r3, [sp, #16]
 800adda:	9b05      	ldr	r3, [sp, #20]
 800addc:	4403      	add	r3, r0
 800adde:	4405      	add	r5, r0
 800ade0:	9305      	str	r3, [sp, #20]
 800ade2:	9b04      	ldr	r3, [sp, #16]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	dd07      	ble.n	800adf8 <_dtoa_r+0x818>
 800ade8:	ee18 1a10 	vmov	r1, s16
 800adec:	461a      	mov	r2, r3
 800adee:	4620      	mov	r0, r4
 800adf0:	f000 fc10 	bl	800b614 <__lshift>
 800adf4:	ee08 0a10 	vmov	s16, r0
 800adf8:	9b05      	ldr	r3, [sp, #20]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	dd05      	ble.n	800ae0a <_dtoa_r+0x82a>
 800adfe:	4631      	mov	r1, r6
 800ae00:	461a      	mov	r2, r3
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 fc06 	bl	800b614 <__lshift>
 800ae08:	4606      	mov	r6, r0
 800ae0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d06e      	beq.n	800aeee <_dtoa_r+0x90e>
 800ae10:	ee18 0a10 	vmov	r0, s16
 800ae14:	4631      	mov	r1, r6
 800ae16:	f000 fc6d 	bl	800b6f4 <__mcmp>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	da67      	bge.n	800aeee <_dtoa_r+0x90e>
 800ae1e:	9b00      	ldr	r3, [sp, #0]
 800ae20:	3b01      	subs	r3, #1
 800ae22:	ee18 1a10 	vmov	r1, s16
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	220a      	movs	r2, #10
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f000 fa41 	bl	800b2b4 <__multadd>
 800ae32:	9b08      	ldr	r3, [sp, #32]
 800ae34:	ee08 0a10 	vmov	s16, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 81b1 	beq.w	800b1a0 <_dtoa_r+0xbc0>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	4639      	mov	r1, r7
 800ae42:	220a      	movs	r2, #10
 800ae44:	4620      	mov	r0, r4
 800ae46:	f000 fa35 	bl	800b2b4 <__multadd>
 800ae4a:	9b02      	ldr	r3, [sp, #8]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	4607      	mov	r7, r0
 800ae50:	f300 808e 	bgt.w	800af70 <_dtoa_r+0x990>
 800ae54:	9b06      	ldr	r3, [sp, #24]
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	dc51      	bgt.n	800aefe <_dtoa_r+0x91e>
 800ae5a:	e089      	b.n	800af70 <_dtoa_r+0x990>
 800ae5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae62:	e74b      	b.n	800acfc <_dtoa_r+0x71c>
 800ae64:	9b03      	ldr	r3, [sp, #12]
 800ae66:	1e5e      	subs	r6, r3, #1
 800ae68:	9b07      	ldr	r3, [sp, #28]
 800ae6a:	42b3      	cmp	r3, r6
 800ae6c:	bfbf      	itttt	lt
 800ae6e:	9b07      	ldrlt	r3, [sp, #28]
 800ae70:	9607      	strlt	r6, [sp, #28]
 800ae72:	1af2      	sublt	r2, r6, r3
 800ae74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae76:	bfb6      	itet	lt
 800ae78:	189b      	addlt	r3, r3, r2
 800ae7a:	1b9e      	subge	r6, r3, r6
 800ae7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	bfb8      	it	lt
 800ae82:	2600      	movlt	r6, #0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	bfb7      	itett	lt
 800ae88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae90:	1a9d      	sublt	r5, r3, r2
 800ae92:	2300      	movlt	r3, #0
 800ae94:	e734      	b.n	800ad00 <_dtoa_r+0x720>
 800ae96:	9e07      	ldr	r6, [sp, #28]
 800ae98:	9d04      	ldr	r5, [sp, #16]
 800ae9a:	9f08      	ldr	r7, [sp, #32]
 800ae9c:	e73b      	b.n	800ad16 <_dtoa_r+0x736>
 800ae9e:	9a07      	ldr	r2, [sp, #28]
 800aea0:	e767      	b.n	800ad72 <_dtoa_r+0x792>
 800aea2:	9b06      	ldr	r3, [sp, #24]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	dc18      	bgt.n	800aeda <_dtoa_r+0x8fa>
 800aea8:	f1ba 0f00 	cmp.w	sl, #0
 800aeac:	d115      	bne.n	800aeda <_dtoa_r+0x8fa>
 800aeae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aeb2:	b993      	cbnz	r3, 800aeda <_dtoa_r+0x8fa>
 800aeb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aeb8:	0d1b      	lsrs	r3, r3, #20
 800aeba:	051b      	lsls	r3, r3, #20
 800aebc:	b183      	cbz	r3, 800aee0 <_dtoa_r+0x900>
 800aebe:	9b04      	ldr	r3, [sp, #16]
 800aec0:	3301      	adds	r3, #1
 800aec2:	9304      	str	r3, [sp, #16]
 800aec4:	9b05      	ldr	r3, [sp, #20]
 800aec6:	3301      	adds	r3, #1
 800aec8:	9305      	str	r3, [sp, #20]
 800aeca:	f04f 0801 	mov.w	r8, #1
 800aece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f47f af6a 	bne.w	800adaa <_dtoa_r+0x7ca>
 800aed6:	2001      	movs	r0, #1
 800aed8:	e76f      	b.n	800adba <_dtoa_r+0x7da>
 800aeda:	f04f 0800 	mov.w	r8, #0
 800aede:	e7f6      	b.n	800aece <_dtoa_r+0x8ee>
 800aee0:	4698      	mov	r8, r3
 800aee2:	e7f4      	b.n	800aece <_dtoa_r+0x8ee>
 800aee4:	f43f af7d 	beq.w	800ade2 <_dtoa_r+0x802>
 800aee8:	4618      	mov	r0, r3
 800aeea:	301c      	adds	r0, #28
 800aeec:	e772      	b.n	800add4 <_dtoa_r+0x7f4>
 800aeee:	9b03      	ldr	r3, [sp, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	dc37      	bgt.n	800af64 <_dtoa_r+0x984>
 800aef4:	9b06      	ldr	r3, [sp, #24]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	dd34      	ble.n	800af64 <_dtoa_r+0x984>
 800aefa:	9b03      	ldr	r3, [sp, #12]
 800aefc:	9302      	str	r3, [sp, #8]
 800aefe:	9b02      	ldr	r3, [sp, #8]
 800af00:	b96b      	cbnz	r3, 800af1e <_dtoa_r+0x93e>
 800af02:	4631      	mov	r1, r6
 800af04:	2205      	movs	r2, #5
 800af06:	4620      	mov	r0, r4
 800af08:	f000 f9d4 	bl	800b2b4 <__multadd>
 800af0c:	4601      	mov	r1, r0
 800af0e:	4606      	mov	r6, r0
 800af10:	ee18 0a10 	vmov	r0, s16
 800af14:	f000 fbee 	bl	800b6f4 <__mcmp>
 800af18:	2800      	cmp	r0, #0
 800af1a:	f73f adbb 	bgt.w	800aa94 <_dtoa_r+0x4b4>
 800af1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af20:	9d01      	ldr	r5, [sp, #4]
 800af22:	43db      	mvns	r3, r3
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	f04f 0800 	mov.w	r8, #0
 800af2a:	4631      	mov	r1, r6
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 f99f 	bl	800b270 <_Bfree>
 800af32:	2f00      	cmp	r7, #0
 800af34:	f43f aea4 	beq.w	800ac80 <_dtoa_r+0x6a0>
 800af38:	f1b8 0f00 	cmp.w	r8, #0
 800af3c:	d005      	beq.n	800af4a <_dtoa_r+0x96a>
 800af3e:	45b8      	cmp	r8, r7
 800af40:	d003      	beq.n	800af4a <_dtoa_r+0x96a>
 800af42:	4641      	mov	r1, r8
 800af44:	4620      	mov	r0, r4
 800af46:	f000 f993 	bl	800b270 <_Bfree>
 800af4a:	4639      	mov	r1, r7
 800af4c:	4620      	mov	r0, r4
 800af4e:	f000 f98f 	bl	800b270 <_Bfree>
 800af52:	e695      	b.n	800ac80 <_dtoa_r+0x6a0>
 800af54:	2600      	movs	r6, #0
 800af56:	4637      	mov	r7, r6
 800af58:	e7e1      	b.n	800af1e <_dtoa_r+0x93e>
 800af5a:	9700      	str	r7, [sp, #0]
 800af5c:	4637      	mov	r7, r6
 800af5e:	e599      	b.n	800aa94 <_dtoa_r+0x4b4>
 800af60:	40240000 	.word	0x40240000
 800af64:	9b08      	ldr	r3, [sp, #32]
 800af66:	2b00      	cmp	r3, #0
 800af68:	f000 80ca 	beq.w	800b100 <_dtoa_r+0xb20>
 800af6c:	9b03      	ldr	r3, [sp, #12]
 800af6e:	9302      	str	r3, [sp, #8]
 800af70:	2d00      	cmp	r5, #0
 800af72:	dd05      	ble.n	800af80 <_dtoa_r+0x9a0>
 800af74:	4639      	mov	r1, r7
 800af76:	462a      	mov	r2, r5
 800af78:	4620      	mov	r0, r4
 800af7a:	f000 fb4b 	bl	800b614 <__lshift>
 800af7e:	4607      	mov	r7, r0
 800af80:	f1b8 0f00 	cmp.w	r8, #0
 800af84:	d05b      	beq.n	800b03e <_dtoa_r+0xa5e>
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	4620      	mov	r0, r4
 800af8a:	f000 f931 	bl	800b1f0 <_Balloc>
 800af8e:	4605      	mov	r5, r0
 800af90:	b928      	cbnz	r0, 800af9e <_dtoa_r+0x9be>
 800af92:	4b87      	ldr	r3, [pc, #540]	; (800b1b0 <_dtoa_r+0xbd0>)
 800af94:	4602      	mov	r2, r0
 800af96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af9a:	f7ff bb3b 	b.w	800a614 <_dtoa_r+0x34>
 800af9e:	693a      	ldr	r2, [r7, #16]
 800afa0:	3202      	adds	r2, #2
 800afa2:	0092      	lsls	r2, r2, #2
 800afa4:	f107 010c 	add.w	r1, r7, #12
 800afa8:	300c      	adds	r0, #12
 800afaa:	f000 f913 	bl	800b1d4 <memcpy>
 800afae:	2201      	movs	r2, #1
 800afb0:	4629      	mov	r1, r5
 800afb2:	4620      	mov	r0, r4
 800afb4:	f000 fb2e 	bl	800b614 <__lshift>
 800afb8:	9b01      	ldr	r3, [sp, #4]
 800afba:	f103 0901 	add.w	r9, r3, #1
 800afbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800afc2:	4413      	add	r3, r2
 800afc4:	9305      	str	r3, [sp, #20]
 800afc6:	f00a 0301 	and.w	r3, sl, #1
 800afca:	46b8      	mov	r8, r7
 800afcc:	9304      	str	r3, [sp, #16]
 800afce:	4607      	mov	r7, r0
 800afd0:	4631      	mov	r1, r6
 800afd2:	ee18 0a10 	vmov	r0, s16
 800afd6:	f7ff fa77 	bl	800a4c8 <quorem>
 800afda:	4641      	mov	r1, r8
 800afdc:	9002      	str	r0, [sp, #8]
 800afde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800afe2:	ee18 0a10 	vmov	r0, s16
 800afe6:	f000 fb85 	bl	800b6f4 <__mcmp>
 800afea:	463a      	mov	r2, r7
 800afec:	9003      	str	r0, [sp, #12]
 800afee:	4631      	mov	r1, r6
 800aff0:	4620      	mov	r0, r4
 800aff2:	f000 fb9b 	bl	800b72c <__mdiff>
 800aff6:	68c2      	ldr	r2, [r0, #12]
 800aff8:	f109 3bff 	add.w	fp, r9, #4294967295
 800affc:	4605      	mov	r5, r0
 800affe:	bb02      	cbnz	r2, 800b042 <_dtoa_r+0xa62>
 800b000:	4601      	mov	r1, r0
 800b002:	ee18 0a10 	vmov	r0, s16
 800b006:	f000 fb75 	bl	800b6f4 <__mcmp>
 800b00a:	4602      	mov	r2, r0
 800b00c:	4629      	mov	r1, r5
 800b00e:	4620      	mov	r0, r4
 800b010:	9207      	str	r2, [sp, #28]
 800b012:	f000 f92d 	bl	800b270 <_Bfree>
 800b016:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b01a:	ea43 0102 	orr.w	r1, r3, r2
 800b01e:	9b04      	ldr	r3, [sp, #16]
 800b020:	430b      	orrs	r3, r1
 800b022:	464d      	mov	r5, r9
 800b024:	d10f      	bne.n	800b046 <_dtoa_r+0xa66>
 800b026:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b02a:	d02a      	beq.n	800b082 <_dtoa_r+0xaa2>
 800b02c:	9b03      	ldr	r3, [sp, #12]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	dd02      	ble.n	800b038 <_dtoa_r+0xa58>
 800b032:	9b02      	ldr	r3, [sp, #8]
 800b034:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b038:	f88b a000 	strb.w	sl, [fp]
 800b03c:	e775      	b.n	800af2a <_dtoa_r+0x94a>
 800b03e:	4638      	mov	r0, r7
 800b040:	e7ba      	b.n	800afb8 <_dtoa_r+0x9d8>
 800b042:	2201      	movs	r2, #1
 800b044:	e7e2      	b.n	800b00c <_dtoa_r+0xa2c>
 800b046:	9b03      	ldr	r3, [sp, #12]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	db04      	blt.n	800b056 <_dtoa_r+0xa76>
 800b04c:	9906      	ldr	r1, [sp, #24]
 800b04e:	430b      	orrs	r3, r1
 800b050:	9904      	ldr	r1, [sp, #16]
 800b052:	430b      	orrs	r3, r1
 800b054:	d122      	bne.n	800b09c <_dtoa_r+0xabc>
 800b056:	2a00      	cmp	r2, #0
 800b058:	ddee      	ble.n	800b038 <_dtoa_r+0xa58>
 800b05a:	ee18 1a10 	vmov	r1, s16
 800b05e:	2201      	movs	r2, #1
 800b060:	4620      	mov	r0, r4
 800b062:	f000 fad7 	bl	800b614 <__lshift>
 800b066:	4631      	mov	r1, r6
 800b068:	ee08 0a10 	vmov	s16, r0
 800b06c:	f000 fb42 	bl	800b6f4 <__mcmp>
 800b070:	2800      	cmp	r0, #0
 800b072:	dc03      	bgt.n	800b07c <_dtoa_r+0xa9c>
 800b074:	d1e0      	bne.n	800b038 <_dtoa_r+0xa58>
 800b076:	f01a 0f01 	tst.w	sl, #1
 800b07a:	d0dd      	beq.n	800b038 <_dtoa_r+0xa58>
 800b07c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b080:	d1d7      	bne.n	800b032 <_dtoa_r+0xa52>
 800b082:	2339      	movs	r3, #57	; 0x39
 800b084:	f88b 3000 	strb.w	r3, [fp]
 800b088:	462b      	mov	r3, r5
 800b08a:	461d      	mov	r5, r3
 800b08c:	3b01      	subs	r3, #1
 800b08e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b092:	2a39      	cmp	r2, #57	; 0x39
 800b094:	d071      	beq.n	800b17a <_dtoa_r+0xb9a>
 800b096:	3201      	adds	r2, #1
 800b098:	701a      	strb	r2, [r3, #0]
 800b09a:	e746      	b.n	800af2a <_dtoa_r+0x94a>
 800b09c:	2a00      	cmp	r2, #0
 800b09e:	dd07      	ble.n	800b0b0 <_dtoa_r+0xad0>
 800b0a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0a4:	d0ed      	beq.n	800b082 <_dtoa_r+0xaa2>
 800b0a6:	f10a 0301 	add.w	r3, sl, #1
 800b0aa:	f88b 3000 	strb.w	r3, [fp]
 800b0ae:	e73c      	b.n	800af2a <_dtoa_r+0x94a>
 800b0b0:	9b05      	ldr	r3, [sp, #20]
 800b0b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b0b6:	4599      	cmp	r9, r3
 800b0b8:	d047      	beq.n	800b14a <_dtoa_r+0xb6a>
 800b0ba:	ee18 1a10 	vmov	r1, s16
 800b0be:	2300      	movs	r3, #0
 800b0c0:	220a      	movs	r2, #10
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 f8f6 	bl	800b2b4 <__multadd>
 800b0c8:	45b8      	cmp	r8, r7
 800b0ca:	ee08 0a10 	vmov	s16, r0
 800b0ce:	f04f 0300 	mov.w	r3, #0
 800b0d2:	f04f 020a 	mov.w	r2, #10
 800b0d6:	4641      	mov	r1, r8
 800b0d8:	4620      	mov	r0, r4
 800b0da:	d106      	bne.n	800b0ea <_dtoa_r+0xb0a>
 800b0dc:	f000 f8ea 	bl	800b2b4 <__multadd>
 800b0e0:	4680      	mov	r8, r0
 800b0e2:	4607      	mov	r7, r0
 800b0e4:	f109 0901 	add.w	r9, r9, #1
 800b0e8:	e772      	b.n	800afd0 <_dtoa_r+0x9f0>
 800b0ea:	f000 f8e3 	bl	800b2b4 <__multadd>
 800b0ee:	4639      	mov	r1, r7
 800b0f0:	4680      	mov	r8, r0
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	220a      	movs	r2, #10
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f000 f8dc 	bl	800b2b4 <__multadd>
 800b0fc:	4607      	mov	r7, r0
 800b0fe:	e7f1      	b.n	800b0e4 <_dtoa_r+0xb04>
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	9302      	str	r3, [sp, #8]
 800b104:	9d01      	ldr	r5, [sp, #4]
 800b106:	ee18 0a10 	vmov	r0, s16
 800b10a:	4631      	mov	r1, r6
 800b10c:	f7ff f9dc 	bl	800a4c8 <quorem>
 800b110:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b114:	9b01      	ldr	r3, [sp, #4]
 800b116:	f805 ab01 	strb.w	sl, [r5], #1
 800b11a:	1aea      	subs	r2, r5, r3
 800b11c:	9b02      	ldr	r3, [sp, #8]
 800b11e:	4293      	cmp	r3, r2
 800b120:	dd09      	ble.n	800b136 <_dtoa_r+0xb56>
 800b122:	ee18 1a10 	vmov	r1, s16
 800b126:	2300      	movs	r3, #0
 800b128:	220a      	movs	r2, #10
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 f8c2 	bl	800b2b4 <__multadd>
 800b130:	ee08 0a10 	vmov	s16, r0
 800b134:	e7e7      	b.n	800b106 <_dtoa_r+0xb26>
 800b136:	9b02      	ldr	r3, [sp, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	bfc8      	it	gt
 800b13c:	461d      	movgt	r5, r3
 800b13e:	9b01      	ldr	r3, [sp, #4]
 800b140:	bfd8      	it	le
 800b142:	2501      	movle	r5, #1
 800b144:	441d      	add	r5, r3
 800b146:	f04f 0800 	mov.w	r8, #0
 800b14a:	ee18 1a10 	vmov	r1, s16
 800b14e:	2201      	movs	r2, #1
 800b150:	4620      	mov	r0, r4
 800b152:	f000 fa5f 	bl	800b614 <__lshift>
 800b156:	4631      	mov	r1, r6
 800b158:	ee08 0a10 	vmov	s16, r0
 800b15c:	f000 faca 	bl	800b6f4 <__mcmp>
 800b160:	2800      	cmp	r0, #0
 800b162:	dc91      	bgt.n	800b088 <_dtoa_r+0xaa8>
 800b164:	d102      	bne.n	800b16c <_dtoa_r+0xb8c>
 800b166:	f01a 0f01 	tst.w	sl, #1
 800b16a:	d18d      	bne.n	800b088 <_dtoa_r+0xaa8>
 800b16c:	462b      	mov	r3, r5
 800b16e:	461d      	mov	r5, r3
 800b170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b174:	2a30      	cmp	r2, #48	; 0x30
 800b176:	d0fa      	beq.n	800b16e <_dtoa_r+0xb8e>
 800b178:	e6d7      	b.n	800af2a <_dtoa_r+0x94a>
 800b17a:	9a01      	ldr	r2, [sp, #4]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d184      	bne.n	800b08a <_dtoa_r+0xaaa>
 800b180:	9b00      	ldr	r3, [sp, #0]
 800b182:	3301      	adds	r3, #1
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	2331      	movs	r3, #49	; 0x31
 800b188:	7013      	strb	r3, [r2, #0]
 800b18a:	e6ce      	b.n	800af2a <_dtoa_r+0x94a>
 800b18c:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <_dtoa_r+0xbd4>)
 800b18e:	f7ff ba95 	b.w	800a6bc <_dtoa_r+0xdc>
 800b192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b194:	2b00      	cmp	r3, #0
 800b196:	f47f aa6e 	bne.w	800a676 <_dtoa_r+0x96>
 800b19a:	4b07      	ldr	r3, [pc, #28]	; (800b1b8 <_dtoa_r+0xbd8>)
 800b19c:	f7ff ba8e 	b.w	800a6bc <_dtoa_r+0xdc>
 800b1a0:	9b02      	ldr	r3, [sp, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	dcae      	bgt.n	800b104 <_dtoa_r+0xb24>
 800b1a6:	9b06      	ldr	r3, [sp, #24]
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	f73f aea8 	bgt.w	800aefe <_dtoa_r+0x91e>
 800b1ae:	e7a9      	b.n	800b104 <_dtoa_r+0xb24>
 800b1b0:	0800cab7 	.word	0x0800cab7
 800b1b4:	0800ca14 	.word	0x0800ca14
 800b1b8:	0800ca38 	.word	0x0800ca38

0800b1bc <_localeconv_r>:
 800b1bc:	4800      	ldr	r0, [pc, #0]	; (800b1c0 <_localeconv_r+0x4>)
 800b1be:	4770      	bx	lr
 800b1c0:	20000260 	.word	0x20000260

0800b1c4 <malloc>:
 800b1c4:	4b02      	ldr	r3, [pc, #8]	; (800b1d0 <malloc+0xc>)
 800b1c6:	4601      	mov	r1, r0
 800b1c8:	6818      	ldr	r0, [r3, #0]
 800b1ca:	f000 bc17 	b.w	800b9fc <_malloc_r>
 800b1ce:	bf00      	nop
 800b1d0:	2000010c 	.word	0x2000010c

0800b1d4 <memcpy>:
 800b1d4:	440a      	add	r2, r1
 800b1d6:	4291      	cmp	r1, r2
 800b1d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1dc:	d100      	bne.n	800b1e0 <memcpy+0xc>
 800b1de:	4770      	bx	lr
 800b1e0:	b510      	push	{r4, lr}
 800b1e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ea:	4291      	cmp	r1, r2
 800b1ec:	d1f9      	bne.n	800b1e2 <memcpy+0xe>
 800b1ee:	bd10      	pop	{r4, pc}

0800b1f0 <_Balloc>:
 800b1f0:	b570      	push	{r4, r5, r6, lr}
 800b1f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	460d      	mov	r5, r1
 800b1f8:	b976      	cbnz	r6, 800b218 <_Balloc+0x28>
 800b1fa:	2010      	movs	r0, #16
 800b1fc:	f7ff ffe2 	bl	800b1c4 <malloc>
 800b200:	4602      	mov	r2, r0
 800b202:	6260      	str	r0, [r4, #36]	; 0x24
 800b204:	b920      	cbnz	r0, 800b210 <_Balloc+0x20>
 800b206:	4b18      	ldr	r3, [pc, #96]	; (800b268 <_Balloc+0x78>)
 800b208:	4818      	ldr	r0, [pc, #96]	; (800b26c <_Balloc+0x7c>)
 800b20a:	2166      	movs	r1, #102	; 0x66
 800b20c:	f000 fdd6 	bl	800bdbc <__assert_func>
 800b210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b214:	6006      	str	r6, [r0, #0]
 800b216:	60c6      	str	r6, [r0, #12]
 800b218:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b21a:	68f3      	ldr	r3, [r6, #12]
 800b21c:	b183      	cbz	r3, 800b240 <_Balloc+0x50>
 800b21e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b226:	b9b8      	cbnz	r0, 800b258 <_Balloc+0x68>
 800b228:	2101      	movs	r1, #1
 800b22a:	fa01 f605 	lsl.w	r6, r1, r5
 800b22e:	1d72      	adds	r2, r6, #5
 800b230:	0092      	lsls	r2, r2, #2
 800b232:	4620      	mov	r0, r4
 800b234:	f000 fb60 	bl	800b8f8 <_calloc_r>
 800b238:	b160      	cbz	r0, 800b254 <_Balloc+0x64>
 800b23a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b23e:	e00e      	b.n	800b25e <_Balloc+0x6e>
 800b240:	2221      	movs	r2, #33	; 0x21
 800b242:	2104      	movs	r1, #4
 800b244:	4620      	mov	r0, r4
 800b246:	f000 fb57 	bl	800b8f8 <_calloc_r>
 800b24a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b24c:	60f0      	str	r0, [r6, #12]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1e4      	bne.n	800b21e <_Balloc+0x2e>
 800b254:	2000      	movs	r0, #0
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	6802      	ldr	r2, [r0, #0]
 800b25a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b25e:	2300      	movs	r3, #0
 800b260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b264:	e7f7      	b.n	800b256 <_Balloc+0x66>
 800b266:	bf00      	nop
 800b268:	0800ca45 	.word	0x0800ca45
 800b26c:	0800cac8 	.word	0x0800cac8

0800b270 <_Bfree>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b274:	4605      	mov	r5, r0
 800b276:	460c      	mov	r4, r1
 800b278:	b976      	cbnz	r6, 800b298 <_Bfree+0x28>
 800b27a:	2010      	movs	r0, #16
 800b27c:	f7ff ffa2 	bl	800b1c4 <malloc>
 800b280:	4602      	mov	r2, r0
 800b282:	6268      	str	r0, [r5, #36]	; 0x24
 800b284:	b920      	cbnz	r0, 800b290 <_Bfree+0x20>
 800b286:	4b09      	ldr	r3, [pc, #36]	; (800b2ac <_Bfree+0x3c>)
 800b288:	4809      	ldr	r0, [pc, #36]	; (800b2b0 <_Bfree+0x40>)
 800b28a:	218a      	movs	r1, #138	; 0x8a
 800b28c:	f000 fd96 	bl	800bdbc <__assert_func>
 800b290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b294:	6006      	str	r6, [r0, #0]
 800b296:	60c6      	str	r6, [r0, #12]
 800b298:	b13c      	cbz	r4, 800b2aa <_Bfree+0x3a>
 800b29a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b29c:	6862      	ldr	r2, [r4, #4]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2a4:	6021      	str	r1, [r4, #0]
 800b2a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	0800ca45 	.word	0x0800ca45
 800b2b0:	0800cac8 	.word	0x0800cac8

0800b2b4 <__multadd>:
 800b2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b8:	690d      	ldr	r5, [r1, #16]
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	460c      	mov	r4, r1
 800b2be:	461e      	mov	r6, r3
 800b2c0:	f101 0c14 	add.w	ip, r1, #20
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	f8dc 3000 	ldr.w	r3, [ip]
 800b2ca:	b299      	uxth	r1, r3
 800b2cc:	fb02 6101 	mla	r1, r2, r1, r6
 800b2d0:	0c1e      	lsrs	r6, r3, #16
 800b2d2:	0c0b      	lsrs	r3, r1, #16
 800b2d4:	fb02 3306 	mla	r3, r2, r6, r3
 800b2d8:	b289      	uxth	r1, r1
 800b2da:	3001      	adds	r0, #1
 800b2dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2e0:	4285      	cmp	r5, r0
 800b2e2:	f84c 1b04 	str.w	r1, [ip], #4
 800b2e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2ea:	dcec      	bgt.n	800b2c6 <__multadd+0x12>
 800b2ec:	b30e      	cbz	r6, 800b332 <__multadd+0x7e>
 800b2ee:	68a3      	ldr	r3, [r4, #8]
 800b2f0:	42ab      	cmp	r3, r5
 800b2f2:	dc19      	bgt.n	800b328 <__multadd+0x74>
 800b2f4:	6861      	ldr	r1, [r4, #4]
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	3101      	adds	r1, #1
 800b2fa:	f7ff ff79 	bl	800b1f0 <_Balloc>
 800b2fe:	4680      	mov	r8, r0
 800b300:	b928      	cbnz	r0, 800b30e <__multadd+0x5a>
 800b302:	4602      	mov	r2, r0
 800b304:	4b0c      	ldr	r3, [pc, #48]	; (800b338 <__multadd+0x84>)
 800b306:	480d      	ldr	r0, [pc, #52]	; (800b33c <__multadd+0x88>)
 800b308:	21b5      	movs	r1, #181	; 0xb5
 800b30a:	f000 fd57 	bl	800bdbc <__assert_func>
 800b30e:	6922      	ldr	r2, [r4, #16]
 800b310:	3202      	adds	r2, #2
 800b312:	f104 010c 	add.w	r1, r4, #12
 800b316:	0092      	lsls	r2, r2, #2
 800b318:	300c      	adds	r0, #12
 800b31a:	f7ff ff5b 	bl	800b1d4 <memcpy>
 800b31e:	4621      	mov	r1, r4
 800b320:	4638      	mov	r0, r7
 800b322:	f7ff ffa5 	bl	800b270 <_Bfree>
 800b326:	4644      	mov	r4, r8
 800b328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b32c:	3501      	adds	r5, #1
 800b32e:	615e      	str	r6, [r3, #20]
 800b330:	6125      	str	r5, [r4, #16]
 800b332:	4620      	mov	r0, r4
 800b334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b338:	0800cab7 	.word	0x0800cab7
 800b33c:	0800cac8 	.word	0x0800cac8

0800b340 <__hi0bits>:
 800b340:	0c03      	lsrs	r3, r0, #16
 800b342:	041b      	lsls	r3, r3, #16
 800b344:	b9d3      	cbnz	r3, 800b37c <__hi0bits+0x3c>
 800b346:	0400      	lsls	r0, r0, #16
 800b348:	2310      	movs	r3, #16
 800b34a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b34e:	bf04      	itt	eq
 800b350:	0200      	lsleq	r0, r0, #8
 800b352:	3308      	addeq	r3, #8
 800b354:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b358:	bf04      	itt	eq
 800b35a:	0100      	lsleq	r0, r0, #4
 800b35c:	3304      	addeq	r3, #4
 800b35e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b362:	bf04      	itt	eq
 800b364:	0080      	lsleq	r0, r0, #2
 800b366:	3302      	addeq	r3, #2
 800b368:	2800      	cmp	r0, #0
 800b36a:	db05      	blt.n	800b378 <__hi0bits+0x38>
 800b36c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b370:	f103 0301 	add.w	r3, r3, #1
 800b374:	bf08      	it	eq
 800b376:	2320      	moveq	r3, #32
 800b378:	4618      	mov	r0, r3
 800b37a:	4770      	bx	lr
 800b37c:	2300      	movs	r3, #0
 800b37e:	e7e4      	b.n	800b34a <__hi0bits+0xa>

0800b380 <__lo0bits>:
 800b380:	6803      	ldr	r3, [r0, #0]
 800b382:	f013 0207 	ands.w	r2, r3, #7
 800b386:	4601      	mov	r1, r0
 800b388:	d00b      	beq.n	800b3a2 <__lo0bits+0x22>
 800b38a:	07da      	lsls	r2, r3, #31
 800b38c:	d423      	bmi.n	800b3d6 <__lo0bits+0x56>
 800b38e:	0798      	lsls	r0, r3, #30
 800b390:	bf49      	itett	mi
 800b392:	085b      	lsrmi	r3, r3, #1
 800b394:	089b      	lsrpl	r3, r3, #2
 800b396:	2001      	movmi	r0, #1
 800b398:	600b      	strmi	r3, [r1, #0]
 800b39a:	bf5c      	itt	pl
 800b39c:	600b      	strpl	r3, [r1, #0]
 800b39e:	2002      	movpl	r0, #2
 800b3a0:	4770      	bx	lr
 800b3a2:	b298      	uxth	r0, r3
 800b3a4:	b9a8      	cbnz	r0, 800b3d2 <__lo0bits+0x52>
 800b3a6:	0c1b      	lsrs	r3, r3, #16
 800b3a8:	2010      	movs	r0, #16
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	b90a      	cbnz	r2, 800b3b2 <__lo0bits+0x32>
 800b3ae:	3008      	adds	r0, #8
 800b3b0:	0a1b      	lsrs	r3, r3, #8
 800b3b2:	071a      	lsls	r2, r3, #28
 800b3b4:	bf04      	itt	eq
 800b3b6:	091b      	lsreq	r3, r3, #4
 800b3b8:	3004      	addeq	r0, #4
 800b3ba:	079a      	lsls	r2, r3, #30
 800b3bc:	bf04      	itt	eq
 800b3be:	089b      	lsreq	r3, r3, #2
 800b3c0:	3002      	addeq	r0, #2
 800b3c2:	07da      	lsls	r2, r3, #31
 800b3c4:	d403      	bmi.n	800b3ce <__lo0bits+0x4e>
 800b3c6:	085b      	lsrs	r3, r3, #1
 800b3c8:	f100 0001 	add.w	r0, r0, #1
 800b3cc:	d005      	beq.n	800b3da <__lo0bits+0x5a>
 800b3ce:	600b      	str	r3, [r1, #0]
 800b3d0:	4770      	bx	lr
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	e7e9      	b.n	800b3aa <__lo0bits+0x2a>
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	4770      	bx	lr
 800b3da:	2020      	movs	r0, #32
 800b3dc:	4770      	bx	lr
	...

0800b3e0 <__i2b>:
 800b3e0:	b510      	push	{r4, lr}
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	2101      	movs	r1, #1
 800b3e6:	f7ff ff03 	bl	800b1f0 <_Balloc>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	b928      	cbnz	r0, 800b3fa <__i2b+0x1a>
 800b3ee:	4b05      	ldr	r3, [pc, #20]	; (800b404 <__i2b+0x24>)
 800b3f0:	4805      	ldr	r0, [pc, #20]	; (800b408 <__i2b+0x28>)
 800b3f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3f6:	f000 fce1 	bl	800bdbc <__assert_func>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	6144      	str	r4, [r0, #20]
 800b3fe:	6103      	str	r3, [r0, #16]
 800b400:	bd10      	pop	{r4, pc}
 800b402:	bf00      	nop
 800b404:	0800cab7 	.word	0x0800cab7
 800b408:	0800cac8 	.word	0x0800cac8

0800b40c <__multiply>:
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	4691      	mov	r9, r2
 800b412:	690a      	ldr	r2, [r1, #16]
 800b414:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b418:	429a      	cmp	r2, r3
 800b41a:	bfb8      	it	lt
 800b41c:	460b      	movlt	r3, r1
 800b41e:	460c      	mov	r4, r1
 800b420:	bfbc      	itt	lt
 800b422:	464c      	movlt	r4, r9
 800b424:	4699      	movlt	r9, r3
 800b426:	6927      	ldr	r7, [r4, #16]
 800b428:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b42c:	68a3      	ldr	r3, [r4, #8]
 800b42e:	6861      	ldr	r1, [r4, #4]
 800b430:	eb07 060a 	add.w	r6, r7, sl
 800b434:	42b3      	cmp	r3, r6
 800b436:	b085      	sub	sp, #20
 800b438:	bfb8      	it	lt
 800b43a:	3101      	addlt	r1, #1
 800b43c:	f7ff fed8 	bl	800b1f0 <_Balloc>
 800b440:	b930      	cbnz	r0, 800b450 <__multiply+0x44>
 800b442:	4602      	mov	r2, r0
 800b444:	4b44      	ldr	r3, [pc, #272]	; (800b558 <__multiply+0x14c>)
 800b446:	4845      	ldr	r0, [pc, #276]	; (800b55c <__multiply+0x150>)
 800b448:	f240 115d 	movw	r1, #349	; 0x15d
 800b44c:	f000 fcb6 	bl	800bdbc <__assert_func>
 800b450:	f100 0514 	add.w	r5, r0, #20
 800b454:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b458:	462b      	mov	r3, r5
 800b45a:	2200      	movs	r2, #0
 800b45c:	4543      	cmp	r3, r8
 800b45e:	d321      	bcc.n	800b4a4 <__multiply+0x98>
 800b460:	f104 0314 	add.w	r3, r4, #20
 800b464:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b468:	f109 0314 	add.w	r3, r9, #20
 800b46c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b470:	9202      	str	r2, [sp, #8]
 800b472:	1b3a      	subs	r2, r7, r4
 800b474:	3a15      	subs	r2, #21
 800b476:	f022 0203 	bic.w	r2, r2, #3
 800b47a:	3204      	adds	r2, #4
 800b47c:	f104 0115 	add.w	r1, r4, #21
 800b480:	428f      	cmp	r7, r1
 800b482:	bf38      	it	cc
 800b484:	2204      	movcc	r2, #4
 800b486:	9201      	str	r2, [sp, #4]
 800b488:	9a02      	ldr	r2, [sp, #8]
 800b48a:	9303      	str	r3, [sp, #12]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d80c      	bhi.n	800b4aa <__multiply+0x9e>
 800b490:	2e00      	cmp	r6, #0
 800b492:	dd03      	ble.n	800b49c <__multiply+0x90>
 800b494:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d05a      	beq.n	800b552 <__multiply+0x146>
 800b49c:	6106      	str	r6, [r0, #16]
 800b49e:	b005      	add	sp, #20
 800b4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a4:	f843 2b04 	str.w	r2, [r3], #4
 800b4a8:	e7d8      	b.n	800b45c <__multiply+0x50>
 800b4aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4ae:	f1ba 0f00 	cmp.w	sl, #0
 800b4b2:	d024      	beq.n	800b4fe <__multiply+0xf2>
 800b4b4:	f104 0e14 	add.w	lr, r4, #20
 800b4b8:	46a9      	mov	r9, r5
 800b4ba:	f04f 0c00 	mov.w	ip, #0
 800b4be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4c2:	f8d9 1000 	ldr.w	r1, [r9]
 800b4c6:	fa1f fb82 	uxth.w	fp, r2
 800b4ca:	b289      	uxth	r1, r1
 800b4cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b4d4:	f8d9 2000 	ldr.w	r2, [r9]
 800b4d8:	4461      	add	r1, ip
 800b4da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4de:	fb0a c20b 	mla	r2, sl, fp, ip
 800b4e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4e6:	b289      	uxth	r1, r1
 800b4e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4ec:	4577      	cmp	r7, lr
 800b4ee:	f849 1b04 	str.w	r1, [r9], #4
 800b4f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4f6:	d8e2      	bhi.n	800b4be <__multiply+0xb2>
 800b4f8:	9a01      	ldr	r2, [sp, #4]
 800b4fa:	f845 c002 	str.w	ip, [r5, r2]
 800b4fe:	9a03      	ldr	r2, [sp, #12]
 800b500:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b504:	3304      	adds	r3, #4
 800b506:	f1b9 0f00 	cmp.w	r9, #0
 800b50a:	d020      	beq.n	800b54e <__multiply+0x142>
 800b50c:	6829      	ldr	r1, [r5, #0]
 800b50e:	f104 0c14 	add.w	ip, r4, #20
 800b512:	46ae      	mov	lr, r5
 800b514:	f04f 0a00 	mov.w	sl, #0
 800b518:	f8bc b000 	ldrh.w	fp, [ip]
 800b51c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b520:	fb09 220b 	mla	r2, r9, fp, r2
 800b524:	4492      	add	sl, r2
 800b526:	b289      	uxth	r1, r1
 800b528:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b52c:	f84e 1b04 	str.w	r1, [lr], #4
 800b530:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b534:	f8be 1000 	ldrh.w	r1, [lr]
 800b538:	0c12      	lsrs	r2, r2, #16
 800b53a:	fb09 1102 	mla	r1, r9, r2, r1
 800b53e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b542:	4567      	cmp	r7, ip
 800b544:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b548:	d8e6      	bhi.n	800b518 <__multiply+0x10c>
 800b54a:	9a01      	ldr	r2, [sp, #4]
 800b54c:	50a9      	str	r1, [r5, r2]
 800b54e:	3504      	adds	r5, #4
 800b550:	e79a      	b.n	800b488 <__multiply+0x7c>
 800b552:	3e01      	subs	r6, #1
 800b554:	e79c      	b.n	800b490 <__multiply+0x84>
 800b556:	bf00      	nop
 800b558:	0800cab7 	.word	0x0800cab7
 800b55c:	0800cac8 	.word	0x0800cac8

0800b560 <__pow5mult>:
 800b560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b564:	4615      	mov	r5, r2
 800b566:	f012 0203 	ands.w	r2, r2, #3
 800b56a:	4606      	mov	r6, r0
 800b56c:	460f      	mov	r7, r1
 800b56e:	d007      	beq.n	800b580 <__pow5mult+0x20>
 800b570:	4c25      	ldr	r4, [pc, #148]	; (800b608 <__pow5mult+0xa8>)
 800b572:	3a01      	subs	r2, #1
 800b574:	2300      	movs	r3, #0
 800b576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b57a:	f7ff fe9b 	bl	800b2b4 <__multadd>
 800b57e:	4607      	mov	r7, r0
 800b580:	10ad      	asrs	r5, r5, #2
 800b582:	d03d      	beq.n	800b600 <__pow5mult+0xa0>
 800b584:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b586:	b97c      	cbnz	r4, 800b5a8 <__pow5mult+0x48>
 800b588:	2010      	movs	r0, #16
 800b58a:	f7ff fe1b 	bl	800b1c4 <malloc>
 800b58e:	4602      	mov	r2, r0
 800b590:	6270      	str	r0, [r6, #36]	; 0x24
 800b592:	b928      	cbnz	r0, 800b5a0 <__pow5mult+0x40>
 800b594:	4b1d      	ldr	r3, [pc, #116]	; (800b60c <__pow5mult+0xac>)
 800b596:	481e      	ldr	r0, [pc, #120]	; (800b610 <__pow5mult+0xb0>)
 800b598:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b59c:	f000 fc0e 	bl	800bdbc <__assert_func>
 800b5a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5a4:	6004      	str	r4, [r0, #0]
 800b5a6:	60c4      	str	r4, [r0, #12]
 800b5a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5b0:	b94c      	cbnz	r4, 800b5c6 <__pow5mult+0x66>
 800b5b2:	f240 2171 	movw	r1, #625	; 0x271
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f7ff ff12 	bl	800b3e0 <__i2b>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	6003      	str	r3, [r0, #0]
 800b5c6:	f04f 0900 	mov.w	r9, #0
 800b5ca:	07eb      	lsls	r3, r5, #31
 800b5cc:	d50a      	bpl.n	800b5e4 <__pow5mult+0x84>
 800b5ce:	4639      	mov	r1, r7
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	f7ff ff1a 	bl	800b40c <__multiply>
 800b5d8:	4639      	mov	r1, r7
 800b5da:	4680      	mov	r8, r0
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f7ff fe47 	bl	800b270 <_Bfree>
 800b5e2:	4647      	mov	r7, r8
 800b5e4:	106d      	asrs	r5, r5, #1
 800b5e6:	d00b      	beq.n	800b600 <__pow5mult+0xa0>
 800b5e8:	6820      	ldr	r0, [r4, #0]
 800b5ea:	b938      	cbnz	r0, 800b5fc <__pow5mult+0x9c>
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f7ff ff0b 	bl	800b40c <__multiply>
 800b5f6:	6020      	str	r0, [r4, #0]
 800b5f8:	f8c0 9000 	str.w	r9, [r0]
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	e7e4      	b.n	800b5ca <__pow5mult+0x6a>
 800b600:	4638      	mov	r0, r7
 800b602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b606:	bf00      	nop
 800b608:	0800cc18 	.word	0x0800cc18
 800b60c:	0800ca45 	.word	0x0800ca45
 800b610:	0800cac8 	.word	0x0800cac8

0800b614 <__lshift>:
 800b614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b618:	460c      	mov	r4, r1
 800b61a:	6849      	ldr	r1, [r1, #4]
 800b61c:	6923      	ldr	r3, [r4, #16]
 800b61e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b622:	68a3      	ldr	r3, [r4, #8]
 800b624:	4607      	mov	r7, r0
 800b626:	4691      	mov	r9, r2
 800b628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b62c:	f108 0601 	add.w	r6, r8, #1
 800b630:	42b3      	cmp	r3, r6
 800b632:	db0b      	blt.n	800b64c <__lshift+0x38>
 800b634:	4638      	mov	r0, r7
 800b636:	f7ff fddb 	bl	800b1f0 <_Balloc>
 800b63a:	4605      	mov	r5, r0
 800b63c:	b948      	cbnz	r0, 800b652 <__lshift+0x3e>
 800b63e:	4602      	mov	r2, r0
 800b640:	4b2a      	ldr	r3, [pc, #168]	; (800b6ec <__lshift+0xd8>)
 800b642:	482b      	ldr	r0, [pc, #172]	; (800b6f0 <__lshift+0xdc>)
 800b644:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b648:	f000 fbb8 	bl	800bdbc <__assert_func>
 800b64c:	3101      	adds	r1, #1
 800b64e:	005b      	lsls	r3, r3, #1
 800b650:	e7ee      	b.n	800b630 <__lshift+0x1c>
 800b652:	2300      	movs	r3, #0
 800b654:	f100 0114 	add.w	r1, r0, #20
 800b658:	f100 0210 	add.w	r2, r0, #16
 800b65c:	4618      	mov	r0, r3
 800b65e:	4553      	cmp	r3, sl
 800b660:	db37      	blt.n	800b6d2 <__lshift+0xbe>
 800b662:	6920      	ldr	r0, [r4, #16]
 800b664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b668:	f104 0314 	add.w	r3, r4, #20
 800b66c:	f019 091f 	ands.w	r9, r9, #31
 800b670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b674:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b678:	d02f      	beq.n	800b6da <__lshift+0xc6>
 800b67a:	f1c9 0e20 	rsb	lr, r9, #32
 800b67e:	468a      	mov	sl, r1
 800b680:	f04f 0c00 	mov.w	ip, #0
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	fa02 f209 	lsl.w	r2, r2, r9
 800b68a:	ea42 020c 	orr.w	r2, r2, ip
 800b68e:	f84a 2b04 	str.w	r2, [sl], #4
 800b692:	f853 2b04 	ldr.w	r2, [r3], #4
 800b696:	4298      	cmp	r0, r3
 800b698:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b69c:	d8f2      	bhi.n	800b684 <__lshift+0x70>
 800b69e:	1b03      	subs	r3, r0, r4
 800b6a0:	3b15      	subs	r3, #21
 800b6a2:	f023 0303 	bic.w	r3, r3, #3
 800b6a6:	3304      	adds	r3, #4
 800b6a8:	f104 0215 	add.w	r2, r4, #21
 800b6ac:	4290      	cmp	r0, r2
 800b6ae:	bf38      	it	cc
 800b6b0:	2304      	movcc	r3, #4
 800b6b2:	f841 c003 	str.w	ip, [r1, r3]
 800b6b6:	f1bc 0f00 	cmp.w	ip, #0
 800b6ba:	d001      	beq.n	800b6c0 <__lshift+0xac>
 800b6bc:	f108 0602 	add.w	r6, r8, #2
 800b6c0:	3e01      	subs	r6, #1
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	612e      	str	r6, [r5, #16]
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	f7ff fdd2 	bl	800b270 <_Bfree>
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	e7c1      	b.n	800b65e <__lshift+0x4a>
 800b6da:	3904      	subs	r1, #4
 800b6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6e4:	4298      	cmp	r0, r3
 800b6e6:	d8f9      	bhi.n	800b6dc <__lshift+0xc8>
 800b6e8:	e7ea      	b.n	800b6c0 <__lshift+0xac>
 800b6ea:	bf00      	nop
 800b6ec:	0800cab7 	.word	0x0800cab7
 800b6f0:	0800cac8 	.word	0x0800cac8

0800b6f4 <__mcmp>:
 800b6f4:	b530      	push	{r4, r5, lr}
 800b6f6:	6902      	ldr	r2, [r0, #16]
 800b6f8:	690c      	ldr	r4, [r1, #16]
 800b6fa:	1b12      	subs	r2, r2, r4
 800b6fc:	d10e      	bne.n	800b71c <__mcmp+0x28>
 800b6fe:	f100 0314 	add.w	r3, r0, #20
 800b702:	3114      	adds	r1, #20
 800b704:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b708:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b70c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b710:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b714:	42a5      	cmp	r5, r4
 800b716:	d003      	beq.n	800b720 <__mcmp+0x2c>
 800b718:	d305      	bcc.n	800b726 <__mcmp+0x32>
 800b71a:	2201      	movs	r2, #1
 800b71c:	4610      	mov	r0, r2
 800b71e:	bd30      	pop	{r4, r5, pc}
 800b720:	4283      	cmp	r3, r0
 800b722:	d3f3      	bcc.n	800b70c <__mcmp+0x18>
 800b724:	e7fa      	b.n	800b71c <__mcmp+0x28>
 800b726:	f04f 32ff 	mov.w	r2, #4294967295
 800b72a:	e7f7      	b.n	800b71c <__mcmp+0x28>

0800b72c <__mdiff>:
 800b72c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b730:	460c      	mov	r4, r1
 800b732:	4606      	mov	r6, r0
 800b734:	4611      	mov	r1, r2
 800b736:	4620      	mov	r0, r4
 800b738:	4690      	mov	r8, r2
 800b73a:	f7ff ffdb 	bl	800b6f4 <__mcmp>
 800b73e:	1e05      	subs	r5, r0, #0
 800b740:	d110      	bne.n	800b764 <__mdiff+0x38>
 800b742:	4629      	mov	r1, r5
 800b744:	4630      	mov	r0, r6
 800b746:	f7ff fd53 	bl	800b1f0 <_Balloc>
 800b74a:	b930      	cbnz	r0, 800b75a <__mdiff+0x2e>
 800b74c:	4b3a      	ldr	r3, [pc, #232]	; (800b838 <__mdiff+0x10c>)
 800b74e:	4602      	mov	r2, r0
 800b750:	f240 2132 	movw	r1, #562	; 0x232
 800b754:	4839      	ldr	r0, [pc, #228]	; (800b83c <__mdiff+0x110>)
 800b756:	f000 fb31 	bl	800bdbc <__assert_func>
 800b75a:	2301      	movs	r3, #1
 800b75c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b764:	bfa4      	itt	ge
 800b766:	4643      	movge	r3, r8
 800b768:	46a0      	movge	r8, r4
 800b76a:	4630      	mov	r0, r6
 800b76c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b770:	bfa6      	itte	ge
 800b772:	461c      	movge	r4, r3
 800b774:	2500      	movge	r5, #0
 800b776:	2501      	movlt	r5, #1
 800b778:	f7ff fd3a 	bl	800b1f0 <_Balloc>
 800b77c:	b920      	cbnz	r0, 800b788 <__mdiff+0x5c>
 800b77e:	4b2e      	ldr	r3, [pc, #184]	; (800b838 <__mdiff+0x10c>)
 800b780:	4602      	mov	r2, r0
 800b782:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b786:	e7e5      	b.n	800b754 <__mdiff+0x28>
 800b788:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b78c:	6926      	ldr	r6, [r4, #16]
 800b78e:	60c5      	str	r5, [r0, #12]
 800b790:	f104 0914 	add.w	r9, r4, #20
 800b794:	f108 0514 	add.w	r5, r8, #20
 800b798:	f100 0e14 	add.w	lr, r0, #20
 800b79c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b7a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7a4:	f108 0210 	add.w	r2, r8, #16
 800b7a8:	46f2      	mov	sl, lr
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b7b4:	fa1f f883 	uxth.w	r8, r3
 800b7b8:	fa11 f18b 	uxtah	r1, r1, fp
 800b7bc:	0c1b      	lsrs	r3, r3, #16
 800b7be:	eba1 0808 	sub.w	r8, r1, r8
 800b7c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7ca:	fa1f f888 	uxth.w	r8, r8
 800b7ce:	1419      	asrs	r1, r3, #16
 800b7d0:	454e      	cmp	r6, r9
 800b7d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7d6:	f84a 3b04 	str.w	r3, [sl], #4
 800b7da:	d8e7      	bhi.n	800b7ac <__mdiff+0x80>
 800b7dc:	1b33      	subs	r3, r6, r4
 800b7de:	3b15      	subs	r3, #21
 800b7e0:	f023 0303 	bic.w	r3, r3, #3
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	3415      	adds	r4, #21
 800b7e8:	42a6      	cmp	r6, r4
 800b7ea:	bf38      	it	cc
 800b7ec:	2304      	movcc	r3, #4
 800b7ee:	441d      	add	r5, r3
 800b7f0:	4473      	add	r3, lr
 800b7f2:	469e      	mov	lr, r3
 800b7f4:	462e      	mov	r6, r5
 800b7f6:	4566      	cmp	r6, ip
 800b7f8:	d30e      	bcc.n	800b818 <__mdiff+0xec>
 800b7fa:	f10c 0203 	add.w	r2, ip, #3
 800b7fe:	1b52      	subs	r2, r2, r5
 800b800:	f022 0203 	bic.w	r2, r2, #3
 800b804:	3d03      	subs	r5, #3
 800b806:	45ac      	cmp	ip, r5
 800b808:	bf38      	it	cc
 800b80a:	2200      	movcc	r2, #0
 800b80c:	441a      	add	r2, r3
 800b80e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b812:	b17b      	cbz	r3, 800b834 <__mdiff+0x108>
 800b814:	6107      	str	r7, [r0, #16]
 800b816:	e7a3      	b.n	800b760 <__mdiff+0x34>
 800b818:	f856 8b04 	ldr.w	r8, [r6], #4
 800b81c:	fa11 f288 	uxtah	r2, r1, r8
 800b820:	1414      	asrs	r4, r2, #16
 800b822:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b826:	b292      	uxth	r2, r2
 800b828:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b82c:	f84e 2b04 	str.w	r2, [lr], #4
 800b830:	1421      	asrs	r1, r4, #16
 800b832:	e7e0      	b.n	800b7f6 <__mdiff+0xca>
 800b834:	3f01      	subs	r7, #1
 800b836:	e7ea      	b.n	800b80e <__mdiff+0xe2>
 800b838:	0800cab7 	.word	0x0800cab7
 800b83c:	0800cac8 	.word	0x0800cac8

0800b840 <__d2b>:
 800b840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b844:	4689      	mov	r9, r1
 800b846:	2101      	movs	r1, #1
 800b848:	ec57 6b10 	vmov	r6, r7, d0
 800b84c:	4690      	mov	r8, r2
 800b84e:	f7ff fccf 	bl	800b1f0 <_Balloc>
 800b852:	4604      	mov	r4, r0
 800b854:	b930      	cbnz	r0, 800b864 <__d2b+0x24>
 800b856:	4602      	mov	r2, r0
 800b858:	4b25      	ldr	r3, [pc, #148]	; (800b8f0 <__d2b+0xb0>)
 800b85a:	4826      	ldr	r0, [pc, #152]	; (800b8f4 <__d2b+0xb4>)
 800b85c:	f240 310a 	movw	r1, #778	; 0x30a
 800b860:	f000 faac 	bl	800bdbc <__assert_func>
 800b864:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b868:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b86c:	bb35      	cbnz	r5, 800b8bc <__d2b+0x7c>
 800b86e:	2e00      	cmp	r6, #0
 800b870:	9301      	str	r3, [sp, #4]
 800b872:	d028      	beq.n	800b8c6 <__d2b+0x86>
 800b874:	4668      	mov	r0, sp
 800b876:	9600      	str	r6, [sp, #0]
 800b878:	f7ff fd82 	bl	800b380 <__lo0bits>
 800b87c:	9900      	ldr	r1, [sp, #0]
 800b87e:	b300      	cbz	r0, 800b8c2 <__d2b+0x82>
 800b880:	9a01      	ldr	r2, [sp, #4]
 800b882:	f1c0 0320 	rsb	r3, r0, #32
 800b886:	fa02 f303 	lsl.w	r3, r2, r3
 800b88a:	430b      	orrs	r3, r1
 800b88c:	40c2      	lsrs	r2, r0
 800b88e:	6163      	str	r3, [r4, #20]
 800b890:	9201      	str	r2, [sp, #4]
 800b892:	9b01      	ldr	r3, [sp, #4]
 800b894:	61a3      	str	r3, [r4, #24]
 800b896:	2b00      	cmp	r3, #0
 800b898:	bf14      	ite	ne
 800b89a:	2202      	movne	r2, #2
 800b89c:	2201      	moveq	r2, #1
 800b89e:	6122      	str	r2, [r4, #16]
 800b8a0:	b1d5      	cbz	r5, 800b8d8 <__d2b+0x98>
 800b8a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8a6:	4405      	add	r5, r0
 800b8a8:	f8c9 5000 	str.w	r5, [r9]
 800b8ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8b0:	f8c8 0000 	str.w	r0, [r8]
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	b003      	add	sp, #12
 800b8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8c0:	e7d5      	b.n	800b86e <__d2b+0x2e>
 800b8c2:	6161      	str	r1, [r4, #20]
 800b8c4:	e7e5      	b.n	800b892 <__d2b+0x52>
 800b8c6:	a801      	add	r0, sp, #4
 800b8c8:	f7ff fd5a 	bl	800b380 <__lo0bits>
 800b8cc:	9b01      	ldr	r3, [sp, #4]
 800b8ce:	6163      	str	r3, [r4, #20]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	6122      	str	r2, [r4, #16]
 800b8d4:	3020      	adds	r0, #32
 800b8d6:	e7e3      	b.n	800b8a0 <__d2b+0x60>
 800b8d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8e0:	f8c9 0000 	str.w	r0, [r9]
 800b8e4:	6918      	ldr	r0, [r3, #16]
 800b8e6:	f7ff fd2b 	bl	800b340 <__hi0bits>
 800b8ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8ee:	e7df      	b.n	800b8b0 <__d2b+0x70>
 800b8f0:	0800cab7 	.word	0x0800cab7
 800b8f4:	0800cac8 	.word	0x0800cac8

0800b8f8 <_calloc_r>:
 800b8f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8fa:	fba1 2402 	umull	r2, r4, r1, r2
 800b8fe:	b94c      	cbnz	r4, 800b914 <_calloc_r+0x1c>
 800b900:	4611      	mov	r1, r2
 800b902:	9201      	str	r2, [sp, #4]
 800b904:	f000 f87a 	bl	800b9fc <_malloc_r>
 800b908:	9a01      	ldr	r2, [sp, #4]
 800b90a:	4605      	mov	r5, r0
 800b90c:	b930      	cbnz	r0, 800b91c <_calloc_r+0x24>
 800b90e:	4628      	mov	r0, r5
 800b910:	b003      	add	sp, #12
 800b912:	bd30      	pop	{r4, r5, pc}
 800b914:	220c      	movs	r2, #12
 800b916:	6002      	str	r2, [r0, #0]
 800b918:	2500      	movs	r5, #0
 800b91a:	e7f8      	b.n	800b90e <_calloc_r+0x16>
 800b91c:	4621      	mov	r1, r4
 800b91e:	f7fe f941 	bl	8009ba4 <memset>
 800b922:	e7f4      	b.n	800b90e <_calloc_r+0x16>

0800b924 <_free_r>:
 800b924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b926:	2900      	cmp	r1, #0
 800b928:	d044      	beq.n	800b9b4 <_free_r+0x90>
 800b92a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b92e:	9001      	str	r0, [sp, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	f1a1 0404 	sub.w	r4, r1, #4
 800b936:	bfb8      	it	lt
 800b938:	18e4      	addlt	r4, r4, r3
 800b93a:	f000 fa9b 	bl	800be74 <__malloc_lock>
 800b93e:	4a1e      	ldr	r2, [pc, #120]	; (800b9b8 <_free_r+0x94>)
 800b940:	9801      	ldr	r0, [sp, #4]
 800b942:	6813      	ldr	r3, [r2, #0]
 800b944:	b933      	cbnz	r3, 800b954 <_free_r+0x30>
 800b946:	6063      	str	r3, [r4, #4]
 800b948:	6014      	str	r4, [r2, #0]
 800b94a:	b003      	add	sp, #12
 800b94c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b950:	f000 ba96 	b.w	800be80 <__malloc_unlock>
 800b954:	42a3      	cmp	r3, r4
 800b956:	d908      	bls.n	800b96a <_free_r+0x46>
 800b958:	6825      	ldr	r5, [r4, #0]
 800b95a:	1961      	adds	r1, r4, r5
 800b95c:	428b      	cmp	r3, r1
 800b95e:	bf01      	itttt	eq
 800b960:	6819      	ldreq	r1, [r3, #0]
 800b962:	685b      	ldreq	r3, [r3, #4]
 800b964:	1949      	addeq	r1, r1, r5
 800b966:	6021      	streq	r1, [r4, #0]
 800b968:	e7ed      	b.n	800b946 <_free_r+0x22>
 800b96a:	461a      	mov	r2, r3
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	b10b      	cbz	r3, 800b974 <_free_r+0x50>
 800b970:	42a3      	cmp	r3, r4
 800b972:	d9fa      	bls.n	800b96a <_free_r+0x46>
 800b974:	6811      	ldr	r1, [r2, #0]
 800b976:	1855      	adds	r5, r2, r1
 800b978:	42a5      	cmp	r5, r4
 800b97a:	d10b      	bne.n	800b994 <_free_r+0x70>
 800b97c:	6824      	ldr	r4, [r4, #0]
 800b97e:	4421      	add	r1, r4
 800b980:	1854      	adds	r4, r2, r1
 800b982:	42a3      	cmp	r3, r4
 800b984:	6011      	str	r1, [r2, #0]
 800b986:	d1e0      	bne.n	800b94a <_free_r+0x26>
 800b988:	681c      	ldr	r4, [r3, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	6053      	str	r3, [r2, #4]
 800b98e:	4421      	add	r1, r4
 800b990:	6011      	str	r1, [r2, #0]
 800b992:	e7da      	b.n	800b94a <_free_r+0x26>
 800b994:	d902      	bls.n	800b99c <_free_r+0x78>
 800b996:	230c      	movs	r3, #12
 800b998:	6003      	str	r3, [r0, #0]
 800b99a:	e7d6      	b.n	800b94a <_free_r+0x26>
 800b99c:	6825      	ldr	r5, [r4, #0]
 800b99e:	1961      	adds	r1, r4, r5
 800b9a0:	428b      	cmp	r3, r1
 800b9a2:	bf04      	itt	eq
 800b9a4:	6819      	ldreq	r1, [r3, #0]
 800b9a6:	685b      	ldreq	r3, [r3, #4]
 800b9a8:	6063      	str	r3, [r4, #4]
 800b9aa:	bf04      	itt	eq
 800b9ac:	1949      	addeq	r1, r1, r5
 800b9ae:	6021      	streq	r1, [r4, #0]
 800b9b0:	6054      	str	r4, [r2, #4]
 800b9b2:	e7ca      	b.n	800b94a <_free_r+0x26>
 800b9b4:	b003      	add	sp, #12
 800b9b6:	bd30      	pop	{r4, r5, pc}
 800b9b8:	20002090 	.word	0x20002090

0800b9bc <sbrk_aligned>:
 800b9bc:	b570      	push	{r4, r5, r6, lr}
 800b9be:	4e0e      	ldr	r6, [pc, #56]	; (800b9f8 <sbrk_aligned+0x3c>)
 800b9c0:	460c      	mov	r4, r1
 800b9c2:	6831      	ldr	r1, [r6, #0]
 800b9c4:	4605      	mov	r5, r0
 800b9c6:	b911      	cbnz	r1, 800b9ce <sbrk_aligned+0x12>
 800b9c8:	f000 f9e8 	bl	800bd9c <_sbrk_r>
 800b9cc:	6030      	str	r0, [r6, #0]
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f000 f9e3 	bl	800bd9c <_sbrk_r>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	d00a      	beq.n	800b9f0 <sbrk_aligned+0x34>
 800b9da:	1cc4      	adds	r4, r0, #3
 800b9dc:	f024 0403 	bic.w	r4, r4, #3
 800b9e0:	42a0      	cmp	r0, r4
 800b9e2:	d007      	beq.n	800b9f4 <sbrk_aligned+0x38>
 800b9e4:	1a21      	subs	r1, r4, r0
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	f000 f9d8 	bl	800bd9c <_sbrk_r>
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	d101      	bne.n	800b9f4 <sbrk_aligned+0x38>
 800b9f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	bd70      	pop	{r4, r5, r6, pc}
 800b9f8:	20002094 	.word	0x20002094

0800b9fc <_malloc_r>:
 800b9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba00:	1ccd      	adds	r5, r1, #3
 800ba02:	f025 0503 	bic.w	r5, r5, #3
 800ba06:	3508      	adds	r5, #8
 800ba08:	2d0c      	cmp	r5, #12
 800ba0a:	bf38      	it	cc
 800ba0c:	250c      	movcc	r5, #12
 800ba0e:	2d00      	cmp	r5, #0
 800ba10:	4607      	mov	r7, r0
 800ba12:	db01      	blt.n	800ba18 <_malloc_r+0x1c>
 800ba14:	42a9      	cmp	r1, r5
 800ba16:	d905      	bls.n	800ba24 <_malloc_r+0x28>
 800ba18:	230c      	movs	r3, #12
 800ba1a:	603b      	str	r3, [r7, #0]
 800ba1c:	2600      	movs	r6, #0
 800ba1e:	4630      	mov	r0, r6
 800ba20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba24:	4e2e      	ldr	r6, [pc, #184]	; (800bae0 <_malloc_r+0xe4>)
 800ba26:	f000 fa25 	bl	800be74 <__malloc_lock>
 800ba2a:	6833      	ldr	r3, [r6, #0]
 800ba2c:	461c      	mov	r4, r3
 800ba2e:	bb34      	cbnz	r4, 800ba7e <_malloc_r+0x82>
 800ba30:	4629      	mov	r1, r5
 800ba32:	4638      	mov	r0, r7
 800ba34:	f7ff ffc2 	bl	800b9bc <sbrk_aligned>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	d14d      	bne.n	800bada <_malloc_r+0xde>
 800ba3e:	6834      	ldr	r4, [r6, #0]
 800ba40:	4626      	mov	r6, r4
 800ba42:	2e00      	cmp	r6, #0
 800ba44:	d140      	bne.n	800bac8 <_malloc_r+0xcc>
 800ba46:	6823      	ldr	r3, [r4, #0]
 800ba48:	4631      	mov	r1, r6
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	eb04 0803 	add.w	r8, r4, r3
 800ba50:	f000 f9a4 	bl	800bd9c <_sbrk_r>
 800ba54:	4580      	cmp	r8, r0
 800ba56:	d13a      	bne.n	800bace <_malloc_r+0xd2>
 800ba58:	6821      	ldr	r1, [r4, #0]
 800ba5a:	3503      	adds	r5, #3
 800ba5c:	1a6d      	subs	r5, r5, r1
 800ba5e:	f025 0503 	bic.w	r5, r5, #3
 800ba62:	3508      	adds	r5, #8
 800ba64:	2d0c      	cmp	r5, #12
 800ba66:	bf38      	it	cc
 800ba68:	250c      	movcc	r5, #12
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	f7ff ffa5 	bl	800b9bc <sbrk_aligned>
 800ba72:	3001      	adds	r0, #1
 800ba74:	d02b      	beq.n	800bace <_malloc_r+0xd2>
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	442b      	add	r3, r5
 800ba7a:	6023      	str	r3, [r4, #0]
 800ba7c:	e00e      	b.n	800ba9c <_malloc_r+0xa0>
 800ba7e:	6822      	ldr	r2, [r4, #0]
 800ba80:	1b52      	subs	r2, r2, r5
 800ba82:	d41e      	bmi.n	800bac2 <_malloc_r+0xc6>
 800ba84:	2a0b      	cmp	r2, #11
 800ba86:	d916      	bls.n	800bab6 <_malloc_r+0xba>
 800ba88:	1961      	adds	r1, r4, r5
 800ba8a:	42a3      	cmp	r3, r4
 800ba8c:	6025      	str	r5, [r4, #0]
 800ba8e:	bf18      	it	ne
 800ba90:	6059      	strne	r1, [r3, #4]
 800ba92:	6863      	ldr	r3, [r4, #4]
 800ba94:	bf08      	it	eq
 800ba96:	6031      	streq	r1, [r6, #0]
 800ba98:	5162      	str	r2, [r4, r5]
 800ba9a:	604b      	str	r3, [r1, #4]
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	f104 060b 	add.w	r6, r4, #11
 800baa2:	f000 f9ed 	bl	800be80 <__malloc_unlock>
 800baa6:	f026 0607 	bic.w	r6, r6, #7
 800baaa:	1d23      	adds	r3, r4, #4
 800baac:	1af2      	subs	r2, r6, r3
 800baae:	d0b6      	beq.n	800ba1e <_malloc_r+0x22>
 800bab0:	1b9b      	subs	r3, r3, r6
 800bab2:	50a3      	str	r3, [r4, r2]
 800bab4:	e7b3      	b.n	800ba1e <_malloc_r+0x22>
 800bab6:	6862      	ldr	r2, [r4, #4]
 800bab8:	42a3      	cmp	r3, r4
 800baba:	bf0c      	ite	eq
 800babc:	6032      	streq	r2, [r6, #0]
 800babe:	605a      	strne	r2, [r3, #4]
 800bac0:	e7ec      	b.n	800ba9c <_malloc_r+0xa0>
 800bac2:	4623      	mov	r3, r4
 800bac4:	6864      	ldr	r4, [r4, #4]
 800bac6:	e7b2      	b.n	800ba2e <_malloc_r+0x32>
 800bac8:	4634      	mov	r4, r6
 800baca:	6876      	ldr	r6, [r6, #4]
 800bacc:	e7b9      	b.n	800ba42 <_malloc_r+0x46>
 800bace:	230c      	movs	r3, #12
 800bad0:	603b      	str	r3, [r7, #0]
 800bad2:	4638      	mov	r0, r7
 800bad4:	f000 f9d4 	bl	800be80 <__malloc_unlock>
 800bad8:	e7a1      	b.n	800ba1e <_malloc_r+0x22>
 800bada:	6025      	str	r5, [r4, #0]
 800badc:	e7de      	b.n	800ba9c <_malloc_r+0xa0>
 800bade:	bf00      	nop
 800bae0:	20002090 	.word	0x20002090

0800bae4 <__ssputs_r>:
 800bae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae8:	688e      	ldr	r6, [r1, #8]
 800baea:	429e      	cmp	r6, r3
 800baec:	4682      	mov	sl, r0
 800baee:	460c      	mov	r4, r1
 800baf0:	4690      	mov	r8, r2
 800baf2:	461f      	mov	r7, r3
 800baf4:	d838      	bhi.n	800bb68 <__ssputs_r+0x84>
 800baf6:	898a      	ldrh	r2, [r1, #12]
 800baf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bafc:	d032      	beq.n	800bb64 <__ssputs_r+0x80>
 800bafe:	6825      	ldr	r5, [r4, #0]
 800bb00:	6909      	ldr	r1, [r1, #16]
 800bb02:	eba5 0901 	sub.w	r9, r5, r1
 800bb06:	6965      	ldr	r5, [r4, #20]
 800bb08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb10:	3301      	adds	r3, #1
 800bb12:	444b      	add	r3, r9
 800bb14:	106d      	asrs	r5, r5, #1
 800bb16:	429d      	cmp	r5, r3
 800bb18:	bf38      	it	cc
 800bb1a:	461d      	movcc	r5, r3
 800bb1c:	0553      	lsls	r3, r2, #21
 800bb1e:	d531      	bpl.n	800bb84 <__ssputs_r+0xa0>
 800bb20:	4629      	mov	r1, r5
 800bb22:	f7ff ff6b 	bl	800b9fc <_malloc_r>
 800bb26:	4606      	mov	r6, r0
 800bb28:	b950      	cbnz	r0, 800bb40 <__ssputs_r+0x5c>
 800bb2a:	230c      	movs	r3, #12
 800bb2c:	f8ca 3000 	str.w	r3, [sl]
 800bb30:	89a3      	ldrh	r3, [r4, #12]
 800bb32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb36:	81a3      	strh	r3, [r4, #12]
 800bb38:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb40:	6921      	ldr	r1, [r4, #16]
 800bb42:	464a      	mov	r2, r9
 800bb44:	f7ff fb46 	bl	800b1d4 <memcpy>
 800bb48:	89a3      	ldrh	r3, [r4, #12]
 800bb4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb52:	81a3      	strh	r3, [r4, #12]
 800bb54:	6126      	str	r6, [r4, #16]
 800bb56:	6165      	str	r5, [r4, #20]
 800bb58:	444e      	add	r6, r9
 800bb5a:	eba5 0509 	sub.w	r5, r5, r9
 800bb5e:	6026      	str	r6, [r4, #0]
 800bb60:	60a5      	str	r5, [r4, #8]
 800bb62:	463e      	mov	r6, r7
 800bb64:	42be      	cmp	r6, r7
 800bb66:	d900      	bls.n	800bb6a <__ssputs_r+0x86>
 800bb68:	463e      	mov	r6, r7
 800bb6a:	6820      	ldr	r0, [r4, #0]
 800bb6c:	4632      	mov	r2, r6
 800bb6e:	4641      	mov	r1, r8
 800bb70:	f000 f966 	bl	800be40 <memmove>
 800bb74:	68a3      	ldr	r3, [r4, #8]
 800bb76:	1b9b      	subs	r3, r3, r6
 800bb78:	60a3      	str	r3, [r4, #8]
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	4433      	add	r3, r6
 800bb7e:	6023      	str	r3, [r4, #0]
 800bb80:	2000      	movs	r0, #0
 800bb82:	e7db      	b.n	800bb3c <__ssputs_r+0x58>
 800bb84:	462a      	mov	r2, r5
 800bb86:	f000 f981 	bl	800be8c <_realloc_r>
 800bb8a:	4606      	mov	r6, r0
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d1e1      	bne.n	800bb54 <__ssputs_r+0x70>
 800bb90:	6921      	ldr	r1, [r4, #16]
 800bb92:	4650      	mov	r0, sl
 800bb94:	f7ff fec6 	bl	800b924 <_free_r>
 800bb98:	e7c7      	b.n	800bb2a <__ssputs_r+0x46>
	...

0800bb9c <_svfiprintf_r>:
 800bb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba0:	4698      	mov	r8, r3
 800bba2:	898b      	ldrh	r3, [r1, #12]
 800bba4:	061b      	lsls	r3, r3, #24
 800bba6:	b09d      	sub	sp, #116	; 0x74
 800bba8:	4607      	mov	r7, r0
 800bbaa:	460d      	mov	r5, r1
 800bbac:	4614      	mov	r4, r2
 800bbae:	d50e      	bpl.n	800bbce <_svfiprintf_r+0x32>
 800bbb0:	690b      	ldr	r3, [r1, #16]
 800bbb2:	b963      	cbnz	r3, 800bbce <_svfiprintf_r+0x32>
 800bbb4:	2140      	movs	r1, #64	; 0x40
 800bbb6:	f7ff ff21 	bl	800b9fc <_malloc_r>
 800bbba:	6028      	str	r0, [r5, #0]
 800bbbc:	6128      	str	r0, [r5, #16]
 800bbbe:	b920      	cbnz	r0, 800bbca <_svfiprintf_r+0x2e>
 800bbc0:	230c      	movs	r3, #12
 800bbc2:	603b      	str	r3, [r7, #0]
 800bbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc8:	e0d1      	b.n	800bd6e <_svfiprintf_r+0x1d2>
 800bbca:	2340      	movs	r3, #64	; 0x40
 800bbcc:	616b      	str	r3, [r5, #20]
 800bbce:	2300      	movs	r3, #0
 800bbd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd2:	2320      	movs	r3, #32
 800bbd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbd8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbdc:	2330      	movs	r3, #48	; 0x30
 800bbde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd88 <_svfiprintf_r+0x1ec>
 800bbe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbe6:	f04f 0901 	mov.w	r9, #1
 800bbea:	4623      	mov	r3, r4
 800bbec:	469a      	mov	sl, r3
 800bbee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbf2:	b10a      	cbz	r2, 800bbf8 <_svfiprintf_r+0x5c>
 800bbf4:	2a25      	cmp	r2, #37	; 0x25
 800bbf6:	d1f9      	bne.n	800bbec <_svfiprintf_r+0x50>
 800bbf8:	ebba 0b04 	subs.w	fp, sl, r4
 800bbfc:	d00b      	beq.n	800bc16 <_svfiprintf_r+0x7a>
 800bbfe:	465b      	mov	r3, fp
 800bc00:	4622      	mov	r2, r4
 800bc02:	4629      	mov	r1, r5
 800bc04:	4638      	mov	r0, r7
 800bc06:	f7ff ff6d 	bl	800bae4 <__ssputs_r>
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	f000 80aa 	beq.w	800bd64 <_svfiprintf_r+0x1c8>
 800bc10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc12:	445a      	add	r2, fp
 800bc14:	9209      	str	r2, [sp, #36]	; 0x24
 800bc16:	f89a 3000 	ldrb.w	r3, [sl]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f000 80a2 	beq.w	800bd64 <_svfiprintf_r+0x1c8>
 800bc20:	2300      	movs	r3, #0
 800bc22:	f04f 32ff 	mov.w	r2, #4294967295
 800bc26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc2a:	f10a 0a01 	add.w	sl, sl, #1
 800bc2e:	9304      	str	r3, [sp, #16]
 800bc30:	9307      	str	r3, [sp, #28]
 800bc32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc36:	931a      	str	r3, [sp, #104]	; 0x68
 800bc38:	4654      	mov	r4, sl
 800bc3a:	2205      	movs	r2, #5
 800bc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc40:	4851      	ldr	r0, [pc, #324]	; (800bd88 <_svfiprintf_r+0x1ec>)
 800bc42:	f7f4 faed 	bl	8000220 <memchr>
 800bc46:	9a04      	ldr	r2, [sp, #16]
 800bc48:	b9d8      	cbnz	r0, 800bc82 <_svfiprintf_r+0xe6>
 800bc4a:	06d0      	lsls	r0, r2, #27
 800bc4c:	bf44      	itt	mi
 800bc4e:	2320      	movmi	r3, #32
 800bc50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc54:	0711      	lsls	r1, r2, #28
 800bc56:	bf44      	itt	mi
 800bc58:	232b      	movmi	r3, #43	; 0x2b
 800bc5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc5e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc62:	2b2a      	cmp	r3, #42	; 0x2a
 800bc64:	d015      	beq.n	800bc92 <_svfiprintf_r+0xf6>
 800bc66:	9a07      	ldr	r2, [sp, #28]
 800bc68:	4654      	mov	r4, sl
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	f04f 0c0a 	mov.w	ip, #10
 800bc70:	4621      	mov	r1, r4
 800bc72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc76:	3b30      	subs	r3, #48	; 0x30
 800bc78:	2b09      	cmp	r3, #9
 800bc7a:	d94e      	bls.n	800bd1a <_svfiprintf_r+0x17e>
 800bc7c:	b1b0      	cbz	r0, 800bcac <_svfiprintf_r+0x110>
 800bc7e:	9207      	str	r2, [sp, #28]
 800bc80:	e014      	b.n	800bcac <_svfiprintf_r+0x110>
 800bc82:	eba0 0308 	sub.w	r3, r0, r8
 800bc86:	fa09 f303 	lsl.w	r3, r9, r3
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	9304      	str	r3, [sp, #16]
 800bc8e:	46a2      	mov	sl, r4
 800bc90:	e7d2      	b.n	800bc38 <_svfiprintf_r+0x9c>
 800bc92:	9b03      	ldr	r3, [sp, #12]
 800bc94:	1d19      	adds	r1, r3, #4
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	9103      	str	r1, [sp, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	bfbb      	ittet	lt
 800bc9e:	425b      	neglt	r3, r3
 800bca0:	f042 0202 	orrlt.w	r2, r2, #2
 800bca4:	9307      	strge	r3, [sp, #28]
 800bca6:	9307      	strlt	r3, [sp, #28]
 800bca8:	bfb8      	it	lt
 800bcaa:	9204      	strlt	r2, [sp, #16]
 800bcac:	7823      	ldrb	r3, [r4, #0]
 800bcae:	2b2e      	cmp	r3, #46	; 0x2e
 800bcb0:	d10c      	bne.n	800bccc <_svfiprintf_r+0x130>
 800bcb2:	7863      	ldrb	r3, [r4, #1]
 800bcb4:	2b2a      	cmp	r3, #42	; 0x2a
 800bcb6:	d135      	bne.n	800bd24 <_svfiprintf_r+0x188>
 800bcb8:	9b03      	ldr	r3, [sp, #12]
 800bcba:	1d1a      	adds	r2, r3, #4
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	9203      	str	r2, [sp, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	bfb8      	it	lt
 800bcc4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcc8:	3402      	adds	r4, #2
 800bcca:	9305      	str	r3, [sp, #20]
 800bccc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd98 <_svfiprintf_r+0x1fc>
 800bcd0:	7821      	ldrb	r1, [r4, #0]
 800bcd2:	2203      	movs	r2, #3
 800bcd4:	4650      	mov	r0, sl
 800bcd6:	f7f4 faa3 	bl	8000220 <memchr>
 800bcda:	b140      	cbz	r0, 800bcee <_svfiprintf_r+0x152>
 800bcdc:	2340      	movs	r3, #64	; 0x40
 800bcde:	eba0 000a 	sub.w	r0, r0, sl
 800bce2:	fa03 f000 	lsl.w	r0, r3, r0
 800bce6:	9b04      	ldr	r3, [sp, #16]
 800bce8:	4303      	orrs	r3, r0
 800bcea:	3401      	adds	r4, #1
 800bcec:	9304      	str	r3, [sp, #16]
 800bcee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf2:	4826      	ldr	r0, [pc, #152]	; (800bd8c <_svfiprintf_r+0x1f0>)
 800bcf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcf8:	2206      	movs	r2, #6
 800bcfa:	f7f4 fa91 	bl	8000220 <memchr>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d038      	beq.n	800bd74 <_svfiprintf_r+0x1d8>
 800bd02:	4b23      	ldr	r3, [pc, #140]	; (800bd90 <_svfiprintf_r+0x1f4>)
 800bd04:	bb1b      	cbnz	r3, 800bd4e <_svfiprintf_r+0x1b2>
 800bd06:	9b03      	ldr	r3, [sp, #12]
 800bd08:	3307      	adds	r3, #7
 800bd0a:	f023 0307 	bic.w	r3, r3, #7
 800bd0e:	3308      	adds	r3, #8
 800bd10:	9303      	str	r3, [sp, #12]
 800bd12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd14:	4433      	add	r3, r6
 800bd16:	9309      	str	r3, [sp, #36]	; 0x24
 800bd18:	e767      	b.n	800bbea <_svfiprintf_r+0x4e>
 800bd1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd1e:	460c      	mov	r4, r1
 800bd20:	2001      	movs	r0, #1
 800bd22:	e7a5      	b.n	800bc70 <_svfiprintf_r+0xd4>
 800bd24:	2300      	movs	r3, #0
 800bd26:	3401      	adds	r4, #1
 800bd28:	9305      	str	r3, [sp, #20]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	f04f 0c0a 	mov.w	ip, #10
 800bd30:	4620      	mov	r0, r4
 800bd32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd36:	3a30      	subs	r2, #48	; 0x30
 800bd38:	2a09      	cmp	r2, #9
 800bd3a:	d903      	bls.n	800bd44 <_svfiprintf_r+0x1a8>
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d0c5      	beq.n	800bccc <_svfiprintf_r+0x130>
 800bd40:	9105      	str	r1, [sp, #20]
 800bd42:	e7c3      	b.n	800bccc <_svfiprintf_r+0x130>
 800bd44:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd48:	4604      	mov	r4, r0
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e7f0      	b.n	800bd30 <_svfiprintf_r+0x194>
 800bd4e:	ab03      	add	r3, sp, #12
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	462a      	mov	r2, r5
 800bd54:	4b0f      	ldr	r3, [pc, #60]	; (800bd94 <_svfiprintf_r+0x1f8>)
 800bd56:	a904      	add	r1, sp, #16
 800bd58:	4638      	mov	r0, r7
 800bd5a:	f7fd ffcb 	bl	8009cf4 <_printf_float>
 800bd5e:	1c42      	adds	r2, r0, #1
 800bd60:	4606      	mov	r6, r0
 800bd62:	d1d6      	bne.n	800bd12 <_svfiprintf_r+0x176>
 800bd64:	89ab      	ldrh	r3, [r5, #12]
 800bd66:	065b      	lsls	r3, r3, #25
 800bd68:	f53f af2c 	bmi.w	800bbc4 <_svfiprintf_r+0x28>
 800bd6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd6e:	b01d      	add	sp, #116	; 0x74
 800bd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd74:	ab03      	add	r3, sp, #12
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	462a      	mov	r2, r5
 800bd7a:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <_svfiprintf_r+0x1f8>)
 800bd7c:	a904      	add	r1, sp, #16
 800bd7e:	4638      	mov	r0, r7
 800bd80:	f7fe fa5c 	bl	800a23c <_printf_i>
 800bd84:	e7eb      	b.n	800bd5e <_svfiprintf_r+0x1c2>
 800bd86:	bf00      	nop
 800bd88:	0800cc24 	.word	0x0800cc24
 800bd8c:	0800cc2e 	.word	0x0800cc2e
 800bd90:	08009cf5 	.word	0x08009cf5
 800bd94:	0800bae5 	.word	0x0800bae5
 800bd98:	0800cc2a 	.word	0x0800cc2a

0800bd9c <_sbrk_r>:
 800bd9c:	b538      	push	{r3, r4, r5, lr}
 800bd9e:	4d06      	ldr	r5, [pc, #24]	; (800bdb8 <_sbrk_r+0x1c>)
 800bda0:	2300      	movs	r3, #0
 800bda2:	4604      	mov	r4, r0
 800bda4:	4608      	mov	r0, r1
 800bda6:	602b      	str	r3, [r5, #0]
 800bda8:	f7f5 fda2 	bl	80018f0 <_sbrk>
 800bdac:	1c43      	adds	r3, r0, #1
 800bdae:	d102      	bne.n	800bdb6 <_sbrk_r+0x1a>
 800bdb0:	682b      	ldr	r3, [r5, #0]
 800bdb2:	b103      	cbz	r3, 800bdb6 <_sbrk_r+0x1a>
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	bd38      	pop	{r3, r4, r5, pc}
 800bdb8:	20002098 	.word	0x20002098

0800bdbc <__assert_func>:
 800bdbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bdbe:	4614      	mov	r4, r2
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	4b09      	ldr	r3, [pc, #36]	; (800bde8 <__assert_func+0x2c>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	68d8      	ldr	r0, [r3, #12]
 800bdca:	b14c      	cbz	r4, 800bde0 <__assert_func+0x24>
 800bdcc:	4b07      	ldr	r3, [pc, #28]	; (800bdec <__assert_func+0x30>)
 800bdce:	9100      	str	r1, [sp, #0]
 800bdd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bdd4:	4906      	ldr	r1, [pc, #24]	; (800bdf0 <__assert_func+0x34>)
 800bdd6:	462b      	mov	r3, r5
 800bdd8:	f000 f80e 	bl	800bdf8 <fiprintf>
 800bddc:	f000 faac 	bl	800c338 <abort>
 800bde0:	4b04      	ldr	r3, [pc, #16]	; (800bdf4 <__assert_func+0x38>)
 800bde2:	461c      	mov	r4, r3
 800bde4:	e7f3      	b.n	800bdce <__assert_func+0x12>
 800bde6:	bf00      	nop
 800bde8:	2000010c 	.word	0x2000010c
 800bdec:	0800cc35 	.word	0x0800cc35
 800bdf0:	0800cc42 	.word	0x0800cc42
 800bdf4:	0800cc70 	.word	0x0800cc70

0800bdf8 <fiprintf>:
 800bdf8:	b40e      	push	{r1, r2, r3}
 800bdfa:	b503      	push	{r0, r1, lr}
 800bdfc:	4601      	mov	r1, r0
 800bdfe:	ab03      	add	r3, sp, #12
 800be00:	4805      	ldr	r0, [pc, #20]	; (800be18 <fiprintf+0x20>)
 800be02:	f853 2b04 	ldr.w	r2, [r3], #4
 800be06:	6800      	ldr	r0, [r0, #0]
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	f000 f897 	bl	800bf3c <_vfiprintf_r>
 800be0e:	b002      	add	sp, #8
 800be10:	f85d eb04 	ldr.w	lr, [sp], #4
 800be14:	b003      	add	sp, #12
 800be16:	4770      	bx	lr
 800be18:	2000010c 	.word	0x2000010c

0800be1c <__ascii_mbtowc>:
 800be1c:	b082      	sub	sp, #8
 800be1e:	b901      	cbnz	r1, 800be22 <__ascii_mbtowc+0x6>
 800be20:	a901      	add	r1, sp, #4
 800be22:	b142      	cbz	r2, 800be36 <__ascii_mbtowc+0x1a>
 800be24:	b14b      	cbz	r3, 800be3a <__ascii_mbtowc+0x1e>
 800be26:	7813      	ldrb	r3, [r2, #0]
 800be28:	600b      	str	r3, [r1, #0]
 800be2a:	7812      	ldrb	r2, [r2, #0]
 800be2c:	1e10      	subs	r0, r2, #0
 800be2e:	bf18      	it	ne
 800be30:	2001      	movne	r0, #1
 800be32:	b002      	add	sp, #8
 800be34:	4770      	bx	lr
 800be36:	4610      	mov	r0, r2
 800be38:	e7fb      	b.n	800be32 <__ascii_mbtowc+0x16>
 800be3a:	f06f 0001 	mvn.w	r0, #1
 800be3e:	e7f8      	b.n	800be32 <__ascii_mbtowc+0x16>

0800be40 <memmove>:
 800be40:	4288      	cmp	r0, r1
 800be42:	b510      	push	{r4, lr}
 800be44:	eb01 0402 	add.w	r4, r1, r2
 800be48:	d902      	bls.n	800be50 <memmove+0x10>
 800be4a:	4284      	cmp	r4, r0
 800be4c:	4623      	mov	r3, r4
 800be4e:	d807      	bhi.n	800be60 <memmove+0x20>
 800be50:	1e43      	subs	r3, r0, #1
 800be52:	42a1      	cmp	r1, r4
 800be54:	d008      	beq.n	800be68 <memmove+0x28>
 800be56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be5e:	e7f8      	b.n	800be52 <memmove+0x12>
 800be60:	4402      	add	r2, r0
 800be62:	4601      	mov	r1, r0
 800be64:	428a      	cmp	r2, r1
 800be66:	d100      	bne.n	800be6a <memmove+0x2a>
 800be68:	bd10      	pop	{r4, pc}
 800be6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be72:	e7f7      	b.n	800be64 <memmove+0x24>

0800be74 <__malloc_lock>:
 800be74:	4801      	ldr	r0, [pc, #4]	; (800be7c <__malloc_lock+0x8>)
 800be76:	f000 bc1f 	b.w	800c6b8 <__retarget_lock_acquire_recursive>
 800be7a:	bf00      	nop
 800be7c:	2000209c 	.word	0x2000209c

0800be80 <__malloc_unlock>:
 800be80:	4801      	ldr	r0, [pc, #4]	; (800be88 <__malloc_unlock+0x8>)
 800be82:	f000 bc1a 	b.w	800c6ba <__retarget_lock_release_recursive>
 800be86:	bf00      	nop
 800be88:	2000209c 	.word	0x2000209c

0800be8c <_realloc_r>:
 800be8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be90:	4680      	mov	r8, r0
 800be92:	4614      	mov	r4, r2
 800be94:	460e      	mov	r6, r1
 800be96:	b921      	cbnz	r1, 800bea2 <_realloc_r+0x16>
 800be98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be9c:	4611      	mov	r1, r2
 800be9e:	f7ff bdad 	b.w	800b9fc <_malloc_r>
 800bea2:	b92a      	cbnz	r2, 800beb0 <_realloc_r+0x24>
 800bea4:	f7ff fd3e 	bl	800b924 <_free_r>
 800bea8:	4625      	mov	r5, r4
 800beaa:	4628      	mov	r0, r5
 800beac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb0:	f000 fc6a 	bl	800c788 <_malloc_usable_size_r>
 800beb4:	4284      	cmp	r4, r0
 800beb6:	4607      	mov	r7, r0
 800beb8:	d802      	bhi.n	800bec0 <_realloc_r+0x34>
 800beba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bebe:	d812      	bhi.n	800bee6 <_realloc_r+0x5a>
 800bec0:	4621      	mov	r1, r4
 800bec2:	4640      	mov	r0, r8
 800bec4:	f7ff fd9a 	bl	800b9fc <_malloc_r>
 800bec8:	4605      	mov	r5, r0
 800beca:	2800      	cmp	r0, #0
 800becc:	d0ed      	beq.n	800beaa <_realloc_r+0x1e>
 800bece:	42bc      	cmp	r4, r7
 800bed0:	4622      	mov	r2, r4
 800bed2:	4631      	mov	r1, r6
 800bed4:	bf28      	it	cs
 800bed6:	463a      	movcs	r2, r7
 800bed8:	f7ff f97c 	bl	800b1d4 <memcpy>
 800bedc:	4631      	mov	r1, r6
 800bede:	4640      	mov	r0, r8
 800bee0:	f7ff fd20 	bl	800b924 <_free_r>
 800bee4:	e7e1      	b.n	800beaa <_realloc_r+0x1e>
 800bee6:	4635      	mov	r5, r6
 800bee8:	e7df      	b.n	800beaa <_realloc_r+0x1e>

0800beea <__sfputc_r>:
 800beea:	6893      	ldr	r3, [r2, #8]
 800beec:	3b01      	subs	r3, #1
 800beee:	2b00      	cmp	r3, #0
 800bef0:	b410      	push	{r4}
 800bef2:	6093      	str	r3, [r2, #8]
 800bef4:	da08      	bge.n	800bf08 <__sfputc_r+0x1e>
 800bef6:	6994      	ldr	r4, [r2, #24]
 800bef8:	42a3      	cmp	r3, r4
 800befa:	db01      	blt.n	800bf00 <__sfputc_r+0x16>
 800befc:	290a      	cmp	r1, #10
 800befe:	d103      	bne.n	800bf08 <__sfputc_r+0x1e>
 800bf00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf04:	f000 b94a 	b.w	800c19c <__swbuf_r>
 800bf08:	6813      	ldr	r3, [r2, #0]
 800bf0a:	1c58      	adds	r0, r3, #1
 800bf0c:	6010      	str	r0, [r2, #0]
 800bf0e:	7019      	strb	r1, [r3, #0]
 800bf10:	4608      	mov	r0, r1
 800bf12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <__sfputs_r>:
 800bf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460f      	mov	r7, r1
 800bf1e:	4614      	mov	r4, r2
 800bf20:	18d5      	adds	r5, r2, r3
 800bf22:	42ac      	cmp	r4, r5
 800bf24:	d101      	bne.n	800bf2a <__sfputs_r+0x12>
 800bf26:	2000      	movs	r0, #0
 800bf28:	e007      	b.n	800bf3a <__sfputs_r+0x22>
 800bf2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf2e:	463a      	mov	r2, r7
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7ff ffda 	bl	800beea <__sfputc_r>
 800bf36:	1c43      	adds	r3, r0, #1
 800bf38:	d1f3      	bne.n	800bf22 <__sfputs_r+0xa>
 800bf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf3c <_vfiprintf_r>:
 800bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf40:	460d      	mov	r5, r1
 800bf42:	b09d      	sub	sp, #116	; 0x74
 800bf44:	4614      	mov	r4, r2
 800bf46:	4698      	mov	r8, r3
 800bf48:	4606      	mov	r6, r0
 800bf4a:	b118      	cbz	r0, 800bf54 <_vfiprintf_r+0x18>
 800bf4c:	6983      	ldr	r3, [r0, #24]
 800bf4e:	b90b      	cbnz	r3, 800bf54 <_vfiprintf_r+0x18>
 800bf50:	f000 fb14 	bl	800c57c <__sinit>
 800bf54:	4b89      	ldr	r3, [pc, #548]	; (800c17c <_vfiprintf_r+0x240>)
 800bf56:	429d      	cmp	r5, r3
 800bf58:	d11b      	bne.n	800bf92 <_vfiprintf_r+0x56>
 800bf5a:	6875      	ldr	r5, [r6, #4]
 800bf5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf5e:	07d9      	lsls	r1, r3, #31
 800bf60:	d405      	bmi.n	800bf6e <_vfiprintf_r+0x32>
 800bf62:	89ab      	ldrh	r3, [r5, #12]
 800bf64:	059a      	lsls	r2, r3, #22
 800bf66:	d402      	bmi.n	800bf6e <_vfiprintf_r+0x32>
 800bf68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf6a:	f000 fba5 	bl	800c6b8 <__retarget_lock_acquire_recursive>
 800bf6e:	89ab      	ldrh	r3, [r5, #12]
 800bf70:	071b      	lsls	r3, r3, #28
 800bf72:	d501      	bpl.n	800bf78 <_vfiprintf_r+0x3c>
 800bf74:	692b      	ldr	r3, [r5, #16]
 800bf76:	b9eb      	cbnz	r3, 800bfb4 <_vfiprintf_r+0x78>
 800bf78:	4629      	mov	r1, r5
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f000 f96e 	bl	800c25c <__swsetup_r>
 800bf80:	b1c0      	cbz	r0, 800bfb4 <_vfiprintf_r+0x78>
 800bf82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf84:	07dc      	lsls	r4, r3, #31
 800bf86:	d50e      	bpl.n	800bfa6 <_vfiprintf_r+0x6a>
 800bf88:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8c:	b01d      	add	sp, #116	; 0x74
 800bf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf92:	4b7b      	ldr	r3, [pc, #492]	; (800c180 <_vfiprintf_r+0x244>)
 800bf94:	429d      	cmp	r5, r3
 800bf96:	d101      	bne.n	800bf9c <_vfiprintf_r+0x60>
 800bf98:	68b5      	ldr	r5, [r6, #8]
 800bf9a:	e7df      	b.n	800bf5c <_vfiprintf_r+0x20>
 800bf9c:	4b79      	ldr	r3, [pc, #484]	; (800c184 <_vfiprintf_r+0x248>)
 800bf9e:	429d      	cmp	r5, r3
 800bfa0:	bf08      	it	eq
 800bfa2:	68f5      	ldreq	r5, [r6, #12]
 800bfa4:	e7da      	b.n	800bf5c <_vfiprintf_r+0x20>
 800bfa6:	89ab      	ldrh	r3, [r5, #12]
 800bfa8:	0598      	lsls	r0, r3, #22
 800bfaa:	d4ed      	bmi.n	800bf88 <_vfiprintf_r+0x4c>
 800bfac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfae:	f000 fb84 	bl	800c6ba <__retarget_lock_release_recursive>
 800bfb2:	e7e9      	b.n	800bf88 <_vfiprintf_r+0x4c>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	9309      	str	r3, [sp, #36]	; 0x24
 800bfb8:	2320      	movs	r3, #32
 800bfba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfc2:	2330      	movs	r3, #48	; 0x30
 800bfc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c188 <_vfiprintf_r+0x24c>
 800bfc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfcc:	f04f 0901 	mov.w	r9, #1
 800bfd0:	4623      	mov	r3, r4
 800bfd2:	469a      	mov	sl, r3
 800bfd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfd8:	b10a      	cbz	r2, 800bfde <_vfiprintf_r+0xa2>
 800bfda:	2a25      	cmp	r2, #37	; 0x25
 800bfdc:	d1f9      	bne.n	800bfd2 <_vfiprintf_r+0x96>
 800bfde:	ebba 0b04 	subs.w	fp, sl, r4
 800bfe2:	d00b      	beq.n	800bffc <_vfiprintf_r+0xc0>
 800bfe4:	465b      	mov	r3, fp
 800bfe6:	4622      	mov	r2, r4
 800bfe8:	4629      	mov	r1, r5
 800bfea:	4630      	mov	r0, r6
 800bfec:	f7ff ff94 	bl	800bf18 <__sfputs_r>
 800bff0:	3001      	adds	r0, #1
 800bff2:	f000 80aa 	beq.w	800c14a <_vfiprintf_r+0x20e>
 800bff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bff8:	445a      	add	r2, fp
 800bffa:	9209      	str	r2, [sp, #36]	; 0x24
 800bffc:	f89a 3000 	ldrb.w	r3, [sl]
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 80a2 	beq.w	800c14a <_vfiprintf_r+0x20e>
 800c006:	2300      	movs	r3, #0
 800c008:	f04f 32ff 	mov.w	r2, #4294967295
 800c00c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c010:	f10a 0a01 	add.w	sl, sl, #1
 800c014:	9304      	str	r3, [sp, #16]
 800c016:	9307      	str	r3, [sp, #28]
 800c018:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c01c:	931a      	str	r3, [sp, #104]	; 0x68
 800c01e:	4654      	mov	r4, sl
 800c020:	2205      	movs	r2, #5
 800c022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c026:	4858      	ldr	r0, [pc, #352]	; (800c188 <_vfiprintf_r+0x24c>)
 800c028:	f7f4 f8fa 	bl	8000220 <memchr>
 800c02c:	9a04      	ldr	r2, [sp, #16]
 800c02e:	b9d8      	cbnz	r0, 800c068 <_vfiprintf_r+0x12c>
 800c030:	06d1      	lsls	r1, r2, #27
 800c032:	bf44      	itt	mi
 800c034:	2320      	movmi	r3, #32
 800c036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c03a:	0713      	lsls	r3, r2, #28
 800c03c:	bf44      	itt	mi
 800c03e:	232b      	movmi	r3, #43	; 0x2b
 800c040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c044:	f89a 3000 	ldrb.w	r3, [sl]
 800c048:	2b2a      	cmp	r3, #42	; 0x2a
 800c04a:	d015      	beq.n	800c078 <_vfiprintf_r+0x13c>
 800c04c:	9a07      	ldr	r2, [sp, #28]
 800c04e:	4654      	mov	r4, sl
 800c050:	2000      	movs	r0, #0
 800c052:	f04f 0c0a 	mov.w	ip, #10
 800c056:	4621      	mov	r1, r4
 800c058:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c05c:	3b30      	subs	r3, #48	; 0x30
 800c05e:	2b09      	cmp	r3, #9
 800c060:	d94e      	bls.n	800c100 <_vfiprintf_r+0x1c4>
 800c062:	b1b0      	cbz	r0, 800c092 <_vfiprintf_r+0x156>
 800c064:	9207      	str	r2, [sp, #28]
 800c066:	e014      	b.n	800c092 <_vfiprintf_r+0x156>
 800c068:	eba0 0308 	sub.w	r3, r0, r8
 800c06c:	fa09 f303 	lsl.w	r3, r9, r3
 800c070:	4313      	orrs	r3, r2
 800c072:	9304      	str	r3, [sp, #16]
 800c074:	46a2      	mov	sl, r4
 800c076:	e7d2      	b.n	800c01e <_vfiprintf_r+0xe2>
 800c078:	9b03      	ldr	r3, [sp, #12]
 800c07a:	1d19      	adds	r1, r3, #4
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	9103      	str	r1, [sp, #12]
 800c080:	2b00      	cmp	r3, #0
 800c082:	bfbb      	ittet	lt
 800c084:	425b      	neglt	r3, r3
 800c086:	f042 0202 	orrlt.w	r2, r2, #2
 800c08a:	9307      	strge	r3, [sp, #28]
 800c08c:	9307      	strlt	r3, [sp, #28]
 800c08e:	bfb8      	it	lt
 800c090:	9204      	strlt	r2, [sp, #16]
 800c092:	7823      	ldrb	r3, [r4, #0]
 800c094:	2b2e      	cmp	r3, #46	; 0x2e
 800c096:	d10c      	bne.n	800c0b2 <_vfiprintf_r+0x176>
 800c098:	7863      	ldrb	r3, [r4, #1]
 800c09a:	2b2a      	cmp	r3, #42	; 0x2a
 800c09c:	d135      	bne.n	800c10a <_vfiprintf_r+0x1ce>
 800c09e:	9b03      	ldr	r3, [sp, #12]
 800c0a0:	1d1a      	adds	r2, r3, #4
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	9203      	str	r2, [sp, #12]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	bfb8      	it	lt
 800c0aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0ae:	3402      	adds	r4, #2
 800c0b0:	9305      	str	r3, [sp, #20]
 800c0b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c198 <_vfiprintf_r+0x25c>
 800c0b6:	7821      	ldrb	r1, [r4, #0]
 800c0b8:	2203      	movs	r2, #3
 800c0ba:	4650      	mov	r0, sl
 800c0bc:	f7f4 f8b0 	bl	8000220 <memchr>
 800c0c0:	b140      	cbz	r0, 800c0d4 <_vfiprintf_r+0x198>
 800c0c2:	2340      	movs	r3, #64	; 0x40
 800c0c4:	eba0 000a 	sub.w	r0, r0, sl
 800c0c8:	fa03 f000 	lsl.w	r0, r3, r0
 800c0cc:	9b04      	ldr	r3, [sp, #16]
 800c0ce:	4303      	orrs	r3, r0
 800c0d0:	3401      	adds	r4, #1
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0d8:	482c      	ldr	r0, [pc, #176]	; (800c18c <_vfiprintf_r+0x250>)
 800c0da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0de:	2206      	movs	r2, #6
 800c0e0:	f7f4 f89e 	bl	8000220 <memchr>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d03f      	beq.n	800c168 <_vfiprintf_r+0x22c>
 800c0e8:	4b29      	ldr	r3, [pc, #164]	; (800c190 <_vfiprintf_r+0x254>)
 800c0ea:	bb1b      	cbnz	r3, 800c134 <_vfiprintf_r+0x1f8>
 800c0ec:	9b03      	ldr	r3, [sp, #12]
 800c0ee:	3307      	adds	r3, #7
 800c0f0:	f023 0307 	bic.w	r3, r3, #7
 800c0f4:	3308      	adds	r3, #8
 800c0f6:	9303      	str	r3, [sp, #12]
 800c0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0fa:	443b      	add	r3, r7
 800c0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c0fe:	e767      	b.n	800bfd0 <_vfiprintf_r+0x94>
 800c100:	fb0c 3202 	mla	r2, ip, r2, r3
 800c104:	460c      	mov	r4, r1
 800c106:	2001      	movs	r0, #1
 800c108:	e7a5      	b.n	800c056 <_vfiprintf_r+0x11a>
 800c10a:	2300      	movs	r3, #0
 800c10c:	3401      	adds	r4, #1
 800c10e:	9305      	str	r3, [sp, #20]
 800c110:	4619      	mov	r1, r3
 800c112:	f04f 0c0a 	mov.w	ip, #10
 800c116:	4620      	mov	r0, r4
 800c118:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c11c:	3a30      	subs	r2, #48	; 0x30
 800c11e:	2a09      	cmp	r2, #9
 800c120:	d903      	bls.n	800c12a <_vfiprintf_r+0x1ee>
 800c122:	2b00      	cmp	r3, #0
 800c124:	d0c5      	beq.n	800c0b2 <_vfiprintf_r+0x176>
 800c126:	9105      	str	r1, [sp, #20]
 800c128:	e7c3      	b.n	800c0b2 <_vfiprintf_r+0x176>
 800c12a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c12e:	4604      	mov	r4, r0
 800c130:	2301      	movs	r3, #1
 800c132:	e7f0      	b.n	800c116 <_vfiprintf_r+0x1da>
 800c134:	ab03      	add	r3, sp, #12
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	462a      	mov	r2, r5
 800c13a:	4b16      	ldr	r3, [pc, #88]	; (800c194 <_vfiprintf_r+0x258>)
 800c13c:	a904      	add	r1, sp, #16
 800c13e:	4630      	mov	r0, r6
 800c140:	f7fd fdd8 	bl	8009cf4 <_printf_float>
 800c144:	4607      	mov	r7, r0
 800c146:	1c78      	adds	r0, r7, #1
 800c148:	d1d6      	bne.n	800c0f8 <_vfiprintf_r+0x1bc>
 800c14a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c14c:	07d9      	lsls	r1, r3, #31
 800c14e:	d405      	bmi.n	800c15c <_vfiprintf_r+0x220>
 800c150:	89ab      	ldrh	r3, [r5, #12]
 800c152:	059a      	lsls	r2, r3, #22
 800c154:	d402      	bmi.n	800c15c <_vfiprintf_r+0x220>
 800c156:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c158:	f000 faaf 	bl	800c6ba <__retarget_lock_release_recursive>
 800c15c:	89ab      	ldrh	r3, [r5, #12]
 800c15e:	065b      	lsls	r3, r3, #25
 800c160:	f53f af12 	bmi.w	800bf88 <_vfiprintf_r+0x4c>
 800c164:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c166:	e711      	b.n	800bf8c <_vfiprintf_r+0x50>
 800c168:	ab03      	add	r3, sp, #12
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	462a      	mov	r2, r5
 800c16e:	4b09      	ldr	r3, [pc, #36]	; (800c194 <_vfiprintf_r+0x258>)
 800c170:	a904      	add	r1, sp, #16
 800c172:	4630      	mov	r0, r6
 800c174:	f7fe f862 	bl	800a23c <_printf_i>
 800c178:	e7e4      	b.n	800c144 <_vfiprintf_r+0x208>
 800c17a:	bf00      	nop
 800c17c:	0800cd9c 	.word	0x0800cd9c
 800c180:	0800cdbc 	.word	0x0800cdbc
 800c184:	0800cd7c 	.word	0x0800cd7c
 800c188:	0800cc24 	.word	0x0800cc24
 800c18c:	0800cc2e 	.word	0x0800cc2e
 800c190:	08009cf5 	.word	0x08009cf5
 800c194:	0800bf19 	.word	0x0800bf19
 800c198:	0800cc2a 	.word	0x0800cc2a

0800c19c <__swbuf_r>:
 800c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19e:	460e      	mov	r6, r1
 800c1a0:	4614      	mov	r4, r2
 800c1a2:	4605      	mov	r5, r0
 800c1a4:	b118      	cbz	r0, 800c1ae <__swbuf_r+0x12>
 800c1a6:	6983      	ldr	r3, [r0, #24]
 800c1a8:	b90b      	cbnz	r3, 800c1ae <__swbuf_r+0x12>
 800c1aa:	f000 f9e7 	bl	800c57c <__sinit>
 800c1ae:	4b21      	ldr	r3, [pc, #132]	; (800c234 <__swbuf_r+0x98>)
 800c1b0:	429c      	cmp	r4, r3
 800c1b2:	d12b      	bne.n	800c20c <__swbuf_r+0x70>
 800c1b4:	686c      	ldr	r4, [r5, #4]
 800c1b6:	69a3      	ldr	r3, [r4, #24]
 800c1b8:	60a3      	str	r3, [r4, #8]
 800c1ba:	89a3      	ldrh	r3, [r4, #12]
 800c1bc:	071a      	lsls	r2, r3, #28
 800c1be:	d52f      	bpl.n	800c220 <__swbuf_r+0x84>
 800c1c0:	6923      	ldr	r3, [r4, #16]
 800c1c2:	b36b      	cbz	r3, 800c220 <__swbuf_r+0x84>
 800c1c4:	6923      	ldr	r3, [r4, #16]
 800c1c6:	6820      	ldr	r0, [r4, #0]
 800c1c8:	1ac0      	subs	r0, r0, r3
 800c1ca:	6963      	ldr	r3, [r4, #20]
 800c1cc:	b2f6      	uxtb	r6, r6
 800c1ce:	4283      	cmp	r3, r0
 800c1d0:	4637      	mov	r7, r6
 800c1d2:	dc04      	bgt.n	800c1de <__swbuf_r+0x42>
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	f000 f93c 	bl	800c454 <_fflush_r>
 800c1dc:	bb30      	cbnz	r0, 800c22c <__swbuf_r+0x90>
 800c1de:	68a3      	ldr	r3, [r4, #8]
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	60a3      	str	r3, [r4, #8]
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	1c5a      	adds	r2, r3, #1
 800c1e8:	6022      	str	r2, [r4, #0]
 800c1ea:	701e      	strb	r6, [r3, #0]
 800c1ec:	6963      	ldr	r3, [r4, #20]
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	4283      	cmp	r3, r0
 800c1f2:	d004      	beq.n	800c1fe <__swbuf_r+0x62>
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	07db      	lsls	r3, r3, #31
 800c1f8:	d506      	bpl.n	800c208 <__swbuf_r+0x6c>
 800c1fa:	2e0a      	cmp	r6, #10
 800c1fc:	d104      	bne.n	800c208 <__swbuf_r+0x6c>
 800c1fe:	4621      	mov	r1, r4
 800c200:	4628      	mov	r0, r5
 800c202:	f000 f927 	bl	800c454 <_fflush_r>
 800c206:	b988      	cbnz	r0, 800c22c <__swbuf_r+0x90>
 800c208:	4638      	mov	r0, r7
 800c20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c20c:	4b0a      	ldr	r3, [pc, #40]	; (800c238 <__swbuf_r+0x9c>)
 800c20e:	429c      	cmp	r4, r3
 800c210:	d101      	bne.n	800c216 <__swbuf_r+0x7a>
 800c212:	68ac      	ldr	r4, [r5, #8]
 800c214:	e7cf      	b.n	800c1b6 <__swbuf_r+0x1a>
 800c216:	4b09      	ldr	r3, [pc, #36]	; (800c23c <__swbuf_r+0xa0>)
 800c218:	429c      	cmp	r4, r3
 800c21a:	bf08      	it	eq
 800c21c:	68ec      	ldreq	r4, [r5, #12]
 800c21e:	e7ca      	b.n	800c1b6 <__swbuf_r+0x1a>
 800c220:	4621      	mov	r1, r4
 800c222:	4628      	mov	r0, r5
 800c224:	f000 f81a 	bl	800c25c <__swsetup_r>
 800c228:	2800      	cmp	r0, #0
 800c22a:	d0cb      	beq.n	800c1c4 <__swbuf_r+0x28>
 800c22c:	f04f 37ff 	mov.w	r7, #4294967295
 800c230:	e7ea      	b.n	800c208 <__swbuf_r+0x6c>
 800c232:	bf00      	nop
 800c234:	0800cd9c 	.word	0x0800cd9c
 800c238:	0800cdbc 	.word	0x0800cdbc
 800c23c:	0800cd7c 	.word	0x0800cd7c

0800c240 <__ascii_wctomb>:
 800c240:	b149      	cbz	r1, 800c256 <__ascii_wctomb+0x16>
 800c242:	2aff      	cmp	r2, #255	; 0xff
 800c244:	bf85      	ittet	hi
 800c246:	238a      	movhi	r3, #138	; 0x8a
 800c248:	6003      	strhi	r3, [r0, #0]
 800c24a:	700a      	strbls	r2, [r1, #0]
 800c24c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c250:	bf98      	it	ls
 800c252:	2001      	movls	r0, #1
 800c254:	4770      	bx	lr
 800c256:	4608      	mov	r0, r1
 800c258:	4770      	bx	lr
	...

0800c25c <__swsetup_r>:
 800c25c:	4b32      	ldr	r3, [pc, #200]	; (800c328 <__swsetup_r+0xcc>)
 800c25e:	b570      	push	{r4, r5, r6, lr}
 800c260:	681d      	ldr	r5, [r3, #0]
 800c262:	4606      	mov	r6, r0
 800c264:	460c      	mov	r4, r1
 800c266:	b125      	cbz	r5, 800c272 <__swsetup_r+0x16>
 800c268:	69ab      	ldr	r3, [r5, #24]
 800c26a:	b913      	cbnz	r3, 800c272 <__swsetup_r+0x16>
 800c26c:	4628      	mov	r0, r5
 800c26e:	f000 f985 	bl	800c57c <__sinit>
 800c272:	4b2e      	ldr	r3, [pc, #184]	; (800c32c <__swsetup_r+0xd0>)
 800c274:	429c      	cmp	r4, r3
 800c276:	d10f      	bne.n	800c298 <__swsetup_r+0x3c>
 800c278:	686c      	ldr	r4, [r5, #4]
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c280:	0719      	lsls	r1, r3, #28
 800c282:	d42c      	bmi.n	800c2de <__swsetup_r+0x82>
 800c284:	06dd      	lsls	r5, r3, #27
 800c286:	d411      	bmi.n	800c2ac <__swsetup_r+0x50>
 800c288:	2309      	movs	r3, #9
 800c28a:	6033      	str	r3, [r6, #0]
 800c28c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c290:	81a3      	strh	r3, [r4, #12]
 800c292:	f04f 30ff 	mov.w	r0, #4294967295
 800c296:	e03e      	b.n	800c316 <__swsetup_r+0xba>
 800c298:	4b25      	ldr	r3, [pc, #148]	; (800c330 <__swsetup_r+0xd4>)
 800c29a:	429c      	cmp	r4, r3
 800c29c:	d101      	bne.n	800c2a2 <__swsetup_r+0x46>
 800c29e:	68ac      	ldr	r4, [r5, #8]
 800c2a0:	e7eb      	b.n	800c27a <__swsetup_r+0x1e>
 800c2a2:	4b24      	ldr	r3, [pc, #144]	; (800c334 <__swsetup_r+0xd8>)
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	bf08      	it	eq
 800c2a8:	68ec      	ldreq	r4, [r5, #12]
 800c2aa:	e7e6      	b.n	800c27a <__swsetup_r+0x1e>
 800c2ac:	0758      	lsls	r0, r3, #29
 800c2ae:	d512      	bpl.n	800c2d6 <__swsetup_r+0x7a>
 800c2b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2b2:	b141      	cbz	r1, 800c2c6 <__swsetup_r+0x6a>
 800c2b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2b8:	4299      	cmp	r1, r3
 800c2ba:	d002      	beq.n	800c2c2 <__swsetup_r+0x66>
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f7ff fb31 	bl	800b924 <_free_r>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	6363      	str	r3, [r4, #52]	; 0x34
 800c2c6:	89a3      	ldrh	r3, [r4, #12]
 800c2c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2cc:	81a3      	strh	r3, [r4, #12]
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	6063      	str	r3, [r4, #4]
 800c2d2:	6923      	ldr	r3, [r4, #16]
 800c2d4:	6023      	str	r3, [r4, #0]
 800c2d6:	89a3      	ldrh	r3, [r4, #12]
 800c2d8:	f043 0308 	orr.w	r3, r3, #8
 800c2dc:	81a3      	strh	r3, [r4, #12]
 800c2de:	6923      	ldr	r3, [r4, #16]
 800c2e0:	b94b      	cbnz	r3, 800c2f6 <__swsetup_r+0x9a>
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2ec:	d003      	beq.n	800c2f6 <__swsetup_r+0x9a>
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f000 fa09 	bl	800c708 <__smakebuf_r>
 800c2f6:	89a0      	ldrh	r0, [r4, #12]
 800c2f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2fc:	f010 0301 	ands.w	r3, r0, #1
 800c300:	d00a      	beq.n	800c318 <__swsetup_r+0xbc>
 800c302:	2300      	movs	r3, #0
 800c304:	60a3      	str	r3, [r4, #8]
 800c306:	6963      	ldr	r3, [r4, #20]
 800c308:	425b      	negs	r3, r3
 800c30a:	61a3      	str	r3, [r4, #24]
 800c30c:	6923      	ldr	r3, [r4, #16]
 800c30e:	b943      	cbnz	r3, 800c322 <__swsetup_r+0xc6>
 800c310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c314:	d1ba      	bne.n	800c28c <__swsetup_r+0x30>
 800c316:	bd70      	pop	{r4, r5, r6, pc}
 800c318:	0781      	lsls	r1, r0, #30
 800c31a:	bf58      	it	pl
 800c31c:	6963      	ldrpl	r3, [r4, #20]
 800c31e:	60a3      	str	r3, [r4, #8]
 800c320:	e7f4      	b.n	800c30c <__swsetup_r+0xb0>
 800c322:	2000      	movs	r0, #0
 800c324:	e7f7      	b.n	800c316 <__swsetup_r+0xba>
 800c326:	bf00      	nop
 800c328:	2000010c 	.word	0x2000010c
 800c32c:	0800cd9c 	.word	0x0800cd9c
 800c330:	0800cdbc 	.word	0x0800cdbc
 800c334:	0800cd7c 	.word	0x0800cd7c

0800c338 <abort>:
 800c338:	b508      	push	{r3, lr}
 800c33a:	2006      	movs	r0, #6
 800c33c:	f000 fa54 	bl	800c7e8 <raise>
 800c340:	2001      	movs	r0, #1
 800c342:	f7f5 fa5d 	bl	8001800 <_exit>
	...

0800c348 <__sflush_r>:
 800c348:	898a      	ldrh	r2, [r1, #12]
 800c34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c34e:	4605      	mov	r5, r0
 800c350:	0710      	lsls	r0, r2, #28
 800c352:	460c      	mov	r4, r1
 800c354:	d458      	bmi.n	800c408 <__sflush_r+0xc0>
 800c356:	684b      	ldr	r3, [r1, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	dc05      	bgt.n	800c368 <__sflush_r+0x20>
 800c35c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c35e:	2b00      	cmp	r3, #0
 800c360:	dc02      	bgt.n	800c368 <__sflush_r+0x20>
 800c362:	2000      	movs	r0, #0
 800c364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c36a:	2e00      	cmp	r6, #0
 800c36c:	d0f9      	beq.n	800c362 <__sflush_r+0x1a>
 800c36e:	2300      	movs	r3, #0
 800c370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c374:	682f      	ldr	r7, [r5, #0]
 800c376:	602b      	str	r3, [r5, #0]
 800c378:	d032      	beq.n	800c3e0 <__sflush_r+0x98>
 800c37a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c37c:	89a3      	ldrh	r3, [r4, #12]
 800c37e:	075a      	lsls	r2, r3, #29
 800c380:	d505      	bpl.n	800c38e <__sflush_r+0x46>
 800c382:	6863      	ldr	r3, [r4, #4]
 800c384:	1ac0      	subs	r0, r0, r3
 800c386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c388:	b10b      	cbz	r3, 800c38e <__sflush_r+0x46>
 800c38a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c38c:	1ac0      	subs	r0, r0, r3
 800c38e:	2300      	movs	r3, #0
 800c390:	4602      	mov	r2, r0
 800c392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c394:	6a21      	ldr	r1, [r4, #32]
 800c396:	4628      	mov	r0, r5
 800c398:	47b0      	blx	r6
 800c39a:	1c43      	adds	r3, r0, #1
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	d106      	bne.n	800c3ae <__sflush_r+0x66>
 800c3a0:	6829      	ldr	r1, [r5, #0]
 800c3a2:	291d      	cmp	r1, #29
 800c3a4:	d82c      	bhi.n	800c400 <__sflush_r+0xb8>
 800c3a6:	4a2a      	ldr	r2, [pc, #168]	; (800c450 <__sflush_r+0x108>)
 800c3a8:	40ca      	lsrs	r2, r1
 800c3aa:	07d6      	lsls	r6, r2, #31
 800c3ac:	d528      	bpl.n	800c400 <__sflush_r+0xb8>
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	6062      	str	r2, [r4, #4]
 800c3b2:	04d9      	lsls	r1, r3, #19
 800c3b4:	6922      	ldr	r2, [r4, #16]
 800c3b6:	6022      	str	r2, [r4, #0]
 800c3b8:	d504      	bpl.n	800c3c4 <__sflush_r+0x7c>
 800c3ba:	1c42      	adds	r2, r0, #1
 800c3bc:	d101      	bne.n	800c3c2 <__sflush_r+0x7a>
 800c3be:	682b      	ldr	r3, [r5, #0]
 800c3c0:	b903      	cbnz	r3, 800c3c4 <__sflush_r+0x7c>
 800c3c2:	6560      	str	r0, [r4, #84]	; 0x54
 800c3c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3c6:	602f      	str	r7, [r5, #0]
 800c3c8:	2900      	cmp	r1, #0
 800c3ca:	d0ca      	beq.n	800c362 <__sflush_r+0x1a>
 800c3cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3d0:	4299      	cmp	r1, r3
 800c3d2:	d002      	beq.n	800c3da <__sflush_r+0x92>
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	f7ff faa5 	bl	800b924 <_free_r>
 800c3da:	2000      	movs	r0, #0
 800c3dc:	6360      	str	r0, [r4, #52]	; 0x34
 800c3de:	e7c1      	b.n	800c364 <__sflush_r+0x1c>
 800c3e0:	6a21      	ldr	r1, [r4, #32]
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	47b0      	blx	r6
 800c3e8:	1c41      	adds	r1, r0, #1
 800c3ea:	d1c7      	bne.n	800c37c <__sflush_r+0x34>
 800c3ec:	682b      	ldr	r3, [r5, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0c4      	beq.n	800c37c <__sflush_r+0x34>
 800c3f2:	2b1d      	cmp	r3, #29
 800c3f4:	d001      	beq.n	800c3fa <__sflush_r+0xb2>
 800c3f6:	2b16      	cmp	r3, #22
 800c3f8:	d101      	bne.n	800c3fe <__sflush_r+0xb6>
 800c3fa:	602f      	str	r7, [r5, #0]
 800c3fc:	e7b1      	b.n	800c362 <__sflush_r+0x1a>
 800c3fe:	89a3      	ldrh	r3, [r4, #12]
 800c400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c404:	81a3      	strh	r3, [r4, #12]
 800c406:	e7ad      	b.n	800c364 <__sflush_r+0x1c>
 800c408:	690f      	ldr	r7, [r1, #16]
 800c40a:	2f00      	cmp	r7, #0
 800c40c:	d0a9      	beq.n	800c362 <__sflush_r+0x1a>
 800c40e:	0793      	lsls	r3, r2, #30
 800c410:	680e      	ldr	r6, [r1, #0]
 800c412:	bf08      	it	eq
 800c414:	694b      	ldreq	r3, [r1, #20]
 800c416:	600f      	str	r7, [r1, #0]
 800c418:	bf18      	it	ne
 800c41a:	2300      	movne	r3, #0
 800c41c:	eba6 0807 	sub.w	r8, r6, r7
 800c420:	608b      	str	r3, [r1, #8]
 800c422:	f1b8 0f00 	cmp.w	r8, #0
 800c426:	dd9c      	ble.n	800c362 <__sflush_r+0x1a>
 800c428:	6a21      	ldr	r1, [r4, #32]
 800c42a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c42c:	4643      	mov	r3, r8
 800c42e:	463a      	mov	r2, r7
 800c430:	4628      	mov	r0, r5
 800c432:	47b0      	blx	r6
 800c434:	2800      	cmp	r0, #0
 800c436:	dc06      	bgt.n	800c446 <__sflush_r+0xfe>
 800c438:	89a3      	ldrh	r3, [r4, #12]
 800c43a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c43e:	81a3      	strh	r3, [r4, #12]
 800c440:	f04f 30ff 	mov.w	r0, #4294967295
 800c444:	e78e      	b.n	800c364 <__sflush_r+0x1c>
 800c446:	4407      	add	r7, r0
 800c448:	eba8 0800 	sub.w	r8, r8, r0
 800c44c:	e7e9      	b.n	800c422 <__sflush_r+0xda>
 800c44e:	bf00      	nop
 800c450:	20400001 	.word	0x20400001

0800c454 <_fflush_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	690b      	ldr	r3, [r1, #16]
 800c458:	4605      	mov	r5, r0
 800c45a:	460c      	mov	r4, r1
 800c45c:	b913      	cbnz	r3, 800c464 <_fflush_r+0x10>
 800c45e:	2500      	movs	r5, #0
 800c460:	4628      	mov	r0, r5
 800c462:	bd38      	pop	{r3, r4, r5, pc}
 800c464:	b118      	cbz	r0, 800c46e <_fflush_r+0x1a>
 800c466:	6983      	ldr	r3, [r0, #24]
 800c468:	b90b      	cbnz	r3, 800c46e <_fflush_r+0x1a>
 800c46a:	f000 f887 	bl	800c57c <__sinit>
 800c46e:	4b14      	ldr	r3, [pc, #80]	; (800c4c0 <_fflush_r+0x6c>)
 800c470:	429c      	cmp	r4, r3
 800c472:	d11b      	bne.n	800c4ac <_fflush_r+0x58>
 800c474:	686c      	ldr	r4, [r5, #4]
 800c476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d0ef      	beq.n	800c45e <_fflush_r+0xa>
 800c47e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c480:	07d0      	lsls	r0, r2, #31
 800c482:	d404      	bmi.n	800c48e <_fflush_r+0x3a>
 800c484:	0599      	lsls	r1, r3, #22
 800c486:	d402      	bmi.n	800c48e <_fflush_r+0x3a>
 800c488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c48a:	f000 f915 	bl	800c6b8 <__retarget_lock_acquire_recursive>
 800c48e:	4628      	mov	r0, r5
 800c490:	4621      	mov	r1, r4
 800c492:	f7ff ff59 	bl	800c348 <__sflush_r>
 800c496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c498:	07da      	lsls	r2, r3, #31
 800c49a:	4605      	mov	r5, r0
 800c49c:	d4e0      	bmi.n	800c460 <_fflush_r+0xc>
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	059b      	lsls	r3, r3, #22
 800c4a2:	d4dd      	bmi.n	800c460 <_fflush_r+0xc>
 800c4a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4a6:	f000 f908 	bl	800c6ba <__retarget_lock_release_recursive>
 800c4aa:	e7d9      	b.n	800c460 <_fflush_r+0xc>
 800c4ac:	4b05      	ldr	r3, [pc, #20]	; (800c4c4 <_fflush_r+0x70>)
 800c4ae:	429c      	cmp	r4, r3
 800c4b0:	d101      	bne.n	800c4b6 <_fflush_r+0x62>
 800c4b2:	68ac      	ldr	r4, [r5, #8]
 800c4b4:	e7df      	b.n	800c476 <_fflush_r+0x22>
 800c4b6:	4b04      	ldr	r3, [pc, #16]	; (800c4c8 <_fflush_r+0x74>)
 800c4b8:	429c      	cmp	r4, r3
 800c4ba:	bf08      	it	eq
 800c4bc:	68ec      	ldreq	r4, [r5, #12]
 800c4be:	e7da      	b.n	800c476 <_fflush_r+0x22>
 800c4c0:	0800cd9c 	.word	0x0800cd9c
 800c4c4:	0800cdbc 	.word	0x0800cdbc
 800c4c8:	0800cd7c 	.word	0x0800cd7c

0800c4cc <std>:
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	b510      	push	{r4, lr}
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	e9c0 3300 	strd	r3, r3, [r0]
 800c4d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4da:	6083      	str	r3, [r0, #8]
 800c4dc:	8181      	strh	r1, [r0, #12]
 800c4de:	6643      	str	r3, [r0, #100]	; 0x64
 800c4e0:	81c2      	strh	r2, [r0, #14]
 800c4e2:	6183      	str	r3, [r0, #24]
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	2208      	movs	r2, #8
 800c4e8:	305c      	adds	r0, #92	; 0x5c
 800c4ea:	f7fd fb5b 	bl	8009ba4 <memset>
 800c4ee:	4b05      	ldr	r3, [pc, #20]	; (800c504 <std+0x38>)
 800c4f0:	6263      	str	r3, [r4, #36]	; 0x24
 800c4f2:	4b05      	ldr	r3, [pc, #20]	; (800c508 <std+0x3c>)
 800c4f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4f6:	4b05      	ldr	r3, [pc, #20]	; (800c50c <std+0x40>)
 800c4f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4fa:	4b05      	ldr	r3, [pc, #20]	; (800c510 <std+0x44>)
 800c4fc:	6224      	str	r4, [r4, #32]
 800c4fe:	6323      	str	r3, [r4, #48]	; 0x30
 800c500:	bd10      	pop	{r4, pc}
 800c502:	bf00      	nop
 800c504:	0800c821 	.word	0x0800c821
 800c508:	0800c843 	.word	0x0800c843
 800c50c:	0800c87b 	.word	0x0800c87b
 800c510:	0800c89f 	.word	0x0800c89f

0800c514 <_cleanup_r>:
 800c514:	4901      	ldr	r1, [pc, #4]	; (800c51c <_cleanup_r+0x8>)
 800c516:	f000 b8af 	b.w	800c678 <_fwalk_reent>
 800c51a:	bf00      	nop
 800c51c:	0800c455 	.word	0x0800c455

0800c520 <__sfmoreglue>:
 800c520:	b570      	push	{r4, r5, r6, lr}
 800c522:	2268      	movs	r2, #104	; 0x68
 800c524:	1e4d      	subs	r5, r1, #1
 800c526:	4355      	muls	r5, r2
 800c528:	460e      	mov	r6, r1
 800c52a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c52e:	f7ff fa65 	bl	800b9fc <_malloc_r>
 800c532:	4604      	mov	r4, r0
 800c534:	b140      	cbz	r0, 800c548 <__sfmoreglue+0x28>
 800c536:	2100      	movs	r1, #0
 800c538:	e9c0 1600 	strd	r1, r6, [r0]
 800c53c:	300c      	adds	r0, #12
 800c53e:	60a0      	str	r0, [r4, #8]
 800c540:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c544:	f7fd fb2e 	bl	8009ba4 <memset>
 800c548:	4620      	mov	r0, r4
 800c54a:	bd70      	pop	{r4, r5, r6, pc}

0800c54c <__sfp_lock_acquire>:
 800c54c:	4801      	ldr	r0, [pc, #4]	; (800c554 <__sfp_lock_acquire+0x8>)
 800c54e:	f000 b8b3 	b.w	800c6b8 <__retarget_lock_acquire_recursive>
 800c552:	bf00      	nop
 800c554:	2000209d 	.word	0x2000209d

0800c558 <__sfp_lock_release>:
 800c558:	4801      	ldr	r0, [pc, #4]	; (800c560 <__sfp_lock_release+0x8>)
 800c55a:	f000 b8ae 	b.w	800c6ba <__retarget_lock_release_recursive>
 800c55e:	bf00      	nop
 800c560:	2000209d 	.word	0x2000209d

0800c564 <__sinit_lock_acquire>:
 800c564:	4801      	ldr	r0, [pc, #4]	; (800c56c <__sinit_lock_acquire+0x8>)
 800c566:	f000 b8a7 	b.w	800c6b8 <__retarget_lock_acquire_recursive>
 800c56a:	bf00      	nop
 800c56c:	2000209e 	.word	0x2000209e

0800c570 <__sinit_lock_release>:
 800c570:	4801      	ldr	r0, [pc, #4]	; (800c578 <__sinit_lock_release+0x8>)
 800c572:	f000 b8a2 	b.w	800c6ba <__retarget_lock_release_recursive>
 800c576:	bf00      	nop
 800c578:	2000209e 	.word	0x2000209e

0800c57c <__sinit>:
 800c57c:	b510      	push	{r4, lr}
 800c57e:	4604      	mov	r4, r0
 800c580:	f7ff fff0 	bl	800c564 <__sinit_lock_acquire>
 800c584:	69a3      	ldr	r3, [r4, #24]
 800c586:	b11b      	cbz	r3, 800c590 <__sinit+0x14>
 800c588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c58c:	f7ff bff0 	b.w	800c570 <__sinit_lock_release>
 800c590:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c594:	6523      	str	r3, [r4, #80]	; 0x50
 800c596:	4b13      	ldr	r3, [pc, #76]	; (800c5e4 <__sinit+0x68>)
 800c598:	4a13      	ldr	r2, [pc, #76]	; (800c5e8 <__sinit+0x6c>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c59e:	42a3      	cmp	r3, r4
 800c5a0:	bf04      	itt	eq
 800c5a2:	2301      	moveq	r3, #1
 800c5a4:	61a3      	streq	r3, [r4, #24]
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f000 f820 	bl	800c5ec <__sfp>
 800c5ac:	6060      	str	r0, [r4, #4]
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f000 f81c 	bl	800c5ec <__sfp>
 800c5b4:	60a0      	str	r0, [r4, #8]
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f000 f818 	bl	800c5ec <__sfp>
 800c5bc:	2200      	movs	r2, #0
 800c5be:	60e0      	str	r0, [r4, #12]
 800c5c0:	2104      	movs	r1, #4
 800c5c2:	6860      	ldr	r0, [r4, #4]
 800c5c4:	f7ff ff82 	bl	800c4cc <std>
 800c5c8:	68a0      	ldr	r0, [r4, #8]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	2109      	movs	r1, #9
 800c5ce:	f7ff ff7d 	bl	800c4cc <std>
 800c5d2:	68e0      	ldr	r0, [r4, #12]
 800c5d4:	2202      	movs	r2, #2
 800c5d6:	2112      	movs	r1, #18
 800c5d8:	f7ff ff78 	bl	800c4cc <std>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	61a3      	str	r3, [r4, #24]
 800c5e0:	e7d2      	b.n	800c588 <__sinit+0xc>
 800c5e2:	bf00      	nop
 800c5e4:	0800ca00 	.word	0x0800ca00
 800c5e8:	0800c515 	.word	0x0800c515

0800c5ec <__sfp>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	4607      	mov	r7, r0
 800c5f0:	f7ff ffac 	bl	800c54c <__sfp_lock_acquire>
 800c5f4:	4b1e      	ldr	r3, [pc, #120]	; (800c670 <__sfp+0x84>)
 800c5f6:	681e      	ldr	r6, [r3, #0]
 800c5f8:	69b3      	ldr	r3, [r6, #24]
 800c5fa:	b913      	cbnz	r3, 800c602 <__sfp+0x16>
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	f7ff ffbd 	bl	800c57c <__sinit>
 800c602:	3648      	adds	r6, #72	; 0x48
 800c604:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c608:	3b01      	subs	r3, #1
 800c60a:	d503      	bpl.n	800c614 <__sfp+0x28>
 800c60c:	6833      	ldr	r3, [r6, #0]
 800c60e:	b30b      	cbz	r3, 800c654 <__sfp+0x68>
 800c610:	6836      	ldr	r6, [r6, #0]
 800c612:	e7f7      	b.n	800c604 <__sfp+0x18>
 800c614:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c618:	b9d5      	cbnz	r5, 800c650 <__sfp+0x64>
 800c61a:	4b16      	ldr	r3, [pc, #88]	; (800c674 <__sfp+0x88>)
 800c61c:	60e3      	str	r3, [r4, #12]
 800c61e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c622:	6665      	str	r5, [r4, #100]	; 0x64
 800c624:	f000 f847 	bl	800c6b6 <__retarget_lock_init_recursive>
 800c628:	f7ff ff96 	bl	800c558 <__sfp_lock_release>
 800c62c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c630:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c634:	6025      	str	r5, [r4, #0]
 800c636:	61a5      	str	r5, [r4, #24]
 800c638:	2208      	movs	r2, #8
 800c63a:	4629      	mov	r1, r5
 800c63c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c640:	f7fd fab0 	bl	8009ba4 <memset>
 800c644:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c648:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c64c:	4620      	mov	r0, r4
 800c64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c650:	3468      	adds	r4, #104	; 0x68
 800c652:	e7d9      	b.n	800c608 <__sfp+0x1c>
 800c654:	2104      	movs	r1, #4
 800c656:	4638      	mov	r0, r7
 800c658:	f7ff ff62 	bl	800c520 <__sfmoreglue>
 800c65c:	4604      	mov	r4, r0
 800c65e:	6030      	str	r0, [r6, #0]
 800c660:	2800      	cmp	r0, #0
 800c662:	d1d5      	bne.n	800c610 <__sfp+0x24>
 800c664:	f7ff ff78 	bl	800c558 <__sfp_lock_release>
 800c668:	230c      	movs	r3, #12
 800c66a:	603b      	str	r3, [r7, #0]
 800c66c:	e7ee      	b.n	800c64c <__sfp+0x60>
 800c66e:	bf00      	nop
 800c670:	0800ca00 	.word	0x0800ca00
 800c674:	ffff0001 	.word	0xffff0001

0800c678 <_fwalk_reent>:
 800c678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c67c:	4606      	mov	r6, r0
 800c67e:	4688      	mov	r8, r1
 800c680:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c684:	2700      	movs	r7, #0
 800c686:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c68a:	f1b9 0901 	subs.w	r9, r9, #1
 800c68e:	d505      	bpl.n	800c69c <_fwalk_reent+0x24>
 800c690:	6824      	ldr	r4, [r4, #0]
 800c692:	2c00      	cmp	r4, #0
 800c694:	d1f7      	bne.n	800c686 <_fwalk_reent+0xe>
 800c696:	4638      	mov	r0, r7
 800c698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c69c:	89ab      	ldrh	r3, [r5, #12]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d907      	bls.n	800c6b2 <_fwalk_reent+0x3a>
 800c6a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	d003      	beq.n	800c6b2 <_fwalk_reent+0x3a>
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	47c0      	blx	r8
 800c6b0:	4307      	orrs	r7, r0
 800c6b2:	3568      	adds	r5, #104	; 0x68
 800c6b4:	e7e9      	b.n	800c68a <_fwalk_reent+0x12>

0800c6b6 <__retarget_lock_init_recursive>:
 800c6b6:	4770      	bx	lr

0800c6b8 <__retarget_lock_acquire_recursive>:
 800c6b8:	4770      	bx	lr

0800c6ba <__retarget_lock_release_recursive>:
 800c6ba:	4770      	bx	lr

0800c6bc <__swhatbuf_r>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	460e      	mov	r6, r1
 800c6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c4:	2900      	cmp	r1, #0
 800c6c6:	b096      	sub	sp, #88	; 0x58
 800c6c8:	4614      	mov	r4, r2
 800c6ca:	461d      	mov	r5, r3
 800c6cc:	da08      	bge.n	800c6e0 <__swhatbuf_r+0x24>
 800c6ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	602a      	str	r2, [r5, #0]
 800c6d6:	061a      	lsls	r2, r3, #24
 800c6d8:	d410      	bmi.n	800c6fc <__swhatbuf_r+0x40>
 800c6da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6de:	e00e      	b.n	800c6fe <__swhatbuf_r+0x42>
 800c6e0:	466a      	mov	r2, sp
 800c6e2:	f000 f903 	bl	800c8ec <_fstat_r>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	dbf1      	blt.n	800c6ce <__swhatbuf_r+0x12>
 800c6ea:	9a01      	ldr	r2, [sp, #4]
 800c6ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c6f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6f4:	425a      	negs	r2, r3
 800c6f6:	415a      	adcs	r2, r3
 800c6f8:	602a      	str	r2, [r5, #0]
 800c6fa:	e7ee      	b.n	800c6da <__swhatbuf_r+0x1e>
 800c6fc:	2340      	movs	r3, #64	; 0x40
 800c6fe:	2000      	movs	r0, #0
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	b016      	add	sp, #88	; 0x58
 800c704:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c708 <__smakebuf_r>:
 800c708:	898b      	ldrh	r3, [r1, #12]
 800c70a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c70c:	079d      	lsls	r5, r3, #30
 800c70e:	4606      	mov	r6, r0
 800c710:	460c      	mov	r4, r1
 800c712:	d507      	bpl.n	800c724 <__smakebuf_r+0x1c>
 800c714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	6123      	str	r3, [r4, #16]
 800c71c:	2301      	movs	r3, #1
 800c71e:	6163      	str	r3, [r4, #20]
 800c720:	b002      	add	sp, #8
 800c722:	bd70      	pop	{r4, r5, r6, pc}
 800c724:	ab01      	add	r3, sp, #4
 800c726:	466a      	mov	r2, sp
 800c728:	f7ff ffc8 	bl	800c6bc <__swhatbuf_r>
 800c72c:	9900      	ldr	r1, [sp, #0]
 800c72e:	4605      	mov	r5, r0
 800c730:	4630      	mov	r0, r6
 800c732:	f7ff f963 	bl	800b9fc <_malloc_r>
 800c736:	b948      	cbnz	r0, 800c74c <__smakebuf_r+0x44>
 800c738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c73c:	059a      	lsls	r2, r3, #22
 800c73e:	d4ef      	bmi.n	800c720 <__smakebuf_r+0x18>
 800c740:	f023 0303 	bic.w	r3, r3, #3
 800c744:	f043 0302 	orr.w	r3, r3, #2
 800c748:	81a3      	strh	r3, [r4, #12]
 800c74a:	e7e3      	b.n	800c714 <__smakebuf_r+0xc>
 800c74c:	4b0d      	ldr	r3, [pc, #52]	; (800c784 <__smakebuf_r+0x7c>)
 800c74e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	6020      	str	r0, [r4, #0]
 800c754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c758:	81a3      	strh	r3, [r4, #12]
 800c75a:	9b00      	ldr	r3, [sp, #0]
 800c75c:	6163      	str	r3, [r4, #20]
 800c75e:	9b01      	ldr	r3, [sp, #4]
 800c760:	6120      	str	r0, [r4, #16]
 800c762:	b15b      	cbz	r3, 800c77c <__smakebuf_r+0x74>
 800c764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c768:	4630      	mov	r0, r6
 800c76a:	f000 f8d1 	bl	800c910 <_isatty_r>
 800c76e:	b128      	cbz	r0, 800c77c <__smakebuf_r+0x74>
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	f023 0303 	bic.w	r3, r3, #3
 800c776:	f043 0301 	orr.w	r3, r3, #1
 800c77a:	81a3      	strh	r3, [r4, #12]
 800c77c:	89a0      	ldrh	r0, [r4, #12]
 800c77e:	4305      	orrs	r5, r0
 800c780:	81a5      	strh	r5, [r4, #12]
 800c782:	e7cd      	b.n	800c720 <__smakebuf_r+0x18>
 800c784:	0800c515 	.word	0x0800c515

0800c788 <_malloc_usable_size_r>:
 800c788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c78c:	1f18      	subs	r0, r3, #4
 800c78e:	2b00      	cmp	r3, #0
 800c790:	bfbc      	itt	lt
 800c792:	580b      	ldrlt	r3, [r1, r0]
 800c794:	18c0      	addlt	r0, r0, r3
 800c796:	4770      	bx	lr

0800c798 <_raise_r>:
 800c798:	291f      	cmp	r1, #31
 800c79a:	b538      	push	{r3, r4, r5, lr}
 800c79c:	4604      	mov	r4, r0
 800c79e:	460d      	mov	r5, r1
 800c7a0:	d904      	bls.n	800c7ac <_raise_r+0x14>
 800c7a2:	2316      	movs	r3, #22
 800c7a4:	6003      	str	r3, [r0, #0]
 800c7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7aa:	bd38      	pop	{r3, r4, r5, pc}
 800c7ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c7ae:	b112      	cbz	r2, 800c7b6 <_raise_r+0x1e>
 800c7b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7b4:	b94b      	cbnz	r3, 800c7ca <_raise_r+0x32>
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f000 f830 	bl	800c81c <_getpid_r>
 800c7bc:	462a      	mov	r2, r5
 800c7be:	4601      	mov	r1, r0
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7c6:	f000 b817 	b.w	800c7f8 <_kill_r>
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d00a      	beq.n	800c7e4 <_raise_r+0x4c>
 800c7ce:	1c59      	adds	r1, r3, #1
 800c7d0:	d103      	bne.n	800c7da <_raise_r+0x42>
 800c7d2:	2316      	movs	r3, #22
 800c7d4:	6003      	str	r3, [r0, #0]
 800c7d6:	2001      	movs	r0, #1
 800c7d8:	e7e7      	b.n	800c7aa <_raise_r+0x12>
 800c7da:	2400      	movs	r4, #0
 800c7dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	4798      	blx	r3
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	e7e0      	b.n	800c7aa <_raise_r+0x12>

0800c7e8 <raise>:
 800c7e8:	4b02      	ldr	r3, [pc, #8]	; (800c7f4 <raise+0xc>)
 800c7ea:	4601      	mov	r1, r0
 800c7ec:	6818      	ldr	r0, [r3, #0]
 800c7ee:	f7ff bfd3 	b.w	800c798 <_raise_r>
 800c7f2:	bf00      	nop
 800c7f4:	2000010c 	.word	0x2000010c

0800c7f8 <_kill_r>:
 800c7f8:	b538      	push	{r3, r4, r5, lr}
 800c7fa:	4d07      	ldr	r5, [pc, #28]	; (800c818 <_kill_r+0x20>)
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	4604      	mov	r4, r0
 800c800:	4608      	mov	r0, r1
 800c802:	4611      	mov	r1, r2
 800c804:	602b      	str	r3, [r5, #0]
 800c806:	f7f4 ffeb 	bl	80017e0 <_kill>
 800c80a:	1c43      	adds	r3, r0, #1
 800c80c:	d102      	bne.n	800c814 <_kill_r+0x1c>
 800c80e:	682b      	ldr	r3, [r5, #0]
 800c810:	b103      	cbz	r3, 800c814 <_kill_r+0x1c>
 800c812:	6023      	str	r3, [r4, #0]
 800c814:	bd38      	pop	{r3, r4, r5, pc}
 800c816:	bf00      	nop
 800c818:	20002098 	.word	0x20002098

0800c81c <_getpid_r>:
 800c81c:	f7f4 bfd8 	b.w	80017d0 <_getpid>

0800c820 <__sread>:
 800c820:	b510      	push	{r4, lr}
 800c822:	460c      	mov	r4, r1
 800c824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c828:	f000 f894 	bl	800c954 <_read_r>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	bfab      	itete	ge
 800c830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c832:	89a3      	ldrhlt	r3, [r4, #12]
 800c834:	181b      	addge	r3, r3, r0
 800c836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c83a:	bfac      	ite	ge
 800c83c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c83e:	81a3      	strhlt	r3, [r4, #12]
 800c840:	bd10      	pop	{r4, pc}

0800c842 <__swrite>:
 800c842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c846:	461f      	mov	r7, r3
 800c848:	898b      	ldrh	r3, [r1, #12]
 800c84a:	05db      	lsls	r3, r3, #23
 800c84c:	4605      	mov	r5, r0
 800c84e:	460c      	mov	r4, r1
 800c850:	4616      	mov	r6, r2
 800c852:	d505      	bpl.n	800c860 <__swrite+0x1e>
 800c854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c858:	2302      	movs	r3, #2
 800c85a:	2200      	movs	r2, #0
 800c85c:	f000 f868 	bl	800c930 <_lseek_r>
 800c860:	89a3      	ldrh	r3, [r4, #12]
 800c862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c86a:	81a3      	strh	r3, [r4, #12]
 800c86c:	4632      	mov	r2, r6
 800c86e:	463b      	mov	r3, r7
 800c870:	4628      	mov	r0, r5
 800c872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c876:	f000 b817 	b.w	800c8a8 <_write_r>

0800c87a <__sseek>:
 800c87a:	b510      	push	{r4, lr}
 800c87c:	460c      	mov	r4, r1
 800c87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c882:	f000 f855 	bl	800c930 <_lseek_r>
 800c886:	1c43      	adds	r3, r0, #1
 800c888:	89a3      	ldrh	r3, [r4, #12]
 800c88a:	bf15      	itete	ne
 800c88c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c88e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c896:	81a3      	strheq	r3, [r4, #12]
 800c898:	bf18      	it	ne
 800c89a:	81a3      	strhne	r3, [r4, #12]
 800c89c:	bd10      	pop	{r4, pc}

0800c89e <__sclose>:
 800c89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8a2:	f000 b813 	b.w	800c8cc <_close_r>
	...

0800c8a8 <_write_r>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	4d07      	ldr	r5, [pc, #28]	; (800c8c8 <_write_r+0x20>)
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	4608      	mov	r0, r1
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	602a      	str	r2, [r5, #0]
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	f7f4 ffc9 	bl	800184e <_write>
 800c8bc:	1c43      	adds	r3, r0, #1
 800c8be:	d102      	bne.n	800c8c6 <_write_r+0x1e>
 800c8c0:	682b      	ldr	r3, [r5, #0]
 800c8c2:	b103      	cbz	r3, 800c8c6 <_write_r+0x1e>
 800c8c4:	6023      	str	r3, [r4, #0]
 800c8c6:	bd38      	pop	{r3, r4, r5, pc}
 800c8c8:	20002098 	.word	0x20002098

0800c8cc <_close_r>:
 800c8cc:	b538      	push	{r3, r4, r5, lr}
 800c8ce:	4d06      	ldr	r5, [pc, #24]	; (800c8e8 <_close_r+0x1c>)
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	4608      	mov	r0, r1
 800c8d6:	602b      	str	r3, [r5, #0]
 800c8d8:	f7f4 ffd5 	bl	8001886 <_close>
 800c8dc:	1c43      	adds	r3, r0, #1
 800c8de:	d102      	bne.n	800c8e6 <_close_r+0x1a>
 800c8e0:	682b      	ldr	r3, [r5, #0]
 800c8e2:	b103      	cbz	r3, 800c8e6 <_close_r+0x1a>
 800c8e4:	6023      	str	r3, [r4, #0]
 800c8e6:	bd38      	pop	{r3, r4, r5, pc}
 800c8e8:	20002098 	.word	0x20002098

0800c8ec <_fstat_r>:
 800c8ec:	b538      	push	{r3, r4, r5, lr}
 800c8ee:	4d07      	ldr	r5, [pc, #28]	; (800c90c <_fstat_r+0x20>)
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	4608      	mov	r0, r1
 800c8f6:	4611      	mov	r1, r2
 800c8f8:	602b      	str	r3, [r5, #0]
 800c8fa:	f7f4 ffd0 	bl	800189e <_fstat>
 800c8fe:	1c43      	adds	r3, r0, #1
 800c900:	d102      	bne.n	800c908 <_fstat_r+0x1c>
 800c902:	682b      	ldr	r3, [r5, #0]
 800c904:	b103      	cbz	r3, 800c908 <_fstat_r+0x1c>
 800c906:	6023      	str	r3, [r4, #0]
 800c908:	bd38      	pop	{r3, r4, r5, pc}
 800c90a:	bf00      	nop
 800c90c:	20002098 	.word	0x20002098

0800c910 <_isatty_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	4d06      	ldr	r5, [pc, #24]	; (800c92c <_isatty_r+0x1c>)
 800c914:	2300      	movs	r3, #0
 800c916:	4604      	mov	r4, r0
 800c918:	4608      	mov	r0, r1
 800c91a:	602b      	str	r3, [r5, #0]
 800c91c:	f7f4 ffcf 	bl	80018be <_isatty>
 800c920:	1c43      	adds	r3, r0, #1
 800c922:	d102      	bne.n	800c92a <_isatty_r+0x1a>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	b103      	cbz	r3, 800c92a <_isatty_r+0x1a>
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	20002098 	.word	0x20002098

0800c930 <_lseek_r>:
 800c930:	b538      	push	{r3, r4, r5, lr}
 800c932:	4d07      	ldr	r5, [pc, #28]	; (800c950 <_lseek_r+0x20>)
 800c934:	4604      	mov	r4, r0
 800c936:	4608      	mov	r0, r1
 800c938:	4611      	mov	r1, r2
 800c93a:	2200      	movs	r2, #0
 800c93c:	602a      	str	r2, [r5, #0]
 800c93e:	461a      	mov	r2, r3
 800c940:	f7f4 ffc8 	bl	80018d4 <_lseek>
 800c944:	1c43      	adds	r3, r0, #1
 800c946:	d102      	bne.n	800c94e <_lseek_r+0x1e>
 800c948:	682b      	ldr	r3, [r5, #0]
 800c94a:	b103      	cbz	r3, 800c94e <_lseek_r+0x1e>
 800c94c:	6023      	str	r3, [r4, #0]
 800c94e:	bd38      	pop	{r3, r4, r5, pc}
 800c950:	20002098 	.word	0x20002098

0800c954 <_read_r>:
 800c954:	b538      	push	{r3, r4, r5, lr}
 800c956:	4d07      	ldr	r5, [pc, #28]	; (800c974 <_read_r+0x20>)
 800c958:	4604      	mov	r4, r0
 800c95a:	4608      	mov	r0, r1
 800c95c:	4611      	mov	r1, r2
 800c95e:	2200      	movs	r2, #0
 800c960:	602a      	str	r2, [r5, #0]
 800c962:	461a      	mov	r2, r3
 800c964:	f7f4 ff56 	bl	8001814 <_read>
 800c968:	1c43      	adds	r3, r0, #1
 800c96a:	d102      	bne.n	800c972 <_read_r+0x1e>
 800c96c:	682b      	ldr	r3, [r5, #0]
 800c96e:	b103      	cbz	r3, 800c972 <_read_r+0x1e>
 800c970:	6023      	str	r3, [r4, #0]
 800c972:	bd38      	pop	{r3, r4, r5, pc}
 800c974:	20002098 	.word	0x20002098

0800c978 <_init>:
 800c978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97a:	bf00      	nop
 800c97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c97e:	bc08      	pop	{r3}
 800c980:	469e      	mov	lr, r3
 800c982:	4770      	bx	lr

0800c984 <_fini>:
 800c984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c986:	bf00      	nop
 800c988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c98a:	bc08      	pop	{r3}
 800c98c:	469e      	mov	lr, r3
 800c98e:	4770      	bx	lr
