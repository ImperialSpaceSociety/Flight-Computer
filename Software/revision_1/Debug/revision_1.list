
revision_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d80  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008f44  08008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fa4  08008fa4  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fa4  08008fa4  00018fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fac  08008fac  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fac  08008fac  00018fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fb0  08008fb0  00018fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08008fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db0  2000010c  080090c0  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ebc  080090c0  00021ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f15  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a4d  00000000  00000000  00039094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  0003cae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000104b  00000000  00000000  0003dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002651e  00000000  00000000  0003f043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b6ac  00000000  00000000  00065561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df1f4  00000000  00000000  00080c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000592c  00000000  00000000  0015fe04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00165730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008f2c 	.word	0x08008f2c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08008f2c 	.word	0x08008f2c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fc94 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f822 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f998 	bl	8000840 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000510:	f000 f90a 	bl	8000728 <MX_QUADSPI_Init>
  MX_USB_DEVICE_Init();
 8000514:	f007 ff74 	bl	8008400 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000518:	f000 f8d8 	bl	80006cc <MX_I2C1_Init>
  MX_SPI1_Init();
 800051c:	f000 f930 	bl	8000780 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000520:	f000 f882 	bl	8000628 <MX_ADC1_Init>
  MX_UART5_Init();
 8000524:	f000 f962 	bl	80007ec <MX_UART5_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Buzzer ON
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2108      	movs	r1, #8
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <main+0x4c>)
 800052e:	f001 fa2d 	bl	800198c <HAL_GPIO_WritePin>
	HAL_Delay(0.5);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fcee 	bl	8000f14 <HAL_Delay>
	// Buzzer OFF
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2108      	movs	r1, #8
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <main+0x4c>)
 800053e:	f001 fa25 	bl	800198c <HAL_GPIO_WritePin>
	HAL_Delay(0.5);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 fce6 	bl	8000f14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000548:	e7ee      	b.n	8000528 <main+0x28>
 800054a:	bf00      	nop
 800054c:	40020000 	.word	0x40020000

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2234      	movs	r2, #52	; 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f008 fcb8 	bl	8008ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b29      	ldr	r3, [pc, #164]	; (8000620 <SystemClock_Config+0xd0>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a28      	ldr	r2, [pc, #160]	; (8000620 <SystemClock_Config+0xd0>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <SystemClock_Config+0xd0>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000590:	2300      	movs	r3, #0
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <SystemClock_Config+0xd4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xd4>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005c8:	2348      	movs	r3, #72	; 0x48
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d0:	2303      	movs	r3, #3
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fd33 	bl	8004048 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005e8:	f000 f9d0 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f002 fea9 	bl	8003360 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000614:	f000 f9ba 	bl	800098c <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_ADC1_Init+0x98>)
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <MX_ADC1_Init+0x9c>)
 800063e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000668:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <MX_ADC1_Init+0xa0>)
 800066a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000674:	2201      	movs	r2, #1
 8000676:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000682:	2201      	movs	r2, #1
 8000684:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000686:	480e      	ldr	r0, [pc, #56]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000688:	f000 fc68 	bl	8000f5c <HAL_ADC_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 f97b 	bl	800098c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000696:	230f      	movs	r3, #15
 8000698:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <MX_ADC1_Init+0x98>)
 80006a8:	f000 fc9c 	bl	8000fe4 <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006b2:	f000 f96b 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000128 	.word	0x20000128
 80006c4:	40012000 	.word	0x40012000
 80006c8:	0f000001 	.word	0x0f000001

080006cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C1_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_I2C1_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C1_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_I2C1_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2C1_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C1_Init+0x50>)
 800070a:	f001 f959 	bl	80019c0 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 f93a 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000170 	.word	0x20000170
 8000720:	40005400 	.word	0x40005400
 8000724:	000186a0 	.word	0x000186a0

08000728 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_QUADSPI_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_QUADSPI_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_QUADSPI_Init+0x50>)
 8000734:	22ff      	movs	r2, #255	; 0xff
 8000736:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_QUADSPI_Init+0x50>)
 800073a:	2201      	movs	r2, #1
 800073c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_QUADSPI_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_QUADSPI_Init+0x50>)
 8000746:	2218      	movs	r2, #24
 8000748:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_QUADSPI_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_QUADSPI_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_QUADSPI_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_QUADSPI_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_QUADSPI_Init+0x50>)
 8000764:	f002 fd3a 	bl	80031dc <HAL_QSPI_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800076e:	f000 f90d 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200001c4 	.word	0x200001c4
 800077c:	a0001000 	.word	0xa0001000

08000780 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_SPI1_Init+0x64>)
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_SPI1_Init+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_SPI1_Init+0x64>)
 800078c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000790:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007cc:	220a      	movs	r2, #10
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007d2:	f003 fed7 	bl	8004584 <HAL_SPI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007dc:	f000 f8d6 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000210 	.word	0x20000210
 80007e8:	40013000 	.word	0x40013000

080007ec <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_UART5_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_UART5_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_UART5_Init+0x4c>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_UART5_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_UART5_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_UART5_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_UART5_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_UART5_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_UART5_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_UART5_Init+0x4c>)
 8000824:	f003 ff37 	bl	8004696 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800082e:	f000 f8ad 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000268 	.word	0x20000268
 800083c:	40005000 	.word	0x40005000

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b48      	ldr	r3, [pc, #288]	; (800097c <MX_GPIO_Init+0x13c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a47      	ldr	r2, [pc, #284]	; (800097c <MX_GPIO_Init+0x13c>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b45      	ldr	r3, [pc, #276]	; (800097c <MX_GPIO_Init+0x13c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b41      	ldr	r3, [pc, #260]	; (800097c <MX_GPIO_Init+0x13c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a40      	ldr	r2, [pc, #256]	; (800097c <MX_GPIO_Init+0x13c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b3e      	ldr	r3, [pc, #248]	; (800097c <MX_GPIO_Init+0x13c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b3a      	ldr	r3, [pc, #232]	; (800097c <MX_GPIO_Init+0x13c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a39      	ldr	r2, [pc, #228]	; (800097c <MX_GPIO_Init+0x13c>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b37      	ldr	r3, [pc, #220]	; (800097c <MX_GPIO_Init+0x13c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <MX_GPIO_Init+0x13c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a32      	ldr	r2, [pc, #200]	; (800097c <MX_GPIO_Init+0x13c>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_GPIO_Init+0x13c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_GPIO_Init+0x13c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a2b      	ldr	r2, [pc, #172]	; (800097c <MX_GPIO_Init+0x13c>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_GPIO_Init+0x13c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Radio_RX_Pin|Buzzer_Gate_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	210c      	movs	r1, #12
 80008e6:	4826      	ldr	r0, [pc, #152]	; (8000980 <MX_GPIO_Init+0x140>)
 80008e8:	f001 f850 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Radio_Reset_Pin|Indicator_LED_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80008f2:	4824      	ldr	r0, [pc, #144]	; (8000984 <MX_GPIO_Init+0x144>)
 80008f4:	f001 f84a 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_Reset_GPIO_Port, GPS_Reset_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fe:	4822      	ldr	r0, [pc, #136]	; (8000988 <MX_GPIO_Init+0x148>)
 8000900:	f001 f844 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Radio_DIO1_Pin Radio_DIO0_Pin Radio_TX_Pin */
  GPIO_InitStruct.Pin = Radio_DIO1_Pin|Radio_DIO0_Pin|Radio_TX_Pin;
 8000904:	2313      	movs	r3, #19
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	481a      	ldr	r0, [pc, #104]	; (8000980 <MX_GPIO_Init+0x140>)
 8000918:	f000 fea4 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pins : Radio_RX_Pin Buzzer_Gate_Pin */
  GPIO_InitStruct.Pin = Radio_RX_Pin|Buzzer_Gate_Pin;
 800091c:	230c      	movs	r3, #12
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <MX_GPIO_Init+0x140>)
 8000934:	f000 fe96 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pins : Radio_Reset_Pin Indicator_LED_Pin */
  GPIO_InitStruct.Pin = Radio_Reset_Pin|Indicator_LED_Pin;
 8000938:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_GPIO_Init+0x144>)
 8000952:	f000 fe87 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_Reset_Pin */
  GPIO_InitStruct.Pin = GPS_Reset_Pin;
 8000956:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_Reset_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_GPIO_Init+0x148>)
 8000970:	f000 fe78 	bl	8001664 <HAL_GPIO_Init>

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	; 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000
 8000984:	40020400 	.word	0x40020400
 8000988:	40020800 	.word	0x40020800

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <HAL_ADC_MspInit+0x7c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d127      	bne.n	8000a5a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_ADC_MspInit+0x80>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <HAL_ADC_MspInit+0x80>)
 8000a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_ADC_MspInit+0x80>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_ADC_MspInit+0x80>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_ADC_MspInit+0x80>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_ADC_MspInit+0x80>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Radio_Enable_Pin;
 8000a42:	2330      	movs	r3, #48	; 0x30
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a46:	2303      	movs	r3, #3
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <HAL_ADC_MspInit+0x84>)
 8000a56:	f000 fe05 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40012000 	.word	0x40012000
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020800 	.word	0x40020800

08000a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <HAL_I2C_MspInit+0x84>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d12c      	bne.n	8000aec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000aae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab4:	2312      	movs	r3, #18
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480c      	ldr	r0, [pc, #48]	; (8000afc <HAL_I2C_MspInit+0x8c>)
 8000acc:	f000 fdca 	bl	8001664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40005400 	.word	0x40005400
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020400 	.word	0x40020400

08000b00 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a30      	ldr	r2, [pc, #192]	; (8000be0 <HAL_QSPI_MspInit+0xe0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d15a      	bne.n	8000bd8 <HAL_QSPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <HAL_QSPI_MspInit+0xe4>)
 8000b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2a:	4a2e      	ldr	r2, [pc, #184]	; (8000be4 <HAL_QSPI_MspInit+0xe4>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6393      	str	r3, [r2, #56]	; 0x38
 8000b32:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <HAL_QSPI_MspInit+0xe4>)
 8000b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <HAL_QSPI_MspInit+0xe4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a27      	ldr	r2, [pc, #156]	; (8000be4 <HAL_QSPI_MspInit+0xe4>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <HAL_QSPI_MspInit+0xe4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_QSPI_MspInit+0xe4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <HAL_QSPI_MspInit+0xe4>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <HAL_QSPI_MspInit+0xe4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = Flash_QUADSPI_CLK_Pin;
 8000b76:	2304      	movs	r3, #4
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000b86:	2309      	movs	r3, #9
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Flash_QUADSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4815      	ldr	r0, [pc, #84]	; (8000be8 <HAL_QSPI_MspInit+0xe8>)
 8000b92:	f000 fd67 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_QUADSPI_BK1_IO0_Pin|Flash_QUADSPI_BK1_IO1_Pin;
 8000b96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000ba8:	2309      	movs	r3, #9
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480e      	ldr	r0, [pc, #56]	; (8000bec <HAL_QSPI_MspInit+0xec>)
 8000bb4:	f000 fd56 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_QUADSPI_BK1_NCS_Pin;
 8000bb8:	2340      	movs	r3, #64	; 0x40
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8000bc8:	230a      	movs	r3, #10
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Flash_QUADSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <HAL_QSPI_MspInit+0xe8>)
 8000bd4:	f000 fd46 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	a0001000 	.word	0xa0001000
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40020800 	.word	0x40020800

08000bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_SPI_MspInit+0x84>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12b      	bne.n	8000c6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Radio_SPI1_SCK_Pin|Radio_SPI1_MISO_Pin|Radio_SPI1_MOSI_Pin;
 8000c4a:	23e0      	movs	r3, #224	; 0xe0
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_SPI_MspInit+0x8c>)
 8000c66:	f000 fcfd 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40013000 	.word	0x40013000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <HAL_UART_MspInit+0xc0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d14a      	bne.n	8000d38 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a26      	ldr	r2, [pc, #152]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a1f      	ldr	r2, [pc, #124]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_UART_MspInit+0xc4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_UART_TX_Pin;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d08:	2308      	movs	r3, #8
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <HAL_UART_MspInit+0xc8>)
 8000d14:	f000 fca6 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_UART_RX_Pin;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <HAL_UART_MspInit+0xcc>)
 8000d34:	f000 fc96 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40005000 	.word	0x40005000
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	40020c00 	.word	0x40020c00

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f89a 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <OTG_FS_IRQHandler+0x10>)
 8000daa:	f001 f8a4 	bl	8001ef6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20001790 	.word	0x20001790

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de2:	490e      	ldr	r1, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df8:	4c0b      	ldr	r4, [pc, #44]	; (8000e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e06:	f7ff ffd7 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f008 f86b 	bl	8008ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fb77 	bl	8000500 <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000e20:	08008fb4 	.word	0x08008fb4
  ldr r2, =_sbss
 8000e24:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000e28:	20001ebc 	.word	0x20001ebc

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <HAL_Init+0x40>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_Init+0x40>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x40>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 fbc1 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	200f      	movs	r0, #15
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fd98 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fbd9 	bl	800164a <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 fba1 	bl	80015f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x20>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	200002ac 	.word	0x200002ac

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	200002ac 	.word	0x200002ac

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff ffee 	bl	8000efc <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_Delay+0x44>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffde 	bl	8000efc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008

08000f5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e033      	b.n	8000fda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d109      	bne.n	8000f8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fd34 	bl	80009e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d118      	bne.n	8000fcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fa2:	f023 0302 	bic.w	r3, r3, #2
 8000fa6:	f043 0202 	orr.w	r2, r3, #2
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f94a 	bl	8001248 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f023 0303 	bic.w	r3, r3, #3
 8000fc2:	f043 0201 	orr.w	r2, r3, #1
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fca:	e001      	b.n	8000fd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d101      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1c>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	e113      	b.n	8001228 <HAL_ADC_ConfigChannel+0x244>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b09      	cmp	r3, #9
 800100e:	d925      	bls.n	800105c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68d9      	ldr	r1, [r3, #12]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	3b1e      	subs	r3, #30
 8001026:	2207      	movs	r2, #7
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43da      	mvns	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	400a      	ands	r2, r1
 8001034:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68d9      	ldr	r1, [r3, #12]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	b29b      	uxth	r3, r3
 8001046:	4618      	mov	r0, r3
 8001048:	4603      	mov	r3, r0
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4403      	add	r3, r0
 800104e:	3b1e      	subs	r3, #30
 8001050:	409a      	lsls	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	e022      	b.n	80010a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6919      	ldr	r1, [r3, #16]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	2207      	movs	r2, #7
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	400a      	ands	r2, r1
 800107e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6919      	ldr	r1, [r3, #16]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4618      	mov	r0, r3
 8001092:	4603      	mov	r3, r0
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4403      	add	r3, r0
 8001098:	409a      	lsls	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	430a      	orrs	r2, r1
 80010a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d824      	bhi.n	80010f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	3b05      	subs	r3, #5
 80010bc:	221f      	movs	r2, #31
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	400a      	ands	r2, r1
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	3b05      	subs	r3, #5
 80010e6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
 80010f2:	e04c      	b.n	800118e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b0c      	cmp	r3, #12
 80010fa:	d824      	bhi.n	8001146 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	3b23      	subs	r3, #35	; 0x23
 800110e:	221f      	movs	r2, #31
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43da      	mvns	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	400a      	ands	r2, r1
 800111c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	4618      	mov	r0, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3b23      	subs	r3, #35	; 0x23
 8001138:	fa00 f203 	lsl.w	r2, r0, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	631a      	str	r2, [r3, #48]	; 0x30
 8001144:	e023      	b.n	800118e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	3b41      	subs	r3, #65	; 0x41
 8001158:	221f      	movs	r2, #31
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	400a      	ands	r2, r1
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	b29b      	uxth	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	3b41      	subs	r3, #65	; 0x41
 8001182:	fa00 f203 	lsl.w	r2, r0, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <HAL_ADC_ConfigChannel+0x250>)
 8001190:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a28      	ldr	r2, [pc, #160]	; (8001238 <HAL_ADC_ConfigChannel+0x254>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d10f      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1d8>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b12      	cmp	r3, #18
 80011a2:	d10b      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_ADC_ConfigChannel+0x254>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d12b      	bne.n	800121e <HAL_ADC_ConfigChannel+0x23a>
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <HAL_ADC_ConfigChannel+0x258>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d003      	beq.n	80011d8 <HAL_ADC_ConfigChannel+0x1f4>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b11      	cmp	r3, #17
 80011d6:	d122      	bne.n	800121e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a11      	ldr	r2, [pc, #68]	; (800123c <HAL_ADC_ConfigChannel+0x258>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d111      	bne.n	800121e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_ADC_ConfigChannel+0x25c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a11      	ldr	r2, [pc, #68]	; (8001244 <HAL_ADC_ConfigChannel+0x260>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0c9a      	lsrs	r2, r3, #18
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001210:	e002      	b.n	8001218 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3b01      	subs	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f9      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40012300 	.word	0x40012300
 8001238:	40012000 	.word	0x40012000
 800123c:	10000012 	.word	0x10000012
 8001240:	20000000 	.word	0x20000000
 8001244:	431bde83 	.word	0x431bde83

08001248 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001250:	4b79      	ldr	r3, [pc, #484]	; (8001438 <ADC_Init+0x1f0>)
 8001252:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	431a      	orrs	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800127c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6859      	ldr	r1, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	021a      	lsls	r2, r3, #8
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6859      	ldr	r1, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6899      	ldr	r1, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	4a58      	ldr	r2, [pc, #352]	; (800143c <ADC_Init+0x1f4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d022      	beq.n	8001326 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6899      	ldr	r1, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6899      	ldr	r1, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	e00f      	b.n	8001346 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001344:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0202 	bic.w	r2, r2, #2
 8001354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6899      	ldr	r1, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7e1b      	ldrb	r3, [r3, #24]
 8001360:	005a      	lsls	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d01b      	beq.n	80013ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001382:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001392:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6859      	ldr	r1, [r3, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	3b01      	subs	r3, #1
 80013a0:	035a      	lsls	r2, r3, #13
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	e007      	b.n	80013bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	051a      	lsls	r2, r3, #20
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6899      	ldr	r1, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013fe:	025a      	lsls	r2, r3, #9
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6899      	ldr	r1, [r3, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	029a      	lsls	r2, r3, #10
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	609a      	str	r2, [r3, #8]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40012300 	.word	0x40012300
 800143c:	0f000001 	.word	0x0f000001

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4907      	ldr	r1, [pc, #28]	; (80014dc <__NVIC_EnableIRQ+0x38>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	; (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b04      	cmp	r3, #4
 8001550:	bf28      	it	cs
 8001552:	2304      	movcs	r3, #4
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3304      	adds	r3, #4
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b03      	subs	r3, #3
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ac:	d301      	bcc.n	80015b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <SysTick_Config+0x40>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ba:	210f      	movs	r1, #15
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f7ff ff8e 	bl	80014e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <SysTick_Config+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SysTick_Config+0x40>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff29 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001608:	f7ff ff3e 	bl	8001488 <__NVIC_GetPriorityGrouping>
 800160c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7ff ff8e 	bl	8001534 <NVIC_EncodePriority>
 8001618:	4602      	mov	r2, r0
 800161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff5d 	bl	80014e0 <__NVIC_SetPriority>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff31 	bl	80014a4 <__NVIC_EnableIRQ>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffa2 	bl	800159c <SysTick_Config>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e165      	b.n	800194c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001680:	2201      	movs	r2, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8154 	bne.w	8001946 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d005      	beq.n	80016b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d130      	bne.n	8001718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2203      	movs	r2, #3
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 0201 	and.w	r2, r3, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b03      	cmp	r3, #3
 8001722:	d017      	beq.n	8001754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d123      	bne.n	80017a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	08da      	lsrs	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3208      	adds	r2, #8
 80017a2:	69b9      	ldr	r1, [r7, #24]
 80017a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80ae 	beq.w	8001946 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <HAL_GPIO_Init+0x300>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a5c      	ldr	r2, [pc, #368]	; (8001964 <HAL_GPIO_Init+0x300>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b5a      	ldr	r3, [pc, #360]	; (8001964 <HAL_GPIO_Init+0x300>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001806:	4a58      	ldr	r2, [pc, #352]	; (8001968 <HAL_GPIO_Init+0x304>)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	220f      	movs	r2, #15
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4f      	ldr	r2, [pc, #316]	; (800196c <HAL_GPIO_Init+0x308>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d025      	beq.n	800187e <HAL_GPIO_Init+0x21a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4e      	ldr	r2, [pc, #312]	; (8001970 <HAL_GPIO_Init+0x30c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d01f      	beq.n	800187a <HAL_GPIO_Init+0x216>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4d      	ldr	r2, [pc, #308]	; (8001974 <HAL_GPIO_Init+0x310>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d019      	beq.n	8001876 <HAL_GPIO_Init+0x212>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <HAL_GPIO_Init+0x314>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0x20e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4b      	ldr	r2, [pc, #300]	; (800197c <HAL_GPIO_Init+0x318>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00d      	beq.n	800186e <HAL_GPIO_Init+0x20a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4a      	ldr	r2, [pc, #296]	; (8001980 <HAL_GPIO_Init+0x31c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d007      	beq.n	800186a <HAL_GPIO_Init+0x206>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a49      	ldr	r2, [pc, #292]	; (8001984 <HAL_GPIO_Init+0x320>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_GPIO_Init+0x202>
 8001862:	2306      	movs	r3, #6
 8001864:	e00c      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 8001866:	2307      	movs	r3, #7
 8001868:	e00a      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 800186a:	2305      	movs	r3, #5
 800186c:	e008      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 800186e:	2304      	movs	r3, #4
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 8001872:	2303      	movs	r3, #3
 8001874:	e004      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 8001876:	2302      	movs	r3, #2
 8001878:	e002      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 800187e:	2300      	movs	r3, #0
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	f002 0203 	and.w	r2, r2, #3
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	4093      	lsls	r3, r2
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001890:	4935      	ldr	r1, [pc, #212]	; (8001968 <HAL_GPIO_Init+0x304>)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189e:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <HAL_GPIO_Init+0x324>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018c2:	4a31      	ldr	r2, [pc, #196]	; (8001988 <HAL_GPIO_Init+0x324>)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_GPIO_Init+0x324>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ec:	4a26      	ldr	r2, [pc, #152]	; (8001988 <HAL_GPIO_Init+0x324>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_GPIO_Init+0x324>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001916:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <HAL_GPIO_Init+0x324>)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_GPIO_Init+0x324>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001940:	4a11      	ldr	r2, [pc, #68]	; (8001988 <HAL_GPIO_Init+0x324>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3301      	adds	r3, #1
 800194a:	61fb      	str	r3, [r7, #28]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b0f      	cmp	r3, #15
 8001950:	f67f ae96 	bls.w	8001680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40013800 	.word	0x40013800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400
 8001974:	40020800 	.word	0x40020800
 8001978:	40020c00 	.word	0x40020c00
 800197c:	40021000 	.word	0x40021000
 8001980:	40021400 	.word	0x40021400
 8001984:	40021800 	.word	0x40021800
 8001988:	40013c00 	.word	0x40013c00

0800198c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
 8001998:	4613      	mov	r3, r2
 800199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800199c:	787b      	ldrb	r3, [r7, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019a8:	e003      	b.n	80019b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	041a      	lsls	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	619a      	str	r2, [r3, #24]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e12b      	b.n	8001c2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff f842 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2224      	movs	r2, #36	; 0x24
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a24:	f001 fd8e 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8001a28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4a81      	ldr	r2, [pc, #516]	; (8001c34 <HAL_I2C_Init+0x274>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d807      	bhi.n	8001a44 <HAL_I2C_Init+0x84>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4a80      	ldr	r2, [pc, #512]	; (8001c38 <HAL_I2C_Init+0x278>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	bf94      	ite	ls
 8001a3c:	2301      	movls	r3, #1
 8001a3e:	2300      	movhi	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e006      	b.n	8001a52 <HAL_I2C_Init+0x92>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4a7d      	ldr	r2, [pc, #500]	; (8001c3c <HAL_I2C_Init+0x27c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	bf94      	ite	ls
 8001a4c:	2301      	movls	r3, #1
 8001a4e:	2300      	movhi	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0e7      	b.n	8001c2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4a78      	ldr	r2, [pc, #480]	; (8001c40 <HAL_I2C_Init+0x280>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	0c9b      	lsrs	r3, r3, #18
 8001a64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a6a      	ldr	r2, [pc, #424]	; (8001c34 <HAL_I2C_Init+0x274>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d802      	bhi.n	8001a94 <HAL_I2C_Init+0xd4>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	e009      	b.n	8001aa8 <HAL_I2C_Init+0xe8>
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	4a69      	ldr	r2, [pc, #420]	; (8001c44 <HAL_I2C_Init+0x284>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	099b      	lsrs	r3, r3, #6
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001aba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	495c      	ldr	r1, [pc, #368]	; (8001c34 <HAL_I2C_Init+0x274>)
 8001ac4:	428b      	cmp	r3, r1
 8001ac6:	d819      	bhi.n	8001afc <HAL_I2C_Init+0x13c>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1e59      	subs	r1, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ad6:	1c59      	adds	r1, r3, #1
 8001ad8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001adc:	400b      	ands	r3, r1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00a      	beq.n	8001af8 <HAL_I2C_Init+0x138>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1e59      	subs	r1, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af6:	e051      	b.n	8001b9c <HAL_I2C_Init+0x1dc>
 8001af8:	2304      	movs	r3, #4
 8001afa:	e04f      	b.n	8001b9c <HAL_I2C_Init+0x1dc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d111      	bne.n	8001b28 <HAL_I2C_Init+0x168>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1e58      	subs	r0, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	440b      	add	r3, r1
 8001b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b16:	3301      	adds	r3, #1
 8001b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bf0c      	ite	eq
 8001b20:	2301      	moveq	r3, #1
 8001b22:	2300      	movne	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	e012      	b.n	8001b4e <HAL_I2C_Init+0x18e>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1e58      	subs	r0, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	0099      	lsls	r1, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Init+0x196>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e022      	b.n	8001b9c <HAL_I2C_Init+0x1dc>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10e      	bne.n	8001b7c <HAL_I2C_Init+0x1bc>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1e58      	subs	r0, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6859      	ldr	r1, [r3, #4]
 8001b66:	460b      	mov	r3, r1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	440b      	add	r3, r1
 8001b6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b70:	3301      	adds	r3, #1
 8001b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7a:	e00f      	b.n	8001b9c <HAL_I2C_Init+0x1dc>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1e58      	subs	r0, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	0099      	lsls	r1, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	6809      	ldr	r1, [r1, #0]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69da      	ldr	r2, [r3, #28]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6911      	ldr	r1, [r2, #16]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68d2      	ldr	r2, [r2, #12]
 8001bd6:	4311      	orrs	r1, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	000186a0 	.word	0x000186a0
 8001c38:	001e847f 	.word	0x001e847f
 8001c3c:	003d08ff 	.word	0x003d08ff
 8001c40:	431bde83 	.word	0x431bde83
 8001c44:	10624dd3 	.word	0x10624dd3

08001c48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	b08f      	sub	sp, #60	; 0x3c
 8001c4c:	af0a      	add	r7, sp, #40	; 0x28
 8001c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e116      	b.n	8001e88 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d106      	bne.n	8001c7a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f006 fdb5 	bl	80087e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 f8d2 	bl	8004e42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	687e      	ldr	r6, [r7, #4]
 8001ca6:	466d      	mov	r5, sp
 8001ca8:	f106 0410 	add.w	r4, r6, #16
 8001cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cbc:	1d33      	adds	r3, r6, #4
 8001cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc0:	6838      	ldr	r0, [r7, #0]
 8001cc2:	f002 ffa9 	bl	8004c18 <USB_CoreInit>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0d7      	b.n	8001e88 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 f8c0 	bl	8004e64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e04a      	b.n	8001d80 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	333d      	adds	r3, #61	; 0x3d
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	333c      	adds	r3, #60	; 0x3c
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	b298      	uxth	r0, r3
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	3344      	adds	r3, #68	; 0x44
 8001d26:	4602      	mov	r2, r0
 8001d28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3340      	adds	r3, #64	; 0x40
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3348      	adds	r3, #72	; 0x48
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	334c      	adds	r3, #76	; 0x4c
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3354      	adds	r3, #84	; 0x54
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d3af      	bcc.n	8001cea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	e044      	b.n	8001e1a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	3301      	adds	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d3b5      	bcc.n	8001d90 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	687e      	ldr	r6, [r7, #4]
 8001e2c:	466d      	mov	r5, sp
 8001e2e:	f106 0410 	add.w	r4, r6, #16
 8001e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e42:	1d33      	adds	r3, r6, #4
 8001e44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e46:	6838      	ldr	r0, [r7, #0]
 8001e48:	f003 f858 	bl	8004efc <USB_DevInit>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e014      	b.n	8001e88 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f001 f98c 	bl	8003194 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 f99a 	bl	80061ba <USB_DevDisconnect>

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_PCD_Start+0x1c>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e020      	b.n	8001eee <HAL_PCD_Start+0x5e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d109      	bne.n	8001ed0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d005      	beq.n	8001ed0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 ffa3 	bl	8004e20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 f94a 	bl	8006178 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ef6:	b590      	push	{r4, r7, lr}
 8001ef8:	b08d      	sub	sp, #52	; 0x34
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 fa08 	bl	8006322 <USB_GetMode>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f040 84b7 	bne.w	8002888 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f004 f96c 	bl	80061fc <USB_ReadInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 84ad 	beq.w	8002886 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f004 f959 	bl	80061fc <USB_ReadInterrupts>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d107      	bne.n	8001f64 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f002 0202 	and.w	r2, r2, #2
 8001f62:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 f947 	bl	80061fc <USB_ReadInterrupts>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d161      	bne.n	800203c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0210 	bic.w	r2, r2, #16
 8001f86:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f003 020f 	and.w	r2, r3, #15
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	0c5b      	lsrs	r3, r3, #17
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d124      	bne.n	8001ffe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d035      	beq.n	800202c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	6a38      	ldr	r0, [r7, #32]
 8001fd4:	f003 ff7e 	bl	8005ed4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fe4:	441a      	add	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ff6:	441a      	add	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	621a      	str	r2, [r3, #32]
 8001ffc:	e016      	b.n	800202c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	0c5b      	lsrs	r3, r3, #17
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	2b06      	cmp	r3, #6
 8002008:	d110      	bne.n	800202c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002010:	2208      	movs	r2, #8
 8002012:	4619      	mov	r1, r3
 8002014:	6a38      	ldr	r0, [r7, #32]
 8002016:	f003 ff5d 	bl	8005ed4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	6a1a      	ldr	r2, [r3, #32]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002026:	441a      	add	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0210 	orr.w	r2, r2, #16
 800203a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f004 f8db 	bl	80061fc <USB_ReadInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002050:	f040 80a7 	bne.w	80021a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f004 f8e0 	bl	8006222 <USB_ReadDevAllOutEpInterrupt>
 8002062:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002064:	e099      	b.n	800219a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 808e 	beq.w	800218e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f004 f904 	bl	800628a <USB_ReadDevOutEPInterrupt>
 8002082:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	4413      	add	r3, r2
 8002096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209a:	461a      	mov	r2, r3
 800209c:	2301      	movs	r3, #1
 800209e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fef0 	bl	8002e88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020be:	461a      	mov	r2, r3
 80020c0:	2308      	movs	r3, #8
 80020c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 ffc6 	bl	8003058 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e2:	461a      	mov	r2, r3
 80020e4:	2310      	movs	r3, #16
 80020e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d030      	beq.n	8002154 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fa:	2b80      	cmp	r3, #128	; 0x80
 80020fc:	d109      	bne.n	8002112 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800210c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002110:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	78db      	ldrb	r3, [r3, #3]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d108      	bne.n	8002142 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2200      	movs	r2, #0
 8002134:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f006 fc6d 	bl	8008a1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214e:	461a      	mov	r2, r3
 8002150:	2302      	movs	r3, #2
 8002152:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b00      	cmp	r3, #0
 800215c:	d008      	beq.n	8002170 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	4413      	add	r3, r2
 8002166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216a:	461a      	mov	r2, r3
 800216c:	2320      	movs	r3, #32
 800216e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002186:	461a      	mov	r2, r3
 8002188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800218c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	3301      	adds	r3, #1
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219c:	2b00      	cmp	r3, #0
 800219e:	f47f af62 	bne.w	8002066 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 f828 	bl	80061fc <USB_ReadInterrupts>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021b6:	f040 80db 	bne.w	8002370 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 f849 	bl	8006256 <USB_ReadDevAllInEpInterrupt>
 80021c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021ca:	e0cd      	b.n	8002368 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80c2 	beq.w	800235c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 f86f 	bl	80062c6 <USB_ReadDevInEPInterrupt>
 80021e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d057      	beq.n	80022a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	2201      	movs	r2, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43db      	mvns	r3, r3
 800220e:	69f9      	ldr	r1, [r7, #28]
 8002210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002214:	4013      	ands	r3, r2
 8002216:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	4413      	add	r3, r2
 8002220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002224:	461a      	mov	r2, r3
 8002226:	2301      	movs	r3, #1
 8002228:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d132      	bne.n	8002298 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	334c      	adds	r3, #76	; 0x4c
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4403      	add	r3, r0
 8002252:	3348      	adds	r3, #72	; 0x48
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4419      	add	r1, r3
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4403      	add	r3, r0
 8002266:	334c      	adds	r3, #76	; 0x4c
 8002268:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	2b00      	cmp	r3, #0
 800226e:	d113      	bne.n	8002298 <HAL_PCD_IRQHandler+0x3a2>
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3354      	adds	r3, #84	; 0x54
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d108      	bne.n	8002298 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002290:	461a      	mov	r2, r3
 8002292:	2101      	movs	r1, #1
 8002294:	f004 f876 	bl	8006384 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	b2db      	uxtb	r3, r3
 800229c:	4619      	mov	r1, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f006 fb37 	bl	8008912 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ba:	461a      	mov	r2, r3
 80022bc:	2308      	movs	r3, #8
 80022be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d6:	461a      	mov	r2, r3
 80022d8:	2310      	movs	r3, #16
 80022da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022f2:	461a      	mov	r2, r3
 80022f4:	2340      	movs	r3, #64	; 0x40
 80022f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d023      	beq.n	800234a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002304:	6a38      	ldr	r0, [r7, #32]
 8002306:	f002 ff57 	bl	80051b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800230a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	3338      	adds	r3, #56	; 0x38
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	3304      	adds	r3, #4
 800231c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	78db      	ldrb	r3, [r3, #3]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d108      	bne.n	8002338 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2200      	movs	r2, #0
 800232a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	b2db      	uxtb	r3, r3
 8002330:	4619      	mov	r1, r3
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f006 fb84 	bl	8008a40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002344:	461a      	mov	r2, r3
 8002346:	2302      	movs	r3, #2
 8002348:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fd08 	bl	8002d6c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	3301      	adds	r3, #1
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236a:	2b00      	cmp	r3, #0
 800236c:	f47f af2e 	bne.w	80021cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f003 ff41 	bl	80061fc <USB_ReadInterrupts>
 800237a:	4603      	mov	r3, r0
 800237c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002384:	d122      	bne.n	80023cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d108      	bne.n	80023b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023ac:	2100      	movs	r1, #0
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f006 fcfe 	bl	8008db0 <HAL_PCDEx_LPM_Callback>
 80023b4:	e002      	b.n	80023bc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f006 fb22 	bl	8008a00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 ff13 	bl	80061fc <USB_ReadInterrupts>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023e0:	d112      	bne.n	8002408 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d102      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f006 fade 	bl	80089b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002406:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f003 fef5 	bl	80061fc <USB_ReadInterrupts>
 8002412:	4603      	mov	r3, r0
 8002414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800241c:	d121      	bne.n	8002462 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800242c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d111      	bne.n	800245c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	f003 020f 	and.w	r2, r3, #15
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002452:	2101      	movs	r1, #1
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f006 fcab 	bl	8008db0 <HAL_PCDEx_LPM_Callback>
 800245a:	e002      	b.n	8002462 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f006 faa9 	bl	80089b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fec8 	bl	80061fc <USB_ReadInterrupts>
 800246c:	4603      	mov	r3, r0
 800246e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002476:	f040 80b7 	bne.w	80025e8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2110      	movs	r1, #16
 8002494:	4618      	mov	r0, r3
 8002496:	f002 fe8f 	bl	80051b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249a:	2300      	movs	r3, #0
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249e:	e046      	b.n	800252e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ac:	461a      	mov	r2, r3
 80024ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c4:	0151      	lsls	r1, r2, #5
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	440a      	add	r2, r1
 80024ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e0:	461a      	mov	r2, r3
 80024e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f8:	0151      	lsls	r1, r2, #5
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	440a      	add	r2, r1
 80024fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002502:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002506:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002518:	0151      	lsls	r1, r2, #5
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	440a      	add	r2, r1
 800251e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002522:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002526:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252a:	3301      	adds	r3, #1
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002534:	429a      	cmp	r2, r3
 8002536:	d3b3      	bcc.n	80024a0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002546:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800254a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	2b00      	cmp	r3, #0
 8002552:	d016      	beq.n	8002582 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002564:	f043 030b 	orr.w	r3, r3, #11
 8002568:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800257a:	f043 030b 	orr.w	r3, r3, #11
 800257e:	6453      	str	r3, [r2, #68]	; 0x44
 8002580:	e015      	b.n	80025ae <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002590:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002594:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002598:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a8:	f043 030b 	orr.w	r3, r3, #11
 80025ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025d2:	461a      	mov	r2, r3
 80025d4:	f003 fed6 	bl	8006384 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 fe05 	bl	80061fc <USB_ReadInterrupts>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fc:	d124      	bne.n	8002648 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f003 fe9b 	bl	800633e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f002 fe50 	bl	80052b2 <USB_GetDevSpeed>
 8002612:	4603      	mov	r3, r0
 8002614:	461a      	mov	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681c      	ldr	r4, [r3, #0]
 800261e:	f000 ff85 	bl	800352c <HAL_RCC_GetHCLKFreq>
 8002622:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	4620      	mov	r0, r4
 800262e:	f002 fb55 	bl	8004cdc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f006 f995 	bl	8008962 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002646:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f003 fdd5 	bl	80061fc <USB_ReadInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b08      	cmp	r3, #8
 800265a:	d10a      	bne.n	8002672 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f006 f972 	bl	8008946 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f002 0208 	and.w	r2, r2, #8
 8002670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fdc0 	bl	80061fc <USB_ReadInterrupts>
 800267c:	4603      	mov	r3, r0
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	d122      	bne.n	80026cc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002692:	2301      	movs	r3, #1
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
 8002696:	e014      	b.n	80026c2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fb27 	bl	8002d0a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	3301      	adds	r3, #1
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d3e5      	bcc.n	8002698 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 fd93 	bl	80061fc <USB_ReadInterrupts>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026e0:	d13b      	bne.n	800275a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026e2:	2301      	movs	r3, #1
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
 80026e6:	e02b      	b.n	8002740 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3340      	adds	r3, #64	; 0x40
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d115      	bne.n	800273a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800270e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	da12      	bge.n	800273a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	333f      	adds	r3, #63	; 0x3f
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4619      	mov	r1, r3
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fae8 	bl	8002d0a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	3301      	adds	r3, #1
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002746:	429a      	cmp	r2, r3
 8002748:	d3ce      	bcc.n	80026e8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002758:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f003 fd4c 	bl	80061fc <USB_ReadInterrupts>
 8002764:	4603      	mov	r3, r0
 8002766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800276e:	d155      	bne.n	800281c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002770:	2301      	movs	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	e045      	b.n	8002802 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d12e      	bne.n	80027fc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800279e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	da2b      	bge.n	80027fc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027b0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d121      	bne.n	80027fc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f8:	6053      	str	r3, [r2, #4]
            break;
 80027fa:	e007      	b.n	800280c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	3301      	adds	r3, #1
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	429a      	cmp	r2, r3
 800280a:	d3b4      	bcc.n	8002776 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800281a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f003 fceb 	bl	80061fc <USB_ReadInterrupts>
 8002826:	4603      	mov	r3, r0
 8002828:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002830:	d10a      	bne.n	8002848 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f006 f916 	bl	8008a64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f003 fcd5 	bl	80061fc <USB_ReadInterrupts>
 8002852:	4603      	mov	r3, r0
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b04      	cmp	r3, #4
 800285a:	d115      	bne.n	8002888 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f006 f906 	bl	8008a80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	430a      	orrs	r2, r1
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	e000      	b.n	8002888 <HAL_PCD_IRQHandler+0x992>
      return;
 8002886:	bf00      	nop
    }
  }
}
 8002888:	3734      	adds	r7, #52	; 0x34
 800288a:	46bd      	mov	sp, r7
 800288c:	bd90      	pop	{r4, r7, pc}

0800288e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_PCD_SetAddress+0x1a>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e013      	b.n	80028d0 <HAL_PCD_SetAddress+0x42>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 fc33 	bl	800612c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	4608      	mov	r0, r1
 80028e2:	4611      	mov	r1, r2
 80028e4:	461a      	mov	r2, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	70fb      	strb	r3, [r7, #3]
 80028ea:	460b      	mov	r3, r1
 80028ec:	803b      	strh	r3, [r7, #0]
 80028ee:	4613      	mov	r3, r2
 80028f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	da0f      	bge.n	800291e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	f003 020f 	and.w	r2, r3, #15
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	3338      	adds	r3, #56	; 0x38
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	3304      	adds	r3, #4
 8002914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	705a      	strb	r2, [r3, #1]
 800291c:	e00f      	b.n	800293e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	4413      	add	r3, r2
 8002934:	3304      	adds	r3, #4
 8002936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800294a:	883a      	ldrh	r2, [r7, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	78ba      	ldrb	r2, [r7, #2]
 8002954:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d004      	beq.n	8002968 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002968:	78bb      	ldrb	r3, [r7, #2]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d102      	bne.n	8002974 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_PCD_EP_Open+0xaa>
 800297e:	2302      	movs	r3, #2
 8002980:	e00e      	b.n	80029a0 <HAL_PCD_EP_Open+0xc8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68f9      	ldr	r1, [r7, #12]
 8002990:	4618      	mov	r0, r3
 8002992:	f002 fcb3 	bl	80052fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800299e:	7afb      	ldrb	r3, [r7, #11]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	da0f      	bge.n	80029dc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	f003 020f 	and.w	r2, r3, #15
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	3338      	adds	r3, #56	; 0x38
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	3304      	adds	r3, #4
 80029d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2201      	movs	r2, #1
 80029d8:	705a      	strb	r2, [r3, #1]
 80029da:	e00f      	b.n	80029fc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	f003 020f 	and.w	r2, r3, #15
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	3304      	adds	r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_PCD_EP_Close+0x6e>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e00e      	b.n	8002a34 <HAL_PCD_EP_Close+0x8c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68f9      	ldr	r1, [r7, #12]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 fcf1 	bl	800540c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
 8002a4e:	f003 020f 	and.w	r2, r3, #15
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	3304      	adds	r3, #4
 8002a64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a7e:	7afb      	ldrb	r3, [r7, #11]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d102      	bne.n	8002a98 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a98:	7afb      	ldrb	r3, [r7, #11]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	6979      	ldr	r1, [r7, #20]
 8002ab0:	f002 ffd0 	bl	8005a54 <USB_EP0StartXfer>
 8002ab4:	e008      	b.n	8002ac8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6979      	ldr	r1, [r7, #20]
 8002ac4:	f002 fd7e 	bl	80055c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	f003 020f 	and.w	r2, r3, #15
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002af4:	681b      	ldr	r3, [r3, #0]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b12:	7afb      	ldrb	r3, [r7, #11]
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	3338      	adds	r3, #56	; 0x38
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	3304      	adds	r3, #4
 8002b28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b42:	7afb      	ldrb	r3, [r7, #11]
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d102      	bne.n	8002b5c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b5c:	7afb      	ldrb	r3, [r7, #11]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	6979      	ldr	r1, [r7, #20]
 8002b74:	f002 ff6e 	bl	8005a54 <USB_EP0StartXfer>
 8002b78:	e008      	b.n	8002b8c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	f002 fd1c 	bl	80055c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 020f 	and.w	r2, r3, #15
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d901      	bls.n	8002bb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e050      	b.n	8002c56 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	da0f      	bge.n	8002bdc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 020f 	and.w	r2, r3, #15
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	3338      	adds	r3, #56	; 0x38
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	705a      	strb	r2, [r3, #1]
 8002bda:	e00d      	b.n	8002bf8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_PCD_EP_SetStall+0x82>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e01e      	b.n	8002c56 <HAL_PCD_EP_SetStall+0xc0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68f9      	ldr	r1, [r7, #12]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 f9ac 	bl	8005f84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	b2d9      	uxtb	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c46:	461a      	mov	r2, r3
 8002c48:	f003 fb9c 	bl	8006384 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	460b      	mov	r3, r1
 8002c68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	f003 020f 	and.w	r2, r3, #15
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d901      	bls.n	8002c7c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e042      	b.n	8002d02 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	da0f      	bge.n	8002ca4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	f003 020f 	and.w	r2, r3, #15
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	3338      	adds	r3, #56	; 0x38
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	3304      	adds	r3, #4
 8002c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	705a      	strb	r2, [r3, #1]
 8002ca2:	e00f      	b.n	8002cc4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 020f 	and.w	r2, r3, #15
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	3304      	adds	r3, #4
 8002cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_PCD_EP_ClrStall+0x86>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e00e      	b.n	8002d02 <HAL_PCD_EP_ClrStall+0xa4>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68f9      	ldr	r1, [r7, #12]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 f9b4 	bl	8006060 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	da0c      	bge.n	8002d38 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	3338      	adds	r3, #56	; 0x38
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	3304      	adds	r3, #4
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e00c      	b.n	8002d52 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 020f 	and.w	r2, r3, #15
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3304      	adds	r3, #4
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68f9      	ldr	r1, [r7, #12]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f002 ffd3 	bl	8005d04 <USB_EPStopXfer>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d62:	7afb      	ldrb	r3, [r7, #11]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	3338      	adds	r3, #56	; 0x38
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	3304      	adds	r3, #4
 8002d92:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a1a      	ldr	r2, [r3, #32]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d901      	bls.n	8002da4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e06c      	b.n	8002e7e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d902      	bls.n	8002dc0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	3303      	adds	r3, #3
 8002dc4:	089b      	lsrs	r3, r3, #2
 8002dc6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dc8:	e02b      	b.n	8002e22 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d902      	bls.n	8002de6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3303      	adds	r3, #3
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6919      	ldr	r1, [r3, #16]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	4603      	mov	r3, r0
 8002e04:	6978      	ldr	r0, [r7, #20]
 8002e06:	f003 f827 	bl	8005e58 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	441a      	add	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	441a      	add	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d809      	bhi.n	8002e4c <PCD_WriteEmptyTxFifo+0xe0>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1a      	ldr	r2, [r3, #32]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d203      	bcs.n	8002e4c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1be      	bne.n	8002dca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d811      	bhi.n	8002e7c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	2201      	movs	r2, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	6939      	ldr	r1, [r7, #16]
 8002e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e78:	4013      	ands	r3, r2
 8002e7a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	333c      	adds	r3, #60	; 0x3c
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d17b      	bne.n	8002fb6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d015      	beq.n	8002ef4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	4a61      	ldr	r2, [pc, #388]	; (8003050 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	f240 80b9 	bls.w	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80b3 	beq.w	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eea:	461a      	mov	r2, r3
 8002eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef0:	6093      	str	r3, [r2, #8]
 8002ef2:	e0a7      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	6093      	str	r3, [r2, #8]
 8002f10:	e098      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 8093 	bne.w	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	4a4b      	ldr	r2, [pc, #300]	; (8003050 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d90f      	bls.n	8002f46 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f42:	6093      	str	r3, [r2, #8]
 8002f44:	e07e      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	3304      	adds	r3, #4
 8002f5a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	0159      	lsls	r1, r3, #5
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	440b      	add	r3, r1
 8002f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	1ad2      	subs	r2, r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d114      	bne.n	8002fa8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f90:	461a      	mov	r2, r3
 8002f92:	2101      	movs	r1, #1
 8002f94:	f003 f9f6 	bl	8006384 <USB_EP0_OutStart>
 8002f98:	e006      	b.n	8002fa8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	441a      	add	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f005 fc94 	bl	80088dc <HAL_PCD_DataOutStageCallback>
 8002fb4:	e046      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	4a26      	ldr	r2, [pc, #152]	; (8003054 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d124      	bne.n	8003008 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fda:	6093      	str	r3, [r2, #8]
 8002fdc:	e032      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	4619      	mov	r1, r3
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f005 fc6b 	bl	80088dc <HAL_PCD_DataOutStageCallback>
 8003006:	e01d      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d114      	bne.n	8003038 <PCD_EP_OutXfrComplete_int+0x1b0>
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003030:	461a      	mov	r2, r3
 8003032:	2100      	movs	r1, #0
 8003034:	f003 f9a6 	bl	8006384 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f005 fc4c 	bl	80088dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	4f54300a 	.word	0x4f54300a
 8003054:	4f54310a 	.word	0x4f54310a

08003058 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	333c      	adds	r3, #60	; 0x3c
 8003070:	3304      	adds	r3, #4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d90e      	bls.n	80030ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003094:	2b00      	cmp	r3, #0
 8003096:	d009      	beq.n	80030ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a4:	461a      	mov	r2, r3
 80030a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f005 fc03 	bl	80088b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d90c      	bls.n	80030d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d108      	bne.n	80030d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030cc:	461a      	mov	r2, r3
 80030ce:	2101      	movs	r1, #1
 80030d0:	f003 f958 	bl	8006384 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	4f54300a 	.word	0x4f54300a

080030e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
 80030f0:	4613      	mov	r3, r2
 80030f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d107      	bne.n	8003112 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003102:	883b      	ldrh	r3, [r7, #0]
 8003104:	0419      	lsls	r1, r3, #16
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	430a      	orrs	r2, r1
 800310e:	629a      	str	r2, [r3, #40]	; 0x28
 8003110:	e028      	b.n	8003164 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	4413      	add	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	e00d      	b.n	8003142 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	3340      	adds	r3, #64	; 0x40
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	4413      	add	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	3301      	adds	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	3b01      	subs	r3, #1
 8003148:	429a      	cmp	r2, r3
 800314a:	d3ec      	bcc.n	8003126 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800314c:	883b      	ldrh	r3, [r7, #0]
 800314e:	0418      	lsls	r0, r3, #16
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	3b01      	subs	r3, #1
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	4302      	orrs	r2, r0
 800315c:	3340      	adds	r3, #64	; 0x40
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c6:	f043 0303 	orr.w	r3, r3, #3
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80031e4:	f7fd fe8a 	bl	8000efc <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e069      	b.n	80032c8 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10b      	bne.n	8003218 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7fd fc79 	bl	8000b00 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800320e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f85e 	bl	80032d4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	3b01      	subs	r3, #1
 8003228:	021a      	lsls	r2, r3, #8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	2120      	movs	r1, #32
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f856 	bl	80032f0 <QSPI_WaitFlagStateUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003248:	7afb      	ldrb	r3, [r7, #11]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d137      	bne.n	80032be <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003258:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6852      	ldr	r2, [r2, #4]
 8003260:	0611      	lsls	r1, r2, #24
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68d2      	ldr	r2, [r2, #12]
 8003266:	4311      	orrs	r1, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	69d2      	ldr	r2, [r2, #28]
 800326c:	4311      	orrs	r1, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6a12      	ldr	r2, [r2, #32]
 8003272:	4311      	orrs	r1, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	430b      	orrs	r3, r1
 800327a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <HAL_QSPI_Init+0xf4>)
 8003284:	4013      	ands	r3, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6912      	ldr	r2, [r2, #16]
 800328a:	0411      	lsls	r1, r2, #16
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6952      	ldr	r2, [r2, #20]
 8003290:	4311      	orrs	r1, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6992      	ldr	r2, [r2, #24]
 8003296:	4311      	orrs	r1, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	430b      	orrs	r3, r1
 800329e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80032c6:	7afb      	ldrb	r3, [r7, #11]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	ffe0f8fe 	.word	0xffe0f8fe

080032d4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003300:	e01a      	b.n	8003338 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d016      	beq.n	8003338 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330a:	f7fd fdf7 	bl	8000efc <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	429a      	cmp	r2, r3
 8003318:	d302      	bcc.n	8003320 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2204      	movs	r2, #4
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	f043 0201 	orr.w	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e00e      	b.n	8003356 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	429a      	cmp	r2, r3
 8003352:	d1d6      	bne.n	8003302 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0cc      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b68      	ldr	r3, [pc, #416]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d90c      	bls.n	800339c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b65      	ldr	r3, [pc, #404]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b8      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b4:	4b59      	ldr	r3, [pc, #356]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a58      	ldr	r2, [pc, #352]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	494d      	ldr	r1, [pc, #308]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d044      	beq.n	8003480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d119      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e07f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d003      	beq.n	800341e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	2b03      	cmp	r3, #3
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b3f      	ldr	r3, [pc, #252]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e06f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	4b3b      	ldr	r3, [pc, #236]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e067      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343e:	4b37      	ldr	r3, [pc, #220]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4934      	ldr	r1, [pc, #208]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003450:	f7fd fd54 	bl	8000efc <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	e00a      	b.n	800346e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fd fd50 	bl	8000efc <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e04f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	4b2b      	ldr	r3, [pc, #172]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 020c 	and.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	429a      	cmp	r2, r3
 800347e:	d1eb      	bne.n	8003458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003480:	4b25      	ldr	r3, [pc, #148]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d20c      	bcs.n	80034a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e032      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4916      	ldr	r1, [pc, #88]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	490e      	ldr	r1, [pc, #56]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034e6:	f000 fb7f 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 80034ea:	4602      	mov	r2, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	490a      	ldr	r1, [pc, #40]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	5ccb      	ldrb	r3, [r1, r3]
 80034fa:	fa22 f303 	lsr.w	r3, r2, r3
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd fcb4 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023c00 	.word	0x40023c00
 800351c:	40023800 	.word	0x40023800
 8003520:	08008f8c 	.word	0x08008f8c
 8003524:	20000000 	.word	0x20000000
 8003528:	20000004 	.word	0x20000004

0800352c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <HAL_RCC_GetHCLKFreq+0x14>)
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000000 	.word	0x20000000

08003544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003548:	f7ff fff0 	bl	800352c <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0a9b      	lsrs	r3, r3, #10
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4903      	ldr	r1, [pc, #12]	; (8003568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40023800 	.word	0x40023800
 8003568:	08008f9c 	.word	0x08008f9c

0800356c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003570:	f7ff ffdc 	bl	800352c <HAL_RCC_GetHCLKFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	0b5b      	lsrs	r3, r3, #13
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4903      	ldr	r1, [pc, #12]	; (8003590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40023800 	.word	0x40023800
 8003590:	08008f9c 	.word	0x08008f9c

08003594 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08c      	sub	sp, #48	; 0x30
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d010      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80035cc:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	496c      	ldr	r1, [pc, #432]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80035ea:	2301      	movs	r3, #1
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d010      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80035fa:	4b64      	ldr	r3, [pc, #400]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003600:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	4960      	ldr	r1, [pc, #384]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003618:	2301      	movs	r3, #1
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d017      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003628:	4b58      	ldr	r3, [pc, #352]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800362a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800362e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4955      	ldr	r1, [pc, #340]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003646:	d101      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003648:	2301      	movs	r3, #1
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003654:	2301      	movs	r3, #1
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d017      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003664:	4b49      	ldr	r3, [pc, #292]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800366a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003672:	4946      	ldr	r1, [pc, #280]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003682:	d101      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003684:	2301      	movs	r3, #1
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003690:	2301      	movs	r3, #1
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 808a 	beq.w	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	4b39      	ldr	r3, [pc, #228]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a38      	ldr	r2, [pc, #224]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
 80036b2:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036be:	4b34      	ldr	r3, [pc, #208]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a33      	ldr	r2, [pc, #204]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036ca:	f7fd fc17 	bl	8000efc <HAL_GetTick>
 80036ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036d2:	f7fd fc13 	bl	8000efc <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e278      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036e4:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036f0:	4b26      	ldr	r3, [pc, #152]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d02f      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	429a      	cmp	r2, r3
 800370c:	d028      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800370e:	4b1f      	ldr	r3, [pc, #124]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003716:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003718:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003724:	4a19      	ldr	r2, [pc, #100]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800372a:	4b18      	ldr	r3, [pc, #96]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d114      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003736:	f7fd fbe1 	bl	8000efc <HAL_GetTick>
 800373a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373c:	e00a      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800373e:	f7fd fbdd 	bl	8000efc <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f241 3288 	movw	r2, #5000	; 0x1388
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e240      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003754:	4b0d      	ldr	r3, [pc, #52]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ee      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800376c:	d114      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800377e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003782:	4902      	ldr	r1, [pc, #8]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003784:	4313      	orrs	r3, r2
 8003786:	608b      	str	r3, [r1, #8]
 8003788:	e00c      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	40007000 	.word	0x40007000
 8003794:	42470e40 	.word	0x42470e40
 8003798:	4b4a      	ldr	r3, [pc, #296]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a49      	ldr	r2, [pc, #292]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800379e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037a2:	6093      	str	r3, [r2, #8]
 80037a4:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b0:	4944      	ldr	r1, [pc, #272]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80037c8:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80037ca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80037d8:	4b3a      	ldr	r3, [pc, #232]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e6:	4937      	ldr	r1, [pc, #220]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037fa:	4b32      	ldr	r3, [pc, #200]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003800:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003808:	492e      	ldr	r1, [pc, #184]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d011      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800381c:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800381e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003822:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	4926      	ldr	r1, [pc, #152]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800383a:	d101      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800383c:	2301      	movs	r3, #1
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800384c:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800384e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003852:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	491a      	ldr	r1, [pc, #104]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386a:	2b00      	cmp	r3, #0
 800386c:	d011      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003874:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387c:	4911      	ldr	r1, [pc, #68]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388c:	d101      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800388e:	2301      	movs	r3, #1
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003894:	2b01      	cmp	r3, #1
 8003896:	d005      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a0:	f040 80ff 	bne.w	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038aa:	f7fd fb27 	bl	8000efc <HAL_GetTick>
 80038ae:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038b0:	e00e      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038b2:	f7fd fb23 	bl	8000efc <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d907      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e188      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80038c4:	40023800 	.word	0x40023800
 80038c8:	424711e0 	.word	0x424711e0
 80038cc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038d0:	4b7e      	ldr	r3, [pc, #504]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ea      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d009      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d028      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d124      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003904:	4b71      	ldr	r3, [pc, #452]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800390a:	0c1b      	lsrs	r3, r3, #16
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	3301      	adds	r3, #1
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003916:	4b6d      	ldr	r3, [pc, #436]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391c:	0e1b      	lsrs	r3, r3, #24
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	019b      	lsls	r3, r3, #6
 800392e:	431a      	orrs	r2, r3
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	3b01      	subs	r3, #1
 8003936:	041b      	lsls	r3, r3, #16
 8003938:	431a      	orrs	r2, r3
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	061b      	lsls	r3, r3, #24
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	071b      	lsls	r3, r3, #28
 8003946:	4961      	ldr	r1, [pc, #388]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800396c:	2b00      	cmp	r3, #0
 800396e:	d035      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003978:	d130      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800397a:	4b54      	ldr	r3, [pc, #336]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800397c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	3301      	adds	r3, #1
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800398c:	4b4f      	ldr	r3, [pc, #316]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800398e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003992:	0f1b      	lsrs	r3, r3, #28
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	019b      	lsls	r3, r3, #6
 80039a4:	431a      	orrs	r2, r3
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	3b01      	subs	r3, #1
 80039ac:	041b      	lsls	r3, r3, #16
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	431a      	orrs	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	071b      	lsls	r3, r3, #28
 80039bc:	4943      	ldr	r1, [pc, #268]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039c4:	4b41      	ldr	r3, [pc, #260]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ca:	f023 021f 	bic.w	r2, r3, #31
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	3b01      	subs	r3, #1
 80039d4:	493d      	ldr	r1, [pc, #244]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d029      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f0:	d124      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80039f2:	4b36      	ldr	r3, [pc, #216]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	3301      	adds	r3, #1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a04:	4b31      	ldr	r3, [pc, #196]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0a:	0f1b      	lsrs	r3, r3, #28
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	019b      	lsls	r3, r3, #6
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	3b01      	subs	r3, #1
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	071b      	lsls	r3, r3, #28
 8003a34:	4925      	ldr	r1, [pc, #148]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d016      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	019b      	lsls	r3, r3, #6
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	041b      	lsls	r3, r3, #16
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	071b      	lsls	r3, r3, #28
 8003a6e:	4917      	ldr	r1, [pc, #92]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a76:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a7c:	f7fd fa3e 	bl	8000efc <HAL_GetTick>
 8003a80:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a84:	f7fd fa3a 	bl	8000efc <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e09f      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a96:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	f040 8095 	bne.w	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ab0:	f7fd fa24 	bl	8000efc <HAL_GetTick>
 8003ab4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ab6:	e00f      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ab8:	f7fd fa20 	bl	8000efc <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d908      	bls.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e085      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	42470068 	.word	0x42470068
 8003ad4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ad8:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae4:	d0e8      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d02b      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d127      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003b0e:	4b34      	ldr	r3, [pc, #208]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	019b      	lsls	r3, r3, #6
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	3b01      	subs	r3, #1
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	4928      	ldr	r1, [pc, #160]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b44:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	3b01      	subs	r3, #1
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	4922      	ldr	r1, [pc, #136]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01d      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b72:	d118      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b74:	4b1a      	ldr	r3, [pc, #104]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	0e1b      	lsrs	r3, r3, #24
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	019b      	lsls	r3, r3, #6
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	3b01      	subs	r3, #1
 8003b96:	041b      	lsls	r3, r3, #16
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	061b      	lsls	r3, r3, #24
 8003b9e:	4910      	ldr	r1, [pc, #64]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bac:	f7fd f9a6 	bl	8000efc <HAL_GetTick>
 8003bb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003bb4:	f7fd f9a2 	bl	8000efc <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e007      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd2:	d1ef      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3730      	adds	r7, #48	; 0x30
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	42470070 	.word	0x42470070

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bec:	b0ae      	sub	sp, #184	; 0xb8
 8003bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c0e:	4bcb      	ldr	r3, [pc, #812]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	f200 8206 	bhi.w	8004028 <HAL_RCC_GetSysClockFreq+0x440>
 8003c1c:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003c59 	.word	0x08003c59
 8003c28:	08004029 	.word	0x08004029
 8003c2c:	08004029 	.word	0x08004029
 8003c30:	08004029 	.word	0x08004029
 8003c34:	08003c61 	.word	0x08003c61
 8003c38:	08004029 	.word	0x08004029
 8003c3c:	08004029 	.word	0x08004029
 8003c40:	08004029 	.word	0x08004029
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08004029 	.word	0x08004029
 8003c4c:	08004029 	.word	0x08004029
 8003c50:	08004029 	.word	0x08004029
 8003c54:	08003e59 	.word	0x08003e59
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c58:	4bb9      	ldr	r3, [pc, #740]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c5e:	e1e7      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c60:	4bb8      	ldr	r3, [pc, #736]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c66:	e1e3      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c68:	4bb4      	ldr	r3, [pc, #720]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c74:	4bb1      	ldr	r3, [pc, #708]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d071      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c80:	4bae      	ldr	r3, [pc, #696]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c8c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ca2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	462b      	mov	r3, r5
 8003caa:	f04f 0000 	mov.w	r0, #0
 8003cae:	f04f 0100 	mov.w	r1, #0
 8003cb2:	0159      	lsls	r1, r3, #5
 8003cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb8:	0150      	lsls	r0, r2, #5
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	1a51      	subs	r1, r2, r1
 8003cc2:	6439      	str	r1, [r7, #64]	; 0x40
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cca:	647b      	str	r3, [r7, #68]	; 0x44
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003cd8:	4649      	mov	r1, r9
 8003cda:	018b      	lsls	r3, r1, #6
 8003cdc:	4641      	mov	r1, r8
 8003cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	018a      	lsls	r2, r1, #6
 8003ce6:	4641      	mov	r1, r8
 8003ce8:	1a51      	subs	r1, r2, r1
 8003cea:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cec:	4649      	mov	r1, r9
 8003cee:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d00:	4649      	mov	r1, r9
 8003d02:	00cb      	lsls	r3, r1, #3
 8003d04:	4641      	mov	r1, r8
 8003d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d0a:	4641      	mov	r1, r8
 8003d0c:	00ca      	lsls	r2, r1, #3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	4622      	mov	r2, r4
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	633b      	str	r3, [r7, #48]	; 0x30
 8003d1a:	462b      	mov	r3, r5
 8003d1c:	460a      	mov	r2, r1
 8003d1e:	eb42 0303 	adc.w	r3, r2, r3
 8003d22:	637b      	str	r3, [r7, #52]	; 0x34
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d30:	4629      	mov	r1, r5
 8003d32:	024b      	lsls	r3, r1, #9
 8003d34:	4621      	mov	r1, r4
 8003d36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	024a      	lsls	r2, r1, #9
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d50:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d54:	f7fc fa56 	bl	8000204 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d62:	e067      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d64:	4b75      	ldr	r3, [pc, #468]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	099b      	lsrs	r3, r3, #6
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d70:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d7e:	2300      	movs	r3, #0
 8003d80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d82:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003d86:	4622      	mov	r2, r4
 8003d88:	462b      	mov	r3, r5
 8003d8a:	f04f 0000 	mov.w	r0, #0
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	0159      	lsls	r1, r3, #5
 8003d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d98:	0150      	lsls	r0, r2, #5
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4621      	mov	r1, r4
 8003da0:	1a51      	subs	r1, r2, r1
 8003da2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003da4:	4629      	mov	r1, r5
 8003da6:	eb63 0301 	sbc.w	r3, r3, r1
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003db8:	4649      	mov	r1, r9
 8003dba:	018b      	lsls	r3, r1, #6
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	018a      	lsls	r2, r1, #6
 8003dc6:	4641      	mov	r1, r8
 8003dc8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dcc:	4649      	mov	r1, r9
 8003dce:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dde:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003de2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de6:	4692      	mov	sl, r2
 8003de8:	469b      	mov	fp, r3
 8003dea:	4623      	mov	r3, r4
 8003dec:	eb1a 0303 	adds.w	r3, sl, r3
 8003df0:	623b      	str	r3, [r7, #32]
 8003df2:	462b      	mov	r3, r5
 8003df4:	eb4b 0303 	adc.w	r3, fp, r3
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e06:	4629      	mov	r1, r5
 8003e08:	028b      	lsls	r3, r1, #10
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e10:	4621      	mov	r1, r4
 8003e12:	028a      	lsls	r2, r1, #10
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e20:	677a      	str	r2, [r7, #116]	; 0x74
 8003e22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e26:	f7fc f9ed 	bl	8000204 <__aeabi_uldivmod>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4613      	mov	r3, r2
 8003e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e34:	4b41      	ldr	r3, [pc, #260]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e56:	e0eb      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e58:	4b38      	ldr	r3, [pc, #224]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e64:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d06b      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e70:	4b32      	ldr	r3, [pc, #200]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	2200      	movs	r2, #0
 8003e78:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e82:	663b      	str	r3, [r7, #96]	; 0x60
 8003e84:	2300      	movs	r3, #0
 8003e86:	667b      	str	r3, [r7, #100]	; 0x64
 8003e88:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	462b      	mov	r3, r5
 8003e90:	f04f 0000 	mov.w	r0, #0
 8003e94:	f04f 0100 	mov.w	r1, #0
 8003e98:	0159      	lsls	r1, r3, #5
 8003e9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e9e:	0150      	lsls	r0, r2, #5
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	1a51      	subs	r1, r2, r1
 8003ea8:	61b9      	str	r1, [r7, #24]
 8003eaa:	4629      	mov	r1, r5
 8003eac:	eb63 0301 	sbc.w	r3, r3, r1
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ebe:	4659      	mov	r1, fp
 8003ec0:	018b      	lsls	r3, r1, #6
 8003ec2:	4651      	mov	r1, sl
 8003ec4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ec8:	4651      	mov	r1, sl
 8003eca:	018a      	lsls	r2, r1, #6
 8003ecc:	4651      	mov	r1, sl
 8003ece:	ebb2 0801 	subs.w	r8, r2, r1
 8003ed2:	4659      	mov	r1, fp
 8003ed4:	eb63 0901 	sbc.w	r9, r3, r1
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ee4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ee8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eec:	4690      	mov	r8, r2
 8003eee:	4699      	mov	r9, r3
 8003ef0:	4623      	mov	r3, r4
 8003ef2:	eb18 0303 	adds.w	r3, r8, r3
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	462b      	mov	r3, r5
 8003efa:	eb49 0303 	adc.w	r3, r9, r3
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	024b      	lsls	r3, r1, #9
 8003f10:	4621      	mov	r1, r4
 8003f12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f16:	4621      	mov	r1, r4
 8003f18:	024a      	lsls	r2, r1, #9
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f22:	2200      	movs	r2, #0
 8003f24:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f26:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f2c:	f7fc f96a 	bl	8000204 <__aeabi_uldivmod>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4613      	mov	r3, r2
 8003f36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f3a:	e065      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x420>
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f48:	4b3d      	ldr	r3, [pc, #244]	; (8004040 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	2200      	movs	r2, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	4611      	mov	r1, r2
 8003f54:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f58:	653b      	str	r3, [r7, #80]	; 0x50
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f5e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f62:	4642      	mov	r2, r8
 8003f64:	464b      	mov	r3, r9
 8003f66:	f04f 0000 	mov.w	r0, #0
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	0159      	lsls	r1, r3, #5
 8003f70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f74:	0150      	lsls	r0, r2, #5
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4641      	mov	r1, r8
 8003f7c:	1a51      	subs	r1, r2, r1
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	4649      	mov	r1, r9
 8003f82:	eb63 0301 	sbc.w	r3, r3, r1
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f94:	4659      	mov	r1, fp
 8003f96:	018b      	lsls	r3, r1, #6
 8003f98:	4651      	mov	r1, sl
 8003f9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f9e:	4651      	mov	r1, sl
 8003fa0:	018a      	lsls	r2, r1, #6
 8003fa2:	4651      	mov	r1, sl
 8003fa4:	1a54      	subs	r4, r2, r1
 8003fa6:	4659      	mov	r1, fp
 8003fa8:	eb63 0501 	sbc.w	r5, r3, r1
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	00eb      	lsls	r3, r5, #3
 8003fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fba:	00e2      	lsls	r2, r4, #3
 8003fbc:	4614      	mov	r4, r2
 8003fbe:	461d      	mov	r5, r3
 8003fc0:	4643      	mov	r3, r8
 8003fc2:	18e3      	adds	r3, r4, r3
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	eb45 0303 	adc.w	r3, r5, r3
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fda:	4629      	mov	r1, r5
 8003fdc:	028b      	lsls	r3, r1, #10
 8003fde:	4621      	mov	r1, r4
 8003fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	028a      	lsls	r2, r1, #10
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ff6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ffa:	f7fc f903 	bl	8000204 <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4613      	mov	r3, r2
 8004004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004008:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <HAL_RCC_GetSysClockFreq+0x458>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	0f1b      	lsrs	r3, r3, #28
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800401a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004026:	e003      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_RCC_GetSysClockFreq+0x45c>)
 800402a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800402e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004034:	4618      	mov	r0, r3
 8004036:	37b8      	adds	r7, #184	; 0xb8
 8004038:	46bd      	mov	sp, r7
 800403a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800403e:	bf00      	nop
 8004040:	40023800 	.word	0x40023800
 8004044:	00f42400 	.word	0x00f42400

08004048 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e28d      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 8083 	beq.w	800416e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004068:	4b94      	ldr	r3, [pc, #592]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 030c 	and.w	r3, r3, #12
 8004070:	2b04      	cmp	r3, #4
 8004072:	d019      	beq.n	80040a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004074:	4b91      	ldr	r3, [pc, #580]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800407c:	2b08      	cmp	r3, #8
 800407e:	d106      	bne.n	800408e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004080:	4b8e      	ldr	r3, [pc, #568]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800408c:	d00c      	beq.n	80040a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800408e:	4b8b      	ldr	r3, [pc, #556]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d112      	bne.n	80040c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800409a:	4b88      	ldr	r3, [pc, #544]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a6:	d10b      	bne.n	80040c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a8:	4b84      	ldr	r3, [pc, #528]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d05b      	beq.n	800416c <HAL_RCC_OscConfig+0x124>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d157      	bne.n	800416c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e25a      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c8:	d106      	bne.n	80040d8 <HAL_RCC_OscConfig+0x90>
 80040ca:	4b7c      	ldr	r3, [pc, #496]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7b      	ldr	r2, [pc, #492]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e01d      	b.n	8004114 <HAL_RCC_OscConfig+0xcc>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0xb4>
 80040e2:	4b76      	ldr	r3, [pc, #472]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a75      	ldr	r2, [pc, #468]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80040e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b73      	ldr	r3, [pc, #460]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a72      	ldr	r2, [pc, #456]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e00b      	b.n	8004114 <HAL_RCC_OscConfig+0xcc>
 80040fc:	4b6f      	ldr	r3, [pc, #444]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a6e      	ldr	r2, [pc, #440]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 8004102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	4b6c      	ldr	r3, [pc, #432]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a6b      	ldr	r2, [pc, #428]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 800410e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d013      	beq.n	8004144 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fc feee 	bl	8000efc <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004124:	f7fc feea 	bl	8000efc <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	; 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e21f      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004136:	4b61      	ldr	r3, [pc, #388]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0xdc>
 8004142:	e014      	b.n	800416e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fc feda 	bl	8000efc <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800414c:	f7fc fed6 	bl	8000efc <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e20b      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415e:	4b57      	ldr	r3, [pc, #348]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x104>
 800416a:	e000      	b.n	800416e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800416c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d06f      	beq.n	800425a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800417a:	4b50      	ldr	r3, [pc, #320]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b00      	cmp	r3, #0
 8004184:	d017      	beq.n	80041b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004186:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800418e:	2b08      	cmp	r3, #8
 8004190:	d105      	bne.n	800419e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004192:	4b4a      	ldr	r3, [pc, #296]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419e:	4b47      	ldr	r3, [pc, #284]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041a6:	2b0c      	cmp	r3, #12
 80041a8:	d11c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041aa:	4b44      	ldr	r3, [pc, #272]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d116      	bne.n	80041e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b6:	4b41      	ldr	r3, [pc, #260]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_RCC_OscConfig+0x186>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e1d3      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ce:	4b3b      	ldr	r3, [pc, #236]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4937      	ldr	r1, [pc, #220]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e2:	e03a      	b.n	800425a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ec:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <HAL_RCC_OscConfig+0x278>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fc fe83 	bl	8000efc <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fc fe7f 	bl	8000efc <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e1b4      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004218:	4b28      	ldr	r3, [pc, #160]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4925      	ldr	r1, [pc, #148]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]
 800422c:	e015      	b.n	800425a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <HAL_RCC_OscConfig+0x278>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fc fe62 	bl	8000efc <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800423c:	f7fc fe5e 	bl	8000efc <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e193      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d036      	beq.n	80042d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <HAL_RCC_OscConfig+0x27c>)
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fc fe42 	bl	8000efc <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800427c:	f7fc fe3e 	bl	8000efc <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e173      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_OscConfig+0x274>)
 8004290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x234>
 800429a:	e01b      	b.n	80042d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429c:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_RCC_OscConfig+0x27c>)
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7fc fe2b 	bl	8000efc <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a8:	e00e      	b.n	80042c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042aa:	f7fc fe27 	bl	8000efc <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d907      	bls.n	80042c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e15c      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
 80042bc:	40023800 	.word	0x40023800
 80042c0:	42470000 	.word	0x42470000
 80042c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c8:	4b8a      	ldr	r3, [pc, #552]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 80042ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1ea      	bne.n	80042aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8097 	beq.w	8004410 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e2:	2300      	movs	r3, #0
 80042e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e6:	4b83      	ldr	r3, [pc, #524]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10f      	bne.n	8004312 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	4b7f      	ldr	r3, [pc, #508]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	4a7e      	ldr	r2, [pc, #504]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004300:	6413      	str	r3, [r2, #64]	; 0x40
 8004302:	4b7c      	ldr	r3, [pc, #496]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004312:	4b79      	ldr	r3, [pc, #484]	; (80044f8 <HAL_RCC_OscConfig+0x4b0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d118      	bne.n	8004350 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800431e:	4b76      	ldr	r3, [pc, #472]	; (80044f8 <HAL_RCC_OscConfig+0x4b0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a75      	ldr	r2, [pc, #468]	; (80044f8 <HAL_RCC_OscConfig+0x4b0>)
 8004324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432a:	f7fc fde7 	bl	8000efc <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004332:	f7fc fde3 	bl	8000efc <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e118      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004344:	4b6c      	ldr	r3, [pc, #432]	; (80044f8 <HAL_RCC_OscConfig+0x4b0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0f0      	beq.n	8004332 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d106      	bne.n	8004366 <HAL_RCC_OscConfig+0x31e>
 8004358:	4b66      	ldr	r3, [pc, #408]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 800435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435c:	4a65      	ldr	r2, [pc, #404]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	6713      	str	r3, [r2, #112]	; 0x70
 8004364:	e01c      	b.n	80043a0 <HAL_RCC_OscConfig+0x358>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b05      	cmp	r3, #5
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0x340>
 800436e:	4b61      	ldr	r3, [pc, #388]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	4a60      	ldr	r2, [pc, #384]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 8004374:	f043 0304 	orr.w	r3, r3, #4
 8004378:	6713      	str	r3, [r2, #112]	; 0x70
 800437a:	4b5e      	ldr	r3, [pc, #376]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	4a5d      	ldr	r2, [pc, #372]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	6713      	str	r3, [r2, #112]	; 0x70
 8004386:	e00b      	b.n	80043a0 <HAL_RCC_OscConfig+0x358>
 8004388:	4b5a      	ldr	r3, [pc, #360]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	4a59      	ldr	r2, [pc, #356]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	6713      	str	r3, [r2, #112]	; 0x70
 8004394:	4b57      	ldr	r3, [pc, #348]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	4a56      	ldr	r2, [pc, #344]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 800439a:	f023 0304 	bic.w	r3, r3, #4
 800439e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d015      	beq.n	80043d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fc fda8 	bl	8000efc <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b0:	f7fc fda4 	bl	8000efc <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e0d7      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c6:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0ee      	beq.n	80043b0 <HAL_RCC_OscConfig+0x368>
 80043d2:	e014      	b.n	80043fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d4:	f7fc fd92 	bl	8000efc <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043da:	e00a      	b.n	80043f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043dc:	f7fc fd8e 	bl	8000efc <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e0c1      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f2:	4b40      	ldr	r3, [pc, #256]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1ee      	bne.n	80043dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d105      	bne.n	8004410 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004404:	4b3b      	ldr	r3, [pc, #236]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	4a3a      	ldr	r2, [pc, #232]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 800440a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800440e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80ad 	beq.w	8004574 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800441a:	4b36      	ldr	r3, [pc, #216]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b08      	cmp	r3, #8
 8004424:	d060      	beq.n	80044e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d145      	bne.n	80044ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b33      	ldr	r3, [pc, #204]	; (80044fc <HAL_RCC_OscConfig+0x4b4>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fc fd62 	bl	8000efc <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443c:	f7fc fd5e 	bl	8000efc <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e093      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444e:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	019b      	lsls	r3, r3, #6
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	3b01      	subs	r3, #1
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	061b      	lsls	r3, r3, #24
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	071b      	lsls	r3, r3, #28
 8004486:	491b      	ldr	r1, [pc, #108]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 8004488:	4313      	orrs	r3, r2
 800448a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800448c:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCC_OscConfig+0x4b4>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004492:	f7fc fd33 	bl	8000efc <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449a:	f7fc fd2f 	bl	8000efc <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e064      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ac:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x452>
 80044b8:	e05c      	b.n	8004574 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b10      	ldr	r3, [pc, #64]	; (80044fc <HAL_RCC_OscConfig+0x4b4>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fc fd1c 	bl	8000efc <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c8:	f7fc fd18 	bl	8000efc <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e04d      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x480>
 80044e6:	e045      	b.n	8004574 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d107      	bne.n	8004500 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e040      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40007000 	.word	0x40007000
 80044fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004500:	4b1f      	ldr	r3, [pc, #124]	; (8004580 <HAL_RCC_OscConfig+0x538>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d030      	beq.n	8004570 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d129      	bne.n	8004570 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d122      	bne.n	8004570 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004538:	4293      	cmp	r3, r2
 800453a:	d119      	bne.n	8004570 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	3b01      	subs	r3, #1
 800454a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d10f      	bne.n	8004570 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d107      	bne.n	8004570 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800

08004584 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e07b      	b.n	800468e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	d108      	bne.n	80045b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a6:	d009      	beq.n	80045bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	61da      	str	r2, [r3, #28]
 80045ae:	e005      	b.n	80045bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc fb0a 	bl	8000bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	ea42 0103 	orr.w	r1, r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	f003 0104 	and.w	r1, r3, #4
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f003 0210 	and.w	r2, r3, #16
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800467c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e03f      	b.n	8004728 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fc fadf 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2224      	movs	r2, #36	; 0x24
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f828 	bl	8004730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800470e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004734:	b0c0      	sub	sp, #256	; 0x100
 8004736:	af00      	add	r7, sp, #0
 8004738:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	68d9      	ldr	r1, [r3, #12]
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	ea40 0301 	orr.w	r3, r0, r1
 8004758:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800475a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	431a      	orrs	r2, r3
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	431a      	orrs	r2, r3
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004788:	f021 010c 	bic.w	r1, r1, #12
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004796:	430b      	orrs	r3, r1
 8004798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047aa:	6999      	ldr	r1, [r3, #24]
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	ea40 0301 	orr.w	r3, r0, r1
 80047b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b8f      	ldr	r3, [pc, #572]	; (80049fc <UART_SetConfig+0x2cc>)
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d005      	beq.n	80047d0 <UART_SetConfig+0xa0>
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b8d      	ldr	r3, [pc, #564]	; (8004a00 <UART_SetConfig+0x2d0>)
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d104      	bne.n	80047da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047d0:	f7fe fecc 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 80047d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047d8:	e003      	b.n	80047e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047da:	f7fe feb3 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 80047de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ec:	f040 810c 	bne.w	8004a08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004802:	4622      	mov	r2, r4
 8004804:	462b      	mov	r3, r5
 8004806:	1891      	adds	r1, r2, r2
 8004808:	65b9      	str	r1, [r7, #88]	; 0x58
 800480a:	415b      	adcs	r3, r3
 800480c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800480e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004812:	4621      	mov	r1, r4
 8004814:	eb12 0801 	adds.w	r8, r2, r1
 8004818:	4629      	mov	r1, r5
 800481a:	eb43 0901 	adc.w	r9, r3, r1
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800482a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800482e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004832:	4690      	mov	r8, r2
 8004834:	4699      	mov	r9, r3
 8004836:	4623      	mov	r3, r4
 8004838:	eb18 0303 	adds.w	r3, r8, r3
 800483c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004840:	462b      	mov	r3, r5
 8004842:	eb49 0303 	adc.w	r3, r9, r3
 8004846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004856:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800485a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800485e:	460b      	mov	r3, r1
 8004860:	18db      	adds	r3, r3, r3
 8004862:	653b      	str	r3, [r7, #80]	; 0x50
 8004864:	4613      	mov	r3, r2
 8004866:	eb42 0303 	adc.w	r3, r2, r3
 800486a:	657b      	str	r3, [r7, #84]	; 0x54
 800486c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004870:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004874:	f7fb fcc6 	bl	8000204 <__aeabi_uldivmod>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4b61      	ldr	r3, [pc, #388]	; (8004a04 <UART_SetConfig+0x2d4>)
 800487e:	fba3 2302 	umull	r2, r3, r3, r2
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	011c      	lsls	r4, r3, #4
 8004886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004890:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004894:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004898:	4642      	mov	r2, r8
 800489a:	464b      	mov	r3, r9
 800489c:	1891      	adds	r1, r2, r2
 800489e:	64b9      	str	r1, [r7, #72]	; 0x48
 80048a0:	415b      	adcs	r3, r3
 80048a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048a8:	4641      	mov	r1, r8
 80048aa:	eb12 0a01 	adds.w	sl, r2, r1
 80048ae:	4649      	mov	r1, r9
 80048b0:	eb43 0b01 	adc.w	fp, r3, r1
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048c8:	4692      	mov	sl, r2
 80048ca:	469b      	mov	fp, r3
 80048cc:	4643      	mov	r3, r8
 80048ce:	eb1a 0303 	adds.w	r3, sl, r3
 80048d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048d6:	464b      	mov	r3, r9
 80048d8:	eb4b 0303 	adc.w	r3, fp, r3
 80048dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048f4:	460b      	mov	r3, r1
 80048f6:	18db      	adds	r3, r3, r3
 80048f8:	643b      	str	r3, [r7, #64]	; 0x40
 80048fa:	4613      	mov	r3, r2
 80048fc:	eb42 0303 	adc.w	r3, r2, r3
 8004900:	647b      	str	r3, [r7, #68]	; 0x44
 8004902:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004906:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800490a:	f7fb fc7b 	bl	8000204 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4611      	mov	r1, r2
 8004914:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <UART_SetConfig+0x2d4>)
 8004916:	fba3 2301 	umull	r2, r3, r3, r1
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	2264      	movs	r2, #100	; 0x64
 800491e:	fb02 f303 	mul.w	r3, r2, r3
 8004922:	1acb      	subs	r3, r1, r3
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800492a:	4b36      	ldr	r3, [pc, #216]	; (8004a04 <UART_SetConfig+0x2d4>)
 800492c:	fba3 2302 	umull	r2, r3, r3, r2
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004938:	441c      	add	r4, r3
 800493a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800493e:	2200      	movs	r2, #0
 8004940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004944:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004948:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800494c:	4642      	mov	r2, r8
 800494e:	464b      	mov	r3, r9
 8004950:	1891      	adds	r1, r2, r2
 8004952:	63b9      	str	r1, [r7, #56]	; 0x38
 8004954:	415b      	adcs	r3, r3
 8004956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800495c:	4641      	mov	r1, r8
 800495e:	1851      	adds	r1, r2, r1
 8004960:	6339      	str	r1, [r7, #48]	; 0x30
 8004962:	4649      	mov	r1, r9
 8004964:	414b      	adcs	r3, r1
 8004966:	637b      	str	r3, [r7, #52]	; 0x34
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004974:	4659      	mov	r1, fp
 8004976:	00cb      	lsls	r3, r1, #3
 8004978:	4651      	mov	r1, sl
 800497a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800497e:	4651      	mov	r1, sl
 8004980:	00ca      	lsls	r2, r1, #3
 8004982:	4610      	mov	r0, r2
 8004984:	4619      	mov	r1, r3
 8004986:	4603      	mov	r3, r0
 8004988:	4642      	mov	r2, r8
 800498a:	189b      	adds	r3, r3, r2
 800498c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004990:	464b      	mov	r3, r9
 8004992:	460a      	mov	r2, r1
 8004994:	eb42 0303 	adc.w	r3, r2, r3
 8004998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049b0:	460b      	mov	r3, r1
 80049b2:	18db      	adds	r3, r3, r3
 80049b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049b6:	4613      	mov	r3, r2
 80049b8:	eb42 0303 	adc.w	r3, r2, r3
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049c6:	f7fb fc1d 	bl	8000204 <__aeabi_uldivmod>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <UART_SetConfig+0x2d4>)
 80049d0:	fba3 1302 	umull	r1, r3, r3, r2
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	2164      	movs	r1, #100	; 0x64
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	3332      	adds	r3, #50	; 0x32
 80049e2:	4a08      	ldr	r2, [pc, #32]	; (8004a04 <UART_SetConfig+0x2d4>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	f003 0207 	and.w	r2, r3, #7
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4422      	add	r2, r4
 80049f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049f8:	e106      	b.n	8004c08 <UART_SetConfig+0x4d8>
 80049fa:	bf00      	nop
 80049fc:	40011000 	.word	0x40011000
 8004a00:	40011400 	.word	0x40011400
 8004a04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a1a:	4642      	mov	r2, r8
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	1891      	adds	r1, r2, r2
 8004a20:	6239      	str	r1, [r7, #32]
 8004a22:	415b      	adcs	r3, r3
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
 8004a26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a2a:	4641      	mov	r1, r8
 8004a2c:	1854      	adds	r4, r2, r1
 8004a2e:	4649      	mov	r1, r9
 8004a30:	eb43 0501 	adc.w	r5, r3, r1
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	00eb      	lsls	r3, r5, #3
 8004a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a42:	00e2      	lsls	r2, r4, #3
 8004a44:	4614      	mov	r4, r2
 8004a46:	461d      	mov	r5, r3
 8004a48:	4643      	mov	r3, r8
 8004a4a:	18e3      	adds	r3, r4, r3
 8004a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a50:	464b      	mov	r3, r9
 8004a52:	eb45 0303 	adc.w	r3, r5, r3
 8004a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a76:	4629      	mov	r1, r5
 8004a78:	008b      	lsls	r3, r1, #2
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a80:	4621      	mov	r1, r4
 8004a82:	008a      	lsls	r2, r1, #2
 8004a84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a88:	f7fb fbbc 	bl	8000204 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4b60      	ldr	r3, [pc, #384]	; (8004c14 <UART_SetConfig+0x4e4>)
 8004a92:	fba3 2302 	umull	r2, r3, r3, r2
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	011c      	lsls	r4, r3, #4
 8004a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004aa4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004aa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004aac:	4642      	mov	r2, r8
 8004aae:	464b      	mov	r3, r9
 8004ab0:	1891      	adds	r1, r2, r2
 8004ab2:	61b9      	str	r1, [r7, #24]
 8004ab4:	415b      	adcs	r3, r3
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004abc:	4641      	mov	r1, r8
 8004abe:	1851      	adds	r1, r2, r1
 8004ac0:	6139      	str	r1, [r7, #16]
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	414b      	adcs	r3, r1
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ad4:	4659      	mov	r1, fp
 8004ad6:	00cb      	lsls	r3, r1, #3
 8004ad8:	4651      	mov	r1, sl
 8004ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ade:	4651      	mov	r1, sl
 8004ae0:	00ca      	lsls	r2, r1, #3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4642      	mov	r2, r8
 8004aea:	189b      	adds	r3, r3, r2
 8004aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004af0:	464b      	mov	r3, r9
 8004af2:	460a      	mov	r2, r1
 8004af4:	eb42 0303 	adc.w	r3, r2, r3
 8004af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b14:	4649      	mov	r1, r9
 8004b16:	008b      	lsls	r3, r1, #2
 8004b18:	4641      	mov	r1, r8
 8004b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b1e:	4641      	mov	r1, r8
 8004b20:	008a      	lsls	r2, r1, #2
 8004b22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b26:	f7fb fb6d 	bl	8000204 <__aeabi_uldivmod>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4b38      	ldr	r3, [pc, #224]	; (8004c14 <UART_SetConfig+0x4e4>)
 8004b32:	fba3 2301 	umull	r2, r3, r3, r1
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2264      	movs	r2, #100	; 0x64
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	1acb      	subs	r3, r1, r3
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	3332      	adds	r3, #50	; 0x32
 8004b44:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <UART_SetConfig+0x4e4>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b50:	441c      	add	r4, r3
 8004b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b56:	2200      	movs	r2, #0
 8004b58:	673b      	str	r3, [r7, #112]	; 0x70
 8004b5a:	677a      	str	r2, [r7, #116]	; 0x74
 8004b5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b60:	4642      	mov	r2, r8
 8004b62:	464b      	mov	r3, r9
 8004b64:	1891      	adds	r1, r2, r2
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	415b      	adcs	r3, r3
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b70:	4641      	mov	r1, r8
 8004b72:	1851      	adds	r1, r2, r1
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	4649      	mov	r1, r9
 8004b78:	414b      	adcs	r3, r1
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b88:	4659      	mov	r1, fp
 8004b8a:	00cb      	lsls	r3, r1, #3
 8004b8c:	4651      	mov	r1, sl
 8004b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b92:	4651      	mov	r1, sl
 8004b94:	00ca      	lsls	r2, r1, #3
 8004b96:	4610      	mov	r0, r2
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	460a      	mov	r2, r1
 8004ba6:	eb42 0303 	adc.w	r3, r2, r3
 8004baa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8004bb6:	667a      	str	r2, [r7, #100]	; 0x64
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	008b      	lsls	r3, r1, #2
 8004bc8:	4641      	mov	r1, r8
 8004bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bce:	4641      	mov	r1, r8
 8004bd0:	008a      	lsls	r2, r1, #2
 8004bd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bd6:	f7fb fb15 	bl	8000204 <__aeabi_uldivmod>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <UART_SetConfig+0x4e4>)
 8004be0:	fba3 1302 	umull	r1, r3, r3, r2
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	2164      	movs	r1, #100	; 0x64
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	3332      	adds	r3, #50	; 0x32
 8004bf2:	4a08      	ldr	r2, [pc, #32]	; (8004c14 <UART_SetConfig+0x4e4>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	f003 020f 	and.w	r2, r3, #15
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4422      	add	r2, r4
 8004c06:	609a      	str	r2, [r3, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c14:	51eb851f 	.word	0x51eb851f

08004c18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c18:	b084      	sub	sp, #16
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	f107 001c 	add.w	r0, r7, #28
 8004c26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d122      	bne.n	8004c76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d105      	bne.n	8004c6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f001 fbe8 	bl	8006440 <USB_CoreReset>
 8004c70:	4603      	mov	r3, r0
 8004c72:	73fb      	strb	r3, [r7, #15]
 8004c74:	e01a      	b.n	8004cac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 fbdc 	bl	8006440 <USB_CoreReset>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
 8004c9e:	e005      	b.n	8004cac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10b      	bne.n	8004cca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f043 0206 	orr.w	r2, r3, #6
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cd6:	b004      	add	sp, #16
 8004cd8:	4770      	bx	lr
	...

08004cdc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d165      	bne.n	8004dbc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a41      	ldr	r2, [pc, #260]	; (8004df8 <USB_SetTurnaroundTime+0x11c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d906      	bls.n	8004d06 <USB_SetTurnaroundTime+0x2a>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4a40      	ldr	r2, [pc, #256]	; (8004dfc <USB_SetTurnaroundTime+0x120>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d202      	bcs.n	8004d06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d00:	230f      	movs	r3, #15
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e062      	b.n	8004dcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4a3c      	ldr	r2, [pc, #240]	; (8004dfc <USB_SetTurnaroundTime+0x120>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d306      	bcc.n	8004d1c <USB_SetTurnaroundTime+0x40>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4a3b      	ldr	r2, [pc, #236]	; (8004e00 <USB_SetTurnaroundTime+0x124>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d202      	bcs.n	8004d1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d16:	230e      	movs	r3, #14
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	e057      	b.n	8004dcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4a38      	ldr	r2, [pc, #224]	; (8004e00 <USB_SetTurnaroundTime+0x124>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d306      	bcc.n	8004d32 <USB_SetTurnaroundTime+0x56>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4a37      	ldr	r2, [pc, #220]	; (8004e04 <USB_SetTurnaroundTime+0x128>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d202      	bcs.n	8004d32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d2c:	230d      	movs	r3, #13
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	e04c      	b.n	8004dcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4a33      	ldr	r2, [pc, #204]	; (8004e04 <USB_SetTurnaroundTime+0x128>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d306      	bcc.n	8004d48 <USB_SetTurnaroundTime+0x6c>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4a32      	ldr	r2, [pc, #200]	; (8004e08 <USB_SetTurnaroundTime+0x12c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d802      	bhi.n	8004d48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d42:	230c      	movs	r3, #12
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	e041      	b.n	8004dcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4a2f      	ldr	r2, [pc, #188]	; (8004e08 <USB_SetTurnaroundTime+0x12c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d906      	bls.n	8004d5e <USB_SetTurnaroundTime+0x82>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4a2e      	ldr	r2, [pc, #184]	; (8004e0c <USB_SetTurnaroundTime+0x130>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d802      	bhi.n	8004d5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d58:	230b      	movs	r3, #11
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e036      	b.n	8004dcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4a2a      	ldr	r2, [pc, #168]	; (8004e0c <USB_SetTurnaroundTime+0x130>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d906      	bls.n	8004d74 <USB_SetTurnaroundTime+0x98>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4a29      	ldr	r2, [pc, #164]	; (8004e10 <USB_SetTurnaroundTime+0x134>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d802      	bhi.n	8004d74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d6e:	230a      	movs	r3, #10
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	e02b      	b.n	8004dcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <USB_SetTurnaroundTime+0x134>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d906      	bls.n	8004d8a <USB_SetTurnaroundTime+0xae>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4a25      	ldr	r2, [pc, #148]	; (8004e14 <USB_SetTurnaroundTime+0x138>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d202      	bcs.n	8004d8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d84:	2309      	movs	r3, #9
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e020      	b.n	8004dcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4a21      	ldr	r2, [pc, #132]	; (8004e14 <USB_SetTurnaroundTime+0x138>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d306      	bcc.n	8004da0 <USB_SetTurnaroundTime+0xc4>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <USB_SetTurnaroundTime+0x13c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d802      	bhi.n	8004da0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e015      	b.n	8004dcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <USB_SetTurnaroundTime+0x13c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d906      	bls.n	8004db6 <USB_SetTurnaroundTime+0xda>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4a1c      	ldr	r2, [pc, #112]	; (8004e1c <USB_SetTurnaroundTime+0x140>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d202      	bcs.n	8004db6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004db0:	2307      	movs	r3, #7
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e00a      	b.n	8004dcc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004db6:	2306      	movs	r3, #6
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	e007      	b.n	8004dcc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004dc2:	2309      	movs	r3, #9
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e001      	b.n	8004dcc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004dc8:	2309      	movs	r3, #9
 8004dca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	029b      	lsls	r3, r3, #10
 8004de0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004de4:	431a      	orrs	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	00d8acbf 	.word	0x00d8acbf
 8004dfc:	00e4e1c0 	.word	0x00e4e1c0
 8004e00:	00f42400 	.word	0x00f42400
 8004e04:	01067380 	.word	0x01067380
 8004e08:	011a499f 	.word	0x011a499f
 8004e0c:	01312cff 	.word	0x01312cff
 8004e10:	014ca43f 	.word	0x014ca43f
 8004e14:	016e3600 	.word	0x016e3600
 8004e18:	01a6ab1f 	.word	0x01a6ab1f
 8004e1c:	01e84800 	.word	0x01e84800

08004e20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f043 0201 	orr.w	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f023 0201 	bic.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d115      	bne.n	8004eb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e92:	2001      	movs	r0, #1
 8004e94:	f7fc f83e 	bl	8000f14 <HAL_Delay>
      ms++;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f001 fa3f 	bl	8006322 <USB_GetMode>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d01e      	beq.n	8004ee8 <USB_SetCurrentMode+0x84>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b31      	cmp	r3, #49	; 0x31
 8004eae:	d9f0      	bls.n	8004e92 <USB_SetCurrentMode+0x2e>
 8004eb0:	e01a      	b.n	8004ee8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004eb2:	78fb      	ldrb	r3, [r7, #3]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d115      	bne.n	8004ee4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	f7fc f825 	bl	8000f14 <HAL_Delay>
      ms++;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f001 fa26 	bl	8006322 <USB_GetMode>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <USB_SetCurrentMode+0x84>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b31      	cmp	r3, #49	; 0x31
 8004ee0:	d9f0      	bls.n	8004ec4 <USB_SetCurrentMode+0x60>
 8004ee2:	e001      	b.n	8004ee8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e005      	b.n	8004ef4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b32      	cmp	r3, #50	; 0x32
 8004eec:	d101      	bne.n	8004ef2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004efc:	b084      	sub	sp, #16
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b086      	sub	sp, #24
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	e009      	b.n	8004f30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	3340      	adds	r3, #64	; 0x40
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	2200      	movs	r2, #0
 8004f28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b0e      	cmp	r3, #14
 8004f34:	d9f2      	bls.n	8004f1c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d11c      	bne.n	8004f76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f4a:	f043 0302 	orr.w	r3, r3, #2
 8004f4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	e005      	b.n	8004f82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f88:	461a      	mov	r2, r3
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f94:	4619      	mov	r1, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	680b      	ldr	r3, [r1, #0]
 8004fa0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d10c      	bne.n	8004fc2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d104      	bne.n	8004fb8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fae:	2100      	movs	r1, #0
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f965 	bl	8005280 <USB_SetDevSpeed>
 8004fb6:	e008      	b.n	8004fca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fb8:	2101      	movs	r1, #1
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f960 	bl	8005280 <USB_SetDevSpeed>
 8004fc0:	e003      	b.n	8004fca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fc2:	2103      	movs	r1, #3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f95b 	bl	8005280 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fca:	2110      	movs	r1, #16
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f8f3 	bl	80051b8 <USB_FlushTxFifo>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f91f 	bl	8005220 <USB_FlushRxFifo>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffe:	461a      	mov	r2, r3
 8005000:	2300      	movs	r3, #0
 8005002:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500a:	461a      	mov	r2, r3
 800500c:	2300      	movs	r3, #0
 800500e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	e043      	b.n	800509e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800502c:	d118      	bne.n	8005060 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	461a      	mov	r2, r3
 8005042:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	e013      	b.n	8005072 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	461a      	mov	r2, r3
 8005058:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e008      	b.n	8005072 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	461a      	mov	r2, r3
 800506e:	2300      	movs	r3, #0
 8005070:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507e:	461a      	mov	r2, r3
 8005080:	2300      	movs	r3, #0
 8005082:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	461a      	mov	r2, r3
 8005092:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005096:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	3301      	adds	r3, #1
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d3b7      	bcc.n	8005016 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	e043      	b.n	8005134 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050c2:	d118      	bne.n	80050f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d6:	461a      	mov	r2, r3
 80050d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e013      	b.n	8005108 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	461a      	mov	r2, r3
 80050ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	e008      	b.n	8005108 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005102:	461a      	mov	r2, r3
 8005104:	2300      	movs	r3, #0
 8005106:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005126:	461a      	mov	r2, r3
 8005128:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800512c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	3301      	adds	r3, #1
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	d3b7      	bcc.n	80050ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800514a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800514e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800515c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	2b00      	cmp	r3, #0
 8005162:	d105      	bne.n	8005170 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f043 0210 	orr.w	r2, r3, #16
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	699a      	ldr	r2, [r3, #24]
 8005174:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <USB_DevInit+0x2b8>)
 8005176:	4313      	orrs	r3, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800517c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f043 0208 	orr.w	r2, r3, #8
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800518e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d107      	bne.n	80051a4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800519c:	f043 0304 	orr.w	r3, r3, #4
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051b0:	b004      	add	sp, #16
 80051b2:	4770      	bx	lr
 80051b4:	803c3800 	.word	0x803c3800

080051b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3301      	adds	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <USB_FlushTxFifo+0x64>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e01b      	b.n	8005210 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	daf2      	bge.n	80051c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	019b      	lsls	r3, r3, #6
 80051e8:	f043 0220 	orr.w	r2, r3, #32
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3301      	adds	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a08      	ldr	r2, [pc, #32]	; (800521c <USB_FlushTxFifo+0x64>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e006      	b.n	8005210 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b20      	cmp	r3, #32
 800520c:	d0f0      	beq.n	80051f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	00030d40 	.word	0x00030d40

08005220 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3301      	adds	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4a11      	ldr	r2, [pc, #68]	; (800527c <USB_FlushRxFifo+0x5c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d901      	bls.n	800523e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e018      	b.n	8005270 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	daf2      	bge.n	800522c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2210      	movs	r2, #16
 800524e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3301      	adds	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a08      	ldr	r2, [pc, #32]	; (800527c <USB_FlushRxFifo+0x5c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e006      	b.n	8005270 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b10      	cmp	r3, #16
 800526c:	d0f0      	beq.n	8005250 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	00030d40 	.word	0x00030d40

08005280 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	68f9      	ldr	r1, [r7, #12]
 800529c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a0:	4313      	orrs	r3, r2
 80052a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b087      	sub	sp, #28
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0306 	and.w	r3, r3, #6
 80052ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d102      	bne.n	80052d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052d2:	2300      	movs	r3, #0
 80052d4:	75fb      	strb	r3, [r7, #23]
 80052d6:	e00a      	b.n	80052ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d002      	beq.n	80052e4 <USB_GetDevSpeed+0x32>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b06      	cmp	r3, #6
 80052e2:	d102      	bne.n	80052ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052e4:	2302      	movs	r3, #2
 80052e6:	75fb      	strb	r3, [r7, #23]
 80052e8:	e001      	b.n	80052ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052ea:	230f      	movs	r3, #15
 80052ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	785b      	ldrb	r3, [r3, #1]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d13a      	bne.n	800538e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	2101      	movs	r1, #1
 800532a:	fa01 f303 	lsl.w	r3, r1, r3
 800532e:	b29b      	uxth	r3, r3
 8005330:	68f9      	ldr	r1, [r7, #12]
 8005332:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005336:	4313      	orrs	r3, r2
 8005338:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d155      	bne.n	80053fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	791b      	ldrb	r3, [r3, #4]
 800536a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800536c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	059b      	lsls	r3, r3, #22
 8005372:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005374:	4313      	orrs	r3, r2
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	e036      	b.n	80053fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005394:	69da      	ldr	r2, [r3, #28]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	2101      	movs	r1, #1
 80053a0:	fa01 f303 	lsl.w	r3, r1, r3
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ac:	4313      	orrs	r3, r2
 80053ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d11a      	bne.n	80053fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	791b      	ldrb	r3, [r3, #4]
 80053e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053e2:	430b      	orrs	r3, r1
 80053e4:	4313      	orrs	r3, r2
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	785b      	ldrb	r3, [r3, #1]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d161      	bne.n	80054ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800543a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800543e:	d11f      	bne.n	8005480 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800545a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800545e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800547e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f303 	lsl.w	r3, r1, r3
 8005496:	b29b      	uxth	r3, r3
 8005498:	43db      	mvns	r3, r3
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a0:	4013      	ands	r3, r2
 80054a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	f003 030f 	and.w	r3, r3, #15
 80054b4:	2101      	movs	r1, #1
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	43db      	mvns	r3, r3
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c4:	4013      	ands	r3, r2
 80054c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	0159      	lsls	r1, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	440b      	add	r3, r1
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	4619      	mov	r1, r3
 80054e4:	4b35      	ldr	r3, [pc, #212]	; (80055bc <USB_DeactivateEndpoint+0x1b0>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	600b      	str	r3, [r1, #0]
 80054ea:	e060      	b.n	80055ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005502:	d11f      	bne.n	8005544 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005522:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005542:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	2101      	movs	r1, #1
 8005556:	fa01 f303 	lsl.w	r3, r1, r3
 800555a:	041b      	lsls	r3, r3, #16
 800555c:	43db      	mvns	r3, r3
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005564:	4013      	ands	r3, r2
 8005566:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	2101      	movs	r1, #1
 800557a:	fa01 f303 	lsl.w	r3, r1, r3
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	43db      	mvns	r3, r3
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005588:	4013      	ands	r3, r2
 800558a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	0159      	lsls	r1, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	440b      	add	r3, r1
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	4619      	mov	r1, r3
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <USB_DeactivateEndpoint+0x1b4>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	ec337800 	.word	0xec337800
 80055c0:	eff37800 	.word	0xeff37800

080055c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	; 0x28
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	f040 815c 	bne.w	800589e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d132      	bne.n	8005654 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	440a      	add	r2, r1
 8005604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005608:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800560c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564c:	0cdb      	lsrs	r3, r3, #19
 800564e:	04db      	lsls	r3, r3, #19
 8005650:	6113      	str	r3, [r2, #16]
 8005652:	e074      	b.n	800573e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566e:	0cdb      	lsrs	r3, r3, #19
 8005670:	04db      	lsls	r3, r3, #19
 8005672:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005692:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	6999      	ldr	r1, [r3, #24]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	440b      	add	r3, r1
 80056b0:	1e59      	subs	r1, r3, #1
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056bc:	4b9d      	ldr	r3, [pc, #628]	; (8005934 <USB_EPStartXfer+0x370>)
 80056be:	400b      	ands	r3, r1
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	0148      	lsls	r0, r1, #5
 80056c4:	69f9      	ldr	r1, [r7, #28]
 80056c6:	4401      	add	r1, r0
 80056c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056cc:	4313      	orrs	r3, r2
 80056ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e6:	69b9      	ldr	r1, [r7, #24]
 80056e8:	0148      	lsls	r0, r1, #5
 80056ea:	69f9      	ldr	r1, [r7, #28]
 80056ec:	4401      	add	r1, r0
 80056ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056f2:	4313      	orrs	r3, r2
 80056f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	791b      	ldrb	r3, [r3, #4]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d11f      	bne.n	800573e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005718:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800571c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800573c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d14b      	bne.n	80057dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d009      	beq.n	8005760 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	461a      	mov	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	791b      	ldrb	r3, [r3, #4]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d128      	bne.n	80057ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d110      	bne.n	800579a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	e00f      	b.n	80057ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	e133      	b.n	8005a44 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	791b      	ldrb	r3, [r3, #4]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d015      	beq.n	8005830 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 811b 	beq.w	8005a44 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	2101      	movs	r1, #1
 8005820:	fa01 f303 	lsl.w	r3, r1, r3
 8005824:	69f9      	ldr	r1, [r7, #28]
 8005826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800582a:	4313      	orrs	r3, r2
 800582c:	634b      	str	r3, [r1, #52]	; 0x34
 800582e:	e109      	b.n	8005a44 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d110      	bne.n	8005862 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	e00f      	b.n	8005882 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	0151      	lsls	r1, r2, #5
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	440a      	add	r2, r1
 8005878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005880:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6919      	ldr	r1, [r3, #16]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	b298      	uxth	r0, r3
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	4603      	mov	r3, r0
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fade 	bl	8005e58 <USB_WritePacket>
 800589c:	e0d2      	b.n	8005a44 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	0151      	lsls	r1, r2, #5
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	440a      	add	r2, r1
 80058b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b8:	0cdb      	lsrs	r3, r3, #19
 80058ba:	04db      	lsls	r3, r3, #19
 80058bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d126      	bne.n	8005938 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005900:	69b9      	ldr	r1, [r7, #24]
 8005902:	0148      	lsls	r0, r1, #5
 8005904:	69f9      	ldr	r1, [r7, #28]
 8005906:	4401      	add	r1, r0
 8005908:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800590c:	4313      	orrs	r3, r2
 800590e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800592a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800592e:	6113      	str	r3, [r2, #16]
 8005930:	e03a      	b.n	80059a8 <USB_EPStartXfer+0x3e4>
 8005932:	bf00      	nop
 8005934:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	4413      	add	r3, r2
 8005942:	1e5a      	subs	r2, r3, #1
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	8afa      	ldrh	r2, [r7, #22]
 8005954:	fb03 f202 	mul.w	r2, r3, r2
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	8afb      	ldrh	r3, [r7, #22]
 800596c:	04d9      	lsls	r1, r3, #19
 800596e:	4b38      	ldr	r3, [pc, #224]	; (8005a50 <USB_EPStartXfer+0x48c>)
 8005970:	400b      	ands	r3, r1
 8005972:	69b9      	ldr	r1, [r7, #24]
 8005974:	0148      	lsls	r0, r1, #5
 8005976:	69f9      	ldr	r1, [r7, #28]
 8005978:	4401      	add	r1, r0
 800597a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800597e:	4313      	orrs	r3, r2
 8005980:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005998:	69b9      	ldr	r1, [r7, #24]
 800599a:	0148      	lsls	r0, r1, #5
 800599c:	69f9      	ldr	r1, [r7, #28]
 800599e:	4401      	add	r1, r0
 80059a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059a4:	4313      	orrs	r3, r2
 80059a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d10d      	bne.n	80059ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6919      	ldr	r1, [r3, #16]
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	460a      	mov	r2, r1
 80059c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	791b      	ldrb	r3, [r3, #4]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d128      	bne.n	8005a24 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d110      	bne.n	8005a04 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	e00f      	b.n	8005a24 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	0151      	lsls	r1, r2, #5
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	440a      	add	r2, r1
 8005a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	0151      	lsls	r1, r2, #5
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	440a      	add	r2, r1
 8005a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	1ff80000 	.word	0x1ff80000

08005a54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	f040 80ce 	bne.w	8005c12 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d132      	bne.n	8005ae4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005abc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ac0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005adc:	0cdb      	lsrs	r3, r3, #19
 8005ade:	04db      	lsls	r3, r3, #19
 8005ae0:	6113      	str	r3, [r2, #16]
 8005ae2:	e04e      	b.n	8005b82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afe:	0cdb      	lsrs	r3, r3, #19
 8005b00:	04db      	lsls	r3, r3, #19
 8005b02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d903      	bls.n	8005b3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b72:	6939      	ldr	r1, [r7, #16]
 8005b74:	0148      	lsls	r0, r1, #5
 8005b76:	6979      	ldr	r1, [r7, #20]
 8005b78:	4401      	add	r1, r0
 8005b7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d11e      	bne.n	8005bc6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d009      	beq.n	8005ba4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	e097      	b.n	8005cf6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005be4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8083 	beq.w	8005cf6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	2101      	movs	r1, #1
 8005c02:	fa01 f303 	lsl.w	r3, r1, r3
 8005c06:	6979      	ldr	r1, [r7, #20]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	634b      	str	r3, [r1, #52]	; 0x34
 8005c10:	e071      	b.n	8005cf6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c2c:	0cdb      	lsrs	r3, r3, #19
 8005c2e:	04db      	lsls	r3, r3, #19
 8005c30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca4:	6939      	ldr	r1, [r7, #16]
 8005ca6:	0148      	lsls	r0, r1, #5
 8005ca8:	6979      	ldr	r1, [r7, #20]
 8005caa:	4401      	add	r1, r0
 8005cac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d10d      	bne.n	8005cd6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d009      	beq.n	8005cd6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6919      	ldr	r1, [r3, #16]
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	460a      	mov	r2, r1
 8005cd4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d14a      	bne.n	8005db8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d3a:	f040 8086 	bne.w	8005e4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d60:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d902      	bls.n	8005d9c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	75fb      	strb	r3, [r7, #23]
          break;
 8005d9a:	e056      	b.n	8005e4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db4:	d0e7      	beq.n	8005d86 <USB_EPStopXfer+0x82>
 8005db6:	e048      	b.n	8005e4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd0:	d13b      	bne.n	8005e4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	7812      	ldrb	r2, [r2, #0]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005df4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	7812      	ldrb	r2, [r2, #0]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d902      	bls.n	8005e30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e2e:	e00c      	b.n	8005e4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e48:	d0e7      	beq.n	8005e1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b089      	sub	sp, #36	; 0x24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4611      	mov	r1, r2
 8005e64:	461a      	mov	r2, r3
 8005e66:	460b      	mov	r3, r1
 8005e68:	71fb      	strb	r3, [r7, #7]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d123      	bne.n	8005ec6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e7e:	88bb      	ldrh	r3, [r7, #4]
 8005e80:	3303      	adds	r3, #3
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e86:	2300      	movs	r3, #0
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	e018      	b.n	8005ebe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	031a      	lsls	r2, r3, #12
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e98:	461a      	mov	r2, r3
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3e2      	bcc.n	8005e8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3724      	adds	r7, #36	; 0x24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b08b      	sub	sp, #44	; 0x2c
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	089b      	lsrs	r3, r3, #2
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005efa:	2300      	movs	r3, #0
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	e014      	b.n	8005f2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	3301      	adds	r3, #1
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	3301      	adds	r3, #1
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	3301      	adds	r3, #1
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	3301      	adds	r3, #1
 8005f28:	623b      	str	r3, [r7, #32]
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d3e6      	bcc.n	8005f00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f32:	8bfb      	ldrh	r3, [r7, #30]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01e      	beq.n	8005f76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f42:	461a      	mov	r2, r3
 8005f44:	f107 0310 	add.w	r3, r7, #16
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	701a      	strb	r2, [r3, #0]
      i++;
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	3301      	adds	r3, #1
 8005f62:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	3301      	adds	r3, #1
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f6a:	8bfb      	ldrh	r3, [r7, #30]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f70:	8bfb      	ldrh	r3, [r7, #30]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1ea      	bne.n	8005f4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	372c      	adds	r7, #44	; 0x2c
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d12c      	bne.n	8005ffa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	db12      	blt.n	8005fd8 <USB_EPSetStall+0x54>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00f      	beq.n	8005fd8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fd6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	e02b      	b.n	8006052 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	db12      	blt.n	8006032 <USB_EPSetStall+0xae>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00f      	beq.n	8006032 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006030:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006050:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d128      	bne.n	80060ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006096:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800609a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	791b      	ldrb	r3, [r3, #4]
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d003      	beq.n	80060ac <USB_EPClearStall+0x4c>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	791b      	ldrb	r3, [r3, #4]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d138      	bne.n	800611e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	e027      	b.n	800611e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	791b      	ldrb	r3, [r3, #4]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d003      	beq.n	80060fe <USB_EPClearStall+0x9e>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	791b      	ldrb	r3, [r3, #4]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d10f      	bne.n	800611e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800614a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800614e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006160:	68f9      	ldr	r1, [r7, #12]
 8006162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006166:	4313      	orrs	r3, r2
 8006168:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061a6:	f023 0302 	bic.w	r3, r3, #2
 80061aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061d4:	f023 0303 	bic.w	r3, r3, #3
 80061d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4013      	ands	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006214:	68fb      	ldr	r3, [r7, #12]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	4013      	ands	r3, r2
 8006244:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	0c1b      	lsrs	r3, r3, #16
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	4013      	ands	r3, r2
 8006278:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	b29b      	uxth	r3, r3
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	460b      	mov	r3, r1
 8006294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	4013      	ands	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062b8:	68bb      	ldr	r3, [r7, #8]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b087      	sub	sp, #28
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	fa22 f303 	lsr.w	r3, r2, r3
 80062f6:	01db      	lsls	r3, r3, #7
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4013      	ands	r3, r2
 8006312:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006314:	68bb      	ldr	r3, [r7, #8]
}
 8006316:	4618      	mov	r0, r3
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0301 	and.w	r3, r3, #1
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006358:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800635c:	f023 0307 	bic.w	r3, r3, #7
 8006360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	460b      	mov	r3, r1
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	333c      	adds	r3, #60	; 0x3c
 800639a:	3304      	adds	r3, #4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	4a26      	ldr	r2, [pc, #152]	; (800643c <USB_EP0_OutStart+0xb8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d90a      	bls.n	80063be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063b8:	d101      	bne.n	80063be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e037      	b.n	800642e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c4:	461a      	mov	r2, r3
 80063c6:	2300      	movs	r3, #0
 80063c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ec:	f043 0318 	orr.w	r3, r3, #24
 80063f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006400:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006404:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006406:	7afb      	ldrb	r3, [r7, #11]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d10f      	bne.n	800642c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006412:	461a      	mov	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006426:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800642a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	4f54300a 	.word	0x4f54300a

08006440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3301      	adds	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <USB_CoreReset+0x64>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d901      	bls.n	800645e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e01b      	b.n	8006496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	daf2      	bge.n	800644c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f043 0201 	orr.w	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3301      	adds	r3, #1
 800647a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <USB_CoreReset+0x64>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d901      	bls.n	8006488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e006      	b.n	8006496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b01      	cmp	r3, #1
 8006492:	d0f0      	beq.n	8006476 <USB_CoreReset+0x36>

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	00030d40 	.word	0x00030d40

080064a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80064b8:	f002 fcc8 	bl	8008e4c <USBD_static_malloc>
 80064bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	32b0      	adds	r2, #176	; 0xb0
 80064ce:	2100      	movs	r1, #0
 80064d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064d4:	2302      	movs	r3, #2
 80064d6:	e0d4      	b.n	8006682 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80064d8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80064dc:	2100      	movs	r1, #0
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f002 fcf8 	bl	8008ed4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	32b0      	adds	r2, #176	; 0xb0
 80064ee:	68f9      	ldr	r1, [r7, #12]
 80064f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	32b0      	adds	r2, #176	; 0xb0
 80064fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	7c1b      	ldrb	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d138      	bne.n	8006582 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006510:	4b5e      	ldr	r3, [pc, #376]	; (800668c <USBD_CDC_Init+0x1e4>)
 8006512:	7819      	ldrb	r1, [r3, #0]
 8006514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006518:	2202      	movs	r2, #2
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f002 fb25 	bl	8008b6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006520:	4b5a      	ldr	r3, [pc, #360]	; (800668c <USBD_CDC_Init+0x1e4>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	f003 020f 	and.w	r2, r3, #15
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	440b      	add	r3, r1
 8006534:	3324      	adds	r3, #36	; 0x24
 8006536:	2201      	movs	r2, #1
 8006538:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800653a:	4b55      	ldr	r3, [pc, #340]	; (8006690 <USBD_CDC_Init+0x1e8>)
 800653c:	7819      	ldrb	r1, [r3, #0]
 800653e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006542:	2202      	movs	r2, #2
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f002 fb10 	bl	8008b6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800654a:	4b51      	ldr	r3, [pc, #324]	; (8006690 <USBD_CDC_Init+0x1e8>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	f003 020f 	and.w	r2, r3, #15
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006562:	2201      	movs	r2, #1
 8006564:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006566:	4b4b      	ldr	r3, [pc, #300]	; (8006694 <USBD_CDC_Init+0x1ec>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	f003 020f 	and.w	r2, r3, #15
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	3326      	adds	r3, #38	; 0x26
 800657c:	2210      	movs	r2, #16
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	e035      	b.n	80065ee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006582:	4b42      	ldr	r3, [pc, #264]	; (800668c <USBD_CDC_Init+0x1e4>)
 8006584:	7819      	ldrb	r1, [r3, #0]
 8006586:	2340      	movs	r3, #64	; 0x40
 8006588:	2202      	movs	r2, #2
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f002 faed 	bl	8008b6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006590:	4b3e      	ldr	r3, [pc, #248]	; (800668c <USBD_CDC_Init+0x1e4>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f003 020f 	and.w	r2, r3, #15
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	3324      	adds	r3, #36	; 0x24
 80065a6:	2201      	movs	r2, #1
 80065a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065aa:	4b39      	ldr	r3, [pc, #228]	; (8006690 <USBD_CDC_Init+0x1e8>)
 80065ac:	7819      	ldrb	r1, [r3, #0]
 80065ae:	2340      	movs	r3, #64	; 0x40
 80065b0:	2202      	movs	r2, #2
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f002 fad9 	bl	8008b6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065b8:	4b35      	ldr	r3, [pc, #212]	; (8006690 <USBD_CDC_Init+0x1e8>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065d0:	2201      	movs	r2, #1
 80065d2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065d4:	4b2f      	ldr	r3, [pc, #188]	; (8006694 <USBD_CDC_Init+0x1ec>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 020f 	and.w	r2, r3, #15
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	3326      	adds	r3, #38	; 0x26
 80065ea:	2210      	movs	r2, #16
 80065ec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065ee:	4b29      	ldr	r3, [pc, #164]	; (8006694 <USBD_CDC_Init+0x1ec>)
 80065f0:	7819      	ldrb	r1, [r3, #0]
 80065f2:	2308      	movs	r3, #8
 80065f4:	2203      	movs	r2, #3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f002 fab7 	bl	8008b6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80065fc:	4b25      	ldr	r3, [pc, #148]	; (8006694 <USBD_CDC_Init+0x1ec>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 020f 	and.w	r2, r3, #15
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	440b      	add	r3, r1
 8006610:	3324      	adds	r3, #36	; 0x24
 8006612:	2201      	movs	r2, #1
 8006614:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	33b0      	adds	r3, #176	; 0xb0
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800664c:	2302      	movs	r3, #2
 800664e:	e018      	b.n	8006682 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	7c1b      	ldrb	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006658:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <USBD_CDC_Init+0x1e8>)
 800665a:	7819      	ldrb	r1, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f002 fb6e 	bl	8008d48 <USBD_LL_PrepareReceive>
 800666c:	e008      	b.n	8006680 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800666e:	4b08      	ldr	r3, [pc, #32]	; (8006690 <USBD_CDC_Init+0x1e8>)
 8006670:	7819      	ldrb	r1, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006678:	2340      	movs	r3, #64	; 0x40
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 fb64 	bl	8008d48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000093 	.word	0x20000093
 8006690:	20000094 	.word	0x20000094
 8006694:	20000095 	.word	0x20000095

08006698 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80066a4:	4b3a      	ldr	r3, [pc, #232]	; (8006790 <USBD_CDC_DeInit+0xf8>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f002 fa83 	bl	8008bb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80066b0:	4b37      	ldr	r3, [pc, #220]	; (8006790 <USBD_CDC_DeInit+0xf8>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f003 020f 	and.w	r2, r3, #15
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	3324      	adds	r3, #36	; 0x24
 80066c6:	2200      	movs	r2, #0
 80066c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80066ca:	4b32      	ldr	r3, [pc, #200]	; (8006794 <USBD_CDC_DeInit+0xfc>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f002 fa70 	bl	8008bb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80066d6:	4b2f      	ldr	r3, [pc, #188]	; (8006794 <USBD_CDC_DeInit+0xfc>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f003 020f 	and.w	r2, r3, #15
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066ee:	2200      	movs	r2, #0
 80066f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80066f2:	4b29      	ldr	r3, [pc, #164]	; (8006798 <USBD_CDC_DeInit+0x100>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f002 fa5c 	bl	8008bb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80066fe:	4b26      	ldr	r3, [pc, #152]	; (8006798 <USBD_CDC_DeInit+0x100>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	f003 020f 	and.w	r2, r3, #15
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	3324      	adds	r3, #36	; 0x24
 8006714:	2200      	movs	r2, #0
 8006716:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006718:	4b1f      	ldr	r3, [pc, #124]	; (8006798 <USBD_CDC_DeInit+0x100>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	f003 020f 	and.w	r2, r3, #15
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	3326      	adds	r3, #38	; 0x26
 800672e:	2200      	movs	r2, #0
 8006730:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	32b0      	adds	r2, #176	; 0xb0
 800673c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01f      	beq.n	8006784 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	33b0      	adds	r3, #176	; 0xb0
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	32b0      	adds	r2, #176	; 0xb0
 8006762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006766:	4618      	mov	r0, r3
 8006768:	f002 fb7e 	bl	8008e68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	32b0      	adds	r2, #176	; 0xb0
 8006776:	2100      	movs	r1, #0
 8006778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000093 	.word	0x20000093
 8006794:	20000094 	.word	0x20000094
 8006798:	20000095 	.word	0x20000095

0800679c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	32b0      	adds	r2, #176	; 0xb0
 80067b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e0bf      	b.n	800694c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d050      	beq.n	800687a <USBD_CDC_Setup+0xde>
 80067d8:	2b20      	cmp	r3, #32
 80067da:	f040 80af 	bne.w	800693c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	88db      	ldrh	r3, [r3, #6]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d03a      	beq.n	800685c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	b25b      	sxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	da1b      	bge.n	8006828 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	33b0      	adds	r3, #176	; 0xb0
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006806:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	88d2      	ldrh	r2, [r2, #6]
 800680c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	88db      	ldrh	r3, [r3, #6]
 8006812:	2b07      	cmp	r3, #7
 8006814:	bf28      	it	cs
 8006816:	2307      	movcs	r3, #7
 8006818:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	89fa      	ldrh	r2, [r7, #14]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fd6d 	bl	8008300 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006826:	e090      	b.n	800694a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	785a      	ldrb	r2, [r3, #1]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	88db      	ldrh	r3, [r3, #6]
 8006836:	2b3f      	cmp	r3, #63	; 0x3f
 8006838:	d803      	bhi.n	8006842 <USBD_CDC_Setup+0xa6>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	88db      	ldrh	r3, [r3, #6]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	e000      	b.n	8006844 <USBD_CDC_Setup+0xa8>
 8006842:	2240      	movs	r2, #64	; 0x40
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800684a:	6939      	ldr	r1, [r7, #16]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006852:	461a      	mov	r2, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 fd7f 	bl	8008358 <USBD_CtlPrepareRx>
      break;
 800685a:	e076      	b.n	800694a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	33b0      	adds	r3, #176	; 0xb0
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	7850      	ldrb	r0, [r2, #1]
 8006872:	2200      	movs	r2, #0
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	4798      	blx	r3
      break;
 8006878:	e067      	b.n	800694a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b0b      	cmp	r3, #11
 8006880:	d851      	bhi.n	8006926 <USBD_CDC_Setup+0x18a>
 8006882:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <USBD_CDC_Setup+0xec>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	080068b9 	.word	0x080068b9
 800688c:	08006935 	.word	0x08006935
 8006890:	08006927 	.word	0x08006927
 8006894:	08006927 	.word	0x08006927
 8006898:	08006927 	.word	0x08006927
 800689c:	08006927 	.word	0x08006927
 80068a0:	08006927 	.word	0x08006927
 80068a4:	08006927 	.word	0x08006927
 80068a8:	08006927 	.word	0x08006927
 80068ac:	08006927 	.word	0x08006927
 80068b0:	080068e3 	.word	0x080068e3
 80068b4:	0800690d 	.word	0x0800690d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d107      	bne.n	80068d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068c4:	f107 030a 	add.w	r3, r7, #10
 80068c8:	2202      	movs	r2, #2
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fd17 	bl	8008300 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068d2:	e032      	b.n	800693a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 fca1 	bl	800821e <USBD_CtlError>
            ret = USBD_FAIL;
 80068dc:	2303      	movs	r3, #3
 80068de:	75fb      	strb	r3, [r7, #23]
          break;
 80068e0:	e02b      	b.n	800693a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d107      	bne.n	80068fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80068ee:	f107 030d 	add.w	r3, r7, #13
 80068f2:	2201      	movs	r2, #1
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 fd02 	bl	8008300 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068fc:	e01d      	b.n	800693a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 fc8c 	bl	800821e <USBD_CtlError>
            ret = USBD_FAIL;
 8006906:	2303      	movs	r3, #3
 8006908:	75fb      	strb	r3, [r7, #23]
          break;
 800690a:	e016      	b.n	800693a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b03      	cmp	r3, #3
 8006916:	d00f      	beq.n	8006938 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fc7f 	bl	800821e <USBD_CtlError>
            ret = USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006924:	e008      	b.n	8006938 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fc78 	bl	800821e <USBD_CtlError>
          ret = USBD_FAIL;
 800692e:	2303      	movs	r3, #3
 8006930:	75fb      	strb	r3, [r7, #23]
          break;
 8006932:	e002      	b.n	800693a <USBD_CDC_Setup+0x19e>
          break;
 8006934:	bf00      	nop
 8006936:	e008      	b.n	800694a <USBD_CDC_Setup+0x1ae>
          break;
 8006938:	bf00      	nop
      }
      break;
 800693a:	e006      	b.n	800694a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 fc6d 	bl	800821e <USBD_CtlError>
      ret = USBD_FAIL;
 8006944:	2303      	movs	r3, #3
 8006946:	75fb      	strb	r3, [r7, #23]
      break;
 8006948:	bf00      	nop
  }

  return (uint8_t)ret;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006966:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	32b0      	adds	r2, #176	; 0xb0
 8006972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800697a:	2303      	movs	r3, #3
 800697c:	e065      	b.n	8006a4a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	32b0      	adds	r2, #176	; 0xb0
 8006988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	f003 020f 	and.w	r2, r3, #15
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	3318      	adds	r3, #24
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d02f      	beq.n	8006a08 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	f003 020f 	and.w	r2, r3, #15
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	3318      	adds	r3, #24
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	f003 010f 	and.w	r1, r3, #15
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	460b      	mov	r3, r1
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	440b      	add	r3, r1
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4403      	add	r3, r0
 80069d0:	3348      	adds	r3, #72	; 0x48
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d112      	bne.n	8006a08 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80069e2:	78fb      	ldrb	r3, [r7, #3]
 80069e4:	f003 020f 	and.w	r2, r3, #15
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	3318      	adds	r3, #24
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069fa:	78f9      	ldrb	r1, [r7, #3]
 80069fc:	2300      	movs	r3, #0
 80069fe:	2200      	movs	r2, #0
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f002 f980 	bl	8008d06 <USBD_LL_Transmit>
 8006a06:	e01f      	b.n	8006a48 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	33b0      	adds	r3, #176	; 0xb0
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d010      	beq.n	8006a48 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	33b0      	adds	r3, #176	; 0xb0
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a44:	78fa      	ldrb	r2, [r7, #3]
 8006a46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	32b0      	adds	r2, #176	; 0xb0
 8006a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	32b0      	adds	r2, #176	; 0xb0
 8006a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e01a      	b.n	8006aba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f002 f97e 	bl	8008d8a <USBD_LL_GetRxDataSize>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	33b0      	adds	r3, #176	; 0xb0
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	32b0      	adds	r2, #176	; 0xb0
 8006ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e025      	b.n	8006b30 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	33b0      	adds	r3, #176	; 0xb0
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01a      	beq.n	8006b2e <USBD_CDC_EP0_RxReady+0x6c>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006afe:	2bff      	cmp	r3, #255	; 0xff
 8006b00:	d015      	beq.n	8006b2e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	33b0      	adds	r3, #176	; 0xb0
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006b1a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b22:	b292      	uxth	r2, r2
 8006b24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	22ff      	movs	r2, #255	; 0xff
 8006b2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b40:	2182      	movs	r1, #130	; 0x82
 8006b42:	4818      	ldr	r0, [pc, #96]	; (8006ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b44:	f000 fd09 	bl	800755a <USBD_GetEpDesc>
 8006b48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	4815      	ldr	r0, [pc, #84]	; (8006ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b4e:	f000 fd04 	bl	800755a <USBD_GetEpDesc>
 8006b52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b54:	2181      	movs	r1, #129	; 0x81
 8006b56:	4813      	ldr	r0, [pc, #76]	; (8006ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b58:	f000 fcff 	bl	800755a <USBD_GetEpDesc>
 8006b5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2210      	movs	r2, #16
 8006b68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d006      	beq.n	8006b7e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b78:	711a      	strb	r2, [r3, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d006      	beq.n	8006b92 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8c:	711a      	strb	r2, [r3, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2243      	movs	r2, #67	; 0x43
 8006b96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b98:	4b02      	ldr	r3, [pc, #8]	; (8006ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000050 	.word	0x20000050

08006ba8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bb0:	2182      	movs	r1, #130	; 0x82
 8006bb2:	4818      	ldr	r0, [pc, #96]	; (8006c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bb4:	f000 fcd1 	bl	800755a <USBD_GetEpDesc>
 8006bb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bba:	2101      	movs	r1, #1
 8006bbc:	4815      	ldr	r0, [pc, #84]	; (8006c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bbe:	f000 fccc 	bl	800755a <USBD_GetEpDesc>
 8006bc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bc4:	2181      	movs	r1, #129	; 0x81
 8006bc6:	4813      	ldr	r0, [pc, #76]	; (8006c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bc8:	f000 fcc7 	bl	800755a <USBD_GetEpDesc>
 8006bcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2210      	movs	r2, #16
 8006bd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d006      	beq.n	8006bee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2200      	movs	r2, #0
 8006be4:	711a      	strb	r2, [r3, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f042 0202 	orr.w	r2, r2, #2
 8006bec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d006      	beq.n	8006c02 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	711a      	strb	r2, [r3, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f042 0202 	orr.w	r2, r2, #2
 8006c00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2243      	movs	r2, #67	; 0x43
 8006c06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c08:	4b02      	ldr	r3, [pc, #8]	; (8006c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20000050 	.word	0x20000050

08006c18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c20:	2182      	movs	r1, #130	; 0x82
 8006c22:	4818      	ldr	r0, [pc, #96]	; (8006c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c24:	f000 fc99 	bl	800755a <USBD_GetEpDesc>
 8006c28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	4815      	ldr	r0, [pc, #84]	; (8006c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c2e:	f000 fc94 	bl	800755a <USBD_GetEpDesc>
 8006c32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c34:	2181      	movs	r1, #129	; 0x81
 8006c36:	4813      	ldr	r0, [pc, #76]	; (8006c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c38:	f000 fc8f 	bl	800755a <USBD_GetEpDesc>
 8006c3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2210      	movs	r2, #16
 8006c48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d006      	beq.n	8006c5e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c58:	711a      	strb	r2, [r3, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d006      	beq.n	8006c72 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c6c:	711a      	strb	r2, [r3, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2243      	movs	r2, #67	; 0x43
 8006c76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c78:	4b02      	ldr	r3, [pc, #8]	; (8006c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000050 	.word	0x20000050

08006c88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	220a      	movs	r2, #10
 8006c94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c96:	4b03      	ldr	r3, [pc, #12]	; (8006ca4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	2000000c 	.word	0x2000000c

08006ca8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e009      	b.n	8006cd0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	33b0      	adds	r3, #176	; 0xb0
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	32b0      	adds	r2, #176	; 0xb0
 8006cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e008      	b.n	8006d14 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	32b0      	adds	r2, #176	; 0xb0
 8006d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e004      	b.n	8006d4e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
	...

08006d5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	32b0      	adds	r2, #176	; 0xb0
 8006d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d72:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	32b0      	adds	r2, #176	; 0xb0
 8006d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e018      	b.n	8006dbc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	7c1b      	ldrb	r3, [r3, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d92:	4b0c      	ldr	r3, [pc, #48]	; (8006dc4 <USBD_CDC_ReceivePacket+0x68>)
 8006d94:	7819      	ldrb	r1, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 ffd1 	bl	8008d48 <USBD_LL_PrepareReceive>
 8006da6:	e008      	b.n	8006dba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006da8:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <USBD_CDC_ReceivePacket+0x68>)
 8006daa:	7819      	ldrb	r1, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006db2:	2340      	movs	r3, #64	; 0x40
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 ffc7 	bl	8008d48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20000094 	.word	0x20000094

08006dc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e01f      	b.n	8006e20 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	79fa      	ldrb	r2, [r7, #7]
 8006e12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f001 fe41 	bl	8008a9c <USBD_LL_Init>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e025      	b.n	8006e8c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	32ae      	adds	r2, #174	; 0xae
 8006e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00f      	beq.n	8006e7c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	32ae      	adds	r2, #174	; 0xae
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	f107 020e 	add.w	r2, r7, #14
 8006e70:	4610      	mov	r0, r2
 8006e72:	4798      	blx	r3
 8006e74:	4602      	mov	r2, r0
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 fe49 	bl	8008b34 <USBD_LL_Start>
 8006ea2:	4603      	mov	r3, r0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eb4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d009      	beq.n	8006ef0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	78fa      	ldrb	r2, [r7, #3]
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	4798      	blx	r3
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	460b      	mov	r3, r1
 8006f04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	78fa      	ldrb	r2, [r7, #3]
 8006f14:	4611      	mov	r1, r2
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	4798      	blx	r3
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f20:	2303      	movs	r3, #3
 8006f22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f001 f932 	bl	80081aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f54:	461a      	mov	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f62:	f003 031f 	and.w	r3, r3, #31
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d01a      	beq.n	8006fa0 <USBD_LL_SetupStage+0x72>
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d822      	bhi.n	8006fb4 <USBD_LL_SetupStage+0x86>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <USBD_LL_SetupStage+0x4a>
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d00a      	beq.n	8006f8c <USBD_LL_SetupStage+0x5e>
 8006f76:	e01d      	b.n	8006fb4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fb5f 	bl	8007644 <USBD_StdDevReq>
 8006f86:	4603      	mov	r3, r0
 8006f88:	73fb      	strb	r3, [r7, #15]
      break;
 8006f8a:	e020      	b.n	8006fce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fbc7 	bl	8007728 <USBD_StdItfReq>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f9e:	e016      	b.n	8006fce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fc29 	bl	8007800 <USBD_StdEPReq>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb2:	e00c      	b.n	8006fce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f001 fe16 	bl	8008bf4 <USBD_LL_StallEP>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]
      break;
 8006fcc:	bf00      	nop
  }

  return ret;
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006fea:	7afb      	ldrb	r3, [r7, #11]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d16e      	bne.n	80070ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ff6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	f040 8098 	bne.w	8007134 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	429a      	cmp	r2, r3
 800700e:	d913      	bls.n	8007038 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	1ad2      	subs	r2, r2, r3
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	4293      	cmp	r3, r2
 8007028:	bf28      	it	cs
 800702a:	4613      	movcs	r3, r2
 800702c:	461a      	mov	r2, r3
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f001 f9ae 	bl	8008392 <USBD_CtlContinueRx>
 8007036:	e07d      	b.n	8007134 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	2b02      	cmp	r3, #2
 8007044:	d014      	beq.n	8007070 <USBD_LL_DataOutStage+0x98>
 8007046:	2b02      	cmp	r3, #2
 8007048:	d81d      	bhi.n	8007086 <USBD_LL_DataOutStage+0xae>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <USBD_LL_DataOutStage+0x7c>
 800704e:	2b01      	cmp	r3, #1
 8007050:	d003      	beq.n	800705a <USBD_LL_DataOutStage+0x82>
 8007052:	e018      	b.n	8007086 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	75bb      	strb	r3, [r7, #22]
            break;
 8007058:	e018      	b.n	800708c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007060:	b2db      	uxtb	r3, r3
 8007062:	4619      	mov	r1, r3
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 fa5e 	bl	8007526 <USBD_CoreFindIF>
 800706a:	4603      	mov	r3, r0
 800706c:	75bb      	strb	r3, [r7, #22]
            break;
 800706e:	e00d      	b.n	800708c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007076:	b2db      	uxtb	r3, r3
 8007078:	4619      	mov	r1, r3
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 fa60 	bl	8007540 <USBD_CoreFindEP>
 8007080:	4603      	mov	r3, r0
 8007082:	75bb      	strb	r3, [r7, #22]
            break;
 8007084:	e002      	b.n	800708c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	75bb      	strb	r3, [r7, #22]
            break;
 800708a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800708c:	7dbb      	ldrb	r3, [r7, #22]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d119      	bne.n	80070c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b03      	cmp	r3, #3
 800709c:	d113      	bne.n	80070c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800709e:	7dba      	ldrb	r2, [r7, #22]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	32ae      	adds	r2, #174	; 0xae
 80070a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80070ae:	7dba      	ldrb	r2, [r7, #22]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80070b6:	7dba      	ldrb	r2, [r7, #22]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	32ae      	adds	r2, #174	; 0xae
 80070bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f001 f974 	bl	80083b4 <USBD_CtlSendStatus>
 80070cc:	e032      	b.n	8007134 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80070ce:	7afb      	ldrb	r3, [r7, #11]
 80070d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	4619      	mov	r1, r3
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 fa31 	bl	8007540 <USBD_CoreFindEP>
 80070de:	4603      	mov	r3, r0
 80070e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070e2:	7dbb      	ldrb	r3, [r7, #22]
 80070e4:	2bff      	cmp	r3, #255	; 0xff
 80070e6:	d025      	beq.n	8007134 <USBD_LL_DataOutStage+0x15c>
 80070e8:	7dbb      	ldrb	r3, [r7, #22]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d122      	bne.n	8007134 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d117      	bne.n	800712a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80070fa:	7dba      	ldrb	r2, [r7, #22]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	32ae      	adds	r2, #174	; 0xae
 8007100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00f      	beq.n	800712a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800710a:	7dba      	ldrb	r2, [r7, #22]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007112:	7dba      	ldrb	r2, [r7, #22]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	32ae      	adds	r2, #174	; 0xae
 8007118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	7afa      	ldrb	r2, [r7, #11]
 8007120:	4611      	mov	r1, r2
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	4798      	blx	r3
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007130:	7dfb      	ldrb	r3, [r7, #23]
 8007132:	e000      	b.n	8007136 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b086      	sub	sp, #24
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	460b      	mov	r3, r1
 8007148:	607a      	str	r2, [r7, #4]
 800714a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800714c:	7afb      	ldrb	r3, [r7, #11]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d16f      	bne.n	8007232 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3314      	adds	r3, #20
 8007156:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800715e:	2b02      	cmp	r3, #2
 8007160:	d15a      	bne.n	8007218 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	429a      	cmp	r2, r3
 800716c:	d914      	bls.n	8007198 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	1ad2      	subs	r2, r2, r3
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	461a      	mov	r2, r3
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f001 f8d6 	bl	8008336 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800718a:	2300      	movs	r3, #0
 800718c:	2200      	movs	r2, #0
 800718e:	2100      	movs	r1, #0
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f001 fdd9 	bl	8008d48 <USBD_LL_PrepareReceive>
 8007196:	e03f      	b.n	8007218 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d11c      	bne.n	80071de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d316      	bcc.n	80071de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d20f      	bcs.n	80071de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071be:	2200      	movs	r2, #0
 80071c0:	2100      	movs	r1, #0
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f001 f8b7 	bl	8008336 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071d0:	2300      	movs	r3, #0
 80071d2:	2200      	movs	r2, #0
 80071d4:	2100      	movs	r1, #0
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f001 fdb6 	bl	8008d48 <USBD_LL_PrepareReceive>
 80071dc:	e01c      	b.n	8007218 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d10f      	bne.n	800720a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800720a:	2180      	movs	r1, #128	; 0x80
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f001 fcf1 	bl	8008bf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f001 f8e1 	bl	80083da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d03a      	beq.n	8007298 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f7ff fe42 	bl	8006eac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007230:	e032      	b.n	8007298 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007232:	7afb      	ldrb	r3, [r7, #11]
 8007234:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007238:	b2db      	uxtb	r3, r3
 800723a:	4619      	mov	r1, r3
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f97f 	bl	8007540 <USBD_CoreFindEP>
 8007242:	4603      	mov	r3, r0
 8007244:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	2bff      	cmp	r3, #255	; 0xff
 800724a:	d025      	beq.n	8007298 <USBD_LL_DataInStage+0x15a>
 800724c:	7dfb      	ldrb	r3, [r7, #23]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d122      	bne.n	8007298 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b03      	cmp	r3, #3
 800725c:	d11c      	bne.n	8007298 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800725e:	7dfa      	ldrb	r2, [r7, #23]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	32ae      	adds	r2, #174	; 0xae
 8007264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d014      	beq.n	8007298 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800726e:	7dfa      	ldrb	r2, [r7, #23]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007276:	7dfa      	ldrb	r2, [r7, #23]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	32ae      	adds	r2, #174	; 0xae
 800727c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	7afa      	ldrb	r2, [r7, #11]
 8007284:	4611      	mov	r1, r2
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	4798      	blx	r3
 800728a:	4603      	mov	r3, r0
 800728c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800728e:	7dbb      	ldrb	r3, [r7, #22]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007294:	7dbb      	ldrb	r3, [r7, #22]
 8007296:	e000      	b.n	800729a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d014      	beq.n	8007308 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00e      	beq.n	8007308 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6852      	ldr	r2, [r2, #4]
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	4611      	mov	r1, r2
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007304:	2303      	movs	r3, #3
 8007306:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007308:	2340      	movs	r3, #64	; 0x40
 800730a:	2200      	movs	r2, #0
 800730c:	2100      	movs	r1, #0
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 fc2b 	bl	8008b6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2240      	movs	r2, #64	; 0x40
 8007320:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007324:	2340      	movs	r3, #64	; 0x40
 8007326:	2200      	movs	r2, #0
 8007328:	2180      	movs	r1, #128	; 0x80
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 fc1d 	bl	8008b6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2240      	movs	r2, #64	; 0x40
 800733a:	621a      	str	r2, [r3, #32]

  return ret;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	78fa      	ldrb	r2, [r7, #3]
 8007356:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007374:	b2da      	uxtb	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2204      	movs	r2, #4
 8007380:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d106      	bne.n	80073b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b082      	sub	sp, #8
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d110      	bne.n	80073f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00b      	beq.n	80073f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	32ae      	adds	r2, #174	; 0xae
 8007418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007420:	2303      	movs	r3, #3
 8007422:	e01c      	b.n	800745e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b03      	cmp	r3, #3
 800742e:	d115      	bne.n	800745c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	32ae      	adds	r2, #174	; 0xae
 800743a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	32ae      	adds	r2, #174	; 0xae
 800744e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007452:	6a1b      	ldr	r3, [r3, #32]
 8007454:	78fa      	ldrb	r2, [r7, #3]
 8007456:	4611      	mov	r1, r2
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	32ae      	adds	r2, #174	; 0xae
 800747c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007484:	2303      	movs	r3, #3
 8007486:	e01c      	b.n	80074c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b03      	cmp	r3, #3
 8007492:	d115      	bne.n	80074c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	32ae      	adds	r2, #174	; 0xae
 800749e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	32ae      	adds	r2, #174	; 0xae
 80074b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	4611      	mov	r1, r2
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00e      	beq.n	800751c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6852      	ldr	r2, [r2, #4]
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	4611      	mov	r1, r2
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	4798      	blx	r3
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007518:	2303      	movs	r3, #3
 800751a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	460b      	mov	r3, r1
 8007530:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007532:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800754c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800754e:	4618      	mov	r0, r3
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	460b      	mov	r3, r1
 8007564:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800756e:	2300      	movs	r3, #0
 8007570:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	885b      	ldrh	r3, [r3, #2]
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	429a      	cmp	r2, r3
 8007580:	d920      	bls.n	80075c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	b29b      	uxth	r3, r3
 8007588:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800758a:	e013      	b.n	80075b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800758c:	f107 030a 	add.w	r3, r7, #10
 8007590:	4619      	mov	r1, r3
 8007592:	6978      	ldr	r0, [r7, #20]
 8007594:	f000 f81b 	bl	80075ce <USBD_GetNextDesc>
 8007598:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	2b05      	cmp	r3, #5
 80075a0:	d108      	bne.n	80075b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	789b      	ldrb	r3, [r3, #2]
 80075aa:	78fa      	ldrb	r2, [r7, #3]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d008      	beq.n	80075c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	885b      	ldrh	r3, [r3, #2]
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	897b      	ldrh	r3, [r7, #10]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d8e5      	bhi.n	800758c <USBD_GetEpDesc+0x32>
 80075c0:	e000      	b.n	80075c4 <USBD_GetEpDesc+0x6a>
          break;
 80075c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80075c4:	693b      	ldr	r3, [r7, #16]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	881a      	ldrh	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	4413      	add	r3, r2
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4413      	add	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075fa:	68fb      	ldr	r3, [r7, #12]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	3301      	adds	r3, #1
 800761e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007626:	8a3b      	ldrh	r3, [r7, #16]
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	b21a      	sxth	r2, r3
 800762c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007630:	4313      	orrs	r3, r2
 8007632:	b21b      	sxth	r3, r3
 8007634:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007636:	89fb      	ldrh	r3, [r7, #14]
}
 8007638:	4618      	mov	r0, r3
 800763a:	371c      	adds	r7, #28
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800765a:	2b40      	cmp	r3, #64	; 0x40
 800765c:	d005      	beq.n	800766a <USBD_StdDevReq+0x26>
 800765e:	2b40      	cmp	r3, #64	; 0x40
 8007660:	d857      	bhi.n	8007712 <USBD_StdDevReq+0xce>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00f      	beq.n	8007686 <USBD_StdDevReq+0x42>
 8007666:	2b20      	cmp	r3, #32
 8007668:	d153      	bne.n	8007712 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	32ae      	adds	r2, #174	; 0xae
 8007674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	4798      	blx	r3
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]
      break;
 8007684:	e04a      	b.n	800771c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	785b      	ldrb	r3, [r3, #1]
 800768a:	2b09      	cmp	r3, #9
 800768c:	d83b      	bhi.n	8007706 <USBD_StdDevReq+0xc2>
 800768e:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <USBD_StdDevReq+0x50>)
 8007690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007694:	080076e9 	.word	0x080076e9
 8007698:	080076fd 	.word	0x080076fd
 800769c:	08007707 	.word	0x08007707
 80076a0:	080076f3 	.word	0x080076f3
 80076a4:	08007707 	.word	0x08007707
 80076a8:	080076c7 	.word	0x080076c7
 80076ac:	080076bd 	.word	0x080076bd
 80076b0:	08007707 	.word	0x08007707
 80076b4:	080076df 	.word	0x080076df
 80076b8:	080076d1 	.word	0x080076d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fa3c 	bl	8007b3c <USBD_GetDescriptor>
          break;
 80076c4:	e024      	b.n	8007710 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fbcb 	bl	8007e64 <USBD_SetAddress>
          break;
 80076ce:	e01f      	b.n	8007710 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fc0a 	bl	8007eec <USBD_SetConfig>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]
          break;
 80076dc:	e018      	b.n	8007710 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fcad 	bl	8008040 <USBD_GetConfig>
          break;
 80076e6:	e013      	b.n	8007710 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fcde 	bl	80080ac <USBD_GetStatus>
          break;
 80076f0:	e00e      	b.n	8007710 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fd0d 	bl	8008114 <USBD_SetFeature>
          break;
 80076fa:	e009      	b.n	8007710 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fd31 	bl	8008166 <USBD_ClrFeature>
          break;
 8007704:	e004      	b.n	8007710 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fd88 	bl	800821e <USBD_CtlError>
          break;
 800770e:	bf00      	nop
      }
      break;
 8007710:	e004      	b.n	800771c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fd82 	bl	800821e <USBD_CtlError>
      break;
 800771a:	bf00      	nop
  }

  return ret;
 800771c:	7bfb      	ldrb	r3, [r7, #15]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop

08007728 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d005      	beq.n	800774e <USBD_StdItfReq+0x26>
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d852      	bhi.n	80077ec <USBD_StdItfReq+0xc4>
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <USBD_StdItfReq+0x26>
 800774a:	2b20      	cmp	r3, #32
 800774c:	d14e      	bne.n	80077ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007754:	b2db      	uxtb	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	2b02      	cmp	r3, #2
 800775a:	d840      	bhi.n	80077de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	889b      	ldrh	r3, [r3, #4]
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b01      	cmp	r3, #1
 8007764:	d836      	bhi.n	80077d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	889b      	ldrh	r3, [r3, #4]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff fed9 	bl	8007526 <USBD_CoreFindIF>
 8007774:	4603      	mov	r3, r0
 8007776:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	2bff      	cmp	r3, #255	; 0xff
 800777c:	d01d      	beq.n	80077ba <USBD_StdItfReq+0x92>
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d11a      	bne.n	80077ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007784:	7bba      	ldrb	r2, [r7, #14]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	32ae      	adds	r2, #174	; 0xae
 800778a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00f      	beq.n	80077b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007794:	7bba      	ldrb	r2, [r7, #14]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800779c:	7bba      	ldrb	r2, [r7, #14]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	32ae      	adds	r2, #174	; 0xae
 80077a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	4798      	blx	r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077b2:	e004      	b.n	80077be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80077b4:	2303      	movs	r3, #3
 80077b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077b8:	e001      	b.n	80077be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80077ba:	2303      	movs	r3, #3
 80077bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	88db      	ldrh	r3, [r3, #6]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d110      	bne.n	80077e8 <USBD_StdItfReq+0xc0>
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10d      	bne.n	80077e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fdf1 	bl	80083b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077d2:	e009      	b.n	80077e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fd21 	bl	800821e <USBD_CtlError>
          break;
 80077dc:	e004      	b.n	80077e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fd1c 	bl	800821e <USBD_CtlError>
          break;
 80077e6:	e000      	b.n	80077ea <USBD_StdItfReq+0xc2>
          break;
 80077e8:	bf00      	nop
      }
      break;
 80077ea:	e004      	b.n	80077f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fd15 	bl	800821e <USBD_CtlError>
      break;
 80077f4:	bf00      	nop
  }

  return ret;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	889b      	ldrh	r3, [r3, #4]
 8007812:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800781c:	2b40      	cmp	r3, #64	; 0x40
 800781e:	d007      	beq.n	8007830 <USBD_StdEPReq+0x30>
 8007820:	2b40      	cmp	r3, #64	; 0x40
 8007822:	f200 817f 	bhi.w	8007b24 <USBD_StdEPReq+0x324>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d02a      	beq.n	8007880 <USBD_StdEPReq+0x80>
 800782a:	2b20      	cmp	r3, #32
 800782c:	f040 817a 	bne.w	8007b24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff fe83 	bl	8007540 <USBD_CoreFindEP>
 800783a:	4603      	mov	r3, r0
 800783c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800783e:	7b7b      	ldrb	r3, [r7, #13]
 8007840:	2bff      	cmp	r3, #255	; 0xff
 8007842:	f000 8174 	beq.w	8007b2e <USBD_StdEPReq+0x32e>
 8007846:	7b7b      	ldrb	r3, [r7, #13]
 8007848:	2b00      	cmp	r3, #0
 800784a:	f040 8170 	bne.w	8007b2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800784e:	7b7a      	ldrb	r2, [r7, #13]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007856:	7b7a      	ldrb	r2, [r7, #13]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	32ae      	adds	r2, #174	; 0xae
 800785c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 8163 	beq.w	8007b2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007868:	7b7a      	ldrb	r2, [r7, #13]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	32ae      	adds	r2, #174	; 0xae
 800786e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
 800787a:	4603      	mov	r3, r0
 800787c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800787e:	e156      	b.n	8007b2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d008      	beq.n	800789a <USBD_StdEPReq+0x9a>
 8007888:	2b03      	cmp	r3, #3
 800788a:	f300 8145 	bgt.w	8007b18 <USBD_StdEPReq+0x318>
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 809b 	beq.w	80079ca <USBD_StdEPReq+0x1ca>
 8007894:	2b01      	cmp	r3, #1
 8007896:	d03c      	beq.n	8007912 <USBD_StdEPReq+0x112>
 8007898:	e13e      	b.n	8007b18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d002      	beq.n	80078ac <USBD_StdEPReq+0xac>
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d016      	beq.n	80078d8 <USBD_StdEPReq+0xd8>
 80078aa:	e02c      	b.n	8007906 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00d      	beq.n	80078ce <USBD_StdEPReq+0xce>
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	2b80      	cmp	r3, #128	; 0x80
 80078b6:	d00a      	beq.n	80078ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 f999 	bl	8008bf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078c2:	2180      	movs	r1, #128	; 0x80
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 f995 	bl	8008bf4 <USBD_LL_StallEP>
 80078ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078cc:	e020      	b.n	8007910 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fca4 	bl	800821e <USBD_CtlError>
              break;
 80078d6:	e01b      	b.n	8007910 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	885b      	ldrh	r3, [r3, #2]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10e      	bne.n	80078fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <USBD_StdEPReq+0xfe>
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	2b80      	cmp	r3, #128	; 0x80
 80078ea:	d008      	beq.n	80078fe <USBD_StdEPReq+0xfe>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	88db      	ldrh	r3, [r3, #6]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d104      	bne.n	80078fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 f97b 	bl	8008bf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fd58 	bl	80083b4 <USBD_CtlSendStatus>

              break;
 8007904:	e004      	b.n	8007910 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fc88 	bl	800821e <USBD_CtlError>
              break;
 800790e:	bf00      	nop
          }
          break;
 8007910:	e107      	b.n	8007b22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d002      	beq.n	8007924 <USBD_StdEPReq+0x124>
 800791e:	2b03      	cmp	r3, #3
 8007920:	d016      	beq.n	8007950 <USBD_StdEPReq+0x150>
 8007922:	e04b      	b.n	80079bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00d      	beq.n	8007946 <USBD_StdEPReq+0x146>
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	2b80      	cmp	r3, #128	; 0x80
 800792e:	d00a      	beq.n	8007946 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 f95d 	bl	8008bf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800793a:	2180      	movs	r1, #128	; 0x80
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 f959 	bl	8008bf4 <USBD_LL_StallEP>
 8007942:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007944:	e040      	b.n	80079c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fc68 	bl	800821e <USBD_CtlError>
              break;
 800794e:	e03b      	b.n	80079c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	885b      	ldrh	r3, [r3, #2]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d136      	bne.n	80079c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795e:	2b00      	cmp	r3, #0
 8007960:	d004      	beq.n	800796c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 f963 	bl	8008c32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fd21 	bl	80083b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff fde2 	bl	8007540 <USBD_CoreFindEP>
 800797c:	4603      	mov	r3, r0
 800797e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007980:	7b7b      	ldrb	r3, [r7, #13]
 8007982:	2bff      	cmp	r3, #255	; 0xff
 8007984:	d01f      	beq.n	80079c6 <USBD_StdEPReq+0x1c6>
 8007986:	7b7b      	ldrb	r3, [r7, #13]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d11c      	bne.n	80079c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800798c:	7b7a      	ldrb	r2, [r7, #13]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007994:	7b7a      	ldrb	r2, [r7, #13]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32ae      	adds	r2, #174	; 0xae
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d010      	beq.n	80079c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079a4:	7b7a      	ldrb	r2, [r7, #13]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32ae      	adds	r2, #174	; 0xae
 80079aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80079ba:	e004      	b.n	80079c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fc2d 	bl	800821e <USBD_CtlError>
              break;
 80079c4:	e000      	b.n	80079c8 <USBD_StdEPReq+0x1c8>
              break;
 80079c6:	bf00      	nop
          }
          break;
 80079c8:	e0ab      	b.n	8007b22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d002      	beq.n	80079dc <USBD_StdEPReq+0x1dc>
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d032      	beq.n	8007a40 <USBD_StdEPReq+0x240>
 80079da:	e097      	b.n	8007b0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d007      	beq.n	80079f2 <USBD_StdEPReq+0x1f2>
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b80      	cmp	r3, #128	; 0x80
 80079e6:	d004      	beq.n	80079f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fc17 	bl	800821e <USBD_CtlError>
                break;
 80079f0:	e091      	b.n	8007b16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da0b      	bge.n	8007a12 <USBD_StdEPReq+0x212>
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a00:	4613      	mov	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	3310      	adds	r3, #16
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3304      	adds	r3, #4
 8007a10:	e00b      	b.n	8007a2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a18:	4613      	mov	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	4413      	add	r3, r2
 8007a28:	3304      	adds	r3, #4
 8007a2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2202      	movs	r2, #2
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fc61 	bl	8008300 <USBD_CtlSendData>
              break;
 8007a3e:	e06a      	b.n	8007b16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	da11      	bge.n	8007a6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	f003 020f 	and.w	r2, r3, #15
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	3324      	adds	r3, #36	; 0x24
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d117      	bne.n	8007a92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fbda 	bl	800821e <USBD_CtlError>
                  break;
 8007a6a:	e054      	b.n	8007b16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	f003 020f 	and.w	r2, r3, #15
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d104      	bne.n	8007a92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fbc7 	bl	800821e <USBD_CtlError>
                  break;
 8007a90:	e041      	b.n	8007b16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	da0b      	bge.n	8007ab2 <USBD_StdEPReq+0x2b2>
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	3310      	adds	r3, #16
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	3304      	adds	r3, #4
 8007ab0:	e00b      	b.n	8007aca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	3304      	adds	r3, #4
 8007aca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <USBD_StdEPReq+0x2d8>
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	2b80      	cmp	r3, #128	; 0x80
 8007ad6:	d103      	bne.n	8007ae0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	e00e      	b.n	8007afe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 f8c3 	bl	8008c70 <USBD_LL_IsStallEP>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2201      	movs	r2, #1
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	e002      	b.n	8007afe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2200      	movs	r2, #0
 8007afc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2202      	movs	r2, #2
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fbfb 	bl	8008300 <USBD_CtlSendData>
              break;
 8007b0a:	e004      	b.n	8007b16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fb85 	bl	800821e <USBD_CtlError>
              break;
 8007b14:	bf00      	nop
          }
          break;
 8007b16:	e004      	b.n	8007b22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fb7f 	bl	800821e <USBD_CtlError>
          break;
 8007b20:	bf00      	nop
      }
      break;
 8007b22:	e005      	b.n	8007b30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fb79 	bl	800821e <USBD_CtlError>
      break;
 8007b2c:	e000      	b.n	8007b30 <USBD_StdEPReq+0x330>
      break;
 8007b2e:	bf00      	nop
  }

  return ret;
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	885b      	ldrh	r3, [r3, #2]
 8007b56:	0a1b      	lsrs	r3, r3, #8
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	2b0e      	cmp	r3, #14
 8007b5e:	f200 8152 	bhi.w	8007e06 <USBD_GetDescriptor+0x2ca>
 8007b62:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <USBD_GetDescriptor+0x2c>)
 8007b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b68:	08007bd9 	.word	0x08007bd9
 8007b6c:	08007bf1 	.word	0x08007bf1
 8007b70:	08007c31 	.word	0x08007c31
 8007b74:	08007e07 	.word	0x08007e07
 8007b78:	08007e07 	.word	0x08007e07
 8007b7c:	08007da7 	.word	0x08007da7
 8007b80:	08007dd3 	.word	0x08007dd3
 8007b84:	08007e07 	.word	0x08007e07
 8007b88:	08007e07 	.word	0x08007e07
 8007b8c:	08007e07 	.word	0x08007e07
 8007b90:	08007e07 	.word	0x08007e07
 8007b94:	08007e07 	.word	0x08007e07
 8007b98:	08007e07 	.word	0x08007e07
 8007b9c:	08007e07 	.word	0x08007e07
 8007ba0:	08007ba5 	.word	0x08007ba5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00b      	beq.n	8007bc8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	7c12      	ldrb	r2, [r2, #16]
 8007bbc:	f107 0108 	add.w	r1, r7, #8
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4798      	blx	r3
 8007bc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bc6:	e126      	b.n	8007e16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fb27 	bl	800821e <USBD_CtlError>
        err++;
 8007bd0:	7afb      	ldrb	r3, [r7, #11]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	72fb      	strb	r3, [r7, #11]
      break;
 8007bd6:	e11e      	b.n	8007e16 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	7c12      	ldrb	r2, [r2, #16]
 8007be4:	f107 0108 	add.w	r1, r7, #8
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
 8007bec:	60f8      	str	r0, [r7, #12]
      break;
 8007bee:	e112      	b.n	8007e16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7c1b      	ldrb	r3, [r3, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10d      	bne.n	8007c14 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c00:	f107 0208 	add.w	r2, r7, #8
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
 8007c08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	2202      	movs	r2, #2
 8007c10:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c12:	e100      	b.n	8007e16 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1c:	f107 0208 	add.w	r2, r7, #8
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	701a      	strb	r2, [r3, #0]
      break;
 8007c2e:	e0f2      	b.n	8007e16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	885b      	ldrh	r3, [r3, #2]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	f200 80ac 	bhi.w	8007d94 <USBD_GetDescriptor+0x258>
 8007c3c:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <USBD_GetDescriptor+0x108>)
 8007c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c42:	bf00      	nop
 8007c44:	08007c5d 	.word	0x08007c5d
 8007c48:	08007c91 	.word	0x08007c91
 8007c4c:	08007cc5 	.word	0x08007cc5
 8007c50:	08007cf9 	.word	0x08007cf9
 8007c54:	08007d2d 	.word	0x08007d2d
 8007c58:	08007d61 	.word	0x08007d61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	7c12      	ldrb	r2, [r2, #16]
 8007c74:	f107 0108 	add.w	r1, r7, #8
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4798      	blx	r3
 8007c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c7e:	e091      	b.n	8007da4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 facb 	bl	800821e <USBD_CtlError>
            err++;
 8007c88:	7afb      	ldrb	r3, [r7, #11]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c8e:	e089      	b.n	8007da4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00b      	beq.n	8007cb4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	7c12      	ldrb	r2, [r2, #16]
 8007ca8:	f107 0108 	add.w	r1, r7, #8
 8007cac:	4610      	mov	r0, r2
 8007cae:	4798      	blx	r3
 8007cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cb2:	e077      	b.n	8007da4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fab1 	bl	800821e <USBD_CtlError>
            err++;
 8007cbc:	7afb      	ldrb	r3, [r7, #11]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cc2:	e06f      	b.n	8007da4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	7c12      	ldrb	r2, [r2, #16]
 8007cdc:	f107 0108 	add.w	r1, r7, #8
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4798      	blx	r3
 8007ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce6:	e05d      	b.n	8007da4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa97 	bl	800821e <USBD_CtlError>
            err++;
 8007cf0:	7afb      	ldrb	r3, [r7, #11]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf6:	e055      	b.n	8007da4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00b      	beq.n	8007d1c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	7c12      	ldrb	r2, [r2, #16]
 8007d10:	f107 0108 	add.w	r1, r7, #8
 8007d14:	4610      	mov	r0, r2
 8007d16:	4798      	blx	r3
 8007d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d1a:	e043      	b.n	8007da4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa7d 	bl	800821e <USBD_CtlError>
            err++;
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	3301      	adds	r3, #1
 8007d28:	72fb      	strb	r3, [r7, #11]
          break;
 8007d2a:	e03b      	b.n	8007da4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00b      	beq.n	8007d50 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7c12      	ldrb	r2, [r2, #16]
 8007d44:	f107 0108 	add.w	r1, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d4e:	e029      	b.n	8007da4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa63 	bl	800821e <USBD_CtlError>
            err++;
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d5e:	e021      	b.n	8007da4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	7c12      	ldrb	r2, [r2, #16]
 8007d78:	f107 0108 	add.w	r1, r7, #8
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	4798      	blx	r3
 8007d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d82:	e00f      	b.n	8007da4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa49 	bl	800821e <USBD_CtlError>
            err++;
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	72fb      	strb	r3, [r7, #11]
          break;
 8007d92:	e007      	b.n	8007da4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa41 	bl	800821e <USBD_CtlError>
          err++;
 8007d9c:	7afb      	ldrb	r3, [r7, #11]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007da2:	bf00      	nop
      }
      break;
 8007da4:	e037      	b.n	8007e16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	7c1b      	ldrb	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d109      	bne.n	8007dc2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db6:	f107 0208 	add.w	r2, r7, #8
 8007dba:	4610      	mov	r0, r2
 8007dbc:	4798      	blx	r3
 8007dbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dc0:	e029      	b.n	8007e16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fa2a 	bl	800821e <USBD_CtlError>
        err++;
 8007dca:	7afb      	ldrb	r3, [r7, #11]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	72fb      	strb	r3, [r7, #11]
      break;
 8007dd0:	e021      	b.n	8007e16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	7c1b      	ldrb	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10d      	bne.n	8007df6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de2:	f107 0208 	add.w	r2, r7, #8
 8007de6:	4610      	mov	r0, r2
 8007de8:	4798      	blx	r3
 8007dea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3301      	adds	r3, #1
 8007df0:	2207      	movs	r2, #7
 8007df2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007df4:	e00f      	b.n	8007e16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fa10 	bl	800821e <USBD_CtlError>
        err++;
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	3301      	adds	r3, #1
 8007e02:	72fb      	strb	r3, [r7, #11]
      break;
 8007e04:	e007      	b.n	8007e16 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fa08 	bl	800821e <USBD_CtlError>
      err++;
 8007e0e:	7afb      	ldrb	r3, [r7, #11]
 8007e10:	3301      	adds	r3, #1
 8007e12:	72fb      	strb	r3, [r7, #11]
      break;
 8007e14:	bf00      	nop
  }

  if (err != 0U)
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d11e      	bne.n	8007e5a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	88db      	ldrh	r3, [r3, #6]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d016      	beq.n	8007e52 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007e24:	893b      	ldrh	r3, [r7, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00e      	beq.n	8007e48 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	88da      	ldrh	r2, [r3, #6]
 8007e2e:	893b      	ldrh	r3, [r7, #8]
 8007e30:	4293      	cmp	r3, r2
 8007e32:	bf28      	it	cs
 8007e34:	4613      	movcs	r3, r2
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e3a:	893b      	ldrh	r3, [r7, #8]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	68f9      	ldr	r1, [r7, #12]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fa5d 	bl	8008300 <USBD_CtlSendData>
 8007e46:	e009      	b.n	8007e5c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f9e7 	bl	800821e <USBD_CtlError>
 8007e50:	e004      	b.n	8007e5c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 faae 	bl	80083b4 <USBD_CtlSendStatus>
 8007e58:	e000      	b.n	8007e5c <USBD_GetDescriptor+0x320>
    return;
 8007e5a:	bf00      	nop
  }
}
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop

08007e64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	889b      	ldrh	r3, [r3, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d131      	bne.n	8007eda <USBD_SetAddress+0x76>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	88db      	ldrh	r3, [r3, #6]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d12d      	bne.n	8007eda <USBD_SetAddress+0x76>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	885b      	ldrh	r3, [r3, #2]
 8007e82:	2b7f      	cmp	r3, #127	; 0x7f
 8007e84:	d829      	bhi.n	8007eda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	885b      	ldrh	r3, [r3, #2]
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d104      	bne.n	8007ea8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f9bc 	bl	800821e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea6:	e01d      	b.n	8007ee4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	7bfa      	ldrb	r2, [r7, #15]
 8007eac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 ff07 	bl	8008cc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa7a 	bl	80083b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ece:	e009      	b.n	8007ee4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed8:	e004      	b.n	8007ee4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f99e 	bl	800821e <USBD_CtlError>
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	bf00      	nop
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	885b      	ldrh	r3, [r3, #2]
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	4b4e      	ldr	r3, [pc, #312]	; (800803c <USBD_SetConfig+0x150>)
 8007f02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f04:	4b4d      	ldr	r3, [pc, #308]	; (800803c <USBD_SetConfig+0x150>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d905      	bls.n	8007f18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f985 	bl	800821e <USBD_CtlError>
    return USBD_FAIL;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e08c      	b.n	8008032 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d002      	beq.n	8007f2a <USBD_SetConfig+0x3e>
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d029      	beq.n	8007f7c <USBD_SetConfig+0x90>
 8007f28:	e075      	b.n	8008016 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f2a:	4b44      	ldr	r3, [pc, #272]	; (800803c <USBD_SetConfig+0x150>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d020      	beq.n	8007f74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f32:	4b42      	ldr	r3, [pc, #264]	; (800803c <USBD_SetConfig+0x150>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f3c:	4b3f      	ldr	r3, [pc, #252]	; (800803c <USBD_SetConfig+0x150>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fe ffbd 	bl	8006ec2 <USBD_SetClassConfig>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d008      	beq.n	8007f64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f962 	bl	800821e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f62:	e065      	b.n	8008030 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fa25 	bl	80083b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2203      	movs	r2, #3
 8007f6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f72:	e05d      	b.n	8008030 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fa1d 	bl	80083b4 <USBD_CtlSendStatus>
      break;
 8007f7a:	e059      	b.n	8008030 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f7c:	4b2f      	ldr	r3, [pc, #188]	; (800803c <USBD_SetConfig+0x150>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d112      	bne.n	8007faa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007f8c:	4b2b      	ldr	r3, [pc, #172]	; (800803c <USBD_SetConfig+0x150>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f96:	4b29      	ldr	r3, [pc, #164]	; (800803c <USBD_SetConfig+0x150>)
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7fe ffac 	bl	8006efa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fa06 	bl	80083b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fa8:	e042      	b.n	8008030 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007faa:	4b24      	ldr	r3, [pc, #144]	; (800803c <USBD_SetConfig+0x150>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d02a      	beq.n	800800e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7fe ff9a 	bl	8006efa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fc6:	4b1d      	ldr	r3, [pc, #116]	; (800803c <USBD_SetConfig+0x150>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fd0:	4b1a      	ldr	r3, [pc, #104]	; (800803c <USBD_SetConfig+0x150>)
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7fe ff73 	bl	8006ec2 <USBD_SetClassConfig>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00f      	beq.n	8008006 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f918 	bl	800821e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7fe ff7f 	bl	8006efa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2202      	movs	r2, #2
 8008000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008004:	e014      	b.n	8008030 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f9d4 	bl	80083b4 <USBD_CtlSendStatus>
      break;
 800800c:	e010      	b.n	8008030 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f9d0 	bl	80083b4 <USBD_CtlSendStatus>
      break;
 8008014:	e00c      	b.n	8008030 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f900 	bl	800821e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800801e:	4b07      	ldr	r3, [pc, #28]	; (800803c <USBD_SetConfig+0x150>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7fe ff68 	bl	8006efa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800802a:	2303      	movs	r3, #3
 800802c:	73fb      	strb	r3, [r7, #15]
      break;
 800802e:	bf00      	nop
  }

  return ret;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	200002b0 	.word	0x200002b0

08008040 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	88db      	ldrh	r3, [r3, #6]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d004      	beq.n	800805c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f8e2 	bl	800821e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800805a:	e023      	b.n	80080a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b02      	cmp	r3, #2
 8008066:	dc02      	bgt.n	800806e <USBD_GetConfig+0x2e>
 8008068:	2b00      	cmp	r3, #0
 800806a:	dc03      	bgt.n	8008074 <USBD_GetConfig+0x34>
 800806c:	e015      	b.n	800809a <USBD_GetConfig+0x5a>
 800806e:	2b03      	cmp	r3, #3
 8008070:	d00b      	beq.n	800808a <USBD_GetConfig+0x4a>
 8008072:	e012      	b.n	800809a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3308      	adds	r3, #8
 800807e:	2201      	movs	r2, #1
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f93c 	bl	8008300 <USBD_CtlSendData>
        break;
 8008088:	e00c      	b.n	80080a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3304      	adds	r3, #4
 800808e:	2201      	movs	r2, #1
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f934 	bl	8008300 <USBD_CtlSendData>
        break;
 8008098:	e004      	b.n	80080a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f8be 	bl	800821e <USBD_CtlError>
        break;
 80080a2:	bf00      	nop
}
 80080a4:	bf00      	nop
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	3b01      	subs	r3, #1
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d81e      	bhi.n	8008102 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	88db      	ldrh	r3, [r3, #6]
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d004      	beq.n	80080d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8a5 	bl	800821e <USBD_CtlError>
        break;
 80080d4:	e01a      	b.n	800810c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f043 0202 	orr.w	r2, r3, #2
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	330c      	adds	r3, #12
 80080f6:	2202      	movs	r2, #2
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f900 	bl	8008300 <USBD_CtlSendData>
      break;
 8008100:	e004      	b.n	800810c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f88a 	bl	800821e <USBD_CtlError>
      break;
 800810a:	bf00      	nop
  }
}
 800810c:	bf00      	nop
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	885b      	ldrh	r3, [r3, #2]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d107      	bne.n	8008136 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f940 	bl	80083b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008134:	e013      	b.n	800815e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	885b      	ldrh	r3, [r3, #2]
 800813a:	2b02      	cmp	r3, #2
 800813c:	d10b      	bne.n	8008156 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	889b      	ldrh	r3, [r3, #4]
 8008142:	0a1b      	lsrs	r3, r3, #8
 8008144:	b29b      	uxth	r3, r3
 8008146:	b2da      	uxtb	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f930 	bl	80083b4 <USBD_CtlSendStatus>
}
 8008154:	e003      	b.n	800815e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f860 	bl	800821e <USBD_CtlError>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008176:	b2db      	uxtb	r3, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	2b02      	cmp	r3, #2
 800817c:	d80b      	bhi.n	8008196 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	885b      	ldrh	r3, [r3, #2]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d10c      	bne.n	80081a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f910 	bl	80083b4 <USBD_CtlSendStatus>
      }
      break;
 8008194:	e004      	b.n	80081a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f840 	bl	800821e <USBD_CtlError>
      break;
 800819e:	e000      	b.n	80081a2 <USBD_ClrFeature+0x3c>
      break;
 80081a0:	bf00      	nop
  }
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	781a      	ldrb	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	3301      	adds	r3, #1
 80081c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	781a      	ldrb	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3301      	adds	r3, #1
 80081d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f7ff fa17 	bl	8007608 <SWAPBYTE>
 80081da:	4603      	mov	r3, r0
 80081dc:	461a      	mov	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3301      	adds	r3, #1
 80081e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7ff fa0a 	bl	8007608 <SWAPBYTE>
 80081f4:	4603      	mov	r3, r0
 80081f6:	461a      	mov	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3301      	adds	r3, #1
 8008200:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3301      	adds	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f7ff f9fd 	bl	8007608 <SWAPBYTE>
 800820e:	4603      	mov	r3, r0
 8008210:	461a      	mov	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	80da      	strh	r2, [r3, #6]
}
 8008216:	bf00      	nop
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b082      	sub	sp, #8
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008228:	2180      	movs	r1, #128	; 0x80
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fce2 	bl	8008bf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008230:	2100      	movs	r1, #0
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fcde 	bl	8008bf4 <USBD_LL_StallEP>
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800824c:	2300      	movs	r3, #0
 800824e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d036      	beq.n	80082c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800825a:	6938      	ldr	r0, [r7, #16]
 800825c:	f000 f836 	bl	80082cc <USBD_GetLen>
 8008260:	4603      	mov	r3, r0
 8008262:	3301      	adds	r3, #1
 8008264:	b29b      	uxth	r3, r3
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	b29a      	uxth	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800826e:	7dfb      	ldrb	r3, [r7, #23]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	4413      	add	r3, r2
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	7812      	ldrb	r2, [r2, #0]
 8008278:	701a      	strb	r2, [r3, #0]
  idx++;
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	3301      	adds	r3, #1
 800827e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008280:	7dfb      	ldrb	r3, [r7, #23]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	4413      	add	r3, r2
 8008286:	2203      	movs	r2, #3
 8008288:	701a      	strb	r2, [r3, #0]
  idx++;
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	3301      	adds	r3, #1
 800828e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008290:	e013      	b.n	80082ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	4413      	add	r3, r2
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	7812      	ldrb	r2, [r2, #0]
 800829c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	3301      	adds	r3, #1
 80082a2:	613b      	str	r3, [r7, #16]
    idx++;
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	3301      	adds	r3, #1
 80082a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	4413      	add	r3, r2
 80082b0:	2200      	movs	r2, #0
 80082b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	3301      	adds	r3, #1
 80082b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e7      	bne.n	8008292 <USBD_GetString+0x52>
 80082c2:	e000      	b.n	80082c6 <USBD_GetString+0x86>
    return;
 80082c4:	bf00      	nop
  }
}
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80082dc:	e005      	b.n	80082ea <USBD_GetLen+0x1e>
  {
    len++;
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	3301      	adds	r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	3301      	adds	r3, #1
 80082e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1f5      	bne.n	80082de <USBD_GetLen+0x12>
  }

  return len;
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2202      	movs	r2, #2
 8008310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	2100      	movs	r1, #0
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fced 	bl	8008d06 <USBD_LL_Transmit>

  return USBD_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	2100      	movs	r1, #0
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 fcdc 	bl	8008d06 <USBD_LL_Transmit>

  return USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2203      	movs	r2, #3
 8008368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	2100      	movs	r1, #0
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 fce0 	bl	8008d48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	2100      	movs	r1, #0
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 fccf 	bl	8008d48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2204      	movs	r2, #4
 80083c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083c4:	2300      	movs	r3, #0
 80083c6:	2200      	movs	r2, #0
 80083c8:	2100      	movs	r1, #0
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fc9b 	bl	8008d06 <USBD_LL_Transmit>

  return USBD_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2205      	movs	r2, #5
 80083e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083ea:	2300      	movs	r3, #0
 80083ec:	2200      	movs	r2, #0
 80083ee:	2100      	movs	r1, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fca9 	bl	8008d48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008404:	2200      	movs	r2, #0
 8008406:	4912      	ldr	r1, [pc, #72]	; (8008450 <MX_USB_DEVICE_Init+0x50>)
 8008408:	4812      	ldr	r0, [pc, #72]	; (8008454 <MX_USB_DEVICE_Init+0x54>)
 800840a:	f7fe fcdd 	bl	8006dc8 <USBD_Init>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008414:	f7f8 faba 	bl	800098c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008418:	490f      	ldr	r1, [pc, #60]	; (8008458 <MX_USB_DEVICE_Init+0x58>)
 800841a:	480e      	ldr	r0, [pc, #56]	; (8008454 <MX_USB_DEVICE_Init+0x54>)
 800841c:	f7fe fd04 	bl	8006e28 <USBD_RegisterClass>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008426:	f7f8 fab1 	bl	800098c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800842a:	490c      	ldr	r1, [pc, #48]	; (800845c <MX_USB_DEVICE_Init+0x5c>)
 800842c:	4809      	ldr	r0, [pc, #36]	; (8008454 <MX_USB_DEVICE_Init+0x54>)
 800842e:	f7fe fc3b 	bl	8006ca8 <USBD_CDC_RegisterInterface>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008438:	f7f8 faa8 	bl	800098c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800843c:	4805      	ldr	r0, [pc, #20]	; (8008454 <MX_USB_DEVICE_Init+0x54>)
 800843e:	f7fe fd29 	bl	8006e94 <USBD_Start>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008448:	f7f8 faa0 	bl	800098c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800844c:	bf00      	nop
 800844e:	bd80      	pop	{r7, pc}
 8008450:	200000ac 	.word	0x200000ac
 8008454:	200002b4 	.word	0x200002b4
 8008458:	20000018 	.word	0x20000018
 800845c:	20000098 	.word	0x20000098

08008460 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008464:	2200      	movs	r2, #0
 8008466:	4905      	ldr	r1, [pc, #20]	; (800847c <CDC_Init_FS+0x1c>)
 8008468:	4805      	ldr	r0, [pc, #20]	; (8008480 <CDC_Init_FS+0x20>)
 800846a:	f7fe fc37 	bl	8006cdc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800846e:	4905      	ldr	r1, [pc, #20]	; (8008484 <CDC_Init_FS+0x24>)
 8008470:	4803      	ldr	r0, [pc, #12]	; (8008480 <CDC_Init_FS+0x20>)
 8008472:	f7fe fc55 	bl	8006d20 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008476:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008478:	4618      	mov	r0, r3
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20000d90 	.word	0x20000d90
 8008480:	200002b4 	.word	0x200002b4
 8008484:	20000590 	.word	0x20000590

08008488 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800848c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800848e:	4618      	mov	r0, r3
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	6039      	str	r1, [r7, #0]
 80084a2:	71fb      	strb	r3, [r7, #7]
 80084a4:	4613      	mov	r3, r2
 80084a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084a8:	79fb      	ldrb	r3, [r7, #7]
 80084aa:	2b23      	cmp	r3, #35	; 0x23
 80084ac:	d84a      	bhi.n	8008544 <CDC_Control_FS+0xac>
 80084ae:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <CDC_Control_FS+0x1c>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	08008545 	.word	0x08008545
 80084b8:	08008545 	.word	0x08008545
 80084bc:	08008545 	.word	0x08008545
 80084c0:	08008545 	.word	0x08008545
 80084c4:	08008545 	.word	0x08008545
 80084c8:	08008545 	.word	0x08008545
 80084cc:	08008545 	.word	0x08008545
 80084d0:	08008545 	.word	0x08008545
 80084d4:	08008545 	.word	0x08008545
 80084d8:	08008545 	.word	0x08008545
 80084dc:	08008545 	.word	0x08008545
 80084e0:	08008545 	.word	0x08008545
 80084e4:	08008545 	.word	0x08008545
 80084e8:	08008545 	.word	0x08008545
 80084ec:	08008545 	.word	0x08008545
 80084f0:	08008545 	.word	0x08008545
 80084f4:	08008545 	.word	0x08008545
 80084f8:	08008545 	.word	0x08008545
 80084fc:	08008545 	.word	0x08008545
 8008500:	08008545 	.word	0x08008545
 8008504:	08008545 	.word	0x08008545
 8008508:	08008545 	.word	0x08008545
 800850c:	08008545 	.word	0x08008545
 8008510:	08008545 	.word	0x08008545
 8008514:	08008545 	.word	0x08008545
 8008518:	08008545 	.word	0x08008545
 800851c:	08008545 	.word	0x08008545
 8008520:	08008545 	.word	0x08008545
 8008524:	08008545 	.word	0x08008545
 8008528:	08008545 	.word	0x08008545
 800852c:	08008545 	.word	0x08008545
 8008530:	08008545 	.word	0x08008545
 8008534:	08008545 	.word	0x08008545
 8008538:	08008545 	.word	0x08008545
 800853c:	08008545 	.word	0x08008545
 8008540:	08008545 	.word	0x08008545
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008544:	bf00      	nop
  }

  return (USBD_OK);
 8008546:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	4805      	ldr	r0, [pc, #20]	; (8008578 <CDC_Receive_FS+0x24>)
 8008562:	f7fe fbdd 	bl	8006d20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008566:	4804      	ldr	r0, [pc, #16]	; (8008578 <CDC_Receive_FS+0x24>)
 8008568:	f7fe fbf8 	bl	8006d5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800856c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	200002b4 	.word	0x200002b4

0800857c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800858e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008592:	4618      	mov	r0, r3
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
	...

080085a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	6039      	str	r1, [r7, #0]
 80085aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2212      	movs	r2, #18
 80085b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085b2:	4b03      	ldr	r3, [pc, #12]	; (80085c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	200000cc 	.word	0x200000cc

080085c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	6039      	str	r1, [r7, #0]
 80085ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2204      	movs	r2, #4
 80085d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085d6:	4b03      	ldr	r3, [pc, #12]	; (80085e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085d8:	4618      	mov	r0, r3
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	200000ec 	.word	0x200000ec

080085e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	6039      	str	r1, [r7, #0]
 80085f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085f4:	79fb      	ldrb	r3, [r7, #7]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d105      	bne.n	8008606 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	4907      	ldr	r1, [pc, #28]	; (800861c <USBD_FS_ProductStrDescriptor+0x34>)
 80085fe:	4808      	ldr	r0, [pc, #32]	; (8008620 <USBD_FS_ProductStrDescriptor+0x38>)
 8008600:	f7ff fe1e 	bl	8008240 <USBD_GetString>
 8008604:	e004      	b.n	8008610 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	4904      	ldr	r1, [pc, #16]	; (800861c <USBD_FS_ProductStrDescriptor+0x34>)
 800860a:	4805      	ldr	r0, [pc, #20]	; (8008620 <USBD_FS_ProductStrDescriptor+0x38>)
 800860c:	f7ff fe18 	bl	8008240 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008610:	4b02      	ldr	r3, [pc, #8]	; (800861c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20001590 	.word	0x20001590
 8008620:	08008f44 	.word	0x08008f44

08008624 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	6039      	str	r1, [r7, #0]
 800862e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	4904      	ldr	r1, [pc, #16]	; (8008644 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008634:	4804      	ldr	r0, [pc, #16]	; (8008648 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008636:	f7ff fe03 	bl	8008240 <USBD_GetString>
  return USBD_StrDesc;
 800863a:	4b02      	ldr	r3, [pc, #8]	; (8008644 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800863c:	4618      	mov	r0, r3
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20001590 	.word	0x20001590
 8008648:	08008f5c 	.word	0x08008f5c

0800864c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	221a      	movs	r2, #26
 800865c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800865e:	f000 f855 	bl	800870c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008662:	4b02      	ldr	r3, [pc, #8]	; (800866c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200000f0 	.word	0x200000f0

08008670 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	6039      	str	r1, [r7, #0]
 800867a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800867c:	79fb      	ldrb	r3, [r7, #7]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d105      	bne.n	800868e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	4907      	ldr	r1, [pc, #28]	; (80086a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008686:	4808      	ldr	r0, [pc, #32]	; (80086a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008688:	f7ff fdda 	bl	8008240 <USBD_GetString>
 800868c:	e004      	b.n	8008698 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	4904      	ldr	r1, [pc, #16]	; (80086a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008692:	4805      	ldr	r0, [pc, #20]	; (80086a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008694:	f7ff fdd4 	bl	8008240 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008698:	4b02      	ldr	r3, [pc, #8]	; (80086a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20001590 	.word	0x20001590
 80086a8:	08008f70 	.word	0x08008f70

080086ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	4603      	mov	r3, r0
 80086b4:	6039      	str	r1, [r7, #0]
 80086b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d105      	bne.n	80086ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	4907      	ldr	r1, [pc, #28]	; (80086e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086c2:	4808      	ldr	r0, [pc, #32]	; (80086e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086c4:	f7ff fdbc 	bl	8008240 <USBD_GetString>
 80086c8:	e004      	b.n	80086d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	4904      	ldr	r1, [pc, #16]	; (80086e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086ce:	4805      	ldr	r0, [pc, #20]	; (80086e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086d0:	f7ff fdb6 	bl	8008240 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20001590 	.word	0x20001590
 80086e4:	08008f7c 	.word	0x08008f7c

080086e8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	6039      	str	r1, [r7, #0]
 80086f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	220c      	movs	r2, #12
 80086f8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80086fa:	4b03      	ldr	r3, [pc, #12]	; (8008708 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	200000e0 	.word	0x200000e0

0800870c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008712:	4b0f      	ldr	r3, [pc, #60]	; (8008750 <Get_SerialNum+0x44>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008718:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <Get_SerialNum+0x48>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800871e:	4b0e      	ldr	r3, [pc, #56]	; (8008758 <Get_SerialNum+0x4c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4413      	add	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d009      	beq.n	8008746 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008732:	2208      	movs	r2, #8
 8008734:	4909      	ldr	r1, [pc, #36]	; (800875c <Get_SerialNum+0x50>)
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 f814 	bl	8008764 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800873c:	2204      	movs	r2, #4
 800873e:	4908      	ldr	r1, [pc, #32]	; (8008760 <Get_SerialNum+0x54>)
 8008740:	68b8      	ldr	r0, [r7, #8]
 8008742:	f000 f80f 	bl	8008764 <IntToUnicode>
  }
}
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	1fff7a10 	.word	0x1fff7a10
 8008754:	1fff7a14 	.word	0x1fff7a14
 8008758:	1fff7a18 	.word	0x1fff7a18
 800875c:	200000f2 	.word	0x200000f2
 8008760:	20000102 	.word	0x20000102

08008764 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	4613      	mov	r3, r2
 8008770:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008772:	2300      	movs	r3, #0
 8008774:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008776:	2300      	movs	r3, #0
 8008778:	75fb      	strb	r3, [r7, #23]
 800877a:	e027      	b.n	80087cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	0f1b      	lsrs	r3, r3, #28
 8008780:	2b09      	cmp	r3, #9
 8008782:	d80b      	bhi.n	800879c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	0f1b      	lsrs	r3, r3, #28
 8008788:	b2da      	uxtb	r2, r3
 800878a:	7dfb      	ldrb	r3, [r7, #23]
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	4619      	mov	r1, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	440b      	add	r3, r1
 8008794:	3230      	adds	r2, #48	; 0x30
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]
 800879a:	e00a      	b.n	80087b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	0f1b      	lsrs	r3, r3, #28
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	7dfb      	ldrb	r3, [r7, #23]
 80087a4:	005b      	lsls	r3, r3, #1
 80087a6:	4619      	mov	r1, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	440b      	add	r3, r1
 80087ac:	3237      	adds	r2, #55	; 0x37
 80087ae:	b2d2      	uxtb	r2, r2
 80087b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
 80087ba:	005b      	lsls	r3, r3, #1
 80087bc:	3301      	adds	r3, #1
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	4413      	add	r3, r2
 80087c2:	2200      	movs	r2, #0
 80087c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	3301      	adds	r3, #1
 80087ca:	75fb      	strb	r3, [r7, #23]
 80087cc:	7dfa      	ldrb	r2, [r7, #23]
 80087ce:	79fb      	ldrb	r3, [r7, #7]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d3d3      	bcc.n	800877c <IntToUnicode+0x18>
  }
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop
 80087d8:	371c      	adds	r7, #28
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
	...

080087e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b0a0      	sub	sp, #128	; 0x80
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	605a      	str	r2, [r3, #4]
 80087f6:	609a      	str	r2, [r3, #8]
 80087f8:	60da      	str	r2, [r3, #12]
 80087fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80087fc:	f107 0310 	add.w	r3, r7, #16
 8008800:	225c      	movs	r2, #92	; 0x5c
 8008802:	2100      	movs	r1, #0
 8008804:	4618      	mov	r0, r3
 8008806:	f000 fb65 	bl	8008ed4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008812:	d149      	bne.n	80088a8 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008818:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800881a:	2300      	movs	r3, #0
 800881c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800881e:	f107 0310 	add.w	r3, r7, #16
 8008822:	4618      	mov	r0, r3
 8008824:	f7fa feb6 	bl	8003594 <HAL_RCCEx_PeriphCLKConfig>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800882e:	f7f8 f8ad 	bl	800098c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	4b1e      	ldr	r3, [pc, #120]	; (80088b0 <HAL_PCD_MspInit+0xcc>)
 8008838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883a:	4a1d      	ldr	r2, [pc, #116]	; (80088b0 <HAL_PCD_MspInit+0xcc>)
 800883c:	f043 0301 	orr.w	r3, r3, #1
 8008840:	6313      	str	r3, [r2, #48]	; 0x30
 8008842:	4b1b      	ldr	r3, [pc, #108]	; (80088b0 <HAL_PCD_MspInit+0xcc>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	60fb      	str	r3, [r7, #12]
 800884c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_D__Pin|USB_D_A12_Pin;
 800884e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008852:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008854:	2302      	movs	r3, #2
 8008856:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008858:	2300      	movs	r3, #0
 800885a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800885c:	2303      	movs	r3, #3
 800885e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008860:	230a      	movs	r3, #10
 8008862:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008864:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008868:	4619      	mov	r1, r3
 800886a:	4812      	ldr	r0, [pc, #72]	; (80088b4 <HAL_PCD_MspInit+0xd0>)
 800886c:	f7f8 fefa 	bl	8001664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008870:	4b0f      	ldr	r3, [pc, #60]	; (80088b0 <HAL_PCD_MspInit+0xcc>)
 8008872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008874:	4a0e      	ldr	r2, [pc, #56]	; (80088b0 <HAL_PCD_MspInit+0xcc>)
 8008876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800887a:	6353      	str	r3, [r2, #52]	; 0x34
 800887c:	2300      	movs	r3, #0
 800887e:	60bb      	str	r3, [r7, #8]
 8008880:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <HAL_PCD_MspInit+0xcc>)
 8008882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008884:	4a0a      	ldr	r2, [pc, #40]	; (80088b0 <HAL_PCD_MspInit+0xcc>)
 8008886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800888a:	6453      	str	r3, [r2, #68]	; 0x44
 800888c:	4b08      	ldr	r3, [pc, #32]	; (80088b0 <HAL_PCD_MspInit+0xcc>)
 800888e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008894:	60bb      	str	r3, [r7, #8]
 8008896:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008898:	2200      	movs	r2, #0
 800889a:	2100      	movs	r1, #0
 800889c:	2043      	movs	r0, #67	; 0x43
 800889e:	f7f8 feaa 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088a2:	2043      	movs	r0, #67	; 0x43
 80088a4:	f7f8 fec3 	bl	800162e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088a8:	bf00      	nop
 80088aa:	3780      	adds	r7, #128	; 0x80
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	40023800 	.word	0x40023800
 80088b4:	40020000 	.word	0x40020000

080088b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80088cc:	4619      	mov	r1, r3
 80088ce:	4610      	mov	r0, r2
 80088d0:	f7fe fb2d 	bl	8006f2e <USBD_LL_SetupStage>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	440b      	add	r3, r1
 80088fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	78fb      	ldrb	r3, [r7, #3]
 8008904:	4619      	mov	r1, r3
 8008906:	f7fe fb67 	bl	8006fd8 <USBD_LL_DataOutStage>
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b082      	sub	sp, #8
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	4613      	mov	r3, r2
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	4413      	add	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	440b      	add	r3, r1
 8008932:	334c      	adds	r3, #76	; 0x4c
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	78fb      	ldrb	r3, [r7, #3]
 8008938:	4619      	mov	r1, r3
 800893a:	f7fe fc00 	bl	800713e <USBD_LL_DataInStage>
}
 800893e:	bf00      	nop
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b082      	sub	sp, #8
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008954:	4618      	mov	r0, r3
 8008956:	f7fe fd34 	bl	80073c2 <USBD_LL_SOF>
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800896a:	2301      	movs	r3, #1
 800896c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d102      	bne.n	800897c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]
 800897a:	e008      	b.n	800898e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	2b02      	cmp	r3, #2
 8008982:	d102      	bne.n	800898a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008984:	2301      	movs	r3, #1
 8008986:	73fb      	strb	r3, [r7, #15]
 8008988:	e001      	b.n	800898e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800898a:	f7f7 ffff 	bl	800098c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008994:	7bfa      	ldrb	r2, [r7, #15]
 8008996:	4611      	mov	r1, r2
 8008998:	4618      	mov	r0, r3
 800899a:	f7fe fcd4 	bl	8007346 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fe fc7c 	bl	80072a2 <USBD_LL_Reset>
}
 80089aa:	bf00      	nop
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe fccf 	bl	8007366 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	6812      	ldr	r2, [r2, #0]
 80089d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089da:	f043 0301 	orr.w	r3, r3, #1
 80089de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089e8:	4b04      	ldr	r3, [pc, #16]	; (80089fc <HAL_PCD_SuspendCallback+0x48>)
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	4a03      	ldr	r2, [pc, #12]	; (80089fc <HAL_PCD_SuspendCallback+0x48>)
 80089ee:	f043 0306 	orr.w	r3, r3, #6
 80089f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	e000ed00 	.word	0xe000ed00

08008a00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe fcbf 	bl	8007392 <USBD_LL_Resume>
}
 8008a14:	bf00      	nop
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a2e:	78fa      	ldrb	r2, [r7, #3]
 8008a30:	4611      	mov	r1, r2
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe fd17 	bl	8007466 <USBD_LL_IsoOUTIncomplete>
}
 8008a38:	bf00      	nop
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a52:	78fa      	ldrb	r2, [r7, #3]
 8008a54:	4611      	mov	r1, r2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe fcd3 	bl	8007402 <USBD_LL_IsoINIncomplete>
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fe fd29 	bl	80074ca <USBD_LL_DevConnected>
}
 8008a78:	bf00      	nop
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fe fd26 	bl	80074e0 <USBD_LL_DevDisconnected>
}
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d13c      	bne.n	8008b26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008aac:	4a20      	ldr	r2, [pc, #128]	; (8008b30 <USBD_LL_Init+0x94>)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a1e      	ldr	r2, [pc, #120]	; (8008b30 <USBD_LL_Init+0x94>)
 8008ab8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008abc:	4b1c      	ldr	r3, [pc, #112]	; (8008b30 <USBD_LL_Init+0x94>)
 8008abe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ac2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008ac4:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <USBD_LL_Init+0x94>)
 8008ac6:	2206      	movs	r2, #6
 8008ac8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008aca:	4b19      	ldr	r3, [pc, #100]	; (8008b30 <USBD_LL_Init+0x94>)
 8008acc:	2202      	movs	r2, #2
 8008ace:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ad0:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <USBD_LL_Init+0x94>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ad6:	4b16      	ldr	r3, [pc, #88]	; (8008b30 <USBD_LL_Init+0x94>)
 8008ad8:	2202      	movs	r2, #2
 8008ada:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008adc:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <USBD_LL_Init+0x94>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ae2:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <USBD_LL_Init+0x94>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ae8:	4b11      	ldr	r3, [pc, #68]	; (8008b30 <USBD_LL_Init+0x94>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008aee:	4b10      	ldr	r3, [pc, #64]	; (8008b30 <USBD_LL_Init+0x94>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008af4:	4b0e      	ldr	r3, [pc, #56]	; (8008b30 <USBD_LL_Init+0x94>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008afa:	480d      	ldr	r0, [pc, #52]	; (8008b30 <USBD_LL_Init+0x94>)
 8008afc:	f7f9 f8a4 	bl	8001c48 <HAL_PCD_Init>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b06:	f7f7 ff41 	bl	800098c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b0a:	2180      	movs	r1, #128	; 0x80
 8008b0c:	4808      	ldr	r0, [pc, #32]	; (8008b30 <USBD_LL_Init+0x94>)
 8008b0e:	f7fa fb30 	bl	8003172 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b12:	2240      	movs	r2, #64	; 0x40
 8008b14:	2100      	movs	r1, #0
 8008b16:	4806      	ldr	r0, [pc, #24]	; (8008b30 <USBD_LL_Init+0x94>)
 8008b18:	f7fa fae4 	bl	80030e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b1c:	2280      	movs	r2, #128	; 0x80
 8008b1e:	2101      	movs	r1, #1
 8008b20:	4803      	ldr	r0, [pc, #12]	; (8008b30 <USBD_LL_Init+0x94>)
 8008b22:	f7fa fadf 	bl	80030e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	20001790 	.word	0x20001790

08008b34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7f9 f9a0 	bl	8001e90 <HAL_PCD_Start>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 f990 	bl	8008e7c <USBD_Get_USB_Status>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	4608      	mov	r0, r1
 8008b74:	4611      	mov	r1, r2
 8008b76:	461a      	mov	r2, r3
 8008b78:	4603      	mov	r3, r0
 8008b7a:	70fb      	strb	r3, [r7, #3]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70bb      	strb	r3, [r7, #2]
 8008b80:	4613      	mov	r3, r2
 8008b82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b92:	78bb      	ldrb	r3, [r7, #2]
 8008b94:	883a      	ldrh	r2, [r7, #0]
 8008b96:	78f9      	ldrb	r1, [r7, #3]
 8008b98:	f7f9 fe9e 	bl	80028d8 <HAL_PCD_EP_Open>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 f96a 	bl	8008e7c <USBD_Get_USB_Status>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bd0:	78fa      	ldrb	r2, [r7, #3]
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7f9 fee7 	bl	80029a8 <HAL_PCD_EP_Close>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 f94b 	bl	8008e7c <USBD_Get_USB_Status>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c0e:	78fa      	ldrb	r2, [r7, #3]
 8008c10:	4611      	mov	r1, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7f9 ffbf 	bl	8002b96 <HAL_PCD_EP_SetStall>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 f92c 	bl	8008e7c <USBD_Get_USB_Status>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c4c:	78fa      	ldrb	r2, [r7, #3]
 8008c4e:	4611      	mov	r1, r2
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fa f804 	bl	8002c5e <HAL_PCD_EP_ClrStall>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 f90d 	bl	8008e7c <USBD_Get_USB_Status>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	da0b      	bge.n	8008ca4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c8c:	78fb      	ldrb	r3, [r7, #3]
 8008c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c92:	68f9      	ldr	r1, [r7, #12]
 8008c94:	4613      	mov	r3, r2
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	4413      	add	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	440b      	add	r3, r1
 8008c9e:	333e      	adds	r3, #62	; 0x3e
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	e00b      	b.n	8008cbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008caa:	68f9      	ldr	r1, [r7, #12]
 8008cac:	4613      	mov	r3, r2
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008cba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ce2:	78fa      	ldrb	r2, [r7, #3]
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7f9 fdd1 	bl	800288e <HAL_PCD_SetAddress>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 f8c2 	bl	8008e7c <USBD_Get_USB_Status>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b086      	sub	sp, #24
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	603b      	str	r3, [r7, #0]
 8008d12:	460b      	mov	r3, r1
 8008d14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d24:	7af9      	ldrb	r1, [r7, #11]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	f7f9 feea 	bl	8002b02 <HAL_PCD_EP_Transmit>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 f8a1 	bl	8008e7c <USBD_Get_USB_Status>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	607a      	str	r2, [r7, #4]
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	460b      	mov	r3, r1
 8008d56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d66:	7af9      	ldrb	r1, [r7, #11]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	f7f9 fe66 	bl	8002a3c <HAL_PCD_EP_Receive>
 8008d70:	4603      	mov	r3, r0
 8008d72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 f880 	bl	8008e7c <USBD_Get_USB_Status>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d80:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	460b      	mov	r3, r1
 8008d94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d9c:	78fa      	ldrb	r2, [r7, #3]
 8008d9e:	4611      	mov	r1, r2
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7f9 fe96 	bl	8002ad2 <HAL_PCD_EP_GetRxCount>
 8008da6:	4603      	mov	r3, r0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008dbc:	78fb      	ldrb	r3, [r7, #3]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <HAL_PCDEx_LPM_Callback+0x18>
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d01f      	beq.n	8008e06 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008dc6:	e03b      	b.n	8008e40 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d007      	beq.n	8008de0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008dd0:	f7f7 fbbe 	bl	8000550 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008dd4:	4b1c      	ldr	r3, [pc, #112]	; (8008e48 <HAL_PCDEx_LPM_Callback+0x98>)
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	4a1b      	ldr	r2, [pc, #108]	; (8008e48 <HAL_PCDEx_LPM_Callback+0x98>)
 8008dda:	f023 0306 	bic.w	r3, r3, #6
 8008dde:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	6812      	ldr	r2, [r2, #0]
 8008dee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008df2:	f023 0301 	bic.w	r3, r3, #1
 8008df6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fac7 	bl	8007392 <USBD_LL_Resume>
    break;
 8008e04:	e01c      	b.n	8008e40 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	6812      	ldr	r2, [r2, #0]
 8008e14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e18:	f043 0301 	orr.w	r3, r3, #1
 8008e1c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe fa9e 	bl	8007366 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d005      	beq.n	8008e3e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e32:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <HAL_PCDEx_LPM_Callback+0x98>)
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	4a04      	ldr	r2, [pc, #16]	; (8008e48 <HAL_PCDEx_LPM_Callback+0x98>)
 8008e38:	f043 0306 	orr.w	r3, r3, #6
 8008e3c:	6113      	str	r3, [r2, #16]
    break;
 8008e3e:	bf00      	nop
}
 8008e40:	bf00      	nop
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	e000ed00 	.word	0xe000ed00

08008e4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e54:	4b03      	ldr	r3, [pc, #12]	; (8008e64 <USBD_static_malloc+0x18>)
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20001c9c 	.word	0x20001c9c

08008e68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]

}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	2b03      	cmp	r3, #3
 8008e8e:	d817      	bhi.n	8008ec0 <USBD_Get_USB_Status+0x44>
 8008e90:	a201      	add	r2, pc, #4	; (adr r2, 8008e98 <USBD_Get_USB_Status+0x1c>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008ea9 	.word	0x08008ea9
 8008e9c:	08008eaf 	.word	0x08008eaf
 8008ea0:	08008eb5 	.word	0x08008eb5
 8008ea4:	08008ebb 	.word	0x08008ebb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8008eac:	e00b      	b.n	8008ec6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb2:	e008      	b.n	8008ec6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb8:	e005      	b.n	8008ec6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ebe:	e002      	b.n	8008ec6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec4:	bf00      	nop
  }
  return usb_status;
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <memset>:
 8008ed4:	4402      	add	r2, r0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d100      	bne.n	8008ede <memset+0xa>
 8008edc:	4770      	bx	lr
 8008ede:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee2:	e7f9      	b.n	8008ed8 <memset+0x4>

08008ee4 <__libc_init_array>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	4d0d      	ldr	r5, [pc, #52]	; (8008f1c <__libc_init_array+0x38>)
 8008ee8:	4c0d      	ldr	r4, [pc, #52]	; (8008f20 <__libc_init_array+0x3c>)
 8008eea:	1b64      	subs	r4, r4, r5
 8008eec:	10a4      	asrs	r4, r4, #2
 8008eee:	2600      	movs	r6, #0
 8008ef0:	42a6      	cmp	r6, r4
 8008ef2:	d109      	bne.n	8008f08 <__libc_init_array+0x24>
 8008ef4:	4d0b      	ldr	r5, [pc, #44]	; (8008f24 <__libc_init_array+0x40>)
 8008ef6:	4c0c      	ldr	r4, [pc, #48]	; (8008f28 <__libc_init_array+0x44>)
 8008ef8:	f000 f818 	bl	8008f2c <_init>
 8008efc:	1b64      	subs	r4, r4, r5
 8008efe:	10a4      	asrs	r4, r4, #2
 8008f00:	2600      	movs	r6, #0
 8008f02:	42a6      	cmp	r6, r4
 8008f04:	d105      	bne.n	8008f12 <__libc_init_array+0x2e>
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f0c:	4798      	blx	r3
 8008f0e:	3601      	adds	r6, #1
 8008f10:	e7ee      	b.n	8008ef0 <__libc_init_array+0xc>
 8008f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f16:	4798      	blx	r3
 8008f18:	3601      	adds	r6, #1
 8008f1a:	e7f2      	b.n	8008f02 <__libc_init_array+0x1e>
 8008f1c:	08008fac 	.word	0x08008fac
 8008f20:	08008fac 	.word	0x08008fac
 8008f24:	08008fac 	.word	0x08008fac
 8008f28:	08008fb0 	.word	0x08008fb0

08008f2c <_init>:
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2e:	bf00      	nop
 8008f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f32:	bc08      	pop	{r3}
 8008f34:	469e      	mov	lr, r3
 8008f36:	4770      	bx	lr

08008f38 <_fini>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	bf00      	nop
 8008f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3e:	bc08      	pop	{r3}
 8008f40:	469e      	mov	lr, r3
 8008f42:	4770      	bx	lr
