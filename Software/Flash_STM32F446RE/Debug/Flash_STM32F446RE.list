
Flash_STM32F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08007034  08007034  00017034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e24  08007e24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007e24  08007e24  00017e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e2c  08007e2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e2c  08007e2c  00017e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e30  08007e30  00017e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012dc  20000070  08007ea4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000134c  08007ea4  0002134c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145ac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a5b  00000000  00000000  0003464c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  000370a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  000383c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b1e  00000000  00000000  000395c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cf6  00000000  00000000  0005d0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6732  00000000  00000000  00075dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c506  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d8  00000000  00000000  0014c558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800701c 	.word	0x0800701c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800701c 	.word	0x0800701c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f003 fa85 	bl	8003ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f8a9 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f9ef 	bl	80009a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f9c3 	bl	8000950 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005ca:	f000 f93b 	bl	8000844 <MX_SPI2_Init>
  MX_TIM1_Init();
 80005ce:	f000 f96f 	bl	80008b0 <MX_TIM1_Init>
  MX_QUADSPI_Init();
 80005d2:	f000 f90b 	bl	80007ec <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */

  //uart2_init(115200);

  uint8_t data[32] = "HELLO\n";
 80005d6:	4a4a      	ldr	r2, [pc, #296]	; (8000700 <main+0x14c>)
 80005d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e0:	6018      	str	r0, [r3, #0]
 80005e2:	3304      	adds	r3, #4
 80005e4:	8019      	strh	r1, [r3, #0]
 80005e6:	3302      	adds	r3, #2
 80005e8:	0c0a      	lsrs	r2, r1, #16
 80005ea:	701a      	strb	r2, [r3, #0]
 80005ec:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
 80005fc:	615a      	str	r2, [r3, #20]
 80005fe:	761a      	strb	r2, [r3, #24]
  uint8_t dat;
  uint8_t res;
  char print_message[32];

  res = w25qxx_basic_init(W25Q64, W25QXX_INTERFACE_QSPI, W25QXX_BOOL_FALSE);
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	f64e 7016 	movw	r0, #61206	; 0xef16
 8000608:	f002 ff72 	bl	80034f0 <w25qxx_basic_init>
 800060c:	4603      	mov	r3, r0
 800060e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  if (res != 0)
 8000612:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00f      	beq.n	800063a <main+0x86>
  {
      memcpy(data, "Failed to initialise!", 32);
 800061a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800061e:	2220      	movs	r2, #32
 8000620:	4938      	ldr	r1, [pc, #224]	; (8000704 <main+0x150>)
 8000622:	4618      	mov	r0, r3
 8000624:	f006 f884 	bl	8006730 <memcpy>
      HAL_UART_Transmit(&huart2, data, sizeof(data), 10);
 8000628:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800062c:	230a      	movs	r3, #10
 800062e:	2220      	movs	r2, #32
 8000630:	4835      	ldr	r0, [pc, #212]	; (8000708 <main+0x154>)
 8000632:	f005 fcde 	bl	8005ff2 <HAL_UART_Transmit>
      return 1;
 8000636:	2301      	movs	r3, #1
 8000638:	e05e      	b.n	80006f8 <main+0x144>
		counterman++;
		cntval = __HAL_TIM_GET_COUNTER(&htim1);
		// wait for the counter to reach the us input in the parameter
	}*/

  int address = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	dat = (address % 256) & 0xFF;
 800063e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000640:	425a      	negs	r2, r3
 8000642:	b2db      	uxtb	r3, r3
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	bf58      	it	pl
 8000648:	4253      	negpl	r3, r2
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	res = w25qxx_basic_write(address, (uint8_t *)&dat, 1);
 8000650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000652:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000656:	2201      	movs	r2, #1
 8000658:	4618      	mov	r0, r3
 800065a:	f002 ffeb 	bl	8003634 <w25qxx_basic_write>
 800065e:	4603      	mov	r3, r0
 8000660:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	if (res != 0)
 8000664:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000668:	2b00      	cmp	r3, #0
 800066a:	d003      	beq.n	8000674 <main+0xc0>
	{
		(void)w25qxx_basic_deinit();
 800066c:	f002 ffd2 	bl	8003614 <w25qxx_basic_deinit>

		return 1;
 8000670:	2301      	movs	r3, #1
 8000672:	e041      	b.n	80006f8 <main+0x144>
	}
	else
	{
	  sprintf(print_message,"w25qxx: addr %d is %d.\n", address, dat);
 8000674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000678:	1d38      	adds	r0, r7, #4
 800067a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800067c:	4923      	ldr	r1, [pc, #140]	; (800070c <main+0x158>)
 800067e:	f006 f86d 	bl	800675c <siprintf>
	  HAL_UART_Transmit(&huart2, print_message, sizeof(print_message), 10);
 8000682:	1d39      	adds	r1, r7, #4
 8000684:	230a      	movs	r3, #10
 8000686:	2220      	movs	r2, #32
 8000688:	481f      	ldr	r0, [pc, #124]	; (8000708 <main+0x154>)
 800068a:	f005 fcb2 	bl	8005ff2 <HAL_UART_Transmit>
	}

	res = w25qxx_basic_read(0x0, (uint8_t *)&dat, 1);
 800068e:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000692:	2201      	movs	r2, #1
 8000694:	4619      	mov	r1, r3
 8000696:	2000      	movs	r0, #0
 8000698:	f002 ffe4 	bl	8003664 <w25qxx_basic_read>
 800069c:	4603      	mov	r3, r0
 800069e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	if (res != 0)
 80006a2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d011      	beq.n	80006ce <main+0x11a>
	{
	  (void)w25qxx_basic_deinit();
 80006aa:	f002 ffb3 	bl	8003614 <w25qxx_basic_deinit>
	  memcpy(data, "Failed to read!", 32);
 80006ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b2:	2220      	movs	r2, #32
 80006b4:	4916      	ldr	r1, [pc, #88]	; (8000710 <main+0x15c>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 f83a 	bl	8006730 <memcpy>
	  HAL_UART_Transmit(&huart2, data, sizeof(data), 10);
 80006bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80006c0:	230a      	movs	r3, #10
 80006c2:	2220      	movs	r2, #32
 80006c4:	4810      	ldr	r0, [pc, #64]	; (8000708 <main+0x154>)
 80006c6:	f005 fc94 	bl	8005ff2 <HAL_UART_Transmit>
	  return 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e014      	b.n	80006f8 <main+0x144>
	}
	else
	{
	  sprintf(print_message,"w25qxx: addr %d is %d.\n", address, dat);
 80006ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006d2:	1d38      	adds	r0, r7, #4
 80006d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <main+0x158>)
 80006d8:	f006 f840 	bl	800675c <siprintf>
	  HAL_UART_Transmit(&huart2, print_message, sizeof(print_message), 10);
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	230a      	movs	r3, #10
 80006e0:	2220      	movs	r2, #32
 80006e2:	4809      	ldr	r0, [pc, #36]	; (8000708 <main+0x154>)
 80006e4:	f005 fc85 	bl	8005ff2 <HAL_UART_Transmit>
	  //w25qxx_interface_debug_print("w25qxx: addr %d is %d.\n", 0x0, dat);
	}

	address++;
 80006e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006ea:	3301      	adds	r3, #1
 80006ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	//HAL_UART_Transmit(&huart2, data, sizeof(data), 10);
	HAL_Delay(1000);
 80006ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f2:	f003 fa5b 	bl	8003bac <HAL_Delay>
	dat = (address % 256) & 0xFF;
 80006f6:	e7a2      	b.n	800063e <main+0x8a>
  }
  /* USER CODE END 3 */
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	08007074 	.word	0x08007074
 8000704:	08007034 	.word	0x08007034
 8000708:	20000178 	.word	0x20000178
 800070c:	0800704c 	.word	0x0800704c
 8000710:	08007064 	.word	0x08007064

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2234      	movs	r2, #52	; 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f006 f812 	bl	800674c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <SystemClock_Config+0xd0>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a28      	ldr	r2, [pc, #160]	; (80007e4 <SystemClock_Config+0xd0>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <SystemClock_Config+0xd0>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <SystemClock_Config+0xd4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <SystemClock_Config+0xd4>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <SystemClock_Config+0xd4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800078c:	2348      	movs	r3, #72	; 0x48
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4618      	mov	r0, r3
 80007a2:	f004 fde5 	bl	8005370 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007ac:	f000 f980 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	2102      	movs	r1, #2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 fa85 	bl	8004cdc <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007d8:	f000 f96a 	bl	8000ab0 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	; 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_QUADSPI_Init+0x50>)
 80007f2:	4a13      	ldr	r2, [pc, #76]	; (8000840 <MX_QUADSPI_Init+0x54>)
 80007f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_QUADSPI_Init+0x50>)
 80007f8:	22ff      	movs	r2, #255	; 0xff
 80007fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_QUADSPI_Init+0x50>)
 80007fe:	2201      	movs	r2, #1
 8000800:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_QUADSPI_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_QUADSPI_Init+0x50>)
 800080a:	2201      	movs	r2, #1
 800080c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_QUADSPI_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_QUADSPI_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_QUADSPI_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_QUADSPI_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_QUADSPI_Init+0x50>)
 8000828:	f003 fddc 	bl	80043e4 <HAL_QSPI_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000832:	f000 f93d 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000008c 	.word	0x2000008c
 8000840:	a0001000 	.word	0xa0001000

08000844 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_SPI2_Init+0x64>)
 800084a:	4a18      	ldr	r2, [pc, #96]	; (80008ac <MX_SPI2_Init+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_SPI2_Init+0x64>)
 8000850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000854:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_SPI2_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_SPI2_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_SPI2_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_SPI2_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_SPI2_Init+0x64>)
 8000870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000874:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_SPI2_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_SPI2_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_SPI2_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_SPI2_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_SPI2_Init+0x64>)
 8000890:	220a      	movs	r2, #10
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_SPI2_Init+0x64>)
 8000896:	f005 f809 	bl	80058ac <HAL_SPI_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008a0:	f000 f906 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000d8 	.word	0x200000d8
 80008ac:	40003800 	.word	0x40003800

080008b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	463b      	mov	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <MX_TIM1_Init+0x98>)
 80008ce:	4a1f      	ldr	r2, [pc, #124]	; (800094c <MX_TIM1_Init+0x9c>)
 80008d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_TIM1_Init+0x98>)
 80008d4:	2247      	movs	r2, #71	; 0x47
 80008d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_TIM1_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_TIM1_Init+0x98>)
 80008e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_TIM1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_TIM1_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_TIM1_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008f8:	4813      	ldr	r0, [pc, #76]	; (8000948 <MX_TIM1_Init+0x98>)
 80008fa:	f005 f860 	bl	80059be <HAL_TIM_Base_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000904:	f000 f8d4 	bl	8000ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	4619      	mov	r1, r3
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_TIM1_Init+0x98>)
 8000916:	f005 f8a1 	bl	8005a5c <HAL_TIM_ConfigClockSource>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000920:	f000 f8c6 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_TIM1_Init+0x98>)
 8000932:	f005 fa95 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800093c:	f000 f8b8 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000130 	.word	0x20000130
 800094c:	40010000 	.word	0x40010000

08000950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <MX_USART2_UART_Init+0x50>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_USART2_UART_Init+0x4c>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USART2_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000988:	f005 fae6 	bl	8005f58 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000992:	f000 f88d 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000178 	.word	0x20000178
 80009a0:	40004400 	.word	0x40004400

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <MX_GPIO_Init+0xfc>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a37      	ldr	r2, [pc, #220]	; (8000aa0 <MX_GPIO_Init+0xfc>)
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <MX_GPIO_Init+0xfc>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0304 	and.w	r3, r3, #4
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <MX_GPIO_Init+0xfc>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a30      	ldr	r2, [pc, #192]	; (8000aa0 <MX_GPIO_Init+0xfc>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <MX_GPIO_Init+0xfc>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <MX_GPIO_Init+0xfc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a29      	ldr	r2, [pc, #164]	; (8000aa0 <MX_GPIO_Init+0xfc>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <MX_GPIO_Init+0xfc>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <MX_GPIO_Init+0xfc>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <MX_GPIO_Init+0xfc>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <MX_GPIO_Init+0xfc>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	481d      	ldr	r0, [pc, #116]	; (8000aa4 <MX_GPIO_Init+0x100>)
 8000a30:	f003 fcbe 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3a:	481b      	ldr	r0, [pc, #108]	; (8000aa8 <MX_GPIO_Init+0x104>)
 8000a3c:	f003 fcb8 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4815      	ldr	r0, [pc, #84]	; (8000aac <MX_GPIO_Init+0x108>)
 8000a58:	f003 fa22 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_GPIO_Init+0x100>)
 8000a74:	f003 fa14 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_GPIO_Init+0x104>)
 8000a92:	f003 fa05 	bl	8003ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40020800 	.word	0x40020800

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afa:	2007      	movs	r0, #7
 8000afc:	f003 f92c 	bl	8003d58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a30      	ldr	r2, [pc, #192]	; (8000bec <HAL_QSPI_MspInit+0xe0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d15a      	bne.n	8000be4 <HAL_QSPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <HAL_QSPI_MspInit+0xe4>)
 8000b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b36:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <HAL_QSPI_MspInit+0xe4>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6393      	str	r3, [r2, #56]	; 0x38
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <HAL_QSPI_MspInit+0xe4>)
 8000b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <HAL_QSPI_MspInit+0xe4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a27      	ldr	r2, [pc, #156]	; (8000bf0 <HAL_QSPI_MspInit+0xe4>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <HAL_QSPI_MspInit+0xe4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <HAL_QSPI_MspInit+0xe4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a20      	ldr	r2, [pc, #128]	; (8000bf0 <HAL_QSPI_MspInit+0xe4>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_QSPI_MspInit+0xe4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b82:	2304      	movs	r3, #4
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000b92:	2309      	movs	r3, #9
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <HAL_QSPI_MspInit+0xe8>)
 8000b9e:	f003 f97f 	bl	8003ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ba2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000bb4:	2309      	movs	r3, #9
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480e      	ldr	r0, [pc, #56]	; (8000bf8 <HAL_QSPI_MspInit+0xec>)
 8000bc0:	f003 f96e 	bl	8003ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bc4:	2340      	movs	r3, #64	; 0x40
 8000bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <HAL_QSPI_MspInit+0xe8>)
 8000be0:	f003 f95e 	bl	8003ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	; 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	a0001000 	.word	0xa0001000
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020400 	.word	0x40020400
 8000bf8:	40020800 	.word	0x40020800

08000bfc <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_QSPI_MspDeInit+0x38>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d10e      	bne.n	8000c2c <HAL_QSPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_QSPI_MspDeInit+0x3c>)
 8000c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c12:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <HAL_QSPI_MspDeInit+0x3c>)
 8000c14:	f023 0302 	bic.w	r3, r3, #2
 8000c18:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8000c1a:	2144      	movs	r1, #68	; 0x44
 8000c1c:	4807      	ldr	r0, [pc, #28]	; (8000c3c <HAL_QSPI_MspDeInit+0x40>)
 8000c1e:	f003 fad3 	bl	80041c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9|GPIO_PIN_10);
 8000c22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <HAL_QSPI_MspDeInit+0x44>)
 8000c28:	f003 face 	bl	80041c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	a0001000 	.word	0xa0001000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	40020800 	.word	0x40020800

08000c44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a30      	ldr	r2, [pc, #192]	; (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d15a      	bne.n	8000d1c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <HAL_SPI_MspInit+0xe4>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a2e      	ldr	r2, [pc, #184]	; (8000d28 <HAL_SPI_MspInit+0xe4>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b2c      	ldr	r3, [pc, #176]	; (8000d28 <HAL_SPI_MspInit+0xe4>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <HAL_SPI_MspInit+0xe4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <HAL_SPI_MspInit+0xe4>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <HAL_SPI_MspInit+0xe4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <HAL_SPI_MspInit+0xe4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a20      	ldr	r2, [pc, #128]	; (8000d28 <HAL_SPI_MspInit+0xe4>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <HAL_SPI_MspInit+0xe4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4815      	ldr	r0, [pc, #84]	; (8000d2c <HAL_SPI_MspInit+0xe8>)
 8000cd6:	f003 f8e3 	bl	8003ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cea:	2305      	movs	r3, #5
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <HAL_SPI_MspInit+0xe8>)
 8000cf6:	f003 f8d3 	bl	8003ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <HAL_SPI_MspInit+0xec>)
 8000d18:	f003 f8c2 	bl	8003ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40003800 	.word	0x40003800
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020400 	.word	0x40020400

08000d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <HAL_TIM_Base_MspInit+0x3c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10d      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_TIM_Base_MspInit+0x40>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <HAL_TIM_Base_MspInit+0x40>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_TIM_Base_MspInit+0x40>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40010000 	.word	0x40010000
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_UART_MspInit+0x84>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12b      	bne.n	8000df2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de2:	2307      	movs	r3, #7
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000dee:	f003 f857 	bl	8003ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40004400 	.word	0x40004400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f002 fe8a 	bl	8003b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f005 fc26 	bl	80066dc <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20020000 	.word	0x20020000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	200001bc 	.word	0x200001bc
 8000ec4:	20001350 	.word	0x20001350

08000ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <delay_us>:
 * @brief     delay us
 * @param[in] us
 * @note      none
 */
void delay_us(uint32_t us)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    uint32_t tnow;
    uint32_t tcnt;
    uint32_t reload;
    
    /* set the used param */
    tcnt = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
    reload = SysTick->LOAD;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <delay_us+0x74>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	617b      	str	r3, [r7, #20]
    ticks = us * gs_fac_us;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <delay_us+0x78>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	fb02 f303 	mul.w	r3, r2, r3
 8000f08:	613b      	str	r3, [r7, #16]
    told = SysTick->VAL;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <delay_us+0x74>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61fb      	str	r3, [r7, #28]
    
    /* delay */
    while(1)
    {
        tnow = SysTick->VAL;
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <delay_us+0x74>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d0f8      	beq.n	8000f10 <delay_us+0x24>
        {
            if (tnow < told)
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d206      	bcs.n	8000f34 <delay_us+0x48>
            {
                tcnt += told - tnow;
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4413      	add	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	e007      	b.n	8000f44 <delay_us+0x58>
            }
            else 
            {
                tcnt += reload - tnow + told;
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1ad2      	subs	r2, r2, r3
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4413      	add	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d200      	bcs.n	8000f52 <delay_us+0x66>
        tnow = SysTick->VAL;
 8000f50:	e7de      	b.n	8000f10 <delay_us+0x24>
            {
                break;
 8000f52:	bf00      	nop
            }
        }
    }
}
 8000f54:	bf00      	nop
 8000f56:	3724      	adds	r7, #36	; 0x24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e010 	.word	0xe000e010
 8000f64:	200001c0 	.word	0x200001c0

08000f68 <delay_ms>:
 * @brief     delay ms
 * @param[in] ms
 * @note      none
 */
void delay_ms(uint32_t ms)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    /* use the hal delay */
    HAL_Delay(ms);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f002 fe1b 	bl	8003bac <HAL_Delay>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <a_w25qxx_spi_write_read>:
 *             - 0 success
 *             - 1 write read failed
 * @note       none
 */
static uint8_t a_w25qxx_spi_write_read(w25qxx_handle_t *handle, uint8_t *in_buf, uint32_t in_len, uint8_t *out_buf, uint32_t out_len)
{
 8000f7e:	b590      	push	{r4, r7, lr}
 8000f80:	b08f      	sub	sp, #60	; 0x3c
 8000f82:	af0a      	add	r7, sp, #40	; 0x28
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	603b      	str	r3, [r7, #0]
    if (handle->spi_qspi_write_read(0x00, 0x00, 0x00000000, 0x00, 0x00,                /* write read data */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	689c      	ldr	r4, [r3, #8]
 8000f90:	2301      	movs	r3, #1
 8000f92:	9309      	str	r3, [sp, #36]	; 0x24
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	9308      	str	r3, [sp, #32]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	9307      	str	r3, [sp, #28]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	9306      	str	r3, [sp, #24]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	9305      	str	r3, [sp, #20]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9304      	str	r3, [sp, #16]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9303      	str	r3, [sp, #12]
 8000fac:	2300      	movs	r3, #0
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	47a0      	blx	r4
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <a_w25qxx_spi_write_read+0x4e>
                                    0x00000000, 0x00, 0x00, 
                                    0x00, in_buf, in_len, out_buf, out_len, 1) != 0)
    {
        return 1;                                                                      /* return error */
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <a_w25qxx_spi_write_read+0x50>
    }
    else
    {
        return 0;                                                                      /* success return 0 */
 8000fcc:	2300      	movs	r3, #0
    }
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd90      	pop	{r4, r7, pc}

08000fd6 <a_w25qxx_qspi_write_read>:
static uint8_t a_w25qxx_qspi_write_read(w25qxx_handle_t *handle, uint8_t instruction, uint8_t instruction_line,
                                        uint32_t address, uint8_t address_line, uint8_t address_len,
                                        uint32_t alternate, uint8_t alternate_line, uint8_t alternate_len,
                                        uint8_t dummy, uint8_t *in_buf, uint32_t in_len,
                                        uint8_t *out_buf, uint32_t out_len, uint8_t data_line)
{
 8000fd6:	b590      	push	{r4, r7, lr}
 8000fd8:	b08f      	sub	sp, #60	; 0x3c
 8000fda:	af0a      	add	r7, sp, #40	; 0x28
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	72fb      	strb	r3, [r7, #11]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	72bb      	strb	r3, [r7, #10]
    if (handle->spi_qspi_write_read(instruction, instruction_line, address, address_line, address_len,        /* write read data */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	689c      	ldr	r4, [r3, #8]
 8000fec:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ff0:	7ab9      	ldrb	r1, [r7, #10]
 8000ff2:	7af8      	ldrb	r0, [r7, #11]
 8000ff4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8000ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ffc:	9308      	str	r3, [sp, #32]
 8000ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001000:	9307      	str	r3, [sp, #28]
 8001002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001004:	9306      	str	r3, [sp, #24]
 8001006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001008:	9305      	str	r3, [sp, #20]
 800100a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800100e:	9304      	str	r3, [sp, #16]
 8001010:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001014:	9303      	str	r3, [sp, #12]
 8001016:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	4613      	mov	r3, r2
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	47a0      	blx	r4
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <a_w25qxx_qspi_write_read+0x60>
                                    alternate, alternate_line, alternate_len, 
                                    dummy, in_buf, in_len, out_buf, out_len, data_line) != 0)
    {
        return 1;                                                                                             /* return error */
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <a_w25qxx_qspi_write_read+0x62>
    }
    else
    {
        return 0;                                                                                             /* success return 0 */
 8001036:	2300      	movs	r3, #0
    }
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}

08001040 <w25qxx_set_dual_quad_spi>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t w25qxx_set_dual_quad_spi(w25qxx_handle_t *handle, w25qxx_bool_t enable)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                                    /* check handle */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <w25qxx_set_dual_quad_spi+0x16>
    {
        return 2;                                          /* return error */
 8001052:	2302      	movs	r3, #2
 8001054:	e003      	b.n	800105e <w25qxx_set_dual_quad_spi+0x1e>
    }

    handle->dual_quad_spi_enable = (uint8_t)enable;        /* set enable */
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	78fa      	ldrb	r2, [r7, #3]
 800105a:	77da      	strb	r2, [r3, #31]
    
    return 0;                                              /* success return 0 */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <w25qxx_set_type>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t w25qxx_set_type(w25qxx_handle_t *handle, w25qxx_type_t type)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	807b      	strh	r3, [r7, #2]
    if (handle == NULL)                  /* check handle */
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <w25qxx_set_type+0x16>
    {
        return 2;                        /* return error */
 800107c:	2302      	movs	r3, #2
 800107e:	e003      	b.n	8001088 <w25qxx_set_type+0x1e>
    }

    handle->type = (uint16_t)type;       /* set type */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	835a      	strh	r2, [r3, #26]
    
    return 0;                            /* success return 0 */
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <w25qxx_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t w25qxx_set_interface(w25qxx_handle_t *handle, w25qxx_interface_t interface)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                           /* check handle */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <w25qxx_set_interface+0x16>
    {
        return 2;                                 /* return error */
 80010a6:	2302      	movs	r3, #2
 80010a8:	e004      	b.n	80010b4 <w25qxx_set_interface+0x20>
    }

    handle->spi_qspi = (uint8_t)interface;        /* set interface */
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	78fa      	ldrb	r2, [r7, #3]
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return 0;                                     /* success return 0 */
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <w25qxx_set_address_mode>:
 *             - 3 handle is not initialized
 *             - 4 current type can't use this function
 * @note      none
 */
uint8_t w25qxx_set_address_mode(w25qxx_handle_t *handle, w25qxx_address_mode_t mode)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b090      	sub	sp, #64	; 0x40
 80010c4:	af0c      	add	r7, sp, #48	; 0x30
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t buf[1];
    
    if (handle == NULL)                                                               /* check handle */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <w25qxx_set_address_mode+0x16>
    {
        return 2;                                                                     /* return error */
 80010d2:	2302      	movs	r3, #2
 80010d4:	e098      	b.n	8001208 <w25qxx_set_address_mode+0x148>
    }   
    if (handle->inited != 1)                                                          /* check handle initialization */
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7e1b      	ldrb	r3, [r3, #24]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d001      	beq.n	80010e2 <w25qxx_set_address_mode+0x22>
    {
        return 3;                                                                     /* return error */
 80010de:	2303      	movs	r3, #3
 80010e0:	e092      	b.n	8001208 <w25qxx_set_address_mode+0x148>
    }
    if (handle->type < W25Q256)                                                       /* check type */
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	8b5b      	ldrh	r3, [r3, #26]
 80010e6:	f64e 7217 	movw	r2, #61207	; 0xef17
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d805      	bhi.n	80010fa <w25qxx_set_address_mode+0x3a>
    {
        handle->debug_print("w25qxx: current type can't use this function.\n");       /* current type can't use this function */
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4847      	ldr	r0, [pc, #284]	; (8001210 <w25qxx_set_address_mode+0x150>)
 80010f4:	4798      	blx	r3
       
        return 4;                                                                     /* return error */
 80010f6:	2304      	movs	r3, #4
 80010f8:	e086      	b.n	8001208 <w25qxx_set_address_mode+0x148>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                     /* spi interface */
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d14e      	bne.n	80011a2 <w25qxx_set_address_mode+0xe2>
    {
        if (handle->dual_quad_spi_enable != 0)                                        /* enable dual quad spi */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7fdb      	ldrb	r3, [r3, #31]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d02e      	beq.n	800116a <w25qxx_set_address_mode+0xaa>
        {
            if (mode == W25QXX_ADDRESS_MODE_3_BYTE)                                   /* address 3 mode byte */
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <w25qxx_set_address_mode+0x58>
            {
                buf[0] = 0xE9;                                                        /* 3 byte mode */
 8001112:	23e9      	movs	r3, #233	; 0xe9
 8001114:	733b      	strb	r3, [r7, #12]
 8001116:	e001      	b.n	800111c <w25qxx_set_address_mode+0x5c>
            }
            else                                                                      /* address 4 mode byte */
            {
                buf[0] = 0xB7;                                                        /* 4 byte mode */
 8001118:	23b7      	movs	r3, #183	; 0xb7
 800111a:	733b      	strb	r3, [r7, #12]
            }
            res = a_w25qxx_qspi_write_read(handle, buf[0], 1,
 800111c:	7b39      	ldrb	r1, [r7, #12]
 800111e:	2300      	movs	r3, #0
 8001120:	930a      	str	r3, [sp, #40]	; 0x28
 8001122:	2300      	movs	r3, #0
 8001124:	9309      	str	r3, [sp, #36]	; 0x24
 8001126:	2300      	movs	r3, #0
 8001128:	9308      	str	r3, [sp, #32]
 800112a:	2300      	movs	r3, #0
 800112c:	9307      	str	r3, [sp, #28]
 800112e:	2300      	movs	r3, #0
 8001130:	9306      	str	r3, [sp, #24]
 8001132:	2300      	movs	r3, #0
 8001134:	9305      	str	r3, [sp, #20]
 8001136:	2300      	movs	r3, #0
 8001138:	9304      	str	r3, [sp, #16]
 800113a:	2300      	movs	r3, #0
 800113c:	9303      	str	r3, [sp, #12]
 800113e:	2300      	movs	r3, #0
 8001140:	9302      	str	r3, [sp, #8]
 8001142:	2300      	movs	r3, #0
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	2300      	movs	r3, #0
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	2201      	movs	r2, #1
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff41 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                         /* qspi write read */
            if (res != 0)                                                             /* check result */
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d050      	beq.n	8001200 <w25qxx_set_address_mode+0x140>
            {
                handle->debug_print("w25qxx: set address mode failed.\n");            /* set address mode failed */
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	482c      	ldr	r0, [pc, #176]	; (8001214 <w25qxx_set_address_mode+0x154>)
 8001164:	4798      	blx	r3
               
                return 1;                                                             /* return error */
 8001166:	2301      	movs	r3, #1
 8001168:	e04e      	b.n	8001208 <w25qxx_set_address_mode+0x148>
            }
        }
        else                                                                          /* single spi */
        {
            if (mode == W25QXX_ADDRESS_MODE_3_BYTE)                                   /* address 3 mode byte */
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <w25qxx_set_address_mode+0xb6>
            {
                buf[0] = 0xE9;                                                        /* 3 byte mode */
 8001170:	23e9      	movs	r3, #233	; 0xe9
 8001172:	733b      	strb	r3, [r7, #12]
 8001174:	e001      	b.n	800117a <w25qxx_set_address_mode+0xba>
            }
            else                                                                      /* address 4 mode byte */
            {
                buf[0] = 0xB7;                                                        /* 4 byte mode */
 8001176:	23b7      	movs	r3, #183	; 0xb7
 8001178:	733b      	strb	r3, [r7, #12]
            }
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);        /* spi write read */
 800117a:	f107 010c 	add.w	r1, r7, #12
 800117e:	2300      	movs	r3, #0
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	2201      	movs	r2, #1
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fef9 	bl	8000f7e <a_w25qxx_spi_write_read>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
            if (res != 0)                                                             /* check result */
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d034      	beq.n	8001200 <w25qxx_set_address_mode+0x140>
            {
                handle->debug_print("w25qxx: set address mode failed.\n");            /* set address mode failed */
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	481e      	ldr	r0, [pc, #120]	; (8001214 <w25qxx_set_address_mode+0x154>)
 800119c:	4798      	blx	r3
               
                return 1;                                                             /* return error */
 800119e:	2301      	movs	r3, #1
 80011a0:	e032      	b.n	8001208 <w25qxx_set_address_mode+0x148>
            }
        }
    }
    else                                                                              /* qspi interface */
    {
        if (mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* address 3 mode byte */
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <w25qxx_set_address_mode+0xee>
        {
            buf[0] = 0xE9;                                                            /* 3 byte mode */
 80011a8:	23e9      	movs	r3, #233	; 0xe9
 80011aa:	733b      	strb	r3, [r7, #12]
 80011ac:	e001      	b.n	80011b2 <w25qxx_set_address_mode+0xf2>
        }
        else                                                                          /* address 4 mode byte */
        {
            buf[0] = 0xB7;                                                            /* 4 byte mode */
 80011ae:	23b7      	movs	r3, #183	; 0xb7
 80011b0:	733b      	strb	r3, [r7, #12]
        }
        res = a_w25qxx_qspi_write_read(handle, buf[0], 4,
 80011b2:	7b39      	ldrb	r1, [r7, #12]
 80011b4:	2300      	movs	r3, #0
 80011b6:	930a      	str	r3, [sp, #40]	; 0x28
 80011b8:	2300      	movs	r3, #0
 80011ba:	9309      	str	r3, [sp, #36]	; 0x24
 80011bc:	2300      	movs	r3, #0
 80011be:	9308      	str	r3, [sp, #32]
 80011c0:	2300      	movs	r3, #0
 80011c2:	9307      	str	r3, [sp, #28]
 80011c4:	2300      	movs	r3, #0
 80011c6:	9306      	str	r3, [sp, #24]
 80011c8:	2300      	movs	r3, #0
 80011ca:	9305      	str	r3, [sp, #20]
 80011cc:	2300      	movs	r3, #0
 80011ce:	9304      	str	r3, [sp, #16]
 80011d0:	2300      	movs	r3, #0
 80011d2:	9303      	str	r3, [sp, #12]
 80011d4:	2300      	movs	r3, #0
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2300      	movs	r3, #0
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2300      	movs	r3, #0
 80011e2:	2204      	movs	r2, #4
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff fef6 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                             /* qspi write read */
        if (res != 0)                                                                 /* check result */
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <w25qxx_set_address_mode+0x140>
        {
            handle->debug_print("w25qxx: set address mode failed.\n");                /* set address mode failed */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	4806      	ldr	r0, [pc, #24]	; (8001214 <w25qxx_set_address_mode+0x154>)
 80011fa:	4798      	blx	r3
           
            return 1;                                                                 /* return error */
 80011fc:	2301      	movs	r3, #1
 80011fe:	e003      	b.n	8001208 <w25qxx_set_address_mode+0x148>
        }
    }
    
    handle->address_mode = (uint8_t)mode;                                             /* set address mode */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	78fa      	ldrb	r2, [r7, #3]
 8001204:	771a      	strb	r2, [r3, #28]
    
    return 0;                                                                         /* success return 0 */
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	08007094 	.word	0x08007094
 8001214:	080070c4 	.word	0x080070c4

08001218 <w25qxx_init>:
 *            - 7 reset failed
 *            - 8 set address mode failed
 * @note      none
 */
uint8_t w25qxx_init(w25qxx_handle_t *handle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b092      	sub	sp, #72	; 0x48
 800121c:	af0c      	add	r7, sp, #48	; 0x30
 800121e:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t buf[4];
    uint8_t out[2];
    uint16_t id;
    
    if (handle == NULL)                                                                    /* check handle */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <w25qxx_init+0x14>
    {
        return 2;                                                                          /* return error */
 8001226:	2302      	movs	r3, #2
 8001228:	f000 bc0e 	b.w	8001a48 <w25qxx_init+0x830>
    }
    if (handle->debug_print == NULL)                                                       /* check debug_print */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <w25qxx_init+0x22>
    {
        return 3;                                                                          /* return error */
 8001234:	2303      	movs	r3, #3
 8001236:	f000 bc07 	b.w	8001a48 <w25qxx_init+0x830>
    }
    if (handle->spi_qspi_init == NULL)                                                     /* check spi_qspi_init */
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d105      	bne.n	800124e <w25qxx_init+0x36>
    {
        handle->debug_print("w25qxx: spi_qspi_init is null.\n");                           /* spi_qspi_init is null */
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	4885      	ldr	r0, [pc, #532]	; (800145c <w25qxx_init+0x244>)
 8001248:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800124a:	2303      	movs	r3, #3
 800124c:	e3fc      	b.n	8001a48 <w25qxx_init+0x830>
    }
    if (handle->spi_qspi_deinit == NULL)                                                   /* check spi_qspi_deinit */
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d105      	bne.n	8001262 <w25qxx_init+0x4a>
    {
        handle->debug_print("w25qxx: spi_qspi_deinit is null.\n");                         /* spi_qspi_deinit is null */
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4881      	ldr	r0, [pc, #516]	; (8001460 <w25qxx_init+0x248>)
 800125c:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800125e:	2303      	movs	r3, #3
 8001260:	e3f2      	b.n	8001a48 <w25qxx_init+0x830>
    }
    if (handle->spi_qspi_write_read == NULL)                                               /* check spi_qspi_write_read */
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d105      	bne.n	8001276 <w25qxx_init+0x5e>
    {
        handle->debug_print("w25qxx: spi_qspi_write_read is null.\n");                     /* spi_qspi_write_read is null */
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	487d      	ldr	r0, [pc, #500]	; (8001464 <w25qxx_init+0x24c>)
 8001270:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8001272:	2303      	movs	r3, #3
 8001274:	e3e8      	b.n	8001a48 <w25qxx_init+0x830>
    }
    if (handle->delay_us == NULL)                                                          /* check delay_us */
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <w25qxx_init+0x72>
    {
        handle->debug_print("w25qxx: delay_us is null.\n");                                /* delay_us is null */
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4879      	ldr	r0, [pc, #484]	; (8001468 <w25qxx_init+0x250>)
 8001284:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8001286:	2303      	movs	r3, #3
 8001288:	e3de      	b.n	8001a48 <w25qxx_init+0x830>
    }
    if (handle->delay_ms == NULL)                                                          /* check delay_ms */
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d105      	bne.n	800129e <w25qxx_init+0x86>
    {
        handle->debug_print("w25qxx: delay_ms is null.\n");                                /* delay_ms is null */
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	4875      	ldr	r0, [pc, #468]	; (800146c <w25qxx_init+0x254>)
 8001298:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800129a:	2303      	movs	r3, #3
 800129c:	e3d4      	b.n	8001a48 <w25qxx_init+0x830>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                          /* spi interface */
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f040 81cf 	bne.w	8001648 <w25qxx_init+0x430>
    {
        res = handle->spi_qspi_init();                                                     /* spi init */
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4798      	blx	r3
 80012b0:	4603      	mov	r3, r0
 80012b2:	75fb      	strb	r3, [r7, #23]
        if (res != 0)                                                                      /* check result */
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <w25qxx_init+0xae>
        {
            handle->debug_print("w25qxx: spi init failed.\n");                             /* spi init failed */
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	486c      	ldr	r0, [pc, #432]	; (8001470 <w25qxx_init+0x258>)
 80012c0:	4798      	blx	r3
           
            return 1;                                                                      /* return error */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e3c0      	b.n	8001a48 <w25qxx_init+0x830>
        }
        if (handle->dual_quad_spi_enable != 0)                                             /* enable dual quad spi */
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7fdb      	ldrb	r3, [r3, #31]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 810e 	beq.w	80014ec <w25qxx_init+0x2d4>
        {
            res = a_w25qxx_qspi_write_read(handle,
 80012d0:	2301      	movs	r3, #1
 80012d2:	930a      	str	r3, [sp, #40]	; 0x28
 80012d4:	2301      	movs	r3, #1
 80012d6:	9309      	str	r3, [sp, #36]	; 0x24
 80012d8:	f107 030a 	add.w	r3, r7, #10
 80012dc:	9308      	str	r3, [sp, #32]
 80012de:	2300      	movs	r3, #0
 80012e0:	9307      	str	r3, [sp, #28]
 80012e2:	2300      	movs	r3, #0
 80012e4:	9306      	str	r3, [sp, #24]
 80012e6:	2318      	movs	r3, #24
 80012e8:	9305      	str	r3, [sp, #20]
 80012ea:	2300      	movs	r3, #0
 80012ec:	9304      	str	r3, [sp, #16]
 80012ee:	2300      	movs	r3, #0
 80012f0:	9303      	str	r3, [sp, #12]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2300      	movs	r3, #0
 8001300:	2201      	movs	r2, #1
 8001302:	21ab      	movs	r1, #171	; 0xab
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fe66 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 800130a:	4603      	mov	r3, r0
 800130c:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_RELEASE_POWER_DOWN, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           3 * 8, NULL, 0x00,
                                          (uint8_t *)&id, 1, 1);                           /* spi write read */
            if (res != 0)                                                                  /* check result */
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <w25qxx_init+0x10e>
            {
                handle->debug_print("w25qxx: release power down failed.\n");               /* release power down failed */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	4856      	ldr	r0, [pc, #344]	; (8001474 <w25qxx_init+0x25c>)
 800131a:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 8001322:	2301      	movs	r3, #1
 8001324:	e390      	b.n	8001a48 <w25qxx_init+0x830>
            }
            res = a_w25qxx_qspi_write_read(handle,
 8001326:	2300      	movs	r3, #0
 8001328:	930a      	str	r3, [sp, #40]	; 0x28
 800132a:	2300      	movs	r3, #0
 800132c:	9309      	str	r3, [sp, #36]	; 0x24
 800132e:	2300      	movs	r3, #0
 8001330:	9308      	str	r3, [sp, #32]
 8001332:	2300      	movs	r3, #0
 8001334:	9307      	str	r3, [sp, #28]
 8001336:	2300      	movs	r3, #0
 8001338:	9306      	str	r3, [sp, #24]
 800133a:	2300      	movs	r3, #0
 800133c:	9305      	str	r3, [sp, #20]
 800133e:	2300      	movs	r3, #0
 8001340:	9304      	str	r3, [sp, #16]
 8001342:	2300      	movs	r3, #0
 8001344:	9303      	str	r3, [sp, #12]
 8001346:	2300      	movs	r3, #0
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2300      	movs	r3, #0
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	2300      	movs	r3, #0
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	2201      	movs	r2, #1
 8001356:	2166      	movs	r1, #102	; 0x66
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fe3c 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 800135e:	4603      	mov	r3, r0
 8001360:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_ENABLE_RESET, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d008      	beq.n	800137a <w25qxx_init+0x162>
            {
                handle->debug_print("w25qxx: enable reset failed.\n");                     /* enable reset failed */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	4842      	ldr	r0, [pc, #264]	; (8001478 <w25qxx_init+0x260>)
 800136e:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 8001376:	2307      	movs	r3, #7
 8001378:	e366      	b.n	8001a48 <w25qxx_init+0x830>
            }
            res = a_w25qxx_qspi_write_read(handle,
 800137a:	2300      	movs	r3, #0
 800137c:	930a      	str	r3, [sp, #40]	; 0x28
 800137e:	2300      	movs	r3, #0
 8001380:	9309      	str	r3, [sp, #36]	; 0x24
 8001382:	2300      	movs	r3, #0
 8001384:	9308      	str	r3, [sp, #32]
 8001386:	2300      	movs	r3, #0
 8001388:	9307      	str	r3, [sp, #28]
 800138a:	2300      	movs	r3, #0
 800138c:	9306      	str	r3, [sp, #24]
 800138e:	2300      	movs	r3, #0
 8001390:	9305      	str	r3, [sp, #20]
 8001392:	2300      	movs	r3, #0
 8001394:	9304      	str	r3, [sp, #16]
 8001396:	2300      	movs	r3, #0
 8001398:	9303      	str	r3, [sp, #12]
 800139a:	2300      	movs	r3, #0
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2300      	movs	r3, #0
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	2300      	movs	r3, #0
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	2201      	movs	r2, #1
 80013aa:	2199      	movs	r1, #153	; 0x99
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff fe12 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80013b2:	4603      	mov	r3, r0
 80013b4:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_RESET_DEVICE, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <w25qxx_init+0x1b6>
            {
                handle->debug_print("w25qxx: reset device failed.\n");                     /* reset device failed */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	482e      	ldr	r0, [pc, #184]	; (800147c <w25qxx_init+0x264>)
 80013c2:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 80013ca:	2307      	movs	r3, #7
 80013cc:	e33c      	b.n	8001a48 <w25qxx_init+0x830>
            }
            handle->delay_ms(10);                                                          /* delay 10 ms */
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	200a      	movs	r0, #10
 80013d4:	4798      	blx	r3
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_MANUFACTURER, 1,
 80013d6:	2301      	movs	r3, #1
 80013d8:	930a      	str	r3, [sp, #40]	; 0x28
 80013da:	2302      	movs	r3, #2
 80013dc:	9309      	str	r3, [sp, #36]	; 0x24
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	9308      	str	r3, [sp, #32]
 80013e4:	2300      	movs	r3, #0
 80013e6:	9307      	str	r3, [sp, #28]
 80013e8:	2300      	movs	r3, #0
 80013ea:	9306      	str	r3, [sp, #24]
 80013ec:	2300      	movs	r3, #0
 80013ee:	9305      	str	r3, [sp, #20]
 80013f0:	2300      	movs	r3, #0
 80013f2:	9304      	str	r3, [sp, #16]
 80013f4:	2300      	movs	r3, #0
 80013f6:	9303      	str	r3, [sp, #12]
 80013f8:	2300      	movs	r3, #0
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2303      	movs	r3, #3
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2301      	movs	r3, #1
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	2201      	movs	r2, #1
 8001408:	2190      	movs	r1, #144	; 0x90
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fde3 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001410:	4603      	mov	r3, r0
 8001412:	75fb      	strb	r3, [r7, #23]
                                           0x00000000, 1, 3,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                          (uint8_t *)out, 2, 1);                           /* qspi write read */
            if (res != 0)                                                                  /* check result */
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d008      	beq.n	800142c <w25qxx_init+0x214>
            {
                handle->debug_print("w25qxx: get manufacturer device id failed.\n");       /* get manufacturer device id failed */
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4818      	ldr	r0, [pc, #96]	; (8001480 <w25qxx_init+0x268>)
 8001420:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 8001428:	2301      	movs	r3, #1
 800142a:	e30d      	b.n	8001a48 <w25qxx_init+0x830>
            }
            id = (uint16_t)out[0] << 8 | out[1];                                           /* set id */
 800142c:	7b3b      	ldrb	r3, [r7, #12]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	7b7b      	ldrb	r3, [r7, #13]
 8001434:	b21b      	sxth	r3, r3
 8001436:	4313      	orrs	r3, r2
 8001438:	b21b      	sxth	r3, r3
 800143a:	b29b      	uxth	r3, r3
 800143c:	817b      	strh	r3, [r7, #10]
            if (id != handle->type)                                                        /* check id */
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	8b5a      	ldrh	r2, [r3, #26]
 8001442:	897b      	ldrh	r3, [r7, #10]
 8001444:	429a      	cmp	r2, r3
 8001446:	d01f      	beq.n	8001488 <w25qxx_init+0x270>
            {
                handle->debug_print("w25qxx: id is invalid.\n");                           /* id is invalid */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <w25qxx_init+0x26c>)
 800144e:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4798      	blx	r3
                
                return 6;                                                                  /* return error */
 8001456:	2306      	movs	r3, #6
 8001458:	e2f6      	b.n	8001a48 <w25qxx_init+0x830>
 800145a:	bf00      	nop
 800145c:	08007aa8 	.word	0x08007aa8
 8001460:	08007ac8 	.word	0x08007ac8
 8001464:	08007aec 	.word	0x08007aec
 8001468:	08007b14 	.word	0x08007b14
 800146c:	08007b30 	.word	0x08007b30
 8001470:	08007b4c 	.word	0x08007b4c
 8001474:	08007338 	.word	0x08007338
 8001478:	08007590 	.word	0x08007590
 800147c:	080075b0 	.word	0x080075b0
 8001480:	0800735c 	.word	0x0800735c
 8001484:	08007b68 	.word	0x08007b68
            }
            if (handle->type >= W25Q256)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	8b5b      	ldrh	r3, [r3, #26]
 800148c:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001490:	4293      	cmp	r3, r2
 8001492:	f240 82d2 	bls.w	8001a3a <w25qxx_init+0x822>
            {
                res = a_w25qxx_qspi_write_read(handle, 0xE9, 1,
 8001496:	2300      	movs	r3, #0
 8001498:	930a      	str	r3, [sp, #40]	; 0x28
 800149a:	2300      	movs	r3, #0
 800149c:	9309      	str	r3, [sp, #36]	; 0x24
 800149e:	2300      	movs	r3, #0
 80014a0:	9308      	str	r3, [sp, #32]
 80014a2:	2300      	movs	r3, #0
 80014a4:	9307      	str	r3, [sp, #28]
 80014a6:	2300      	movs	r3, #0
 80014a8:	9306      	str	r3, [sp, #24]
 80014aa:	2300      	movs	r3, #0
 80014ac:	9305      	str	r3, [sp, #20]
 80014ae:	2300      	movs	r3, #0
 80014b0:	9304      	str	r3, [sp, #16]
 80014b2:	2300      	movs	r3, #0
 80014b4:	9303      	str	r3, [sp, #12]
 80014b6:	2300      	movs	r3, #0
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	2300      	movs	r3, #0
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	2300      	movs	r3, #0
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2300      	movs	r3, #0
 80014c4:	2201      	movs	r2, #1
 80014c6:	21e9      	movs	r1, #233	; 0xe9
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff fd84 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80014ce:	4603      	mov	r3, r0
 80014d0:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0, 0,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0x00,
                                               NULL, 0, 0);                                /* qspi write read */
                if (res != 0)                                                              /* check result */
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 82b0 	beq.w	8001a3a <w25qxx_init+0x822>
                {
                    handle->debug_print("w25qxx: enter 3 byte mode failed.\n");            /* enter 3 byte mode failed */
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	48a1      	ldr	r0, [pc, #644]	; (8001764 <w25qxx_init+0x54c>)
 80014e0:	4798      	blx	r3
                    (void)handle->spi_qspi_deinit();                                       /** deinit */
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4798      	blx	r3
                    
                    return 1;                                                              /* return error */
 80014e8:	2301      	movs	r3, #1
 80014ea:	e2ad      	b.n	8001a48 <w25qxx_init+0x830>
                }
            }
        }
        else                                                                               /* single spi */
        {
            buf[0] = W25QXX_COMMAND_RELEASE_POWER_DOWN;                                    /* release power down command */
 80014ec:	23ab      	movs	r3, #171	; 0xab
 80014ee:	743b      	strb	r3, [r7, #16]
            buf[1] = 0xFF;                                                                 /* dummy */
 80014f0:	23ff      	movs	r3, #255	; 0xff
 80014f2:	747b      	strb	r3, [r7, #17]
            buf[2] = 0xFF;                                                                 /* dummy */
 80014f4:	23ff      	movs	r3, #255	; 0xff
 80014f6:	74bb      	strb	r3, [r7, #18]
            buf[3] = 0xFF;                                                                 /* dummy */
 80014f8:	23ff      	movs	r3, #255	; 0xff
 80014fa:	74fb      	strb	r3, [r7, #19]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 4,
 80014fc:	f107 030a 	add.w	r3, r7, #10
 8001500:	f107 0110 	add.w	r1, r7, #16
 8001504:	2201      	movs	r2, #1
 8001506:	9200      	str	r2, [sp, #0]
 8001508:	2204      	movs	r2, #4
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fd37 	bl	8000f7e <a_w25qxx_spi_write_read>
 8001510:	4603      	mov	r3, r0
 8001512:	75fb      	strb	r3, [r7, #23]
                                         (uint8_t *)&id, 1);                               /* spi write read */
            if (res != 0)                                                                  /* check result */
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <w25qxx_init+0x314>
            {
                handle->debug_print("w25qxx: release power down failed.\n");               /* release power down failed */
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	4892      	ldr	r0, [pc, #584]	; (8001768 <w25qxx_init+0x550>)
 8001520:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 8001528:	2301      	movs	r3, #1
 800152a:	e28d      	b.n	8001a48 <w25qxx_init+0x830>
            }
            buf[0] = W25QXX_COMMAND_ENABLE_RESET;                                          /* enable reset command */
 800152c:	2366      	movs	r3, #102	; 0x66
 800152e:	743b      	strb	r3, [r7, #16]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);             /* spi write read */
 8001530:	f107 0110 	add.w	r1, r7, #16
 8001534:	2300      	movs	r3, #0
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2300      	movs	r3, #0
 800153a:	2201      	movs	r2, #1
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fd1e 	bl	8000f7e <a_w25qxx_spi_write_read>
 8001542:	4603      	mov	r3, r0
 8001544:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                  /* check result */
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <w25qxx_init+0x346>
            {
                handle->debug_print("w25qxx: enable reset failed.\n");                     /* enable reset failed */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	4886      	ldr	r0, [pc, #536]	; (800176c <w25qxx_init+0x554>)
 8001552:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 800155a:	2307      	movs	r3, #7
 800155c:	e274      	b.n	8001a48 <w25qxx_init+0x830>
            }
            buf[0] = W25QXX_COMMAND_RESET_DEVICE;                                          /* reset device command */
 800155e:	2399      	movs	r3, #153	; 0x99
 8001560:	743b      	strb	r3, [r7, #16]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);             /* spi write read */
 8001562:	f107 0110 	add.w	r1, r7, #16
 8001566:	2300      	movs	r3, #0
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2300      	movs	r3, #0
 800156c:	2201      	movs	r2, #1
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fd05 	bl	8000f7e <a_w25qxx_spi_write_read>
 8001574:	4603      	mov	r3, r0
 8001576:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                  /* check result */
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d008      	beq.n	8001590 <w25qxx_init+0x378>
            {
                handle->debug_print("w25qxx: reset device failed.\n");                     /* reset device failed */
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	487b      	ldr	r0, [pc, #492]	; (8001770 <w25qxx_init+0x558>)
 8001584:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 800158c:	2307      	movs	r3, #7
 800158e:	e25b      	b.n	8001a48 <w25qxx_init+0x830>
            }
            handle->delay_ms(10);                                                          /* delay 10 ms */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	200a      	movs	r0, #10
 8001596:	4798      	blx	r3
            buf[0] = W25QXX_COMMAND_READ_MANUFACTURER;                                     /* read manufacturer command */
 8001598:	2390      	movs	r3, #144	; 0x90
 800159a:	743b      	strb	r3, [r7, #16]
            buf[1] = 0x00;                                                                 /* dummy */
 800159c:	2300      	movs	r3, #0
 800159e:	747b      	strb	r3, [r7, #17]
            buf[2] = 0x00;                                                                 /* dummy */
 80015a0:	2300      	movs	r3, #0
 80015a2:	74bb      	strb	r3, [r7, #18]
            buf[3] = 0x00;                                                                 /* dummy */
 80015a4:	2300      	movs	r3, #0
 80015a6:	74fb      	strb	r3, [r7, #19]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 4,
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	f107 0110 	add.w	r1, r7, #16
 80015b0:	2202      	movs	r2, #2
 80015b2:	9200      	str	r2, [sp, #0]
 80015b4:	2204      	movs	r2, #4
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fce1 	bl	8000f7e <a_w25qxx_spi_write_read>
 80015bc:	4603      	mov	r3, r0
 80015be:	75fb      	strb	r3, [r7, #23]
                                         (uint8_t *)out, 2);                               /* spi write read */
            if (res != 0)                                                                  /* check result */
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <w25qxx_init+0x3c0>
            {
                handle->debug_print("w25qxx: get manufacturer device id failed.\n");       /* get manufacturer device id failed */
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	486a      	ldr	r0, [pc, #424]	; (8001774 <w25qxx_init+0x55c>)
 80015cc:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4798      	blx	r3
                
                return 4;                                                                  /* return error */
 80015d4:	2304      	movs	r3, #4
 80015d6:	e237      	b.n	8001a48 <w25qxx_init+0x830>
            }
            id = (uint16_t)out[0] << 8 | out[1];                                           /* set id */
 80015d8:	7b3b      	ldrb	r3, [r7, #12]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	b21a      	sxth	r2, r3
 80015de:	7b7b      	ldrb	r3, [r7, #13]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	817b      	strh	r3, [r7, #10]
            if (id != handle->type)                                                        /* check id */
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	8b5a      	ldrh	r2, [r3, #26]
 80015ee:	897b      	ldrh	r3, [r7, #10]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d008      	beq.n	8001606 <w25qxx_init+0x3ee>
            {
                handle->debug_print("w25qxx: id is invalid.\n");                           /* id is invalid */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	485f      	ldr	r0, [pc, #380]	; (8001778 <w25qxx_init+0x560>)
 80015fa:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4798      	blx	r3
                
                return 6;                                                                  /* return error */
 8001602:	2306      	movs	r3, #6
 8001604:	e220      	b.n	8001a48 <w25qxx_init+0x830>
            }
            if (handle->type >= W25Q256)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	8b5b      	ldrh	r3, [r3, #26]
 800160a:	f64e 7217 	movw	r2, #61207	; 0xef17
 800160e:	4293      	cmp	r3, r2
 8001610:	f240 8213 	bls.w	8001a3a <w25qxx_init+0x822>
            {
                buf[0] = 0xE9;                                                             /* 3 byte mode */
 8001614:	23e9      	movs	r3, #233	; 0xe9
 8001616:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);         /* spi write read */
 8001618:	f107 0110 	add.w	r1, r7, #16
 800161c:	2300      	movs	r3, #0
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2300      	movs	r3, #0
 8001622:	2201      	movs	r2, #1
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fcaa 	bl	8000f7e <a_w25qxx_spi_write_read>
 800162a:	4603      	mov	r3, r0
 800162c:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                              /* check result */
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8202 	beq.w	8001a3a <w25qxx_init+0x822>
                {
                    handle->debug_print("w25qxx: set address mode failed.\n");             /* set address mode failed */
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	4850      	ldr	r0, [pc, #320]	; (800177c <w25qxx_init+0x564>)
 800163c:	4798      	blx	r3
                    (void)handle->spi_qspi_deinit();                                       /** deinit */
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4798      	blx	r3
                    
                    return 8;                                                              /* return error */
 8001644:	2308      	movs	r3, #8
 8001646:	e1ff      	b.n	8001a48 <w25qxx_init+0x830>
            }
        }
    }
    else
    {
        res = handle->spi_qspi_init();                                                     /* qspi init */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4798      	blx	r3
 800164e:	4603      	mov	r3, r0
 8001650:	75fb      	strb	r3, [r7, #23]
        if (res != 0)                                                                      /* check result */
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <w25qxx_init+0x44c>
        {
            handle->debug_print("w25qxx: qspi init failed.\n");                            /* qspi init failed */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	4848      	ldr	r0, [pc, #288]	; (8001780 <w25qxx_init+0x568>)
 800165e:	4798      	blx	r3
           
            return 1;                                                                      /* return error */
 8001660:	2301      	movs	r3, #1
 8001662:	e1f1      	b.n	8001a48 <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle,
 8001664:	2301      	movs	r3, #1
 8001666:	930a      	str	r3, [sp, #40]	; 0x28
 8001668:	2301      	movs	r3, #1
 800166a:	9309      	str	r3, [sp, #36]	; 0x24
 800166c:	f107 030a 	add.w	r3, r7, #10
 8001670:	9308      	str	r3, [sp, #32]
 8001672:	2300      	movs	r3, #0
 8001674:	9307      	str	r3, [sp, #28]
 8001676:	2300      	movs	r3, #0
 8001678:	9306      	str	r3, [sp, #24]
 800167a:	2318      	movs	r3, #24
 800167c:	9305      	str	r3, [sp, #20]
 800167e:	2300      	movs	r3, #0
 8001680:	9304      	str	r3, [sp, #16]
 8001682:	2300      	movs	r3, #0
 8001684:	9303      	str	r3, [sp, #12]
 8001686:	2300      	movs	r3, #0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	2300      	movs	r3, #0
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	2300      	movs	r3, #0
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	2201      	movs	r2, #1
 8001696:	21ab      	movs	r1, #171	; 0xab
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fc9c 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 800169e:	4603      	mov	r3, r0
 80016a0:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_RELEASE_POWER_DOWN, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       3 * 8, NULL, 0x00,
                                      (uint8_t *)&id, 1, 1);                               /* spi write read */
        if (res != 0)                                                                      /* check result */
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <w25qxx_init+0x4a2>
        {
            handle->debug_print("w25qxx: release power down failed.\n");                   /* release power down failed */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	482e      	ldr	r0, [pc, #184]	; (8001768 <w25qxx_init+0x550>)
 80016ae:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4798      	blx	r3
            
            return 1;                                                                      /* return error */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e1c6      	b.n	8001a48 <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle,
 80016ba:	2300      	movs	r3, #0
 80016bc:	930a      	str	r3, [sp, #40]	; 0x28
 80016be:	2300      	movs	r3, #0
 80016c0:	9309      	str	r3, [sp, #36]	; 0x24
 80016c2:	2300      	movs	r3, #0
 80016c4:	9308      	str	r3, [sp, #32]
 80016c6:	2300      	movs	r3, #0
 80016c8:	9307      	str	r3, [sp, #28]
 80016ca:	2300      	movs	r3, #0
 80016cc:	9306      	str	r3, [sp, #24]
 80016ce:	2300      	movs	r3, #0
 80016d0:	9305      	str	r3, [sp, #20]
 80016d2:	2300      	movs	r3, #0
 80016d4:	9304      	str	r3, [sp, #16]
 80016d6:	2300      	movs	r3, #0
 80016d8:	9303      	str	r3, [sp, #12]
 80016da:	2300      	movs	r3, #0
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	2300      	movs	r3, #0
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2300      	movs	r3, #0
 80016e8:	2201      	movs	r2, #1
 80016ea:	2166      	movs	r1, #102	; 0x66
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fc72 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80016f2:	4603      	mov	r3, r0
 80016f4:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_ENABLE_RESET, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                  /* spi write read */
        if (res != 0)                                                                      /* check result */
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <w25qxx_init+0x4f6>
        {
            handle->debug_print("w25qxx: enable reset failed.\n");                         /* enable reset failed */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	481a      	ldr	r0, [pc, #104]	; (800176c <w25qxx_init+0x554>)
 8001702:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4798      	blx	r3
            
            return 7;                                                                      /* return error */
 800170a:	2307      	movs	r3, #7
 800170c:	e19c      	b.n	8001a48 <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle,
 800170e:	2300      	movs	r3, #0
 8001710:	930a      	str	r3, [sp, #40]	; 0x28
 8001712:	2300      	movs	r3, #0
 8001714:	9309      	str	r3, [sp, #36]	; 0x24
 8001716:	2300      	movs	r3, #0
 8001718:	9308      	str	r3, [sp, #32]
 800171a:	2300      	movs	r3, #0
 800171c:	9307      	str	r3, [sp, #28]
 800171e:	2300      	movs	r3, #0
 8001720:	9306      	str	r3, [sp, #24]
 8001722:	2300      	movs	r3, #0
 8001724:	9305      	str	r3, [sp, #20]
 8001726:	2300      	movs	r3, #0
 8001728:	9304      	str	r3, [sp, #16]
 800172a:	2300      	movs	r3, #0
 800172c:	9303      	str	r3, [sp, #12]
 800172e:	2300      	movs	r3, #0
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	2300      	movs	r3, #0
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	2300      	movs	r3, #0
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	2201      	movs	r2, #1
 800173e:	2199      	movs	r1, #153	; 0x99
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fc48 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001746:	4603      	mov	r3, r0
 8001748:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_RESET_DEVICE, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                  /* spi write read */
        if (res != 0)                                                                      /* check result */
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d019      	beq.n	8001784 <w25qxx_init+0x56c>
        {
            handle->debug_print("w25qxx: reset device failed.\n");                         /* reset device failed */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <w25qxx_init+0x558>)
 8001756:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4798      	blx	r3
            
            return 7;                                                                      /* return error */
 800175e:	2307      	movs	r3, #7
 8001760:	e172      	b.n	8001a48 <w25qxx_init+0x830>
 8001762:	bf00      	nop
 8001764:	08007b80 	.word	0x08007b80
 8001768:	08007338 	.word	0x08007338
 800176c:	08007590 	.word	0x08007590
 8001770:	080075b0 	.word	0x080075b0
 8001774:	0800735c 	.word	0x0800735c
 8001778:	08007b68 	.word	0x08007b68
 800177c:	080070c4 	.word	0x080070c4
 8001780:	08007ba4 	.word	0x08007ba4
        }
        handle->delay_ms(10);                                                              /* delay 10 ms */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	200a      	movs	r0, #10
 800178a:	4798      	blx	r3
        res = a_w25qxx_qspi_write_read(handle,
 800178c:	2301      	movs	r3, #1
 800178e:	930a      	str	r3, [sp, #40]	; 0x28
 8001790:	2301      	movs	r3, #1
 8001792:	9309      	str	r3, [sp, #36]	; 0x24
 8001794:	f107 0316 	add.w	r3, r7, #22
 8001798:	9308      	str	r3, [sp, #32]
 800179a:	2300      	movs	r3, #0
 800179c:	9307      	str	r3, [sp, #28]
 800179e:	2300      	movs	r3, #0
 80017a0:	9306      	str	r3, [sp, #24]
 80017a2:	2300      	movs	r3, #0
 80017a4:	9305      	str	r3, [sp, #20]
 80017a6:	2300      	movs	r3, #0
 80017a8:	9304      	str	r3, [sp, #16]
 80017aa:	2300      	movs	r3, #0
 80017ac:	9303      	str	r3, [sp, #12]
 80017ae:	2300      	movs	r3, #0
 80017b0:	9302      	str	r3, [sp, #8]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	2300      	movs	r3, #0
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2300      	movs	r3, #0
 80017bc:	2201      	movs	r2, #1
 80017be:	2135      	movs	r1, #53	; 0x35
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fc08 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80017c6:	4603      	mov	r3, r0
 80017c8:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_READ_STATUS_REG2, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                      (uint8_t *)&status, 1, 1);                           /* spi write read */
        if (res != 0)                                                                      /* check result */
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <w25qxx_init+0x5ca>
        {
            handle->debug_print("w25qxx: read status 2 failed.\n");                        /* read status 2 failed */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	489e      	ldr	r0, [pc, #632]	; (8001a50 <w25qxx_init+0x838>)
 80017d6:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4798      	blx	r3
            
            return 5;                                                                      /* return error */
 80017de:	2305      	movs	r3, #5
 80017e0:	e132      	b.n	8001a48 <w25qxx_init+0x830>
        }
        if ((status & 0x02) == 0)                                                          /* check status */
 80017e2:	7dbb      	ldrb	r3, [r7, #22]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d153      	bne.n	8001894 <w25qxx_init+0x67c>
        {
            res = a_w25qxx_qspi_write_read(handle,
 80017ec:	2300      	movs	r3, #0
 80017ee:	930a      	str	r3, [sp, #40]	; 0x28
 80017f0:	2300      	movs	r3, #0
 80017f2:	9309      	str	r3, [sp, #36]	; 0x24
 80017f4:	2300      	movs	r3, #0
 80017f6:	9308      	str	r3, [sp, #32]
 80017f8:	2300      	movs	r3, #0
 80017fa:	9307      	str	r3, [sp, #28]
 80017fc:	2300      	movs	r3, #0
 80017fe:	9306      	str	r3, [sp, #24]
 8001800:	2300      	movs	r3, #0
 8001802:	9305      	str	r3, [sp, #20]
 8001804:	2300      	movs	r3, #0
 8001806:	9304      	str	r3, [sp, #16]
 8001808:	2300      	movs	r3, #0
 800180a:	9303      	str	r3, [sp, #12]
 800180c:	2300      	movs	r3, #0
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	2300      	movs	r3, #0
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	2300      	movs	r3, #0
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2300      	movs	r3, #0
 800181a:	2201      	movs	r2, #1
 800181c:	2150      	movs	r1, #80	; 0x50
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fbd9 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001824:	4603      	mov	r3, r0
 8001826:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_VOLATILE_SR_WRITE_ENABLE, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 8001828:	7dfb      	ldrb	r3, [r7, #23]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <w25qxx_init+0x628>
            {
                handle->debug_print("w25qxx: set sr write enable failed.\n");              /* set sr write enable failed */
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	4888      	ldr	r0, [pc, #544]	; (8001a54 <w25qxx_init+0x83c>)
 8001834:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4798      	blx	r3
                
                return 5;                                                                  /* return error */
 800183c:	2305      	movs	r3, #5
 800183e:	e103      	b.n	8001a48 <w25qxx_init+0x830>
            }
            res = a_w25qxx_qspi_write_read(handle,
 8001840:	2300      	movs	r3, #0
 8001842:	930a      	str	r3, [sp, #40]	; 0x28
 8001844:	2300      	movs	r3, #0
 8001846:	9309      	str	r3, [sp, #36]	; 0x24
 8001848:	2300      	movs	r3, #0
 800184a:	9308      	str	r3, [sp, #32]
 800184c:	2300      	movs	r3, #0
 800184e:	9307      	str	r3, [sp, #28]
 8001850:	2300      	movs	r3, #0
 8001852:	9306      	str	r3, [sp, #24]
 8001854:	2300      	movs	r3, #0
 8001856:	9305      	str	r3, [sp, #20]
 8001858:	2300      	movs	r3, #0
 800185a:	9304      	str	r3, [sp, #16]
 800185c:	2300      	movs	r3, #0
 800185e:	9303      	str	r3, [sp, #12]
 8001860:	2300      	movs	r3, #0
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	2300      	movs	r3, #0
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	2300      	movs	r3, #0
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2300      	movs	r3, #0
 800186e:	2201      	movs	r2, #1
 8001870:	2131      	movs	r1, #49	; 0x31
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fbaf 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001878:	4603      	mov	r3, r0
 800187a:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_WRITE_STATUS_REG2, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <w25qxx_init+0x67c>
            {
                handle->debug_print("w25qxx: write status 2 failed.\n");                   /* write status 2 failed */
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	4874      	ldr	r0, [pc, #464]	; (8001a58 <w25qxx_init+0x840>)
 8001888:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4798      	blx	r3
                
                return 5;                                                                  /* return error */
 8001890:	2305      	movs	r3, #5
 8001892:	e0d9      	b.n	8001a48 <w25qxx_init+0x830>
            }
        }
        res = a_w25qxx_qspi_write_read(handle,
 8001894:	2300      	movs	r3, #0
 8001896:	930a      	str	r3, [sp, #40]	; 0x28
 8001898:	2300      	movs	r3, #0
 800189a:	9309      	str	r3, [sp, #36]	; 0x24
 800189c:	2300      	movs	r3, #0
 800189e:	9308      	str	r3, [sp, #32]
 80018a0:	2300      	movs	r3, #0
 80018a2:	9307      	str	r3, [sp, #28]
 80018a4:	2300      	movs	r3, #0
 80018a6:	9306      	str	r3, [sp, #24]
 80018a8:	2300      	movs	r3, #0
 80018aa:	9305      	str	r3, [sp, #20]
 80018ac:	2300      	movs	r3, #0
 80018ae:	9304      	str	r3, [sp, #16]
 80018b0:	2300      	movs	r3, #0
 80018b2:	9303      	str	r3, [sp, #12]
 80018b4:	2300      	movs	r3, #0
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	2300      	movs	r3, #0
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2300      	movs	r3, #0
 80018c2:	2201      	movs	r2, #1
 80018c4:	2138      	movs	r1, #56	; 0x38
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fb85 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80018cc:	4603      	mov	r3, r0
 80018ce:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_ENTER_QSPI_MODE, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                  /* spi write read */
        if (res != 0)                                                                      /* check result */
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <w25qxx_init+0x6d0>
        {
            handle->debug_print("w25qxx: enter qspi failed.\n");                           /* enter qspi failed */
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4860      	ldr	r0, [pc, #384]	; (8001a5c <w25qxx_init+0x844>)
 80018dc:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4798      	blx	r3
            
            return 5;                                                                      /* return error */
 80018e4:	2305      	movs	r3, #5
 80018e6:	e0af      	b.n	8001a48 <w25qxx_init+0x830>
        }
        handle->delay_ms(10);                                                              /* delay 10 ms */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	200a      	movs	r0, #10
 80018ee:	4798      	blx	r3
        buf[0] = 3 << 4;                                                                   /* set 8 read dummy */
 80018f0:	2330      	movs	r3, #48	; 0x30
 80018f2:	743b      	strb	r3, [r7, #16]
        handle->param = buf[0];                                                            /* set param */
 80018f4:	7c3a      	ldrb	r2, [r7, #16]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	775a      	strb	r2, [r3, #29]
        handle->dummy = 8;                                                                 /* set dummy */
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2208      	movs	r2, #8
 80018fe:	779a      	strb	r2, [r3, #30]
        res = a_w25qxx_qspi_write_read(handle, 0xC0, 4,
 8001900:	2304      	movs	r3, #4
 8001902:	930a      	str	r3, [sp, #40]	; 0x28
 8001904:	2300      	movs	r3, #0
 8001906:	9309      	str	r3, [sp, #36]	; 0x24
 8001908:	2300      	movs	r3, #0
 800190a:	9308      	str	r3, [sp, #32]
 800190c:	2301      	movs	r3, #1
 800190e:	9307      	str	r3, [sp, #28]
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	9306      	str	r3, [sp, #24]
 8001916:	2300      	movs	r3, #0
 8001918:	9305      	str	r3, [sp, #20]
 800191a:	2300      	movs	r3, #0
 800191c:	9304      	str	r3, [sp, #16]
 800191e:	2300      	movs	r3, #0
 8001920:	9303      	str	r3, [sp, #12]
 8001922:	2300      	movs	r3, #0
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	2300      	movs	r3, #0
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	2300      	movs	r3, #0
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2300      	movs	r3, #0
 8001930:	2204      	movs	r2, #4
 8001932:	21c0      	movs	r1, #192	; 0xc0
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff fb4e 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 800193a:	4603      	mov	r3, r0
 800193c:	75fb      	strb	r3, [r7, #23]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0, (uint8_t *)buf, 1,
                                       NULL, 0x00, 4);                                     /* qspi write read */
        if (res != 0)                                                                      /* check result */
 800193e:	7dfb      	ldrb	r3, [r7, #23]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <w25qxx_init+0x73e>
        {
            handle->debug_print("w25qxx: set read parameters failed.\n");                  /* set read parameters failed */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	4845      	ldr	r0, [pc, #276]	; (8001a60 <w25qxx_init+0x848>)
 800194a:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4798      	blx	r3
            
            return 5;                                                                      /* return error */
 8001952:	2305      	movs	r3, #5
 8001954:	e078      	b.n	8001a48 <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_MANUFACTURER, 4,
 8001956:	2304      	movs	r3, #4
 8001958:	930a      	str	r3, [sp, #40]	; 0x28
 800195a:	2302      	movs	r3, #2
 800195c:	9309      	str	r3, [sp, #36]	; 0x24
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	9308      	str	r3, [sp, #32]
 8001964:	2300      	movs	r3, #0
 8001966:	9307      	str	r3, [sp, #28]
 8001968:	2300      	movs	r3, #0
 800196a:	9306      	str	r3, [sp, #24]
 800196c:	2300      	movs	r3, #0
 800196e:	9305      	str	r3, [sp, #20]
 8001970:	2300      	movs	r3, #0
 8001972:	9304      	str	r3, [sp, #16]
 8001974:	2300      	movs	r3, #0
 8001976:	9303      	str	r3, [sp, #12]
 8001978:	2300      	movs	r3, #0
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	2303      	movs	r3, #3
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	2304      	movs	r3, #4
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	2204      	movs	r2, #4
 8001988:	2190      	movs	r1, #144	; 0x90
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fb23 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001990:	4603      	mov	r3, r0
 8001992:	75fb      	strb	r3, [r7, #23]
                                       0x00000000, 4, 3,
                                       0x00000000, 0x00, 0x00,
                                       0, NULL, 0x00,
                                      (uint8_t *)out, 2, 4);                               /* qspi write read */
        if (res != 0)                                                                      /* check result */
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d008      	beq.n	80019ac <w25qxx_init+0x794>
        {
            handle->debug_print("w25qxx: get manufacturer device id failed.\n");           /* get manufacturer device id failed */
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	4831      	ldr	r0, [pc, #196]	; (8001a64 <w25qxx_init+0x84c>)
 80019a0:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4798      	blx	r3
            
            return 1;                                                                      /* return error */
 80019a8:	2301      	movs	r3, #1
 80019aa:	e04d      	b.n	8001a48 <w25qxx_init+0x830>
        }
        id = (uint16_t)out[0] << 8 | out[1];                                               /* set id */
 80019ac:	7b3b      	ldrb	r3, [r7, #12]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	7b7b      	ldrb	r3, [r7, #13]
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	817b      	strh	r3, [r7, #10]
        if (id != handle->type)                                                            /* check id */
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	8b5a      	ldrh	r2, [r3, #26]
 80019c2:	897b      	ldrh	r3, [r7, #10]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d008      	beq.n	80019da <w25qxx_init+0x7c2>
        {
            handle->debug_print("w25qxx: id is invalid.\n");                               /* id is invalid */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	4826      	ldr	r0, [pc, #152]	; (8001a68 <w25qxx_init+0x850>)
 80019ce:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4798      	blx	r3
            
            return 6;                                                                      /* return error */
 80019d6:	2306      	movs	r3, #6
 80019d8:	e036      	b.n	8001a48 <w25qxx_init+0x830>
        }
        if (handle->type >= W25Q256)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	8b5b      	ldrh	r3, [r3, #26]
 80019de:	f64e 7217 	movw	r2, #61207	; 0xef17
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d929      	bls.n	8001a3a <w25qxx_init+0x822>
        {
            res = a_w25qxx_qspi_write_read(handle, 0xE9, 4,
 80019e6:	2300      	movs	r3, #0
 80019e8:	930a      	str	r3, [sp, #40]	; 0x28
 80019ea:	2300      	movs	r3, #0
 80019ec:	9309      	str	r3, [sp, #36]	; 0x24
 80019ee:	2300      	movs	r3, #0
 80019f0:	9308      	str	r3, [sp, #32]
 80019f2:	2300      	movs	r3, #0
 80019f4:	9307      	str	r3, [sp, #28]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9306      	str	r3, [sp, #24]
 80019fa:	2300      	movs	r3, #0
 80019fc:	9305      	str	r3, [sp, #20]
 80019fe:	2300      	movs	r3, #0
 8001a00:	9304      	str	r3, [sp, #16]
 8001a02:	2300      	movs	r3, #0
 8001a04:	9303      	str	r3, [sp, #12]
 8001a06:	2300      	movs	r3, #0
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2300      	movs	r3, #0
 8001a14:	2204      	movs	r2, #4
 8001a16:	21e9      	movs	r1, #233	; 0xe9
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff fadc 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	75fb      	strb	r3, [r7, #23]
                                           0x00000000, 0, 0,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0, 0);                                    /* qspi write read */
            if (res != 0)                                                                  /* check result */
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <w25qxx_init+0x822>
            {
                handle->debug_print("w25qxx: enter 3 byte mode failed.\n");                /* enter 3 byte mode failed */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	480f      	ldr	r0, [pc, #60]	; (8001a6c <w25qxx_init+0x854>)
 8001a2e:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e006      	b.n	8001a48 <w25qxx_init+0x830>
            }
        }
    }
    handle->address_mode = W25QXX_ADDRESS_MODE_3_BYTE;                                     /* set address mode */
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	771a      	strb	r2, [r3, #28]
    handle->inited = 1;                                                                    /* initialize inited */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	761a      	strb	r2, [r3, #24]
    
    return 0;                                                                              /* success return 0 */
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	08007bc0 	.word	0x08007bc0
 8001a54:	08007be0 	.word	0x08007be0
 8001a58:	08007c08 	.word	0x08007c08
 8001a5c:	08007c28 	.word	0x08007c28
 8001a60:	08007510 	.word	0x08007510
 8001a64:	0800735c 	.word	0x0800735c
 8001a68:	08007b68 	.word	0x08007b68
 8001a6c:	08007b80 	.word	0x08007b80

08001a70 <w25qxx_deinit>:
 *            - 3 handle is not initialized
 *            - 4 power down failed
 * @note      none
 */
uint8_t w25qxx_deinit(w25qxx_handle_t *handle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b090      	sub	sp, #64	; 0x40
 8001a74:	af0c      	add	r7, sp, #48	; 0x30
 8001a76:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t buf[1];
    
    if (handle == NULL)                                                            /* check handle */
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <w25qxx_deinit+0x12>
    {
        return 2;                                                                  /* return error */
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e0ac      	b.n	8001bdc <w25qxx_deinit+0x16c>
    }   
    if (handle->inited != 1)                                                       /* check handle initialization */
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7e1b      	ldrb	r3, [r3, #24]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d001      	beq.n	8001a8e <w25qxx_deinit+0x1e>
    {
        return 3;                                                                  /* return error */
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e0a6      	b.n	8001bdc <w25qxx_deinit+0x16c>
    }

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                  /* spi interface */
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d140      	bne.n	8001b1a <w25qxx_deinit+0xaa>
    {
        if (handle->dual_quad_spi_enable != 0)                                     /* enable dual quad spi */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7fdb      	ldrb	r3, [r3, #31]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d026      	beq.n	8001aee <w25qxx_deinit+0x7e>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_POWER_DOWN, 1,
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9308      	str	r3, [sp, #32]
 8001aac:	2300      	movs	r3, #0
 8001aae:	9307      	str	r3, [sp, #28]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9306      	str	r3, [sp, #24]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9305      	str	r3, [sp, #20]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9304      	str	r3, [sp, #16]
 8001abc:	2300      	movs	r3, #0
 8001abe:	9303      	str	r3, [sp, #12]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9302      	str	r3, [sp, #8]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2300      	movs	r3, #0
 8001ace:	2201      	movs	r2, #1
 8001ad0:	21b9      	movs	r1, #185	; 0xb9
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fa7f 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	73fb      	strb	r3, [r7, #15]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0x00, 0);                         /* spi write read */
            if (res != 0)                                                          /* check result */
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d06d      	beq.n	8001bbe <w25qxx_deinit+0x14e>
            {
                handle->debug_print("w25qxx: power down failed.\n");               /* power down failed */
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	483f      	ldr	r0, [pc, #252]	; (8001be4 <w25qxx_deinit+0x174>)
 8001ae8:	4798      	blx	r3
               
                return 4;                                                          /* return error */
 8001aea:	2304      	movs	r3, #4
 8001aec:	e076      	b.n	8001bdc <w25qxx_deinit+0x16c>
            }
        }
        else                                                                       /* single spi */
        {
            buf[0] = W25QXX_COMMAND_POWER_DOWN;                                    /* power down command */
 8001aee:	23b9      	movs	r3, #185	; 0xb9
 8001af0:	733b      	strb	r3, [r7, #12]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf,
 8001af2:	f107 010c 	add.w	r1, r7, #12
 8001af6:	2300      	movs	r3, #0
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2300      	movs	r3, #0
 8001afc:	2201      	movs	r2, #1
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fa3d 	bl	8000f7e <a_w25qxx_spi_write_read>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]
                                          1, NULL, 0);                             /* spi write read */
            if (res != 0)                                                          /* check result */
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d057      	beq.n	8001bbe <w25qxx_deinit+0x14e>
            {
                handle->debug_print("w25qxx: power down failed.\n");               /* power down failed */
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	4834      	ldr	r0, [pc, #208]	; (8001be4 <w25qxx_deinit+0x174>)
 8001b14:	4798      	blx	r3
               
                return 4;                                                          /* return error */
 8001b16:	2304      	movs	r3, #4
 8001b18:	e060      	b.n	8001bdc <w25qxx_deinit+0x16c>
            }
        }
    }
    else                                                                           /* qspi interface */
    {
        res = a_w25qxx_qspi_write_read(handle, 0xFF, 4,
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8001b1e:	2300      	movs	r3, #0
 8001b20:	9309      	str	r3, [sp, #36]	; 0x24
 8001b22:	2300      	movs	r3, #0
 8001b24:	9308      	str	r3, [sp, #32]
 8001b26:	2300      	movs	r3, #0
 8001b28:	9307      	str	r3, [sp, #28]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9306      	str	r3, [sp, #24]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9305      	str	r3, [sp, #20]
 8001b32:	2300      	movs	r3, #0
 8001b34:	9304      	str	r3, [sp, #16]
 8001b36:	2300      	movs	r3, #0
 8001b38:	9303      	str	r3, [sp, #12]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2300      	movs	r3, #0
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	2204      	movs	r2, #4
 8001b4a:	21ff      	movs	r1, #255	; 0xff
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fa42 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001b52:	4603      	mov	r3, r0
 8001b54:	73fb      	strb	r3, [r7, #15]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0, NULL, 0x00,
                                       NULL, 0x00, 0);                             /* spi write read */
        if (res != 0)                                                              /* check result */
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <w25qxx_deinit+0xf8>
        {
            handle->debug_print("w25qxx: exit qspi mode failed.\n");               /* exit qspi mode failed */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	4821      	ldr	r0, [pc, #132]	; (8001be8 <w25qxx_deinit+0x178>)
 8001b62:	4798      	blx	r3
           
            return 1;                                                              /* return error */
 8001b64:	2301      	movs	r3, #1
 8001b66:	e039      	b.n	8001bdc <w25qxx_deinit+0x16c>
        }
        handle->delay_ms(10);                                                      /* delay 10 ms */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	200a      	movs	r0, #10
 8001b6e:	4798      	blx	r3
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_POWER_DOWN, 1,
 8001b70:	2300      	movs	r3, #0
 8001b72:	930a      	str	r3, [sp, #40]	; 0x28
 8001b74:	2300      	movs	r3, #0
 8001b76:	9309      	str	r3, [sp, #36]	; 0x24
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9308      	str	r3, [sp, #32]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9307      	str	r3, [sp, #28]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9306      	str	r3, [sp, #24]
 8001b84:	2300      	movs	r3, #0
 8001b86:	9305      	str	r3, [sp, #20]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	9304      	str	r3, [sp, #16]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9303      	str	r3, [sp, #12]
 8001b90:	2300      	movs	r3, #0
 8001b92:	9302      	str	r3, [sp, #8]
 8001b94:	2300      	movs	r3, #0
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	21b9      	movs	r1, #185	; 0xb9
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fa17 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	73fb      	strb	r3, [r7, #15]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0, NULL, 0x00,
                                       NULL, 0x00, 0);                             /* spi write read */
        if (res != 0)                                                              /* check result */
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <w25qxx_deinit+0x14e>
        {
            handle->debug_print("w25qxx: power down failed.\n");                   /* power down failed */
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	480b      	ldr	r0, [pc, #44]	; (8001be4 <w25qxx_deinit+0x174>)
 8001bb8:	4798      	blx	r3
           
            return 4;                                                              /* return error */
 8001bba:	2304      	movs	r3, #4
 8001bbc:	e00e      	b.n	8001bdc <w25qxx_deinit+0x16c>
        }
    }
    res = handle->spi_qspi_deinit();                                               /* qspi deinit */
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4798      	blx	r3
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <w25qxx_deinit+0x16a>
    {
        handle->debug_print("w25qxx: spi or qspi deinit failed.\n");               /* spi or qspi deinit failed */
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	4806      	ldr	r0, [pc, #24]	; (8001bec <w25qxx_deinit+0x17c>)
 8001bd4:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <w25qxx_deinit+0x16c>
    }
    
    return 0;                                                                      /* success return 0 */
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	080072fc 	.word	0x080072fc
 8001be8:	08007318 	.word	0x08007318
 8001bec:	08007c44 	.word	0x08007c44

08001bf0 <w25qxx_read>:
 *             - 3 handle is not initialized
 *             - 4 address mode is invalid
 * @note       none
 */
uint8_t w25qxx_read(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b092      	sub	sp, #72	; 0x48
 8001bf4:	af0c      	add	r7, sp, #48	; 0x30
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t buf[6];
    
    if (handle == NULL)                                                                                   /* check handle */
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <w25qxx_read+0x18>
    {
        return 2;                                                                                         /* return error */
 8001c04:	2302      	movs	r3, #2
 8001c06:	e22c      	b.n	8002062 <w25qxx_read+0x472>
    }   
    if (handle->inited != 1)                                                                              /* check handle initialization */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	7e1b      	ldrb	r3, [r3, #24]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d001      	beq.n	8001c14 <w25qxx_read+0x24>
    {
        return 3;                                                                                         /* return error */
 8001c10:	2303      	movs	r3, #3
 8001c12:	e226      	b.n	8002062 <w25qxx_read+0x472>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                         /* spi interface */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 8162 	bne.w	8001ee4 <w25qxx_read+0x2f4>
    {
        if (handle->dual_quad_spi_enable != 0)                                                            /* enable dual quad spi */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	7fdb      	ldrb	r3, [r3, #31]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80be 	beq.w	8001da6 <w25qxx_read+0x1b6>
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	7f1b      	ldrb	r3, [r3, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 8081 	bne.w	8001d36 <w25qxx_read+0x146>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8b5b      	ldrh	r3, [r3, #26]
 8001c38:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d952      	bls.n	8001ce6 <w25qxx_read+0xf6>
                {
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 8001c40:	2300      	movs	r3, #0
 8001c42:	930a      	str	r3, [sp, #40]	; 0x28
 8001c44:	2300      	movs	r3, #0
 8001c46:	9309      	str	r3, [sp, #36]	; 0x24
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9308      	str	r3, [sp, #32]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9307      	str	r3, [sp, #28]
 8001c50:	2300      	movs	r3, #0
 8001c52:	9306      	str	r3, [sp, #24]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9305      	str	r3, [sp, #20]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9304      	str	r3, [sp, #16]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9303      	str	r3, [sp, #12]
 8001c60:	2300      	movs	r3, #0
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	2300      	movs	r3, #0
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2106      	movs	r1, #6
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f7ff f9af 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                     /* qspi write read */
                    if (res != 0)                                                                         /* check result */
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <w25qxx_read+0x9e>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	4893      	ldr	r0, [pc, #588]	; (8001ed4 <w25qxx_read+0x2e4>)
 8001c88:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e1e9      	b.n	8002062 <w25qxx_read+0x472>
                    }
                    buf[0] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	0e1b      	lsrs	r3, r3, #24
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 8001c96:	2301      	movs	r3, #1
 8001c98:	930a      	str	r3, [sp, #40]	; 0x28
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9308      	str	r3, [sp, #32]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	9307      	str	r3, [sp, #28]
 8001ca6:	f107 0310 	add.w	r3, r7, #16
 8001caa:	9306      	str	r3, [sp, #24]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9305      	str	r3, [sp, #20]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9304      	str	r3, [sp, #16]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9303      	str	r3, [sp, #12]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	21c5      	movs	r1, #197	; 0xc5
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7ff f983 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                        /* spi write read */
                    if (res != 0)                                                                         /* check result */
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d005      	beq.n	8001ce6 <w25qxx_read+0xf6>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	487e      	ldr	r0, [pc, #504]	; (8001ed8 <w25qxx_read+0x2e8>)
 8001ce0:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e1bd      	b.n	8002062 <w25qxx_read+0x472>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	9309      	str	r3, [sp, #36]	; 0x24
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	9308      	str	r3, [sp, #32]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	9307      	str	r3, [sp, #28]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	9306      	str	r3, [sp, #24]
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	9305      	str	r3, [sp, #20]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9304      	str	r3, [sp, #16]
 8001d02:	2300      	movs	r3, #0
 8001d04:	9303      	str	r3, [sp, #12]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9302      	str	r3, [sp, #8]
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	2301      	movs	r3, #1
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2201      	movs	r2, #1
 8001d16:	210b      	movs	r1, #11
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7ff f95c 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,                                             /* spi write */
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 819b 	beq.w	8002060 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	486b      	ldr	r0, [pc, #428]	; (8001edc <w25qxx_read+0x2ec>)
 8001d30:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e195      	b.n	8002062 <w25qxx_read+0x472>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	7f1b      	ldrb	r3, [r3, #28]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d12d      	bne.n	8001d9a <w25qxx_read+0x1aa>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8b5b      	ldrh	r3, [r3, #26]
 8001d42:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d927      	bls.n	8001d9a <w25qxx_read+0x1aa>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	930a      	str	r3, [sp, #40]	; 0x28
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	9309      	str	r3, [sp, #36]	; 0x24
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	9308      	str	r3, [sp, #32]
 8001d56:	2300      	movs	r3, #0
 8001d58:	9307      	str	r3, [sp, #28]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9306      	str	r3, [sp, #24]
 8001d5e:	2308      	movs	r3, #8
 8001d60:	9305      	str	r3, [sp, #20]
 8001d62:	2300      	movs	r3, #0
 8001d64:	9304      	str	r3, [sp, #16]
 8001d66:	2300      	movs	r3, #0
 8001d68:	9303      	str	r3, [sp, #12]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	2304      	movs	r3, #4
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	2301      	movs	r3, #1
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	210b      	movs	r1, #11
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7ff f92a 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001d82:	4603      	mov	r3, r0
 8001d84:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,                                             /* spi write */
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8169 	beq.w	8002060 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	4852      	ldr	r0, [pc, #328]	; (8001edc <w25qxx_read+0x2ec>)
 8001d94:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001d96:	2301      	movs	r3, #1
 8001d98:	e163      	b.n	8002062 <w25qxx_read+0x472>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	4850      	ldr	r0, [pc, #320]	; (8001ee0 <w25qxx_read+0x2f0>)
 8001da0:	4798      	blx	r3
               
                return 4;                                                                                 /* return error */
 8001da2:	2304      	movs	r3, #4
 8001da4:	e15d      	b.n	8002062 <w25qxx_read+0x472>
            }
        }
        else                                                                                              /* single spi */
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	7f1b      	ldrb	r3, [r3, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d159      	bne.n	8001e62 <w25qxx_read+0x272>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8b5b      	ldrh	r3, [r3, #26]
 8001db2:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d92f      	bls.n	8001e1a <w25qxx_read+0x22a>
                {
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                 /* write enable command */
 8001dba:	2306      	movs	r3, #6
 8001dbc:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                    /* spi write read */
 8001dbe:	f107 0110 	add.w	r1, r7, #16
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2201      	movs	r2, #1
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff f8d7 	bl	8000f7e <a_w25qxx_spi_write_read>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <w25qxx_read+0x1f6>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	483d      	ldr	r0, [pc, #244]	; (8001ed4 <w25qxx_read+0x2e4>)
 8001de0:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e13d      	b.n	8002062 <w25qxx_read+0x472>
                    }
                    buf[0] = 0xC5;                                                                        /* write extended addr register command */
 8001de6:	23c5      	movs	r3, #197	; 0xc5
 8001de8:	743b      	strb	r3, [r7, #16]
                    buf[1] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	0e1b      	lsrs	r3, r3, #24
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	747b      	strb	r3, [r7, #17]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                    /* spi write read */
 8001df2:	f107 0110 	add.w	r1, r7, #16
 8001df6:	2300      	movs	r3, #0
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff f8bd 	bl	8000f7e <a_w25qxx_spi_write_read>
 8001e04:	4603      	mov	r3, r0
 8001e06:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <w25qxx_read+0x22a>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	4831      	ldr	r0, [pc, #196]	; (8001ed8 <w25qxx_read+0x2e8>)
 8001e14:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e123      	b.n	8002062 <w25qxx_read+0x472>
                    }
                }
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 8001e1a:	230b      	movs	r3, #11
 8001e1c:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	74fb      	strb	r3, [r7, #19]
                buf[4] = 0x00;                                                                            /* dummy */
 8001e34:	2300      	movs	r3, #0
 8001e36:	753b      	strb	r3, [r7, #20]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 5, (uint8_t *)data, (uint32_t)len); /* spi write read */
 8001e38:	f107 0110 	add.w	r1, r7, #16
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2205      	movs	r2, #5
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff f89a 	bl	8000f7e <a_w25qxx_spi_write_read>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8105 	beq.w	8002060 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	4820      	ldr	r0, [pc, #128]	; (8001edc <w25qxx_read+0x2ec>)
 8001e5c:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e0ff      	b.n	8002062 <w25qxx_read+0x472>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	7f1b      	ldrb	r3, [r3, #28]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d12d      	bne.n	8001ec6 <w25qxx_read+0x2d6>
                    && (handle->type >= W25Q256))                                                         /* check address mode */
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8b5b      	ldrh	r3, [r3, #26]
 8001e6e:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d927      	bls.n	8001ec6 <w25qxx_read+0x2d6>
            {
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 8001e76:	230b      	movs	r3, #11
 8001e78:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	0e1b      	lsrs	r3, r3, #24
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	74fb      	strb	r3, [r7, #19]
                buf[4] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	753b      	strb	r3, [r7, #20]
                buf[5] = 0x00;                                                                            /* dummy */
 8001e98:	2300      	movs	r3, #0
 8001e9a:	757b      	strb	r3, [r7, #21]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 6, (uint8_t *)data, (uint32_t)len); /* spi write read */
 8001e9c:	f107 0110 	add.w	r1, r7, #16
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2206      	movs	r2, #6
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f7ff f868 	bl	8000f7e <a_w25qxx_spi_write_read>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80d3 	beq.w	8002060 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4807      	ldr	r0, [pc, #28]	; (8001edc <w25qxx_read+0x2ec>)
 8001ec0:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0cd      	b.n	8002062 <w25qxx_read+0x472>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <w25qxx_read+0x2f0>)
 8001ecc:	4798      	blx	r3
               
                return 4;                                                                                 /* return error */
 8001ece:	2304      	movs	r3, #4
 8001ed0:	e0c7      	b.n	8002062 <w25qxx_read+0x472>
 8001ed2:	bf00      	nop
 8001ed4:	080070e8 	.word	0x080070e8
 8001ed8:	080076e4 	.word	0x080076e4
 8001edc:	08007768 	.word	0x08007768
 8001ee0:	080073f4 	.word	0x080073f4
            }
        }
    }
    else                                                                                                  /* qspi interface */
    {
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                           /* 3 address mode */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	7f1b      	ldrb	r3, [r3, #28]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f040 8081 	bne.w	8001ff0 <w25qxx_read+0x400>
        {
            if (handle->type >= W25Q256)                                                                  /* >128Mb */
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8b5b      	ldrh	r3, [r3, #26]
 8001ef2:	f64e 7217 	movw	r2, #61207	; 0xef17
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d952      	bls.n	8001fa0 <w25qxx_read+0x3b0>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8001efa:	2300      	movs	r3, #0
 8001efc:	930a      	str	r3, [sp, #40]	; 0x28
 8001efe:	2300      	movs	r3, #0
 8001f00:	9309      	str	r3, [sp, #36]	; 0x24
 8001f02:	2300      	movs	r3, #0
 8001f04:	9308      	str	r3, [sp, #32]
 8001f06:	2300      	movs	r3, #0
 8001f08:	9307      	str	r3, [sp, #28]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	9306      	str	r3, [sp, #24]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	9305      	str	r3, [sp, #20]
 8001f12:	2300      	movs	r3, #0
 8001f14:	9304      	str	r3, [sp, #16]
 8001f16:	2300      	movs	r3, #0
 8001f18:	9303      	str	r3, [sp, #12]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	9302      	str	r3, [sp, #8]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	2300      	movs	r3, #0
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2300      	movs	r3, #0
 8001f28:	2204      	movs	r2, #4
 8001f2a:	2106      	movs	r1, #6
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7ff f852 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001f32:	4603      	mov	r3, r0
 8001f34:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                         /* qspi write read */
                if (res != 0)                                                                             /* check result */
 8001f36:	7dfb      	ldrb	r3, [r7, #23]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <w25qxx_read+0x358>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                /* write enable failed */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	484a      	ldr	r0, [pc, #296]	; (800206c <w25qxx_read+0x47c>)
 8001f42:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001f44:	2301      	movs	r3, #1
 8001f46:	e08c      	b.n	8002062 <w25qxx_read+0x472>
                }
                buf[0] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	0e1b      	lsrs	r3, r3, #24
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 8001f50:	2304      	movs	r3, #4
 8001f52:	930a      	str	r3, [sp, #40]	; 0x28
 8001f54:	2300      	movs	r3, #0
 8001f56:	9309      	str	r3, [sp, #36]	; 0x24
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9308      	str	r3, [sp, #32]
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	9307      	str	r3, [sp, #28]
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	9306      	str	r3, [sp, #24]
 8001f66:	2300      	movs	r3, #0
 8001f68:	9305      	str	r3, [sp, #20]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	9304      	str	r3, [sp, #16]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	9303      	str	r3, [sp, #12]
 8001f72:	2300      	movs	r3, #0
 8001f74:	9302      	str	r3, [sp, #8]
 8001f76:	2300      	movs	r3, #0
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2204      	movs	r2, #4
 8001f82:	21c5      	movs	r1, #197	; 0xc5
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f7ff f826 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                            /* spi write read */
                if (res != 0)                                                                             /* check result */
 8001f8e:	7dfb      	ldrb	r3, [r7, #23]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <w25qxx_read+0x3b0>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                /* write extended addr register failed */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <w25qxx_read+0x480>)
 8001f9a:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e060      	b.n	8002062 <w25qxx_read+0x472>
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	7f9b      	ldrb	r3, [r3, #30]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	920a      	str	r2, [sp, #40]	; 0x28
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	9209      	str	r2, [sp, #36]	; 0x24
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	9208      	str	r2, [sp, #32]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	9207      	str	r2, [sp, #28]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	9206      	str	r2, [sp, #24]
 8001fb8:	9305      	str	r3, [sp, #20]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	9304      	str	r3, [sp, #16]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	9303      	str	r3, [sp, #12]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9302      	str	r3, [sp, #8]
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	2304      	movs	r3, #4
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	210b      	movs	r1, #11
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f7fe fffe 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d03d      	beq.n	8002060 <w25qxx_read+0x470>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	4822      	ldr	r0, [pc, #136]	; (8002074 <w25qxx_read+0x484>)
 8001fea:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8001fec:	2301      	movs	r3, #1
 8001fee:	e038      	b.n	8002062 <w25qxx_read+0x472>
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	7f1b      	ldrb	r3, [r3, #28]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d12d      	bne.n	8002054 <w25qxx_read+0x464>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8b5b      	ldrh	r3, [r3, #26]
 8001ffc:	f64e 7217 	movw	r2, #61207	; 0xef17
 8002000:	4293      	cmp	r3, r2
 8002002:	d927      	bls.n	8002054 <w25qxx_read+0x464>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	7f9b      	ldrb	r3, [r3, #30]
 8002008:	2204      	movs	r2, #4
 800200a:	920a      	str	r2, [sp, #40]	; 0x28
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	9209      	str	r2, [sp, #36]	; 0x24
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	9208      	str	r2, [sp, #32]
 8002014:	2200      	movs	r2, #0
 8002016:	9207      	str	r2, [sp, #28]
 8002018:	2200      	movs	r2, #0
 800201a:	9206      	str	r2, [sp, #24]
 800201c:	9305      	str	r3, [sp, #20]
 800201e:	2300      	movs	r3, #0
 8002020:	9304      	str	r3, [sp, #16]
 8002022:	2300      	movs	r3, #0
 8002024:	9303      	str	r3, [sp, #12]
 8002026:	2300      	movs	r3, #0
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	2304      	movs	r3, #4
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	2304      	movs	r3, #4
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2204      	movs	r2, #4
 8002036:	210b      	movs	r1, #11
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f7fe ffcc 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 800203e:	4603      	mov	r3, r0
 8002040:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 8002042:	7dfb      	ldrb	r3, [r7, #23]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00b      	beq.n	8002060 <w25qxx_read+0x470>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	4809      	ldr	r0, [pc, #36]	; (8002074 <w25qxx_read+0x484>)
 800204e:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8002050:	2301      	movs	r3, #1
 8002052:	e006      	b.n	8002062 <w25qxx_read+0x472>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                    /* address mode is invalid */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	4807      	ldr	r0, [pc, #28]	; (8002078 <w25qxx_read+0x488>)
 800205a:	4798      	blx	r3
           
            return 4;                                                                                     /* return error */
 800205c:	2304      	movs	r3, #4
 800205e:	e000      	b.n	8002062 <w25qxx_read+0x472>
        }
    }
    
    return 0;                                                                                             /* success return 0 */
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	080070e8 	.word	0x080070e8
 8002070:	080076e4 	.word	0x080076e4
 8002074:	08007768 	.word	0x08007768
 8002078:	080073f4 	.word	0x080073f4

0800207c <a_w25qxx_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_w25qxx_read(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b092      	sub	sp, #72	; 0x48
 8002080:	af0c      	add	r7, sp, #48	; 0x30
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t buf[6];

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                         /* spi interface */
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f040 8161 	bne.w	8002358 <a_w25qxx_read+0x2dc>
    {
        if (handle->dual_quad_spi_enable != 0)                                                            /* enable dual quad spi */
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	7fdb      	ldrb	r3, [r3, #31]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80be 	beq.w	800221c <a_w25qxx_read+0x1a0>
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	7f1b      	ldrb	r3, [r3, #28]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f040 8081 	bne.w	80021ac <a_w25qxx_read+0x130>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8b5b      	ldrh	r3, [r3, #26]
 80020ae:	f64e 7217 	movw	r2, #61207	; 0xef17
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d952      	bls.n	800215c <a_w25qxx_read+0xe0>
                {
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 80020b6:	2300      	movs	r3, #0
 80020b8:	930a      	str	r3, [sp, #40]	; 0x28
 80020ba:	2300      	movs	r3, #0
 80020bc:	9309      	str	r3, [sp, #36]	; 0x24
 80020be:	2300      	movs	r3, #0
 80020c0:	9308      	str	r3, [sp, #32]
 80020c2:	2300      	movs	r3, #0
 80020c4:	9307      	str	r3, [sp, #28]
 80020c6:	2300      	movs	r3, #0
 80020c8:	9306      	str	r3, [sp, #24]
 80020ca:	2300      	movs	r3, #0
 80020cc:	9305      	str	r3, [sp, #20]
 80020ce:	2300      	movs	r3, #0
 80020d0:	9304      	str	r3, [sp, #16]
 80020d2:	2300      	movs	r3, #0
 80020d4:	9303      	str	r3, [sp, #12]
 80020d6:	2300      	movs	r3, #0
 80020d8:	9302      	str	r3, [sp, #8]
 80020da:	2300      	movs	r3, #0
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	2300      	movs	r3, #0
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2300      	movs	r3, #0
 80020e4:	2201      	movs	r2, #1
 80020e6:	2106      	movs	r1, #6
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f7fe ff74 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80020ee:	4603      	mov	r3, r0
 80020f0:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                     /* qspi write read */
                    if (res != 0)                                                                         /* check result */
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <a_w25qxx_read+0x88>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	4892      	ldr	r0, [pc, #584]	; (8002348 <a_w25qxx_read+0x2cc>)
 80020fe:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8002100:	2301      	movs	r3, #1
 8002102:	e1e8      	b.n	80024d6 <a_w25qxx_read+0x45a>
                    }
                    buf[0] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	0e1b      	lsrs	r3, r3, #24
 8002108:	b2db      	uxtb	r3, r3
 800210a:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 800210c:	2301      	movs	r3, #1
 800210e:	930a      	str	r3, [sp, #40]	; 0x28
 8002110:	2300      	movs	r3, #0
 8002112:	9309      	str	r3, [sp, #36]	; 0x24
 8002114:	2300      	movs	r3, #0
 8002116:	9308      	str	r3, [sp, #32]
 8002118:	2301      	movs	r3, #1
 800211a:	9307      	str	r3, [sp, #28]
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	9306      	str	r3, [sp, #24]
 8002122:	2300      	movs	r3, #0
 8002124:	9305      	str	r3, [sp, #20]
 8002126:	2300      	movs	r3, #0
 8002128:	9304      	str	r3, [sp, #16]
 800212a:	2300      	movs	r3, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	2300      	movs	r3, #0
 8002130:	9302      	str	r3, [sp, #8]
 8002132:	2300      	movs	r3, #0
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	2300      	movs	r3, #0
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2300      	movs	r3, #0
 800213c:	2201      	movs	r2, #1
 800213e:	21c5      	movs	r1, #197	; 0xc5
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7fe ff48 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002146:	4603      	mov	r3, r0
 8002148:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                        /* spi write read */
                    if (res != 0)                                                                         /* check result */
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <a_w25qxx_read+0xe0>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	487d      	ldr	r0, [pc, #500]	; (800234c <a_w25qxx_read+0x2d0>)
 8002156:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8002158:	2301      	movs	r3, #1
 800215a:	e1bc      	b.n	80024d6 <a_w25qxx_read+0x45a>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 800215c:	2301      	movs	r3, #1
 800215e:	930a      	str	r3, [sp, #40]	; 0x28
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	9309      	str	r3, [sp, #36]	; 0x24
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	9308      	str	r3, [sp, #32]
 8002168:	2300      	movs	r3, #0
 800216a:	9307      	str	r3, [sp, #28]
 800216c:	2300      	movs	r3, #0
 800216e:	9306      	str	r3, [sp, #24]
 8002170:	2308      	movs	r3, #8
 8002172:	9305      	str	r3, [sp, #20]
 8002174:	2300      	movs	r3, #0
 8002176:	9304      	str	r3, [sp, #16]
 8002178:	2300      	movs	r3, #0
 800217a:	9303      	str	r3, [sp, #12]
 800217c:	2300      	movs	r3, #0
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	2303      	movs	r3, #3
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	2301      	movs	r3, #1
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2201      	movs	r2, #1
 800218c:	210b      	movs	r1, #11
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f7fe ff21 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002194:	4603      	mov	r3, r0
 8002196:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 819a 	beq.w	80024d4 <a_w25qxx_read+0x458>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	486a      	ldr	r0, [pc, #424]	; (8002350 <a_w25qxx_read+0x2d4>)
 80021a6:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 80021a8:	2301      	movs	r3, #1
 80021aa:	e194      	b.n	80024d6 <a_w25qxx_read+0x45a>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	7f1b      	ldrb	r3, [r3, #28]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d12d      	bne.n	8002210 <a_w25qxx_read+0x194>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8b5b      	ldrh	r3, [r3, #26]
 80021b8:	f64e 7217 	movw	r2, #61207	; 0xef17
 80021bc:	4293      	cmp	r3, r2
 80021be:	d927      	bls.n	8002210 <a_w25qxx_read+0x194>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 80021c0:	2301      	movs	r3, #1
 80021c2:	930a      	str	r3, [sp, #40]	; 0x28
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	9309      	str	r3, [sp, #36]	; 0x24
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	9308      	str	r3, [sp, #32]
 80021cc:	2300      	movs	r3, #0
 80021ce:	9307      	str	r3, [sp, #28]
 80021d0:	2300      	movs	r3, #0
 80021d2:	9306      	str	r3, [sp, #24]
 80021d4:	2308      	movs	r3, #8
 80021d6:	9305      	str	r3, [sp, #20]
 80021d8:	2300      	movs	r3, #0
 80021da:	9304      	str	r3, [sp, #16]
 80021dc:	2300      	movs	r3, #0
 80021de:	9303      	str	r3, [sp, #12]
 80021e0:	2300      	movs	r3, #0
 80021e2:	9302      	str	r3, [sp, #8]
 80021e4:	2304      	movs	r3, #4
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	2301      	movs	r3, #1
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2201      	movs	r2, #1
 80021f0:	210b      	movs	r1, #11
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7fe feef 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80021f8:	4603      	mov	r3, r0
 80021fa:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8168 	beq.w	80024d4 <a_w25qxx_read+0x458>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	4851      	ldr	r0, [pc, #324]	; (8002350 <a_w25qxx_read+0x2d4>)
 800220a:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 800220c:	2301      	movs	r3, #1
 800220e:	e162      	b.n	80024d6 <a_w25qxx_read+0x45a>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	484f      	ldr	r0, [pc, #316]	; (8002354 <a_w25qxx_read+0x2d8>)
 8002216:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8002218:	2301      	movs	r3, #1
 800221a:	e15c      	b.n	80024d6 <a_w25qxx_read+0x45a>
            }
        }
        else
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	7f1b      	ldrb	r3, [r3, #28]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d159      	bne.n	80022d8 <a_w25qxx_read+0x25c>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8b5b      	ldrh	r3, [r3, #26]
 8002228:	f64e 7217 	movw	r2, #61207	; 0xef17
 800222c:	4293      	cmp	r3, r2
 800222e:	d92f      	bls.n	8002290 <a_w25qxx_read+0x214>
                {
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                 /* write enable command */
 8002230:	2306      	movs	r3, #6
 8002232:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                    /* spi write read */
 8002234:	f107 0110 	add.w	r1, r7, #16
 8002238:	2300      	movs	r3, #0
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2300      	movs	r3, #0
 800223e:	2201      	movs	r2, #1
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7fe fe9c 	bl	8000f7e <a_w25qxx_spi_write_read>
 8002246:	4603      	mov	r3, r0
 8002248:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <a_w25qxx_read+0x1e0>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	483c      	ldr	r0, [pc, #240]	; (8002348 <a_w25qxx_read+0x2cc>)
 8002256:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8002258:	2301      	movs	r3, #1
 800225a:	e13c      	b.n	80024d6 <a_w25qxx_read+0x45a>
                    }
                    buf[0] = 0xC5;                                                                        /* write extended addr register command */
 800225c:	23c5      	movs	r3, #197	; 0xc5
 800225e:	743b      	strb	r3, [r7, #16]
                    buf[1] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	0e1b      	lsrs	r3, r3, #24
 8002264:	b2db      	uxtb	r3, r3
 8002266:	747b      	strb	r3, [r7, #17]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                    /* spi write read */
 8002268:	f107 0110 	add.w	r1, r7, #16
 800226c:	2300      	movs	r3, #0
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2300      	movs	r3, #0
 8002272:	2202      	movs	r2, #2
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7fe fe82 	bl	8000f7e <a_w25qxx_spi_write_read>
 800227a:	4603      	mov	r3, r0
 800227c:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <a_w25qxx_read+0x214>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	4830      	ldr	r0, [pc, #192]	; (800234c <a_w25qxx_read+0x2d0>)
 800228a:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 800228c:	2301      	movs	r3, #1
 800228e:	e122      	b.n	80024d6 <a_w25qxx_read+0x45a>
                    }
                }
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 8002290:	230b      	movs	r3, #11
 8002292:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	0c1b      	lsrs	r3, r3, #16
 8002298:	b2db      	uxtb	r3, r3
 800229a:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	74fb      	strb	r3, [r7, #19]
                buf[4] = 0x00;                                                                            /* dummy */
 80022aa:	2300      	movs	r3, #0
 80022ac:	753b      	strb	r3, [r7, #20]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 5, (uint8_t *)data, (uint32_t)len); /* spi write read */
 80022ae:	f107 0110 	add.w	r1, r7, #16
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2205      	movs	r2, #5
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7fe fe5f 	bl	8000f7e <a_w25qxx_spi_write_read>
 80022c0:	4603      	mov	r3, r0
 80022c2:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8104 	beq.w	80024d4 <a_w25qxx_read+0x458>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	481f      	ldr	r0, [pc, #124]	; (8002350 <a_w25qxx_read+0x2d4>)
 80022d2:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0fe      	b.n	80024d6 <a_w25qxx_read+0x45a>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))   /* check address mode */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	7f1b      	ldrb	r3, [r3, #28]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d12d      	bne.n	800233c <a_w25qxx_read+0x2c0>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8b5b      	ldrh	r3, [r3, #26]
 80022e4:	f64e 7217 	movw	r2, #61207	; 0xef17
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d927      	bls.n	800233c <a_w25qxx_read+0x2c0>
            {
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 80022ec:	230b      	movs	r3, #11
 80022ee:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	0e1b      	lsrs	r3, r3, #24
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	0c1b      	lsrs	r3, r3, #16
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	b2db      	uxtb	r3, r3
 8002306:	74fb      	strb	r3, [r7, #19]
                buf[4] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	753b      	strb	r3, [r7, #20]
                buf[5] = 0x00;                                                                            /* dummy */
 800230e:	2300      	movs	r3, #0
 8002310:	757b      	strb	r3, [r7, #21]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 6, (uint8_t *)data, (uint32_t)len); /* spi write read */
 8002312:	f107 0110 	add.w	r1, r7, #16
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2206      	movs	r2, #6
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f7fe fe2d 	bl	8000f7e <a_w25qxx_spi_write_read>
 8002324:	4603      	mov	r3, r0
 8002326:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80d2 	beq.w	80024d4 <a_w25qxx_read+0x458>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	4806      	ldr	r0, [pc, #24]	; (8002350 <a_w25qxx_read+0x2d4>)
 8002336:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8002338:	2301      	movs	r3, #1
 800233a:	e0cc      	b.n	80024d6 <a_w25qxx_read+0x45a>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	4804      	ldr	r0, [pc, #16]	; (8002354 <a_w25qxx_read+0x2d8>)
 8002342:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8002344:	2301      	movs	r3, #1
 8002346:	e0c6      	b.n	80024d6 <a_w25qxx_read+0x45a>
 8002348:	080070e8 	.word	0x080070e8
 800234c:	080076e4 	.word	0x080076e4
 8002350:	08007768 	.word	0x08007768
 8002354:	080073f4 	.word	0x080073f4
            }
        }
    }
    else                                                                                                  /* qspi interface */
    {
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                           /* 3 address mode */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	7f1b      	ldrb	r3, [r3, #28]
 800235c:	2b00      	cmp	r3, #0
 800235e:	f040 8081 	bne.w	8002464 <a_w25qxx_read+0x3e8>
        {
            if (handle->type >= W25Q256)                                                                  /* >128Mb */
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8b5b      	ldrh	r3, [r3, #26]
 8002366:	f64e 7217 	movw	r2, #61207	; 0xef17
 800236a:	4293      	cmp	r3, r2
 800236c:	d952      	bls.n	8002414 <a_w25qxx_read+0x398>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 800236e:	2300      	movs	r3, #0
 8002370:	930a      	str	r3, [sp, #40]	; 0x28
 8002372:	2300      	movs	r3, #0
 8002374:	9309      	str	r3, [sp, #36]	; 0x24
 8002376:	2300      	movs	r3, #0
 8002378:	9308      	str	r3, [sp, #32]
 800237a:	2300      	movs	r3, #0
 800237c:	9307      	str	r3, [sp, #28]
 800237e:	2300      	movs	r3, #0
 8002380:	9306      	str	r3, [sp, #24]
 8002382:	2300      	movs	r3, #0
 8002384:	9305      	str	r3, [sp, #20]
 8002386:	2300      	movs	r3, #0
 8002388:	9304      	str	r3, [sp, #16]
 800238a:	2300      	movs	r3, #0
 800238c:	9303      	str	r3, [sp, #12]
 800238e:	2300      	movs	r3, #0
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2300      	movs	r3, #0
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	2300      	movs	r3, #0
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2300      	movs	r3, #0
 800239c:	2204      	movs	r2, #4
 800239e:	2106      	movs	r1, #6
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f7fe fe18 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80023a6:	4603      	mov	r3, r0
 80023a8:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                         /* qspi write read */
                if (res != 0)                                                                             /* check result */
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <a_w25qxx_read+0x340>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                /* write enable failed */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	484a      	ldr	r0, [pc, #296]	; (80024e0 <a_w25qxx_read+0x464>)
 80023b6:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 80023b8:	2301      	movs	r3, #1
 80023ba:	e08c      	b.n	80024d6 <a_w25qxx_read+0x45a>
                }
                buf[0] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	0e1b      	lsrs	r3, r3, #24
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 80023c4:	2304      	movs	r3, #4
 80023c6:	930a      	str	r3, [sp, #40]	; 0x28
 80023c8:	2300      	movs	r3, #0
 80023ca:	9309      	str	r3, [sp, #36]	; 0x24
 80023cc:	2300      	movs	r3, #0
 80023ce:	9308      	str	r3, [sp, #32]
 80023d0:	2301      	movs	r3, #1
 80023d2:	9307      	str	r3, [sp, #28]
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	9306      	str	r3, [sp, #24]
 80023da:	2300      	movs	r3, #0
 80023dc:	9305      	str	r3, [sp, #20]
 80023de:	2300      	movs	r3, #0
 80023e0:	9304      	str	r3, [sp, #16]
 80023e2:	2300      	movs	r3, #0
 80023e4:	9303      	str	r3, [sp, #12]
 80023e6:	2300      	movs	r3, #0
 80023e8:	9302      	str	r3, [sp, #8]
 80023ea:	2300      	movs	r3, #0
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	2300      	movs	r3, #0
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2300      	movs	r3, #0
 80023f4:	2204      	movs	r2, #4
 80023f6:	21c5      	movs	r1, #197	; 0xc5
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f7fe fdec 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80023fe:	4603      	mov	r3, r0
 8002400:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                            /* spi write read */
                if (res != 0)                                                                             /* check result */
 8002402:	7dfb      	ldrb	r3, [r7, #23]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <a_w25qxx_read+0x398>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                /* write extended addr register failed */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	4835      	ldr	r0, [pc, #212]	; (80024e4 <a_w25qxx_read+0x468>)
 800240e:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8002410:	2301      	movs	r3, #1
 8002412:	e060      	b.n	80024d6 <a_w25qxx_read+0x45a>
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	7f9b      	ldrb	r3, [r3, #30]
 8002418:	2204      	movs	r2, #4
 800241a:	920a      	str	r2, [sp, #40]	; 0x28
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	9209      	str	r2, [sp, #36]	; 0x24
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	9208      	str	r2, [sp, #32]
 8002424:	2200      	movs	r2, #0
 8002426:	9207      	str	r2, [sp, #28]
 8002428:	2200      	movs	r2, #0
 800242a:	9206      	str	r2, [sp, #24]
 800242c:	9305      	str	r3, [sp, #20]
 800242e:	2300      	movs	r3, #0
 8002430:	9304      	str	r3, [sp, #16]
 8002432:	2300      	movs	r3, #0
 8002434:	9303      	str	r3, [sp, #12]
 8002436:	2300      	movs	r3, #0
 8002438:	9302      	str	r3, [sp, #8]
 800243a:	2303      	movs	r3, #3
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	2304      	movs	r3, #4
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2204      	movs	r2, #4
 8002446:	210b      	movs	r1, #11
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7fe fdc4 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 800244e:	4603      	mov	r3, r0
 8002450:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 8002452:	7dfb      	ldrb	r3, [r7, #23]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d03d      	beq.n	80024d4 <a_w25qxx_read+0x458>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	4822      	ldr	r0, [pc, #136]	; (80024e8 <a_w25qxx_read+0x46c>)
 800245e:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8002460:	2301      	movs	r3, #1
 8002462:	e038      	b.n	80024d6 <a_w25qxx_read+0x45a>
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	7f1b      	ldrb	r3, [r3, #28]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d12d      	bne.n	80024c8 <a_w25qxx_read+0x44c>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8b5b      	ldrh	r3, [r3, #26]
 8002470:	f64e 7217 	movw	r2, #61207	; 0xef17
 8002474:	4293      	cmp	r3, r2
 8002476:	d927      	bls.n	80024c8 <a_w25qxx_read+0x44c>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	7f9b      	ldrb	r3, [r3, #30]
 800247c:	2204      	movs	r2, #4
 800247e:	920a      	str	r2, [sp, #40]	; 0x28
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	9209      	str	r2, [sp, #36]	; 0x24
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	9208      	str	r2, [sp, #32]
 8002488:	2200      	movs	r2, #0
 800248a:	9207      	str	r2, [sp, #28]
 800248c:	2200      	movs	r2, #0
 800248e:	9206      	str	r2, [sp, #24]
 8002490:	9305      	str	r3, [sp, #20]
 8002492:	2300      	movs	r3, #0
 8002494:	9304      	str	r3, [sp, #16]
 8002496:	2300      	movs	r3, #0
 8002498:	9303      	str	r3, [sp, #12]
 800249a:	2300      	movs	r3, #0
 800249c:	9302      	str	r3, [sp, #8]
 800249e:	2304      	movs	r3, #4
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	2304      	movs	r3, #4
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2204      	movs	r2, #4
 80024aa:	210b      	movs	r1, #11
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f7fe fd92 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80024b2:	4603      	mov	r3, r0
 80024b4:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00b      	beq.n	80024d4 <a_w25qxx_read+0x458>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	4809      	ldr	r0, [pc, #36]	; (80024e8 <a_w25qxx_read+0x46c>)
 80024c2:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 80024c4:	2301      	movs	r3, #1
 80024c6:	e006      	b.n	80024d6 <a_w25qxx_read+0x45a>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                    /* address mode is invalid */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	4807      	ldr	r0, [pc, #28]	; (80024ec <a_w25qxx_read+0x470>)
 80024ce:	4798      	blx	r3
           
            return 1;                                                                                     /* return error */
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <a_w25qxx_read+0x45a>
        }
    }
    
    return 0;                                                                                             /* success return 0 */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	080070e8 	.word	0x080070e8
 80024e4:	080076e4 	.word	0x080076e4
 80024e8:	08007768 	.word	0x08007768
 80024ec:	080073f4 	.word	0x080073f4

080024f0 <a_w25qxx_erase_sector>:
 *            - 0 success
 *            - 1 sector erase failed
 * @note      none
 */
static uint8_t a_w25qxx_erase_sector(w25qxx_handle_t *handle, uint32_t addr)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b092      	sub	sp, #72	; 0x48
 80024f4:	af0c      	add	r7, sp, #48	; 0x30
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
    uint8_t res;
    uint8_t status;
    uint32_t timeout;
    uint8_t buf[5];

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                           /* spi interface */
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f040 8217 	bne.w	8002934 <a_w25qxx_erase_sector+0x444>
    {
        if (handle->dual_quad_spi_enable != 0)                                                              /* enable dual quad spi */
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7fdb      	ldrb	r3, [r3, #31]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8129 	beq.w	8002762 <a_w25qxx_erase_sector+0x272>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 8002510:	2300      	movs	r3, #0
 8002512:	930a      	str	r3, [sp, #40]	; 0x28
 8002514:	2300      	movs	r3, #0
 8002516:	9309      	str	r3, [sp, #36]	; 0x24
 8002518:	2300      	movs	r3, #0
 800251a:	9308      	str	r3, [sp, #32]
 800251c:	2300      	movs	r3, #0
 800251e:	9307      	str	r3, [sp, #28]
 8002520:	2300      	movs	r3, #0
 8002522:	9306      	str	r3, [sp, #24]
 8002524:	2300      	movs	r3, #0
 8002526:	9305      	str	r3, [sp, #20]
 8002528:	2300      	movs	r3, #0
 800252a:	9304      	str	r3, [sp, #16]
 800252c:	2300      	movs	r3, #0
 800252e:	9303      	str	r3, [sp, #12]
 8002530:	2300      	movs	r3, #0
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	2300      	movs	r3, #0
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	2300      	movs	r3, #0
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2300      	movs	r3, #0
 800253e:	2201      	movs	r2, #1
 8002540:	2106      	movs	r1, #6
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe fd47 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002548:	4603      	mov	r3, r0
 800254a:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* qspi write read */
            if (res != 0)                                                                                   /* check result */
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <a_w25qxx_erase_sector+0x6e>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	48a0      	ldr	r0, [pc, #640]	; (80027d8 <a_w25qxx_erase_sector+0x2e8>)
 8002558:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 800255a:	2301      	movs	r3, #1
 800255c:	e320      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7f1b      	ldrb	r3, [r3, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d17f      	bne.n	8002666 <a_w25qxx_erase_sector+0x176>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	8b5b      	ldrh	r3, [r3, #26]
 800256a:	f64e 7217 	movw	r2, #61207	; 0xef17
 800256e:	4293      	cmp	r3, r2
 8002570:	d952      	bls.n	8002618 <a_w25qxx_erase_sector+0x128>
                {
                    buf[0] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	0e1b      	lsrs	r3, r3, #24
 8002576:	b2db      	uxtb	r3, r3
 8002578:	733b      	strb	r3, [r7, #12]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 800257a:	2301      	movs	r3, #1
 800257c:	930a      	str	r3, [sp, #40]	; 0x28
 800257e:	2300      	movs	r3, #0
 8002580:	9309      	str	r3, [sp, #36]	; 0x24
 8002582:	2300      	movs	r3, #0
 8002584:	9308      	str	r3, [sp, #32]
 8002586:	2301      	movs	r3, #1
 8002588:	9307      	str	r3, [sp, #28]
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	9306      	str	r3, [sp, #24]
 8002590:	2300      	movs	r3, #0
 8002592:	9305      	str	r3, [sp, #20]
 8002594:	2300      	movs	r3, #0
 8002596:	9304      	str	r3, [sp, #16]
 8002598:	2300      	movs	r3, #0
 800259a:	9303      	str	r3, [sp, #12]
 800259c:	2300      	movs	r3, #0
 800259e:	9302      	str	r3, [sp, #8]
 80025a0:	2300      	movs	r3, #0
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	2300      	movs	r3, #0
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2300      	movs	r3, #0
 80025aa:	2201      	movs	r2, #1
 80025ac:	21c5      	movs	r1, #197	; 0xc5
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fd11 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80025b4:	4603      	mov	r3, r0
 80025b6:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                          /* spi write read */
                    if (res != 0)                                                                           /* check result */
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <a_w25qxx_erase_sector+0xda>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4886      	ldr	r0, [pc, #536]	; (80027dc <a_w25qxx_erase_sector+0x2ec>)
 80025c4:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e2ea      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
                    }
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 80025ca:	2300      	movs	r3, #0
 80025cc:	930a      	str	r3, [sp, #40]	; 0x28
 80025ce:	2300      	movs	r3, #0
 80025d0:	9309      	str	r3, [sp, #36]	; 0x24
 80025d2:	2300      	movs	r3, #0
 80025d4:	9308      	str	r3, [sp, #32]
 80025d6:	2300      	movs	r3, #0
 80025d8:	9307      	str	r3, [sp, #28]
 80025da:	2300      	movs	r3, #0
 80025dc:	9306      	str	r3, [sp, #24]
 80025de:	2300      	movs	r3, #0
 80025e0:	9305      	str	r3, [sp, #20]
 80025e2:	2300      	movs	r3, #0
 80025e4:	9304      	str	r3, [sp, #16]
 80025e6:	2300      	movs	r3, #0
 80025e8:	9303      	str	r3, [sp, #12]
 80025ea:	2300      	movs	r3, #0
 80025ec:	9302      	str	r3, [sp, #8]
 80025ee:	2300      	movs	r3, #0
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	2300      	movs	r3, #0
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2300      	movs	r3, #0
 80025f8:	2201      	movs	r2, #1
 80025fa:	2106      	movs	r1, #6
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7fe fcea 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002602:	4603      	mov	r3, r0
 8002604:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                       /* qspi write read */
                    if (res != 0)                                                                           /* check result */
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <a_w25qxx_erase_sector+0x128>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	4871      	ldr	r0, [pc, #452]	; (80027d8 <a_w25qxx_erase_sector+0x2e8>)
 8002612:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8002614:	2301      	movs	r3, #1
 8002616:	e2c3      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 1,
 8002618:	2300      	movs	r3, #0
 800261a:	930a      	str	r3, [sp, #40]	; 0x28
 800261c:	2300      	movs	r3, #0
 800261e:	9309      	str	r3, [sp, #36]	; 0x24
 8002620:	2300      	movs	r3, #0
 8002622:	9308      	str	r3, [sp, #32]
 8002624:	2300      	movs	r3, #0
 8002626:	9307      	str	r3, [sp, #28]
 8002628:	2300      	movs	r3, #0
 800262a:	9306      	str	r3, [sp, #24]
 800262c:	2300      	movs	r3, #0
 800262e:	9305      	str	r3, [sp, #20]
 8002630:	2300      	movs	r3, #0
 8002632:	9304      	str	r3, [sp, #16]
 8002634:	2300      	movs	r3, #0
 8002636:	9303      	str	r3, [sp, #12]
 8002638:	2300      	movs	r3, #0
 800263a:	9302      	str	r3, [sp, #8]
 800263c:	2303      	movs	r3, #3
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	2301      	movs	r3, #1
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2201      	movs	r2, #1
 8002648:	2120      	movs	r1, #32
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fcc3 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002650:	4603      	mov	r3, r0
 8002652:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* spi write read */
                if (res != 0)                                                                               /* check result */
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d03c      	beq.n	80026d4 <a_w25qxx_erase_sector+0x1e4>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	4860      	ldr	r0, [pc, #384]	; (80027e0 <a_w25qxx_erase_sector+0x2f0>)
 8002660:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002662:	2301      	movs	r3, #1
 8002664:	e29c      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7f1b      	ldrb	r3, [r3, #28]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d12c      	bne.n	80026c8 <a_w25qxx_erase_sector+0x1d8>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8b5b      	ldrh	r3, [r3, #26]
 8002672:	f64e 7217 	movw	r2, #61207	; 0xef17
 8002676:	4293      	cmp	r3, r2
 8002678:	d926      	bls.n	80026c8 <a_w25qxx_erase_sector+0x1d8>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 1,
 800267a:	2300      	movs	r3, #0
 800267c:	930a      	str	r3, [sp, #40]	; 0x28
 800267e:	2300      	movs	r3, #0
 8002680:	9309      	str	r3, [sp, #36]	; 0x24
 8002682:	2300      	movs	r3, #0
 8002684:	9308      	str	r3, [sp, #32]
 8002686:	2300      	movs	r3, #0
 8002688:	9307      	str	r3, [sp, #28]
 800268a:	2300      	movs	r3, #0
 800268c:	9306      	str	r3, [sp, #24]
 800268e:	2300      	movs	r3, #0
 8002690:	9305      	str	r3, [sp, #20]
 8002692:	2300      	movs	r3, #0
 8002694:	9304      	str	r3, [sp, #16]
 8002696:	2300      	movs	r3, #0
 8002698:	9303      	str	r3, [sp, #12]
 800269a:	2300      	movs	r3, #0
 800269c:	9302      	str	r3, [sp, #8]
 800269e:	2304      	movs	r3, #4
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	2301      	movs	r3, #1
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2201      	movs	r2, #1
 80026aa:	2120      	movs	r1, #32
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7fe fc92 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80026b2:	4603      	mov	r3, r0
 80026b4:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* spi write read */
                if (res != 0)                                                                               /* check result */
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <a_w25qxx_erase_sector+0x1e4>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4847      	ldr	r0, [pc, #284]	; (80027e0 <a_w25qxx_erase_sector+0x2f0>)
 80026c2:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80026c4:	2301      	movs	r3, #1
 80026c6:	e26b      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	4845      	ldr	r0, [pc, #276]	; (80027e4 <a_w25qxx_erase_sector+0x2f4>)
 80026ce:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 80026d0:	2301      	movs	r3, #1
 80026d2:	e265      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
            }
            
            timeout = 400;                                                                                  /* max 400 ms */
 80026d4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80026d8:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 80026da:	e033      	b.n	8002744 <a_w25qxx_erase_sector+0x254>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 1,
 80026dc:	2301      	movs	r3, #1
 80026de:	930a      	str	r3, [sp, #40]	; 0x28
 80026e0:	2301      	movs	r3, #1
 80026e2:	9309      	str	r3, [sp, #36]	; 0x24
 80026e4:	f107 0312 	add.w	r3, r7, #18
 80026e8:	9308      	str	r3, [sp, #32]
 80026ea:	2300      	movs	r3, #0
 80026ec:	9307      	str	r3, [sp, #28]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9306      	str	r3, [sp, #24]
 80026f2:	2300      	movs	r3, #0
 80026f4:	9305      	str	r3, [sp, #20]
 80026f6:	2300      	movs	r3, #0
 80026f8:	9304      	str	r3, [sp, #16]
 80026fa:	2300      	movs	r3, #0
 80026fc:	9303      	str	r3, [sp, #12]
 80026fe:	2300      	movs	r3, #0
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	2300      	movs	r3, #0
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	2300      	movs	r3, #0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2300      	movs	r3, #0
 800270c:	2201      	movs	r2, #1
 800270e:	2105      	movs	r1, #5
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7fe fc60 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002716:	4603      	mov	r3, r0
 8002718:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0,
                                              (uint8_t *)&status, 1, 1);                                    /* spi write read */
                if (res != 0)                                                                               /* check result */
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <a_w25qxx_erase_sector+0x23c>
                {
                    handle->debug_print("w25qxx: get status1 failed.\n");                                   /* get status1 failed */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	4830      	ldr	r0, [pc, #192]	; (80027e8 <a_w25qxx_erase_sector+0x2f8>)
 8002726:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002728:	2301      	movs	r3, #1
 800272a:	e239      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 800272c:	7cbb      	ldrb	r3, [r7, #18]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <a_w25qxx_erase_sector+0x25c>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3b01      	subs	r3, #1
 800273a:	617b      	str	r3, [r7, #20]
                handle->delay_ms(1);                                                                        /* delay 1 ms */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2001      	movs	r0, #1
 8002742:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1c8      	bne.n	80026dc <a_w25qxx_erase_sector+0x1ec>
 800274a:	e000      	b.n	800274e <a_w25qxx_erase_sector+0x25e>
                    break;                                                                                  /* break */
 800274c:	bf00      	nop
            }
            if (timeout == 0)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f040 8224 	bne.w	8002b9e <a_w25qxx_erase_sector+0x6ae>
            {
                handle->debug_print("w25qxx: sector erase 4k timeout.\n");                                  /* sector erase 4k timeout */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	4824      	ldr	r0, [pc, #144]	; (80027ec <a_w25qxx_erase_sector+0x2fc>)
 800275c:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 800275e:	2301      	movs	r3, #1
 8002760:	e21e      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
            }
        }
        else                                                                                                /* single spi */
        {
            buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                           /* write enable command */
 8002762:	2306      	movs	r3, #6
 8002764:	733b      	strb	r3, [r7, #12]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                              /* spi write read */
 8002766:	f107 010c 	add.w	r1, r7, #12
 800276a:	2300      	movs	r3, #0
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2300      	movs	r3, #0
 8002770:	2201      	movs	r2, #1
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fc03 	bl	8000f7e <a_w25qxx_spi_write_read>
 8002778:	4603      	mov	r3, r0
 800277a:	74fb      	strb	r3, [r7, #19]
            if (res != 0)                                                                                   /* check result */
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <a_w25qxx_erase_sector+0x29e>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4814      	ldr	r0, [pc, #80]	; (80027d8 <a_w25qxx_erase_sector+0x2e8>)
 8002788:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 800278a:	2301      	movs	r3, #1
 800278c:	e208      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7f1b      	ldrb	r3, [r3, #28]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d163      	bne.n	800285e <a_w25qxx_erase_sector+0x36e>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	8b5b      	ldrh	r3, [r3, #26]
 800279a:	f64e 7217 	movw	r2, #61207	; 0xef17
 800279e:	4293      	cmp	r3, r2
 80027a0:	d93c      	bls.n	800281c <a_w25qxx_erase_sector+0x32c>
                {
                    buf[0] = 0xC5;                                                                          /* write extended addr register command */
 80027a2:	23c5      	movs	r3, #197	; 0xc5
 80027a4:	733b      	strb	r3, [r7, #12]
                    buf[1] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	0e1b      	lsrs	r3, r3, #24
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	737b      	strb	r3, [r7, #13]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                      /* spi write read */
 80027ae:	f107 010c 	add.w	r1, r7, #12
 80027b2:	2300      	movs	r3, #0
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2300      	movs	r3, #0
 80027b8:	2202      	movs	r2, #2
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fe fbdf 	bl	8000f7e <a_w25qxx_spi_write_read>
 80027c0:	4603      	mov	r3, r0
 80027c2:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d012      	beq.n	80027f0 <a_w25qxx_erase_sector+0x300>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	4803      	ldr	r0, [pc, #12]	; (80027dc <a_w25qxx_erase_sector+0x2ec>)
 80027d0:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1e4      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
 80027d6:	bf00      	nop
 80027d8:	080070e8 	.word	0x080070e8
 80027dc:	080076e4 	.word	0x080076e4
 80027e0:	08007930 	.word	0x08007930
 80027e4:	080073f4 	.word	0x080073f4
 80027e8:	0800714c 	.word	0x0800714c
 80027ec:	08007954 	.word	0x08007954
                    }
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                   /* write enable command */
 80027f0:	2306      	movs	r3, #6
 80027f2:	733b      	strb	r3, [r7, #12]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                      /* spi write read */
 80027f4:	f107 010c 	add.w	r1, r7, #12
 80027f8:	2300      	movs	r3, #0
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2300      	movs	r3, #0
 80027fe:	2201      	movs	r2, #1
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7fe fbbc 	bl	8000f7e <a_w25qxx_spi_write_read>
 8002806:	4603      	mov	r3, r0
 8002808:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <a_w25qxx_erase_sector+0x32c>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	489d      	ldr	r0, [pc, #628]	; (8002a8c <a_w25qxx_erase_sector+0x59c>)
 8002816:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8002818:	2301      	movs	r3, #1
 800281a:	e1c1      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
                    }
                }
                buf[0] = W25QXX_COMMAND_SECTOR_ERASE_4K;                                                    /* sector erase 4k command */
 800281c:	2320      	movs	r3, #32
 800281e:	733b      	strb	r3, [r7, #12]
                buf[1] = (addr >> 16) & 0xFF;                                                               /* 23 - 16 bits */
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	0c1b      	lsrs	r3, r3, #16
 8002824:	b2db      	uxtb	r3, r3
 8002826:	737b      	strb	r3, [r7, #13]
                buf[2] = (addr >> 8) & 0xFF;                                                                /* 15 - 8  bits */
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	b2db      	uxtb	r3, r3
 800282e:	73bb      	strb	r3, [r7, #14]
                buf[3] = (addr >> 0) & 0xFF;                                                                /* 7 - 0 bits */
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	73fb      	strb	r3, [r7, #15]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 4, NULL, 0);                          /* spi write read */
 8002836:	f107 010c 	add.w	r1, r7, #12
 800283a:	2300      	movs	r3, #0
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2300      	movs	r3, #0
 8002840:	2204      	movs	r2, #4
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe fb9b 	bl	8000f7e <a_w25qxx_spi_write_read>
 8002848:	4603      	mov	r3, r0
 800284a:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 800284c:	7cfb      	ldrb	r3, [r7, #19]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d03a      	beq.n	80028c8 <a_w25qxx_erase_sector+0x3d8>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	488e      	ldr	r0, [pc, #568]	; (8002a90 <a_w25qxx_erase_sector+0x5a0>)
 8002858:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 800285a:	2301      	movs	r3, #1
 800285c:	e1a0      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7f1b      	ldrb	r3, [r3, #28]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d12a      	bne.n	80028bc <a_w25qxx_erase_sector+0x3cc>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	8b5b      	ldrh	r3, [r3, #26]
 800286a:	f64e 7217 	movw	r2, #61207	; 0xef17
 800286e:	4293      	cmp	r3, r2
 8002870:	d924      	bls.n	80028bc <a_w25qxx_erase_sector+0x3cc>
            {
                buf[0] = W25QXX_COMMAND_SECTOR_ERASE_4K;                                                    /* sector erase 4k command */
 8002872:	2320      	movs	r3, #32
 8002874:	733b      	strb	r3, [r7, #12]
                buf[1] = (addr >> 24) & 0xFF;                                                               /* 31 - 24 bits */
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	0e1b      	lsrs	r3, r3, #24
 800287a:	b2db      	uxtb	r3, r3
 800287c:	737b      	strb	r3, [r7, #13]
                buf[2] = (addr >> 16) & 0xFF;                                                               /* 23 - 16 bits */
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	b2db      	uxtb	r3, r3
 8002884:	73bb      	strb	r3, [r7, #14]
                buf[3] = (addr >> 8) & 0xFF;                                                                /* 15 - 8  bits */
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	b2db      	uxtb	r3, r3
 800288c:	73fb      	strb	r3, [r7, #15]
                buf[4] = (addr >> 0) & 0xFF;                                                                /* 7 - 0 bits */
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 5, NULL, 0);                          /* spi write read */
 8002894:	f107 010c 	add.w	r1, r7, #12
 8002898:	2300      	movs	r3, #0
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2300      	movs	r3, #0
 800289e:	2205      	movs	r2, #5
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7fe fb6c 	bl	8000f7e <a_w25qxx_spi_write_read>
 80028a6:	4603      	mov	r3, r0
 80028a8:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 80028aa:	7cfb      	ldrb	r3, [r7, #19]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00b      	beq.n	80028c8 <a_w25qxx_erase_sector+0x3d8>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4876      	ldr	r0, [pc, #472]	; (8002a90 <a_w25qxx_erase_sector+0x5a0>)
 80028b6:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80028b8:	2301      	movs	r3, #1
 80028ba:	e171      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	4874      	ldr	r0, [pc, #464]	; (8002a94 <a_w25qxx_erase_sector+0x5a4>)
 80028c2:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 80028c4:	2301      	movs	r3, #1
 80028c6:	e16b      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
            }
            
            timeout = 400;                                                                                  /* max 400 ms */
 80028c8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80028cc:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 80028ce:	e022      	b.n	8002916 <a_w25qxx_erase_sector+0x426>
            {
                buf[0] = W25QXX_COMMAND_READ_STATUS_REG1;                                                   /* read status1 command */
 80028d0:	2305      	movs	r3, #5
 80028d2:	733b      	strb	r3, [r7, #12]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, (uint8_t *)&status, 1);            /* spi write read */
 80028d4:	f107 0312 	add.w	r3, r7, #18
 80028d8:	f107 010c 	add.w	r1, r7, #12
 80028dc:	2201      	movs	r2, #1
 80028de:	9200      	str	r2, [sp, #0]
 80028e0:	2201      	movs	r2, #1
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fb4b 	bl	8000f7e <a_w25qxx_spi_write_read>
 80028e8:	4603      	mov	r3, r0
 80028ea:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <a_w25qxx_erase_sector+0x40e>
                {
                    handle->debug_print("w25qxx: get status1 failed.\n");                                   /* get status1 failed */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	4868      	ldr	r0, [pc, #416]	; (8002a98 <a_w25qxx_erase_sector+0x5a8>)
 80028f8:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80028fa:	2301      	movs	r3, #1
 80028fc:	e150      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 80028fe:	7cbb      	ldrb	r3, [r7, #18]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <a_w25qxx_erase_sector+0x42e>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3b01      	subs	r3, #1
 800290c:	617b      	str	r3, [r7, #20]
                handle->delay_ms(1);                                                                        /* delay 1 ms */
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2001      	movs	r0, #1
 8002914:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1d9      	bne.n	80028d0 <a_w25qxx_erase_sector+0x3e0>
 800291c:	e000      	b.n	8002920 <a_w25qxx_erase_sector+0x430>
                    break;                                                                                  /* break */
 800291e:	bf00      	nop
            }
            if (timeout == 0)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 813b 	bne.w	8002b9e <a_w25qxx_erase_sector+0x6ae>
            {
                handle->debug_print("w25qxx: sector erase 4k timeout.\n");                                  /* sector erase 4k timeout */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	485b      	ldr	r0, [pc, #364]	; (8002a9c <a_w25qxx_erase_sector+0x5ac>)
 800292e:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8002930:	2301      	movs	r3, #1
 8002932:	e135      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
            }
        }
    }
    else
    {
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8002934:	2300      	movs	r3, #0
 8002936:	930a      	str	r3, [sp, #40]	; 0x28
 8002938:	2300      	movs	r3, #0
 800293a:	9309      	str	r3, [sp, #36]	; 0x24
 800293c:	2300      	movs	r3, #0
 800293e:	9308      	str	r3, [sp, #32]
 8002940:	2300      	movs	r3, #0
 8002942:	9307      	str	r3, [sp, #28]
 8002944:	2300      	movs	r3, #0
 8002946:	9306      	str	r3, [sp, #24]
 8002948:	2300      	movs	r3, #0
 800294a:	9305      	str	r3, [sp, #20]
 800294c:	2300      	movs	r3, #0
 800294e:	9304      	str	r3, [sp, #16]
 8002950:	2300      	movs	r3, #0
 8002952:	9303      	str	r3, [sp, #12]
 8002954:	2300      	movs	r3, #0
 8002956:	9302      	str	r3, [sp, #8]
 8002958:	2300      	movs	r3, #0
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	2300      	movs	r3, #0
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2300      	movs	r3, #0
 8002962:	2204      	movs	r2, #4
 8002964:	2106      	movs	r1, #6
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe fb35 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 800296c:	4603      	mov	r3, r0
 800296e:	74fb      	strb	r3, [r7, #19]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                                   /* qspi write read */
        if (res != 0)                                                                                       /* check result */
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <a_w25qxx_erase_sector+0x492>
        {
            handle->debug_print("w25qxx: write enable failed.\n");                                          /* write enable failed */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4844      	ldr	r0, [pc, #272]	; (8002a8c <a_w25qxx_erase_sector+0x59c>)
 800297c:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 800297e:	2301      	movs	r3, #1
 8002980:	e10e      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
        }
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                             /* 3 address mode */
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7f1b      	ldrb	r3, [r3, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 808c 	bne.w	8002aa4 <a_w25qxx_erase_sector+0x5b4>
        {
            if (handle->type >= W25Q256)                                                                    /* >128Mb */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8b5b      	ldrh	r3, [r3, #26]
 8002990:	f64e 7217 	movw	r2, #61207	; 0xef17
 8002994:	4293      	cmp	r3, r2
 8002996:	d952      	bls.n	8002a3e <a_w25qxx_erase_sector+0x54e>
            {
                buf[0] = (addr >> 24) & 0xFF;                                                               /* 31 - 24 bits */
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	0e1b      	lsrs	r3, r3, #24
 800299c:	b2db      	uxtb	r3, r3
 800299e:	733b      	strb	r3, [r7, #12]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 80029a0:	2304      	movs	r3, #4
 80029a2:	930a      	str	r3, [sp, #40]	; 0x28
 80029a4:	2300      	movs	r3, #0
 80029a6:	9309      	str	r3, [sp, #36]	; 0x24
 80029a8:	2300      	movs	r3, #0
 80029aa:	9308      	str	r3, [sp, #32]
 80029ac:	2301      	movs	r3, #1
 80029ae:	9307      	str	r3, [sp, #28]
 80029b0:	f107 030c 	add.w	r3, r7, #12
 80029b4:	9306      	str	r3, [sp, #24]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9305      	str	r3, [sp, #20]
 80029ba:	2300      	movs	r3, #0
 80029bc:	9304      	str	r3, [sp, #16]
 80029be:	2300      	movs	r3, #0
 80029c0:	9303      	str	r3, [sp, #12]
 80029c2:	2300      	movs	r3, #0
 80029c4:	9302      	str	r3, [sp, #8]
 80029c6:	2300      	movs	r3, #0
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	2300      	movs	r3, #0
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2300      	movs	r3, #0
 80029d0:	2204      	movs	r2, #4
 80029d2:	21c5      	movs	r1, #197	; 0xc5
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7fe fafe 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80029da:	4603      	mov	r3, r0
 80029dc:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <a_w25qxx_erase_sector+0x500>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                  /* write extended addr register failed */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	482d      	ldr	r0, [pc, #180]	; (8002aa0 <a_w25qxx_erase_sector+0x5b0>)
 80029ea:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0d7      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 80029f0:	2300      	movs	r3, #0
 80029f2:	930a      	str	r3, [sp, #40]	; 0x28
 80029f4:	2300      	movs	r3, #0
 80029f6:	9309      	str	r3, [sp, #36]	; 0x24
 80029f8:	2300      	movs	r3, #0
 80029fa:	9308      	str	r3, [sp, #32]
 80029fc:	2300      	movs	r3, #0
 80029fe:	9307      	str	r3, [sp, #28]
 8002a00:	2300      	movs	r3, #0
 8002a02:	9306      	str	r3, [sp, #24]
 8002a04:	2300      	movs	r3, #0
 8002a06:	9305      	str	r3, [sp, #20]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9304      	str	r3, [sp, #16]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	9303      	str	r3, [sp, #12]
 8002a10:	2300      	movs	r3, #0
 8002a12:	9302      	str	r3, [sp, #8]
 8002a14:	2300      	movs	r3, #0
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2204      	movs	r2, #4
 8002a20:	2106      	movs	r1, #6
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe fad7 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* qspi write read */
                if (res != 0)                                                                               /* check result */
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <a_w25qxx_erase_sector+0x54e>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                  /* write enable failed */
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	4815      	ldr	r0, [pc, #84]	; (8002a8c <a_w25qxx_erase_sector+0x59c>)
 8002a38:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0b0      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 4,
 8002a3e:	2300      	movs	r3, #0
 8002a40:	930a      	str	r3, [sp, #40]	; 0x28
 8002a42:	2300      	movs	r3, #0
 8002a44:	9309      	str	r3, [sp, #36]	; 0x24
 8002a46:	2300      	movs	r3, #0
 8002a48:	9308      	str	r3, [sp, #32]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9307      	str	r3, [sp, #28]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9306      	str	r3, [sp, #24]
 8002a52:	2300      	movs	r3, #0
 8002a54:	9305      	str	r3, [sp, #20]
 8002a56:	2300      	movs	r3, #0
 8002a58:	9304      	str	r3, [sp, #16]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9303      	str	r3, [sp, #12]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	9302      	str	r3, [sp, #8]
 8002a62:	2303      	movs	r3, #3
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	2304      	movs	r3, #4
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	2120      	movs	r1, #32
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7fe fab0 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002a76:	4603      	mov	r3, r0
 8002a78:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d048      	beq.n	8002b12 <a_w25qxx_erase_sector+0x622>
            {
                handle->debug_print("w25qxx: sector erase 4k failed.\n");                                   /* sector erase 4k failed */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <a_w25qxx_erase_sector+0x5a0>)
 8002a86:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e089      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
 8002a8c:	080070e8 	.word	0x080070e8
 8002a90:	08007930 	.word	0x08007930
 8002a94:	080073f4 	.word	0x080073f4
 8002a98:	0800714c 	.word	0x0800714c
 8002a9c:	08007954 	.word	0x08007954
 8002aa0:	080076e4 	.word	0x080076e4
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7f1b      	ldrb	r3, [r3, #28]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d12c      	bne.n	8002b06 <a_w25qxx_erase_sector+0x616>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	8b5b      	ldrh	r3, [r3, #26]
 8002ab0:	f64e 7217 	movw	r2, #61207	; 0xef17
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d926      	bls.n	8002b06 <a_w25qxx_erase_sector+0x616>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 4,
 8002ab8:	2300      	movs	r3, #0
 8002aba:	930a      	str	r3, [sp, #40]	; 0x28
 8002abc:	2300      	movs	r3, #0
 8002abe:	9309      	str	r3, [sp, #36]	; 0x24
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9308      	str	r3, [sp, #32]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9307      	str	r3, [sp, #28]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9306      	str	r3, [sp, #24]
 8002acc:	2300      	movs	r3, #0
 8002ace:	9305      	str	r3, [sp, #20]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9304      	str	r3, [sp, #16]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9303      	str	r3, [sp, #12]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9302      	str	r3, [sp, #8]
 8002adc:	2304      	movs	r3, #4
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	2120      	movs	r1, #32
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe fa73 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002af0:	4603      	mov	r3, r0
 8002af2:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <a_w25qxx_erase_sector+0x622>
            {
                handle->debug_print("w25qxx: sector erase 4k failed.\n");                                   /* sector erase 4k failed */
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	482a      	ldr	r0, [pc, #168]	; (8002ba8 <a_w25qxx_erase_sector+0x6b8>)
 8002b00:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8002b02:	2301      	movs	r3, #1
 8002b04:	e04c      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                      /* address mode is invalid */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	4828      	ldr	r0, [pc, #160]	; (8002bac <a_w25qxx_erase_sector+0x6bc>)
 8002b0c:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e046      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
        }
        
        timeout = 400;                                                                                      /* max 400 ms */
 8002b12:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002b16:	617b      	str	r3, [r7, #20]
        while (timeout != 0)                                                                                /* check timeout */
 8002b18:	e033      	b.n	8002b82 <a_w25qxx_erase_sector+0x692>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 4,
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8002b1e:	2301      	movs	r3, #1
 8002b20:	9309      	str	r3, [sp, #36]	; 0x24
 8002b22:	f107 0312 	add.w	r3, r7, #18
 8002b26:	9308      	str	r3, [sp, #32]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9307      	str	r3, [sp, #28]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	9306      	str	r3, [sp, #24]
 8002b30:	2300      	movs	r3, #0
 8002b32:	9305      	str	r3, [sp, #20]
 8002b34:	2300      	movs	r3, #0
 8002b36:	9304      	str	r3, [sp, #16]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9303      	str	r3, [sp, #12]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	9302      	str	r3, [sp, #8]
 8002b40:	2300      	movs	r3, #0
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	2300      	movs	r3, #0
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	2105      	movs	r1, #5
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe fa41 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002b54:	4603      	mov	r3, r0
 8002b56:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0,
                                          (uint8_t *)&status, 1, 4);                                        /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8002b58:	7cfb      	ldrb	r3, [r7, #19]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <a_w25qxx_erase_sector+0x67a>
            {
                handle->debug_print("w25qxx: get status1 failed.\n");                                       /* get status1 failed */
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	4813      	ldr	r0, [pc, #76]	; (8002bb0 <a_w25qxx_erase_sector+0x6c0>)
 8002b64:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8002b66:	2301      	movs	r3, #1
 8002b68:	e01a      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
            }
            if ((status & 0x01) == 0x00)                                                                    /* check status */
 8002b6a:	7cbb      	ldrb	r3, [r7, #18]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <a_w25qxx_erase_sector+0x69a>
            {
                break;                                                                                      /* break */
            }
            timeout--;                                                                                      /* timeout-- */
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
            handle->delay_ms(1);                                                                            /* delay 1 ms */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2001      	movs	r0, #1
 8002b80:	4798      	blx	r3
        while (timeout != 0)                                                                                /* check timeout */
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1c8      	bne.n	8002b1a <a_w25qxx_erase_sector+0x62a>
 8002b88:	e000      	b.n	8002b8c <a_w25qxx_erase_sector+0x69c>
                break;                                                                                      /* break */
 8002b8a:	bf00      	nop
        }
        if (timeout == 0)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <a_w25qxx_erase_sector+0x6ae>
        {
            handle->debug_print("w25qxx: sector erase 4k timeout.\n");                                      /* sector erase 4k timeout */
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	4807      	ldr	r0, [pc, #28]	; (8002bb4 <a_w25qxx_erase_sector+0x6c4>)
 8002b98:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <a_w25qxx_erase_sector+0x6b0>
        }
    }
    
    return 0;                                                                                               /* success return 0 */
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	08007930 	.word	0x08007930
 8002bac:	080073f4 	.word	0x080073f4
 8002bb0:	0800714c 	.word	0x0800714c
 8002bb4:	08007954 	.word	0x08007954

08002bb8 <a_w25qxx_page_program>:
 *            - 0 success
 *            - 1 page program failed
 * @note      none
 */
static uint8_t a_w25qxx_page_program(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint16_t len)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b092      	sub	sp, #72	; 0x48
 8002bbc:	af0c      	add	r7, sp, #48	; 0x30
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t status;
    uint32_t timeout;
    uint8_t buf[2];

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                           /* spi interface */
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f040 823b 	bne.w	8003048 <a_w25qxx_page_program+0x490>
    {
        if (handle->dual_quad_spi_enable != 0)                                                              /* enable dual quad spi */
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	7fdb      	ldrb	r3, [r3, #31]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8129 	beq.w	8002e2e <a_w25qxx_page_program+0x276>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 8002bdc:	2300      	movs	r3, #0
 8002bde:	930a      	str	r3, [sp, #40]	; 0x28
 8002be0:	2300      	movs	r3, #0
 8002be2:	9309      	str	r3, [sp, #36]	; 0x24
 8002be4:	2300      	movs	r3, #0
 8002be6:	9308      	str	r3, [sp, #32]
 8002be8:	2300      	movs	r3, #0
 8002bea:	9307      	str	r3, [sp, #28]
 8002bec:	2300      	movs	r3, #0
 8002bee:	9306      	str	r3, [sp, #24]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9305      	str	r3, [sp, #20]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	9304      	str	r3, [sp, #16]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9303      	str	r3, [sp, #12]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9302      	str	r3, [sp, #8]
 8002c00:	2300      	movs	r3, #0
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	2300      	movs	r3, #0
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	2106      	movs	r1, #6
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f7fe f9e1 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002c14:	4603      	mov	r3, r0
 8002c16:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* qspi write read */
            if (res != 0)                                                                                   /* check result */
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <a_w25qxx_page_program+0x72>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	48a0      	ldr	r0, [pc, #640]	; (8002ea4 <a_w25qxx_page_program+0x2ec>)
 8002c24:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e345      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	7f1b      	ldrb	r3, [r3, #28]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d17f      	bne.n	8002d32 <a_w25qxx_page_program+0x17a>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8b5b      	ldrh	r3, [r3, #26]
 8002c36:	f64e 7217 	movw	r2, #61207	; 0xef17
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d952      	bls.n	8002ce4 <a_w25qxx_page_program+0x12c>
                {
                    buf[0] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	0e1b      	lsrs	r3, r3, #24
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 8002c46:	2301      	movs	r3, #1
 8002c48:	930a      	str	r3, [sp, #40]	; 0x28
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c4e:	2300      	movs	r3, #0
 8002c50:	9308      	str	r3, [sp, #32]
 8002c52:	2301      	movs	r3, #1
 8002c54:	9307      	str	r3, [sp, #28]
 8002c56:	f107 0310 	add.w	r3, r7, #16
 8002c5a:	9306      	str	r3, [sp, #24]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	9305      	str	r3, [sp, #20]
 8002c60:	2300      	movs	r3, #0
 8002c62:	9304      	str	r3, [sp, #16]
 8002c64:	2300      	movs	r3, #0
 8002c66:	9303      	str	r3, [sp, #12]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9302      	str	r3, [sp, #8]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	2300      	movs	r3, #0
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2300      	movs	r3, #0
 8002c76:	2201      	movs	r2, #1
 8002c78:	21c5      	movs	r1, #197	; 0xc5
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7fe f9ab 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002c80:	4603      	mov	r3, r0
 8002c82:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                          /* spi write read */
                    if (res != 0)                                                                           /* check result */
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <a_w25qxx_page_program+0xde>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	4886      	ldr	r0, [pc, #536]	; (8002ea8 <a_w25qxx_page_program+0x2f0>)
 8002c90:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8002c92:	2301      	movs	r3, #1
 8002c94:	e30f      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
                    }
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 8002c96:	2300      	movs	r3, #0
 8002c98:	930a      	str	r3, [sp, #40]	; 0x28
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	9308      	str	r3, [sp, #32]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9307      	str	r3, [sp, #28]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9306      	str	r3, [sp, #24]
 8002caa:	2300      	movs	r3, #0
 8002cac:	9305      	str	r3, [sp, #20]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9304      	str	r3, [sp, #16]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9303      	str	r3, [sp, #12]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9302      	str	r3, [sp, #8]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	2106      	movs	r1, #6
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7fe f984 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                       /* qspi write read */
                    if (res != 0)                                                                           /* check result */
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <a_w25qxx_page_program+0x12c>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	4871      	ldr	r0, [pc, #452]	; (8002ea4 <a_w25qxx_page_program+0x2ec>)
 8002cde:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e2e8      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_PAGE_PROGRAM, 1,
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	920a      	str	r2, [sp, #40]	; 0x28
 8002cea:	2200      	movs	r2, #0
 8002cec:	9209      	str	r2, [sp, #36]	; 0x24
 8002cee:	2200      	movs	r2, #0
 8002cf0:	9208      	str	r2, [sp, #32]
 8002cf2:	9307      	str	r3, [sp, #28]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	9306      	str	r3, [sp, #24]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	9305      	str	r3, [sp, #20]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9304      	str	r3, [sp, #16]
 8002d00:	2300      	movs	r3, #0
 8002d02:	9303      	str	r3, [sp, #12]
 8002d04:	2300      	movs	r3, #0
 8002d06:	9302      	str	r3, [sp, #8]
 8002d08:	2303      	movs	r3, #3
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2201      	movs	r2, #1
 8002d14:	2102      	movs	r1, #2
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7fe f95d 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               0, data, len,
                                               NULL, 0x00, 1);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d03c      	beq.n	8002da0 <a_w25qxx_page_program+0x1e8>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	4860      	ldr	r0, [pc, #384]	; (8002eac <a_w25qxx_page_program+0x2f4>)
 8002d2c:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e2c1      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	7f1b      	ldrb	r3, [r3, #28]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d12c      	bne.n	8002d94 <a_w25qxx_page_program+0x1dc>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8b5b      	ldrh	r3, [r3, #26]
 8002d3e:	f64e 7217 	movw	r2, #61207	; 0xef17
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d926      	bls.n	8002d94 <a_w25qxx_page_program+0x1dc>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_PAGE_PROGRAM, 1,
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	920a      	str	r2, [sp, #40]	; 0x28
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8002d50:	2200      	movs	r2, #0
 8002d52:	9208      	str	r2, [sp, #32]
 8002d54:	9307      	str	r3, [sp, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	9306      	str	r3, [sp, #24]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	9305      	str	r3, [sp, #20]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9304      	str	r3, [sp, #16]
 8002d62:	2300      	movs	r3, #0
 8002d64:	9303      	str	r3, [sp, #12]
 8002d66:	2300      	movs	r3, #0
 8002d68:	9302      	str	r3, [sp, #8]
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	2301      	movs	r3, #1
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2201      	movs	r2, #1
 8002d76:	2102      	movs	r1, #2
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f7fe f92c 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               0, data, len,
                                               NULL, 0x00, 1);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 8002d82:	7cfb      	ldrb	r3, [r7, #19]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00b      	beq.n	8002da0 <a_w25qxx_page_program+0x1e8>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	4847      	ldr	r0, [pc, #284]	; (8002eac <a_w25qxx_page_program+0x2f4>)
 8002d8e:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002d90:	2301      	movs	r3, #1
 8002d92:	e290      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	4845      	ldr	r0, [pc, #276]	; (8002eb0 <a_w25qxx_page_program+0x2f8>)
 8002d9a:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e28a      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
            }
            
            timeout = 3 * 100;                                                                              /* max 3 ms */
 8002da0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002da4:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 8002da6:	e033      	b.n	8002e10 <a_w25qxx_page_program+0x258>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 1,
 8002da8:	2301      	movs	r3, #1
 8002daa:	930a      	str	r3, [sp, #40]	; 0x28
 8002dac:	2301      	movs	r3, #1
 8002dae:	9309      	str	r3, [sp, #36]	; 0x24
 8002db0:	f107 0312 	add.w	r3, r7, #18
 8002db4:	9308      	str	r3, [sp, #32]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9307      	str	r3, [sp, #28]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9306      	str	r3, [sp, #24]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9305      	str	r3, [sp, #20]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	9304      	str	r3, [sp, #16]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	9303      	str	r3, [sp, #12]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9302      	str	r3, [sp, #8]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2201      	movs	r2, #1
 8002dda:	2105      	movs	r1, #5
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7fe f8fa 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8002de2:	4603      	mov	r3, r0
 8002de4:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0,
                                              (uint8_t *)&status, 1, 1);                                    /* spi write read */
                if (res != 0)                                                                               /* check result */
 8002de6:	7cfb      	ldrb	r3, [r7, #19]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <a_w25qxx_page_program+0x240>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	482e      	ldr	r0, [pc, #184]	; (8002eac <a_w25qxx_page_program+0x2f4>)
 8002df2:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002df4:	2301      	movs	r3, #1
 8002df6:	e25e      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 8002df8:	7cbb      	ldrb	r3, [r7, #18]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <a_w25qxx_page_program+0x260>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
                handle->delay_us(10);                                                                       /* delay 10 us */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	200a      	movs	r0, #10
 8002e0e:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1c8      	bne.n	8002da8 <a_w25qxx_page_program+0x1f0>
 8002e16:	e000      	b.n	8002e1a <a_w25qxx_page_program+0x262>
                    break;                                                                                  /* break */
 8002e18:	bf00      	nop
            }
            if (timeout == 0)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 8249 	bne.w	80032b4 <a_w25qxx_page_program+0x6fc>
            {
                handle->debug_print("w25qxx: page program timeout.\n");                                     /* page program timeout */
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	4823      	ldr	r0, [pc, #140]	; (8002eb4 <a_w25qxx_page_program+0x2fc>)
 8002e28:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e243      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
            }
        }
        else                                                                                                /* single spi */
        {
            buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                           /* write enable command */
 8002e2e:	2306      	movs	r3, #6
 8002e30:	743b      	strb	r3, [r7, #16]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                              /* spi write read */
 8002e32:	f107 0110 	add.w	r1, r7, #16
 8002e36:	2300      	movs	r3, #0
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f7fe f89d 	bl	8000f7e <a_w25qxx_spi_write_read>
 8002e44:	4603      	mov	r3, r0
 8002e46:	74fb      	strb	r3, [r7, #19]
            if (res != 0)                                                                                   /* check result */
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <a_w25qxx_page_program+0x2a2>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	4814      	ldr	r0, [pc, #80]	; (8002ea4 <a_w25qxx_page_program+0x2ec>)
 8002e54:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8002e56:	2301      	movs	r3, #1
 8002e58:	e22d      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	7f1b      	ldrb	r3, [r3, #28]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d173      	bne.n	8002f4a <a_w25qxx_page_program+0x392>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8b5b      	ldrh	r3, [r3, #26]
 8002e66:	f64e 7217 	movw	r2, #61207	; 0xef17
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d93a      	bls.n	8002ee4 <a_w25qxx_page_program+0x32c>
                {
                    buf[0] = 0xC5;                                                                          /* write extended addr register command */
 8002e6e:	23c5      	movs	r3, #197	; 0xc5
 8002e70:	743b      	strb	r3, [r7, #16]
                    buf[1] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	0e1b      	lsrs	r3, r3, #24
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	747b      	strb	r3, [r7, #17]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                      /* spi write read */
 8002e7a:	f107 0110 	add.w	r1, r7, #16
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2300      	movs	r3, #0
 8002e84:	2202      	movs	r2, #2
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f7fe f879 	bl	8000f7e <a_w25qxx_spi_write_read>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <a_w25qxx_page_program+0x300>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <a_w25qxx_page_program+0x2f0>)
 8002e9c:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e209      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
 8002ea2:	bf00      	nop
 8002ea4:	080070e8 	.word	0x080070e8
 8002ea8:	080076e4 	.word	0x080076e4
 8002eac:	080078a8 	.word	0x080078a8
 8002eb0:	080073f4 	.word	0x080073f4
 8002eb4:	080078c8 	.word	0x080078c8
                    }
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                   /* write enable command */
 8002eb8:	2306      	movs	r3, #6
 8002eba:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                      /* spi write read */
 8002ebc:	f107 0110 	add.w	r1, r7, #16
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7fe f858 	bl	8000f7e <a_w25qxx_spi_write_read>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <a_w25qxx_page_program+0x32c>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	489d      	ldr	r0, [pc, #628]	; (8003154 <a_w25qxx_page_program+0x59c>)
 8002ede:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e1e8      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
                    }
                }
                handle->buf[0] = W25QXX_COMMAND_PAGE_PROGRAM;                                               /* page program command */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                handle->buf[1] = (addr >> 16) & 0xFF;                                                       /* 23 - 16 bits */
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	0c1b      	lsrs	r3, r3, #16
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                handle->buf[2] = (addr >> 8) & 0xFF;                                                        /* 15 - 8  bits */
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
                handle->buf[3] = (addr >> 0) & 0xFF;                                                        /* 7 - 0 bits */
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                memcpy(&handle->buf[4], data, len);                                                         /* copy data */
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3325      	adds	r3, #37	; 0x25
 8002f12:	887a      	ldrh	r2, [r7, #2]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 fc0a 	bl	8006730 <memcpy>
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)handle->buf, 4 + len, NULL, 0);            /* spi write read */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8002f22:	887b      	ldrh	r3, [r7, #2]
 8002f24:	3304      	adds	r3, #4
 8002f26:	461a      	mov	r2, r3
 8002f28:	2300      	movs	r3, #0
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7fe f825 	bl	8000f7e <a_w25qxx_spi_write_read>
 8002f34:	4603      	mov	r3, r0
 8002f36:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d04e      	beq.n	8002fdc <a_w25qxx_page_program+0x424>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4885      	ldr	r0, [pc, #532]	; (8003158 <a_w25qxx_page_program+0x5a0>)
 8002f44:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1b5      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	7f1b      	ldrb	r3, [r3, #28]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d13e      	bne.n	8002fd0 <a_w25qxx_page_program+0x418>
                     && (handle->type >= W25Q256))                                                          /* 4 address mode */
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8b5b      	ldrh	r3, [r3, #26]
 8002f56:	f64e 7217 	movw	r2, #61207	; 0xef17
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d938      	bls.n	8002fd0 <a_w25qxx_page_program+0x418>
            {
                handle->buf[0] = W25QXX_COMMAND_PAGE_PROGRAM;                                               /* page program command */
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2202      	movs	r2, #2
 8002f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                handle->buf[1] = (addr >> 24) & 0xFF;                                                       /* 31 - 24 bits */
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	0e1b      	lsrs	r3, r3, #24
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                handle->buf[2] = (addr >> 16) & 0xFF;                                                       /* 23 - 16 bits */
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
                handle->buf[3] = (addr >> 8) & 0xFF;                                                        /* 15 - 8  bits */
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                handle->buf[4] = (addr >> 0) & 0xFF;                                                        /* 7 - 0 bits */
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                memcpy(&handle->buf[5], data, len);                                                         /* copy data */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3326      	adds	r3, #38	; 0x26
 8002f98:	887a      	ldrh	r2, [r7, #2]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 fbc7 	bl	8006730 <memcpy>
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)handle->buf, 5 + len, NULL, 0);            /* spi write read */
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	3305      	adds	r3, #5
 8002fac:	461a      	mov	r2, r3
 8002fae:	2300      	movs	r3, #0
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7fd ffe2 	bl	8000f7e <a_w25qxx_spi_write_read>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8002fbe:	7cfb      	ldrb	r3, [r7, #19]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00b      	beq.n	8002fdc <a_w25qxx_page_program+0x424>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	4863      	ldr	r0, [pc, #396]	; (8003158 <a_w25qxx_page_program+0x5a0>)
 8002fca:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e172      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	4861      	ldr	r0, [pc, #388]	; (800315c <a_w25qxx_page_program+0x5a4>)
 8002fd6:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e16c      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
            }
            
            timeout = 3 * 100;                                                                              /* max 3 ms */
 8002fdc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002fe0:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 8002fe2:	e022      	b.n	800302a <a_w25qxx_page_program+0x472>
            {
                buf[0] = W25QXX_COMMAND_READ_STATUS_REG1;                                                   /* read status1 command */
 8002fe4:	2305      	movs	r3, #5
 8002fe6:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, (uint8_t *)&status, 1);            /* spi write read */
 8002fe8:	f107 0312 	add.w	r3, r7, #18
 8002fec:	f107 0110 	add.w	r1, r7, #16
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	9200      	str	r2, [sp, #0]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7fd ffc1 	bl	8000f7e <a_w25qxx_spi_write_read>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <a_w25qxx_page_program+0x45a>
                {
                    handle->debug_print("w25qxx: get status1 failed.\n");                                   /* get status1 failed */
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	4855      	ldr	r0, [pc, #340]	; (8003160 <a_w25qxx_page_program+0x5a8>)
 800300c:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 800300e:	2301      	movs	r3, #1
 8003010:	e151      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 8003012:	7cbb      	ldrb	r3, [r7, #18]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <a_w25qxx_page_program+0x47a>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3b01      	subs	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
                handle->delay_us(10);                                                                       /* delay 10 us */
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	200a      	movs	r0, #10
 8003028:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1d9      	bne.n	8002fe4 <a_w25qxx_page_program+0x42c>
 8003030:	e000      	b.n	8003034 <a_w25qxx_page_program+0x47c>
                    break;                                                                                  /* break */
 8003032:	bf00      	nop
            }
            if (timeout == 0)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 813c 	bne.w	80032b4 <a_w25qxx_page_program+0x6fc>
            {
                handle->debug_print("w25qxx: page program timeout.\n");                                     /* page program timeout */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	4848      	ldr	r0, [pc, #288]	; (8003164 <a_w25qxx_page_program+0x5ac>)
 8003042:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8003044:	2301      	movs	r3, #1
 8003046:	e136      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
            }
        }
    }
    else
    {
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8003048:	2300      	movs	r3, #0
 800304a:	930a      	str	r3, [sp, #40]	; 0x28
 800304c:	2300      	movs	r3, #0
 800304e:	9309      	str	r3, [sp, #36]	; 0x24
 8003050:	2300      	movs	r3, #0
 8003052:	9308      	str	r3, [sp, #32]
 8003054:	2300      	movs	r3, #0
 8003056:	9307      	str	r3, [sp, #28]
 8003058:	2300      	movs	r3, #0
 800305a:	9306      	str	r3, [sp, #24]
 800305c:	2300      	movs	r3, #0
 800305e:	9305      	str	r3, [sp, #20]
 8003060:	2300      	movs	r3, #0
 8003062:	9304      	str	r3, [sp, #16]
 8003064:	2300      	movs	r3, #0
 8003066:	9303      	str	r3, [sp, #12]
 8003068:	2300      	movs	r3, #0
 800306a:	9302      	str	r3, [sp, #8]
 800306c:	2300      	movs	r3, #0
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	2300      	movs	r3, #0
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	2300      	movs	r3, #0
 8003076:	2204      	movs	r2, #4
 8003078:	2106      	movs	r1, #6
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f7fd ffab 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8003080:	4603      	mov	r3, r0
 8003082:	74fb      	strb	r3, [r7, #19]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                                   /* qspi write read */
        if (res != 0)                                                                                       /* check result */
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <a_w25qxx_page_program+0x4de>
        {
            handle->debug_print("w25qxx: write enable failed.\n");                                          /* write enable failed */
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	4831      	ldr	r0, [pc, #196]	; (8003154 <a_w25qxx_page_program+0x59c>)
 8003090:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8003092:	2301      	movs	r3, #1
 8003094:	e10f      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
        }
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                             /* 3 address mode */
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	7f1b      	ldrb	r3, [r3, #28]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f040 808d 	bne.w	80031ba <a_w25qxx_page_program+0x602>
        {
            if (handle->type >= W25Q256)                                                                    /* >128Mb */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8b5b      	ldrh	r3, [r3, #26]
 80030a4:	f64e 7217 	movw	r2, #61207	; 0xef17
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d95f      	bls.n	800316c <a_w25qxx_page_program+0x5b4>
            {
                buf[0] = (addr >> 24) & 0xFF;                                                               /* 31 - 24 bits */
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	0e1b      	lsrs	r3, r3, #24
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 80030b4:	2304      	movs	r3, #4
 80030b6:	930a      	str	r3, [sp, #40]	; 0x28
 80030b8:	2300      	movs	r3, #0
 80030ba:	9309      	str	r3, [sp, #36]	; 0x24
 80030bc:	2300      	movs	r3, #0
 80030be:	9308      	str	r3, [sp, #32]
 80030c0:	2301      	movs	r3, #1
 80030c2:	9307      	str	r3, [sp, #28]
 80030c4:	f107 0310 	add.w	r3, r7, #16
 80030c8:	9306      	str	r3, [sp, #24]
 80030ca:	2300      	movs	r3, #0
 80030cc:	9305      	str	r3, [sp, #20]
 80030ce:	2300      	movs	r3, #0
 80030d0:	9304      	str	r3, [sp, #16]
 80030d2:	2300      	movs	r3, #0
 80030d4:	9303      	str	r3, [sp, #12]
 80030d6:	2300      	movs	r3, #0
 80030d8:	9302      	str	r3, [sp, #8]
 80030da:	2300      	movs	r3, #0
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	2300      	movs	r3, #0
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	2300      	movs	r3, #0
 80030e4:	2204      	movs	r2, #4
 80030e6:	21c5      	movs	r1, #197	; 0xc5
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f7fd ff74 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80030ee:	4603      	mov	r3, r0
 80030f0:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <a_w25qxx_page_program+0x54c>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                  /* write extended addr register failed */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	481a      	ldr	r0, [pc, #104]	; (8003168 <a_w25qxx_page_program+0x5b0>)
 80030fe:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8003100:	2301      	movs	r3, #1
 8003102:	e0d8      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8003104:	2300      	movs	r3, #0
 8003106:	930a      	str	r3, [sp, #40]	; 0x28
 8003108:	2300      	movs	r3, #0
 800310a:	9309      	str	r3, [sp, #36]	; 0x24
 800310c:	2300      	movs	r3, #0
 800310e:	9308      	str	r3, [sp, #32]
 8003110:	2300      	movs	r3, #0
 8003112:	9307      	str	r3, [sp, #28]
 8003114:	2300      	movs	r3, #0
 8003116:	9306      	str	r3, [sp, #24]
 8003118:	2300      	movs	r3, #0
 800311a:	9305      	str	r3, [sp, #20]
 800311c:	2300      	movs	r3, #0
 800311e:	9304      	str	r3, [sp, #16]
 8003120:	2300      	movs	r3, #0
 8003122:	9303      	str	r3, [sp, #12]
 8003124:	2300      	movs	r3, #0
 8003126:	9302      	str	r3, [sp, #8]
 8003128:	2300      	movs	r3, #0
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	2300      	movs	r3, #0
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	2300      	movs	r3, #0
 8003132:	2204      	movs	r2, #4
 8003134:	2106      	movs	r1, #6
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f7fd ff4d 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 800313c:	4603      	mov	r3, r0
 800313e:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* qspi write read */
                if (res != 0)                                                                               /* check result */
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d012      	beq.n	800316c <a_w25qxx_page_program+0x5b4>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                  /* write enable failed */
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	4802      	ldr	r0, [pc, #8]	; (8003154 <a_w25qxx_page_program+0x59c>)
 800314c:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 800314e:	2301      	movs	r3, #1
 8003150:	e0b1      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
 8003152:	bf00      	nop
 8003154:	080070e8 	.word	0x080070e8
 8003158:	080078a8 	.word	0x080078a8
 800315c:	080073f4 	.word	0x080073f4
 8003160:	0800714c 	.word	0x0800714c
 8003164:	080078c8 	.word	0x080078c8
 8003168:	080076e4 	.word	0x080076e4
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_PAGE_PROGRAM, 4,
 800316c:	887b      	ldrh	r3, [r7, #2]
 800316e:	2204      	movs	r2, #4
 8003170:	920a      	str	r2, [sp, #40]	; 0x28
 8003172:	2200      	movs	r2, #0
 8003174:	9209      	str	r2, [sp, #36]	; 0x24
 8003176:	2200      	movs	r2, #0
 8003178:	9208      	str	r2, [sp, #32]
 800317a:	9307      	str	r3, [sp, #28]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	9306      	str	r3, [sp, #24]
 8003180:	2300      	movs	r3, #0
 8003182:	9305      	str	r3, [sp, #20]
 8003184:	2300      	movs	r3, #0
 8003186:	9304      	str	r3, [sp, #16]
 8003188:	2300      	movs	r3, #0
 800318a:	9303      	str	r3, [sp, #12]
 800318c:	2300      	movs	r3, #0
 800318e:	9302      	str	r3, [sp, #8]
 8003190:	2303      	movs	r3, #3
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	2304      	movs	r3, #4
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2204      	movs	r2, #4
 800319c:	2102      	movs	r1, #2
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7fd ff19 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 80031a4:	4603      	mov	r3, r0
 80031a6:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           0, data, len,
                                           NULL, 0x00, 4);                                                  /* spi write read */
            if (res != 0)                                                                                   /* check result */
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d03c      	beq.n	8003228 <a_w25qxx_page_program+0x670>
            {
                handle->debug_print("w25qxx: page program failed.\n");                                      /* page program failed */
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4843      	ldr	r0, [pc, #268]	; (80032c0 <a_w25qxx_page_program+0x708>)
 80031b4:	4798      	blx	r3
               
                  return 1;                                                                                 /* return error */
 80031b6:	2301      	movs	r3, #1
 80031b8:	e07d      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	7f1b      	ldrb	r3, [r3, #28]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d12c      	bne.n	800321c <a_w25qxx_page_program+0x664>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8b5b      	ldrh	r3, [r3, #26]
 80031c6:	f64e 7217 	movw	r2, #61207	; 0xef17
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d926      	bls.n	800321c <a_w25qxx_page_program+0x664>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_PAGE_PROGRAM, 4,
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	2204      	movs	r2, #4
 80031d2:	920a      	str	r2, [sp, #40]	; 0x28
 80031d4:	2200      	movs	r2, #0
 80031d6:	9209      	str	r2, [sp, #36]	; 0x24
 80031d8:	2200      	movs	r2, #0
 80031da:	9208      	str	r2, [sp, #32]
 80031dc:	9307      	str	r3, [sp, #28]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	9306      	str	r3, [sp, #24]
 80031e2:	2300      	movs	r3, #0
 80031e4:	9305      	str	r3, [sp, #20]
 80031e6:	2300      	movs	r3, #0
 80031e8:	9304      	str	r3, [sp, #16]
 80031ea:	2300      	movs	r3, #0
 80031ec:	9303      	str	r3, [sp, #12]
 80031ee:	2300      	movs	r3, #0
 80031f0:	9302      	str	r3, [sp, #8]
 80031f2:	2304      	movs	r3, #4
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	2304      	movs	r3, #4
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2204      	movs	r2, #4
 80031fe:	2102      	movs	r1, #2
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7fd fee8 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 8003206:	4603      	mov	r3, r0
 8003208:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           0, data, len,
                                           NULL, 0x00, 4);                                                  /* spi write read */
            if (res != 0)                                                                                   /* check result */
 800320a:	7cfb      	ldrb	r3, [r7, #19]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <a_w25qxx_page_program+0x670>
            {
                handle->debug_print("w25qxx: page program failed.\n");                                      /* page program failed */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	482a      	ldr	r0, [pc, #168]	; (80032c0 <a_w25qxx_page_program+0x708>)
 8003216:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8003218:	2301      	movs	r3, #1
 800321a:	e04c      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                      /* address mode is invalid */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	4828      	ldr	r0, [pc, #160]	; (80032c4 <a_w25qxx_page_program+0x70c>)
 8003222:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8003224:	2301      	movs	r3, #1
 8003226:	e046      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
        }
        
        timeout = 3 * 100;                                                                                  /* max 3 ms */
 8003228:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800322c:	617b      	str	r3, [r7, #20]
        while (timeout != 0)                                                                                /* check timeout */
 800322e:	e033      	b.n	8003298 <a_w25qxx_page_program+0x6e0>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 4,
 8003230:	2304      	movs	r3, #4
 8003232:	930a      	str	r3, [sp, #40]	; 0x28
 8003234:	2301      	movs	r3, #1
 8003236:	9309      	str	r3, [sp, #36]	; 0x24
 8003238:	f107 0312 	add.w	r3, r7, #18
 800323c:	9308      	str	r3, [sp, #32]
 800323e:	2300      	movs	r3, #0
 8003240:	9307      	str	r3, [sp, #28]
 8003242:	2300      	movs	r3, #0
 8003244:	9306      	str	r3, [sp, #24]
 8003246:	2300      	movs	r3, #0
 8003248:	9305      	str	r3, [sp, #20]
 800324a:	2300      	movs	r3, #0
 800324c:	9304      	str	r3, [sp, #16]
 800324e:	2300      	movs	r3, #0
 8003250:	9303      	str	r3, [sp, #12]
 8003252:	2300      	movs	r3, #0
 8003254:	9302      	str	r3, [sp, #8]
 8003256:	2300      	movs	r3, #0
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	2300      	movs	r3, #0
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	2204      	movs	r2, #4
 8003262:	2105      	movs	r1, #5
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7fd feb6 	bl	8000fd6 <a_w25qxx_qspi_write_read>
 800326a:	4603      	mov	r3, r0
 800326c:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0,
                                          (uint8_t *)&status, 1, 4);                                        /* spi write read */
            if (res != 0)                                                                                   /* check result */
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <a_w25qxx_page_program+0x6c8>
            {
                handle->debug_print("w25qxx: page program failed.\n");                                      /* page program failed */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	4811      	ldr	r0, [pc, #68]	; (80032c0 <a_w25qxx_page_program+0x708>)
 800327a:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 800327c:	2301      	movs	r3, #1
 800327e:	e01a      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
            }
            if ((status & 0x01) == 0x00)                                                                    /* check status */
 8003280:	7cbb      	ldrb	r3, [r7, #18]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <a_w25qxx_page_program+0x6e8>
            {
                break;                                                                                      /* break */
            }
            timeout--;                                                                                      /* timeout-- */
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3b01      	subs	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
            handle->delay_us(10);                                                                           /* delay 10 us */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	200a      	movs	r0, #10
 8003296:	4798      	blx	r3
        while (timeout != 0)                                                                                /* check timeout */
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1c8      	bne.n	8003230 <a_w25qxx_page_program+0x678>
 800329e:	e000      	b.n	80032a2 <a_w25qxx_page_program+0x6ea>
                break;                                                                                      /* break */
 80032a0:	bf00      	nop
        }
        if (timeout == 0)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <a_w25qxx_page_program+0x6fc>
        {
            handle->debug_print("w25qxx: page program timeout.\n");                                         /* page program timeout */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	4806      	ldr	r0, [pc, #24]	; (80032c8 <a_w25qxx_page_program+0x710>)
 80032ae:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <a_w25qxx_page_program+0x6fe>
        }
    }
    
    return 0;                                                                                               /* success return 0 */
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	080078a8 	.word	0x080078a8
 80032c4:	080073f4 	.word	0x080073f4
 80032c8:	080078c8 	.word	0x080078c8

080032cc <a_w25qxx_write_no_check>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_w25qxx_write_no_check(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint16_t page_remain;
    
    page_remain = 256 - addr % 256;                                         /* get remain */
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80032e6:	82fb      	strh	r3, [r7, #22]
    if (len <= page_remain)                                                 /* check length */
 80032e8:	8afb      	ldrh	r3, [r7, #22]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d801      	bhi.n	80032f4 <a_w25qxx_write_no_check+0x28>
    {
        page_remain = (uint16_t)len;                                        /* page remain */
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	82fb      	strh	r3, [r7, #22]
    }
    while( 1)                                                               /* loop */
    { 
        res = a_w25qxx_page_program(handle, addr, data, page_remain);       /* page program */
 80032f4:	8afb      	ldrh	r3, [r7, #22]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f7ff fc5c 	bl	8002bb8 <a_w25qxx_page_program>
 8003300:	4603      	mov	r3, r0
 8003302:	757b      	strb	r3, [r7, #21]
        if (res != 0)
 8003304:	7d7b      	ldrb	r3, [r7, #21]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <a_w25qxx_write_no_check+0x4a>
        {
            handle->debug_print("w25qxx: page program failed.\n");          /* page program failed */
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	4812      	ldr	r0, [pc, #72]	; (8003358 <a_w25qxx_write_no_check+0x8c>)
 8003310:	4798      	blx	r3
           
            return 1;                                                       /* return error */
 8003312:	2301      	movs	r3, #1
 8003314:	e01c      	b.n	8003350 <a_w25qxx_write_no_check+0x84>
        }
        if (len == page_remain)                                             /* check length */
 8003316:	8afb      	ldrh	r3, [r7, #22]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d016      	beq.n	800334c <a_w25qxx_write_no_check+0x80>
        {
            break;                                                          /* break loop */
        }
        else
        {
            data += page_remain;                                            /* data + page_remain */
 800331e:	8afb      	ldrh	r3, [r7, #22]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	4413      	add	r3, r2
 8003324:	607b      	str	r3, [r7, #4]
            addr += page_remain;                                            /* address + page_remain */
 8003326:	8afb      	ldrh	r3, [r7, #22]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	4413      	add	r3, r2
 800332c:	60bb      	str	r3, [r7, #8]
            len -= page_remain;                                             /* length - page_remain */
 800332e:	8afb      	ldrh	r3, [r7, #22]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	603b      	str	r3, [r7, #0]
            if (len > 256)                                                  /* check length */
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333c:	d903      	bls.n	8003346 <a_w25qxx_write_no_check+0x7a>
            {
                page_remain = 256;                                          /* set page remain */
 800333e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003342:	82fb      	strh	r3, [r7, #22]
 8003344:	e7d6      	b.n	80032f4 <a_w25qxx_write_no_check+0x28>
            }
            else
            {
                page_remain = (uint16_t)len;                                /* set length */
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	82fb      	strh	r3, [r7, #22]
        res = a_w25qxx_page_program(handle, addr, data, page_remain);       /* page program */
 800334a:	e7d3      	b.n	80032f4 <a_w25qxx_write_no_check+0x28>
            break;                                                          /* break loop */
 800334c:	bf00      	nop
            }
        }
    }
    
    return 0;                                                               /* success return 0 */
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	080078a8 	.word	0x080078a8

0800335c <w25qxx_write>:
 *            - 4 read failed
 *            - 5 erase sector failed
 * @note      none
 */
uint8_t w25qxx_write(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
    uint32_t sec_pos;
    uint32_t sec_off;
    uint32_t sec_remain;
    uint32_t i;
    
    if (handle == NULL)                                                                        /* check handle */
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <w25qxx_write+0x18>
    {
        return 2;                                                                              /* return error */
 8003370:	2302      	movs	r3, #2
 8003372:	e0b3      	b.n	80034dc <w25qxx_write+0x180>
    }   
    if (handle->inited != 1)                                                                   /* check handle initialization */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	7e1b      	ldrb	r3, [r3, #24]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d001      	beq.n	8003380 <w25qxx_write+0x24>
    {
        return 3;                                                                              /* return error */
 800337c:	2303      	movs	r3, #3
 800337e:	e0ad      	b.n	80034dc <w25qxx_write+0x180>
    }

    sec_pos = addr / 4096;                                                                     /* get sector position */
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	0b1b      	lsrs	r3, r3, #12
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    sec_off = addr % 4096;                                                                     /* get sector offset */
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	623b      	str	r3, [r7, #32]
    sec_remain = 4096 - sec_off;                                                               /* get sector remain */
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003394:	61fb      	str	r3, [r7, #28]
    if (len <= sec_remain)                                                                     /* check length */
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	429a      	cmp	r2, r3
 800339c:	d801      	bhi.n	80033a2 <w25qxx_write+0x46>
    {
        sec_remain = len;                                                                      /* set remain */
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	61fb      	str	r3, [r7, #28]
    }
    while(1)                                                                                   /* loop */
    {    
        res = a_w25qxx_read(handle, sec_pos * 4096, handle->buf_4k, 4096);                     /* read 4k data */
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	0319      	lsls	r1, r3, #12
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f203 1227 	addw	r2, r3, #295	; 0x127
 80033ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7fe fe63 	bl	800207c <a_w25qxx_read>
 80033b6:	4603      	mov	r3, r0
 80033b8:	75fb      	strb	r3, [r7, #23]
        if (res != 0)
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <w25qxx_write+0x70>
        {
            handle->debug_print("w25qxx: read failed.\n");                                     /* read failed */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	4847      	ldr	r0, [pc, #284]	; (80034e4 <w25qxx_write+0x188>)
 80033c6:	4798      	blx	r3
           
            return 4;                                                                          /* return error */
 80033c8:	2304      	movs	r3, #4
 80033ca:	e087      	b.n	80034dc <w25qxx_write+0x180>
        }
        for (i = 0; i< sec_remain; i++)                                                        /* sec_remain length */
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	e00b      	b.n	80033ea <w25qxx_write+0x8e>
        {
            if (handle->buf_4k[sec_off + i] != 0xFF)                                           /* check 0xFF */
 80033d2:	6a3a      	ldr	r2, [r7, #32]
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	4413      	add	r3, r2
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4413      	add	r3, r2
 80033dc:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80033e0:	2bff      	cmp	r3, #255	; 0xff
 80033e2:	d107      	bne.n	80033f4 <w25qxx_write+0x98>
        for (i = 0; i< sec_remain; i++)                                                        /* sec_remain length */
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	3301      	adds	r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d3ef      	bcc.n	80033d2 <w25qxx_write+0x76>
 80033f2:	e000      	b.n	80033f6 <w25qxx_write+0x9a>
            {
                break;                                                                         /* break loop */
 80033f4:	bf00      	nop
            }
        }
        if (i < sec_remain)                                                                    /* not all is 0xFF */
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d23b      	bcs.n	8003476 <w25qxx_write+0x11a>
        {
            res = a_w25qxx_erase_sector(handle, sec_pos * 4096);                               /* erase sector */
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	031b      	lsls	r3, r3, #12
 8003402:	4619      	mov	r1, r3
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff f873 	bl	80024f0 <a_w25qxx_erase_sector>
 800340a:	4603      	mov	r3, r0
 800340c:	75fb      	strb	r3, [r7, #23]
            if (res != 0)
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <w25qxx_write+0xc4>
            {
                handle->debug_print("w25qxx: erase sector failed.\n");                         /* erase sector failed */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	4833      	ldr	r0, [pc, #204]	; (80034e8 <w25qxx_write+0x18c>)
 800341a:	4798      	blx	r3
               
                return 5;                                                                      /* return error */
 800341c:	2305      	movs	r3, #5
 800341e:	e05d      	b.n	80034dc <w25qxx_write+0x180>
            }
            for (i = 0; i<sec_remain; i++)                                                     /* sec_remain length */
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	e00e      	b.n	8003444 <w25qxx_write+0xe8>
            {
                handle->buf_4k[i + sec_off] = data[i];                                         /* copy data */
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	441a      	add	r2, r3
 800342c:	69b9      	ldr	r1, [r7, #24]
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	440b      	add	r3, r1
 8003432:	7811      	ldrb	r1, [r2, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	460a      	mov	r2, r1
 800343a:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
            for (i = 0; i<sec_remain; i++)                                                     /* sec_remain length */
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	3301      	adds	r3, #1
 8003442:	61bb      	str	r3, [r7, #24]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	429a      	cmp	r2, r3
 800344a:	d3ec      	bcc.n	8003426 <w25qxx_write+0xca>
            }
            res = a_w25qxx_write_no_check(handle, sec_pos * 4096, handle->buf_4k, 4096);       /* write data no check */
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	0319      	lsls	r1, r3, #12
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f203 1227 	addw	r2, r3, #295	; 0x127
 8003456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff ff36 	bl	80032cc <a_w25qxx_write_no_check>
 8003460:	4603      	mov	r3, r0
 8003462:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                      /* check result */
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d016      	beq.n	8003498 <w25qxx_write+0x13c>
            {
                handle->debug_print("w25qxx: write failed.\n");                                /* write failed */
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	481f      	ldr	r0, [pc, #124]	; (80034ec <w25qxx_write+0x190>)
 8003470:	4798      	blx	r3
               
                return 1;                                                                      /* return error */
 8003472:	2301      	movs	r3, #1
 8003474:	e032      	b.n	80034dc <w25qxx_write+0x180>
            }
        }
        else
        {
            res = a_w25qxx_write_no_check(handle, addr, data, sec_remain);                     /* write data */
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff ff25 	bl	80032cc <a_w25qxx_write_no_check>
 8003482:	4603      	mov	r3, r0
 8003484:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                      /* check result */
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <w25qxx_write+0x13c>
            {
                handle->debug_print("w25qxx: write failed.\n");                                /* write failed */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	4816      	ldr	r0, [pc, #88]	; (80034ec <w25qxx_write+0x190>)
 8003492:	4798      	blx	r3
               
                return 1;                                                                      /* return error */
 8003494:	2301      	movs	r3, #1
 8003496:	e021      	b.n	80034dc <w25qxx_write+0x180>
            }
        }    
        if (len == sec_remain)                                                                 /* check length length*/
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	429a      	cmp	r2, r3
 800349e:	d01b      	beq.n	80034d8 <w25qxx_write+0x17c>
        {
            break;                                                                             /* break loop */
        }
        else
        {
            sec_pos++;                                                                         /* sector++ */
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	3301      	adds	r3, #1
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
            sec_off = 0;                                                                       /* set offset */
 80034a6:	2300      	movs	r3, #0
 80034a8:	623b      	str	r3, [r7, #32]
            data += sec_remain;                                                                /* data + remain */
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	607b      	str	r3, [r7, #4]
            addr += sec_remain;                                                                /* addr + remain */
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	4413      	add	r3, r2
 80034b8:	60bb      	str	r3, [r7, #8]
            len -= sec_remain;                                                                 /* len - remain */
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	603b      	str	r3, [r7, #0]
            if (len > 4096)                                                                    /* check length */
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c8:	d903      	bls.n	80034d2 <w25qxx_write+0x176>
            {
                sec_remain = 4096;                                                             /* set 4096 */
 80034ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	e767      	b.n	80033a2 <w25qxx_write+0x46>
            }
            else
            {
                sec_remain = len;                                                              /* set length */
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	61fb      	str	r3, [r7, #28]
        res = a_w25qxx_read(handle, sec_pos * 4096, handle->buf_4k, 4096);                     /* read 4k data */
 80034d6:	e764      	b.n	80033a2 <w25qxx_write+0x46>
            break;                                                                             /* break loop */
 80034d8:	bf00      	nop
            }
        }
    }
    
    return 0;                                                                                  /* success return 0 */
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3728      	adds	r7, #40	; 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	08007c68 	.word	0x08007c68
 80034e8:	08007c80 	.word	0x08007c80
 80034ec:	08007ca0 	.word	0x08007ca0

080034f0 <w25qxx_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      none
 */
uint8_t w25qxx_basic_init(w25qxx_type_t type, w25qxx_interface_t interface, w25qxx_bool_t dual_quad_spi_enable)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
 80034fa:	460b      	mov	r3, r1
 80034fc:	717b      	strb	r3, [r7, #5]
 80034fe:	4613      	mov	r3, r2
 8003500:	713b      	strb	r3, [r7, #4]
    uint8_t res;
    
    /* link interface function */
    DRIVER_W25QXX_LINK_INIT(&gs_handle, w25qxx_handle_t);
 8003502:	f241 1228 	movw	r2, #4392	; 0x1128
 8003506:	2100      	movs	r1, #0
 8003508:	4836      	ldr	r0, [pc, #216]	; (80035e4 <w25qxx_basic_init+0xf4>)
 800350a:	f003 f91f 	bl	800674c <memset>
    DRIVER_W25QXX_LINK_SPI_QSPI_INIT(&gs_handle, w25qxx_interface_spi_qspi_init);
 800350e:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <w25qxx_basic_init+0xf4>)
 8003510:	4a35      	ldr	r2, [pc, #212]	; (80035e8 <w25qxx_basic_init+0xf8>)
 8003512:	601a      	str	r2, [r3, #0]
    DRIVER_W25QXX_LINK_SPI_QSPI_DEINIT(&gs_handle, w25qxx_interface_spi_qspi_deinit);
 8003514:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <w25qxx_basic_init+0xf4>)
 8003516:	4a35      	ldr	r2, [pc, #212]	; (80035ec <w25qxx_basic_init+0xfc>)
 8003518:	605a      	str	r2, [r3, #4]
    DRIVER_W25QXX_LINK_SPI_QSPI_WRITE_READ(&gs_handle, w25qxx_interface_spi_qspi_write_read);
 800351a:	4b32      	ldr	r3, [pc, #200]	; (80035e4 <w25qxx_basic_init+0xf4>)
 800351c:	4a34      	ldr	r2, [pc, #208]	; (80035f0 <w25qxx_basic_init+0x100>)
 800351e:	609a      	str	r2, [r3, #8]
    DRIVER_W25QXX_LINK_DELAY_MS(&gs_handle, w25qxx_interface_delay_ms);
 8003520:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <w25qxx_basic_init+0xf4>)
 8003522:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <w25qxx_basic_init+0x104>)
 8003524:	60da      	str	r2, [r3, #12]
    DRIVER_W25QXX_LINK_DELAY_US(&gs_handle, w25qxx_interface_delay_us);
 8003526:	4b2f      	ldr	r3, [pc, #188]	; (80035e4 <w25qxx_basic_init+0xf4>)
 8003528:	4a33      	ldr	r2, [pc, #204]	; (80035f8 <w25qxx_basic_init+0x108>)
 800352a:	611a      	str	r2, [r3, #16]
    DRIVER_W25QXX_LINK_DEBUG_PRINT(&gs_handle, w25qxx_interface_debug_print);
 800352c:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <w25qxx_basic_init+0xf4>)
 800352e:	4a33      	ldr	r2, [pc, #204]	; (80035fc <w25qxx_basic_init+0x10c>)
 8003530:	615a      	str	r2, [r3, #20]
    
    /* set chip type */
    res = w25qxx_set_type(&gs_handle, type);
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	4619      	mov	r1, r3
 8003536:	482b      	ldr	r0, [pc, #172]	; (80035e4 <w25qxx_basic_init+0xf4>)
 8003538:	f7fd fd97 	bl	800106a <w25qxx_set_type>
 800353c:	4603      	mov	r3, r0
 800353e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d004      	beq.n	8003550 <w25qxx_basic_init+0x60>
    {
        w25qxx_interface_debug_print("w25qxx: set type failed.\n");
 8003546:	482e      	ldr	r0, [pc, #184]	; (8003600 <w25qxx_basic_init+0x110>)
 8003548:	f000 f8f6 	bl	8003738 <w25qxx_interface_debug_print>
       
        return 1;
 800354c:	2301      	movs	r3, #1
 800354e:	e044      	b.n	80035da <w25qxx_basic_init+0xea>
    }
    
    /* set chip interface */
    res = w25qxx_set_interface(&gs_handle, interface);
 8003550:	797b      	ldrb	r3, [r7, #5]
 8003552:	4619      	mov	r1, r3
 8003554:	4823      	ldr	r0, [pc, #140]	; (80035e4 <w25qxx_basic_init+0xf4>)
 8003556:	f7fd fd9d 	bl	8001094 <w25qxx_set_interface>
 800355a:	4603      	mov	r3, r0
 800355c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d004      	beq.n	800356e <w25qxx_basic_init+0x7e>
    {
        w25qxx_interface_debug_print("w25qxx: set interface failed.\n");
 8003564:	4827      	ldr	r0, [pc, #156]	; (8003604 <w25qxx_basic_init+0x114>)
 8003566:	f000 f8e7 	bl	8003738 <w25qxx_interface_debug_print>
       
        return 1;
 800356a:	2301      	movs	r3, #1
 800356c:	e035      	b.n	80035da <w25qxx_basic_init+0xea>
    }
    
    /* set dual quad spi */
    res = w25qxx_set_dual_quad_spi(&gs_handle, dual_quad_spi_enable);
 800356e:	793b      	ldrb	r3, [r7, #4]
 8003570:	4619      	mov	r1, r3
 8003572:	481c      	ldr	r0, [pc, #112]	; (80035e4 <w25qxx_basic_init+0xf4>)
 8003574:	f7fd fd64 	bl	8001040 <w25qxx_set_dual_quad_spi>
 8003578:	4603      	mov	r3, r0
 800357a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <w25qxx_basic_init+0xa2>
    {
        w25qxx_interface_debug_print("w25qxx: set dual quad spi failed.\n");
 8003582:	4821      	ldr	r0, [pc, #132]	; (8003608 <w25qxx_basic_init+0x118>)
 8003584:	f000 f8d8 	bl	8003738 <w25qxx_interface_debug_print>
        (void)w25qxx_deinit(&gs_handle);
 8003588:	4816      	ldr	r0, [pc, #88]	; (80035e4 <w25qxx_basic_init+0xf4>)
 800358a:	f7fe fa71 	bl	8001a70 <w25qxx_deinit>
       
        return 1;
 800358e:	2301      	movs	r3, #1
 8003590:	e023      	b.n	80035da <w25qxx_basic_init+0xea>
    }
    
    /* chip init */
    res = w25qxx_init(&gs_handle);
 8003592:	4814      	ldr	r0, [pc, #80]	; (80035e4 <w25qxx_basic_init+0xf4>)
 8003594:	f7fd fe40 	bl	8001218 <w25qxx_init>
 8003598:	4603      	mov	r3, r0
 800359a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <w25qxx_basic_init+0xbc>
    {
        w25qxx_interface_debug_print("w25qxx: init failed.\n");
 80035a2:	481a      	ldr	r0, [pc, #104]	; (800360c <w25qxx_basic_init+0x11c>)
 80035a4:	f000 f8c8 	bl	8003738 <w25qxx_interface_debug_print>
       
        return 1;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e016      	b.n	80035da <w25qxx_basic_init+0xea>
    }
    else
    {
        if (type >= W25Q256)
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	f64e 7217 	movw	r2, #61207	; 0xef17
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d910      	bls.n	80035d8 <w25qxx_basic_init+0xe8>
        {
            res = w25qxx_set_address_mode(&gs_handle, W25QXX_ADDRESS_MODE_4_BYTE);
 80035b6:	2101      	movs	r1, #1
 80035b8:	480a      	ldr	r0, [pc, #40]	; (80035e4 <w25qxx_basic_init+0xf4>)
 80035ba:	f7fd fd81 	bl	80010c0 <w25qxx_set_address_mode>
 80035be:	4603      	mov	r3, r0
 80035c0:	73fb      	strb	r3, [r7, #15]
            if (res != 0)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <w25qxx_basic_init+0xe8>
            {
                w25qxx_interface_debug_print("w25qxx: set address mode failed.\n");
 80035c8:	4811      	ldr	r0, [pc, #68]	; (8003610 <w25qxx_basic_init+0x120>)
 80035ca:	f000 f8b5 	bl	8003738 <w25qxx_interface_debug_print>
                (void)w25qxx_deinit(&gs_handle);
 80035ce:	4805      	ldr	r0, [pc, #20]	; (80035e4 <w25qxx_basic_init+0xf4>)
 80035d0:	f7fe fa4e 	bl	8001a70 <w25qxx_deinit>
               
                return 1;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <w25qxx_basic_init+0xea>
            }
        }
        
        return 0;
 80035d8:	2300      	movs	r3, #0
    }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	200001c4 	.word	0x200001c4
 80035e8:	08003695 	.word	0x08003695
 80035ec:	080036a5 	.word	0x080036a5
 80035f0:	080036b3 	.word	0x080036b3
 80035f4:	0800370d 	.word	0x0800370d
 80035f8:	08003723 	.word	0x08003723
 80035fc:	08003739 	.word	0x08003739
 8003600:	08007cdc 	.word	0x08007cdc
 8003604:	08007cf8 	.word	0x08007cf8
 8003608:	08007d18 	.word	0x08007d18
 800360c:	08007d3c 	.word	0x08007d3c
 8003610:	08007d54 	.word	0x08007d54

08003614 <w25qxx_basic_deinit>:
 *         - 0 success
 *         - 1 deinit failed
 * @note   none
 */
uint8_t w25qxx_basic_deinit(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
    if (w25qxx_deinit(&gs_handle) != 0)
 8003618:	4805      	ldr	r0, [pc, #20]	; (8003630 <w25qxx_basic_deinit+0x1c>)
 800361a:	f7fe fa29 	bl	8001a70 <w25qxx_deinit>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <w25qxx_basic_deinit+0x14>
    {
        return 1;
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <w25qxx_basic_deinit+0x16>
    }
    else
    {
        return 0;
 8003628:	2300      	movs	r3, #0
    }
}
 800362a:	4618      	mov	r0, r3
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	200001c4 	.word	0x200001c4

08003634 <w25qxx_basic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t w25qxx_basic_write(uint32_t addr, uint8_t *data, uint32_t len)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
    if (w25qxx_write(&gs_handle, addr, data, len) != 0)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	4806      	ldr	r0, [pc, #24]	; (8003660 <w25qxx_basic_write+0x2c>)
 8003648:	f7ff fe88 	bl	800335c <w25qxx_write>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <w25qxx_basic_write+0x22>
    {
        return 1;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <w25qxx_basic_write+0x24>
    }
    else
    {
        return 0;
 8003656:	2300      	movs	r3, #0
    }
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	200001c4 	.word	0x200001c4

08003664 <w25qxx_basic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t w25qxx_basic_read(uint32_t addr, uint8_t *data, uint32_t len)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
    if (w25qxx_read(&gs_handle, addr, data, len) != 0)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	4806      	ldr	r0, [pc, #24]	; (8003690 <w25qxx_basic_read+0x2c>)
 8003678:	f7fe faba 	bl	8001bf0 <w25qxx_read>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <w25qxx_basic_read+0x22>
    {
        return 1;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <w25qxx_basic_read+0x24>
    }
    else
    {
        return 0;
 8003686:	2300      	movs	r3, #0
    }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200001c4 	.word	0x200001c4

08003694 <w25qxx_interface_spi_qspi_init>:
 *         - 0 success
 *         - 1 spi qspi init failed
 * @note   none
 */
uint8_t w25qxx_interface_spi_qspi_init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
    return qspi_init(QSPI_MODE_3);
 8003698:	2001      	movs	r0, #1
 800369a:	f000 f859 	bl	8003750 <qspi_init>
 800369e:	4603      	mov	r3, r0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <w25qxx_interface_spi_qspi_deinit>:
 *         - 0 success
 *         - 1 spi qspi deinit failed
 * @note   none
 */
uint8_t w25qxx_interface_spi_qspi_deinit(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
    return qspi_deinit();
 80036a8:	f000 f9d4 	bl	8003a54 <qspi_deinit>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <w25qxx_interface_spi_qspi_write_read>:
uint8_t w25qxx_interface_spi_qspi_write_read(uint8_t instruction, uint8_t instruction_line,
                                             uint32_t address, uint8_t address_line, uint8_t address_len,
                                             uint32_t alternate, uint8_t alternate_line, uint8_t alternate_len,
                                             uint8_t dummy, uint8_t *in_buf, uint32_t in_len,
                                             uint8_t *out_buf, uint32_t out_len, uint8_t data_line)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b08c      	sub	sp, #48	; 0x30
 80036b6:	af0a      	add	r7, sp, #40	; 0x28
 80036b8:	603a      	str	r2, [r7, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	4603      	mov	r3, r0
 80036be:	71fb      	strb	r3, [r7, #7]
 80036c0:	460b      	mov	r3, r1
 80036c2:	71bb      	strb	r3, [r7, #6]
 80036c4:	4613      	mov	r3, r2
 80036c6:	717b      	strb	r3, [r7, #5]
    return qspi_write_read(instruction, instruction_line,
 80036c8:	797a      	ldrb	r2, [r7, #5]
 80036ca:	79b9      	ldrb	r1, [r7, #6]
 80036cc:	79f8      	ldrb	r0, [r7, #7]
 80036ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80036d2:	9309      	str	r3, [sp, #36]	; 0x24
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	9308      	str	r3, [sp, #32]
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	9307      	str	r3, [sp, #28]
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	9306      	str	r3, [sp, #24]
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	9305      	str	r3, [sp, #20]
 80036e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036e8:	9304      	str	r3, [sp, #16]
 80036ea:	7f3b      	ldrb	r3, [r7, #28]
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	7e3b      	ldrb	r3, [r7, #24]
 80036f0:	9302      	str	r3, [sp, #8]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	7c3b      	ldrb	r3, [r7, #16]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	4613      	mov	r3, r2
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	f000 f873 	bl	80037e8 <qspi_write_read>
 8003702:	4603      	mov	r3, r0
                           address, address_line, address_len,
                           alternate, alternate_line, alternate_len,
                           dummy, in_buf, in_len,
                           out_buf, out_len, data_line);
}
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <w25qxx_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void w25qxx_interface_delay_ms(uint32_t ms)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
    delay_ms(ms);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7fd fc27 	bl	8000f68 <delay_ms>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <w25qxx_interface_delay_us>:
 * @brief     interface delay us
 * @param[in] us
 * @note      none
 */
void w25qxx_interface_delay_us(uint32_t us)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
    delay_us(us);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd fbde 	bl	8000eec <delay_us>
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <w25qxx_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void w25qxx_interface_debug_print(const char *const fmt, ...)
{
 8003738:	b40f      	push	{r0, r1, r2, r3}
 800373a:	b480      	push	{r7}
 800373c:	b0c3      	sub	sp, #268	; 0x10c
 800373e:	af00      	add	r7, sp, #0
    vsnprintf((char *)str, 255, (char const *)fmt, args);
    va_end(args);

    len = strlen((char *)str);
    (void)uart_write((uint8_t *)str, len);
}
 8003740:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	b004      	add	sp, #16
 800374c:	4770      	bx	lr
	...

08003750 <qspi_init>:
 *            - 1 init failed
 *            - 2 mode is invalid
 * @note      SCLK is PB2, CS is PB6, IO0 is PF8, IO1 is PF9, IO2 is PF7 and IO3 is PF6
 */
uint8_t qspi_init(qspi_mode_t mode)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
    gs_qspi_handle.Instance = QUADSPI;
 800375a:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <qspi_init+0x90>)
 800375c:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <qspi_init+0x94>)
 800375e:	601a      	str	r2, [r3, #0]
    gs_qspi_handle.Init.ClockPrescaler = 2;
 8003760:	4b1f      	ldr	r3, [pc, #124]	; (80037e0 <qspi_init+0x90>)
 8003762:	2202      	movs	r2, #2
 8003764:	605a      	str	r2, [r3, #4]
    gs_qspi_handle.Init.FifoThreshold = 4;
 8003766:	4b1e      	ldr	r3, [pc, #120]	; (80037e0 <qspi_init+0x90>)
 8003768:	2204      	movs	r2, #4
 800376a:	609a      	str	r2, [r3, #8]
    gs_qspi_handle.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800376c:	4b1c      	ldr	r3, [pc, #112]	; (80037e0 <qspi_init+0x90>)
 800376e:	2210      	movs	r2, #16
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003776:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003780:	68bb      	ldr	r3, [r7, #8]
    gs_qspi_handle.Init.FlashSize = POSITION_VAL(0X2000000) - 1;
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	461a      	mov	r2, r3
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <qspi_init+0x90>)
 800378e:	611a      	str	r2, [r3, #16]
    gs_qspi_handle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003790:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <qspi_init+0x90>)
 8003792:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003796:	615a      	str	r2, [r3, #20]
    if (mode == QSPI_MODE_0)
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d103      	bne.n	80037a6 <qspi_init+0x56>
    {
        gs_qspi_handle.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800379e:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <qspi_init+0x90>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	619a      	str	r2, [r3, #24]
 80037a4:	e008      	b.n	80037b8 <qspi_init+0x68>
    }
    else if (mode == QSPI_CLOCK_MODE_3)
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d103      	bne.n	80037b4 <qspi_init+0x64>
    {
        gs_qspi_handle.Init.ClockMode = QSPI_CLOCK_MODE_3;
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <qspi_init+0x90>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	619a      	str	r2, [r3, #24]
 80037b2:	e001      	b.n	80037b8 <qspi_init+0x68>
    }
    else
    {
        return 2;
 80037b4:	2302      	movs	r3, #2
 80037b6:	e00e      	b.n	80037d6 <qspi_init+0x86>
    }
    gs_qspi_handle.Init.FlashID = QSPI_FLASH_ID_1;
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <qspi_init+0x90>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	61da      	str	r2, [r3, #28]
    gs_qspi_handle.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <qspi_init+0x90>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	621a      	str	r2, [r3, #32]
    
    /* qspi init */
    if (HAL_QSPI_Init(&gs_qspi_handle) != HAL_OK)
 80037c4:	4806      	ldr	r0, [pc, #24]	; (80037e0 <qspi_init+0x90>)
 80037c6:	f000 fe0d 	bl	80043e4 <HAL_QSPI_Init>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <qspi_init+0x84>
    {
        return 1;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <qspi_init+0x86>
    }
    else
    {
        return 0;
 80037d4:	2300      	movs	r3, #0
    }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200012ec 	.word	0x200012ec
 80037e4:	a0001000 	.word	0xa0001000

080037e8 <qspi_write_read>:
uint8_t qspi_write_read(uint8_t instruction, uint8_t instruction_line,
                        uint32_t address, uint8_t address_line, uint8_t address_len,
                        uint32_t alternate, uint8_t alternate_line, uint8_t alternate_len,
                        uint8_t dummy, uint8_t *in_buf, uint32_t in_len,
                        uint8_t *out_buf, uint32_t out_len, uint8_t data_line)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b090      	sub	sp, #64	; 0x40
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	603a      	str	r2, [r7, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
 80037f6:	460b      	mov	r3, r1
 80037f8:	71bb      	strb	r3, [r7, #6]
 80037fa:	4613      	mov	r3, r2
 80037fc:	717b      	strb	r3, [r7, #5]
    QSPI_CommandTypeDef cmd_handler;
    
    /* check the len */
    if ((in_len != 0) && (out_len != 0))
 80037fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003800:	2b00      	cmp	r3, #0
 8003802:	d004      	beq.n	800380e <qspi_write_read+0x26>
 8003804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <qspi_write_read+0x26>
    {
        return 2;
 800380a:	2302      	movs	r3, #2
 800380c:	e11c      	b.n	8003a48 <qspi_write_read+0x260>
    }
    
    /* set the instruction */
    cmd_handler.Instruction = instruction;
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	60bb      	str	r3, [r7, #8]
    if (instruction_line == 0)
 8003812:	79bb      	ldrb	r3, [r7, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <qspi_write_read+0x36>
    {
        cmd_handler.InstructionMode = QSPI_INSTRUCTION_NONE;
 8003818:	2300      	movs	r3, #0
 800381a:	623b      	str	r3, [r7, #32]
 800381c:	e016      	b.n	800384c <qspi_write_read+0x64>
    }
    else if (instruction_line == 1)
 800381e:	79bb      	ldrb	r3, [r7, #6]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d103      	bne.n	800382c <qspi_write_read+0x44>
    {
        cmd_handler.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	e00f      	b.n	800384c <qspi_write_read+0x64>
    }
    else if (instruction_line == 2)
 800382c:	79bb      	ldrb	r3, [r7, #6]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d103      	bne.n	800383a <qspi_write_read+0x52>
    {
        cmd_handler.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 8003832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003836:	623b      	str	r3, [r7, #32]
 8003838:	e008      	b.n	800384c <qspi_write_read+0x64>
    }
    else if (instruction_line == 4)
 800383a:	79bb      	ldrb	r3, [r7, #6]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d103      	bne.n	8003848 <qspi_write_read+0x60>
    {
        cmd_handler.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003840:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	e001      	b.n	800384c <qspi_write_read+0x64>
    }
    else
    {
        return 2;
 8003848:	2302      	movs	r3, #2
 800384a:	e0fd      	b.n	8003a48 <qspi_write_read+0x260>
    }
    
    /* set the address_line */
    if (address_line == 0)
 800384c:	797b      	ldrb	r3, [r7, #5]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <qspi_write_read+0x70>
    {
        cmd_handler.AddressMode = QSPI_ADDRESS_NONE;
 8003852:	2300      	movs	r3, #0
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	e016      	b.n	8003886 <qspi_write_read+0x9e>
    }
    else if (address_line == 1)
 8003858:	797b      	ldrb	r3, [r7, #5]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d103      	bne.n	8003866 <qspi_write_read+0x7e>
    {
        cmd_handler.AddressMode = QSPI_ADDRESS_1_LINE;
 800385e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
 8003864:	e00f      	b.n	8003886 <qspi_write_read+0x9e>
    }
    else if (address_line == 2)
 8003866:	797b      	ldrb	r3, [r7, #5]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d103      	bne.n	8003874 <qspi_write_read+0x8c>
    {
        cmd_handler.AddressMode = QSPI_ADDRESS_2_LINES;
 800386c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
 8003872:	e008      	b.n	8003886 <qspi_write_read+0x9e>
    }
    else if (address_line == 4)
 8003874:	797b      	ldrb	r3, [r7, #5]
 8003876:	2b04      	cmp	r3, #4
 8003878:	d103      	bne.n	8003882 <qspi_write_read+0x9a>
    {
        cmd_handler.AddressMode = QSPI_ADDRESS_4_LINES;
 800387a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
 8003880:	e001      	b.n	8003886 <qspi_write_read+0x9e>
    }
    else
    {
        return 2;
 8003882:	2302      	movs	r3, #2
 8003884:	e0e0      	b.n	8003a48 <qspi_write_read+0x260>
    }
    
    /* set the address_len */
    if (address_len == 0)
 8003886:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <qspi_write_read+0xb2>
    {
        cmd_handler.Address = address & 0xFF;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	60fb      	str	r3, [r7, #12]
        cmd_handler.AddressSize = QSPI_ADDRESS_8_BITS;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e02c      	b.n	80038f4 <qspi_write_read+0x10c>
    }
    else if (address_len == 1)
 800389a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <qspi_write_read+0xc6>
    {
        cmd_handler.Address = address & 0xFF;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	60fb      	str	r3, [r7, #12]
        cmd_handler.AddressSize = QSPI_ADDRESS_8_BITS;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e022      	b.n	80038f4 <qspi_write_read+0x10c>
    }
    else if (address_len == 2)
 80038ae:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d106      	bne.n	80038c4 <qspi_write_read+0xdc>
    {
        cmd_handler.Address = address & 0xFFFF;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	60fb      	str	r3, [r7, #12]
        cmd_handler.AddressSize = QSPI_ADDRESS_16_BITS;
 80038bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e017      	b.n	80038f4 <qspi_write_read+0x10c>
    }
    else if (address_len == 3)
 80038c4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d107      	bne.n	80038dc <qspi_write_read+0xf4>
    {
        cmd_handler.Address = address & 0xFFFFFF;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038d2:	60fb      	str	r3, [r7, #12]
        cmd_handler.AddressSize = QSPI_ADDRESS_24_BITS;
 80038d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e00b      	b.n	80038f4 <qspi_write_read+0x10c>
    }
    else if (address_len == 4)
 80038dc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d105      	bne.n	80038f0 <qspi_write_read+0x108>
    {
        cmd_handler.Address = address & 0xFFFFFFFF;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	60fb      	str	r3, [r7, #12]
        cmd_handler.AddressSize = QSPI_ADDRESS_32_BITS;
 80038e8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e001      	b.n	80038f4 <qspi_write_read+0x10c>
    }
    else
    {
        return 2;
 80038f0:	2302      	movs	r3, #2
 80038f2:	e0a9      	b.n	8003a48 <qspi_write_read+0x260>
    }
    
    /* set the alternate */
    cmd_handler.AlternateBytes = alternate;
 80038f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f6:	613b      	str	r3, [r7, #16]
    if (alternate_line == 0)
 80038f8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d102      	bne.n	8003906 <qspi_write_read+0x11e>
    {
        cmd_handler.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003900:	2300      	movs	r3, #0
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
 8003904:	e019      	b.n	800393a <qspi_write_read+0x152>
    }
    else if (alternate_line == 1)
 8003906:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800390a:	2b01      	cmp	r3, #1
 800390c:	d103      	bne.n	8003916 <qspi_write_read+0x12e>
    {
        cmd_handler.AlternateByteMode = QSPI_ALTERNATE_BYTES_1_LINE;
 800390e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
 8003914:	e011      	b.n	800393a <qspi_write_read+0x152>
    }
    else if (alternate_line == 2)
 8003916:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800391a:	2b02      	cmp	r3, #2
 800391c:	d103      	bne.n	8003926 <qspi_write_read+0x13e>
    {
        cmd_handler.AlternateByteMode = QSPI_ALTERNATE_BYTES_2_LINES;
 800391e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003922:	62bb      	str	r3, [r7, #40]	; 0x28
 8003924:	e009      	b.n	800393a <qspi_write_read+0x152>
    }
    else if (alternate_line == 4)
 8003926:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800392a:	2b04      	cmp	r3, #4
 800392c:	d103      	bne.n	8003936 <qspi_write_read+0x14e>
    {
        cmd_handler.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 800392e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
 8003934:	e001      	b.n	800393a <qspi_write_read+0x152>
    }
    else
    {
        return 2;
 8003936:	2302      	movs	r3, #2
 8003938:	e086      	b.n	8003a48 <qspi_write_read+0x260>
    }
    
    /* set the alternate_len */
    if (alternate_len == 0)
 800393a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <qspi_write_read+0x160>
    {
        cmd_handler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	e020      	b.n	800398a <qspi_write_read+0x1a2>
    }
    else if (alternate_len == 1)
 8003948:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800394c:	2b01      	cmp	r3, #1
 800394e:	d102      	bne.n	8003956 <qspi_write_read+0x16e>
    {
        cmd_handler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8003950:	2300      	movs	r3, #0
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	e019      	b.n	800398a <qspi_write_read+0x1a2>
    }
    else if (alternate_len == 2)
 8003956:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800395a:	2b02      	cmp	r3, #2
 800395c:	d103      	bne.n	8003966 <qspi_write_read+0x17e>
    {
        cmd_handler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_16_BITS;
 800395e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	e011      	b.n	800398a <qspi_write_read+0x1a2>
    }
    else if (alternate_len == 3)
 8003966:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800396a:	2b03      	cmp	r3, #3
 800396c:	d103      	bne.n	8003976 <qspi_write_read+0x18e>
    {
        cmd_handler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_24_BITS;
 800396e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	e009      	b.n	800398a <qspi_write_read+0x1a2>
    }
    else if (alternate_len == 4)
 8003976:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800397a:	2b04      	cmp	r3, #4
 800397c:	d103      	bne.n	8003986 <qspi_write_read+0x19e>
    {
        cmd_handler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_32_BITS;
 800397e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003982:	61bb      	str	r3, [r7, #24]
 8003984:	e001      	b.n	800398a <qspi_write_read+0x1a2>
    }
    else
    {
        return 2;
 8003986:	2302      	movs	r3, #2
 8003988:	e05e      	b.n	8003a48 <qspi_write_read+0x260>
    }
    
    /* set the dummy */
    cmd_handler.DummyCycles = dummy;
 800398a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800398e:	61fb      	str	r3, [r7, #28]
    
    /* set the data_line */
    if (data_line == 0)
 8003990:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <qspi_write_read+0x1b8>
    {
        cmd_handler.DataMode = QSPI_DATA_1_LINE;
 8003998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800399e:	e019      	b.n	80039d4 <qspi_write_read+0x1ec>
    }
    else if (data_line == 1)
 80039a0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d103      	bne.n	80039b0 <qspi_write_read+0x1c8>
    {
        cmd_handler.DataMode = QSPI_DATA_1_LINE;
 80039a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ae:	e011      	b.n	80039d4 <qspi_write_read+0x1ec>
    }
    else if (data_line == 2)
 80039b0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d103      	bne.n	80039c0 <qspi_write_read+0x1d8>
    {
        cmd_handler.DataMode = QSPI_DATA_1_LINE;
 80039b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039be:	e009      	b.n	80039d4 <qspi_write_read+0x1ec>
    }
    else if (data_line == 4)
 80039c0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d103      	bne.n	80039d0 <qspi_write_read+0x1e8>
    {
        cmd_handler.DataMode = QSPI_DATA_1_LINE;
 80039c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ce:	e001      	b.n	80039d4 <qspi_write_read+0x1ec>
    }
    else
    {
        return 2;
 80039d0:	2302      	movs	r3, #2
 80039d2:	e039      	b.n	8003a48 <qspi_write_read+0x260>
    }
    
    /* set the param */
    cmd_handler.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80039d4:	2300      	movs	r3, #0
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    cmd_handler.DdrMode = QSPI_DDR_MODE_DISABLE;
 80039d8:	2300      	movs	r3, #0
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
    cmd_handler.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80039dc:	2300      	movs	r3, #0
 80039de:	63bb      	str	r3, [r7, #56]	; 0x38
    
    /* set the qspi */
    if (HAL_QSPI_Command(&gs_qspi_handle, &cmd_handler, 1000) != HAL_OK)
 80039e0:	f107 0308 	add.w	r3, r7, #8
 80039e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039e8:	4619      	mov	r1, r3
 80039ea:	4819      	ldr	r0, [pc, #100]	; (8003a50 <qspi_write_read+0x268>)
 80039ec:	f000 fd9a 	bl	8004524 <HAL_QSPI_Command>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <qspi_write_read+0x212>
    {
        return 1;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e026      	b.n	8003a48 <qspi_write_read+0x260>
    }
    
    /* if input */
    if (in_len != 0)
 80039fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00f      	beq.n	8003a20 <qspi_write_read+0x238>
    {
        gs_qspi_handle.Instance->DLR = in_len - 1;
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <qspi_write_read+0x268>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a06:	3a01      	subs	r2, #1
 8003a08:	611a      	str	r2, [r3, #16]
        if (HAL_QSPI_Transmit(&gs_qspi_handle, in_buf, 1000) != HAL_OK)
 8003a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a0e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003a10:	480f      	ldr	r0, [pc, #60]	; (8003a50 <qspi_write_read+0x268>)
 8003a12:	f000 fde5 	bl	80045e0 <HAL_QSPI_Transmit>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <qspi_write_read+0x238>
        {
            return 1;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e013      	b.n	8003a48 <qspi_write_read+0x260>
        }
    }
    
    /* if output */
    if (out_len != 0)
 8003a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00f      	beq.n	8003a46 <qspi_write_read+0x25e>
    {
        gs_qspi_handle.Instance->DLR = out_len - 1;
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <qspi_write_read+0x268>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a2c:	3a01      	subs	r2, #1
 8003a2e:	611a      	str	r2, [r3, #16]
        if (HAL_QSPI_Receive(&gs_qspi_handle, out_buf, 1000) != HAL_OK)
 8003a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a34:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003a36:	4806      	ldr	r0, [pc, #24]	; (8003a50 <qspi_write_read+0x268>)
 8003a38:	f000 fe69 	bl	800470e <HAL_QSPI_Receive>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <qspi_write_read+0x25e>
        {
            return 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <qspi_write_read+0x260>
        }
    }
    
    return 0;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3740      	adds	r7, #64	; 0x40
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200012ec 	.word	0x200012ec

08003a54 <qspi_deinit>:
 *         - 0 success
 *         - 1 deinit failed
 * @note   none
 */
uint8_t qspi_deinit(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
    /* qspi deint */
    if (HAL_QSPI_DeInit(&gs_qspi_handle) != HAL_OK)
 8003a58:	4805      	ldr	r0, [pc, #20]	; (8003a70 <qspi_deinit+0x1c>)
 8003a5a:	f000 fd3f 	bl	80044dc <HAL_QSPI_DeInit>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <qspi_deinit+0x14>
    {
        return 1;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <qspi_deinit+0x16>
    }
    
    return 0;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200012ec 	.word	0x200012ec

08003a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a78:	480d      	ldr	r0, [pc, #52]	; (8003ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a7a:	490e      	ldr	r1, [pc, #56]	; (8003ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a7c:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a80:	e002      	b.n	8003a88 <LoopCopyDataInit>

08003a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a86:	3304      	adds	r3, #4

08003a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a8c:	d3f9      	bcc.n	8003a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a90:	4c0b      	ldr	r4, [pc, #44]	; (8003ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a94:	e001      	b.n	8003a9a <LoopFillZerobss>

08003a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a98:	3204      	adds	r2, #4

08003a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a9c:	d3fb      	bcc.n	8003a96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a9e:	f7fd fa13 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aa2:	f002 fe21 	bl	80066e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aa6:	f7fc fd85 	bl	80005b4 <main>
  bx  lr    
 8003aaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ab4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003ab8:	08007e34 	.word	0x08007e34
  ldr r2, =_sbss
 8003abc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003ac0:	2000134c 	.word	0x2000134c

08003ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ac4:	e7fe      	b.n	8003ac4 <ADC_IRQHandler>
	...

08003ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003acc:	4b0e      	ldr	r3, [pc, #56]	; (8003b08 <HAL_Init+0x40>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0d      	ldr	r2, [pc, #52]	; (8003b08 <HAL_Init+0x40>)
 8003ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_Init+0x40>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <HAL_Init+0x40>)
 8003ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ae4:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <HAL_Init+0x40>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <HAL_Init+0x40>)
 8003aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003af0:	2003      	movs	r0, #3
 8003af2:	f000 f931 	bl	8003d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003af6:	2000      	movs	r0, #0
 8003af8:	f000 f808 	bl	8003b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003afc:	f7fc ffde 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40023c00 	.word	0x40023c00

08003b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <HAL_InitTick+0x54>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <HAL_InitTick+0x58>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 f93b 	bl	8003da6 <HAL_SYSTICK_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00e      	b.n	8003b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b0f      	cmp	r3, #15
 8003b3e:	d80a      	bhi.n	8003b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b40:	2200      	movs	r2, #0
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	f000 f911 	bl	8003d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b4c:	4a06      	ldr	r2, [pc, #24]	; (8003b68 <HAL_InitTick+0x5c>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000000 	.word	0x20000000
 8003b64:	20000008 	.word	0x20000008
 8003b68:	20000004 	.word	0x20000004

08003b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_IncTick+0x20>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_IncTick+0x24>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <HAL_IncTick+0x24>)
 8003b7e:	6013      	str	r3, [r2, #0]
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	20000008 	.word	0x20000008
 8003b90:	20001338 	.word	0x20001338

08003b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return uwTick;
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_GetTick+0x14>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20001338 	.word	0x20001338

08003bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bb4:	f7ff ffee 	bl	8003b94 <HAL_GetTick>
 8003bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d005      	beq.n	8003bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <HAL_Delay+0x44>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bd2:	bf00      	nop
 8003bd4:	f7ff ffde 	bl	8003b94 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d8f7      	bhi.n	8003bd4 <HAL_Delay+0x28>
  {
  }
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000008 	.word	0x20000008

08003bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c04:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <__NVIC_SetPriorityGrouping+0x44>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c10:	4013      	ands	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c26:	4a04      	ldr	r2, [pc, #16]	; (8003c38 <__NVIC_SetPriorityGrouping+0x44>)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	60d3      	str	r3, [r2, #12]
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <__NVIC_GetPriorityGrouping+0x18>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	0a1b      	lsrs	r3, r3, #8
 8003c46:	f003 0307 	and.w	r3, r3, #7
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	6039      	str	r1, [r7, #0]
 8003c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	db0a      	blt.n	8003c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	490c      	ldr	r1, [pc, #48]	; (8003ca4 <__NVIC_SetPriority+0x4c>)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	0112      	lsls	r2, r2, #4
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c80:	e00a      	b.n	8003c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4908      	ldr	r1, [pc, #32]	; (8003ca8 <__NVIC_SetPriority+0x50>)
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	3b04      	subs	r3, #4
 8003c90:	0112      	lsls	r2, r2, #4
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	440b      	add	r3, r1
 8003c96:	761a      	strb	r2, [r3, #24]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000e100 	.word	0xe000e100
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	; 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f1c3 0307 	rsb	r3, r3, #7
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	bf28      	it	cs
 8003cca:	2304      	movcs	r3, #4
 8003ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	d902      	bls.n	8003cdc <NVIC_EncodePriority+0x30>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3b03      	subs	r3, #3
 8003cda:	e000      	b.n	8003cde <NVIC_EncodePriority+0x32>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43da      	mvns	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	401a      	ands	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	43d9      	mvns	r1, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	4313      	orrs	r3, r2
         );
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3724      	adds	r7, #36	; 0x24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d24:	d301      	bcc.n	8003d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d26:	2301      	movs	r3, #1
 8003d28:	e00f      	b.n	8003d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <SysTick_Config+0x40>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d32:	210f      	movs	r1, #15
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	f7ff ff8e 	bl	8003c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <SysTick_Config+0x40>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <SysTick_Config+0x40>)
 8003d44:	2207      	movs	r2, #7
 8003d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	e000e010 	.word	0xe000e010

08003d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff47 	bl	8003bf4 <__NVIC_SetPriorityGrouping>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	4603      	mov	r3, r0
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d80:	f7ff ff5c 	bl	8003c3c <__NVIC_GetPriorityGrouping>
 8003d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7ff ff8e 	bl	8003cac <NVIC_EncodePriority>
 8003d90:	4602      	mov	r2, r0
 8003d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff5d 	bl	8003c58 <__NVIC_SetPriority>
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff ffb0 	bl	8003d14 <SysTick_Config>
 8003db4:	4603      	mov	r3, r0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dcc:	f7ff fee2 	bl	8003b94 <HAL_GetTick>
 8003dd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d008      	beq.n	8003df0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2280      	movs	r2, #128	; 0x80
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e052      	b.n	8003e96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0216 	bic.w	r2, r2, #22
 8003dfe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d103      	bne.n	8003e20 <HAL_DMA_Abort+0x62>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d007      	beq.n	8003e30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0208 	bic.w	r2, r2, #8
 8003e2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e40:	e013      	b.n	8003e6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e42:	f7ff fea7 	bl	8003b94 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b05      	cmp	r3, #5
 8003e4e:	d90c      	bls.n	8003e6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e015      	b.n	8003e96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e4      	bne.n	8003e42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	223f      	movs	r2, #63	; 0x3f
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	e165      	b.n	8004188 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	f040 8154 	bne.w	8004182 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d005      	beq.n	8003ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d130      	bne.n	8003f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	2203      	movs	r2, #3
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4013      	ands	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f28:	2201      	movs	r2, #1
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 0201 	and.w	r2, r3, #1
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d017      	beq.n	8003f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d123      	bne.n	8003fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	08da      	lsrs	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3208      	adds	r2, #8
 8003fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	220f      	movs	r2, #15
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	08da      	lsrs	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3208      	adds	r2, #8
 8003fde:	69b9      	ldr	r1, [r7, #24]
 8003fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	2203      	movs	r2, #3
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 0203 	and.w	r2, r3, #3
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80ae 	beq.w	8004182 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	4b5d      	ldr	r3, [pc, #372]	; (80041a0 <HAL_GPIO_Init+0x300>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	4a5c      	ldr	r2, [pc, #368]	; (80041a0 <HAL_GPIO_Init+0x300>)
 8004030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004034:	6453      	str	r3, [r2, #68]	; 0x44
 8004036:	4b5a      	ldr	r3, [pc, #360]	; (80041a0 <HAL_GPIO_Init+0x300>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004042:	4a58      	ldr	r2, [pc, #352]	; (80041a4 <HAL_GPIO_Init+0x304>)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	3302      	adds	r3, #2
 800404a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	220f      	movs	r2, #15
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4f      	ldr	r2, [pc, #316]	; (80041a8 <HAL_GPIO_Init+0x308>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d025      	beq.n	80040ba <HAL_GPIO_Init+0x21a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4e      	ldr	r2, [pc, #312]	; (80041ac <HAL_GPIO_Init+0x30c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01f      	beq.n	80040b6 <HAL_GPIO_Init+0x216>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4d      	ldr	r2, [pc, #308]	; (80041b0 <HAL_GPIO_Init+0x310>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d019      	beq.n	80040b2 <HAL_GPIO_Init+0x212>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4c      	ldr	r2, [pc, #304]	; (80041b4 <HAL_GPIO_Init+0x314>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <HAL_GPIO_Init+0x20e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a4b      	ldr	r2, [pc, #300]	; (80041b8 <HAL_GPIO_Init+0x318>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00d      	beq.n	80040aa <HAL_GPIO_Init+0x20a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a4a      	ldr	r2, [pc, #296]	; (80041bc <HAL_GPIO_Init+0x31c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <HAL_GPIO_Init+0x206>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a49      	ldr	r2, [pc, #292]	; (80041c0 <HAL_GPIO_Init+0x320>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d101      	bne.n	80040a2 <HAL_GPIO_Init+0x202>
 800409e:	2306      	movs	r3, #6
 80040a0:	e00c      	b.n	80040bc <HAL_GPIO_Init+0x21c>
 80040a2:	2307      	movs	r3, #7
 80040a4:	e00a      	b.n	80040bc <HAL_GPIO_Init+0x21c>
 80040a6:	2305      	movs	r3, #5
 80040a8:	e008      	b.n	80040bc <HAL_GPIO_Init+0x21c>
 80040aa:	2304      	movs	r3, #4
 80040ac:	e006      	b.n	80040bc <HAL_GPIO_Init+0x21c>
 80040ae:	2303      	movs	r3, #3
 80040b0:	e004      	b.n	80040bc <HAL_GPIO_Init+0x21c>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e002      	b.n	80040bc <HAL_GPIO_Init+0x21c>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <HAL_GPIO_Init+0x21c>
 80040ba:	2300      	movs	r3, #0
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	f002 0203 	and.w	r2, r2, #3
 80040c2:	0092      	lsls	r2, r2, #2
 80040c4:	4093      	lsls	r3, r2
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040cc:	4935      	ldr	r1, [pc, #212]	; (80041a4 <HAL_GPIO_Init+0x304>)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	3302      	adds	r3, #2
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040da:	4b3a      	ldr	r3, [pc, #232]	; (80041c4 <HAL_GPIO_Init+0x324>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040fe:	4a31      	ldr	r2, [pc, #196]	; (80041c4 <HAL_GPIO_Init+0x324>)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004104:	4b2f      	ldr	r3, [pc, #188]	; (80041c4 <HAL_GPIO_Init+0x324>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004128:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <HAL_GPIO_Init+0x324>)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800412e:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <HAL_GPIO_Init+0x324>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004152:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <HAL_GPIO_Init+0x324>)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004158:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <HAL_GPIO_Init+0x324>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	43db      	mvns	r3, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800417c:	4a11      	ldr	r2, [pc, #68]	; (80041c4 <HAL_GPIO_Init+0x324>)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3301      	adds	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2b0f      	cmp	r3, #15
 800418c:	f67f ae96 	bls.w	8003ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	3724      	adds	r7, #36	; 0x24
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40013800 	.word	0x40013800
 80041a8:	40020000 	.word	0x40020000
 80041ac:	40020400 	.word	0x40020400
 80041b0:	40020800 	.word	0x40020800
 80041b4:	40020c00 	.word	0x40020c00
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40021400 	.word	0x40021400
 80041c0:	40021800 	.word	0x40021800
 80041c4:	40013c00 	.word	0x40013c00

080041c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	e0c7      	b.n	8004374 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e4:	2201      	movs	r2, #1
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	f040 80b7 	bne.w	800436e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004200:	4a62      	ldr	r2, [pc, #392]	; (800438c <HAL_GPIO_DeInit+0x1c4>)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	3302      	adds	r3, #2
 8004208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	220f      	movs	r2, #15
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a5a      	ldr	r2, [pc, #360]	; (8004390 <HAL_GPIO_DeInit+0x1c8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d025      	beq.n	8004276 <HAL_GPIO_DeInit+0xae>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a59      	ldr	r2, [pc, #356]	; (8004394 <HAL_GPIO_DeInit+0x1cc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01f      	beq.n	8004272 <HAL_GPIO_DeInit+0xaa>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a58      	ldr	r2, [pc, #352]	; (8004398 <HAL_GPIO_DeInit+0x1d0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d019      	beq.n	800426e <HAL_GPIO_DeInit+0xa6>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a57      	ldr	r2, [pc, #348]	; (800439c <HAL_GPIO_DeInit+0x1d4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <HAL_GPIO_DeInit+0xa2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a56      	ldr	r2, [pc, #344]	; (80043a0 <HAL_GPIO_DeInit+0x1d8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00d      	beq.n	8004266 <HAL_GPIO_DeInit+0x9e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a55      	ldr	r2, [pc, #340]	; (80043a4 <HAL_GPIO_DeInit+0x1dc>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <HAL_GPIO_DeInit+0x9a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a54      	ldr	r2, [pc, #336]	; (80043a8 <HAL_GPIO_DeInit+0x1e0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_GPIO_DeInit+0x96>
 800425a:	2306      	movs	r3, #6
 800425c:	e00c      	b.n	8004278 <HAL_GPIO_DeInit+0xb0>
 800425e:	2307      	movs	r3, #7
 8004260:	e00a      	b.n	8004278 <HAL_GPIO_DeInit+0xb0>
 8004262:	2305      	movs	r3, #5
 8004264:	e008      	b.n	8004278 <HAL_GPIO_DeInit+0xb0>
 8004266:	2304      	movs	r3, #4
 8004268:	e006      	b.n	8004278 <HAL_GPIO_DeInit+0xb0>
 800426a:	2303      	movs	r3, #3
 800426c:	e004      	b.n	8004278 <HAL_GPIO_DeInit+0xb0>
 800426e:	2302      	movs	r3, #2
 8004270:	e002      	b.n	8004278 <HAL_GPIO_DeInit+0xb0>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_GPIO_DeInit+0xb0>
 8004276:	2300      	movs	r3, #0
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	f002 0203 	and.w	r2, r2, #3
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	4093      	lsls	r3, r2
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	429a      	cmp	r2, r3
 8004286:	d132      	bne.n	80042ee <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004288:	4b48      	ldr	r3, [pc, #288]	; (80043ac <HAL_GPIO_DeInit+0x1e4>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	43db      	mvns	r3, r3
 8004290:	4946      	ldr	r1, [pc, #280]	; (80043ac <HAL_GPIO_DeInit+0x1e4>)
 8004292:	4013      	ands	r3, r2
 8004294:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004296:	4b45      	ldr	r3, [pc, #276]	; (80043ac <HAL_GPIO_DeInit+0x1e4>)
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	43db      	mvns	r3, r3
 800429e:	4943      	ldr	r1, [pc, #268]	; (80043ac <HAL_GPIO_DeInit+0x1e4>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80042a4:	4b41      	ldr	r3, [pc, #260]	; (80043ac <HAL_GPIO_DeInit+0x1e4>)
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	493f      	ldr	r1, [pc, #252]	; (80043ac <HAL_GPIO_DeInit+0x1e4>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80042b2:	4b3e      	ldr	r3, [pc, #248]	; (80043ac <HAL_GPIO_DeInit+0x1e4>)
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	493c      	ldr	r1, [pc, #240]	; (80043ac <HAL_GPIO_DeInit+0x1e4>)
 80042bc:	4013      	ands	r3, r2
 80042be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	220f      	movs	r2, #15
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80042d0:	4a2e      	ldr	r2, [pc, #184]	; (800438c <HAL_GPIO_DeInit+0x1c4>)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	089b      	lsrs	r3, r3, #2
 80042d6:	3302      	adds	r3, #2
 80042d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	43da      	mvns	r2, r3
 80042e0:	482a      	ldr	r0, [pc, #168]	; (800438c <HAL_GPIO_DeInit+0x1c4>)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	089b      	lsrs	r3, r3, #2
 80042e6:	400a      	ands	r2, r1
 80042e8:	3302      	adds	r3, #2
 80042ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	2103      	movs	r1, #3
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	401a      	ands	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	08da      	lsrs	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3208      	adds	r2, #8
 800430c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	220f      	movs	r2, #15
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	08d2      	lsrs	r2, r2, #3
 8004324:	4019      	ands	r1, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3208      	adds	r2, #8
 800432a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	2103      	movs	r1, #3
 8004338:	fa01 f303 	lsl.w	r3, r1, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	401a      	ands	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	2101      	movs	r1, #1
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	401a      	ands	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	2103      	movs	r1, #3
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	401a      	ands	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	3301      	adds	r3, #1
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b0f      	cmp	r3, #15
 8004378:	f67f af34 	bls.w	80041e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800437c:	bf00      	nop
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40013800 	.word	0x40013800
 8004390:	40020000 	.word	0x40020000
 8004394:	40020400 	.word	0x40020400
 8004398:	40020800 	.word	0x40020800
 800439c:	40020c00 	.word	0x40020c00
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40021400 	.word	0x40021400
 80043a8:	40021800 	.word	0x40021800
 80043ac:	40013c00 	.word	0x40013c00

080043b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043c0:	787b      	ldrb	r3, [r7, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043c6:	887a      	ldrh	r2, [r7, #2]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043cc:	e003      	b.n	80043d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043ce:	887b      	ldrh	r3, [r7, #2]
 80043d0:	041a      	lsls	r2, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	619a      	str	r2, [r3, #24]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80043ec:	f7ff fbd2 	bl	8003b94 <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e069      	b.n	80044d0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7fc fb7b 	bl	8000b0c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004416:	f241 3188 	movw	r1, #5000	; 0x1388
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa92 	bl	8004944 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	3b01      	subs	r3, #1
 8004430:	021a      	lsls	r2, r3, #8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	2120      	movs	r1, #32
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa8a 	bl	8004960 <QSPI_WaitFlagStateUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004450:	7afb      	ldrb	r3, [r7, #11]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d137      	bne.n	80044c6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004460:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6852      	ldr	r2, [r2, #4]
 8004468:	0611      	lsls	r1, r2, #24
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68d2      	ldr	r2, [r2, #12]
 800446e:	4311      	orrs	r1, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	69d2      	ldr	r2, [r2, #28]
 8004474:	4311      	orrs	r1, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6a12      	ldr	r2, [r2, #32]
 800447a:	4311      	orrs	r1, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	430b      	orrs	r3, r1
 8004482:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_QSPI_Init+0xf4>)
 800448c:	4013      	ands	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6912      	ldr	r2, [r2, #16]
 8004492:	0411      	lsls	r1, r2, #16
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6952      	ldr	r2, [r2, #20]
 8004498:	4311      	orrs	r1, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6992      	ldr	r2, [r2, #24]
 800449e:	4311      	orrs	r1, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80044ce:	7afb      	ldrb	r3, [r7, #11]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	ffe0f8fe 	.word	0xffe0f8fe

080044dc <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e016      	b.n	800451c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc fb7c 	bl	8000bfc <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004530:	f7ff fb30 	bl	8003b94 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_QSPI_Command+0x22>
 8004542:	2302      	movs	r3, #2
 8004544:	e048      	b.n	80045d8 <HAL_QSPI_Command+0xb4>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	d137      	bne.n	80045ca <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	2200      	movs	r2, #0
 8004570:	2120      	movs	r1, #32
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f9f4 	bl	8004960 <QSPI_WaitFlagStateUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d125      	bne.n	80045ce <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004582:	2200      	movs	r2, #0
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fa21 	bl	80049ce <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	2b00      	cmp	r3, #0
 8004592:	d115      	bne.n	80045c0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2201      	movs	r2, #1
 800459c:	2102      	movs	r1, #2
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f9de 	bl	8004960 <QSPI_WaitFlagStateUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10f      	bne.n	80045ce <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2202      	movs	r2, #2
 80045b4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045be:	e006      	b.n	80045ce <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045c8:	e001      	b.n	80045ce <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80045ca:	2302      	movs	r3, #2
 80045cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80045f0:	f7ff fad0 	bl	8003b94 <HAL_GetTick>
 80045f4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3320      	adds	r3, #32
 80045fc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_QSPI_Transmit+0x2e>
 800460a:	2302      	movs	r3, #2
 800460c:	e07b      	b.n	8004706 <HAL_QSPI_Transmit+0x126>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d16a      	bne.n	80046f8 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d05b      	beq.n	80046e6 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2212      	movs	r2, #18
 8004632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004662:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004664:	e01b      	b.n	800469e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2201      	movs	r2, #1
 800466e:	2104      	movs	r1, #4
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f975 	bl	8004960 <QSPI_WaitFlagStateUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800467a:	7ffb      	ldrb	r3, [r7, #31]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d113      	bne.n	80046a8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	781a      	ldrb	r2, [r3, #0]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	1e5a      	subs	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1df      	bne.n	8004666 <HAL_QSPI_Transmit+0x86>
 80046a6:	e000      	b.n	80046aa <HAL_QSPI_Transmit+0xca>
          break;
 80046a8:	bf00      	nop
      }

      if (status == HAL_OK)
 80046aa:	7ffb      	ldrb	r3, [r7, #31]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d115      	bne.n	80046dc <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2201      	movs	r2, #1
 80046b8:	2102      	movs	r1, #2
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f950 	bl	8004960 <QSPI_WaitFlagStateUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80046c4:	7ffb      	ldrb	r3, [r7, #31]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d108      	bne.n	80046dc <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2202      	movs	r2, #2
 80046d0:	60da      	str	r2, [r3, #12]

          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f8bd 	bl	8004852 <HAL_QSPI_Abort>
 80046d8:	4603      	mov	r3, r0
 80046da:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046e4:	e00a      	b.n	80046fc <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	f043 0208 	orr.w	r2, r3, #8
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	77fb      	strb	r3, [r7, #31]
 80046f6:	e001      	b.n	80046fc <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
 80046fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8004704:	7ffb      	ldrb	r3, [r7, #31]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b08a      	sub	sp, #40	; 0x28
 8004712:	af02      	add	r7, sp, #8
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800471e:	f7ff fa39 	bl	8003b94 <HAL_GetTick>
 8004722:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3320      	adds	r3, #32
 8004732:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_QSPI_Receive+0x36>
 8004740:	2302      	movs	r3, #2
 8004742:	e082      	b.n	800484a <HAL_QSPI_Receive+0x13c>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d171      	bne.n	800483c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d062      	beq.n	800482a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2222      	movs	r2, #34	; 0x22
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800479c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80047a6:	e01c      	b.n	80047e2 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2201      	movs	r2, #1
 80047b0:	2106      	movs	r1, #6
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f8d4 	bl	8004960 <QSPI_WaitFlagStateUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80047bc:	7ffb      	ldrb	r3, [r7, #31]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d114      	bne.n	80047ec <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	7812      	ldrb	r2, [r2, #0]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	1e5a      	subs	r2, r3, #1
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1de      	bne.n	80047a8 <HAL_QSPI_Receive+0x9a>
 80047ea:	e000      	b.n	80047ee <HAL_QSPI_Receive+0xe0>
          break;
 80047ec:	bf00      	nop
      }

      if (status == HAL_OK)
 80047ee:	7ffb      	ldrb	r3, [r7, #31]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d115      	bne.n	8004820 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2201      	movs	r2, #1
 80047fc:	2102      	movs	r1, #2
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f8ae 	bl	8004960 <QSPI_WaitFlagStateUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004808:	7ffb      	ldrb	r3, [r7, #31]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d108      	bne.n	8004820 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2202      	movs	r2, #2
 8004814:	60da      	str	r2, [r3, #12]

          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f81b 	bl	8004852 <HAL_QSPI_Abort>
 800481c:	4603      	mov	r3, r0
 800481e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004828:	e00a      	b.n	8004840 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	f043 0208 	orr.w	r2, r3, #8
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	77fb      	strb	r3, [r7, #31]
 800483a:	e001      	b.n	8004840 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800483c:	2302      	movs	r3, #2
 800483e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8004848:	7ffb      	ldrb	r3, [r7, #31]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af02      	add	r7, sp, #8
 8004858:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800485e:	f7ff f999 	bl	8003b94 <HAL_GetTick>
 8004862:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d062      	beq.n	800493a <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	d017      	beq.n	80048ba <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0204 	bic.w	r2, r2, #4
 8004898:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fa8d 	bl	8003dbe <HAL_DMA_Abort>
 80048a4:	4603      	mov	r3, r0
 80048a6:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	f043 0204 	orr.w	r2, r3, #4
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d034      	beq.n	8004932 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0202 	orr.w	r2, r2, #2
 80048d6:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2201      	movs	r2, #1
 80048e2:	2102      	movs	r1, #2
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f83b 	bl	8004960 <QSPI_WaitFlagStateUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10e      	bne.n	8004912 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2202      	movs	r2, #2
 80048fa:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2200      	movs	r2, #0
 8004906:	2120      	movs	r1, #32
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f829 	bl	8004960 <QSPI_WaitFlagStateUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d110      	bne.n	800493a <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004926:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004930:	e003      	b.n	800493a <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800493a:	7bfb      	ldrb	r3, [r7, #15]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	4613      	mov	r3, r2
 800496e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004970:	e01a      	b.n	80049a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d016      	beq.n	80049a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497a:	f7ff f90b 	bl	8003b94 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	429a      	cmp	r2, r3
 8004988:	d302      	bcc.n	8004990 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2204      	movs	r2, #4
 8004994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	f043 0201 	orr.w	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e00e      	b.n	80049c6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d1d6      	bne.n	8004972 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <QSPI_Config+0x28>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049e8:	d005      	beq.n	80049f6 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3a01      	subs	r2, #1
 80049f4:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80b9 	beq.w	8004b72 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d05f      	beq.n	8004ac8 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	6892      	ldr	r2, [r2, #8]
 8004a10:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d031      	beq.n	8004a7e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	431a      	orrs	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	049b      	lsls	r3, r3, #18
 8004a36:	431a      	orrs	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	431a      	orrs	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	ea42 0103 	orr.w	r1, r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a6e:	f000 812e 	beq.w	8004cce <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	6852      	ldr	r2, [r2, #4]
 8004a7a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004a7c:	e127      	b.n	8004cce <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	431a      	orrs	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	049b      	lsls	r3, r3, #18
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	ea42 0103 	orr.w	r1, r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	615a      	str	r2, [r3, #20]
}
 8004ac6:	e102      	b.n	8004cce <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d02e      	beq.n	8004b2e <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	049b      	lsls	r3, r3, #18
 8004aec:	431a      	orrs	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	ea42 0103 	orr.w	r1, r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004b1e:	f000 80d6 	beq.w	8004cce <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	6852      	ldr	r2, [r2, #4]
 8004b2a:	619a      	str	r2, [r3, #24]
}
 8004b2c:	e0cf      	b.n	8004cce <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	431a      	orrs	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	431a      	orrs	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	049b      	lsls	r3, r3, #18
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	ea42 0103 	orr.w	r1, r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	615a      	str	r2, [r3, #20]
}
 8004b70:	e0ad      	b.n	8004cce <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d058      	beq.n	8004c2c <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	6892      	ldr	r2, [r2, #8]
 8004b82:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d02d      	beq.n	8004be8 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	431a      	orrs	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	049b      	lsls	r3, r3, #18
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	ea42 0103 	orr.w	r1, r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004bda:	d078      	beq.n	8004cce <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	6852      	ldr	r2, [r2, #4]
 8004be4:	619a      	str	r2, [r3, #24]
}
 8004be6:	e072      	b.n	8004cce <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	049b      	lsls	r3, r3, #18
 8004c04:	431a      	orrs	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	ea42 0103 	orr.w	r1, r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	615a      	str	r2, [r3, #20]
}
 8004c2a:	e050      	b.n	8004cce <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02a      	beq.n	8004c8a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c42:	431a      	orrs	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	049b      	lsls	r3, r3, #18
 8004c50:	431a      	orrs	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	ea42 0103 	orr.w	r1, r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004c7c:	d027      	beq.n	8004cce <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	6852      	ldr	r2, [r2, #4]
 8004c86:	619a      	str	r2, [r3, #24]
}
 8004c88:	e021      	b.n	8004cce <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01d      	beq.n	8004cce <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	049b      	lsls	r3, r3, #18
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	ea42 0103 	orr.w	r1, r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	615a      	str	r2, [r3, #20]
}
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0cc      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b68      	ldr	r3, [pc, #416]	; (8004e94 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d90c      	bls.n	8004d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b65      	ldr	r3, [pc, #404]	; (8004e94 <HAL_RCC_ClockConfig+0x1b8>)
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d06:	4b63      	ldr	r3, [pc, #396]	; (8004e94 <HAL_RCC_ClockConfig+0x1b8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0b8      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d020      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d30:	4b59      	ldr	r3, [pc, #356]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	4a58      	ldr	r2, [pc, #352]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d48:	4b53      	ldr	r3, [pc, #332]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	4a52      	ldr	r2, [pc, #328]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d54:	4b50      	ldr	r3, [pc, #320]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	494d      	ldr	r1, [pc, #308]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d044      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d107      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	4b47      	ldr	r3, [pc, #284]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d119      	bne.n	8004dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e07f      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d003      	beq.n	8004d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d107      	bne.n	8004daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9a:	4b3f      	ldr	r3, [pc, #252]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e06f      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004daa:	4b3b      	ldr	r3, [pc, #236]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e067      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dba:	4b37      	ldr	r3, [pc, #220]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f023 0203 	bic.w	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	4934      	ldr	r1, [pc, #208]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dcc:	f7fe fee2 	bl	8003b94 <HAL_GetTick>
 8004dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd4:	f7fe fede 	bl	8003b94 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e04f      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dea:	4b2b      	ldr	r3, [pc, #172]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 020c 	and.w	r2, r3, #12
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d1eb      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dfc:	4b25      	ldr	r3, [pc, #148]	; (8004e94 <HAL_RCC_ClockConfig+0x1b8>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d20c      	bcs.n	8004e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0a:	4b22      	ldr	r3, [pc, #136]	; (8004e94 <HAL_RCC_ClockConfig+0x1b8>)
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e12:	4b20      	ldr	r3, [pc, #128]	; (8004e94 <HAL_RCC_ClockConfig+0x1b8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e032      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4916      	ldr	r1, [pc, #88]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e4e:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	490e      	ldr	r1, [pc, #56]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e62:	f000 f855 	bl	8004f10 <HAL_RCC_GetSysClockFreq>
 8004e66:	4602      	mov	r2, r0
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	490a      	ldr	r1, [pc, #40]	; (8004e9c <HAL_RCC_ClockConfig+0x1c0>)
 8004e74:	5ccb      	ldrb	r3, [r1, r3]
 8004e76:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7a:	4a09      	ldr	r2, [pc, #36]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fe fe42 	bl	8003b0c <HAL_InitTick>

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40023c00 	.word	0x40023c00
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	08007d78 	.word	0x08007d78
 8004ea0:	20000000 	.word	0x20000000
 8004ea4:	20000004 	.word	0x20000004

08004ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8004eae:	681b      	ldr	r3, [r3, #0]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000000 	.word	0x20000000

08004ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ec4:	f7ff fff0 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	0a9b      	lsrs	r3, r3, #10
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	4903      	ldr	r1, [pc, #12]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ed6:	5ccb      	ldrb	r3, [r1, r3]
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	08007d88 	.word	0x08007d88

08004ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004eec:	f7ff ffdc 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	0b5b      	lsrs	r3, r3, #13
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	4903      	ldr	r1, [pc, #12]	; (8004f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004efe:	5ccb      	ldrb	r3, [r1, r3]
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	08007d88 	.word	0x08007d88

08004f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f14:	b0ae      	sub	sp, #184	; 0xb8
 8004f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f36:	4bcb      	ldr	r3, [pc, #812]	; (8005264 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	f200 8206 	bhi.w	8005350 <HAL_RCC_GetSysClockFreq+0x440>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f81 	.word	0x08004f81
 8004f50:	08005351 	.word	0x08005351
 8004f54:	08005351 	.word	0x08005351
 8004f58:	08005351 	.word	0x08005351
 8004f5c:	08004f89 	.word	0x08004f89
 8004f60:	08005351 	.word	0x08005351
 8004f64:	08005351 	.word	0x08005351
 8004f68:	08005351 	.word	0x08005351
 8004f6c:	08004f91 	.word	0x08004f91
 8004f70:	08005351 	.word	0x08005351
 8004f74:	08005351 	.word	0x08005351
 8004f78:	08005351 	.word	0x08005351
 8004f7c:	08005181 	.word	0x08005181
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f80:	4bb9      	ldr	r3, [pc, #740]	; (8005268 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004f86:	e1e7      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f88:	4bb8      	ldr	r3, [pc, #736]	; (800526c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004f8e:	e1e3      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f90:	4bb4      	ldr	r3, [pc, #720]	; (8005264 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f9c:	4bb1      	ldr	r3, [pc, #708]	; (8005264 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d071      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa8:	4bae      	ldr	r3, [pc, #696]	; (8005264 <HAL_RCC_GetSysClockFreq+0x354>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	099b      	lsrs	r3, r3, #6
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fb4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fce:	4622      	mov	r2, r4
 8004fd0:	462b      	mov	r3, r5
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f04f 0100 	mov.w	r1, #0
 8004fda:	0159      	lsls	r1, r3, #5
 8004fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fe0:	0150      	lsls	r0, r2, #5
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	1a51      	subs	r1, r2, r1
 8004fea:	6439      	str	r1, [r7, #64]	; 0x40
 8004fec:	4629      	mov	r1, r5
 8004fee:	eb63 0301 	sbc.w	r3, r3, r1
 8004ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005000:	4649      	mov	r1, r9
 8005002:	018b      	lsls	r3, r1, #6
 8005004:	4641      	mov	r1, r8
 8005006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800500a:	4641      	mov	r1, r8
 800500c:	018a      	lsls	r2, r1, #6
 800500e:	4641      	mov	r1, r8
 8005010:	1a51      	subs	r1, r2, r1
 8005012:	63b9      	str	r1, [r7, #56]	; 0x38
 8005014:	4649      	mov	r1, r9
 8005016:	eb63 0301 	sbc.w	r3, r3, r1
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005028:	4649      	mov	r1, r9
 800502a:	00cb      	lsls	r3, r1, #3
 800502c:	4641      	mov	r1, r8
 800502e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005032:	4641      	mov	r1, r8
 8005034:	00ca      	lsls	r2, r1, #3
 8005036:	4610      	mov	r0, r2
 8005038:	4619      	mov	r1, r3
 800503a:	4603      	mov	r3, r0
 800503c:	4622      	mov	r2, r4
 800503e:	189b      	adds	r3, r3, r2
 8005040:	633b      	str	r3, [r7, #48]	; 0x30
 8005042:	462b      	mov	r3, r5
 8005044:	460a      	mov	r2, r1
 8005046:	eb42 0303 	adc.w	r3, r2, r3
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005058:	4629      	mov	r1, r5
 800505a:	024b      	lsls	r3, r1, #9
 800505c:	4621      	mov	r1, r4
 800505e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005062:	4621      	mov	r1, r4
 8005064:	024a      	lsls	r2, r1, #9
 8005066:	4610      	mov	r0, r2
 8005068:	4619      	mov	r1, r3
 800506a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800506e:	2200      	movs	r2, #0
 8005070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005074:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005078:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800507c:	f7fb f918 	bl	80002b0 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4613      	mov	r3, r2
 8005086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800508a:	e067      	b.n	800515c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800508c:	4b75      	ldr	r3, [pc, #468]	; (8005264 <HAL_RCC_GetSysClockFreq+0x354>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	099b      	lsrs	r3, r3, #6
 8005092:	2200      	movs	r2, #0
 8005094:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005098:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800509c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80050a6:	2300      	movs	r3, #0
 80050a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80050ae:	4622      	mov	r2, r4
 80050b0:	462b      	mov	r3, r5
 80050b2:	f04f 0000 	mov.w	r0, #0
 80050b6:	f04f 0100 	mov.w	r1, #0
 80050ba:	0159      	lsls	r1, r3, #5
 80050bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050c0:	0150      	lsls	r0, r2, #5
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4621      	mov	r1, r4
 80050c8:	1a51      	subs	r1, r2, r1
 80050ca:	62b9      	str	r1, [r7, #40]	; 0x28
 80050cc:	4629      	mov	r1, r5
 80050ce:	eb63 0301 	sbc.w	r3, r3, r1
 80050d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80050e0:	4649      	mov	r1, r9
 80050e2:	018b      	lsls	r3, r1, #6
 80050e4:	4641      	mov	r1, r8
 80050e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050ea:	4641      	mov	r1, r8
 80050ec:	018a      	lsls	r2, r1, #6
 80050ee:	4641      	mov	r1, r8
 80050f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80050f4:	4649      	mov	r1, r9
 80050f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005106:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800510a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800510e:	4692      	mov	sl, r2
 8005110:	469b      	mov	fp, r3
 8005112:	4623      	mov	r3, r4
 8005114:	eb1a 0303 	adds.w	r3, sl, r3
 8005118:	623b      	str	r3, [r7, #32]
 800511a:	462b      	mov	r3, r5
 800511c:	eb4b 0303 	adc.w	r3, fp, r3
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800512e:	4629      	mov	r1, r5
 8005130:	028b      	lsls	r3, r1, #10
 8005132:	4621      	mov	r1, r4
 8005134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005138:	4621      	mov	r1, r4
 800513a:	028a      	lsls	r2, r1, #10
 800513c:	4610      	mov	r0, r2
 800513e:	4619      	mov	r1, r3
 8005140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005144:	2200      	movs	r2, #0
 8005146:	673b      	str	r3, [r7, #112]	; 0x70
 8005148:	677a      	str	r2, [r7, #116]	; 0x74
 800514a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800514e:	f7fb f8af 	bl	80002b0 <__aeabi_uldivmod>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4613      	mov	r3, r2
 8005158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800515c:	4b41      	ldr	r3, [pc, #260]	; (8005264 <HAL_RCC_GetSysClockFreq+0x354>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	0c1b      	lsrs	r3, r3, #16
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	3301      	adds	r3, #1
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800516e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005176:	fbb2 f3f3 	udiv	r3, r2, r3
 800517a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800517e:	e0eb      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005180:	4b38      	ldr	r3, [pc, #224]	; (8005264 <HAL_RCC_GetSysClockFreq+0x354>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005188:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800518c:	4b35      	ldr	r3, [pc, #212]	; (8005264 <HAL_RCC_GetSysClockFreq+0x354>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d06b      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005198:	4b32      	ldr	r3, [pc, #200]	; (8005264 <HAL_RCC_GetSysClockFreq+0x354>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	099b      	lsrs	r3, r3, #6
 800519e:	2200      	movs	r2, #0
 80051a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051aa:	663b      	str	r3, [r7, #96]	; 0x60
 80051ac:	2300      	movs	r3, #0
 80051ae:	667b      	str	r3, [r7, #100]	; 0x64
 80051b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80051b4:	4622      	mov	r2, r4
 80051b6:	462b      	mov	r3, r5
 80051b8:	f04f 0000 	mov.w	r0, #0
 80051bc:	f04f 0100 	mov.w	r1, #0
 80051c0:	0159      	lsls	r1, r3, #5
 80051c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051c6:	0150      	lsls	r0, r2, #5
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4621      	mov	r1, r4
 80051ce:	1a51      	subs	r1, r2, r1
 80051d0:	61b9      	str	r1, [r7, #24]
 80051d2:	4629      	mov	r1, r5
 80051d4:	eb63 0301 	sbc.w	r3, r3, r1
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80051e6:	4659      	mov	r1, fp
 80051e8:	018b      	lsls	r3, r1, #6
 80051ea:	4651      	mov	r1, sl
 80051ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051f0:	4651      	mov	r1, sl
 80051f2:	018a      	lsls	r2, r1, #6
 80051f4:	4651      	mov	r1, sl
 80051f6:	ebb2 0801 	subs.w	r8, r2, r1
 80051fa:	4659      	mov	r1, fp
 80051fc:	eb63 0901 	sbc.w	r9, r3, r1
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800520c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005210:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005214:	4690      	mov	r8, r2
 8005216:	4699      	mov	r9, r3
 8005218:	4623      	mov	r3, r4
 800521a:	eb18 0303 	adds.w	r3, r8, r3
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	462b      	mov	r3, r5
 8005222:	eb49 0303 	adc.w	r3, r9, r3
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005234:	4629      	mov	r1, r5
 8005236:	024b      	lsls	r3, r1, #9
 8005238:	4621      	mov	r1, r4
 800523a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800523e:	4621      	mov	r1, r4
 8005240:	024a      	lsls	r2, r1, #9
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800524a:	2200      	movs	r2, #0
 800524c:	65bb      	str	r3, [r7, #88]	; 0x58
 800524e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005250:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005254:	f7fb f82c 	bl	80002b0 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4613      	mov	r3, r2
 800525e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005262:	e065      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x420>
 8005264:	40023800 	.word	0x40023800
 8005268:	00f42400 	.word	0x00f42400
 800526c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005270:	4b3d      	ldr	r3, [pc, #244]	; (8005368 <HAL_RCC_GetSysClockFreq+0x458>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	099b      	lsrs	r3, r3, #6
 8005276:	2200      	movs	r2, #0
 8005278:	4618      	mov	r0, r3
 800527a:	4611      	mov	r1, r2
 800527c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005280:	653b      	str	r3, [r7, #80]	; 0x50
 8005282:	2300      	movs	r3, #0
 8005284:	657b      	str	r3, [r7, #84]	; 0x54
 8005286:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800528a:	4642      	mov	r2, r8
 800528c:	464b      	mov	r3, r9
 800528e:	f04f 0000 	mov.w	r0, #0
 8005292:	f04f 0100 	mov.w	r1, #0
 8005296:	0159      	lsls	r1, r3, #5
 8005298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800529c:	0150      	lsls	r0, r2, #5
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4641      	mov	r1, r8
 80052a4:	1a51      	subs	r1, r2, r1
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	4649      	mov	r1, r9
 80052aa:	eb63 0301 	sbc.w	r3, r3, r1
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80052bc:	4659      	mov	r1, fp
 80052be:	018b      	lsls	r3, r1, #6
 80052c0:	4651      	mov	r1, sl
 80052c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052c6:	4651      	mov	r1, sl
 80052c8:	018a      	lsls	r2, r1, #6
 80052ca:	4651      	mov	r1, sl
 80052cc:	1a54      	subs	r4, r2, r1
 80052ce:	4659      	mov	r1, fp
 80052d0:	eb63 0501 	sbc.w	r5, r3, r1
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	00eb      	lsls	r3, r5, #3
 80052de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052e2:	00e2      	lsls	r2, r4, #3
 80052e4:	4614      	mov	r4, r2
 80052e6:	461d      	mov	r5, r3
 80052e8:	4643      	mov	r3, r8
 80052ea:	18e3      	adds	r3, r4, r3
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	464b      	mov	r3, r9
 80052f0:	eb45 0303 	adc.w	r3, r5, r3
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005302:	4629      	mov	r1, r5
 8005304:	028b      	lsls	r3, r1, #10
 8005306:	4621      	mov	r1, r4
 8005308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800530c:	4621      	mov	r1, r4
 800530e:	028a      	lsls	r2, r1, #10
 8005310:	4610      	mov	r0, r2
 8005312:	4619      	mov	r1, r3
 8005314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005318:	2200      	movs	r2, #0
 800531a:	64bb      	str	r3, [r7, #72]	; 0x48
 800531c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800531e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005322:	f7fa ffc5 	bl	80002b0 <__aeabi_uldivmod>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4613      	mov	r3, r2
 800532c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005330:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <HAL_RCC_GetSysClockFreq+0x458>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	0f1b      	lsrs	r3, r3, #28
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800533e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005346:	fbb2 f3f3 	udiv	r3, r2, r3
 800534a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800534e:	e003      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005350:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005356:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800535c:	4618      	mov	r0, r3
 800535e:	37b8      	adds	r7, #184	; 0xb8
 8005360:	46bd      	mov	sp, r7
 8005362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005366:	bf00      	nop
 8005368:	40023800 	.word	0x40023800
 800536c:	00f42400 	.word	0x00f42400

08005370 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e28d      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 8083 	beq.w	8005496 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005390:	4b94      	ldr	r3, [pc, #592]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 030c 	and.w	r3, r3, #12
 8005398:	2b04      	cmp	r3, #4
 800539a:	d019      	beq.n	80053d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800539c:	4b91      	ldr	r3, [pc, #580]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d106      	bne.n	80053b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053a8:	4b8e      	ldr	r3, [pc, #568]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b4:	d00c      	beq.n	80053d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053b6:	4b8b      	ldr	r3, [pc, #556]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053be:	2b0c      	cmp	r3, #12
 80053c0:	d112      	bne.n	80053e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053c2:	4b88      	ldr	r3, [pc, #544]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ce:	d10b      	bne.n	80053e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d0:	4b84      	ldr	r3, [pc, #528]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d05b      	beq.n	8005494 <HAL_RCC_OscConfig+0x124>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d157      	bne.n	8005494 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e25a      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f0:	d106      	bne.n	8005400 <HAL_RCC_OscConfig+0x90>
 80053f2:	4b7c      	ldr	r3, [pc, #496]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a7b      	ldr	r2, [pc, #492]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e01d      	b.n	800543c <HAL_RCC_OscConfig+0xcc>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005408:	d10c      	bne.n	8005424 <HAL_RCC_OscConfig+0xb4>
 800540a:	4b76      	ldr	r3, [pc, #472]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a75      	ldr	r2, [pc, #468]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	4b73      	ldr	r3, [pc, #460]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a72      	ldr	r2, [pc, #456]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 800541c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e00b      	b.n	800543c <HAL_RCC_OscConfig+0xcc>
 8005424:	4b6f      	ldr	r3, [pc, #444]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a6e      	ldr	r2, [pc, #440]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 800542a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	4b6c      	ldr	r3, [pc, #432]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a6b      	ldr	r2, [pc, #428]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800543a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d013      	beq.n	800546c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fe fba6 	bl	8003b94 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800544c:	f7fe fba2 	bl	8003b94 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b64      	cmp	r3, #100	; 0x64
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e21f      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545e:	4b61      	ldr	r3, [pc, #388]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCC_OscConfig+0xdc>
 800546a:	e014      	b.n	8005496 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fe fb92 	bl	8003b94 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005474:	f7fe fb8e 	bl	8003b94 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b64      	cmp	r3, #100	; 0x64
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e20b      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005486:	4b57      	ldr	r3, [pc, #348]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0x104>
 8005492:	e000      	b.n	8005496 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d06f      	beq.n	8005582 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054a2:	4b50      	ldr	r3, [pc, #320]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d017      	beq.n	80054de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054ae:	4b4d      	ldr	r3, [pc, #308]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d105      	bne.n	80054c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054ba:	4b4a      	ldr	r3, [pc, #296]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00b      	beq.n	80054de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c6:	4b47      	ldr	r3, [pc, #284]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054ce:	2b0c      	cmp	r3, #12
 80054d0:	d11c      	bne.n	800550c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054d2:	4b44      	ldr	r3, [pc, #272]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d116      	bne.n	800550c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054de:	4b41      	ldr	r3, [pc, #260]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <HAL_RCC_OscConfig+0x186>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d001      	beq.n	80054f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e1d3      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f6:	4b3b      	ldr	r3, [pc, #236]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4937      	ldr	r1, [pc, #220]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005506:	4313      	orrs	r3, r2
 8005508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800550a:	e03a      	b.n	8005582 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d020      	beq.n	8005556 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005514:	4b34      	ldr	r3, [pc, #208]	; (80055e8 <HAL_RCC_OscConfig+0x278>)
 8005516:	2201      	movs	r2, #1
 8005518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551a:	f7fe fb3b 	bl	8003b94 <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005522:	f7fe fb37 	bl	8003b94 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e1b4      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005534:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0f0      	beq.n	8005522 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005540:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4925      	ldr	r1, [pc, #148]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005550:	4313      	orrs	r3, r2
 8005552:	600b      	str	r3, [r1, #0]
 8005554:	e015      	b.n	8005582 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <HAL_RCC_OscConfig+0x278>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fe fb1a 	bl	8003b94 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005564:	f7fe fb16 	bl	8003b94 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e193      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005576:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d036      	beq.n	80055fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d016      	beq.n	80055c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005596:	4b15      	ldr	r3, [pc, #84]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fe fafa 	bl	8003b94 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055a4:	f7fe faf6 	bl	8003b94 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e173      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055b6:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80055b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCC_OscConfig+0x234>
 80055c2:	e01b      	b.n	80055fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ca:	f7fe fae3 	bl	8003b94 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d0:	e00e      	b.n	80055f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055d2:	f7fe fadf 	bl	8003b94 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d907      	bls.n	80055f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e15c      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
 80055e4:	40023800 	.word	0x40023800
 80055e8:	42470000 	.word	0x42470000
 80055ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f0:	4b8a      	ldr	r3, [pc, #552]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 80055f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1ea      	bne.n	80055d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8097 	beq.w	8005738 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800560e:	4b83      	ldr	r3, [pc, #524]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10f      	bne.n	800563a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	4b7f      	ldr	r3, [pc, #508]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	4a7e      	ldr	r2, [pc, #504]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 8005624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005628:	6413      	str	r3, [r2, #64]	; 0x40
 800562a:	4b7c      	ldr	r3, [pc, #496]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563a:	4b79      	ldr	r3, [pc, #484]	; (8005820 <HAL_RCC_OscConfig+0x4b0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005642:	2b00      	cmp	r3, #0
 8005644:	d118      	bne.n	8005678 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005646:	4b76      	ldr	r3, [pc, #472]	; (8005820 <HAL_RCC_OscConfig+0x4b0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a75      	ldr	r2, [pc, #468]	; (8005820 <HAL_RCC_OscConfig+0x4b0>)
 800564c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005652:	f7fe fa9f 	bl	8003b94 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565a:	f7fe fa9b 	bl	8003b94 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e118      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566c:	4b6c      	ldr	r3, [pc, #432]	; (8005820 <HAL_RCC_OscConfig+0x4b0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d106      	bne.n	800568e <HAL_RCC_OscConfig+0x31e>
 8005680:	4b66      	ldr	r3, [pc, #408]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	4a65      	ldr	r2, [pc, #404]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	6713      	str	r3, [r2, #112]	; 0x70
 800568c:	e01c      	b.n	80056c8 <HAL_RCC_OscConfig+0x358>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b05      	cmp	r3, #5
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x340>
 8005696:	4b61      	ldr	r3, [pc, #388]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	4a60      	ldr	r2, [pc, #384]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 800569c:	f043 0304 	orr.w	r3, r3, #4
 80056a0:	6713      	str	r3, [r2, #112]	; 0x70
 80056a2:	4b5e      	ldr	r3, [pc, #376]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	4a5d      	ldr	r2, [pc, #372]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	6713      	str	r3, [r2, #112]	; 0x70
 80056ae:	e00b      	b.n	80056c8 <HAL_RCC_OscConfig+0x358>
 80056b0:	4b5a      	ldr	r3, [pc, #360]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b4:	4a59      	ldr	r2, [pc, #356]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 80056b6:	f023 0301 	bic.w	r3, r3, #1
 80056ba:	6713      	str	r3, [r2, #112]	; 0x70
 80056bc:	4b57      	ldr	r3, [pc, #348]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c0:	4a56      	ldr	r2, [pc, #344]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 80056c2:	f023 0304 	bic.w	r3, r3, #4
 80056c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d015      	beq.n	80056fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7fe fa60 	bl	8003b94 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d8:	f7fe fa5c 	bl	8003b94 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e0d7      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ee:	4b4b      	ldr	r3, [pc, #300]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0ee      	beq.n	80056d8 <HAL_RCC_OscConfig+0x368>
 80056fa:	e014      	b.n	8005726 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fc:	f7fe fa4a 	bl	8003b94 <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005702:	e00a      	b.n	800571a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005704:	f7fe fa46 	bl	8003b94 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e0c1      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571a:	4b40      	ldr	r3, [pc, #256]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 800571c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1ee      	bne.n	8005704 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d105      	bne.n	8005738 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572c:	4b3b      	ldr	r3, [pc, #236]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	4a3a      	ldr	r2, [pc, #232]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 8005732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005736:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80ad 	beq.w	800589c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005742:	4b36      	ldr	r3, [pc, #216]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b08      	cmp	r3, #8
 800574c:	d060      	beq.n	8005810 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d145      	bne.n	80057e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005756:	4b33      	ldr	r3, [pc, #204]	; (8005824 <HAL_RCC_OscConfig+0x4b4>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fe fa1a 	bl	8003b94 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005764:	f7fe fa16 	bl	8003b94 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e093      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005776:	4b29      	ldr	r3, [pc, #164]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f0      	bne.n	8005764 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69da      	ldr	r2, [r3, #28]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	019b      	lsls	r3, r3, #6
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	085b      	lsrs	r3, r3, #1
 800579a:	3b01      	subs	r3, #1
 800579c:	041b      	lsls	r3, r3, #16
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	061b      	lsls	r3, r3, #24
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	071b      	lsls	r3, r3, #28
 80057ae:	491b      	ldr	r1, [pc, #108]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057b4:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <HAL_RCC_OscConfig+0x4b4>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ba:	f7fe f9eb 	bl	8003b94 <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c2:	f7fe f9e7 	bl	8003b94 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e064      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d4:	4b11      	ldr	r3, [pc, #68]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0f0      	beq.n	80057c2 <HAL_RCC_OscConfig+0x452>
 80057e0:	e05c      	b.n	800589c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e2:	4b10      	ldr	r3, [pc, #64]	; (8005824 <HAL_RCC_OscConfig+0x4b4>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fe f9d4 	bl	8003b94 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057f0:	f7fe f9d0 	bl	8003b94 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e04d      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <HAL_RCC_OscConfig+0x4ac>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x480>
 800580e:	e045      	b.n	800589c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d107      	bne.n	8005828 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e040      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
 800581c:	40023800 	.word	0x40023800
 8005820:	40007000 	.word	0x40007000
 8005824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005828:	4b1f      	ldr	r3, [pc, #124]	; (80058a8 <HAL_RCC_OscConfig+0x538>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d030      	beq.n	8005898 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005840:	429a      	cmp	r2, r3
 8005842:	d129      	bne.n	8005898 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584e:	429a      	cmp	r2, r3
 8005850:	d122      	bne.n	8005898 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005858:	4013      	ands	r3, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800585e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005860:	4293      	cmp	r3, r2
 8005862:	d119      	bne.n	8005898 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	3b01      	subs	r3, #1
 8005872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d10f      	bne.n	8005898 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d107      	bne.n	8005898 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40023800 	.word	0x40023800

080058ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e07b      	b.n	80059b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d108      	bne.n	80058d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ce:	d009      	beq.n	80058e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	61da      	str	r2, [r3, #28]
 80058d6:	e005      	b.n	80058e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fb f9a0 	bl	8000c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800591a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005968:	ea42 0103 	orr.w	r1, r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	0c1b      	lsrs	r3, r3, #16
 8005982:	f003 0104 	and.w	r1, r3, #4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	f003 0210 	and.w	r2, r3, #16
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69da      	ldr	r2, [r3, #28]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e041      	b.n	8005a54 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7fb f9a5 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4619      	mov	r1, r3
 80059fc:	4610      	mov	r0, r2
 80059fe:	f000 f8f5 	bl	8005bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIM_ConfigClockSource+0x1c>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e0b4      	b.n	8005be2 <HAL_TIM_ConfigClockSource+0x186>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab0:	d03e      	beq.n	8005b30 <HAL_TIM_ConfigClockSource+0xd4>
 8005ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab6:	f200 8087 	bhi.w	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005abe:	f000 8086 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x172>
 8005ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac6:	d87f      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac8:	2b70      	cmp	r3, #112	; 0x70
 8005aca:	d01a      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0xa6>
 8005acc:	2b70      	cmp	r3, #112	; 0x70
 8005ace:	d87b      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad0:	2b60      	cmp	r3, #96	; 0x60
 8005ad2:	d050      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x11a>
 8005ad4:	2b60      	cmp	r3, #96	; 0x60
 8005ad6:	d877      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad8:	2b50      	cmp	r3, #80	; 0x50
 8005ada:	d03c      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0xfa>
 8005adc:	2b50      	cmp	r3, #80	; 0x50
 8005ade:	d873      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae0:	2b40      	cmp	r3, #64	; 0x40
 8005ae2:	d058      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x13a>
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d86f      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b30      	cmp	r3, #48	; 0x30
 8005aea:	d064      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005aec:	2b30      	cmp	r3, #48	; 0x30
 8005aee:	d86b      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d060      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d867      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d05c      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d05a      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b00:	e062      	b.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6899      	ldr	r1, [r3, #8]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f000 f985 	bl	8005e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	609a      	str	r2, [r3, #8]
      break;
 8005b2e:	e04f      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	6899      	ldr	r1, [r3, #8]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f000 f96e 	bl	8005e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b52:	609a      	str	r2, [r3, #8]
      break;
 8005b54:	e03c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6859      	ldr	r1, [r3, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f000 f8e2 	bl	8005d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2150      	movs	r1, #80	; 0x50
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f93b 	bl	8005dea <TIM_ITRx_SetConfig>
      break;
 8005b74:	e02c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f000 f901 	bl	8005d8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2160      	movs	r1, #96	; 0x60
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 f92b 	bl	8005dea <TIM_ITRx_SetConfig>
      break;
 8005b94:	e01c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f000 f8c2 	bl	8005d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2140      	movs	r1, #64	; 0x40
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 f91b 	bl	8005dea <TIM_ITRx_SetConfig>
      break;
 8005bb4:	e00c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f000 f912 	bl	8005dea <TIM_ITRx_SetConfig>
      break;
 8005bc6:	e003      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
      break;
 8005bcc:	e000      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a40      	ldr	r2, [pc, #256]	; (8005d00 <TIM_Base_SetConfig+0x114>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <TIM_Base_SetConfig+0x40>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0a:	d00f      	beq.n	8005c2c <TIM_Base_SetConfig+0x40>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a3d      	ldr	r2, [pc, #244]	; (8005d04 <TIM_Base_SetConfig+0x118>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00b      	beq.n	8005c2c <TIM_Base_SetConfig+0x40>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a3c      	ldr	r2, [pc, #240]	; (8005d08 <TIM_Base_SetConfig+0x11c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d007      	beq.n	8005c2c <TIM_Base_SetConfig+0x40>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a3b      	ldr	r2, [pc, #236]	; (8005d0c <TIM_Base_SetConfig+0x120>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_Base_SetConfig+0x40>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a3a      	ldr	r2, [pc, #232]	; (8005d10 <TIM_Base_SetConfig+0x124>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d108      	bne.n	8005c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a2f      	ldr	r2, [pc, #188]	; (8005d00 <TIM_Base_SetConfig+0x114>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d02b      	beq.n	8005c9e <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4c:	d027      	beq.n	8005c9e <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a2c      	ldr	r2, [pc, #176]	; (8005d04 <TIM_Base_SetConfig+0x118>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d023      	beq.n	8005c9e <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a2b      	ldr	r2, [pc, #172]	; (8005d08 <TIM_Base_SetConfig+0x11c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d01f      	beq.n	8005c9e <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a2a      	ldr	r2, [pc, #168]	; (8005d0c <TIM_Base_SetConfig+0x120>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01b      	beq.n	8005c9e <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a29      	ldr	r2, [pc, #164]	; (8005d10 <TIM_Base_SetConfig+0x124>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d017      	beq.n	8005c9e <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a28      	ldr	r2, [pc, #160]	; (8005d14 <TIM_Base_SetConfig+0x128>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a27      	ldr	r2, [pc, #156]	; (8005d18 <TIM_Base_SetConfig+0x12c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00f      	beq.n	8005c9e <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a26      	ldr	r2, [pc, #152]	; (8005d1c <TIM_Base_SetConfig+0x130>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00b      	beq.n	8005c9e <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a25      	ldr	r2, [pc, #148]	; (8005d20 <TIM_Base_SetConfig+0x134>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d007      	beq.n	8005c9e <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a24      	ldr	r2, [pc, #144]	; (8005d24 <TIM_Base_SetConfig+0x138>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a23      	ldr	r2, [pc, #140]	; (8005d28 <TIM_Base_SetConfig+0x13c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d108      	bne.n	8005cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <TIM_Base_SetConfig+0x114>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_Base_SetConfig+0xf8>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a0c      	ldr	r2, [pc, #48]	; (8005d10 <TIM_Base_SetConfig+0x124>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d103      	bne.n	8005cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	615a      	str	r2, [r3, #20]
}
 8005cf2:	bf00      	nop
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40010400 	.word	0x40010400
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40014400 	.word	0x40014400
 8005d1c:	40014800 	.word	0x40014800
 8005d20:	40001800 	.word	0x40001800
 8005d24:	40001c00 	.word	0x40001c00
 8005d28:	40002000 	.word	0x40002000

08005d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f023 0201 	bic.w	r2, r3, #1
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f023 030a 	bic.w	r3, r3, #10
 8005d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	621a      	str	r2, [r3, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b087      	sub	sp, #28
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f023 0210 	bic.w	r2, r3, #16
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	031b      	lsls	r3, r3, #12
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	621a      	str	r2, [r3, #32]
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b085      	sub	sp, #20
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f043 0307 	orr.w	r3, r3, #7
 8005e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	609a      	str	r2, [r3, #8]
}
 8005e14:	bf00      	nop
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	021a      	lsls	r2, r3, #8
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	609a      	str	r2, [r3, #8]
}
 8005e54:	bf00      	nop
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e05a      	b.n	8005f2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a21      	ldr	r2, [pc, #132]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d022      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec4:	d01d      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1d      	ldr	r2, [pc, #116]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d018      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d013      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1a      	ldr	r2, [pc, #104]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00e      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a18      	ldr	r2, [pc, #96]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d009      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a17      	ldr	r2, [pc, #92]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d004      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a15      	ldr	r2, [pc, #84]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d10c      	bne.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	40000c00 	.word	0x40000c00
 8005f4c:	40010400 	.word	0x40010400
 8005f50:	40014000 	.word	0x40014000
 8005f54:	40001800 	.word	0x40001800

08005f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e03f      	b.n	8005fea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fa fefa 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2224      	movs	r2, #36	; 0x24
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f929 	bl	80061f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b08a      	sub	sp, #40	; 0x28
 8005ff6:	af02      	add	r7, sp, #8
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	603b      	str	r3, [r7, #0]
 8005ffe:	4613      	mov	r3, r2
 8006000:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b20      	cmp	r3, #32
 8006010:	d17c      	bne.n	800610c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_UART_Transmit+0x2c>
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e075      	b.n	800610e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_UART_Transmit+0x3e>
 800602c:	2302      	movs	r3, #2
 800602e:	e06e      	b.n	800610e <HAL_UART_Transmit+0x11c>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2221      	movs	r2, #33	; 0x21
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006046:	f7fd fda5 	bl	8003b94 <HAL_GetTick>
 800604a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	88fa      	ldrh	r2, [r7, #6]
 8006050:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	88fa      	ldrh	r2, [r7, #6]
 8006056:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006060:	d108      	bne.n	8006074 <HAL_UART_Transmit+0x82>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d104      	bne.n	8006074 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800606a:	2300      	movs	r3, #0
 800606c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	61bb      	str	r3, [r7, #24]
 8006072:	e003      	b.n	800607c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006078:	2300      	movs	r3, #0
 800607a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006084:	e02a      	b.n	80060dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2200      	movs	r2, #0
 800608e:	2180      	movs	r1, #128	; 0x80
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f840 	bl	8006116 <UART_WaitOnFlagUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e036      	b.n	800610e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10b      	bne.n	80060be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	3302      	adds	r3, #2
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	e007      	b.n	80060ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	781a      	ldrb	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	3301      	adds	r3, #1
 80060cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1cf      	bne.n	8006086 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2200      	movs	r2, #0
 80060ee:	2140      	movs	r1, #64	; 0x40
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f810 	bl	8006116 <UART_WaitOnFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e006      	b.n	800610e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e000      	b.n	800610e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b090      	sub	sp, #64	; 0x40
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	4613      	mov	r3, r2
 8006124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006126:	e050      	b.n	80061ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612e:	d04c      	beq.n	80061ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <UART_WaitOnFlagUntilTimeout+0x30>
 8006136:	f7fd fd2d 	bl	8003b94 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006142:	429a      	cmp	r2, r3
 8006144:	d241      	bcs.n	80061ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	330c      	adds	r3, #12
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800615c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	330c      	adds	r3, #12
 8006164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006166:	637a      	str	r2, [r7, #52]	; 0x34
 8006168:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800616c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e5      	bne.n	8006146 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3314      	adds	r3, #20
 8006180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	613b      	str	r3, [r7, #16]
   return(result);
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f023 0301 	bic.w	r3, r3, #1
 8006190:	63bb      	str	r3, [r7, #56]	; 0x38
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3314      	adds	r3, #20
 8006198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800619a:	623a      	str	r2, [r7, #32]
 800619c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	69f9      	ldr	r1, [r7, #28]
 80061a0:	6a3a      	ldr	r2, [r7, #32]
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e5      	bne.n	800617a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e00f      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4013      	ands	r3, r2
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	bf0c      	ite	eq
 80061da:	2301      	moveq	r3, #1
 80061dc:	2300      	movne	r3, #0
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d09f      	beq.n	8006128 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3740      	adds	r7, #64	; 0x40
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061f8:	b0c0      	sub	sp, #256	; 0x100
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006210:	68d9      	ldr	r1, [r3, #12]
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	ea40 0301 	orr.w	r3, r0, r1
 800621c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	431a      	orrs	r2, r3
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	431a      	orrs	r2, r3
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	4313      	orrs	r3, r2
 800623c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800624c:	f021 010c 	bic.w	r1, r1, #12
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800625a:	430b      	orrs	r3, r1
 800625c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800626a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626e:	6999      	ldr	r1, [r3, #24]
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	ea40 0301 	orr.w	r3, r0, r1
 800627a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4b8f      	ldr	r3, [pc, #572]	; (80064c0 <UART_SetConfig+0x2cc>)
 8006284:	429a      	cmp	r2, r3
 8006286:	d005      	beq.n	8006294 <UART_SetConfig+0xa0>
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b8d      	ldr	r3, [pc, #564]	; (80064c4 <UART_SetConfig+0x2d0>)
 8006290:	429a      	cmp	r2, r3
 8006292:	d104      	bne.n	800629e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006294:	f7fe fe28 	bl	8004ee8 <HAL_RCC_GetPCLK2Freq>
 8006298:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800629c:	e003      	b.n	80062a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800629e:	f7fe fe0f 	bl	8004ec0 <HAL_RCC_GetPCLK1Freq>
 80062a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b0:	f040 810c 	bne.w	80064cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062c6:	4622      	mov	r2, r4
 80062c8:	462b      	mov	r3, r5
 80062ca:	1891      	adds	r1, r2, r2
 80062cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80062ce:	415b      	adcs	r3, r3
 80062d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062d6:	4621      	mov	r1, r4
 80062d8:	eb12 0801 	adds.w	r8, r2, r1
 80062dc:	4629      	mov	r1, r5
 80062de:	eb43 0901 	adc.w	r9, r3, r1
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062f6:	4690      	mov	r8, r2
 80062f8:	4699      	mov	r9, r3
 80062fa:	4623      	mov	r3, r4
 80062fc:	eb18 0303 	adds.w	r3, r8, r3
 8006300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006304:	462b      	mov	r3, r5
 8006306:	eb49 0303 	adc.w	r3, r9, r3
 800630a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800631a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800631e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006322:	460b      	mov	r3, r1
 8006324:	18db      	adds	r3, r3, r3
 8006326:	653b      	str	r3, [r7, #80]	; 0x50
 8006328:	4613      	mov	r3, r2
 800632a:	eb42 0303 	adc.w	r3, r2, r3
 800632e:	657b      	str	r3, [r7, #84]	; 0x54
 8006330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006338:	f7f9 ffba 	bl	80002b0 <__aeabi_uldivmod>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4b61      	ldr	r3, [pc, #388]	; (80064c8 <UART_SetConfig+0x2d4>)
 8006342:	fba3 2302 	umull	r2, r3, r3, r2
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	011c      	lsls	r4, r3, #4
 800634a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800634e:	2200      	movs	r2, #0
 8006350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006354:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800635c:	4642      	mov	r2, r8
 800635e:	464b      	mov	r3, r9
 8006360:	1891      	adds	r1, r2, r2
 8006362:	64b9      	str	r1, [r7, #72]	; 0x48
 8006364:	415b      	adcs	r3, r3
 8006366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800636c:	4641      	mov	r1, r8
 800636e:	eb12 0a01 	adds.w	sl, r2, r1
 8006372:	4649      	mov	r1, r9
 8006374:	eb43 0b01 	adc.w	fp, r3, r1
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800638c:	4692      	mov	sl, r2
 800638e:	469b      	mov	fp, r3
 8006390:	4643      	mov	r3, r8
 8006392:	eb1a 0303 	adds.w	r3, sl, r3
 8006396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800639a:	464b      	mov	r3, r9
 800639c:	eb4b 0303 	adc.w	r3, fp, r3
 80063a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063b8:	460b      	mov	r3, r1
 80063ba:	18db      	adds	r3, r3, r3
 80063bc:	643b      	str	r3, [r7, #64]	; 0x40
 80063be:	4613      	mov	r3, r2
 80063c0:	eb42 0303 	adc.w	r3, r2, r3
 80063c4:	647b      	str	r3, [r7, #68]	; 0x44
 80063c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063ce:	f7f9 ff6f 	bl	80002b0 <__aeabi_uldivmod>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	4b3b      	ldr	r3, [pc, #236]	; (80064c8 <UART_SetConfig+0x2d4>)
 80063da:	fba3 2301 	umull	r2, r3, r3, r1
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	2264      	movs	r2, #100	; 0x64
 80063e2:	fb02 f303 	mul.w	r3, r2, r3
 80063e6:	1acb      	subs	r3, r1, r3
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80063ee:	4b36      	ldr	r3, [pc, #216]	; (80064c8 <UART_SetConfig+0x2d4>)
 80063f0:	fba3 2302 	umull	r2, r3, r3, r2
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063fc:	441c      	add	r4, r3
 80063fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006402:	2200      	movs	r2, #0
 8006404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006408:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800640c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006410:	4642      	mov	r2, r8
 8006412:	464b      	mov	r3, r9
 8006414:	1891      	adds	r1, r2, r2
 8006416:	63b9      	str	r1, [r7, #56]	; 0x38
 8006418:	415b      	adcs	r3, r3
 800641a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800641c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006420:	4641      	mov	r1, r8
 8006422:	1851      	adds	r1, r2, r1
 8006424:	6339      	str	r1, [r7, #48]	; 0x30
 8006426:	4649      	mov	r1, r9
 8006428:	414b      	adcs	r3, r1
 800642a:	637b      	str	r3, [r7, #52]	; 0x34
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006438:	4659      	mov	r1, fp
 800643a:	00cb      	lsls	r3, r1, #3
 800643c:	4651      	mov	r1, sl
 800643e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006442:	4651      	mov	r1, sl
 8006444:	00ca      	lsls	r2, r1, #3
 8006446:	4610      	mov	r0, r2
 8006448:	4619      	mov	r1, r3
 800644a:	4603      	mov	r3, r0
 800644c:	4642      	mov	r2, r8
 800644e:	189b      	adds	r3, r3, r2
 8006450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006454:	464b      	mov	r3, r9
 8006456:	460a      	mov	r2, r1
 8006458:	eb42 0303 	adc.w	r3, r2, r3
 800645c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800646c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006474:	460b      	mov	r3, r1
 8006476:	18db      	adds	r3, r3, r3
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
 800647a:	4613      	mov	r3, r2
 800647c:	eb42 0303 	adc.w	r3, r2, r3
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800648a:	f7f9 ff11 	bl	80002b0 <__aeabi_uldivmod>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <UART_SetConfig+0x2d4>)
 8006494:	fba3 1302 	umull	r1, r3, r3, r2
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	2164      	movs	r1, #100	; 0x64
 800649c:	fb01 f303 	mul.w	r3, r1, r3
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	3332      	adds	r3, #50	; 0x32
 80064a6:	4a08      	ldr	r2, [pc, #32]	; (80064c8 <UART_SetConfig+0x2d4>)
 80064a8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	f003 0207 	and.w	r2, r3, #7
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4422      	add	r2, r4
 80064ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064bc:	e105      	b.n	80066ca <UART_SetConfig+0x4d6>
 80064be:	bf00      	nop
 80064c0:	40011000 	.word	0x40011000
 80064c4:	40011400 	.word	0x40011400
 80064c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d0:	2200      	movs	r2, #0
 80064d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064de:	4642      	mov	r2, r8
 80064e0:	464b      	mov	r3, r9
 80064e2:	1891      	adds	r1, r2, r2
 80064e4:	6239      	str	r1, [r7, #32]
 80064e6:	415b      	adcs	r3, r3
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064ee:	4641      	mov	r1, r8
 80064f0:	1854      	adds	r4, r2, r1
 80064f2:	4649      	mov	r1, r9
 80064f4:	eb43 0501 	adc.w	r5, r3, r1
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	00eb      	lsls	r3, r5, #3
 8006502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006506:	00e2      	lsls	r2, r4, #3
 8006508:	4614      	mov	r4, r2
 800650a:	461d      	mov	r5, r3
 800650c:	4643      	mov	r3, r8
 800650e:	18e3      	adds	r3, r4, r3
 8006510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006514:	464b      	mov	r3, r9
 8006516:	eb45 0303 	adc.w	r3, r5, r3
 800651a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800651e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800652a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800653a:	4629      	mov	r1, r5
 800653c:	008b      	lsls	r3, r1, #2
 800653e:	4621      	mov	r1, r4
 8006540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006544:	4621      	mov	r1, r4
 8006546:	008a      	lsls	r2, r1, #2
 8006548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800654c:	f7f9 feb0 	bl	80002b0 <__aeabi_uldivmod>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4b60      	ldr	r3, [pc, #384]	; (80066d8 <UART_SetConfig+0x4e4>)
 8006556:	fba3 2302 	umull	r2, r3, r3, r2
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	011c      	lsls	r4, r3, #4
 800655e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006562:	2200      	movs	r2, #0
 8006564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800656c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006570:	4642      	mov	r2, r8
 8006572:	464b      	mov	r3, r9
 8006574:	1891      	adds	r1, r2, r2
 8006576:	61b9      	str	r1, [r7, #24]
 8006578:	415b      	adcs	r3, r3
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006580:	4641      	mov	r1, r8
 8006582:	1851      	adds	r1, r2, r1
 8006584:	6139      	str	r1, [r7, #16]
 8006586:	4649      	mov	r1, r9
 8006588:	414b      	adcs	r3, r1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006598:	4659      	mov	r1, fp
 800659a:	00cb      	lsls	r3, r1, #3
 800659c:	4651      	mov	r1, sl
 800659e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065a2:	4651      	mov	r1, sl
 80065a4:	00ca      	lsls	r2, r1, #3
 80065a6:	4610      	mov	r0, r2
 80065a8:	4619      	mov	r1, r3
 80065aa:	4603      	mov	r3, r0
 80065ac:	4642      	mov	r2, r8
 80065ae:	189b      	adds	r3, r3, r2
 80065b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065b4:	464b      	mov	r3, r9
 80065b6:	460a      	mov	r2, r1
 80065b8:	eb42 0303 	adc.w	r3, r2, r3
 80065bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80065ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065d8:	4649      	mov	r1, r9
 80065da:	008b      	lsls	r3, r1, #2
 80065dc:	4641      	mov	r1, r8
 80065de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065e2:	4641      	mov	r1, r8
 80065e4:	008a      	lsls	r2, r1, #2
 80065e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065ea:	f7f9 fe61 	bl	80002b0 <__aeabi_uldivmod>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4b39      	ldr	r3, [pc, #228]	; (80066d8 <UART_SetConfig+0x4e4>)
 80065f4:	fba3 1302 	umull	r1, r3, r3, r2
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	2164      	movs	r1, #100	; 0x64
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	3332      	adds	r3, #50	; 0x32
 8006606:	4a34      	ldr	r2, [pc, #208]	; (80066d8 <UART_SetConfig+0x4e4>)
 8006608:	fba2 2303 	umull	r2, r3, r2, r3
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006612:	441c      	add	r4, r3
 8006614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006618:	2200      	movs	r2, #0
 800661a:	673b      	str	r3, [r7, #112]	; 0x70
 800661c:	677a      	str	r2, [r7, #116]	; 0x74
 800661e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006622:	4642      	mov	r2, r8
 8006624:	464b      	mov	r3, r9
 8006626:	1891      	adds	r1, r2, r2
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	415b      	adcs	r3, r3
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006632:	4641      	mov	r1, r8
 8006634:	1851      	adds	r1, r2, r1
 8006636:	6039      	str	r1, [r7, #0]
 8006638:	4649      	mov	r1, r9
 800663a:	414b      	adcs	r3, r1
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800664a:	4659      	mov	r1, fp
 800664c:	00cb      	lsls	r3, r1, #3
 800664e:	4651      	mov	r1, sl
 8006650:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006654:	4651      	mov	r1, sl
 8006656:	00ca      	lsls	r2, r1, #3
 8006658:	4610      	mov	r0, r2
 800665a:	4619      	mov	r1, r3
 800665c:	4603      	mov	r3, r0
 800665e:	4642      	mov	r2, r8
 8006660:	189b      	adds	r3, r3, r2
 8006662:	66bb      	str	r3, [r7, #104]	; 0x68
 8006664:	464b      	mov	r3, r9
 8006666:	460a      	mov	r2, r1
 8006668:	eb42 0303 	adc.w	r3, r2, r3
 800666c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	663b      	str	r3, [r7, #96]	; 0x60
 8006678:	667a      	str	r2, [r7, #100]	; 0x64
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006686:	4649      	mov	r1, r9
 8006688:	008b      	lsls	r3, r1, #2
 800668a:	4641      	mov	r1, r8
 800668c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006690:	4641      	mov	r1, r8
 8006692:	008a      	lsls	r2, r1, #2
 8006694:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006698:	f7f9 fe0a 	bl	80002b0 <__aeabi_uldivmod>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <UART_SetConfig+0x4e4>)
 80066a2:	fba3 1302 	umull	r1, r3, r3, r2
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	2164      	movs	r1, #100	; 0x64
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	3332      	adds	r3, #50	; 0x32
 80066b4:	4a08      	ldr	r2, [pc, #32]	; (80066d8 <UART_SetConfig+0x4e4>)
 80066b6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	f003 020f 	and.w	r2, r3, #15
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4422      	add	r2, r4
 80066c8:	609a      	str	r2, [r3, #8]
}
 80066ca:	bf00      	nop
 80066cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066d0:	46bd      	mov	sp, r7
 80066d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066d6:	bf00      	nop
 80066d8:	51eb851f 	.word	0x51eb851f

080066dc <__errno>:
 80066dc:	4b01      	ldr	r3, [pc, #4]	; (80066e4 <__errno+0x8>)
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	2000000c 	.word	0x2000000c

080066e8 <__libc_init_array>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	4d0d      	ldr	r5, [pc, #52]	; (8006720 <__libc_init_array+0x38>)
 80066ec:	4c0d      	ldr	r4, [pc, #52]	; (8006724 <__libc_init_array+0x3c>)
 80066ee:	1b64      	subs	r4, r4, r5
 80066f0:	10a4      	asrs	r4, r4, #2
 80066f2:	2600      	movs	r6, #0
 80066f4:	42a6      	cmp	r6, r4
 80066f6:	d109      	bne.n	800670c <__libc_init_array+0x24>
 80066f8:	4d0b      	ldr	r5, [pc, #44]	; (8006728 <__libc_init_array+0x40>)
 80066fa:	4c0c      	ldr	r4, [pc, #48]	; (800672c <__libc_init_array+0x44>)
 80066fc:	f000 fc8e 	bl	800701c <_init>
 8006700:	1b64      	subs	r4, r4, r5
 8006702:	10a4      	asrs	r4, r4, #2
 8006704:	2600      	movs	r6, #0
 8006706:	42a6      	cmp	r6, r4
 8006708:	d105      	bne.n	8006716 <__libc_init_array+0x2e>
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006710:	4798      	blx	r3
 8006712:	3601      	adds	r6, #1
 8006714:	e7ee      	b.n	80066f4 <__libc_init_array+0xc>
 8006716:	f855 3b04 	ldr.w	r3, [r5], #4
 800671a:	4798      	blx	r3
 800671c:	3601      	adds	r6, #1
 800671e:	e7f2      	b.n	8006706 <__libc_init_array+0x1e>
 8006720:	08007e2c 	.word	0x08007e2c
 8006724:	08007e2c 	.word	0x08007e2c
 8006728:	08007e2c 	.word	0x08007e2c
 800672c:	08007e30 	.word	0x08007e30

08006730 <memcpy>:
 8006730:	440a      	add	r2, r1
 8006732:	4291      	cmp	r1, r2
 8006734:	f100 33ff 	add.w	r3, r0, #4294967295
 8006738:	d100      	bne.n	800673c <memcpy+0xc>
 800673a:	4770      	bx	lr
 800673c:	b510      	push	{r4, lr}
 800673e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006746:	4291      	cmp	r1, r2
 8006748:	d1f9      	bne.n	800673e <memcpy+0xe>
 800674a:	bd10      	pop	{r4, pc}

0800674c <memset>:
 800674c:	4402      	add	r2, r0
 800674e:	4603      	mov	r3, r0
 8006750:	4293      	cmp	r3, r2
 8006752:	d100      	bne.n	8006756 <memset+0xa>
 8006754:	4770      	bx	lr
 8006756:	f803 1b01 	strb.w	r1, [r3], #1
 800675a:	e7f9      	b.n	8006750 <memset+0x4>

0800675c <siprintf>:
 800675c:	b40e      	push	{r1, r2, r3}
 800675e:	b500      	push	{lr}
 8006760:	b09c      	sub	sp, #112	; 0x70
 8006762:	ab1d      	add	r3, sp, #116	; 0x74
 8006764:	9002      	str	r0, [sp, #8]
 8006766:	9006      	str	r0, [sp, #24]
 8006768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800676c:	4809      	ldr	r0, [pc, #36]	; (8006794 <siprintf+0x38>)
 800676e:	9107      	str	r1, [sp, #28]
 8006770:	9104      	str	r1, [sp, #16]
 8006772:	4909      	ldr	r1, [pc, #36]	; (8006798 <siprintf+0x3c>)
 8006774:	f853 2b04 	ldr.w	r2, [r3], #4
 8006778:	9105      	str	r1, [sp, #20]
 800677a:	6800      	ldr	r0, [r0, #0]
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	a902      	add	r1, sp, #8
 8006780:	f000 f948 	bl	8006a14 <_svfiprintf_r>
 8006784:	9b02      	ldr	r3, [sp, #8]
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	b01c      	add	sp, #112	; 0x70
 800678c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006790:	b003      	add	sp, #12
 8006792:	4770      	bx	lr
 8006794:	2000000c 	.word	0x2000000c
 8006798:	ffff0208 	.word	0xffff0208

0800679c <_free_r>:
 800679c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800679e:	2900      	cmp	r1, #0
 80067a0:	d044      	beq.n	800682c <_free_r+0x90>
 80067a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a6:	9001      	str	r0, [sp, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f1a1 0404 	sub.w	r4, r1, #4
 80067ae:	bfb8      	it	lt
 80067b0:	18e4      	addlt	r4, r4, r3
 80067b2:	f000 fbef 	bl	8006f94 <__malloc_lock>
 80067b6:	4a1e      	ldr	r2, [pc, #120]	; (8006830 <_free_r+0x94>)
 80067b8:	9801      	ldr	r0, [sp, #4]
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	b933      	cbnz	r3, 80067cc <_free_r+0x30>
 80067be:	6063      	str	r3, [r4, #4]
 80067c0:	6014      	str	r4, [r2, #0]
 80067c2:	b003      	add	sp, #12
 80067c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067c8:	f000 bbea 	b.w	8006fa0 <__malloc_unlock>
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d908      	bls.n	80067e2 <_free_r+0x46>
 80067d0:	6825      	ldr	r5, [r4, #0]
 80067d2:	1961      	adds	r1, r4, r5
 80067d4:	428b      	cmp	r3, r1
 80067d6:	bf01      	itttt	eq
 80067d8:	6819      	ldreq	r1, [r3, #0]
 80067da:	685b      	ldreq	r3, [r3, #4]
 80067dc:	1949      	addeq	r1, r1, r5
 80067de:	6021      	streq	r1, [r4, #0]
 80067e0:	e7ed      	b.n	80067be <_free_r+0x22>
 80067e2:	461a      	mov	r2, r3
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	b10b      	cbz	r3, 80067ec <_free_r+0x50>
 80067e8:	42a3      	cmp	r3, r4
 80067ea:	d9fa      	bls.n	80067e2 <_free_r+0x46>
 80067ec:	6811      	ldr	r1, [r2, #0]
 80067ee:	1855      	adds	r5, r2, r1
 80067f0:	42a5      	cmp	r5, r4
 80067f2:	d10b      	bne.n	800680c <_free_r+0x70>
 80067f4:	6824      	ldr	r4, [r4, #0]
 80067f6:	4421      	add	r1, r4
 80067f8:	1854      	adds	r4, r2, r1
 80067fa:	42a3      	cmp	r3, r4
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	d1e0      	bne.n	80067c2 <_free_r+0x26>
 8006800:	681c      	ldr	r4, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	6053      	str	r3, [r2, #4]
 8006806:	4421      	add	r1, r4
 8006808:	6011      	str	r1, [r2, #0]
 800680a:	e7da      	b.n	80067c2 <_free_r+0x26>
 800680c:	d902      	bls.n	8006814 <_free_r+0x78>
 800680e:	230c      	movs	r3, #12
 8006810:	6003      	str	r3, [r0, #0]
 8006812:	e7d6      	b.n	80067c2 <_free_r+0x26>
 8006814:	6825      	ldr	r5, [r4, #0]
 8006816:	1961      	adds	r1, r4, r5
 8006818:	428b      	cmp	r3, r1
 800681a:	bf04      	itt	eq
 800681c:	6819      	ldreq	r1, [r3, #0]
 800681e:	685b      	ldreq	r3, [r3, #4]
 8006820:	6063      	str	r3, [r4, #4]
 8006822:	bf04      	itt	eq
 8006824:	1949      	addeq	r1, r1, r5
 8006826:	6021      	streq	r1, [r4, #0]
 8006828:	6054      	str	r4, [r2, #4]
 800682a:	e7ca      	b.n	80067c2 <_free_r+0x26>
 800682c:	b003      	add	sp, #12
 800682e:	bd30      	pop	{r4, r5, pc}
 8006830:	2000133c 	.word	0x2000133c

08006834 <sbrk_aligned>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4e0e      	ldr	r6, [pc, #56]	; (8006870 <sbrk_aligned+0x3c>)
 8006838:	460c      	mov	r4, r1
 800683a:	6831      	ldr	r1, [r6, #0]
 800683c:	4605      	mov	r5, r0
 800683e:	b911      	cbnz	r1, 8006846 <sbrk_aligned+0x12>
 8006840:	f000 fb7c 	bl	8006f3c <_sbrk_r>
 8006844:	6030      	str	r0, [r6, #0]
 8006846:	4621      	mov	r1, r4
 8006848:	4628      	mov	r0, r5
 800684a:	f000 fb77 	bl	8006f3c <_sbrk_r>
 800684e:	1c43      	adds	r3, r0, #1
 8006850:	d00a      	beq.n	8006868 <sbrk_aligned+0x34>
 8006852:	1cc4      	adds	r4, r0, #3
 8006854:	f024 0403 	bic.w	r4, r4, #3
 8006858:	42a0      	cmp	r0, r4
 800685a:	d007      	beq.n	800686c <sbrk_aligned+0x38>
 800685c:	1a21      	subs	r1, r4, r0
 800685e:	4628      	mov	r0, r5
 8006860:	f000 fb6c 	bl	8006f3c <_sbrk_r>
 8006864:	3001      	adds	r0, #1
 8006866:	d101      	bne.n	800686c <sbrk_aligned+0x38>
 8006868:	f04f 34ff 	mov.w	r4, #4294967295
 800686c:	4620      	mov	r0, r4
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	20001340 	.word	0x20001340

08006874 <_malloc_r>:
 8006874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006878:	1ccd      	adds	r5, r1, #3
 800687a:	f025 0503 	bic.w	r5, r5, #3
 800687e:	3508      	adds	r5, #8
 8006880:	2d0c      	cmp	r5, #12
 8006882:	bf38      	it	cc
 8006884:	250c      	movcc	r5, #12
 8006886:	2d00      	cmp	r5, #0
 8006888:	4607      	mov	r7, r0
 800688a:	db01      	blt.n	8006890 <_malloc_r+0x1c>
 800688c:	42a9      	cmp	r1, r5
 800688e:	d905      	bls.n	800689c <_malloc_r+0x28>
 8006890:	230c      	movs	r3, #12
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	2600      	movs	r6, #0
 8006896:	4630      	mov	r0, r6
 8006898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800689c:	4e2e      	ldr	r6, [pc, #184]	; (8006958 <_malloc_r+0xe4>)
 800689e:	f000 fb79 	bl	8006f94 <__malloc_lock>
 80068a2:	6833      	ldr	r3, [r6, #0]
 80068a4:	461c      	mov	r4, r3
 80068a6:	bb34      	cbnz	r4, 80068f6 <_malloc_r+0x82>
 80068a8:	4629      	mov	r1, r5
 80068aa:	4638      	mov	r0, r7
 80068ac:	f7ff ffc2 	bl	8006834 <sbrk_aligned>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	4604      	mov	r4, r0
 80068b4:	d14d      	bne.n	8006952 <_malloc_r+0xde>
 80068b6:	6834      	ldr	r4, [r6, #0]
 80068b8:	4626      	mov	r6, r4
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	d140      	bne.n	8006940 <_malloc_r+0xcc>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	4631      	mov	r1, r6
 80068c2:	4638      	mov	r0, r7
 80068c4:	eb04 0803 	add.w	r8, r4, r3
 80068c8:	f000 fb38 	bl	8006f3c <_sbrk_r>
 80068cc:	4580      	cmp	r8, r0
 80068ce:	d13a      	bne.n	8006946 <_malloc_r+0xd2>
 80068d0:	6821      	ldr	r1, [r4, #0]
 80068d2:	3503      	adds	r5, #3
 80068d4:	1a6d      	subs	r5, r5, r1
 80068d6:	f025 0503 	bic.w	r5, r5, #3
 80068da:	3508      	adds	r5, #8
 80068dc:	2d0c      	cmp	r5, #12
 80068de:	bf38      	it	cc
 80068e0:	250c      	movcc	r5, #12
 80068e2:	4629      	mov	r1, r5
 80068e4:	4638      	mov	r0, r7
 80068e6:	f7ff ffa5 	bl	8006834 <sbrk_aligned>
 80068ea:	3001      	adds	r0, #1
 80068ec:	d02b      	beq.n	8006946 <_malloc_r+0xd2>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	442b      	add	r3, r5
 80068f2:	6023      	str	r3, [r4, #0]
 80068f4:	e00e      	b.n	8006914 <_malloc_r+0xa0>
 80068f6:	6822      	ldr	r2, [r4, #0]
 80068f8:	1b52      	subs	r2, r2, r5
 80068fa:	d41e      	bmi.n	800693a <_malloc_r+0xc6>
 80068fc:	2a0b      	cmp	r2, #11
 80068fe:	d916      	bls.n	800692e <_malloc_r+0xba>
 8006900:	1961      	adds	r1, r4, r5
 8006902:	42a3      	cmp	r3, r4
 8006904:	6025      	str	r5, [r4, #0]
 8006906:	bf18      	it	ne
 8006908:	6059      	strne	r1, [r3, #4]
 800690a:	6863      	ldr	r3, [r4, #4]
 800690c:	bf08      	it	eq
 800690e:	6031      	streq	r1, [r6, #0]
 8006910:	5162      	str	r2, [r4, r5]
 8006912:	604b      	str	r3, [r1, #4]
 8006914:	4638      	mov	r0, r7
 8006916:	f104 060b 	add.w	r6, r4, #11
 800691a:	f000 fb41 	bl	8006fa0 <__malloc_unlock>
 800691e:	f026 0607 	bic.w	r6, r6, #7
 8006922:	1d23      	adds	r3, r4, #4
 8006924:	1af2      	subs	r2, r6, r3
 8006926:	d0b6      	beq.n	8006896 <_malloc_r+0x22>
 8006928:	1b9b      	subs	r3, r3, r6
 800692a:	50a3      	str	r3, [r4, r2]
 800692c:	e7b3      	b.n	8006896 <_malloc_r+0x22>
 800692e:	6862      	ldr	r2, [r4, #4]
 8006930:	42a3      	cmp	r3, r4
 8006932:	bf0c      	ite	eq
 8006934:	6032      	streq	r2, [r6, #0]
 8006936:	605a      	strne	r2, [r3, #4]
 8006938:	e7ec      	b.n	8006914 <_malloc_r+0xa0>
 800693a:	4623      	mov	r3, r4
 800693c:	6864      	ldr	r4, [r4, #4]
 800693e:	e7b2      	b.n	80068a6 <_malloc_r+0x32>
 8006940:	4634      	mov	r4, r6
 8006942:	6876      	ldr	r6, [r6, #4]
 8006944:	e7b9      	b.n	80068ba <_malloc_r+0x46>
 8006946:	230c      	movs	r3, #12
 8006948:	603b      	str	r3, [r7, #0]
 800694a:	4638      	mov	r0, r7
 800694c:	f000 fb28 	bl	8006fa0 <__malloc_unlock>
 8006950:	e7a1      	b.n	8006896 <_malloc_r+0x22>
 8006952:	6025      	str	r5, [r4, #0]
 8006954:	e7de      	b.n	8006914 <_malloc_r+0xa0>
 8006956:	bf00      	nop
 8006958:	2000133c 	.word	0x2000133c

0800695c <__ssputs_r>:
 800695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	688e      	ldr	r6, [r1, #8]
 8006962:	429e      	cmp	r6, r3
 8006964:	4682      	mov	sl, r0
 8006966:	460c      	mov	r4, r1
 8006968:	4690      	mov	r8, r2
 800696a:	461f      	mov	r7, r3
 800696c:	d838      	bhi.n	80069e0 <__ssputs_r+0x84>
 800696e:	898a      	ldrh	r2, [r1, #12]
 8006970:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006974:	d032      	beq.n	80069dc <__ssputs_r+0x80>
 8006976:	6825      	ldr	r5, [r4, #0]
 8006978:	6909      	ldr	r1, [r1, #16]
 800697a:	eba5 0901 	sub.w	r9, r5, r1
 800697e:	6965      	ldr	r5, [r4, #20]
 8006980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006984:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006988:	3301      	adds	r3, #1
 800698a:	444b      	add	r3, r9
 800698c:	106d      	asrs	r5, r5, #1
 800698e:	429d      	cmp	r5, r3
 8006990:	bf38      	it	cc
 8006992:	461d      	movcc	r5, r3
 8006994:	0553      	lsls	r3, r2, #21
 8006996:	d531      	bpl.n	80069fc <__ssputs_r+0xa0>
 8006998:	4629      	mov	r1, r5
 800699a:	f7ff ff6b 	bl	8006874 <_malloc_r>
 800699e:	4606      	mov	r6, r0
 80069a0:	b950      	cbnz	r0, 80069b8 <__ssputs_r+0x5c>
 80069a2:	230c      	movs	r3, #12
 80069a4:	f8ca 3000 	str.w	r3, [sl]
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ae:	81a3      	strh	r3, [r4, #12]
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b8:	6921      	ldr	r1, [r4, #16]
 80069ba:	464a      	mov	r2, r9
 80069bc:	f7ff feb8 	bl	8006730 <memcpy>
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ca:	81a3      	strh	r3, [r4, #12]
 80069cc:	6126      	str	r6, [r4, #16]
 80069ce:	6165      	str	r5, [r4, #20]
 80069d0:	444e      	add	r6, r9
 80069d2:	eba5 0509 	sub.w	r5, r5, r9
 80069d6:	6026      	str	r6, [r4, #0]
 80069d8:	60a5      	str	r5, [r4, #8]
 80069da:	463e      	mov	r6, r7
 80069dc:	42be      	cmp	r6, r7
 80069de:	d900      	bls.n	80069e2 <__ssputs_r+0x86>
 80069e0:	463e      	mov	r6, r7
 80069e2:	6820      	ldr	r0, [r4, #0]
 80069e4:	4632      	mov	r2, r6
 80069e6:	4641      	mov	r1, r8
 80069e8:	f000 faba 	bl	8006f60 <memmove>
 80069ec:	68a3      	ldr	r3, [r4, #8]
 80069ee:	1b9b      	subs	r3, r3, r6
 80069f0:	60a3      	str	r3, [r4, #8]
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	4433      	add	r3, r6
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	2000      	movs	r0, #0
 80069fa:	e7db      	b.n	80069b4 <__ssputs_r+0x58>
 80069fc:	462a      	mov	r2, r5
 80069fe:	f000 fad5 	bl	8006fac <_realloc_r>
 8006a02:	4606      	mov	r6, r0
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d1e1      	bne.n	80069cc <__ssputs_r+0x70>
 8006a08:	6921      	ldr	r1, [r4, #16]
 8006a0a:	4650      	mov	r0, sl
 8006a0c:	f7ff fec6 	bl	800679c <_free_r>
 8006a10:	e7c7      	b.n	80069a2 <__ssputs_r+0x46>
	...

08006a14 <_svfiprintf_r>:
 8006a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	4698      	mov	r8, r3
 8006a1a:	898b      	ldrh	r3, [r1, #12]
 8006a1c:	061b      	lsls	r3, r3, #24
 8006a1e:	b09d      	sub	sp, #116	; 0x74
 8006a20:	4607      	mov	r7, r0
 8006a22:	460d      	mov	r5, r1
 8006a24:	4614      	mov	r4, r2
 8006a26:	d50e      	bpl.n	8006a46 <_svfiprintf_r+0x32>
 8006a28:	690b      	ldr	r3, [r1, #16]
 8006a2a:	b963      	cbnz	r3, 8006a46 <_svfiprintf_r+0x32>
 8006a2c:	2140      	movs	r1, #64	; 0x40
 8006a2e:	f7ff ff21 	bl	8006874 <_malloc_r>
 8006a32:	6028      	str	r0, [r5, #0]
 8006a34:	6128      	str	r0, [r5, #16]
 8006a36:	b920      	cbnz	r0, 8006a42 <_svfiprintf_r+0x2e>
 8006a38:	230c      	movs	r3, #12
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a40:	e0d1      	b.n	8006be6 <_svfiprintf_r+0x1d2>
 8006a42:	2340      	movs	r3, #64	; 0x40
 8006a44:	616b      	str	r3, [r5, #20]
 8006a46:	2300      	movs	r3, #0
 8006a48:	9309      	str	r3, [sp, #36]	; 0x24
 8006a4a:	2320      	movs	r3, #32
 8006a4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a54:	2330      	movs	r3, #48	; 0x30
 8006a56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c00 <_svfiprintf_r+0x1ec>
 8006a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a5e:	f04f 0901 	mov.w	r9, #1
 8006a62:	4623      	mov	r3, r4
 8006a64:	469a      	mov	sl, r3
 8006a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a6a:	b10a      	cbz	r2, 8006a70 <_svfiprintf_r+0x5c>
 8006a6c:	2a25      	cmp	r2, #37	; 0x25
 8006a6e:	d1f9      	bne.n	8006a64 <_svfiprintf_r+0x50>
 8006a70:	ebba 0b04 	subs.w	fp, sl, r4
 8006a74:	d00b      	beq.n	8006a8e <_svfiprintf_r+0x7a>
 8006a76:	465b      	mov	r3, fp
 8006a78:	4622      	mov	r2, r4
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f7ff ff6d 	bl	800695c <__ssputs_r>
 8006a82:	3001      	adds	r0, #1
 8006a84:	f000 80aa 	beq.w	8006bdc <_svfiprintf_r+0x1c8>
 8006a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a8a:	445a      	add	r2, fp
 8006a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 80a2 	beq.w	8006bdc <_svfiprintf_r+0x1c8>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aa2:	f10a 0a01 	add.w	sl, sl, #1
 8006aa6:	9304      	str	r3, [sp, #16]
 8006aa8:	9307      	str	r3, [sp, #28]
 8006aaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aae:	931a      	str	r3, [sp, #104]	; 0x68
 8006ab0:	4654      	mov	r4, sl
 8006ab2:	2205      	movs	r2, #5
 8006ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab8:	4851      	ldr	r0, [pc, #324]	; (8006c00 <_svfiprintf_r+0x1ec>)
 8006aba:	f7f9 fba9 	bl	8000210 <memchr>
 8006abe:	9a04      	ldr	r2, [sp, #16]
 8006ac0:	b9d8      	cbnz	r0, 8006afa <_svfiprintf_r+0xe6>
 8006ac2:	06d0      	lsls	r0, r2, #27
 8006ac4:	bf44      	itt	mi
 8006ac6:	2320      	movmi	r3, #32
 8006ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006acc:	0711      	lsls	r1, r2, #28
 8006ace:	bf44      	itt	mi
 8006ad0:	232b      	movmi	r3, #43	; 0x2b
 8006ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8006ada:	2b2a      	cmp	r3, #42	; 0x2a
 8006adc:	d015      	beq.n	8006b0a <_svfiprintf_r+0xf6>
 8006ade:	9a07      	ldr	r2, [sp, #28]
 8006ae0:	4654      	mov	r4, sl
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	f04f 0c0a 	mov.w	ip, #10
 8006ae8:	4621      	mov	r1, r4
 8006aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aee:	3b30      	subs	r3, #48	; 0x30
 8006af0:	2b09      	cmp	r3, #9
 8006af2:	d94e      	bls.n	8006b92 <_svfiprintf_r+0x17e>
 8006af4:	b1b0      	cbz	r0, 8006b24 <_svfiprintf_r+0x110>
 8006af6:	9207      	str	r2, [sp, #28]
 8006af8:	e014      	b.n	8006b24 <_svfiprintf_r+0x110>
 8006afa:	eba0 0308 	sub.w	r3, r0, r8
 8006afe:	fa09 f303 	lsl.w	r3, r9, r3
 8006b02:	4313      	orrs	r3, r2
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	46a2      	mov	sl, r4
 8006b08:	e7d2      	b.n	8006ab0 <_svfiprintf_r+0x9c>
 8006b0a:	9b03      	ldr	r3, [sp, #12]
 8006b0c:	1d19      	adds	r1, r3, #4
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	9103      	str	r1, [sp, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bfbb      	ittet	lt
 8006b16:	425b      	neglt	r3, r3
 8006b18:	f042 0202 	orrlt.w	r2, r2, #2
 8006b1c:	9307      	strge	r3, [sp, #28]
 8006b1e:	9307      	strlt	r3, [sp, #28]
 8006b20:	bfb8      	it	lt
 8006b22:	9204      	strlt	r2, [sp, #16]
 8006b24:	7823      	ldrb	r3, [r4, #0]
 8006b26:	2b2e      	cmp	r3, #46	; 0x2e
 8006b28:	d10c      	bne.n	8006b44 <_svfiprintf_r+0x130>
 8006b2a:	7863      	ldrb	r3, [r4, #1]
 8006b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b2e:	d135      	bne.n	8006b9c <_svfiprintf_r+0x188>
 8006b30:	9b03      	ldr	r3, [sp, #12]
 8006b32:	1d1a      	adds	r2, r3, #4
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	9203      	str	r2, [sp, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	bfb8      	it	lt
 8006b3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b40:	3402      	adds	r4, #2
 8006b42:	9305      	str	r3, [sp, #20]
 8006b44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c10 <_svfiprintf_r+0x1fc>
 8006b48:	7821      	ldrb	r1, [r4, #0]
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	4650      	mov	r0, sl
 8006b4e:	f7f9 fb5f 	bl	8000210 <memchr>
 8006b52:	b140      	cbz	r0, 8006b66 <_svfiprintf_r+0x152>
 8006b54:	2340      	movs	r3, #64	; 0x40
 8006b56:	eba0 000a 	sub.w	r0, r0, sl
 8006b5a:	fa03 f000 	lsl.w	r0, r3, r0
 8006b5e:	9b04      	ldr	r3, [sp, #16]
 8006b60:	4303      	orrs	r3, r0
 8006b62:	3401      	adds	r4, #1
 8006b64:	9304      	str	r3, [sp, #16]
 8006b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6a:	4826      	ldr	r0, [pc, #152]	; (8006c04 <_svfiprintf_r+0x1f0>)
 8006b6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b70:	2206      	movs	r2, #6
 8006b72:	f7f9 fb4d 	bl	8000210 <memchr>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d038      	beq.n	8006bec <_svfiprintf_r+0x1d8>
 8006b7a:	4b23      	ldr	r3, [pc, #140]	; (8006c08 <_svfiprintf_r+0x1f4>)
 8006b7c:	bb1b      	cbnz	r3, 8006bc6 <_svfiprintf_r+0x1b2>
 8006b7e:	9b03      	ldr	r3, [sp, #12]
 8006b80:	3307      	adds	r3, #7
 8006b82:	f023 0307 	bic.w	r3, r3, #7
 8006b86:	3308      	adds	r3, #8
 8006b88:	9303      	str	r3, [sp, #12]
 8006b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b8c:	4433      	add	r3, r6
 8006b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b90:	e767      	b.n	8006a62 <_svfiprintf_r+0x4e>
 8006b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b96:	460c      	mov	r4, r1
 8006b98:	2001      	movs	r0, #1
 8006b9a:	e7a5      	b.n	8006ae8 <_svfiprintf_r+0xd4>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	3401      	adds	r4, #1
 8006ba0:	9305      	str	r3, [sp, #20]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	f04f 0c0a 	mov.w	ip, #10
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bae:	3a30      	subs	r2, #48	; 0x30
 8006bb0:	2a09      	cmp	r2, #9
 8006bb2:	d903      	bls.n	8006bbc <_svfiprintf_r+0x1a8>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0c5      	beq.n	8006b44 <_svfiprintf_r+0x130>
 8006bb8:	9105      	str	r1, [sp, #20]
 8006bba:	e7c3      	b.n	8006b44 <_svfiprintf_r+0x130>
 8006bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e7f0      	b.n	8006ba8 <_svfiprintf_r+0x194>
 8006bc6:	ab03      	add	r3, sp, #12
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	462a      	mov	r2, r5
 8006bcc:	4b0f      	ldr	r3, [pc, #60]	; (8006c0c <_svfiprintf_r+0x1f8>)
 8006bce:	a904      	add	r1, sp, #16
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	f3af 8000 	nop.w
 8006bd6:	1c42      	adds	r2, r0, #1
 8006bd8:	4606      	mov	r6, r0
 8006bda:	d1d6      	bne.n	8006b8a <_svfiprintf_r+0x176>
 8006bdc:	89ab      	ldrh	r3, [r5, #12]
 8006bde:	065b      	lsls	r3, r3, #25
 8006be0:	f53f af2c 	bmi.w	8006a3c <_svfiprintf_r+0x28>
 8006be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006be6:	b01d      	add	sp, #116	; 0x74
 8006be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bec:	ab03      	add	r3, sp, #12
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	462a      	mov	r2, r5
 8006bf2:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <_svfiprintf_r+0x1f8>)
 8006bf4:	a904      	add	r1, sp, #16
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	f000 f87a 	bl	8006cf0 <_printf_i>
 8006bfc:	e7eb      	b.n	8006bd6 <_svfiprintf_r+0x1c2>
 8006bfe:	bf00      	nop
 8006c00:	08007d90 	.word	0x08007d90
 8006c04:	08007d9a 	.word	0x08007d9a
 8006c08:	00000000 	.word	0x00000000
 8006c0c:	0800695d 	.word	0x0800695d
 8006c10:	08007d96 	.word	0x08007d96

08006c14 <_printf_common>:
 8006c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c18:	4616      	mov	r6, r2
 8006c1a:	4699      	mov	r9, r3
 8006c1c:	688a      	ldr	r2, [r1, #8]
 8006c1e:	690b      	ldr	r3, [r1, #16]
 8006c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c24:	4293      	cmp	r3, r2
 8006c26:	bfb8      	it	lt
 8006c28:	4613      	movlt	r3, r2
 8006c2a:	6033      	str	r3, [r6, #0]
 8006c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c30:	4607      	mov	r7, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	b10a      	cbz	r2, 8006c3a <_printf_common+0x26>
 8006c36:	3301      	adds	r3, #1
 8006c38:	6033      	str	r3, [r6, #0]
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	0699      	lsls	r1, r3, #26
 8006c3e:	bf42      	ittt	mi
 8006c40:	6833      	ldrmi	r3, [r6, #0]
 8006c42:	3302      	addmi	r3, #2
 8006c44:	6033      	strmi	r3, [r6, #0]
 8006c46:	6825      	ldr	r5, [r4, #0]
 8006c48:	f015 0506 	ands.w	r5, r5, #6
 8006c4c:	d106      	bne.n	8006c5c <_printf_common+0x48>
 8006c4e:	f104 0a19 	add.w	sl, r4, #25
 8006c52:	68e3      	ldr	r3, [r4, #12]
 8006c54:	6832      	ldr	r2, [r6, #0]
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	42ab      	cmp	r3, r5
 8006c5a:	dc26      	bgt.n	8006caa <_printf_common+0x96>
 8006c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c60:	1e13      	subs	r3, r2, #0
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	bf18      	it	ne
 8006c66:	2301      	movne	r3, #1
 8006c68:	0692      	lsls	r2, r2, #26
 8006c6a:	d42b      	bmi.n	8006cc4 <_printf_common+0xb0>
 8006c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c70:	4649      	mov	r1, r9
 8006c72:	4638      	mov	r0, r7
 8006c74:	47c0      	blx	r8
 8006c76:	3001      	adds	r0, #1
 8006c78:	d01e      	beq.n	8006cb8 <_printf_common+0xa4>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	68e5      	ldr	r5, [r4, #12]
 8006c7e:	6832      	ldr	r2, [r6, #0]
 8006c80:	f003 0306 	and.w	r3, r3, #6
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	bf08      	it	eq
 8006c88:	1aad      	subeq	r5, r5, r2
 8006c8a:	68a3      	ldr	r3, [r4, #8]
 8006c8c:	6922      	ldr	r2, [r4, #16]
 8006c8e:	bf0c      	ite	eq
 8006c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c94:	2500      	movne	r5, #0
 8006c96:	4293      	cmp	r3, r2
 8006c98:	bfc4      	itt	gt
 8006c9a:	1a9b      	subgt	r3, r3, r2
 8006c9c:	18ed      	addgt	r5, r5, r3
 8006c9e:	2600      	movs	r6, #0
 8006ca0:	341a      	adds	r4, #26
 8006ca2:	42b5      	cmp	r5, r6
 8006ca4:	d11a      	bne.n	8006cdc <_printf_common+0xc8>
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	e008      	b.n	8006cbc <_printf_common+0xa8>
 8006caa:	2301      	movs	r3, #1
 8006cac:	4652      	mov	r2, sl
 8006cae:	4649      	mov	r1, r9
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	47c0      	blx	r8
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d103      	bne.n	8006cc0 <_printf_common+0xac>
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc0:	3501      	adds	r5, #1
 8006cc2:	e7c6      	b.n	8006c52 <_printf_common+0x3e>
 8006cc4:	18e1      	adds	r1, r4, r3
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	2030      	movs	r0, #48	; 0x30
 8006cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cce:	4422      	add	r2, r4
 8006cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cd8:	3302      	adds	r3, #2
 8006cda:	e7c7      	b.n	8006c6c <_printf_common+0x58>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	4622      	mov	r2, r4
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	47c0      	blx	r8
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	d0e6      	beq.n	8006cb8 <_printf_common+0xa4>
 8006cea:	3601      	adds	r6, #1
 8006cec:	e7d9      	b.n	8006ca2 <_printf_common+0x8e>
	...

08006cf0 <_printf_i>:
 8006cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf4:	7e0f      	ldrb	r7, [r1, #24]
 8006cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cf8:	2f78      	cmp	r7, #120	; 0x78
 8006cfa:	4691      	mov	r9, r2
 8006cfc:	4680      	mov	r8, r0
 8006cfe:	460c      	mov	r4, r1
 8006d00:	469a      	mov	sl, r3
 8006d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d06:	d807      	bhi.n	8006d18 <_printf_i+0x28>
 8006d08:	2f62      	cmp	r7, #98	; 0x62
 8006d0a:	d80a      	bhi.n	8006d22 <_printf_i+0x32>
 8006d0c:	2f00      	cmp	r7, #0
 8006d0e:	f000 80d8 	beq.w	8006ec2 <_printf_i+0x1d2>
 8006d12:	2f58      	cmp	r7, #88	; 0x58
 8006d14:	f000 80a3 	beq.w	8006e5e <_printf_i+0x16e>
 8006d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d20:	e03a      	b.n	8006d98 <_printf_i+0xa8>
 8006d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d26:	2b15      	cmp	r3, #21
 8006d28:	d8f6      	bhi.n	8006d18 <_printf_i+0x28>
 8006d2a:	a101      	add	r1, pc, #4	; (adr r1, 8006d30 <_printf_i+0x40>)
 8006d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d30:	08006d89 	.word	0x08006d89
 8006d34:	08006d9d 	.word	0x08006d9d
 8006d38:	08006d19 	.word	0x08006d19
 8006d3c:	08006d19 	.word	0x08006d19
 8006d40:	08006d19 	.word	0x08006d19
 8006d44:	08006d19 	.word	0x08006d19
 8006d48:	08006d9d 	.word	0x08006d9d
 8006d4c:	08006d19 	.word	0x08006d19
 8006d50:	08006d19 	.word	0x08006d19
 8006d54:	08006d19 	.word	0x08006d19
 8006d58:	08006d19 	.word	0x08006d19
 8006d5c:	08006ea9 	.word	0x08006ea9
 8006d60:	08006dcd 	.word	0x08006dcd
 8006d64:	08006e8b 	.word	0x08006e8b
 8006d68:	08006d19 	.word	0x08006d19
 8006d6c:	08006d19 	.word	0x08006d19
 8006d70:	08006ecb 	.word	0x08006ecb
 8006d74:	08006d19 	.word	0x08006d19
 8006d78:	08006dcd 	.word	0x08006dcd
 8006d7c:	08006d19 	.word	0x08006d19
 8006d80:	08006d19 	.word	0x08006d19
 8006d84:	08006e93 	.word	0x08006e93
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	1d1a      	adds	r2, r3, #4
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	602a      	str	r2, [r5, #0]
 8006d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e0a3      	b.n	8006ee4 <_printf_i+0x1f4>
 8006d9c:	6820      	ldr	r0, [r4, #0]
 8006d9e:	6829      	ldr	r1, [r5, #0]
 8006da0:	0606      	lsls	r6, r0, #24
 8006da2:	f101 0304 	add.w	r3, r1, #4
 8006da6:	d50a      	bpl.n	8006dbe <_printf_i+0xce>
 8006da8:	680e      	ldr	r6, [r1, #0]
 8006daa:	602b      	str	r3, [r5, #0]
 8006dac:	2e00      	cmp	r6, #0
 8006dae:	da03      	bge.n	8006db8 <_printf_i+0xc8>
 8006db0:	232d      	movs	r3, #45	; 0x2d
 8006db2:	4276      	negs	r6, r6
 8006db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db8:	485e      	ldr	r0, [pc, #376]	; (8006f34 <_printf_i+0x244>)
 8006dba:	230a      	movs	r3, #10
 8006dbc:	e019      	b.n	8006df2 <_printf_i+0x102>
 8006dbe:	680e      	ldr	r6, [r1, #0]
 8006dc0:	602b      	str	r3, [r5, #0]
 8006dc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006dc6:	bf18      	it	ne
 8006dc8:	b236      	sxthne	r6, r6
 8006dca:	e7ef      	b.n	8006dac <_printf_i+0xbc>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	6820      	ldr	r0, [r4, #0]
 8006dd0:	1d19      	adds	r1, r3, #4
 8006dd2:	6029      	str	r1, [r5, #0]
 8006dd4:	0601      	lsls	r1, r0, #24
 8006dd6:	d501      	bpl.n	8006ddc <_printf_i+0xec>
 8006dd8:	681e      	ldr	r6, [r3, #0]
 8006dda:	e002      	b.n	8006de2 <_printf_i+0xf2>
 8006ddc:	0646      	lsls	r6, r0, #25
 8006dde:	d5fb      	bpl.n	8006dd8 <_printf_i+0xe8>
 8006de0:	881e      	ldrh	r6, [r3, #0]
 8006de2:	4854      	ldr	r0, [pc, #336]	; (8006f34 <_printf_i+0x244>)
 8006de4:	2f6f      	cmp	r7, #111	; 0x6f
 8006de6:	bf0c      	ite	eq
 8006de8:	2308      	moveq	r3, #8
 8006dea:	230a      	movne	r3, #10
 8006dec:	2100      	movs	r1, #0
 8006dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006df2:	6865      	ldr	r5, [r4, #4]
 8006df4:	60a5      	str	r5, [r4, #8]
 8006df6:	2d00      	cmp	r5, #0
 8006df8:	bfa2      	ittt	ge
 8006dfa:	6821      	ldrge	r1, [r4, #0]
 8006dfc:	f021 0104 	bicge.w	r1, r1, #4
 8006e00:	6021      	strge	r1, [r4, #0]
 8006e02:	b90e      	cbnz	r6, 8006e08 <_printf_i+0x118>
 8006e04:	2d00      	cmp	r5, #0
 8006e06:	d04d      	beq.n	8006ea4 <_printf_i+0x1b4>
 8006e08:	4615      	mov	r5, r2
 8006e0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e0e:	fb03 6711 	mls	r7, r3, r1, r6
 8006e12:	5dc7      	ldrb	r7, [r0, r7]
 8006e14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e18:	4637      	mov	r7, r6
 8006e1a:	42bb      	cmp	r3, r7
 8006e1c:	460e      	mov	r6, r1
 8006e1e:	d9f4      	bls.n	8006e0a <_printf_i+0x11a>
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d10b      	bne.n	8006e3c <_printf_i+0x14c>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	07de      	lsls	r6, r3, #31
 8006e28:	d508      	bpl.n	8006e3c <_printf_i+0x14c>
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	6861      	ldr	r1, [r4, #4]
 8006e2e:	4299      	cmp	r1, r3
 8006e30:	bfde      	ittt	le
 8006e32:	2330      	movle	r3, #48	; 0x30
 8006e34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e3c:	1b52      	subs	r2, r2, r5
 8006e3e:	6122      	str	r2, [r4, #16]
 8006e40:	f8cd a000 	str.w	sl, [sp]
 8006e44:	464b      	mov	r3, r9
 8006e46:	aa03      	add	r2, sp, #12
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4640      	mov	r0, r8
 8006e4c:	f7ff fee2 	bl	8006c14 <_printf_common>
 8006e50:	3001      	adds	r0, #1
 8006e52:	d14c      	bne.n	8006eee <_printf_i+0x1fe>
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295
 8006e58:	b004      	add	sp, #16
 8006e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5e:	4835      	ldr	r0, [pc, #212]	; (8006f34 <_printf_i+0x244>)
 8006e60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e64:	6829      	ldr	r1, [r5, #0]
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e6c:	6029      	str	r1, [r5, #0]
 8006e6e:	061d      	lsls	r5, r3, #24
 8006e70:	d514      	bpl.n	8006e9c <_printf_i+0x1ac>
 8006e72:	07df      	lsls	r7, r3, #31
 8006e74:	bf44      	itt	mi
 8006e76:	f043 0320 	orrmi.w	r3, r3, #32
 8006e7a:	6023      	strmi	r3, [r4, #0]
 8006e7c:	b91e      	cbnz	r6, 8006e86 <_printf_i+0x196>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	f023 0320 	bic.w	r3, r3, #32
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	2310      	movs	r3, #16
 8006e88:	e7b0      	b.n	8006dec <_printf_i+0xfc>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	f043 0320 	orr.w	r3, r3, #32
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	2378      	movs	r3, #120	; 0x78
 8006e94:	4828      	ldr	r0, [pc, #160]	; (8006f38 <_printf_i+0x248>)
 8006e96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e9a:	e7e3      	b.n	8006e64 <_printf_i+0x174>
 8006e9c:	0659      	lsls	r1, r3, #25
 8006e9e:	bf48      	it	mi
 8006ea0:	b2b6      	uxthmi	r6, r6
 8006ea2:	e7e6      	b.n	8006e72 <_printf_i+0x182>
 8006ea4:	4615      	mov	r5, r2
 8006ea6:	e7bb      	b.n	8006e20 <_printf_i+0x130>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	6826      	ldr	r6, [r4, #0]
 8006eac:	6961      	ldr	r1, [r4, #20]
 8006eae:	1d18      	adds	r0, r3, #4
 8006eb0:	6028      	str	r0, [r5, #0]
 8006eb2:	0635      	lsls	r5, r6, #24
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	d501      	bpl.n	8006ebc <_printf_i+0x1cc>
 8006eb8:	6019      	str	r1, [r3, #0]
 8006eba:	e002      	b.n	8006ec2 <_printf_i+0x1d2>
 8006ebc:	0670      	lsls	r0, r6, #25
 8006ebe:	d5fb      	bpl.n	8006eb8 <_printf_i+0x1c8>
 8006ec0:	8019      	strh	r1, [r3, #0]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	6123      	str	r3, [r4, #16]
 8006ec6:	4615      	mov	r5, r2
 8006ec8:	e7ba      	b.n	8006e40 <_printf_i+0x150>
 8006eca:	682b      	ldr	r3, [r5, #0]
 8006ecc:	1d1a      	adds	r2, r3, #4
 8006ece:	602a      	str	r2, [r5, #0]
 8006ed0:	681d      	ldr	r5, [r3, #0]
 8006ed2:	6862      	ldr	r2, [r4, #4]
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f7f9 f99a 	bl	8000210 <memchr>
 8006edc:	b108      	cbz	r0, 8006ee2 <_printf_i+0x1f2>
 8006ede:	1b40      	subs	r0, r0, r5
 8006ee0:	6060      	str	r0, [r4, #4]
 8006ee2:	6863      	ldr	r3, [r4, #4]
 8006ee4:	6123      	str	r3, [r4, #16]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eec:	e7a8      	b.n	8006e40 <_printf_i+0x150>
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	462a      	mov	r2, r5
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	47d0      	blx	sl
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d0ab      	beq.n	8006e54 <_printf_i+0x164>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	079b      	lsls	r3, r3, #30
 8006f00:	d413      	bmi.n	8006f2a <_printf_i+0x23a>
 8006f02:	68e0      	ldr	r0, [r4, #12]
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	4298      	cmp	r0, r3
 8006f08:	bfb8      	it	lt
 8006f0a:	4618      	movlt	r0, r3
 8006f0c:	e7a4      	b.n	8006e58 <_printf_i+0x168>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	4632      	mov	r2, r6
 8006f12:	4649      	mov	r1, r9
 8006f14:	4640      	mov	r0, r8
 8006f16:	47d0      	blx	sl
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d09b      	beq.n	8006e54 <_printf_i+0x164>
 8006f1c:	3501      	adds	r5, #1
 8006f1e:	68e3      	ldr	r3, [r4, #12]
 8006f20:	9903      	ldr	r1, [sp, #12]
 8006f22:	1a5b      	subs	r3, r3, r1
 8006f24:	42ab      	cmp	r3, r5
 8006f26:	dcf2      	bgt.n	8006f0e <_printf_i+0x21e>
 8006f28:	e7eb      	b.n	8006f02 <_printf_i+0x212>
 8006f2a:	2500      	movs	r5, #0
 8006f2c:	f104 0619 	add.w	r6, r4, #25
 8006f30:	e7f5      	b.n	8006f1e <_printf_i+0x22e>
 8006f32:	bf00      	nop
 8006f34:	08007da1 	.word	0x08007da1
 8006f38:	08007db2 	.word	0x08007db2

08006f3c <_sbrk_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4d06      	ldr	r5, [pc, #24]	; (8006f58 <_sbrk_r+0x1c>)
 8006f40:	2300      	movs	r3, #0
 8006f42:	4604      	mov	r4, r0
 8006f44:	4608      	mov	r0, r1
 8006f46:	602b      	str	r3, [r5, #0]
 8006f48:	f7f9 ff88 	bl	8000e5c <_sbrk>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_sbrk_r+0x1a>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_sbrk_r+0x1a>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	20001348 	.word	0x20001348

08006f5c <__retarget_lock_acquire_recursive>:
 8006f5c:	4770      	bx	lr

08006f5e <__retarget_lock_release_recursive>:
 8006f5e:	4770      	bx	lr

08006f60 <memmove>:
 8006f60:	4288      	cmp	r0, r1
 8006f62:	b510      	push	{r4, lr}
 8006f64:	eb01 0402 	add.w	r4, r1, r2
 8006f68:	d902      	bls.n	8006f70 <memmove+0x10>
 8006f6a:	4284      	cmp	r4, r0
 8006f6c:	4623      	mov	r3, r4
 8006f6e:	d807      	bhi.n	8006f80 <memmove+0x20>
 8006f70:	1e43      	subs	r3, r0, #1
 8006f72:	42a1      	cmp	r1, r4
 8006f74:	d008      	beq.n	8006f88 <memmove+0x28>
 8006f76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f7e:	e7f8      	b.n	8006f72 <memmove+0x12>
 8006f80:	4402      	add	r2, r0
 8006f82:	4601      	mov	r1, r0
 8006f84:	428a      	cmp	r2, r1
 8006f86:	d100      	bne.n	8006f8a <memmove+0x2a>
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f92:	e7f7      	b.n	8006f84 <memmove+0x24>

08006f94 <__malloc_lock>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__malloc_lock+0x8>)
 8006f96:	f7ff bfe1 	b.w	8006f5c <__retarget_lock_acquire_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	20001344 	.word	0x20001344

08006fa0 <__malloc_unlock>:
 8006fa0:	4801      	ldr	r0, [pc, #4]	; (8006fa8 <__malloc_unlock+0x8>)
 8006fa2:	f7ff bfdc 	b.w	8006f5e <__retarget_lock_release_recursive>
 8006fa6:	bf00      	nop
 8006fa8:	20001344 	.word	0x20001344

08006fac <_realloc_r>:
 8006fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	460e      	mov	r6, r1
 8006fb6:	b921      	cbnz	r1, 8006fc2 <_realloc_r+0x16>
 8006fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	f7ff bc59 	b.w	8006874 <_malloc_r>
 8006fc2:	b92a      	cbnz	r2, 8006fd0 <_realloc_r+0x24>
 8006fc4:	f7ff fbea 	bl	800679c <_free_r>
 8006fc8:	4625      	mov	r5, r4
 8006fca:	4628      	mov	r0, r5
 8006fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd0:	f000 f81b 	bl	800700a <_malloc_usable_size_r>
 8006fd4:	4284      	cmp	r4, r0
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	d802      	bhi.n	8006fe0 <_realloc_r+0x34>
 8006fda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fde:	d812      	bhi.n	8007006 <_realloc_r+0x5a>
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	f7ff fc46 	bl	8006874 <_malloc_r>
 8006fe8:	4605      	mov	r5, r0
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d0ed      	beq.n	8006fca <_realloc_r+0x1e>
 8006fee:	42bc      	cmp	r4, r7
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	bf28      	it	cs
 8006ff6:	463a      	movcs	r2, r7
 8006ff8:	f7ff fb9a 	bl	8006730 <memcpy>
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4640      	mov	r0, r8
 8007000:	f7ff fbcc 	bl	800679c <_free_r>
 8007004:	e7e1      	b.n	8006fca <_realloc_r+0x1e>
 8007006:	4635      	mov	r5, r6
 8007008:	e7df      	b.n	8006fca <_realloc_r+0x1e>

0800700a <_malloc_usable_size_r>:
 800700a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800700e:	1f18      	subs	r0, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	bfbc      	itt	lt
 8007014:	580b      	ldrlt	r3, [r1, r0]
 8007016:	18c0      	addlt	r0, r0, r3
 8007018:	4770      	bx	lr
	...

0800701c <_init>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	bf00      	nop
 8007020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007022:	bc08      	pop	{r3}
 8007024:	469e      	mov	lr, r3
 8007026:	4770      	bx	lr

08007028 <_fini>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	bf00      	nop
 800702c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702e:	bc08      	pop	{r3}
 8007030:	469e      	mov	lr, r3
 8007032:	4770      	bx	lr
