
BME280_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000812c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08008300  08008300  00018300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800871c  0800871c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800871c  0800871c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008724  08008724  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008724  08008724  00018724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008728  08008728  00018728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800872c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200001dc  08008908  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08008908  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd98  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba5  00000000  00000000  0002cfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002eb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  0002f688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223ac  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1ad  00000000  00000000  000524cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd060  00000000  00000000  00060679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d6d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd8  00000000  00000000  0012d72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080082e4 	.word	0x080082e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080082e4 	.word	0x080082e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9bf 	b.w	8001028 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b974 	b.w	8001028 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468e      	mov	lr, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14d      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4694      	mov	ip, r2
 8000d6a:	d969      	bls.n	8000e40 <__udivmoddi4+0xe8>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b152      	cbz	r2, 8000d88 <__udivmoddi4+0x30>
 8000d72:	fa01 f302 	lsl.w	r3, r1, r2
 8000d76:	f1c2 0120 	rsb	r1, r2, #32
 8000d7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d82:	ea41 0e03 	orr.w	lr, r1, r3
 8000d86:	4094      	lsls	r4, r2
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	0c21      	lsrs	r1, r4, #16
 8000d8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d92:	fa1f f78c 	uxth.w	r7, ip
 8000d96:	fb08 e316 	mls	r3, r8, r6, lr
 8000d9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9e:	fb06 f107 	mul.w	r1, r6, r7
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dae:	f080 811f 	bcs.w	8000ff0 <__udivmoddi4+0x298>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 811c 	bls.w	8000ff0 <__udivmoddi4+0x298>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb00 f707 	mul.w	r7, r0, r7
 8000dd0:	42a7      	cmp	r7, r4
 8000dd2:	d90a      	bls.n	8000dea <__udivmoddi4+0x92>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ddc:	f080 810a 	bcs.w	8000ff4 <__udivmoddi4+0x29c>
 8000de0:	42a7      	cmp	r7, r4
 8000de2:	f240 8107 	bls.w	8000ff4 <__udivmoddi4+0x29c>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dee:	1be4      	subs	r4, r4, r7
 8000df0:	2600      	movs	r6, #0
 8000df2:	b11d      	cbz	r5, 8000dfc <__udivmoddi4+0xa4>
 8000df4:	40d4      	lsrs	r4, r2
 8000df6:	2300      	movs	r3, #0
 8000df8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0xc2>
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	f000 80ef 	beq.w	8000fea <__udivmoddi4+0x292>
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e12:	4630      	mov	r0, r6
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	fab3 f683 	clz	r6, r3
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	d14a      	bne.n	8000eb8 <__udivmoddi4+0x160>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xd4>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 80f9 	bhi.w	800101e <__udivmoddi4+0x2c6>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	469e      	mov	lr, r3
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e0      	beq.n	8000dfc <__udivmoddi4+0xa4>
 8000e3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3e:	e7dd      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000e40:	b902      	cbnz	r2, 8000e44 <__udivmoddi4+0xec>
 8000e42:	deff      	udf	#255	; 0xff
 8000e44:	fab2 f282 	clz	r2, r2
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f040 8092 	bne.w	8000f72 <__udivmoddi4+0x21a>
 8000e4e:	eba1 010c 	sub.w	r1, r1, ip
 8000e52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e56:	fa1f fe8c 	uxth.w	lr, ip
 8000e5a:	2601      	movs	r6, #1
 8000e5c:	0c20      	lsrs	r0, r4, #16
 8000e5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e62:	fb07 1113 	mls	r1, r7, r3, r1
 8000e66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6a:	fb0e f003 	mul.w	r0, lr, r3
 8000e6e:	4288      	cmp	r0, r1
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x12c>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x12a>
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	f200 80cb 	bhi.w	8001018 <__udivmoddi4+0x2c0>
 8000e82:	4643      	mov	r3, r8
 8000e84:	1a09      	subs	r1, r1, r0
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e94:	fb0e fe00 	mul.w	lr, lr, r0
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x156>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ea4:	d202      	bcs.n	8000eac <__udivmoddi4+0x154>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	f200 80bb 	bhi.w	8001022 <__udivmoddi4+0x2ca>
 8000eac:	4608      	mov	r0, r1
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb6:	e79c      	b.n	8000df2 <__udivmoddi4+0x9a>
 8000eb8:	f1c6 0720 	rsb	r7, r6, #32
 8000ebc:	40b3      	lsls	r3, r6
 8000ebe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eca:	fa01 f306 	lsl.w	r3, r1, r6
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	40f9      	lsrs	r1, r7
 8000ed2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ede:	0c20      	lsrs	r0, r4, #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eec:	fb08 f00e 	mul.w	r0, r8, lr
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef6:	d90b      	bls.n	8000f10 <__udivmoddi4+0x1b8>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f00:	f080 8088 	bcs.w	8001014 <__udivmoddi4+0x2bc>
 8000f04:	4288      	cmp	r0, r1
 8000f06:	f240 8085 	bls.w	8001014 <__udivmoddi4+0x2bc>
 8000f0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1a09      	subs	r1, r1, r0
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f18:	fb09 1110 	mls	r1, r9, r0, r1
 8000f1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f24:	458e      	cmp	lr, r1
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x1e2>
 8000f28:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f30:	d26c      	bcs.n	800100c <__udivmoddi4+0x2b4>
 8000f32:	458e      	cmp	lr, r1
 8000f34:	d96a      	bls.n	800100c <__udivmoddi4+0x2b4>
 8000f36:	3802      	subs	r0, #2
 8000f38:	4461      	add	r1, ip
 8000f3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f42:	eba1 010e 	sub.w	r1, r1, lr
 8000f46:	42a1      	cmp	r1, r4
 8000f48:	46c8      	mov	r8, r9
 8000f4a:	46a6      	mov	lr, r4
 8000f4c:	d356      	bcc.n	8000ffc <__udivmoddi4+0x2a4>
 8000f4e:	d053      	beq.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f50:	b15d      	cbz	r5, 8000f6a <__udivmoddi4+0x212>
 8000f52:	ebb3 0208 	subs.w	r2, r3, r8
 8000f56:	eb61 010e 	sbc.w	r1, r1, lr
 8000f5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f62:	40f1      	lsrs	r1, r6
 8000f64:	431f      	orrs	r7, r3
 8000f66:	e9c5 7100 	strd	r7, r1, [r5]
 8000f6a:	2600      	movs	r6, #0
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	f1c2 0320 	rsb	r3, r2, #32
 8000f76:	40d8      	lsrs	r0, r3
 8000f78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f80:	4091      	lsls	r1, r2
 8000f82:	4301      	orrs	r1, r0
 8000f84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f88:	fa1f fe8c 	uxth.w	lr, ip
 8000f8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f90:	fb07 3610 	mls	r6, r7, r0, r3
 8000f94:	0c0b      	lsrs	r3, r1, #16
 8000f96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9e:	429e      	cmp	r6, r3
 8000fa0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x260>
 8000fa6:	eb1c 0303 	adds.w	r3, ip, r3
 8000faa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fae:	d22f      	bcs.n	8001010 <__udivmoddi4+0x2b8>
 8000fb0:	429e      	cmp	r6, r3
 8000fb2:	d92d      	bls.n	8001010 <__udivmoddi4+0x2b8>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	4463      	add	r3, ip
 8000fb8:	1b9b      	subs	r3, r3, r6
 8000fba:	b289      	uxth	r1, r1
 8000fbc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fc0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fcc:	428b      	cmp	r3, r1
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x28a>
 8000fd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fd8:	d216      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d914      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fde:	3e02      	subs	r6, #2
 8000fe0:	4461      	add	r1, ip
 8000fe2:	1ac9      	subs	r1, r1, r3
 8000fe4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe8:	e738      	b.n	8000e5c <__udivmoddi4+0x104>
 8000fea:	462e      	mov	r6, r5
 8000fec:	4628      	mov	r0, r5
 8000fee:	e705      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	e6e3      	b.n	8000dbc <__udivmoddi4+0x64>
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	e6f8      	b.n	8000dea <__udivmoddi4+0x92>
 8000ff8:	454b      	cmp	r3, r9
 8000ffa:	d2a9      	bcs.n	8000f50 <__udivmoddi4+0x1f8>
 8000ffc:	ebb9 0802 	subs.w	r8, r9, r2
 8001000:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001004:	3801      	subs	r0, #1
 8001006:	e7a3      	b.n	8000f50 <__udivmoddi4+0x1f8>
 8001008:	4646      	mov	r6, r8
 800100a:	e7ea      	b.n	8000fe2 <__udivmoddi4+0x28a>
 800100c:	4620      	mov	r0, r4
 800100e:	e794      	b.n	8000f3a <__udivmoddi4+0x1e2>
 8001010:	4640      	mov	r0, r8
 8001012:	e7d1      	b.n	8000fb8 <__udivmoddi4+0x260>
 8001014:	46d0      	mov	r8, sl
 8001016:	e77b      	b.n	8000f10 <__udivmoddi4+0x1b8>
 8001018:	3b02      	subs	r3, #2
 800101a:	4461      	add	r1, ip
 800101c:	e732      	b.n	8000e84 <__udivmoddi4+0x12c>
 800101e:	4630      	mov	r0, r6
 8001020:	e709      	b.n	8000e36 <__udivmoddi4+0xde>
 8001022:	4464      	add	r4, ip
 8001024:	3802      	subs	r0, #2
 8001026:	e742      	b.n	8000eae <__udivmoddi4+0x156>

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8001034:	2305      	movs	r3, #5
 8001036:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f001 fac9 	bl	80025d4 <null_ptr_check>
 8001042:	4603      	mov	r3, r0
 8001044:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d133      	bne.n	80010b6 <bme280_init+0x8a>
		while (try_count) {
 800104e:	e028      	b.n	80010a2 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001050:	f107 010d 	add.w	r1, r7, #13
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	20d0      	movs	r0, #208	; 0xd0
 800105a:	f000 f832 	bl	80010c2 <bme280_get_regs>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d114      	bne.n	8001094 <bme280_init+0x68>
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	2b60      	cmp	r3, #96	; 0x60
 800106e:	d111      	bne.n	8001094 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8001070:	7b7a      	ldrb	r2, [r7, #13]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f978 	bl	800136c <bme280_soft_reset>
 800107c:	4603      	mov	r3, r0
 800107e:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8001080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d110      	bne.n	80010aa <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f001 f919 	bl	80022c0 <get_calib_data>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001092:	e00a      	b.n	80010aa <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2001      	movs	r0, #1
 800109a:	4798      	blx	r3
			--try_count;
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	3b01      	subs	r3, #1
 80010a0:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1d3      	bne.n	8001050 <bme280_init+0x24>
 80010a8:	e000      	b.n	80010ac <bme280_init+0x80>
				break;
 80010aa:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 80010b2:	23fe      	movs	r3, #254	; 0xfe
 80010b4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80010c2:	b590      	push	{r4, r7, lr}
 80010c4:	b087      	sub	sp, #28
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	4613      	mov	r3, r2
 80010d2:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f001 fa7d 	bl	80025d4 <null_ptr_check>
 80010da:	4603      	mov	r3, r0
 80010dc:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80010de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d117      	bne.n	8001116 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	789b      	ldrb	r3, [r3, #2]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d003      	beq.n	80010f6 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f4:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685c      	ldr	r4, [r3, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7858      	ldrb	r0, [r3, #1]
 80010fe:	89bb      	ldrh	r3, [r7, #12]
 8001100:	7bf9      	ldrb	r1, [r7, #15]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	47a0      	blx	r4
 8001106:	4603      	mov	r3, r0
 8001108:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800110a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8001112:	23fc      	movs	r3, #252	; 0xfc
 8001114:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001116:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800111a:	4618      	mov	r0, r3
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}

08001122 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8001122:	b590      	push	{r4, r7, lr}
 8001124:	b08d      	sub	sp, #52	; 0x34
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4613      	mov	r3, r2
 8001130:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b0a      	cmp	r3, #10
 8001136:	d901      	bls.n	800113c <bme280_set_regs+0x1a>
		len = 10;
 8001138:	230a      	movs	r3, #10
 800113a:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800113c:	6838      	ldr	r0, [r7, #0]
 800113e:	f001 fa49 	bl	80025d4 <null_ptr_check>
 8001142:	4603      	mov	r3, r0
 8001144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8001148:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800114c:	2b00      	cmp	r3, #0
 800114e:	d156      	bne.n	80011fe <bme280_set_regs+0xdc>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d053      	beq.n	80011fe <bme280_set_regs+0xdc>
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d050      	beq.n	80011fe <bme280_set_regs+0xdc>
		if (len != 0) {
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d049      	beq.n	80011f6 <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	789b      	ldrb	r3, [r3, #2]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d01a      	beq.n	80011a6 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001170:	2300      	movs	r3, #0
 8001172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001176:	e011      	b.n	800119c <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001178:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001186:	68f9      	ldr	r1, [r7, #12]
 8001188:	440b      	add	r3, r1
 800118a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001192:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001196:	3301      	adds	r3, #1
 8001198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800119c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d3e8      	bcc.n	8001178 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d90d      	bls.n	80011c8 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f107 0114 	add.w	r1, r7, #20
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f001 f8c8 	bl	800234a <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3b01      	subs	r3, #1
 80011c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80011c6:	e001      	b.n	80011cc <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689c      	ldr	r4, [r3, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	7858      	ldrb	r0, [r3, #1]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	7819      	ldrb	r1, [r3, #0]
 80011d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011da:	f107 0214 	add.w	r2, r7, #20
 80011de:	47a0      	blx	r4
 80011e0:	4603      	mov	r3, r0
 80011e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80011e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 80011ee:	23fc      	movs	r3, #252	; 0xfc
 80011f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 80011f4:	e007      	b.n	8001206 <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 80011f6:	23fd      	movs	r3, #253	; 0xfd
 80011f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 80011fc:	e003      	b.n	8001206 <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80011fe:	23ff      	movs	r3, #255	; 0xff
 8001200:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001204:	e000      	b.n	8001208 <bme280_set_regs+0xe6>
		if (len != 0) {
 8001206:	bf00      	nop
	}


	return rslt;
 8001208:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800120c:	4618      	mov	r0, r3
 800120e:	3734      	adds	r7, #52	; 0x34
 8001210:	46bd      	mov	sp, r7
 8001212:	bd90      	pop	{r4, r7, pc}

08001214 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001220:	6838      	ldr	r0, [r7, #0]
 8001222:	f001 f9d7 	bl	80025d4 <null_ptr_check>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d13f      	bne.n	80012b2 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001232:	f107 030e 	add.w	r3, r7, #14
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f874 	bl	8001326 <bme280_get_sensor_mode>
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d107      	bne.n	800125a <bme280_set_sensor_settings+0x46>
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001250:	6838      	ldr	r0, [r7, #0]
 8001252:	f000 fb36 	bl	80018c2 <put_device_to_sleep>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d127      	bne.n	80012b2 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4619      	mov	r1, r3
 8001266:	2007      	movs	r0, #7
 8001268:	f001 f998 	bl	800259c <are_settings_changed>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d009      	beq.n	8001286 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f972 	bl	8001566 <set_osr_settings>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d111      	bne.n	80012b2 <bme280_set_sensor_settings+0x9e>
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	4619      	mov	r1, r3
 8001292:	2018      	movs	r0, #24
 8001294:	f001 f982 	bl	800259c <are_settings_changed>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d009      	beq.n	80012b2 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f9f9 	bl	80016a0 <set_filter_standby_settings>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	6039      	str	r1, [r7, #0]
 80012c8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f001 f982 	bl	80025d4 <null_ptr_check>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80012d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d11e      	bne.n	800131a <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80012dc:	f107 030e 	add.w	r3, r7, #14
 80012e0:	6839      	ldr	r1, [r7, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f81f 	bl	8001326 <bme280_get_sensor_mode>
 80012e8:	4603      	mov	r3, r0
 80012ea:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80012ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d107      	bne.n	8001304 <bme280_set_sensor_mode+0x46>
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f000 fae1 	bl	80018c2 <put_device_to_sleep>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d106      	bne.n	800131a <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	6839      	ldr	r1, [r7, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f000 faa3 	bl	800185c <write_power_mode>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001330:	6838      	ldr	r0, [r7, #0]
 8001332:	f001 f94f 	bl	80025d4 <null_ptr_check>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10e      	bne.n	8001360 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2201      	movs	r2, #1
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	20f4      	movs	r0, #244	; 0xf4
 800134a:	f7ff feba 	bl	80010c2 <bme280_get_regs>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	b2da      	uxtb	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001360:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001374:	23e0      	movs	r3, #224	; 0xe0
 8001376:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001378:	23b6      	movs	r3, #182	; 0xb6
 800137a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f001 f929 	bl	80025d4 <null_ptr_check>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10d      	bne.n	80013aa <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800138e:	f107 010d 	add.w	r1, r7, #13
 8001392:	f107 000e 	add.w	r0, r7, #14
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f7ff fec2 	bl	8001122 <bme280_set_regs>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2002      	movs	r0, #2
 80013a8:	4798      	blx	r3
	}

	return rslt;
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b08a      	sub	sp, #40	; 0x28
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f001 f8fb 	bl	80025d4 <null_ptr_check>
 80013de:	4603      	mov	r3, r0
 80013e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80013e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d124      	bne.n	8001436 <bme280_get_sensor_data+0x80>
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d021      	beq.n	8001436 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80013f2:	f107 011c 	add.w	r1, r7, #28
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2208      	movs	r2, #8
 80013fa:	20f7      	movs	r0, #247	; 0xf7
 80013fc:	f7ff fe61 	bl	80010c2 <bme280_get_regs>
 8001400:	4603      	mov	r3, r0
 8001402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8001406:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800140a:	2b00      	cmp	r3, #0
 800140c:	d116      	bne.n	800143c <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800140e:	f107 0210 	add.w	r2, r7, #16
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f815 	bl	8001448 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3310      	adds	r3, #16
 8001422:	f107 0110 	add.w	r1, r7, #16
 8001426:	7bf8      	ldrb	r0, [r7, #15]
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	f000 f853 	bl	80014d4 <bme280_compensate_data>
 800142e:	4603      	mov	r3, r0
 8001430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001434:	e002      	b.n	800143c <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001436:	23ff      	movs	r3, #255	; 0xff
 8001438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 800143c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001440:	4618      	mov	r0, r3
 8001442:	3728      	adds	r7, #40	; 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	031b      	lsls	r3, r3, #12
 8001458:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3301      	adds	r3, #1
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3302      	adds	r3, #2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	b2db      	uxtb	r3, r3
 800146e:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	431a      	orrs	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	431a      	orrs	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3303      	adds	r3, #3
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	031b      	lsls	r3, r3, #12
 8001486:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3304      	adds	r3, #4
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3305      	adds	r3, #5
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	b2db      	uxtb	r3, r3
 800149c:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3306      	adds	r3, #6
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3307      	adds	r3, #7
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	431a      	orrs	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	609a      	str	r2, [r3, #8]
}
 80014c8:	bf00      	nop
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d033      	beq.n	8001556 <bme280_compensate_data+0x82>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d030      	beq.n	8001556 <bme280_compensate_data+0x82>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d02d      	beq.n	8001556 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001516:	6839      	ldr	r1, [r7, #0]
 8001518:	68b8      	ldr	r0, [r7, #8]
 800151a:	f000 fa1f 	bl	800195c <compensate_temperature>
 800151e:	4602      	mov	r2, r0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800152e:	6839      	ldr	r1, [r7, #0]
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f000 fa75 	bl	8001a20 <compensate_pressure>
 8001536:	4602      	mov	r2, r0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	68b8      	ldr	r0, [r7, #8]
 800154a:	f000 fe0d 	bl	8002168 <compensate_humidity>
 800154e:	4602      	mov	r2, r0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8001554:	e001      	b.n	800155a <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001556:	23ff      	movs	r3, #255	; 0xff
 8001558:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800155a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001574:	2301      	movs	r3, #1
 8001576:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	f000 f815 	bl	80015b4 <set_osr_humidity_settings>
 800158a:	4603      	mov	r3, r0
 800158c:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f842 	bl	8001628 <set_osr_press_temp_settings>
 80015a4:	4603      	mov	r3, r0
 80015a6:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80015a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80015be:	23f2      	movs	r3, #242	; 0xf2
 80015c0:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	789b      	ldrb	r3, [r3, #2]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80015ce:	f107 010e 	add.w	r1, r7, #14
 80015d2:	f107 000c 	add.w	r0, r7, #12
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	f7ff fda2 	bl	8001122 <bme280_set_regs>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d118      	bne.n	800161c <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80015ea:	23f4      	movs	r3, #244	; 0xf4
 80015ec:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80015ee:	7b38      	ldrb	r0, [r7, #12]
 80015f0:	f107 010d 	add.w	r1, r7, #13
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f7ff fd63 	bl	80010c2 <bme280_get_regs>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d109      	bne.n	800161c <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001608:	f107 010d 	add.w	r1, r7, #13
 800160c:	f107 000c 	add.w	r0, r7, #12
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	2201      	movs	r2, #1
 8001614:	f7ff fd85 	bl	8001122 <bme280_set_regs>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800161c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001636:	23f4      	movs	r3, #244	; 0xf4
 8001638:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800163a:	7db8      	ldrb	r0, [r7, #22]
 800163c:	f107 0115 	add.w	r1, r7, #21
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f7ff fd3d 	bl	80010c2 <bme280_get_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d11f      	bne.n	8001694 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800165e:	f107 0315 	add.w	r3, r7, #21
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f88e 	bl	8001786 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8001674:	f107 0315 	add.w	r3, r7, #21
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f8a0 	bl	80017c0 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001680:	f107 0115 	add.w	r1, r7, #21
 8001684:	f107 0016 	add.w	r0, r7, #22
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f7ff fd49 	bl	8001122 <bme280_set_regs>
 8001690:	4603      	mov	r3, r0
 8001692:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001694:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80016ae:	23f5      	movs	r3, #245	; 0xf5
 80016b0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80016b2:	7db8      	ldrb	r0, [r7, #22]
 80016b4:	f107 0115 	add.w	r1, r7, #21
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f7ff fd01 	bl	80010c2 <bme280_get_regs>
 80016c0:	4603      	mov	r3, r0
 80016c2:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80016c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d11f      	bne.n	800170c <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 80016d6:	f107 0315 	add.w	r3, r7, #21
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f81b 	bl	8001718 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80016ec:	f107 0315 	add.w	r3, r7, #21
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f82d 	bl	8001752 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80016f8:	f107 0115 	add.w	r1, r7, #21
 80016fc:	f107 0016 	add.w	r0, r7, #22
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f7ff fd0d 	bl	8001122 <bme280_set_regs>
 8001708:	4603      	mov	r3, r0
 800170a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800170c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b25b      	sxtb	r3, r3
 8001728:	f023 031c 	bic.w	r3, r3, #28
 800172c:	b25a      	sxtb	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	78db      	ldrb	r3, [r3, #3]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	f003 031c 	and.w	r3, r3, #28
 800173a:	b25b      	sxtb	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b25b      	sxtb	r3, r3
 8001740:	b2da      	uxtb	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	701a      	strb	r2, [r3, #0]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b25b      	sxtb	r3, r3
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	b25a      	sxtb	r2, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	791b      	ldrb	r3, [r3, #4]
 800176c:	015b      	lsls	r3, r3, #5
 800176e:	b25b      	sxtb	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b25b      	sxtb	r3, r3
 8001774:	b2da      	uxtb	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	701a      	strb	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b25b      	sxtb	r3, r3
 8001796:	f023 031c 	bic.w	r3, r3, #28
 800179a:	b25a      	sxtb	r2, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	f003 031c 	and.w	r3, r3, #28
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	701a      	strb	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	b25a      	sxtb	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	015b      	lsls	r3, r3, #5
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	701a      	strb	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	b2da      	uxtb	r2, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3302      	adds	r3, #2
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	109b      	asrs	r3, r3, #2
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	b2da      	uxtb	r2, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3302      	adds	r3, #2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	b2da      	uxtb	r2, r3
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3303      	adds	r3, #3
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	109b      	asrs	r3, r3, #2
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	b2da      	uxtb	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3303      	adds	r3, #3
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	095b      	lsrs	r3, r3, #5
 800184a:	b2da      	uxtb	r2, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	711a      	strb	r2, [r3, #4]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001868:	23f4      	movs	r3, #244	; 0xf4
 800186a:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 800186c:	7bb8      	ldrb	r0, [r7, #14]
 800186e:	f107 010d 	add.w	r1, r7, #13
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2201      	movs	r2, #1
 8001876:	f7ff fc24 	bl	80010c2 <bme280_get_regs>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d117      	bne.n	80018b6 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001886:	7b7b      	ldrb	r3, [r7, #13]
 8001888:	b25b      	sxtb	r3, r3
 800188a:	f023 0303 	bic.w	r3, r3, #3
 800188e:	b25a      	sxtb	r2, r3
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	b25b      	sxtb	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b25b      	sxtb	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80018a2:	f107 010d 	add.w	r1, r7, #13
 80018a6:	f107 000e 	add.w	r0, r7, #14
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f7ff fc38 	bl	8001122 <bme280_set_regs>
 80018b2:	4603      	mov	r3, r0
 80018b4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80018ca:	f107 0110 	add.w	r1, r7, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2204      	movs	r2, #4
 80018d2:	20f2      	movs	r0, #242	; 0xf2
 80018d4:	f7ff fbf5 	bl	80010c2 <bme280_get_regs>
 80018d8:	4603      	mov	r3, r0
 80018da:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 80018dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d118      	bne.n	8001916 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80018e4:	f107 0208 	add.w	r2, r7, #8
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff80 	bl	80017f4 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fd39 	bl	800136c <bme280_soft_reset>
 80018fa:	4603      	mov	r3, r0
 80018fc:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80018fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d107      	bne.n	8001916 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f808 	bl	8001922 <reload_device_settings>
 8001912:	4603      	mov	r3, r0
 8001914:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	201f      	movs	r0, #31
 8001932:	f7ff fe18 	bl	8001566 <set_osr_settings>
 8001936:	4603      	mov	r3, r0
 8001938:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	201f      	movs	r0, #31
 8001948:	f7ff feaa 	bl	80016a0 <set_filter_standby_settings>
 800194c:	4603      	mov	r3, r0
 800194e:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <compensate_temperature+0xc0>)
 8001968:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 800196a:	f242 1334 	movw	r3, #8500	; 0x2134
 800196e:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	8812      	ldrh	r2, [r2, #0]
 800197a:	0052      	lsls	r2, r2, #1
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001986:	461a      	mov	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	fb02 f303 	mul.w	r3, r2, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	da01      	bge.n	8001996 <compensate_temperature+0x3a>
 8001992:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001996:	12db      	asrs	r3, r3, #11
 8001998:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	8812      	ldrh	r2, [r2, #0]
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	fb03 f303 	mul.w	r3, r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	da01      	bge.n	80019b6 <compensate_temperature+0x5a>
 80019b2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80019b6:	131b      	asrs	r3, r3, #12
 80019b8:	461a      	mov	r2, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da02      	bge.n	80019ce <compensate_temperature+0x72>
 80019c8:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80019cc:	333f      	adds	r3, #63	; 0x3f
 80019ce:	139b      	asrs	r3, r3, #14
 80019d0:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	441a      	add	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3380      	adds	r3, #128	; 0x80
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da00      	bge.n	80019ee <compensate_temperature+0x92>
 80019ec:	33ff      	adds	r3, #255	; 0xff
 80019ee:	121b      	asrs	r3, r3, #8
 80019f0:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	da02      	bge.n	8001a00 <compensate_temperature+0xa4>
		temperature = temperature_min;
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	e005      	b.n	8001a0c <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dd01      	ble.n	8001a0c <compensate_temperature+0xb0>
		temperature = temperature_max;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001a0c:	69fb      	ldr	r3, [r7, #28]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	fffff060 	.word	0xfffff060

08001a20 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a24:	b0ea      	sub	sp, #424	; 0x1a8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8001a2c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001a30:	4bbf      	ldr	r3, [pc, #764]	; (8001d30 <compensate_pressure+0x310>)
 8001a32:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	uint32_t pressure_max = 11000000;
 8001a36:	4bbf      	ldr	r3, [pc, #764]	; (8001d34 <compensate_pressure+0x314>)
 8001a38:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001a3c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	17da      	asrs	r2, r3, #31
 8001a44:	4698      	mov	r8, r3
 8001a46:	4691      	mov	r9, r2
 8001a48:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 8001a4c:	f149 3bff 	adc.w	fp, r9, #4294967295	; 0xffffffff
 8001a50:	e9c7 ab64 	strd	sl, fp, [r7, #400]	; 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001a54:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a58:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a5c:	fb03 f102 	mul.w	r1, r3, r2
 8001a60:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a64:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a68:	fb02 f303 	mul.w	r3, r2, r3
 8001a6c:	18ca      	adds	r2, r1, r3
 8001a6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a72:	fba3 4503 	umull	r4, r5, r3, r3
 8001a76:	1953      	adds	r3, r2, r5
 8001a78:	461d      	mov	r5, r3
 8001a7a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a7e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	17da      	asrs	r2, r3, #31
 8001a86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a8a:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001a8e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001a92:	4603      	mov	r3, r0
 8001a94:	fb03 f205 	mul.w	r2, r3, r5
 8001a98:	460b      	mov	r3, r1
 8001a9a:	fb04 f303 	mul.w	r3, r4, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	fba4 1202 	umull	r1, r2, r4, r2
 8001aa6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8001aaa:	460a      	mov	r2, r1
 8001aac:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8001ab0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001aba:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8001abe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8001ac2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001ac6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001aca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	17da      	asrs	r2, r3, #31
 8001ad2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001ad6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001ada:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ade:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8001ae2:	462a      	mov	r2, r5
 8001ae4:	fb02 f203 	mul.w	r2, r2, r3
 8001ae8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001aec:	4621      	mov	r1, r4
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	441a      	add	r2, r3
 8001af4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001af8:	4621      	mov	r1, r4
 8001afa:	fba3 1301 	umull	r1, r3, r3, r1
 8001afe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001b02:	460b      	mov	r3, r1
 8001b04:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001b08:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001b0c:	18d3      	adds	r3, r2, r3
 8001b0e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001b12:	f04f 0000 	mov.w	r0, #0
 8001b16:	f04f 0100 	mov.w	r1, #0
 8001b1a:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8001b1e:	462b      	mov	r3, r5
 8001b20:	0459      	lsls	r1, r3, #17
 8001b22:	4623      	mov	r3, r4
 8001b24:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001b28:	4623      	mov	r3, r4
 8001b2a:	0458      	lsls	r0, r3, #17
 8001b2c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001b30:	1814      	adds	r4, r2, r0
 8001b32:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8001b36:	414b      	adcs	r3, r1
 8001b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001b3c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8001b40:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001b44:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001b48:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	17da      	asrs	r2, r3, #31
 8001b50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001b54:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8001b58:	f04f 0000 	mov.w	r0, #0
 8001b5c:	f04f 0100 	mov.w	r1, #0
 8001b60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b64:	00d9      	lsls	r1, r3, #3
 8001b66:	2000      	movs	r0, #0
 8001b68:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001b6c:	1814      	adds	r4, r2, r0
 8001b6e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8001b72:	414b      	adcs	r3, r1
 8001b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001b78:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8001b7c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001b80:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b84:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b88:	fb03 f102 	mul.w	r1, r3, r2
 8001b8c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b90:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	18ca      	adds	r2, r1, r3
 8001b9a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b9e:	fba3 1303 	umull	r1, r3, r3, r3
 8001ba2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001bac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001bb0:	18d3      	adds	r3, r2, r3
 8001bb2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001bb6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001bba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	17da      	asrs	r2, r3, #31
 8001bc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001bc6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001bca:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001bce:	462b      	mov	r3, r5
 8001bd0:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 8001bd4:	4642      	mov	r2, r8
 8001bd6:	fb02 f203 	mul.w	r2, r2, r3
 8001bda:	464b      	mov	r3, r9
 8001bdc:	4621      	mov	r1, r4
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	4622      	mov	r2, r4
 8001be6:	4641      	mov	r1, r8
 8001be8:	fba2 1201 	umull	r1, r2, r2, r1
 8001bec:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 8001bf6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001c00:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	da09      	bge.n	8001c1c <compensate_pressure+0x1fc>
 8001c08:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001c0c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001c10:	f143 0300 	adc.w	r3, r3, #0
 8001c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001c18:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001c1c:	f04f 0000 	mov.w	r0, #0
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	0a10      	lsrs	r0, r2, #8
 8001c26:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001c2a:	1219      	asrs	r1, r3, #8
 8001c2c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001c30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	17da      	asrs	r2, r3, #31
 8001c38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001c3c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001c40:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c44:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001c48:	464a      	mov	r2, r9
 8001c4a:	fb02 f203 	mul.w	r2, r2, r3
 8001c4e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c52:	4644      	mov	r4, r8
 8001c54:	fb04 f303 	mul.w	r3, r4, r3
 8001c58:	441a      	add	r2, r3
 8001c5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c5e:	4644      	mov	r4, r8
 8001c60:	fba3 4304 	umull	r4, r3, r3, r4
 8001c64:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c68:	4623      	mov	r3, r4
 8001c6a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c6e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c72:	18d3      	adds	r3, r2, r3
 8001c74:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8001c84:	464c      	mov	r4, r9
 8001c86:	0323      	lsls	r3, r4, #12
 8001c88:	4644      	mov	r4, r8
 8001c8a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001c8e:	4644      	mov	r4, r8
 8001c90:	0322      	lsls	r2, r4, #12
 8001c92:	1884      	adds	r4, r0, r2
 8001c94:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001c98:	eb41 0303 	adc.w	r3, r1, r3
 8001c9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ca0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001ca4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb0:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001cb4:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8001cb8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001cbc:	1884      	adds	r4, r0, r2
 8001cbe:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8001cc2:	eb41 0303 	adc.w	r3, r1, r3
 8001cc6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001cca:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001cce:	88db      	ldrh	r3, [r3, #6]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001cd8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001cdc:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001ce0:	462b      	mov	r3, r5
 8001ce2:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001ce6:	4642      	mov	r2, r8
 8001ce8:	fb02 f203 	mul.w	r2, r2, r3
 8001cec:	464b      	mov	r3, r9
 8001cee:	4621      	mov	r1, r4
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4622      	mov	r2, r4
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	fba2 1201 	umull	r1, r2, r2, r1
 8001cfe:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001d02:	460a      	mov	r2, r1
 8001d04:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d08:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d12:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	da0e      	bge.n	8001d38 <compensate_pressure+0x318>
 8001d1a:	1e51      	subs	r1, r2, #1
 8001d1c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001d20:	f143 0301 	adc.w	r3, r3, #1
 8001d24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001d28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d2c:	e004      	b.n	8001d38 <compensate_pressure+0x318>
 8001d2e:	bf00      	nop
 8001d30:	002dc6c0 	.word	0x002dc6c0
 8001d34:	00a7d8c0 	.word	0x00a7d8c0
 8001d38:	f04f 0000 	mov.w	r0, #0
 8001d3c:	f04f 0100 	mov.w	r1, #0
 8001d40:	1058      	asrs	r0, r3, #1
 8001d42:	17d9      	asrs	r1, r3, #31
 8001d44:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001d48:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	f000 81fc 	beq.w	800214a <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001d52:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d62:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d66:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8001d6a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001d6e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001d72:	f04f 0000 	mov.w	r0, #0
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	07d9      	lsls	r1, r3, #31
 8001d7c:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001d80:	07d0      	lsls	r0, r2, #31
 8001d82:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001d86:	1a84      	subs	r4, r0, r2
 8001d88:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8001d8c:	eb61 0303 	sbc.w	r3, r1, r3
 8001d90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001d94:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001d98:	4622      	mov	r2, r4
 8001d9a:	462b      	mov	r3, r5
 8001d9c:	1891      	adds	r1, r2, r2
 8001d9e:	67b9      	str	r1, [r7, #120]	; 0x78
 8001da0:	415b      	adcs	r3, r3
 8001da2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001da4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001da8:	4621      	mov	r1, r4
 8001daa:	1851      	adds	r1, r2, r1
 8001dac:	6739      	str	r1, [r7, #112]	; 0x70
 8001dae:	4629      	mov	r1, r5
 8001db0:	414b      	adcs	r3, r1
 8001db2:	677b      	str	r3, [r7, #116]	; 0x74
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001dc0:	4649      	mov	r1, r9
 8001dc2:	018b      	lsls	r3, r1, #6
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dca:	4641      	mov	r1, r8
 8001dcc:	018a      	lsls	r2, r1, #6
 8001dce:	4641      	mov	r1, r8
 8001dd0:	1889      	adds	r1, r1, r2
 8001dd2:	66b9      	str	r1, [r7, #104]	; 0x68
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	eb43 0101 	adc.w	r1, r3, r1
 8001dda:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8001de8:	4649      	mov	r1, r9
 8001dea:	008b      	lsls	r3, r1, #2
 8001dec:	4641      	mov	r1, r8
 8001dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001df2:	4641      	mov	r1, r8
 8001df4:	008a      	lsls	r2, r1, #2
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	189b      	adds	r3, r3, r2
 8001e00:	663b      	str	r3, [r7, #96]	; 0x60
 8001e02:	460b      	mov	r3, r1
 8001e04:	462a      	mov	r2, r5
 8001e06:	eb42 0303 	adc.w	r3, r2, r3
 8001e0a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001e18:	4649      	mov	r1, r9
 8001e1a:	008b      	lsls	r3, r1, #2
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e22:	4641      	mov	r1, r8
 8001e24:	008a      	lsls	r2, r1, #2
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4622      	mov	r2, r4
 8001e2e:	189b      	adds	r3, r3, r2
 8001e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e34:	462b      	mov	r3, r5
 8001e36:	460a      	mov	r2, r1
 8001e38:	eb42 0303 	adc.w	r3, r2, r3
 8001e3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e40:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001e44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e48:	f7fe ff1e 	bl	8000c88 <__aeabi_ldivmod>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001e54:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001e58:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	17da      	asrs	r2, r3, #31
 8001e60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e64:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e68:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da08      	bge.n	8001e82 <compensate_pressure+0x462>
 8001e70:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001e74:	1851      	adds	r1, r2, r1
 8001e76:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e78:	f143 0300 	adc.w	r3, r3, #0
 8001e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e82:	f04f 0000 	mov.w	r0, #0
 8001e86:	f04f 0100 	mov.w	r1, #0
 8001e8a:	0b50      	lsrs	r0, r2, #13
 8001e8c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e90:	1359      	asrs	r1, r3, #13
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	fb02 f001 	mul.w	r0, r2, r1
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	fb01 f103 	mul.w	r1, r1, r3
 8001ea6:	4401      	add	r1, r0
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	fba0 2302 	umull	r2, r3, r0, r2
 8001eae:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001eb8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001ebc:	18cb      	adds	r3, r1, r3
 8001ebe:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001ec2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	da08      	bge.n	8001edc <compensate_pressure+0x4bc>
 8001eca:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001ece:	1851      	adds	r1, r2, r1
 8001ed0:	6539      	str	r1, [r7, #80]	; 0x50
 8001ed2:	f143 0300 	adc.w	r3, r3, #0
 8001ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8001ed8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001edc:	f04f 0000 	mov.w	r0, #0
 8001ee0:	f04f 0100 	mov.w	r1, #0
 8001ee4:	0b50      	lsrs	r0, r2, #13
 8001ee6:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001eea:	1359      	asrs	r1, r3, #13
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	fb02 f001 	mul.w	r0, r2, r1
 8001efa:	4621      	mov	r1, r4
 8001efc:	fb01 f103 	mul.w	r1, r1, r3
 8001f00:	4401      	add	r1, r0
 8001f02:	4620      	mov	r0, r4
 8001f04:	fba0 2302 	umull	r2, r3, r0, r2
 8001f08:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001f12:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001f16:	18cb      	adds	r3, r1, r3
 8001f18:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001f1c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	da08      	bge.n	8001f36 <compensate_pressure+0x516>
 8001f24:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001f28:	1851      	adds	r1, r2, r1
 8001f2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f2c:	f143 0300 	adc.w	r3, r3, #0
 8001f30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f36:	f04f 0000 	mov.w	r0, #0
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	0e50      	lsrs	r0, r2, #25
 8001f40:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001f44:	1659      	asrs	r1, r3, #25
 8001f46:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001f4a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001f4e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	17da      	asrs	r2, r3, #31
 8001f56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f5a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f5e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001f62:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001f66:	462a      	mov	r2, r5
 8001f68:	fb02 f203 	mul.w	r2, r2, r3
 8001f6c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001f70:	4621      	mov	r1, r4
 8001f72:	fb01 f303 	mul.w	r3, r1, r3
 8001f76:	441a      	add	r2, r3
 8001f78:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	fba3 1301 	umull	r1, r3, r3, r1
 8001f82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001f86:	460b      	mov	r3, r1
 8001f88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001f8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001f90:	18d3      	adds	r3, r2, r3
 8001f92:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001f96:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da07      	bge.n	8001fae <compensate_pressure+0x58e>
 8001f9e:	4971      	ldr	r1, [pc, #452]	; (8002164 <compensate_pressure+0x744>)
 8001fa0:	1851      	adds	r1, r2, r1
 8001fa2:	6439      	str	r1, [r7, #64]	; 0x40
 8001fa4:	f143 0300 	adc.w	r3, r3, #0
 8001fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8001faa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	0cd0      	lsrs	r0, r2, #19
 8001fb8:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001fbc:	14d9      	asrs	r1, r3, #19
 8001fbe:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001fc2:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001fc6:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001fca:	1884      	adds	r4, r0, r2
 8001fcc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8001fd0:	eb41 0303 	adc.w	r3, r1, r3
 8001fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001fd8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001fdc:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	1889      	adds	r1, r1, r2
 8001fe4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001fe8:	4629      	mov	r1, r5
 8001fea:	eb43 0101 	adc.w	r1, r3, r1
 8001fee:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001ff2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da07      	bge.n	800200a <compensate_pressure+0x5ea>
 8001ffa:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001ffe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002000:	f143 0300 	adc.w	r3, r3, #0
 8002004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002006:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	f04f 0100 	mov.w	r1, #0
 8002012:	0a10      	lsrs	r0, r2, #8
 8002014:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002018:	1219      	asrs	r1, r3, #8
 800201a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800201e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002022:	b21b      	sxth	r3, r3
 8002024:	17da      	asrs	r2, r3, #31
 8002026:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800202a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800203a:	464c      	mov	r4, r9
 800203c:	0123      	lsls	r3, r4, #4
 800203e:	4644      	mov	r4, r8
 8002040:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002044:	4644      	mov	r4, r8
 8002046:	0122      	lsls	r2, r4, #4
 8002048:	1884      	adds	r4, r0, r2
 800204a:	633c      	str	r4, [r7, #48]	; 0x30
 800204c:	eb41 0303 	adc.w	r3, r1, r3
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
 8002052:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002056:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 800205a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800205e:	0fd9      	lsrs	r1, r3, #31
 8002060:	2000      	movs	r0, #0
 8002062:	62b9      	str	r1, [r7, #40]	; 0x28
 8002064:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002066:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800206a:	4621      	mov	r1, r4
 800206c:	1889      	adds	r1, r1, r2
 800206e:	6239      	str	r1, [r7, #32]
 8002070:	4629      	mov	r1, r5
 8002072:	eb43 0101 	adc.w	r1, r3, r1
 8002076:	6279      	str	r1, [r7, #36]	; 0x24
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002084:	4621      	mov	r1, r4
 8002086:	084a      	lsrs	r2, r1, #1
 8002088:	4629      	mov	r1, r5
 800208a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800208e:	4629      	mov	r1, r5
 8002090:	104b      	asrs	r3, r1, #1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	1894      	adds	r4, r2, r2
 800209c:	61bc      	str	r4, [r7, #24]
 800209e:	415b      	adcs	r3, r3
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020a6:	1814      	adds	r4, r2, r0
 80020a8:	613c      	str	r4, [r7, #16]
 80020aa:	414b      	adcs	r3, r1
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80020ba:	464c      	mov	r4, r9
 80020bc:	0163      	lsls	r3, r4, #5
 80020be:	4644      	mov	r4, r8
 80020c0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80020c4:	4644      	mov	r4, r8
 80020c6:	0162      	lsls	r2, r4, #5
 80020c8:	4644      	mov	r4, r8
 80020ca:	18a4      	adds	r4, r4, r2
 80020cc:	60bc      	str	r4, [r7, #8]
 80020ce:	464c      	mov	r4, r9
 80020d0:	eb43 0404 	adc.w	r4, r3, r4
 80020d4:	60fc      	str	r4, [r7, #12]
 80020d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020da:	4623      	mov	r3, r4
 80020dc:	181b      	adds	r3, r3, r0
 80020de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020e2:	462b      	mov	r3, r5
 80020e4:	eb41 0303 	adc.w	r3, r1, r3
 80020e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020ec:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da07      	bge.n	8002104 <compensate_pressure+0x6e4>
 80020f4:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	f143 0300 	adc.w	r3, r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002104:	f04f 0000 	mov.w	r0, #0
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	09d0      	lsrs	r0, r2, #7
 800210e:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8002112:	11d9      	asrs	r1, r3, #7
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4613      	mov	r3, r2
 800211a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

		if (pressure < pressure_min)
 800211e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002122:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002126:	429a      	cmp	r2, r3
 8002128:	d204      	bcs.n	8002134 <compensate_pressure+0x714>
			pressure = pressure_min;
 800212a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800212e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002132:	e00e      	b.n	8002152 <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 8002134:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002138:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800213c:	429a      	cmp	r2, r3
 800213e:	d908      	bls.n	8002152 <compensate_pressure+0x732>
			pressure = pressure_max;
 8002140:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002144:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002148:	e003      	b.n	8002152 <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 800214a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800214e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	}

	return pressure;
 8002152:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
}
 8002156:	4618      	mov	r0, r3
 8002158:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 800215c:	46bd      	mov	sp, r7
 800215e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002162:	bf00      	nop
 8002164:	0007ffff 	.word	0x0007ffff

08002168 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8002168:	b480      	push	{r7}
 800216a:	b08b      	sub	sp, #44	; 0x2c
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 8002172:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8002176:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002180:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	039b      	lsls	r3, r3, #14
 8002188:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002190:	051b      	lsls	r3, r3, #20
 8002192:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800219a:	461a      	mov	r2, r3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	1ad2      	subs	r2, r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	da02      	bge.n	80021bc <compensate_humidity+0x54>
 80021b6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80021ba:	337f      	adds	r3, #127	; 0x7f
 80021bc:	13db      	asrs	r3, r3, #15
 80021be:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80021c6:	461a      	mov	r2, r3
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da01      	bge.n	80021d6 <compensate_humidity+0x6e>
 80021d2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80021d6:	129b      	asrs	r3, r3, #10
 80021d8:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	7f1b      	ldrb	r3, [r3, #28]
 80021de:	461a      	mov	r2, r3
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	da01      	bge.n	80021ee <compensate_humidity+0x86>
 80021ea:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80021ee:	12db      	asrs	r3, r3, #11
 80021f0:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da01      	bge.n	8002206 <compensate_humidity+0x9e>
 8002202:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002206:	129b      	asrs	r3, r3, #10
 8002208:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800220c:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002214:	461a      	mov	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002220:	2b00      	cmp	r3, #0
 8002222:	da02      	bge.n	800222a <compensate_humidity+0xc2>
 8002224:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002228:	333f      	adds	r3, #63	; 0x3f
 800222a:	139b      	asrs	r3, r3, #14
 800222c:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	da02      	bge.n	8002244 <compensate_humidity+0xdc>
 800223e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002242:	337f      	adds	r3, #127	; 0x7f
 8002244:	13db      	asrs	r3, r3, #15
 8002246:	461a      	mov	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	da02      	bge.n	8002254 <compensate_humidity+0xec>
 800224e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002252:	337f      	adds	r3, #127	; 0x7f
 8002254:	13db      	asrs	r3, r3, #15
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	da00      	bge.n	8002260 <compensate_humidity+0xf8>
 800225e:	337f      	adds	r3, #127	; 0x7f
 8002260:	11db      	asrs	r3, r3, #7
 8002262:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	7e1b      	ldrb	r3, [r3, #24]
 8002268:	461a      	mov	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	da00      	bge.n	8002276 <compensate_humidity+0x10e>
 8002274:	330f      	adds	r3, #15
 8002276:	111b      	asrs	r3, r3, #4
 8002278:	425b      	negs	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002288:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002290:	bfa8      	it	ge
 8002292:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002296:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	da01      	bge.n	80022a2 <compensate_humidity+0x13a>
 800229e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80022a2:	131b      	asrs	r3, r3, #12
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d901      	bls.n	80022b2 <compensate_humidity+0x14a>
		humidity = humidity_max;
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	372c      	adds	r7, #44	; 0x2c
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80022c8:	2388      	movs	r3, #136	; 0x88
 80022ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	f107 0310 	add.w	r3, r7, #16
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	611a      	str	r2, [r3, #16]
 80022e2:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80022e4:	f107 010c 	add.w	r1, r7, #12
 80022e8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	221a      	movs	r2, #26
 80022f0:	f7fe fee7 	bl	80010c2 <bme280_get_regs>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 80022fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d11d      	bne.n	800233e <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f84a 	bl	80023a2 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800230e:	23e1      	movs	r3, #225	; 0xe1
 8002310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002314:	f107 010c 	add.w	r1, r7, #12
 8002318:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2207      	movs	r2, #7
 8002320:	f7fe fecf 	bl	80010c2 <bme280_get_regs>
 8002324:	4603      	mov	r3, r0
 8002326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800232a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800232e:	2b00      	cmp	r3, #0
 8002330:	d105      	bne.n	800233e <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f8e1 	bl	8002500 <parse_humidity_calib_data>
		}
	}

	return rslt;
 800233e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002342:	4618      	mov	r0, r3
 8002344:	3728      	adds	r7, #40	; 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800234a:	b480      	push	{r7}
 800234c:	b087      	sub	sp, #28
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8002358:	2301      	movs	r3, #1
 800235a:	75fb      	strb	r3, [r7, #23]
 800235c:	e016      	b.n	800238c <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800235e:	7dfb      	ldrb	r3, [r7, #23]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	441a      	add	r2, r3
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	3b01      	subs	r3, #1
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	440b      	add	r3, r1
 800236e:	7812      	ldrb	r2, [r2, #0]
 8002370:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	441a      	add	r2, r3
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4619      	mov	r1, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	440b      	add	r3, r1
 8002382:	7812      	ldrb	r2, [r2, #0]
 8002384:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	3301      	adds	r3, #1
 800238a:	75fb      	strb	r3, [r7, #23]
 800238c:	7dfa      	ldrb	r2, [r7, #23]
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	429a      	cmp	r2, r3
 8002392:	d3e4      	bcc.n	800235e <interleave_reg_addr+0x14>
	}
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	3310      	adds	r3, #16
 80023b0:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3301      	adds	r3, #1
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3303      	adds	r3, #3
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	b21a      	sxth	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3302      	adds	r3, #2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b21b      	sxth	r3, r3
 80023de:	4313      	orrs	r3, r2
 80023e0:	b21a      	sxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3305      	adds	r3, #5
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	b21a      	sxth	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b21a      	sxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3307      	adds	r3, #7
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	b21a      	sxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3306      	adds	r3, #6
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	b21b      	sxth	r3, r3
 8002412:	4313      	orrs	r3, r2
 8002414:	b21b      	sxth	r3, r3
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3309      	adds	r3, #9
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	b21a      	sxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3308      	adds	r3, #8
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b21b      	sxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b21a      	sxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	330b      	adds	r3, #11
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	b21a      	sxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	330a      	adds	r3, #10
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b21b      	sxth	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b21a      	sxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	330d      	adds	r3, #13
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	b21a      	sxth	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	330c      	adds	r3, #12
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b21b      	sxth	r3, r3
 8002462:	4313      	orrs	r3, r2
 8002464:	b21a      	sxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	330f      	adds	r3, #15
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	b21a      	sxth	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	330e      	adds	r3, #14
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	b21b      	sxth	r3, r3
 800247c:	4313      	orrs	r3, r2
 800247e:	b21a      	sxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3311      	adds	r3, #17
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	b21a      	sxth	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3310      	adds	r3, #16
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b21b      	sxth	r3, r3
 8002496:	4313      	orrs	r3, r2
 8002498:	b21a      	sxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3313      	adds	r3, #19
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	b21a      	sxth	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3312      	adds	r3, #18
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	4313      	orrs	r3, r2
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3315      	adds	r3, #21
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	b21a      	sxth	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3314      	adds	r3, #20
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b21b      	sxth	r3, r3
 80024ca:	4313      	orrs	r3, r2
 80024cc:	b21a      	sxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3317      	adds	r3, #23
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	b21a      	sxth	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3316      	adds	r3, #22
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	4313      	orrs	r3, r2
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e5a      	ldrb	r2, [r3, #25]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	761a      	strb	r2, [r3, #24]

}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	3310      	adds	r3, #16
 800250e:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3301      	adds	r3, #1
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	b21a      	sxth	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b21b      	sxth	r3, r3
 8002520:	4313      	orrs	r3, r2
 8002522:	b21a      	sxth	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	789a      	ldrb	r2, [r3, #2]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3303      	adds	r3, #3
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b25b      	sxtb	r3, r3
 8002538:	b29b      	uxth	r3, r3
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	b29b      	uxth	r3, r3
 800253e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3304      	adds	r3, #4
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b21b      	sxth	r3, r3
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800254e:	8a7a      	ldrh	r2, [r7, #18]
 8002550:	8a3b      	ldrh	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	b21a      	sxth	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3305      	adds	r3, #5
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	b25b      	sxtb	r3, r3
 8002562:	b29b      	uxth	r3, r3
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	b29b      	uxth	r3, r3
 8002568:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3304      	adds	r3, #4
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	b2db      	uxtb	r3, r3
 8002574:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002576:	89fa      	ldrh	r2, [r7, #14]
 8002578:	89bb      	ldrh	r3, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	b21a      	sxth	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3306      	adds	r3, #6
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b25a      	sxtb	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	460a      	mov	r2, r1
 80025a6:	71fb      	strb	r3, [r7, #7]
 80025a8:	4613      	mov	r3, r2
 80025aa:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 80025b0:	79fa      	ldrb	r2, [r7, #7]
 80025b2:	79bb      	ldrb	r3, [r7, #6]
 80025b4:	4013      	ands	r3, r2
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	e001      	b.n	80025c6 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <null_ptr_check+0x26>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <null_ptr_check+0x26>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <null_ptr_check+0x26>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80025fa:	23ff      	movs	r3, #255	; 0xff
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e001      	b.n	8002604 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800261c:	1d39      	adds	r1, r7, #4
 800261e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002622:	2201      	movs	r2, #1
 8002624:	4803      	ldr	r0, [pc, #12]	; (8002634 <__io_putchar+0x20>)
 8002626:	f002 fd7e 	bl	8005126 <HAL_UART_Transmit>
  return ch;
 800262a:	687b      	ldr	r3, [r7, #4]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	2000024c 	.word	0x2000024c

08002638 <user_i2c_read>:

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af02      	add	r7, sp, #8
 800263e:	603a      	str	r2, [r7, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
 8002646:	460b      	mov	r3, r1
 8002648:	71bb      	strb	r3, [r7, #6]
 800264a:	4613      	mov	r3, r2
 800264c:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	b29b      	uxth	r3, r3
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	b299      	uxth	r1, r3
 8002656:	1dba      	adds	r2, r7, #6
 8002658:	230a      	movs	r3, #10
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2301      	movs	r3, #1
 800265e:	4811      	ldr	r0, [pc, #68]	; (80026a4 <user_i2c_read+0x6c>)
 8002660:	f001 f8da 	bl	8003818 <HAL_I2C_Master_Transmit>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <user_i2c_read+0x38>
 800266a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800266e:	e014      	b.n	800269a <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	b21b      	sxth	r3, r3
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	b21b      	sxth	r3, r3
 800267c:	b299      	uxth	r1, r3
 800267e:	88bb      	ldrh	r3, [r7, #4]
 8002680:	220a      	movs	r2, #10
 8002682:	9200      	str	r2, [sp, #0]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <user_i2c_read+0x6c>)
 8002688:	f001 f9c4 	bl	8003a14 <HAL_I2C_Master_Receive>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <user_i2c_read+0x60>
 8002692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002696:	e000      	b.n	800269a <user_i2c_read+0x62>

  return 0;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200001f8 	.word	0x200001f8

080026a8 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fcb5 	bl	8003020 <HAL_Delay>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	603a      	str	r2, [r7, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
 80026ce:	460b      	mov	r3, r1
 80026d0:	71bb      	strb	r3, [r7, #6]
 80026d2:	4613      	mov	r3, r2
 80026d4:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 80026d6:	88bb      	ldrh	r3, [r7, #4]
 80026d8:	3301      	adds	r3, #1
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 f8c2 	bl	8005864 <malloc>
 80026e0:	4603      	mov	r3, r0
 80026e2:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 80026e4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3301      	adds	r3, #1
 80026f0:	88ba      	ldrh	r2, [r7, #4]
 80026f2:	6839      	ldr	r1, [r7, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 f8c5 	bl	8005884 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	b299      	uxth	r1, r3
 8002702:	88bb      	ldrh	r3, [r7, #4]
 8002704:	3301      	adds	r3, #1
 8002706:	b29b      	uxth	r3, r3
 8002708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800270c:	9200      	str	r2, [sp, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4808      	ldr	r0, [pc, #32]	; (8002734 <user_i2c_write+0x74>)
 8002712:	f001 f881 	bl	8003818 <HAL_I2C_Master_Transmit>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <user_i2c_write+0x62>
 800271c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002720:	e003      	b.n	800272a <user_i2c_write+0x6a>

  free(buf);
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f003 f8a6 	bl	8005874 <free>
  return 0;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200001f8 	.word	0x200001f8

08002738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002740:	f000 fbfc 	bl	8002f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002744:	f000 f8dc 	bl	8002900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002748:	f000 f9a0 	bl	8002a8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800274c:	f000 f974 	bl	8002a38 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002750:	f000 f944 	bl	80029dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* BME280 init */
  dev.dev_id = BME280_I2C_ADDR_SEC;
 8002754:	4b5c      	ldr	r3, [pc, #368]	; (80028c8 <main+0x190>)
 8002756:	2277      	movs	r2, #119	; 0x77
 8002758:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 800275a:	4b5b      	ldr	r3, [pc, #364]	; (80028c8 <main+0x190>)
 800275c:	2201      	movs	r2, #1
 800275e:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 8002760:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <main+0x190>)
 8002762:	4a5a      	ldr	r2, [pc, #360]	; (80028cc <main+0x194>)
 8002764:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 8002766:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <main+0x190>)
 8002768:	4a59      	ldr	r2, [pc, #356]	; (80028d0 <main+0x198>)
 800276a:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 800276c:	4b56      	ldr	r3, [pc, #344]	; (80028c8 <main+0x190>)
 800276e:	4a59      	ldr	r2, [pc, #356]	; (80028d4 <main+0x19c>)
 8002770:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
 8002772:	4855      	ldr	r0, [pc, #340]	; (80028c8 <main+0x190>)
 8002774:	f7fe fc5a 	bl	800102c <bme280_init>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	4b56      	ldr	r3, [pc, #344]	; (80028d8 <main+0x1a0>)
 800277e:	701a      	strb	r2, [r3, #0]

  /* BME280 settings */
  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002780:	4b51      	ldr	r3, [pc, #324]	; (80028c8 <main+0x190>)
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002788:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <main+0x190>)
 800278a:	2205      	movs	r2, #5
 800278c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002790:	4b4d      	ldr	r3, [pc, #308]	; (80028c8 <main+0x190>)
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 8002798:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <main+0x190>)
 800279a:	2204      	movs	r2, #4
 800279c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80027a0:	4949      	ldr	r1, [pc, #292]	; (80028c8 <main+0x190>)
 80027a2:	200f      	movs	r0, #15
 80027a4:	f7fe fd36 	bl	8001214 <bme280_set_sensor_settings>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b4a      	ldr	r3, [pc, #296]	; (80028d8 <main+0x1a0>)
 80027ae:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 80027b0:	4945      	ldr	r1, [pc, #276]	; (80028c8 <main+0x190>)
 80027b2:	2001      	movs	r0, #1
 80027b4:	f7fe fd83 	bl	80012be <bme280_set_sensor_mode>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <main+0x1a0>)
 80027be:	701a      	strb	r2, [r3, #0]
	  dev.delay_ms(40);
 80027c0:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <main+0x190>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2028      	movs	r0, #40	; 0x28
 80027c6:	4798      	blx	r3
	  /*Get Data */
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 80027c8:	4a3f      	ldr	r2, [pc, #252]	; (80028c8 <main+0x190>)
 80027ca:	4944      	ldr	r1, [pc, #272]	; (80028dc <main+0x1a4>)
 80027cc:	2007      	movs	r0, #7
 80027ce:	f7fe fdf2 	bl	80013b6 <bme280_get_sensor_data>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <main+0x1a0>)
 80027d8:	701a      	strb	r2, [r3, #0]
	  if(rslt == BME280_OK)
 80027da:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <main+0x1a0>)
 80027dc:	f993 3000 	ldrsb.w	r3, [r3]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d157      	bne.n	8002894 <main+0x15c>
	  {
		temperature = comp_data.temperature / 100.0;
 80027e4:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <main+0x1a4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd febb 	bl	8000564 <__aeabi_i2d>
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <main+0x1a8>)
 80027f4:	f7fe f84a 	bl	800088c <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f7fe f9f2 	bl	8000be8 <__aeabi_d2f>
 8002804:	4603      	mov	r3, r0
 8002806:	4a37      	ldr	r2, [pc, #220]	; (80028e4 <main+0x1ac>)
 8002808:	6013      	str	r3, [r2, #0]
		humidity = comp_data.humidity / 1024.0;
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <main+0x1a4>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe98 	bl	8000544 <__aeabi_ui2d>
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <main+0x1b0>)
 800281a:	f7fe f837 	bl	800088c <__aeabi_ddiv>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4610      	mov	r0, r2
 8002824:	4619      	mov	r1, r3
 8002826:	f7fe f9df 	bl	8000be8 <__aeabi_d2f>
 800282a:	4603      	mov	r3, r0
 800282c:	4a2f      	ldr	r2, [pc, #188]	; (80028ec <main+0x1b4>)
 800282e:	6013      	str	r3, [r2, #0]
		pressure = comp_data.pressure / 10000.0;
 8002830:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <main+0x1a4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fe85 	bl	8000544 <__aeabi_ui2d>
 800283a:	a321      	add	r3, pc, #132	; (adr r3, 80028c0 <main+0x188>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f7fe f824 	bl	800088c <__aeabi_ddiv>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f7fe f9cc 	bl	8000be8 <__aeabi_d2f>
 8002850:	4603      	mov	r3, r0
 8002852:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <main+0x1b8>)
 8002854:	6013      	str	r3, [r2, #0]
		printf("temperature: %4.2f %4.2f %4.2f\r\n", temperature, humidity, pressure);
 8002856:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <main+0x1ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd fe94 	bl	8000588 <__aeabi_f2d>
 8002860:	4680      	mov	r8, r0
 8002862:	4689      	mov	r9, r1
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <main+0x1b4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fd fe8d 	bl	8000588 <__aeabi_f2d>
 800286e:	4604      	mov	r4, r0
 8002870:	460d      	mov	r5, r1
 8002872:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <main+0x1b8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe86 	bl	8000588 <__aeabi_f2d>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002884:	e9cd 4500 	strd	r4, r5, [sp]
 8002888:	4642      	mov	r2, r8
 800288a:	464b      	mov	r3, r9
 800288c:	4819      	ldr	r0, [pc, #100]	; (80028f4 <main+0x1bc>)
 800288e:	f003 fd59 	bl	8006344 <iprintf>
 8002892:	e00e      	b.n	80028b2 <main+0x17a>
	  } else {
		  if (HAL_UART_Transmit(&huart2, "Error ", 6, 100)) {
 8002894:	2364      	movs	r3, #100	; 0x64
 8002896:	2206      	movs	r2, #6
 8002898:	4917      	ldr	r1, [pc, #92]	; (80028f8 <main+0x1c0>)
 800289a:	4818      	ldr	r0, [pc, #96]	; (80028fc <main+0x1c4>)
 800289c:	f002 fc43 	bl	8005126 <HAL_UART_Transmit>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <main+0x17a>
			  Error_Handler();
 80028a6:	f000 f95f 	bl	8002b68 <Error_Handler>
			  HAL_Delay(500);
 80028aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028ae:	f000 fbb7 	bl	8003020 <HAL_Delay>
		  }
	  }
	  HAL_Delay(100);
 80028b2:	2064      	movs	r0, #100	; 0x64
 80028b4:	f000 fbb4 	bl	8003020 <HAL_Delay>
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 80028b8:	e77a      	b.n	80027b0 <main+0x78>
 80028ba:	bf00      	nop
 80028bc:	f3af 8000 	nop.w
 80028c0:	00000000 	.word	0x00000000
 80028c4:	40c38800 	.word	0x40c38800
 80028c8:	2000029c 	.word	0x2000029c
 80028cc:	08002639 	.word	0x08002639
 80028d0:	080026c1 	.word	0x080026c1
 80028d4:	080026a9 	.word	0x080026a9
 80028d8:	200002e8 	.word	0x200002e8
 80028dc:	200002dc 	.word	0x200002dc
 80028e0:	40590000 	.word	0x40590000
 80028e4:	20000290 	.word	0x20000290
 80028e8:	40900000 	.word	0x40900000
 80028ec:	20000294 	.word	0x20000294
 80028f0:	20000298 	.word	0x20000298
 80028f4:	08008300 	.word	0x08008300
 80028f8:	08008324 	.word	0x08008324
 80028fc:	2000024c 	.word	0x2000024c

08002900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b094      	sub	sp, #80	; 0x50
 8002904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	2234      	movs	r2, #52	; 0x34
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f002 ffc6 	bl	80058a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002914:	f107 0308 	add.w	r3, r7, #8
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <SystemClock_Config+0xd4>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <SystemClock_Config+0xd4>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002932:	6413      	str	r3, [r2, #64]	; 0x40
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <SystemClock_Config+0xd4>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002940:	2300      	movs	r3, #0
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <SystemClock_Config+0xd8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800294c:	4a22      	ldr	r2, [pc, #136]	; (80029d8 <SystemClock_Config+0xd8>)
 800294e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <SystemClock_Config+0xd8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002960:	2302      	movs	r3, #2
 8002962:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002964:	2301      	movs	r3, #1
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002968:	2310      	movs	r3, #16
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800296c:	2302      	movs	r3, #2
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002970:	2300      	movs	r3, #0
 8002972:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002974:	2310      	movs	r3, #16
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002978:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800297c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800297e:	2304      	movs	r3, #4
 8002980:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002982:	2302      	movs	r3, #2
 8002984:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002986:	2302      	movs	r3, #2
 8002988:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800298a:	f107 031c 	add.w	r3, r7, #28
 800298e:	4618      	mov	r0, r3
 8002990:	f002 f8de 	bl	8004b50 <HAL_RCC_OscConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800299a:	f000 f8e5 	bl	8002b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800299e:	230f      	movs	r3, #15
 80029a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a2:	2302      	movs	r3, #2
 80029a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	2102      	movs	r1, #2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 fd7e 	bl	80044bc <HAL_RCC_ClockConfig>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80029c6:	f000 f8cf 	bl	8002b68 <Error_Handler>
  }
}
 80029ca:	bf00      	nop
 80029cc:	3750      	adds	r7, #80	; 0x50
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000

080029dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029e0:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029e2:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <MX_I2C1_Init+0x54>)
 80029e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029e8:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <MX_I2C1_Init+0x58>)
 80029ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a1a:	f000 fdb9 	bl	8003590 <HAL_I2C_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a24:	f000 f8a0 	bl	8002b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200001f8 	.word	0x200001f8
 8002a30:	40005400 	.word	0x40005400
 8002a34:	000186a0 	.word	0x000186a0

08002a38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <MX_USART2_UART_Init+0x50>)
 8002a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a5e:	220c      	movs	r2, #12
 8002a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a6e:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a70:	f002 fb0c 	bl	800508c <HAL_UART_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a7a:	f000 f875 	bl	8002b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	2000024c 	.word	0x2000024c
 8002a88:	40004400 	.word	0x40004400

08002a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
 8002aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <MX_GPIO_Init+0xd0>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a2c      	ldr	r2, [pc, #176]	; (8002b5c <MX_GPIO_Init+0xd0>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <MX_GPIO_Init+0xd0>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <MX_GPIO_Init+0xd0>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a25      	ldr	r2, [pc, #148]	; (8002b5c <MX_GPIO_Init+0xd0>)
 8002ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <MX_GPIO_Init+0xd0>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <MX_GPIO_Init+0xd0>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <MX_GPIO_Init+0xd0>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <MX_GPIO_Init+0xd0>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	607b      	str	r3, [r7, #4]
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <MX_GPIO_Init+0xd0>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <MX_GPIO_Init+0xd0>)
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_GPIO_Init+0xd0>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2120      	movs	r1, #32
 8002b16:	4812      	ldr	r0, [pc, #72]	; (8002b60 <MX_GPIO_Init+0xd4>)
 8002b18:	f000 fd20 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	4619      	mov	r1, r3
 8002b32:	480c      	ldr	r0, [pc, #48]	; (8002b64 <MX_GPIO_Init+0xd8>)
 8002b34:	f000 fb7e 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	2300      	movs	r3, #0
 8002b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4804      	ldr	r0, [pc, #16]	; (8002b60 <MX_GPIO_Init+0xd4>)
 8002b50:	f000 fb70 	bl	8003234 <HAL_GPIO_Init>

}
 8002b54:	bf00      	nop
 8002b56:	3728      	adds	r7, #40	; 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40020000 	.word	0x40020000
 8002b64:	40020800 	.word	0x40020800

08002b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b6c:	b672      	cpsid	i
}
 8002b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b70:	e7fe      	b.n	8002b70 <Error_Handler+0x8>
	...

08002b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_MspInit+0x4c>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <HAL_MspInit+0x4c>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b88:	6453      	str	r3, [r2, #68]	; 0x44
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_MspInit+0x4c>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	603b      	str	r3, [r7, #0]
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_MspInit+0x4c>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a08      	ldr	r2, [pc, #32]	; (8002bc0 <HAL_MspInit+0x4c>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_MspInit+0x4c>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bb2:	2007      	movs	r0, #7
 8002bb4:	f000 fb0a 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800

08002bc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a19      	ldr	r2, [pc, #100]	; (8002c48 <HAL_I2C_MspInit+0x84>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d12c      	bne.n	8002c40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <HAL_I2C_MspInit+0x88>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <HAL_I2C_MspInit+0x88>)
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_I2C_MspInit+0x88>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c08:	2312      	movs	r3, #18
 8002c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c10:	2303      	movs	r3, #3
 8002c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c14:	2304      	movs	r3, #4
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	480c      	ldr	r0, [pc, #48]	; (8002c50 <HAL_I2C_MspInit+0x8c>)
 8002c20:	f000 fb08 	bl	8003234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <HAL_I2C_MspInit+0x88>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <HAL_I2C_MspInit+0x88>)
 8002c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c32:	6413      	str	r3, [r2, #64]	; 0x40
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_I2C_MspInit+0x88>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c40:	bf00      	nop
 8002c42:	3728      	adds	r7, #40	; 0x28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40005400 	.word	0x40005400
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40020400 	.word	0x40020400

08002c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <HAL_UART_MspInit+0x84>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d12b      	bne.n	8002cce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <HAL_UART_MspInit+0x88>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <HAL_UART_MspInit+0x88>)
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <HAL_UART_MspInit+0x88>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <HAL_UART_MspInit+0x88>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a10      	ldr	r2, [pc, #64]	; (8002cdc <HAL_UART_MspInit+0x88>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <HAL_UART_MspInit+0x88>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cae:	230c      	movs	r3, #12
 8002cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cbe:	2307      	movs	r3, #7
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <HAL_UART_MspInit+0x8c>)
 8002cca:	f000 fab3 	bl	8003234 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cce:	bf00      	nop
 8002cd0:	3728      	adds	r7, #40	; 0x28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40004400 	.word	0x40004400
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40020000 	.word	0x40020000

08002ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ce8:	e7fe      	b.n	8002ce8 <NMI_Handler+0x4>

08002cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cee:	e7fe      	b.n	8002cee <HardFault_Handler+0x4>

08002cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <MemManage_Handler+0x4>

08002cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cfa:	e7fe      	b.n	8002cfa <BusFault_Handler+0x4>

08002cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <UsageFault_Handler+0x4>

08002d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d30:	f000 f956 	bl	8002fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return 1;
 8002d3c:	2301      	movs	r3, #1
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <_kill>:

int _kill(int pid, int sig)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d52:	f002 fd5d 	bl	8005810 <__errno>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2216      	movs	r2, #22
 8002d5a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_exit>:

void _exit (int status)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ffe7 	bl	8002d48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d7a:	e7fe      	b.n	8002d7a <_exit+0x12>

08002d7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e00a      	b.n	8002da4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d8e:	f3af 8000 	nop.w
 8002d92:	4601      	mov	r1, r0
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	60ba      	str	r2, [r7, #8]
 8002d9a:	b2ca      	uxtb	r2, r1
 8002d9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3301      	adds	r3, #1
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	dbf0      	blt.n	8002d8e <_read+0x12>
  }

  return len;
 8002dac:	687b      	ldr	r3, [r7, #4]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e009      	b.n	8002ddc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	60ba      	str	r2, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fc1f 	bl	8002614 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	dbf1      	blt.n	8002dc8 <_write+0x12>
  }
  return len;
 8002de4:	687b      	ldr	r3, [r7, #4]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_close>:

int _close(int file)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e16:	605a      	str	r2, [r3, #4]
  return 0;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <_isatty>:

int _isatty(int file)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e2e:	2301      	movs	r3, #1
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e60:	4a14      	ldr	r2, [pc, #80]	; (8002eb4 <_sbrk+0x5c>)
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <_sbrk+0x60>)
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e6c:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <_sbrk+0x64>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <_sbrk+0x64>)
 8002e76:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <_sbrk+0x68>)
 8002e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <_sbrk+0x64>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d207      	bcs.n	8002e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e88:	f002 fcc2 	bl	8005810 <__errno>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	220c      	movs	r2, #12
 8002e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e96:	e009      	b.n	8002eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <_sbrk+0x64>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <_sbrk+0x64>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <_sbrk+0x64>)
 8002ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20020000 	.word	0x20020000
 8002eb8:	00000400 	.word	0x00000400
 8002ebc:	200002ec 	.word	0x200002ec
 8002ec0:	20000308 	.word	0x20000308

08002ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <SystemInit+0x20>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	4a05      	ldr	r2, [pc, #20]	; (8002ee4 <SystemInit+0x20>)
 8002ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eec:	480d      	ldr	r0, [pc, #52]	; (8002f24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eee:	490e      	ldr	r1, [pc, #56]	; (8002f28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ef4:	e002      	b.n	8002efc <LoopCopyDataInit>

08002ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002efa:	3304      	adds	r3, #4

08002efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f00:	d3f9      	bcc.n	8002ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f02:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f04:	4c0b      	ldr	r4, [pc, #44]	; (8002f34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f08:	e001      	b.n	8002f0e <LoopFillZerobss>

08002f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f0c:	3204      	adds	r2, #4

08002f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f10:	d3fb      	bcc.n	8002f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f12:	f7ff ffd7 	bl	8002ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f16:	f002 fc81 	bl	800581c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f1a:	f7ff fc0d 	bl	8002738 <main>
  bx  lr    
 8002f1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f28:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002f2c:	0800872c 	.word	0x0800872c
  ldr r2, =_sbss
 8002f30:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002f34:	20000304 	.word	0x20000304

08002f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f38:	e7fe      	b.n	8002f38 <ADC_IRQHandler>
	...

08002f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_Init+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <HAL_Init+0x40>)
 8002f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_Init+0x40>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <HAL_Init+0x40>)
 8002f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_Init+0x40>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f64:	2003      	movs	r0, #3
 8002f66:	f000 f931 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f000 f808 	bl	8002f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f70:	f7ff fe00 	bl	8002b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023c00 	.word	0x40023c00

08002f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_InitTick+0x54>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_InitTick+0x58>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4619      	mov	r1, r3
 8002f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f93b 	bl	800321a <HAL_SYSTICK_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00e      	b.n	8002fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b0f      	cmp	r3, #15
 8002fb2:	d80a      	bhi.n	8002fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fbc:	f000 f911 	bl	80031e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc0:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <HAL_InitTick+0x5c>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	20000008 	.word	0x20000008
 8002fdc:	20000004 	.word	0x20000004

08002fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_IncTick+0x20>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_IncTick+0x24>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <HAL_IncTick+0x24>)
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000008 	.word	0x20000008
 8003004:	200002f0 	.word	0x200002f0

08003008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return uwTick;
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <HAL_GetTick+0x14>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	200002f0 	.word	0x200002f0

08003020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff ffee 	bl	8003008 <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003038:	d005      	beq.n	8003046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_Delay+0x44>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003046:	bf00      	nop
 8003048:	f7ff ffde 	bl	8003008 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d8f7      	bhi.n	8003048 <HAL_Delay+0x28>
  {
  }
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000008 	.word	0x20000008

08003068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003084:	4013      	ands	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309a:	4a04      	ldr	r2, [pc, #16]	; (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	60d3      	str	r3, [r2, #12]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b4:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <__NVIC_GetPriorityGrouping+0x18>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	f003 0307 	and.w	r3, r3, #7
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003198:	d301      	bcc.n	800319e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319a:	2301      	movs	r3, #1
 800319c:	e00f      	b.n	80031be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <SysTick_Config+0x40>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a6:	210f      	movs	r1, #15
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031ac:	f7ff ff8e 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <SysTick_Config+0x40>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <SysTick_Config+0x40>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	e000e010 	.word	0xe000e010

080031cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff47 	bl	8003068 <__NVIC_SetPriorityGrouping>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031f4:	f7ff ff5c 	bl	80030b0 <__NVIC_GetPriorityGrouping>
 80031f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7ff ff8e 	bl	8003120 <NVIC_EncodePriority>
 8003204:	4602      	mov	r2, r0
 8003206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff5d 	bl	80030cc <__NVIC_SetPriority>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffb0 	bl	8003188 <SysTick_Config>
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	; 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	e165      	b.n	800351c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003250:	2201      	movs	r2, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	429a      	cmp	r2, r3
 800326a:	f040 8154 	bne.w	8003516 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d005      	beq.n	8003286 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003282:	2b02      	cmp	r3, #2
 8003284:	d130      	bne.n	80032e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	2203      	movs	r2, #3
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032bc:	2201      	movs	r2, #1
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 0201 	and.w	r2, r3, #1
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d017      	beq.n	8003324 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d123      	bne.n	8003378 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	08da      	lsrs	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3208      	adds	r2, #8
 8003338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	220f      	movs	r2, #15
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	08da      	lsrs	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3208      	adds	r2, #8
 8003372:	69b9      	ldr	r1, [r7, #24]
 8003374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0203 	and.w	r2, r3, #3
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80ae 	beq.w	8003516 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <HAL_GPIO_Init+0x300>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	4a5c      	ldr	r2, [pc, #368]	; (8003534 <HAL_GPIO_Init+0x300>)
 80033c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ca:	4b5a      	ldr	r3, [pc, #360]	; (8003534 <HAL_GPIO_Init+0x300>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033d6:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_GPIO_Init+0x304>)
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	3302      	adds	r3, #2
 80033de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	220f      	movs	r2, #15
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a4f      	ldr	r2, [pc, #316]	; (800353c <HAL_GPIO_Init+0x308>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d025      	beq.n	800344e <HAL_GPIO_Init+0x21a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a4e      	ldr	r2, [pc, #312]	; (8003540 <HAL_GPIO_Init+0x30c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d01f      	beq.n	800344a <HAL_GPIO_Init+0x216>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a4d      	ldr	r2, [pc, #308]	; (8003544 <HAL_GPIO_Init+0x310>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d019      	beq.n	8003446 <HAL_GPIO_Init+0x212>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a4c      	ldr	r2, [pc, #304]	; (8003548 <HAL_GPIO_Init+0x314>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <HAL_GPIO_Init+0x20e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a4b      	ldr	r2, [pc, #300]	; (800354c <HAL_GPIO_Init+0x318>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00d      	beq.n	800343e <HAL_GPIO_Init+0x20a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a4a      	ldr	r2, [pc, #296]	; (8003550 <HAL_GPIO_Init+0x31c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d007      	beq.n	800343a <HAL_GPIO_Init+0x206>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a49      	ldr	r2, [pc, #292]	; (8003554 <HAL_GPIO_Init+0x320>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d101      	bne.n	8003436 <HAL_GPIO_Init+0x202>
 8003432:	2306      	movs	r3, #6
 8003434:	e00c      	b.n	8003450 <HAL_GPIO_Init+0x21c>
 8003436:	2307      	movs	r3, #7
 8003438:	e00a      	b.n	8003450 <HAL_GPIO_Init+0x21c>
 800343a:	2305      	movs	r3, #5
 800343c:	e008      	b.n	8003450 <HAL_GPIO_Init+0x21c>
 800343e:	2304      	movs	r3, #4
 8003440:	e006      	b.n	8003450 <HAL_GPIO_Init+0x21c>
 8003442:	2303      	movs	r3, #3
 8003444:	e004      	b.n	8003450 <HAL_GPIO_Init+0x21c>
 8003446:	2302      	movs	r3, #2
 8003448:	e002      	b.n	8003450 <HAL_GPIO_Init+0x21c>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <HAL_GPIO_Init+0x21c>
 800344e:	2300      	movs	r3, #0
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	f002 0203 	and.w	r2, r2, #3
 8003456:	0092      	lsls	r2, r2, #2
 8003458:	4093      	lsls	r3, r2
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4313      	orrs	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003460:	4935      	ldr	r1, [pc, #212]	; (8003538 <HAL_GPIO_Init+0x304>)
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	3302      	adds	r3, #2
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800346e:	4b3a      	ldr	r3, [pc, #232]	; (8003558 <HAL_GPIO_Init+0x324>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003492:	4a31      	ldr	r2, [pc, #196]	; (8003558 <HAL_GPIO_Init+0x324>)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003498:	4b2f      	ldr	r3, [pc, #188]	; (8003558 <HAL_GPIO_Init+0x324>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034bc:	4a26      	ldr	r2, [pc, #152]	; (8003558 <HAL_GPIO_Init+0x324>)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034c2:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_GPIO_Init+0x324>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4013      	ands	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034e6:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <HAL_GPIO_Init+0x324>)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034ec:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <HAL_GPIO_Init+0x324>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003510:	4a11      	ldr	r2, [pc, #68]	; (8003558 <HAL_GPIO_Init+0x324>)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3301      	adds	r3, #1
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b0f      	cmp	r3, #15
 8003520:	f67f ae96 	bls.w	8003250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	3724      	adds	r7, #36	; 0x24
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800
 8003538:	40013800 	.word	0x40013800
 800353c:	40020000 	.word	0x40020000
 8003540:	40020400 	.word	0x40020400
 8003544:	40020800 	.word	0x40020800
 8003548:	40020c00 	.word	0x40020c00
 800354c:	40021000 	.word	0x40021000
 8003550:	40021400 	.word	0x40021400
 8003554:	40021800 	.word	0x40021800
 8003558:	40013c00 	.word	0x40013c00

0800355c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
 8003568:	4613      	mov	r3, r2
 800356a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003578:	e003      	b.n	8003582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	041a      	lsls	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	619a      	str	r2, [r3, #24]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e12b      	b.n	80037fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff fb04 	bl	8002bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2224      	movs	r2, #36	; 0x24
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035f4:	f001 f854 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 80035f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4a81      	ldr	r2, [pc, #516]	; (8003804 <HAL_I2C_Init+0x274>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d807      	bhi.n	8003614 <HAL_I2C_Init+0x84>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a80      	ldr	r2, [pc, #512]	; (8003808 <HAL_I2C_Init+0x278>)
 8003608:	4293      	cmp	r3, r2
 800360a:	bf94      	ite	ls
 800360c:	2301      	movls	r3, #1
 800360e:	2300      	movhi	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	e006      	b.n	8003622 <HAL_I2C_Init+0x92>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a7d      	ldr	r2, [pc, #500]	; (800380c <HAL_I2C_Init+0x27c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	bf94      	ite	ls
 800361c:	2301      	movls	r3, #1
 800361e:	2300      	movhi	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e0e7      	b.n	80037fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4a78      	ldr	r2, [pc, #480]	; (8003810 <HAL_I2C_Init+0x280>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	0c9b      	lsrs	r3, r3, #18
 8003634:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a6a      	ldr	r2, [pc, #424]	; (8003804 <HAL_I2C_Init+0x274>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d802      	bhi.n	8003664 <HAL_I2C_Init+0xd4>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3301      	adds	r3, #1
 8003662:	e009      	b.n	8003678 <HAL_I2C_Init+0xe8>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	4a69      	ldr	r2, [pc, #420]	; (8003814 <HAL_I2C_Init+0x284>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	3301      	adds	r3, #1
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	430b      	orrs	r3, r1
 800367e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800368a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	495c      	ldr	r1, [pc, #368]	; (8003804 <HAL_I2C_Init+0x274>)
 8003694:	428b      	cmp	r3, r1
 8003696:	d819      	bhi.n	80036cc <HAL_I2C_Init+0x13c>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1e59      	subs	r1, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a6:	1c59      	adds	r1, r3, #1
 80036a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036ac:	400b      	ands	r3, r1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_I2C_Init+0x138>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1e59      	subs	r1, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c0:	3301      	adds	r3, #1
 80036c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c6:	e051      	b.n	800376c <HAL_I2C_Init+0x1dc>
 80036c8:	2304      	movs	r3, #4
 80036ca:	e04f      	b.n	800376c <HAL_I2C_Init+0x1dc>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d111      	bne.n	80036f8 <HAL_I2C_Init+0x168>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1e58      	subs	r0, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	440b      	add	r3, r1
 80036e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	e012      	b.n	800371e <HAL_I2C_Init+0x18e>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	0099      	lsls	r1, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	fbb0 f3f3 	udiv	r3, r0, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Init+0x196>
 8003722:	2301      	movs	r3, #1
 8003724:	e022      	b.n	800376c <HAL_I2C_Init+0x1dc>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10e      	bne.n	800374c <HAL_I2C_Init+0x1bc>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1e58      	subs	r0, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	440b      	add	r3, r1
 800373c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003740:	3301      	adds	r3, #1
 8003742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800374a:	e00f      	b.n	800376c <HAL_I2C_Init+0x1dc>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1e58      	subs	r0, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	0099      	lsls	r1, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003762:	3301      	adds	r3, #1
 8003764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003768:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	6809      	ldr	r1, [r1, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800379a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6911      	ldr	r1, [r2, #16]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68d2      	ldr	r2, [r2, #12]
 80037a6:	4311      	orrs	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	000186a0 	.word	0x000186a0
 8003808:	001e847f 	.word	0x001e847f
 800380c:	003d08ff 	.word	0x003d08ff
 8003810:	431bde83 	.word	0x431bde83
 8003814:	10624dd3 	.word	0x10624dd3

08003818 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	461a      	mov	r2, r3
 8003824:	460b      	mov	r3, r1
 8003826:	817b      	strh	r3, [r7, #10]
 8003828:	4613      	mov	r3, r2
 800382a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800382c:	f7ff fbec 	bl	8003008 <HAL_GetTick>
 8003830:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b20      	cmp	r3, #32
 800383c:	f040 80e0 	bne.w	8003a00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2319      	movs	r3, #25
 8003846:	2201      	movs	r2, #1
 8003848:	4970      	ldr	r1, [pc, #448]	; (8003a0c <HAL_I2C_Master_Transmit+0x1f4>)
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fc58 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	e0d3      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_I2C_Master_Transmit+0x50>
 8003864:	2302      	movs	r3, #2
 8003866:	e0cc      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b01      	cmp	r3, #1
 800387c:	d007      	beq.n	800388e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2221      	movs	r2, #33	; 0x21
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2210      	movs	r2, #16
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	893a      	ldrh	r2, [r7, #8]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a50      	ldr	r2, [pc, #320]	; (8003a10 <HAL_I2C_Master_Transmit+0x1f8>)
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038d0:	8979      	ldrh	r1, [r7, #10]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6a3a      	ldr	r2, [r7, #32]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fac2 	bl	8003e60 <I2C_MasterRequestWrite>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e08d      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038fc:	e066      	b.n	80039cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	6a39      	ldr	r1, [r7, #32]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fcd2 	bl	80042ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00d      	beq.n	800392a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	2b04      	cmp	r3, #4
 8003914:	d107      	bne.n	8003926 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003924:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e06b      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	781a      	ldrb	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b04      	cmp	r3, #4
 8003966:	d11b      	bne.n	80039a0 <HAL_I2C_Master_Transmit+0x188>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	2b00      	cmp	r3, #0
 800396e:	d017      	beq.n	80039a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	781a      	ldrb	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	6a39      	ldr	r1, [r7, #32]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fcc2 	bl	800432e <I2C_WaitOnBTFFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d107      	bne.n	80039c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e01a      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d194      	bne.n	80038fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	00100002 	.word	0x00100002
 8003a10:	ffff0000 	.word	0xffff0000

08003a14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08c      	sub	sp, #48	; 0x30
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	460b      	mov	r3, r1
 8003a22:	817b      	strh	r3, [r7, #10]
 8003a24:	4613      	mov	r3, r2
 8003a26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a28:	f7ff faee 	bl	8003008 <HAL_GetTick>
 8003a2c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	f040 820b 	bne.w	8003e52 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	2319      	movs	r3, #25
 8003a42:	2201      	movs	r2, #1
 8003a44:	497c      	ldr	r1, [pc, #496]	; (8003c38 <HAL_I2C_Master_Receive+0x224>)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fb5a 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
 8003a54:	e1fe      	b.n	8003e54 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_I2C_Master_Receive+0x50>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e1f7      	b.n	8003e54 <HAL_I2C_Master_Receive+0x440>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d007      	beq.n	8003a8a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2222      	movs	r2, #34	; 0x22
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	893a      	ldrh	r2, [r7, #8]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a5c      	ldr	r2, [pc, #368]	; (8003c3c <HAL_I2C_Master_Receive+0x228>)
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003acc:	8979      	ldrh	r1, [r7, #10]
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fa46 	bl	8003f64 <I2C_MasterRequestRead>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e1b8      	b.n	8003e54 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d113      	bne.n	8003b12 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aea:	2300      	movs	r3, #0
 8003aec:	623b      	str	r3, [r7, #32]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	623b      	str	r3, [r7, #32]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	623b      	str	r3, [r7, #32]
 8003afe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e18c      	b.n	8003e2c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d11b      	bne.n	8003b52 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e16c      	b.n	8003e2c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d11b      	bne.n	8003b92 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	e14c      	b.n	8003e2c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ba0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bb8:	e138      	b.n	8003e2c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	f200 80f1 	bhi.w	8003da6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d123      	bne.n	8003c14 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fbed 	bl	80043b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e139      	b.n	8003e54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c12:	e10b      	b.n	8003e2c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d14e      	bne.n	8003cba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	2200      	movs	r2, #0
 8003c24:	4906      	ldr	r1, [pc, #24]	; (8003c40 <HAL_I2C_Master_Receive+0x22c>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fa6a 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e10e      	b.n	8003e54 <HAL_I2C_Master_Receive+0x440>
 8003c36:	bf00      	nop
 8003c38:	00100002 	.word	0x00100002
 8003c3c:	ffff0000 	.word	0xffff0000
 8003c40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cb8:	e0b8      	b.n	8003e2c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	4966      	ldr	r1, [pc, #408]	; (8003e5c <HAL_I2C_Master_Receive+0x448>)
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fa1b 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0bf      	b.n	8003e54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	494f      	ldr	r1, [pc, #316]	; (8003e5c <HAL_I2C_Master_Receive+0x448>)
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f9ed 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e091      	b.n	8003e54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003da4:	e042      	b.n	8003e2c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fb00 	bl	80043b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e04c      	b.n	8003e54 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d118      	bne.n	8003e2c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f47f aec2 	bne.w	8003bba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3728      	adds	r7, #40	; 0x28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	00010004 	.word	0x00010004

08003e60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d006      	beq.n	8003e8a <I2C_MasterRequestWrite+0x2a>
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d003      	beq.n	8003e8a <I2C_MasterRequestWrite+0x2a>
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e88:	d108      	bne.n	8003e9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e00b      	b.n	8003eb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	2b12      	cmp	r3, #18
 8003ea2:	d107      	bne.n	8003eb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f91d 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00d      	beq.n	8003ee8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eda:	d103      	bne.n	8003ee4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e035      	b.n	8003f54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef0:	d108      	bne.n	8003f04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ef2:	897b      	ldrh	r3, [r7, #10]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f00:	611a      	str	r2, [r3, #16]
 8003f02:	e01b      	b.n	8003f3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f04:	897b      	ldrh	r3, [r7, #10]
 8003f06:	11db      	asrs	r3, r3, #7
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f003 0306 	and.w	r3, r3, #6
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f063 030f 	orn	r3, r3, #15
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	490e      	ldr	r1, [pc, #56]	; (8003f5c <I2C_MasterRequestWrite+0xfc>)
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f943 	bl	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e010      	b.n	8003f54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f32:	897b      	ldrh	r3, [r7, #10]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4907      	ldr	r1, [pc, #28]	; (8003f60 <I2C_MasterRequestWrite+0x100>)
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f933 	bl	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	00010008 	.word	0x00010008
 8003f60:	00010002 	.word	0x00010002

08003f64 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	460b      	mov	r3, r1
 8003f72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f88:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d006      	beq.n	8003f9e <I2C_MasterRequestRead+0x3a>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d003      	beq.n	8003f9e <I2C_MasterRequestRead+0x3a>
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f9c:	d108      	bne.n	8003fb0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e00b      	b.n	8003fc8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	2b11      	cmp	r3, #17
 8003fb6:	d107      	bne.n	8003fc8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 f893 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00d      	beq.n	8003ffc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fee:	d103      	bne.n	8003ff8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e079      	b.n	80040f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004004:	d108      	bne.n	8004018 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004006:	897b      	ldrh	r3, [r7, #10]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	611a      	str	r2, [r3, #16]
 8004016:	e05f      	b.n	80040d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004018:	897b      	ldrh	r3, [r7, #10]
 800401a:	11db      	asrs	r3, r3, #7
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f003 0306 	and.w	r3, r3, #6
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f063 030f 	orn	r3, r3, #15
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4930      	ldr	r1, [pc, #192]	; (80040f8 <I2C_MasterRequestRead+0x194>)
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f8b9 	bl	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e054      	b.n	80040f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004046:	897b      	ldrh	r3, [r7, #10]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4929      	ldr	r1, [pc, #164]	; (80040fc <I2C_MasterRequestRead+0x198>)
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f8a9 	bl	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e044      	b.n	80040f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f831 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b2:	d103      	bne.n	80040bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e017      	b.n	80040f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040c0:	897b      	ldrh	r3, [r7, #10]
 80040c2:	11db      	asrs	r3, r3, #7
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 0306 	and.w	r3, r3, #6
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f063 030e 	orn	r3, r3, #14
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4907      	ldr	r1, [pc, #28]	; (80040fc <I2C_MasterRequestRead+0x198>)
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f865 	bl	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	00010008 	.word	0x00010008
 80040fc:	00010002 	.word	0x00010002

08004100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004110:	e025      	b.n	800415e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004118:	d021      	beq.n	800415e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fe ff75 	bl	8003008 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d116      	bne.n	800415e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e023      	b.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d10d      	bne.n	8004184 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf0c      	ite	eq
 800417a:	2301      	moveq	r3, #1
 800417c:	2300      	movne	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	e00c      	b.n	800419e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	43da      	mvns	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4013      	ands	r3, r2
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d0b6      	beq.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041bc:	e051      	b.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041cc:	d123      	bne.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f043 0204 	orr.w	r2, r3, #4
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e046      	b.n	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800421c:	d021      	beq.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421e:	f7fe fef3 	bl	8003008 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d116      	bne.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f043 0220 	orr.w	r2, r3, #32
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e020      	b.n	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	d10c      	bne.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	43da      	mvns	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4013      	ands	r3, r2
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	e00b      	b.n	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	43da      	mvns	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d18d      	bne.n	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b8:	e02d      	b.n	8004316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f8ce 	bl	800445c <I2C_IsAcknowledgeFailed>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e02d      	b.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d0:	d021      	beq.n	8004316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fe fe99 	bl	8003008 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d116      	bne.n	8004316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e007      	b.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d1ca      	bne.n	80042ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800433a:	e02d      	b.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f88d 	bl	800445c <I2C_IsAcknowledgeFailed>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e02d      	b.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004352:	d021      	beq.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004354:	f7fe fe58 	bl	8003008 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	429a      	cmp	r2, r3
 8004362:	d302      	bcc.n	800436a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d116      	bne.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e007      	b.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d1ca      	bne.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043bc:	e042      	b.n	8004444 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d119      	bne.n	8004400 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0210 	mvn.w	r2, #16
 80043d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e029      	b.n	8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004400:	f7fe fe02 	bl	8003008 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	429a      	cmp	r2, r3
 800440e:	d302      	bcc.n	8004416 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d116      	bne.n	8004444 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e007      	b.n	8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b40      	cmp	r3, #64	; 0x40
 8004450:	d1b5      	bne.n	80043be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004472:	d11b      	bne.n	80044ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800447c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f043 0204 	orr.w	r2, r3, #4
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0cc      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d0:	4b68      	ldr	r3, [pc, #416]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d90c      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b65      	ldr	r3, [pc, #404]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b63      	ldr	r3, [pc, #396]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0b8      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004510:	4b59      	ldr	r3, [pc, #356]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a58      	ldr	r2, [pc, #352]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800451a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004528:	4b53      	ldr	r3, [pc, #332]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4a52      	ldr	r2, [pc, #328]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004534:	4b50      	ldr	r3, [pc, #320]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	494d      	ldr	r1, [pc, #308]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d044      	beq.n	80045dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b47      	ldr	r3, [pc, #284]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d119      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e07f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d003      	beq.n	800457a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004576:	2b03      	cmp	r3, #3
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800457a:	4b3f      	ldr	r3, [pc, #252]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e06f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458a:	4b3b      	ldr	r3, [pc, #236]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e067      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800459a:	4b37      	ldr	r3, [pc, #220]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f023 0203 	bic.w	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4934      	ldr	r1, [pc, #208]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ac:	f7fe fd2c 	bl	8003008 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b4:	f7fe fd28 	bl	8003008 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e04f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 020c 	and.w	r2, r3, #12
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	429a      	cmp	r2, r3
 80045da:	d1eb      	bne.n	80045b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045dc:	4b25      	ldr	r3, [pc, #148]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d20c      	bcs.n	8004604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	4b22      	ldr	r3, [pc, #136]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b20      	ldr	r3, [pc, #128]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e032      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004610:	4b19      	ldr	r3, [pc, #100]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4916      	ldr	r1, [pc, #88]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	490e      	ldr	r1, [pc, #56]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004642:	f000 f855 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8004646:	4602      	mov	r2, r0
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	490a      	ldr	r1, [pc, #40]	; (800467c <HAL_RCC_ClockConfig+0x1c0>)
 8004654:	5ccb      	ldrb	r3, [r1, r3]
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	4a09      	ldr	r2, [pc, #36]	; (8004680 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_ClockConfig+0x1c8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fc8c 	bl	8002f80 <HAL_InitTick>

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023c00 	.word	0x40023c00
 8004678:	40023800 	.word	0x40023800
 800467c:	0800832c 	.word	0x0800832c
 8004680:	20000000 	.word	0x20000000
 8004684:	20000004 	.word	0x20000004

08004688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800468c:	4b03      	ldr	r3, [pc, #12]	; (800469c <HAL_RCC_GetHCLKFreq+0x14>)
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000000 	.word	0x20000000

080046a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046a4:	f7ff fff0 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0a9b      	lsrs	r3, r3, #10
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	; (80046c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40023800 	.word	0x40023800
 80046c4:	0800833c 	.word	0x0800833c

080046c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046cc:	f7ff ffdc 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	0b5b      	lsrs	r3, r3, #13
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	4903      	ldr	r1, [pc, #12]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80046de:	5ccb      	ldrb	r3, [r1, r3]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40023800 	.word	0x40023800
 80046ec:	0800833c 	.word	0x0800833c

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f4:	b0ae      	sub	sp, #184	; 0xb8
 80046f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004716:	4bcb      	ldr	r3, [pc, #812]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x354>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 030c 	and.w	r3, r3, #12
 800471e:	2b0c      	cmp	r3, #12
 8004720:	f200 8206 	bhi.w	8004b30 <HAL_RCC_GetSysClockFreq+0x440>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004761 	.word	0x08004761
 8004730:	08004b31 	.word	0x08004b31
 8004734:	08004b31 	.word	0x08004b31
 8004738:	08004b31 	.word	0x08004b31
 800473c:	08004769 	.word	0x08004769
 8004740:	08004b31 	.word	0x08004b31
 8004744:	08004b31 	.word	0x08004b31
 8004748:	08004b31 	.word	0x08004b31
 800474c:	08004771 	.word	0x08004771
 8004750:	08004b31 	.word	0x08004b31
 8004754:	08004b31 	.word	0x08004b31
 8004758:	08004b31 	.word	0x08004b31
 800475c:	08004961 	.word	0x08004961
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004760:	4bb9      	ldr	r3, [pc, #740]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x358>)
 8004762:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004766:	e1e7      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004768:	4bb8      	ldr	r3, [pc, #736]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x35c>)
 800476a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800476e:	e1e3      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004770:	4bb4      	ldr	r3, [pc, #720]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x354>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800477c:	4bb1      	ldr	r3, [pc, #708]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x354>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d071      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004788:	4bae      	ldr	r3, [pc, #696]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x354>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	099b      	lsrs	r3, r3, #6
 800478e:	2200      	movs	r2, #0
 8004790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004794:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047a4:	2300      	movs	r3, #0
 80047a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047ae:	4622      	mov	r2, r4
 80047b0:	462b      	mov	r3, r5
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f04f 0100 	mov.w	r1, #0
 80047ba:	0159      	lsls	r1, r3, #5
 80047bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c0:	0150      	lsls	r0, r2, #5
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4621      	mov	r1, r4
 80047c8:	1a51      	subs	r1, r2, r1
 80047ca:	6439      	str	r1, [r7, #64]	; 0x40
 80047cc:	4629      	mov	r1, r5
 80047ce:	eb63 0301 	sbc.w	r3, r3, r1
 80047d2:	647b      	str	r3, [r7, #68]	; 0x44
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80047e0:	4649      	mov	r1, r9
 80047e2:	018b      	lsls	r3, r1, #6
 80047e4:	4641      	mov	r1, r8
 80047e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ea:	4641      	mov	r1, r8
 80047ec:	018a      	lsls	r2, r1, #6
 80047ee:	4641      	mov	r1, r8
 80047f0:	1a51      	subs	r1, r2, r1
 80047f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80047f4:	4649      	mov	r1, r9
 80047f6:	eb63 0301 	sbc.w	r3, r3, r1
 80047fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004808:	4649      	mov	r1, r9
 800480a:	00cb      	lsls	r3, r1, #3
 800480c:	4641      	mov	r1, r8
 800480e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004812:	4641      	mov	r1, r8
 8004814:	00ca      	lsls	r2, r1, #3
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	4603      	mov	r3, r0
 800481c:	4622      	mov	r2, r4
 800481e:	189b      	adds	r3, r3, r2
 8004820:	633b      	str	r3, [r7, #48]	; 0x30
 8004822:	462b      	mov	r3, r5
 8004824:	460a      	mov	r2, r1
 8004826:	eb42 0303 	adc.w	r3, r2, r3
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004838:	4629      	mov	r1, r5
 800483a:	024b      	lsls	r3, r1, #9
 800483c:	4621      	mov	r1, r4
 800483e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004842:	4621      	mov	r1, r4
 8004844:	024a      	lsls	r2, r1, #9
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800484e:	2200      	movs	r2, #0
 8004850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004854:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004858:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800485c:	f7fc fa64 	bl	8000d28 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4613      	mov	r3, r2
 8004866:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800486a:	e067      	b.n	800493c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800486c:	4b75      	ldr	r3, [pc, #468]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x354>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	099b      	lsrs	r3, r3, #6
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004878:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800487c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004884:	67bb      	str	r3, [r7, #120]	; 0x78
 8004886:	2300      	movs	r3, #0
 8004888:	67fb      	str	r3, [r7, #124]	; 0x7c
 800488a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800488e:	4622      	mov	r2, r4
 8004890:	462b      	mov	r3, r5
 8004892:	f04f 0000 	mov.w	r0, #0
 8004896:	f04f 0100 	mov.w	r1, #0
 800489a:	0159      	lsls	r1, r3, #5
 800489c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a0:	0150      	lsls	r0, r2, #5
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4621      	mov	r1, r4
 80048a8:	1a51      	subs	r1, r2, r1
 80048aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80048ac:	4629      	mov	r1, r5
 80048ae:	eb63 0301 	sbc.w	r3, r3, r1
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80048c0:	4649      	mov	r1, r9
 80048c2:	018b      	lsls	r3, r1, #6
 80048c4:	4641      	mov	r1, r8
 80048c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ca:	4641      	mov	r1, r8
 80048cc:	018a      	lsls	r2, r1, #6
 80048ce:	4641      	mov	r1, r8
 80048d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80048d4:	4649      	mov	r1, r9
 80048d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048ee:	4692      	mov	sl, r2
 80048f0:	469b      	mov	fp, r3
 80048f2:	4623      	mov	r3, r4
 80048f4:	eb1a 0303 	adds.w	r3, sl, r3
 80048f8:	623b      	str	r3, [r7, #32]
 80048fa:	462b      	mov	r3, r5
 80048fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800490e:	4629      	mov	r1, r5
 8004910:	028b      	lsls	r3, r1, #10
 8004912:	4621      	mov	r1, r4
 8004914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004918:	4621      	mov	r1, r4
 800491a:	028a      	lsls	r2, r1, #10
 800491c:	4610      	mov	r0, r2
 800491e:	4619      	mov	r1, r3
 8004920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004924:	2200      	movs	r2, #0
 8004926:	673b      	str	r3, [r7, #112]	; 0x70
 8004928:	677a      	str	r2, [r7, #116]	; 0x74
 800492a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800492e:	f7fc f9fb 	bl	8000d28 <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4613      	mov	r3, r2
 8004938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800493c:	4b41      	ldr	r3, [pc, #260]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x354>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	3301      	adds	r3, #1
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800494e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004952:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800495e:	e0eb      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004960:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x354>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800496c:	4b35      	ldr	r3, [pc, #212]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x354>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d06b      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004978:	4b32      	ldr	r3, [pc, #200]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x354>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	099b      	lsrs	r3, r3, #6
 800497e:	2200      	movs	r2, #0
 8004980:	66bb      	str	r3, [r7, #104]	; 0x68
 8004982:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498a:	663b      	str	r3, [r7, #96]	; 0x60
 800498c:	2300      	movs	r3, #0
 800498e:	667b      	str	r3, [r7, #100]	; 0x64
 8004990:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004994:	4622      	mov	r2, r4
 8004996:	462b      	mov	r3, r5
 8004998:	f04f 0000 	mov.w	r0, #0
 800499c:	f04f 0100 	mov.w	r1, #0
 80049a0:	0159      	lsls	r1, r3, #5
 80049a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a6:	0150      	lsls	r0, r2, #5
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4621      	mov	r1, r4
 80049ae:	1a51      	subs	r1, r2, r1
 80049b0:	61b9      	str	r1, [r7, #24]
 80049b2:	4629      	mov	r1, r5
 80049b4:	eb63 0301 	sbc.w	r3, r3, r1
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80049c6:	4659      	mov	r1, fp
 80049c8:	018b      	lsls	r3, r1, #6
 80049ca:	4651      	mov	r1, sl
 80049cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049d0:	4651      	mov	r1, sl
 80049d2:	018a      	lsls	r2, r1, #6
 80049d4:	4651      	mov	r1, sl
 80049d6:	ebb2 0801 	subs.w	r8, r2, r1
 80049da:	4659      	mov	r1, fp
 80049dc:	eb63 0901 	sbc.w	r9, r3, r1
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f4:	4690      	mov	r8, r2
 80049f6:	4699      	mov	r9, r3
 80049f8:	4623      	mov	r3, r4
 80049fa:	eb18 0303 	adds.w	r3, r8, r3
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	462b      	mov	r3, r5
 8004a02:	eb49 0303 	adc.w	r3, r9, r3
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a14:	4629      	mov	r1, r5
 8004a16:	024b      	lsls	r3, r1, #9
 8004a18:	4621      	mov	r1, r4
 8004a1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a1e:	4621      	mov	r1, r4
 8004a20:	024a      	lsls	r2, r1, #9
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a34:	f7fc f978 	bl	8000d28 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a42:	e065      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x420>
 8004a44:	40023800 	.word	0x40023800
 8004a48:	00f42400 	.word	0x00f42400
 8004a4c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a50:	4b3d      	ldr	r3, [pc, #244]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x458>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	099b      	lsrs	r3, r3, #6
 8004a56:	2200      	movs	r2, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a60:	653b      	str	r3, [r7, #80]	; 0x50
 8004a62:	2300      	movs	r3, #0
 8004a64:	657b      	str	r3, [r7, #84]	; 0x54
 8004a66:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004a6a:	4642      	mov	r2, r8
 8004a6c:	464b      	mov	r3, r9
 8004a6e:	f04f 0000 	mov.w	r0, #0
 8004a72:	f04f 0100 	mov.w	r1, #0
 8004a76:	0159      	lsls	r1, r3, #5
 8004a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a7c:	0150      	lsls	r0, r2, #5
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4641      	mov	r1, r8
 8004a84:	1a51      	subs	r1, r2, r1
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	4649      	mov	r1, r9
 8004a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	018b      	lsls	r3, r1, #6
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	018a      	lsls	r2, r1, #6
 8004aaa:	4651      	mov	r1, sl
 8004aac:	1a54      	subs	r4, r2, r1
 8004aae:	4659      	mov	r1, fp
 8004ab0:	eb63 0501 	sbc.w	r5, r3, r1
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	00eb      	lsls	r3, r5, #3
 8004abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac2:	00e2      	lsls	r2, r4, #3
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	4643      	mov	r3, r8
 8004aca:	18e3      	adds	r3, r4, r3
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	464b      	mov	r3, r9
 8004ad0:	eb45 0303 	adc.w	r3, r5, r3
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	028b      	lsls	r3, r1, #10
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aec:	4621      	mov	r1, r4
 8004aee:	028a      	lsls	r2, r1, #10
 8004af0:	4610      	mov	r0, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004af8:	2200      	movs	r2, #0
 8004afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004afc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004afe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b02:	f7fc f911 	bl	8000d28 <__aeabi_uldivmod>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b10:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	0f1b      	lsrs	r3, r3, #28
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b2e:	e003      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	37b8      	adds	r7, #184	; 0xb8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	00f42400 	.word	0x00f42400

08004b50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e28d      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 8083 	beq.w	8004c76 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b70:	4b94      	ldr	r3, [pc, #592]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 030c 	and.w	r3, r3, #12
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d019      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b7c:	4b91      	ldr	r3, [pc, #580]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d106      	bne.n	8004b96 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b88:	4b8e      	ldr	r3, [pc, #568]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b94:	d00c      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b96:	4b8b      	ldr	r3, [pc, #556]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d112      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ba2:	4b88      	ldr	r3, [pc, #544]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bae:	d10b      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb0:	4b84      	ldr	r3, [pc, #528]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d05b      	beq.n	8004c74 <HAL_RCC_OscConfig+0x124>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d157      	bne.n	8004c74 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e25a      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd0:	d106      	bne.n	8004be0 <HAL_RCC_OscConfig+0x90>
 8004bd2:	4b7c      	ldr	r3, [pc, #496]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a7b      	ldr	r2, [pc, #492]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e01d      	b.n	8004c1c <HAL_RCC_OscConfig+0xcc>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be8:	d10c      	bne.n	8004c04 <HAL_RCC_OscConfig+0xb4>
 8004bea:	4b76      	ldr	r3, [pc, #472]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a75      	ldr	r2, [pc, #468]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4b73      	ldr	r3, [pc, #460]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a72      	ldr	r2, [pc, #456]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e00b      	b.n	8004c1c <HAL_RCC_OscConfig+0xcc>
 8004c04:	4b6f      	ldr	r3, [pc, #444]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a6e      	ldr	r2, [pc, #440]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	4b6c      	ldr	r3, [pc, #432]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a6b      	ldr	r2, [pc, #428]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d013      	beq.n	8004c4c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7fe f9f0 	bl	8003008 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c2c:	f7fe f9ec 	bl	8003008 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b64      	cmp	r3, #100	; 0x64
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e21f      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3e:	4b61      	ldr	r3, [pc, #388]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0xdc>
 8004c4a:	e014      	b.n	8004c76 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4c:	f7fe f9dc 	bl	8003008 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c54:	f7fe f9d8 	bl	8003008 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e20b      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c66:	4b57      	ldr	r3, [pc, #348]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f0      	bne.n	8004c54 <HAL_RCC_OscConfig+0x104>
 8004c72:	e000      	b.n	8004c76 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d06f      	beq.n	8004d62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c82:	4b50      	ldr	r3, [pc, #320]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d017      	beq.n	8004cbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c8e:	4b4d      	ldr	r3, [pc, #308]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d105      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c9a:	4b4a      	ldr	r3, [pc, #296]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ca6:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cae:	2b0c      	cmp	r3, #12
 8004cb0:	d11c      	bne.n	8004cec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb2:	4b44      	ldr	r3, [pc, #272]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d116      	bne.n	8004cec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	4b41      	ldr	r3, [pc, #260]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x186>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e1d3      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd6:	4b3b      	ldr	r3, [pc, #236]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4937      	ldr	r1, [pc, #220]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cea:	e03a      	b.n	8004d62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d020      	beq.n	8004d36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf4:	4b34      	ldr	r3, [pc, #208]	; (8004dc8 <HAL_RCC_OscConfig+0x278>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fe f985 	bl	8003008 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d02:	f7fe f981 	bl	8003008 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e1b4      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d14:	4b2b      	ldr	r3, [pc, #172]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d20:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4925      	ldr	r1, [pc, #148]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
 8004d34:	e015      	b.n	8004d62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <HAL_RCC_OscConfig+0x278>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fe f964 	bl	8003008 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d44:	f7fe f960 	bl	8003008 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e193      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d56:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d036      	beq.n	8004ddc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d76:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <HAL_RCC_OscConfig+0x27c>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fe f944 	bl	8003008 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d84:	f7fe f940 	bl	8003008 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e173      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_OscConfig+0x274>)
 8004d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x234>
 8004da2:	e01b      	b.n	8004ddc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_RCC_OscConfig+0x27c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004daa:	f7fe f92d 	bl	8003008 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db0:	e00e      	b.n	8004dd0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db2:	f7fe f929 	bl	8003008 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d907      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e15c      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	42470000 	.word	0x42470000
 8004dcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd0:	4b8a      	ldr	r3, [pc, #552]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ea      	bne.n	8004db2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8097 	beq.w	8004f18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dea:	2300      	movs	r3, #0
 8004dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dee:	4b83      	ldr	r3, [pc, #524]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10f      	bne.n	8004e1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	4b7f      	ldr	r3, [pc, #508]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	4a7e      	ldr	r2, [pc, #504]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e08:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0a:	4b7c      	ldr	r3, [pc, #496]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e12:	60bb      	str	r3, [r7, #8]
 8004e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e16:	2301      	movs	r3, #1
 8004e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1a:	4b79      	ldr	r3, [pc, #484]	; (8005000 <HAL_RCC_OscConfig+0x4b0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d118      	bne.n	8004e58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e26:	4b76      	ldr	r3, [pc, #472]	; (8005000 <HAL_RCC_OscConfig+0x4b0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a75      	ldr	r2, [pc, #468]	; (8005000 <HAL_RCC_OscConfig+0x4b0>)
 8004e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e32:	f7fe f8e9 	bl	8003008 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3a:	f7fe f8e5 	bl	8003008 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e118      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4c:	4b6c      	ldr	r3, [pc, #432]	; (8005000 <HAL_RCC_OscConfig+0x4b0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d106      	bne.n	8004e6e <HAL_RCC_OscConfig+0x31e>
 8004e60:	4b66      	ldr	r3, [pc, #408]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e64:	4a65      	ldr	r2, [pc, #404]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6c:	e01c      	b.n	8004ea8 <HAL_RCC_OscConfig+0x358>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b05      	cmp	r3, #5
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCC_OscConfig+0x340>
 8004e76:	4b61      	ldr	r3, [pc, #388]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	4a60      	ldr	r2, [pc, #384]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004e7c:	f043 0304 	orr.w	r3, r3, #4
 8004e80:	6713      	str	r3, [r2, #112]	; 0x70
 8004e82:	4b5e      	ldr	r3, [pc, #376]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	4a5d      	ldr	r2, [pc, #372]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8e:	e00b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x358>
 8004e90:	4b5a      	ldr	r3, [pc, #360]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e94:	4a59      	ldr	r2, [pc, #356]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004e96:	f023 0301 	bic.w	r3, r3, #1
 8004e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9c:	4b57      	ldr	r3, [pc, #348]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	4a56      	ldr	r2, [pc, #344]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004ea2:	f023 0304 	bic.w	r3, r3, #4
 8004ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d015      	beq.n	8004edc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb0:	f7fe f8aa 	bl	8003008 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb8:	f7fe f8a6 	bl	8003008 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e0d7      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ece:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ee      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x368>
 8004eda:	e014      	b.n	8004f06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004edc:	f7fe f894 	bl	8003008 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee4:	f7fe f890 	bl	8003008 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e0c1      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efa:	4b40      	ldr	r3, [pc, #256]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1ee      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0c:	4b3b      	ldr	r3, [pc, #236]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	4a3a      	ldr	r2, [pc, #232]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80ad 	beq.w	800507c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f22:	4b36      	ldr	r3, [pc, #216]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d060      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d145      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b33      	ldr	r3, [pc, #204]	; (8005004 <HAL_RCC_OscConfig+0x4b4>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fe f864 	bl	8003008 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fe f860 	bl	8003008 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e093      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	019b      	lsls	r3, r3, #6
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	061b      	lsls	r3, r3, #24
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	071b      	lsls	r3, r3, #28
 8004f8e:	491b      	ldr	r1, [pc, #108]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f94:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <HAL_RCC_OscConfig+0x4b4>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9a:	f7fe f835 	bl	8003008 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa2:	f7fe f831 	bl	8003008 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e064      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb4:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x452>
 8004fc0:	e05c      	b.n	800507c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc2:	4b10      	ldr	r3, [pc, #64]	; (8005004 <HAL_RCC_OscConfig+0x4b4>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fe f81e 	bl	8003008 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fe f81a 	bl	8003008 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e04d      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_RCC_OscConfig+0x4ac>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x480>
 8004fee:	e045      	b.n	800507c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d107      	bne.n	8005008 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e040      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40007000 	.word	0x40007000
 8005004:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005008:	4b1f      	ldr	r3, [pc, #124]	; (8005088 <HAL_RCC_OscConfig+0x538>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d030      	beq.n	8005078 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005020:	429a      	cmp	r2, r3
 8005022:	d129      	bne.n	8005078 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d122      	bne.n	8005078 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005038:	4013      	ands	r3, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800503e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005040:	4293      	cmp	r3, r2
 8005042:	d119      	bne.n	8005078 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	3b01      	subs	r3, #1
 8005052:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d10f      	bne.n	8005078 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d107      	bne.n	8005078 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40023800 	.word	0x40023800

0800508c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e03f      	b.n	800511e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fd fdce 	bl	8002c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2224      	movs	r2, #36	; 0x24
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f929 	bl	8005328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b08a      	sub	sp, #40	; 0x28
 800512a:	af02      	add	r7, sp, #8
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	603b      	str	r3, [r7, #0]
 8005132:	4613      	mov	r3, r2
 8005134:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b20      	cmp	r3, #32
 8005144:	d17c      	bne.n	8005240 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_UART_Transmit+0x2c>
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e075      	b.n	8005242 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_UART_Transmit+0x3e>
 8005160:	2302      	movs	r3, #2
 8005162:	e06e      	b.n	8005242 <HAL_UART_Transmit+0x11c>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2221      	movs	r2, #33	; 0x21
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800517a:	f7fd ff45 	bl	8003008 <HAL_GetTick>
 800517e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005194:	d108      	bne.n	80051a8 <HAL_UART_Transmit+0x82>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	e003      	b.n	80051b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051b8:	e02a      	b.n	8005210 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2200      	movs	r2, #0
 80051c2:	2180      	movs	r1, #128	; 0x80
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f840 	bl	800524a <UART_WaitOnFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e036      	b.n	8005242 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10b      	bne.n	80051f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	3302      	adds	r3, #2
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	e007      	b.n	8005202 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	781a      	ldrb	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	3301      	adds	r3, #1
 8005200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1cf      	bne.n	80051ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2200      	movs	r2, #0
 8005222:	2140      	movs	r1, #64	; 0x40
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f810 	bl	800524a <UART_WaitOnFlagUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e006      	b.n	8005242 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	e000      	b.n	8005242 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005240:	2302      	movs	r3, #2
  }
}
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b090      	sub	sp, #64	; 0x40
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	603b      	str	r3, [r7, #0]
 8005256:	4613      	mov	r3, r2
 8005258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525a:	e050      	b.n	80052fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005262:	d04c      	beq.n	80052fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0x30>
 800526a:	f7fd fecd 	bl	8003008 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005276:	429a      	cmp	r2, r3
 8005278:	d241      	bcs.n	80052fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800529a:	637a      	str	r2, [r7, #52]	; 0x34
 800529c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e5      	bne.n	800527a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3314      	adds	r3, #20
 80052b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	613b      	str	r3, [r7, #16]
   return(result);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ce:	623a      	str	r2, [r7, #32]
 80052d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	69f9      	ldr	r1, [r7, #28]
 80052d4:	6a3a      	ldr	r2, [r7, #32]
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	61bb      	str	r3, [r7, #24]
   return(result);
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e5      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e00f      	b.n	800531e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4013      	ands	r3, r2
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	429a      	cmp	r2, r3
 800531a:	d09f      	beq.n	800525c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3740      	adds	r7, #64	; 0x40
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800532c:	b0c0      	sub	sp, #256	; 0x100
 800532e:	af00      	add	r7, sp, #0
 8005330:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005344:	68d9      	ldr	r1, [r3, #12]
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	ea40 0301 	orr.w	r3, r0, r1
 8005350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	431a      	orrs	r2, r3
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	431a      	orrs	r2, r3
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005380:	f021 010c 	bic.w	r1, r1, #12
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800538e:	430b      	orrs	r3, r1
 8005390:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a2:	6999      	ldr	r1, [r3, #24]
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	ea40 0301 	orr.w	r3, r0, r1
 80053ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b8f      	ldr	r3, [pc, #572]	; (80055f4 <UART_SetConfig+0x2cc>)
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d005      	beq.n	80053c8 <UART_SetConfig+0xa0>
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b8d      	ldr	r3, [pc, #564]	; (80055f8 <UART_SetConfig+0x2d0>)
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d104      	bne.n	80053d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053c8:	f7ff f97e 	bl	80046c8 <HAL_RCC_GetPCLK2Freq>
 80053cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053d0:	e003      	b.n	80053da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053d2:	f7ff f965 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 80053d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e4:	f040 810c 	bne.w	8005600 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ec:	2200      	movs	r2, #0
 80053ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053fa:	4622      	mov	r2, r4
 80053fc:	462b      	mov	r3, r5
 80053fe:	1891      	adds	r1, r2, r2
 8005400:	65b9      	str	r1, [r7, #88]	; 0x58
 8005402:	415b      	adcs	r3, r3
 8005404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005406:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800540a:	4621      	mov	r1, r4
 800540c:	eb12 0801 	adds.w	r8, r2, r1
 8005410:	4629      	mov	r1, r5
 8005412:	eb43 0901 	adc.w	r9, r3, r1
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800542a:	4690      	mov	r8, r2
 800542c:	4699      	mov	r9, r3
 800542e:	4623      	mov	r3, r4
 8005430:	eb18 0303 	adds.w	r3, r8, r3
 8005434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005438:	462b      	mov	r3, r5
 800543a:	eb49 0303 	adc.w	r3, r9, r3
 800543e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800544e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005452:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005456:	460b      	mov	r3, r1
 8005458:	18db      	adds	r3, r3, r3
 800545a:	653b      	str	r3, [r7, #80]	; 0x50
 800545c:	4613      	mov	r3, r2
 800545e:	eb42 0303 	adc.w	r3, r2, r3
 8005462:	657b      	str	r3, [r7, #84]	; 0x54
 8005464:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005468:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800546c:	f7fb fc5c 	bl	8000d28 <__aeabi_uldivmod>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4b61      	ldr	r3, [pc, #388]	; (80055fc <UART_SetConfig+0x2d4>)
 8005476:	fba3 2302 	umull	r2, r3, r3, r2
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	011c      	lsls	r4, r3, #4
 800547e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005482:	2200      	movs	r2, #0
 8005484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005488:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800548c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005490:	4642      	mov	r2, r8
 8005492:	464b      	mov	r3, r9
 8005494:	1891      	adds	r1, r2, r2
 8005496:	64b9      	str	r1, [r7, #72]	; 0x48
 8005498:	415b      	adcs	r3, r3
 800549a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800549c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054a0:	4641      	mov	r1, r8
 80054a2:	eb12 0a01 	adds.w	sl, r2, r1
 80054a6:	4649      	mov	r1, r9
 80054a8:	eb43 0b01 	adc.w	fp, r3, r1
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054c0:	4692      	mov	sl, r2
 80054c2:	469b      	mov	fp, r3
 80054c4:	4643      	mov	r3, r8
 80054c6:	eb1a 0303 	adds.w	r3, sl, r3
 80054ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054ce:	464b      	mov	r3, r9
 80054d0:	eb4b 0303 	adc.w	r3, fp, r3
 80054d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054ec:	460b      	mov	r3, r1
 80054ee:	18db      	adds	r3, r3, r3
 80054f0:	643b      	str	r3, [r7, #64]	; 0x40
 80054f2:	4613      	mov	r3, r2
 80054f4:	eb42 0303 	adc.w	r3, r2, r3
 80054f8:	647b      	str	r3, [r7, #68]	; 0x44
 80054fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005502:	f7fb fc11 	bl	8000d28 <__aeabi_uldivmod>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4611      	mov	r1, r2
 800550c:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <UART_SetConfig+0x2d4>)
 800550e:	fba3 2301 	umull	r2, r3, r3, r1
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	2264      	movs	r2, #100	; 0x64
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	1acb      	subs	r3, r1, r3
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005522:	4b36      	ldr	r3, [pc, #216]	; (80055fc <UART_SetConfig+0x2d4>)
 8005524:	fba3 2302 	umull	r2, r3, r3, r2
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005530:	441c      	add	r4, r3
 8005532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005536:	2200      	movs	r2, #0
 8005538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800553c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005540:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005544:	4642      	mov	r2, r8
 8005546:	464b      	mov	r3, r9
 8005548:	1891      	adds	r1, r2, r2
 800554a:	63b9      	str	r1, [r7, #56]	; 0x38
 800554c:	415b      	adcs	r3, r3
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005550:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005554:	4641      	mov	r1, r8
 8005556:	1851      	adds	r1, r2, r1
 8005558:	6339      	str	r1, [r7, #48]	; 0x30
 800555a:	4649      	mov	r1, r9
 800555c:	414b      	adcs	r3, r1
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800556c:	4659      	mov	r1, fp
 800556e:	00cb      	lsls	r3, r1, #3
 8005570:	4651      	mov	r1, sl
 8005572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005576:	4651      	mov	r1, sl
 8005578:	00ca      	lsls	r2, r1, #3
 800557a:	4610      	mov	r0, r2
 800557c:	4619      	mov	r1, r3
 800557e:	4603      	mov	r3, r0
 8005580:	4642      	mov	r2, r8
 8005582:	189b      	adds	r3, r3, r2
 8005584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005588:	464b      	mov	r3, r9
 800558a:	460a      	mov	r2, r1
 800558c:	eb42 0303 	adc.w	r3, r2, r3
 8005590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055a8:	460b      	mov	r3, r1
 80055aa:	18db      	adds	r3, r3, r3
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ae:	4613      	mov	r3, r2
 80055b0:	eb42 0303 	adc.w	r3, r2, r3
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055be:	f7fb fbb3 	bl	8000d28 <__aeabi_uldivmod>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <UART_SetConfig+0x2d4>)
 80055c8:	fba3 1302 	umull	r1, r3, r3, r2
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	2164      	movs	r1, #100	; 0x64
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	3332      	adds	r3, #50	; 0x32
 80055da:	4a08      	ldr	r2, [pc, #32]	; (80055fc <UART_SetConfig+0x2d4>)
 80055dc:	fba2 2303 	umull	r2, r3, r2, r3
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	f003 0207 	and.w	r2, r3, #7
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4422      	add	r2, r4
 80055ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055f0:	e105      	b.n	80057fe <UART_SetConfig+0x4d6>
 80055f2:	bf00      	nop
 80055f4:	40011000 	.word	0x40011000
 80055f8:	40011400 	.word	0x40011400
 80055fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005604:	2200      	movs	r2, #0
 8005606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800560a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800560e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005612:	4642      	mov	r2, r8
 8005614:	464b      	mov	r3, r9
 8005616:	1891      	adds	r1, r2, r2
 8005618:	6239      	str	r1, [r7, #32]
 800561a:	415b      	adcs	r3, r3
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
 800561e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005622:	4641      	mov	r1, r8
 8005624:	1854      	adds	r4, r2, r1
 8005626:	4649      	mov	r1, r9
 8005628:	eb43 0501 	adc.w	r5, r3, r1
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	00eb      	lsls	r3, r5, #3
 8005636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800563a:	00e2      	lsls	r2, r4, #3
 800563c:	4614      	mov	r4, r2
 800563e:	461d      	mov	r5, r3
 8005640:	4643      	mov	r3, r8
 8005642:	18e3      	adds	r3, r4, r3
 8005644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005648:	464b      	mov	r3, r9
 800564a:	eb45 0303 	adc.w	r3, r5, r3
 800564e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800565e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800566e:	4629      	mov	r1, r5
 8005670:	008b      	lsls	r3, r1, #2
 8005672:	4621      	mov	r1, r4
 8005674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005678:	4621      	mov	r1, r4
 800567a:	008a      	lsls	r2, r1, #2
 800567c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005680:	f7fb fb52 	bl	8000d28 <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4b60      	ldr	r3, [pc, #384]	; (800580c <UART_SetConfig+0x4e4>)
 800568a:	fba3 2302 	umull	r2, r3, r3, r2
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	011c      	lsls	r4, r3, #4
 8005692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005696:	2200      	movs	r2, #0
 8005698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800569c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056a4:	4642      	mov	r2, r8
 80056a6:	464b      	mov	r3, r9
 80056a8:	1891      	adds	r1, r2, r2
 80056aa:	61b9      	str	r1, [r7, #24]
 80056ac:	415b      	adcs	r3, r3
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056b4:	4641      	mov	r1, r8
 80056b6:	1851      	adds	r1, r2, r1
 80056b8:	6139      	str	r1, [r7, #16]
 80056ba:	4649      	mov	r1, r9
 80056bc:	414b      	adcs	r3, r1
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056cc:	4659      	mov	r1, fp
 80056ce:	00cb      	lsls	r3, r1, #3
 80056d0:	4651      	mov	r1, sl
 80056d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056d6:	4651      	mov	r1, sl
 80056d8:	00ca      	lsls	r2, r1, #3
 80056da:	4610      	mov	r0, r2
 80056dc:	4619      	mov	r1, r3
 80056de:	4603      	mov	r3, r0
 80056e0:	4642      	mov	r2, r8
 80056e2:	189b      	adds	r3, r3, r2
 80056e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056e8:	464b      	mov	r3, r9
 80056ea:	460a      	mov	r2, r1
 80056ec:	eb42 0303 	adc.w	r3, r2, r3
 80056f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80056fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800570c:	4649      	mov	r1, r9
 800570e:	008b      	lsls	r3, r1, #2
 8005710:	4641      	mov	r1, r8
 8005712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005716:	4641      	mov	r1, r8
 8005718:	008a      	lsls	r2, r1, #2
 800571a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800571e:	f7fb fb03 	bl	8000d28 <__aeabi_uldivmod>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4b39      	ldr	r3, [pc, #228]	; (800580c <UART_SetConfig+0x4e4>)
 8005728:	fba3 1302 	umull	r1, r3, r3, r2
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	2164      	movs	r1, #100	; 0x64
 8005730:	fb01 f303 	mul.w	r3, r1, r3
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	3332      	adds	r3, #50	; 0x32
 800573a:	4a34      	ldr	r2, [pc, #208]	; (800580c <UART_SetConfig+0x4e4>)
 800573c:	fba2 2303 	umull	r2, r3, r2, r3
 8005740:	095b      	lsrs	r3, r3, #5
 8005742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005746:	441c      	add	r4, r3
 8005748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800574c:	2200      	movs	r2, #0
 800574e:	673b      	str	r3, [r7, #112]	; 0x70
 8005750:	677a      	str	r2, [r7, #116]	; 0x74
 8005752:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005756:	4642      	mov	r2, r8
 8005758:	464b      	mov	r3, r9
 800575a:	1891      	adds	r1, r2, r2
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	415b      	adcs	r3, r3
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005766:	4641      	mov	r1, r8
 8005768:	1851      	adds	r1, r2, r1
 800576a:	6039      	str	r1, [r7, #0]
 800576c:	4649      	mov	r1, r9
 800576e:	414b      	adcs	r3, r1
 8005770:	607b      	str	r3, [r7, #4]
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800577e:	4659      	mov	r1, fp
 8005780:	00cb      	lsls	r3, r1, #3
 8005782:	4651      	mov	r1, sl
 8005784:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005788:	4651      	mov	r1, sl
 800578a:	00ca      	lsls	r2, r1, #3
 800578c:	4610      	mov	r0, r2
 800578e:	4619      	mov	r1, r3
 8005790:	4603      	mov	r3, r0
 8005792:	4642      	mov	r2, r8
 8005794:	189b      	adds	r3, r3, r2
 8005796:	66bb      	str	r3, [r7, #104]	; 0x68
 8005798:	464b      	mov	r3, r9
 800579a:	460a      	mov	r2, r1
 800579c:	eb42 0303 	adc.w	r3, r2, r3
 80057a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	663b      	str	r3, [r7, #96]	; 0x60
 80057ac:	667a      	str	r2, [r7, #100]	; 0x64
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057ba:	4649      	mov	r1, r9
 80057bc:	008b      	lsls	r3, r1, #2
 80057be:	4641      	mov	r1, r8
 80057c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c4:	4641      	mov	r1, r8
 80057c6:	008a      	lsls	r2, r1, #2
 80057c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057cc:	f7fb faac 	bl	8000d28 <__aeabi_uldivmod>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4b0d      	ldr	r3, [pc, #52]	; (800580c <UART_SetConfig+0x4e4>)
 80057d6:	fba3 1302 	umull	r1, r3, r3, r2
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2164      	movs	r1, #100	; 0x64
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	3332      	adds	r3, #50	; 0x32
 80057e8:	4a08      	ldr	r2, [pc, #32]	; (800580c <UART_SetConfig+0x4e4>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	f003 020f 	and.w	r2, r3, #15
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4422      	add	r2, r4
 80057fc:	609a      	str	r2, [r3, #8]
}
 80057fe:	bf00      	nop
 8005800:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005804:	46bd      	mov	sp, r7
 8005806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800580a:	bf00      	nop
 800580c:	51eb851f 	.word	0x51eb851f

08005810 <__errno>:
 8005810:	4b01      	ldr	r3, [pc, #4]	; (8005818 <__errno+0x8>)
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	2000000c 	.word	0x2000000c

0800581c <__libc_init_array>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	4d0d      	ldr	r5, [pc, #52]	; (8005854 <__libc_init_array+0x38>)
 8005820:	4c0d      	ldr	r4, [pc, #52]	; (8005858 <__libc_init_array+0x3c>)
 8005822:	1b64      	subs	r4, r4, r5
 8005824:	10a4      	asrs	r4, r4, #2
 8005826:	2600      	movs	r6, #0
 8005828:	42a6      	cmp	r6, r4
 800582a:	d109      	bne.n	8005840 <__libc_init_array+0x24>
 800582c:	4d0b      	ldr	r5, [pc, #44]	; (800585c <__libc_init_array+0x40>)
 800582e:	4c0c      	ldr	r4, [pc, #48]	; (8005860 <__libc_init_array+0x44>)
 8005830:	f002 fd58 	bl	80082e4 <_init>
 8005834:	1b64      	subs	r4, r4, r5
 8005836:	10a4      	asrs	r4, r4, #2
 8005838:	2600      	movs	r6, #0
 800583a:	42a6      	cmp	r6, r4
 800583c:	d105      	bne.n	800584a <__libc_init_array+0x2e>
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	f855 3b04 	ldr.w	r3, [r5], #4
 8005844:	4798      	blx	r3
 8005846:	3601      	adds	r6, #1
 8005848:	e7ee      	b.n	8005828 <__libc_init_array+0xc>
 800584a:	f855 3b04 	ldr.w	r3, [r5], #4
 800584e:	4798      	blx	r3
 8005850:	3601      	adds	r6, #1
 8005852:	e7f2      	b.n	800583a <__libc_init_array+0x1e>
 8005854:	08008724 	.word	0x08008724
 8005858:	08008724 	.word	0x08008724
 800585c:	08008724 	.word	0x08008724
 8005860:	08008728 	.word	0x08008728

08005864 <malloc>:
 8005864:	4b02      	ldr	r3, [pc, #8]	; (8005870 <malloc+0xc>)
 8005866:	4601      	mov	r1, r0
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	f000 b88d 	b.w	8005988 <_malloc_r>
 800586e:	bf00      	nop
 8005870:	2000000c 	.word	0x2000000c

08005874 <free>:
 8005874:	4b02      	ldr	r3, [pc, #8]	; (8005880 <free+0xc>)
 8005876:	4601      	mov	r1, r0
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	f000 b819 	b.w	80058b0 <_free_r>
 800587e:	bf00      	nop
 8005880:	2000000c 	.word	0x2000000c

08005884 <memcpy>:
 8005884:	440a      	add	r2, r1
 8005886:	4291      	cmp	r1, r2
 8005888:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800588c:	d100      	bne.n	8005890 <memcpy+0xc>
 800588e:	4770      	bx	lr
 8005890:	b510      	push	{r4, lr}
 8005892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589a:	4291      	cmp	r1, r2
 800589c:	d1f9      	bne.n	8005892 <memcpy+0xe>
 800589e:	bd10      	pop	{r4, pc}

080058a0 <memset>:
 80058a0:	4402      	add	r2, r0
 80058a2:	4603      	mov	r3, r0
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d100      	bne.n	80058aa <memset+0xa>
 80058a8:	4770      	bx	lr
 80058aa:	f803 1b01 	strb.w	r1, [r3], #1
 80058ae:	e7f9      	b.n	80058a4 <memset+0x4>

080058b0 <_free_r>:
 80058b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058b2:	2900      	cmp	r1, #0
 80058b4:	d044      	beq.n	8005940 <_free_r+0x90>
 80058b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ba:	9001      	str	r0, [sp, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f1a1 0404 	sub.w	r4, r1, #4
 80058c2:	bfb8      	it	lt
 80058c4:	18e4      	addlt	r4, r4, r3
 80058c6:	f001 fcdf 	bl	8007288 <__malloc_lock>
 80058ca:	4a1e      	ldr	r2, [pc, #120]	; (8005944 <_free_r+0x94>)
 80058cc:	9801      	ldr	r0, [sp, #4]
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	b933      	cbnz	r3, 80058e0 <_free_r+0x30>
 80058d2:	6063      	str	r3, [r4, #4]
 80058d4:	6014      	str	r4, [r2, #0]
 80058d6:	b003      	add	sp, #12
 80058d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058dc:	f001 bcda 	b.w	8007294 <__malloc_unlock>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d908      	bls.n	80058f6 <_free_r+0x46>
 80058e4:	6825      	ldr	r5, [r4, #0]
 80058e6:	1961      	adds	r1, r4, r5
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf01      	itttt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	1949      	addeq	r1, r1, r5
 80058f2:	6021      	streq	r1, [r4, #0]
 80058f4:	e7ed      	b.n	80058d2 <_free_r+0x22>
 80058f6:	461a      	mov	r2, r3
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	b10b      	cbz	r3, 8005900 <_free_r+0x50>
 80058fc:	42a3      	cmp	r3, r4
 80058fe:	d9fa      	bls.n	80058f6 <_free_r+0x46>
 8005900:	6811      	ldr	r1, [r2, #0]
 8005902:	1855      	adds	r5, r2, r1
 8005904:	42a5      	cmp	r5, r4
 8005906:	d10b      	bne.n	8005920 <_free_r+0x70>
 8005908:	6824      	ldr	r4, [r4, #0]
 800590a:	4421      	add	r1, r4
 800590c:	1854      	adds	r4, r2, r1
 800590e:	42a3      	cmp	r3, r4
 8005910:	6011      	str	r1, [r2, #0]
 8005912:	d1e0      	bne.n	80058d6 <_free_r+0x26>
 8005914:	681c      	ldr	r4, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	6053      	str	r3, [r2, #4]
 800591a:	4421      	add	r1, r4
 800591c:	6011      	str	r1, [r2, #0]
 800591e:	e7da      	b.n	80058d6 <_free_r+0x26>
 8005920:	d902      	bls.n	8005928 <_free_r+0x78>
 8005922:	230c      	movs	r3, #12
 8005924:	6003      	str	r3, [r0, #0]
 8005926:	e7d6      	b.n	80058d6 <_free_r+0x26>
 8005928:	6825      	ldr	r5, [r4, #0]
 800592a:	1961      	adds	r1, r4, r5
 800592c:	428b      	cmp	r3, r1
 800592e:	bf04      	itt	eq
 8005930:	6819      	ldreq	r1, [r3, #0]
 8005932:	685b      	ldreq	r3, [r3, #4]
 8005934:	6063      	str	r3, [r4, #4]
 8005936:	bf04      	itt	eq
 8005938:	1949      	addeq	r1, r1, r5
 800593a:	6021      	streq	r1, [r4, #0]
 800593c:	6054      	str	r4, [r2, #4]
 800593e:	e7ca      	b.n	80058d6 <_free_r+0x26>
 8005940:	b003      	add	sp, #12
 8005942:	bd30      	pop	{r4, r5, pc}
 8005944:	200002f4 	.word	0x200002f4

08005948 <sbrk_aligned>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	4e0e      	ldr	r6, [pc, #56]	; (8005984 <sbrk_aligned+0x3c>)
 800594c:	460c      	mov	r4, r1
 800594e:	6831      	ldr	r1, [r6, #0]
 8005950:	4605      	mov	r5, r0
 8005952:	b911      	cbnz	r1, 800595a <sbrk_aligned+0x12>
 8005954:	f000 fd0e 	bl	8006374 <_sbrk_r>
 8005958:	6030      	str	r0, [r6, #0]
 800595a:	4621      	mov	r1, r4
 800595c:	4628      	mov	r0, r5
 800595e:	f000 fd09 	bl	8006374 <_sbrk_r>
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	d00a      	beq.n	800597c <sbrk_aligned+0x34>
 8005966:	1cc4      	adds	r4, r0, #3
 8005968:	f024 0403 	bic.w	r4, r4, #3
 800596c:	42a0      	cmp	r0, r4
 800596e:	d007      	beq.n	8005980 <sbrk_aligned+0x38>
 8005970:	1a21      	subs	r1, r4, r0
 8005972:	4628      	mov	r0, r5
 8005974:	f000 fcfe 	bl	8006374 <_sbrk_r>
 8005978:	3001      	adds	r0, #1
 800597a:	d101      	bne.n	8005980 <sbrk_aligned+0x38>
 800597c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005980:	4620      	mov	r0, r4
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	200002f8 	.word	0x200002f8

08005988 <_malloc_r>:
 8005988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800598c:	1ccd      	adds	r5, r1, #3
 800598e:	f025 0503 	bic.w	r5, r5, #3
 8005992:	3508      	adds	r5, #8
 8005994:	2d0c      	cmp	r5, #12
 8005996:	bf38      	it	cc
 8005998:	250c      	movcc	r5, #12
 800599a:	2d00      	cmp	r5, #0
 800599c:	4607      	mov	r7, r0
 800599e:	db01      	blt.n	80059a4 <_malloc_r+0x1c>
 80059a0:	42a9      	cmp	r1, r5
 80059a2:	d905      	bls.n	80059b0 <_malloc_r+0x28>
 80059a4:	230c      	movs	r3, #12
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	2600      	movs	r6, #0
 80059aa:	4630      	mov	r0, r6
 80059ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b0:	4e2e      	ldr	r6, [pc, #184]	; (8005a6c <_malloc_r+0xe4>)
 80059b2:	f001 fc69 	bl	8007288 <__malloc_lock>
 80059b6:	6833      	ldr	r3, [r6, #0]
 80059b8:	461c      	mov	r4, r3
 80059ba:	bb34      	cbnz	r4, 8005a0a <_malloc_r+0x82>
 80059bc:	4629      	mov	r1, r5
 80059be:	4638      	mov	r0, r7
 80059c0:	f7ff ffc2 	bl	8005948 <sbrk_aligned>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	4604      	mov	r4, r0
 80059c8:	d14d      	bne.n	8005a66 <_malloc_r+0xde>
 80059ca:	6834      	ldr	r4, [r6, #0]
 80059cc:	4626      	mov	r6, r4
 80059ce:	2e00      	cmp	r6, #0
 80059d0:	d140      	bne.n	8005a54 <_malloc_r+0xcc>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	4631      	mov	r1, r6
 80059d6:	4638      	mov	r0, r7
 80059d8:	eb04 0803 	add.w	r8, r4, r3
 80059dc:	f000 fcca 	bl	8006374 <_sbrk_r>
 80059e0:	4580      	cmp	r8, r0
 80059e2:	d13a      	bne.n	8005a5a <_malloc_r+0xd2>
 80059e4:	6821      	ldr	r1, [r4, #0]
 80059e6:	3503      	adds	r5, #3
 80059e8:	1a6d      	subs	r5, r5, r1
 80059ea:	f025 0503 	bic.w	r5, r5, #3
 80059ee:	3508      	adds	r5, #8
 80059f0:	2d0c      	cmp	r5, #12
 80059f2:	bf38      	it	cc
 80059f4:	250c      	movcc	r5, #12
 80059f6:	4629      	mov	r1, r5
 80059f8:	4638      	mov	r0, r7
 80059fa:	f7ff ffa5 	bl	8005948 <sbrk_aligned>
 80059fe:	3001      	adds	r0, #1
 8005a00:	d02b      	beq.n	8005a5a <_malloc_r+0xd2>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	442b      	add	r3, r5
 8005a06:	6023      	str	r3, [r4, #0]
 8005a08:	e00e      	b.n	8005a28 <_malloc_r+0xa0>
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	1b52      	subs	r2, r2, r5
 8005a0e:	d41e      	bmi.n	8005a4e <_malloc_r+0xc6>
 8005a10:	2a0b      	cmp	r2, #11
 8005a12:	d916      	bls.n	8005a42 <_malloc_r+0xba>
 8005a14:	1961      	adds	r1, r4, r5
 8005a16:	42a3      	cmp	r3, r4
 8005a18:	6025      	str	r5, [r4, #0]
 8005a1a:	bf18      	it	ne
 8005a1c:	6059      	strne	r1, [r3, #4]
 8005a1e:	6863      	ldr	r3, [r4, #4]
 8005a20:	bf08      	it	eq
 8005a22:	6031      	streq	r1, [r6, #0]
 8005a24:	5162      	str	r2, [r4, r5]
 8005a26:	604b      	str	r3, [r1, #4]
 8005a28:	4638      	mov	r0, r7
 8005a2a:	f104 060b 	add.w	r6, r4, #11
 8005a2e:	f001 fc31 	bl	8007294 <__malloc_unlock>
 8005a32:	f026 0607 	bic.w	r6, r6, #7
 8005a36:	1d23      	adds	r3, r4, #4
 8005a38:	1af2      	subs	r2, r6, r3
 8005a3a:	d0b6      	beq.n	80059aa <_malloc_r+0x22>
 8005a3c:	1b9b      	subs	r3, r3, r6
 8005a3e:	50a3      	str	r3, [r4, r2]
 8005a40:	e7b3      	b.n	80059aa <_malloc_r+0x22>
 8005a42:	6862      	ldr	r2, [r4, #4]
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	bf0c      	ite	eq
 8005a48:	6032      	streq	r2, [r6, #0]
 8005a4a:	605a      	strne	r2, [r3, #4]
 8005a4c:	e7ec      	b.n	8005a28 <_malloc_r+0xa0>
 8005a4e:	4623      	mov	r3, r4
 8005a50:	6864      	ldr	r4, [r4, #4]
 8005a52:	e7b2      	b.n	80059ba <_malloc_r+0x32>
 8005a54:	4634      	mov	r4, r6
 8005a56:	6876      	ldr	r6, [r6, #4]
 8005a58:	e7b9      	b.n	80059ce <_malloc_r+0x46>
 8005a5a:	230c      	movs	r3, #12
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	4638      	mov	r0, r7
 8005a60:	f001 fc18 	bl	8007294 <__malloc_unlock>
 8005a64:	e7a1      	b.n	80059aa <_malloc_r+0x22>
 8005a66:	6025      	str	r5, [r4, #0]
 8005a68:	e7de      	b.n	8005a28 <_malloc_r+0xa0>
 8005a6a:	bf00      	nop
 8005a6c:	200002f4 	.word	0x200002f4

08005a70 <__cvt>:
 8005a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a74:	ec55 4b10 	vmov	r4, r5, d0
 8005a78:	2d00      	cmp	r5, #0
 8005a7a:	460e      	mov	r6, r1
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	462b      	mov	r3, r5
 8005a80:	bfbb      	ittet	lt
 8005a82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a86:	461d      	movlt	r5, r3
 8005a88:	2300      	movge	r3, #0
 8005a8a:	232d      	movlt	r3, #45	; 0x2d
 8005a8c:	700b      	strb	r3, [r1, #0]
 8005a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a94:	4691      	mov	r9, r2
 8005a96:	f023 0820 	bic.w	r8, r3, #32
 8005a9a:	bfbc      	itt	lt
 8005a9c:	4622      	movlt	r2, r4
 8005a9e:	4614      	movlt	r4, r2
 8005aa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005aa4:	d005      	beq.n	8005ab2 <__cvt+0x42>
 8005aa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005aaa:	d100      	bne.n	8005aae <__cvt+0x3e>
 8005aac:	3601      	adds	r6, #1
 8005aae:	2102      	movs	r1, #2
 8005ab0:	e000      	b.n	8005ab4 <__cvt+0x44>
 8005ab2:	2103      	movs	r1, #3
 8005ab4:	ab03      	add	r3, sp, #12
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	ab02      	add	r3, sp, #8
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	ec45 4b10 	vmov	d0, r4, r5
 8005ac0:	4653      	mov	r3, sl
 8005ac2:	4632      	mov	r2, r6
 8005ac4:	f000 fcf4 	bl	80064b0 <_dtoa_r>
 8005ac8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005acc:	4607      	mov	r7, r0
 8005ace:	d102      	bne.n	8005ad6 <__cvt+0x66>
 8005ad0:	f019 0f01 	tst.w	r9, #1
 8005ad4:	d022      	beq.n	8005b1c <__cvt+0xac>
 8005ad6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ada:	eb07 0906 	add.w	r9, r7, r6
 8005ade:	d110      	bne.n	8005b02 <__cvt+0x92>
 8005ae0:	783b      	ldrb	r3, [r7, #0]
 8005ae2:	2b30      	cmp	r3, #48	; 0x30
 8005ae4:	d10a      	bne.n	8005afc <__cvt+0x8c>
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4620      	mov	r0, r4
 8005aec:	4629      	mov	r1, r5
 8005aee:	f7fb f80b 	bl	8000b08 <__aeabi_dcmpeq>
 8005af2:	b918      	cbnz	r0, 8005afc <__cvt+0x8c>
 8005af4:	f1c6 0601 	rsb	r6, r6, #1
 8005af8:	f8ca 6000 	str.w	r6, [sl]
 8005afc:	f8da 3000 	ldr.w	r3, [sl]
 8005b00:	4499      	add	r9, r3
 8005b02:	2200      	movs	r2, #0
 8005b04:	2300      	movs	r3, #0
 8005b06:	4620      	mov	r0, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fa fffd 	bl	8000b08 <__aeabi_dcmpeq>
 8005b0e:	b108      	cbz	r0, 8005b14 <__cvt+0xa4>
 8005b10:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b14:	2230      	movs	r2, #48	; 0x30
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	454b      	cmp	r3, r9
 8005b1a:	d307      	bcc.n	8005b2c <__cvt+0xbc>
 8005b1c:	9b03      	ldr	r3, [sp, #12]
 8005b1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b20:	1bdb      	subs	r3, r3, r7
 8005b22:	4638      	mov	r0, r7
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	b004      	add	sp, #16
 8005b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2c:	1c59      	adds	r1, r3, #1
 8005b2e:	9103      	str	r1, [sp, #12]
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	e7f0      	b.n	8005b16 <__cvt+0xa6>

08005b34 <__exponent>:
 8005b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b36:	4603      	mov	r3, r0
 8005b38:	2900      	cmp	r1, #0
 8005b3a:	bfb8      	it	lt
 8005b3c:	4249      	neglt	r1, r1
 8005b3e:	f803 2b02 	strb.w	r2, [r3], #2
 8005b42:	bfb4      	ite	lt
 8005b44:	222d      	movlt	r2, #45	; 0x2d
 8005b46:	222b      	movge	r2, #43	; 0x2b
 8005b48:	2909      	cmp	r1, #9
 8005b4a:	7042      	strb	r2, [r0, #1]
 8005b4c:	dd2a      	ble.n	8005ba4 <__exponent+0x70>
 8005b4e:	f10d 0407 	add.w	r4, sp, #7
 8005b52:	46a4      	mov	ip, r4
 8005b54:	270a      	movs	r7, #10
 8005b56:	46a6      	mov	lr, r4
 8005b58:	460a      	mov	r2, r1
 8005b5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b5e:	fb07 1516 	mls	r5, r7, r6, r1
 8005b62:	3530      	adds	r5, #48	; 0x30
 8005b64:	2a63      	cmp	r2, #99	; 0x63
 8005b66:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005b6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b6e:	4631      	mov	r1, r6
 8005b70:	dcf1      	bgt.n	8005b56 <__exponent+0x22>
 8005b72:	3130      	adds	r1, #48	; 0x30
 8005b74:	f1ae 0502 	sub.w	r5, lr, #2
 8005b78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b7c:	1c44      	adds	r4, r0, #1
 8005b7e:	4629      	mov	r1, r5
 8005b80:	4561      	cmp	r1, ip
 8005b82:	d30a      	bcc.n	8005b9a <__exponent+0x66>
 8005b84:	f10d 0209 	add.w	r2, sp, #9
 8005b88:	eba2 020e 	sub.w	r2, r2, lr
 8005b8c:	4565      	cmp	r5, ip
 8005b8e:	bf88      	it	hi
 8005b90:	2200      	movhi	r2, #0
 8005b92:	4413      	add	r3, r2
 8005b94:	1a18      	subs	r0, r3, r0
 8005b96:	b003      	add	sp, #12
 8005b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ba2:	e7ed      	b.n	8005b80 <__exponent+0x4c>
 8005ba4:	2330      	movs	r3, #48	; 0x30
 8005ba6:	3130      	adds	r1, #48	; 0x30
 8005ba8:	7083      	strb	r3, [r0, #2]
 8005baa:	70c1      	strb	r1, [r0, #3]
 8005bac:	1d03      	adds	r3, r0, #4
 8005bae:	e7f1      	b.n	8005b94 <__exponent+0x60>

08005bb0 <_printf_float>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	ed2d 8b02 	vpush	{d8}
 8005bb8:	b08d      	sub	sp, #52	; 0x34
 8005bba:	460c      	mov	r4, r1
 8005bbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005bc0:	4616      	mov	r6, r2
 8005bc2:	461f      	mov	r7, r3
 8005bc4:	4605      	mov	r5, r0
 8005bc6:	f001 fb57 	bl	8007278 <_localeconv_r>
 8005bca:	f8d0 a000 	ldr.w	sl, [r0]
 8005bce:	4650      	mov	r0, sl
 8005bd0:	f7fa fb1e 	bl	8000210 <strlen>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	9305      	str	r3, [sp, #20]
 8005bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8005be0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005be4:	3307      	adds	r3, #7
 8005be6:	f023 0307 	bic.w	r3, r3, #7
 8005bea:	f103 0208 	add.w	r2, r3, #8
 8005bee:	f8c8 2000 	str.w	r2, [r8]
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bfa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005bfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c02:	9307      	str	r3, [sp, #28]
 8005c04:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c08:	ee08 0a10 	vmov	s16, r0
 8005c0c:	4b9f      	ldr	r3, [pc, #636]	; (8005e8c <_printf_float+0x2dc>)
 8005c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c16:	f7fa ffa9 	bl	8000b6c <__aeabi_dcmpun>
 8005c1a:	bb88      	cbnz	r0, 8005c80 <_printf_float+0xd0>
 8005c1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c20:	4b9a      	ldr	r3, [pc, #616]	; (8005e8c <_printf_float+0x2dc>)
 8005c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c26:	f7fa ff83 	bl	8000b30 <__aeabi_dcmple>
 8005c2a:	bb48      	cbnz	r0, 8005c80 <_printf_float+0xd0>
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2300      	movs	r3, #0
 8005c30:	4640      	mov	r0, r8
 8005c32:	4649      	mov	r1, r9
 8005c34:	f7fa ff72 	bl	8000b1c <__aeabi_dcmplt>
 8005c38:	b110      	cbz	r0, 8005c40 <_printf_float+0x90>
 8005c3a:	232d      	movs	r3, #45	; 0x2d
 8005c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c40:	4b93      	ldr	r3, [pc, #588]	; (8005e90 <_printf_float+0x2e0>)
 8005c42:	4894      	ldr	r0, [pc, #592]	; (8005e94 <_printf_float+0x2e4>)
 8005c44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c48:	bf94      	ite	ls
 8005c4a:	4698      	movls	r8, r3
 8005c4c:	4680      	movhi	r8, r0
 8005c4e:	2303      	movs	r3, #3
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	9b05      	ldr	r3, [sp, #20]
 8005c54:	f023 0204 	bic.w	r2, r3, #4
 8005c58:	6022      	str	r2, [r4, #0]
 8005c5a:	f04f 0900 	mov.w	r9, #0
 8005c5e:	9700      	str	r7, [sp, #0]
 8005c60:	4633      	mov	r3, r6
 8005c62:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c64:	4621      	mov	r1, r4
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 f9d8 	bl	800601c <_printf_common>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f040 8090 	bne.w	8005d92 <_printf_float+0x1e2>
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c76:	b00d      	add	sp, #52	; 0x34
 8005c78:	ecbd 8b02 	vpop	{d8}
 8005c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	4640      	mov	r0, r8
 8005c86:	4649      	mov	r1, r9
 8005c88:	f7fa ff70 	bl	8000b6c <__aeabi_dcmpun>
 8005c8c:	b140      	cbz	r0, 8005ca0 <_printf_float+0xf0>
 8005c8e:	464b      	mov	r3, r9
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bfbc      	itt	lt
 8005c94:	232d      	movlt	r3, #45	; 0x2d
 8005c96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c9a:	487f      	ldr	r0, [pc, #508]	; (8005e98 <_printf_float+0x2e8>)
 8005c9c:	4b7f      	ldr	r3, [pc, #508]	; (8005e9c <_printf_float+0x2ec>)
 8005c9e:	e7d1      	b.n	8005c44 <_printf_float+0x94>
 8005ca0:	6863      	ldr	r3, [r4, #4]
 8005ca2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ca6:	9206      	str	r2, [sp, #24]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	d13f      	bne.n	8005d2c <_printf_float+0x17c>
 8005cac:	2306      	movs	r3, #6
 8005cae:	6063      	str	r3, [r4, #4]
 8005cb0:	9b05      	ldr	r3, [sp, #20]
 8005cb2:	6861      	ldr	r1, [r4, #4]
 8005cb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cb8:	2300      	movs	r3, #0
 8005cba:	9303      	str	r3, [sp, #12]
 8005cbc:	ab0a      	add	r3, sp, #40	; 0x28
 8005cbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005cc2:	ab09      	add	r3, sp, #36	; 0x24
 8005cc4:	ec49 8b10 	vmov	d0, r8, r9
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	6022      	str	r2, [r4, #0]
 8005ccc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f7ff fecd 	bl	8005a70 <__cvt>
 8005cd6:	9b06      	ldr	r3, [sp, #24]
 8005cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cda:	2b47      	cmp	r3, #71	; 0x47
 8005cdc:	4680      	mov	r8, r0
 8005cde:	d108      	bne.n	8005cf2 <_printf_float+0x142>
 8005ce0:	1cc8      	adds	r0, r1, #3
 8005ce2:	db02      	blt.n	8005cea <_printf_float+0x13a>
 8005ce4:	6863      	ldr	r3, [r4, #4]
 8005ce6:	4299      	cmp	r1, r3
 8005ce8:	dd41      	ble.n	8005d6e <_printf_float+0x1be>
 8005cea:	f1ab 0b02 	sub.w	fp, fp, #2
 8005cee:	fa5f fb8b 	uxtb.w	fp, fp
 8005cf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cf6:	d820      	bhi.n	8005d3a <_printf_float+0x18a>
 8005cf8:	3901      	subs	r1, #1
 8005cfa:	465a      	mov	r2, fp
 8005cfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d00:	9109      	str	r1, [sp, #36]	; 0x24
 8005d02:	f7ff ff17 	bl	8005b34 <__exponent>
 8005d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d08:	1813      	adds	r3, r2, r0
 8005d0a:	2a01      	cmp	r2, #1
 8005d0c:	4681      	mov	r9, r0
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	dc02      	bgt.n	8005d18 <_printf_float+0x168>
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	07d2      	lsls	r2, r2, #31
 8005d16:	d501      	bpl.n	8005d1c <_printf_float+0x16c>
 8005d18:	3301      	adds	r3, #1
 8005d1a:	6123      	str	r3, [r4, #16]
 8005d1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d09c      	beq.n	8005c5e <_printf_float+0xae>
 8005d24:	232d      	movs	r3, #45	; 0x2d
 8005d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2a:	e798      	b.n	8005c5e <_printf_float+0xae>
 8005d2c:	9a06      	ldr	r2, [sp, #24]
 8005d2e:	2a47      	cmp	r2, #71	; 0x47
 8005d30:	d1be      	bne.n	8005cb0 <_printf_float+0x100>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1bc      	bne.n	8005cb0 <_printf_float+0x100>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e7b9      	b.n	8005cae <_printf_float+0xfe>
 8005d3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d3e:	d118      	bne.n	8005d72 <_printf_float+0x1c2>
 8005d40:	2900      	cmp	r1, #0
 8005d42:	6863      	ldr	r3, [r4, #4]
 8005d44:	dd0b      	ble.n	8005d5e <_printf_float+0x1ae>
 8005d46:	6121      	str	r1, [r4, #16]
 8005d48:	b913      	cbnz	r3, 8005d50 <_printf_float+0x1a0>
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	07d0      	lsls	r0, r2, #31
 8005d4e:	d502      	bpl.n	8005d56 <_printf_float+0x1a6>
 8005d50:	3301      	adds	r3, #1
 8005d52:	440b      	add	r3, r1
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d58:	f04f 0900 	mov.w	r9, #0
 8005d5c:	e7de      	b.n	8005d1c <_printf_float+0x16c>
 8005d5e:	b913      	cbnz	r3, 8005d66 <_printf_float+0x1b6>
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	07d2      	lsls	r2, r2, #31
 8005d64:	d501      	bpl.n	8005d6a <_printf_float+0x1ba>
 8005d66:	3302      	adds	r3, #2
 8005d68:	e7f4      	b.n	8005d54 <_printf_float+0x1a4>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7f2      	b.n	8005d54 <_printf_float+0x1a4>
 8005d6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d74:	4299      	cmp	r1, r3
 8005d76:	db05      	blt.n	8005d84 <_printf_float+0x1d4>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	6121      	str	r1, [r4, #16]
 8005d7c:	07d8      	lsls	r0, r3, #31
 8005d7e:	d5ea      	bpl.n	8005d56 <_printf_float+0x1a6>
 8005d80:	1c4b      	adds	r3, r1, #1
 8005d82:	e7e7      	b.n	8005d54 <_printf_float+0x1a4>
 8005d84:	2900      	cmp	r1, #0
 8005d86:	bfd4      	ite	le
 8005d88:	f1c1 0202 	rsble	r2, r1, #2
 8005d8c:	2201      	movgt	r2, #1
 8005d8e:	4413      	add	r3, r2
 8005d90:	e7e0      	b.n	8005d54 <_printf_float+0x1a4>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	055a      	lsls	r2, r3, #21
 8005d96:	d407      	bmi.n	8005da8 <_printf_float+0x1f8>
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	4642      	mov	r2, r8
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4628      	mov	r0, r5
 8005da0:	47b8      	blx	r7
 8005da2:	3001      	adds	r0, #1
 8005da4:	d12c      	bne.n	8005e00 <_printf_float+0x250>
 8005da6:	e764      	b.n	8005c72 <_printf_float+0xc2>
 8005da8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dac:	f240 80e0 	bls.w	8005f70 <_printf_float+0x3c0>
 8005db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005db4:	2200      	movs	r2, #0
 8005db6:	2300      	movs	r3, #0
 8005db8:	f7fa fea6 	bl	8000b08 <__aeabi_dcmpeq>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d034      	beq.n	8005e2a <_printf_float+0x27a>
 8005dc0:	4a37      	ldr	r2, [pc, #220]	; (8005ea0 <_printf_float+0x2f0>)
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f af51 	beq.w	8005c72 <_printf_float+0xc2>
 8005dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	db02      	blt.n	8005dde <_printf_float+0x22e>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	07d8      	lsls	r0, r3, #31
 8005ddc:	d510      	bpl.n	8005e00 <_printf_float+0x250>
 8005dde:	ee18 3a10 	vmov	r3, s16
 8005de2:	4652      	mov	r2, sl
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	f43f af41 	beq.w	8005c72 <_printf_float+0xc2>
 8005df0:	f04f 0800 	mov.w	r8, #0
 8005df4:	f104 091a 	add.w	r9, r4, #26
 8005df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	4543      	cmp	r3, r8
 8005dfe:	dc09      	bgt.n	8005e14 <_printf_float+0x264>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	079b      	lsls	r3, r3, #30
 8005e04:	f100 8105 	bmi.w	8006012 <_printf_float+0x462>
 8005e08:	68e0      	ldr	r0, [r4, #12]
 8005e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e0c:	4298      	cmp	r0, r3
 8005e0e:	bfb8      	it	lt
 8005e10:	4618      	movlt	r0, r3
 8005e12:	e730      	b.n	8005c76 <_printf_float+0xc6>
 8005e14:	2301      	movs	r3, #1
 8005e16:	464a      	mov	r2, r9
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f af27 	beq.w	8005c72 <_printf_float+0xc2>
 8005e24:	f108 0801 	add.w	r8, r8, #1
 8005e28:	e7e6      	b.n	8005df8 <_printf_float+0x248>
 8005e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	dc39      	bgt.n	8005ea4 <_printf_float+0x2f4>
 8005e30:	4a1b      	ldr	r2, [pc, #108]	; (8005ea0 <_printf_float+0x2f0>)
 8005e32:	2301      	movs	r3, #1
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f43f af19 	beq.w	8005c72 <_printf_float+0xc2>
 8005e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e44:	4313      	orrs	r3, r2
 8005e46:	d102      	bne.n	8005e4e <_printf_float+0x29e>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	07d9      	lsls	r1, r3, #31
 8005e4c:	d5d8      	bpl.n	8005e00 <_printf_float+0x250>
 8005e4e:	ee18 3a10 	vmov	r3, s16
 8005e52:	4652      	mov	r2, sl
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f af09 	beq.w	8005c72 <_printf_float+0xc2>
 8005e60:	f04f 0900 	mov.w	r9, #0
 8005e64:	f104 0a1a 	add.w	sl, r4, #26
 8005e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6a:	425b      	negs	r3, r3
 8005e6c:	454b      	cmp	r3, r9
 8005e6e:	dc01      	bgt.n	8005e74 <_printf_float+0x2c4>
 8005e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e72:	e792      	b.n	8005d9a <_printf_float+0x1ea>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4652      	mov	r2, sl
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	47b8      	blx	r7
 8005e7e:	3001      	adds	r0, #1
 8005e80:	f43f aef7 	beq.w	8005c72 <_printf_float+0xc2>
 8005e84:	f109 0901 	add.w	r9, r9, #1
 8005e88:	e7ee      	b.n	8005e68 <_printf_float+0x2b8>
 8005e8a:	bf00      	nop
 8005e8c:	7fefffff 	.word	0x7fefffff
 8005e90:	08008348 	.word	0x08008348
 8005e94:	0800834c 	.word	0x0800834c
 8005e98:	08008354 	.word	0x08008354
 8005e9c:	08008350 	.word	0x08008350
 8005ea0:	08008358 	.word	0x08008358
 8005ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ea6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	bfa8      	it	ge
 8005eac:	461a      	movge	r2, r3
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	4691      	mov	r9, r2
 8005eb2:	dc37      	bgt.n	8005f24 <_printf_float+0x374>
 8005eb4:	f04f 0b00 	mov.w	fp, #0
 8005eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ebc:	f104 021a 	add.w	r2, r4, #26
 8005ec0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ec2:	9305      	str	r3, [sp, #20]
 8005ec4:	eba3 0309 	sub.w	r3, r3, r9
 8005ec8:	455b      	cmp	r3, fp
 8005eca:	dc33      	bgt.n	8005f34 <_printf_float+0x384>
 8005ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	db3b      	blt.n	8005f4c <_printf_float+0x39c>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	07da      	lsls	r2, r3, #31
 8005ed8:	d438      	bmi.n	8005f4c <_printf_float+0x39c>
 8005eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005edc:	9a05      	ldr	r2, [sp, #20]
 8005ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ee0:	1a9a      	subs	r2, r3, r2
 8005ee2:	eba3 0901 	sub.w	r9, r3, r1
 8005ee6:	4591      	cmp	r9, r2
 8005ee8:	bfa8      	it	ge
 8005eea:	4691      	movge	r9, r2
 8005eec:	f1b9 0f00 	cmp.w	r9, #0
 8005ef0:	dc35      	bgt.n	8005f5e <_printf_float+0x3ae>
 8005ef2:	f04f 0800 	mov.w	r8, #0
 8005ef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005efa:	f104 0a1a 	add.w	sl, r4, #26
 8005efe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f02:	1a9b      	subs	r3, r3, r2
 8005f04:	eba3 0309 	sub.w	r3, r3, r9
 8005f08:	4543      	cmp	r3, r8
 8005f0a:	f77f af79 	ble.w	8005e00 <_printf_float+0x250>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4652      	mov	r2, sl
 8005f12:	4631      	mov	r1, r6
 8005f14:	4628      	mov	r0, r5
 8005f16:	47b8      	blx	r7
 8005f18:	3001      	adds	r0, #1
 8005f1a:	f43f aeaa 	beq.w	8005c72 <_printf_float+0xc2>
 8005f1e:	f108 0801 	add.w	r8, r8, #1
 8005f22:	e7ec      	b.n	8005efe <_printf_float+0x34e>
 8005f24:	4613      	mov	r3, r2
 8005f26:	4631      	mov	r1, r6
 8005f28:	4642      	mov	r2, r8
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b8      	blx	r7
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d1c0      	bne.n	8005eb4 <_printf_float+0x304>
 8005f32:	e69e      	b.n	8005c72 <_printf_float+0xc2>
 8005f34:	2301      	movs	r3, #1
 8005f36:	4631      	mov	r1, r6
 8005f38:	4628      	mov	r0, r5
 8005f3a:	9205      	str	r2, [sp, #20]
 8005f3c:	47b8      	blx	r7
 8005f3e:	3001      	adds	r0, #1
 8005f40:	f43f ae97 	beq.w	8005c72 <_printf_float+0xc2>
 8005f44:	9a05      	ldr	r2, [sp, #20]
 8005f46:	f10b 0b01 	add.w	fp, fp, #1
 8005f4a:	e7b9      	b.n	8005ec0 <_printf_float+0x310>
 8005f4c:	ee18 3a10 	vmov	r3, s16
 8005f50:	4652      	mov	r2, sl
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b8      	blx	r7
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d1be      	bne.n	8005eda <_printf_float+0x32a>
 8005f5c:	e689      	b.n	8005c72 <_printf_float+0xc2>
 8005f5e:	9a05      	ldr	r2, [sp, #20]
 8005f60:	464b      	mov	r3, r9
 8005f62:	4442      	add	r2, r8
 8005f64:	4631      	mov	r1, r6
 8005f66:	4628      	mov	r0, r5
 8005f68:	47b8      	blx	r7
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d1c1      	bne.n	8005ef2 <_printf_float+0x342>
 8005f6e:	e680      	b.n	8005c72 <_printf_float+0xc2>
 8005f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f72:	2a01      	cmp	r2, #1
 8005f74:	dc01      	bgt.n	8005f7a <_printf_float+0x3ca>
 8005f76:	07db      	lsls	r3, r3, #31
 8005f78:	d538      	bpl.n	8005fec <_printf_float+0x43c>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b8      	blx	r7
 8005f84:	3001      	adds	r0, #1
 8005f86:	f43f ae74 	beq.w	8005c72 <_printf_float+0xc2>
 8005f8a:	ee18 3a10 	vmov	r3, s16
 8005f8e:	4652      	mov	r2, sl
 8005f90:	4631      	mov	r1, r6
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b8      	blx	r7
 8005f96:	3001      	adds	r0, #1
 8005f98:	f43f ae6b 	beq.w	8005c72 <_printf_float+0xc2>
 8005f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f7fa fdb0 	bl	8000b08 <__aeabi_dcmpeq>
 8005fa8:	b9d8      	cbnz	r0, 8005fe2 <_printf_float+0x432>
 8005faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fac:	f108 0201 	add.w	r2, r8, #1
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b8      	blx	r7
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d10e      	bne.n	8005fda <_printf_float+0x42a>
 8005fbc:	e659      	b.n	8005c72 <_printf_float+0xc2>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b8      	blx	r7
 8005fc8:	3001      	adds	r0, #1
 8005fca:	f43f ae52 	beq.w	8005c72 <_printf_float+0xc2>
 8005fce:	f108 0801 	add.w	r8, r8, #1
 8005fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	4543      	cmp	r3, r8
 8005fd8:	dcf1      	bgt.n	8005fbe <_printf_float+0x40e>
 8005fda:	464b      	mov	r3, r9
 8005fdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fe0:	e6dc      	b.n	8005d9c <_printf_float+0x1ec>
 8005fe2:	f04f 0800 	mov.w	r8, #0
 8005fe6:	f104 0a1a 	add.w	sl, r4, #26
 8005fea:	e7f2      	b.n	8005fd2 <_printf_float+0x422>
 8005fec:	2301      	movs	r3, #1
 8005fee:	4642      	mov	r2, r8
 8005ff0:	e7df      	b.n	8005fb2 <_printf_float+0x402>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	464a      	mov	r2, r9
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	f43f ae38 	beq.w	8005c72 <_printf_float+0xc2>
 8006002:	f108 0801 	add.w	r8, r8, #1
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800600a:	1a5b      	subs	r3, r3, r1
 800600c:	4543      	cmp	r3, r8
 800600e:	dcf0      	bgt.n	8005ff2 <_printf_float+0x442>
 8006010:	e6fa      	b.n	8005e08 <_printf_float+0x258>
 8006012:	f04f 0800 	mov.w	r8, #0
 8006016:	f104 0919 	add.w	r9, r4, #25
 800601a:	e7f4      	b.n	8006006 <_printf_float+0x456>

0800601c <_printf_common>:
 800601c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	4616      	mov	r6, r2
 8006022:	4699      	mov	r9, r3
 8006024:	688a      	ldr	r2, [r1, #8]
 8006026:	690b      	ldr	r3, [r1, #16]
 8006028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800602c:	4293      	cmp	r3, r2
 800602e:	bfb8      	it	lt
 8006030:	4613      	movlt	r3, r2
 8006032:	6033      	str	r3, [r6, #0]
 8006034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006038:	4607      	mov	r7, r0
 800603a:	460c      	mov	r4, r1
 800603c:	b10a      	cbz	r2, 8006042 <_printf_common+0x26>
 800603e:	3301      	adds	r3, #1
 8006040:	6033      	str	r3, [r6, #0]
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	0699      	lsls	r1, r3, #26
 8006046:	bf42      	ittt	mi
 8006048:	6833      	ldrmi	r3, [r6, #0]
 800604a:	3302      	addmi	r3, #2
 800604c:	6033      	strmi	r3, [r6, #0]
 800604e:	6825      	ldr	r5, [r4, #0]
 8006050:	f015 0506 	ands.w	r5, r5, #6
 8006054:	d106      	bne.n	8006064 <_printf_common+0x48>
 8006056:	f104 0a19 	add.w	sl, r4, #25
 800605a:	68e3      	ldr	r3, [r4, #12]
 800605c:	6832      	ldr	r2, [r6, #0]
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	42ab      	cmp	r3, r5
 8006062:	dc26      	bgt.n	80060b2 <_printf_common+0x96>
 8006064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006068:	1e13      	subs	r3, r2, #0
 800606a:	6822      	ldr	r2, [r4, #0]
 800606c:	bf18      	it	ne
 800606e:	2301      	movne	r3, #1
 8006070:	0692      	lsls	r2, r2, #26
 8006072:	d42b      	bmi.n	80060cc <_printf_common+0xb0>
 8006074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006078:	4649      	mov	r1, r9
 800607a:	4638      	mov	r0, r7
 800607c:	47c0      	blx	r8
 800607e:	3001      	adds	r0, #1
 8006080:	d01e      	beq.n	80060c0 <_printf_common+0xa4>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	68e5      	ldr	r5, [r4, #12]
 8006086:	6832      	ldr	r2, [r6, #0]
 8006088:	f003 0306 	and.w	r3, r3, #6
 800608c:	2b04      	cmp	r3, #4
 800608e:	bf08      	it	eq
 8006090:	1aad      	subeq	r5, r5, r2
 8006092:	68a3      	ldr	r3, [r4, #8]
 8006094:	6922      	ldr	r2, [r4, #16]
 8006096:	bf0c      	ite	eq
 8006098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800609c:	2500      	movne	r5, #0
 800609e:	4293      	cmp	r3, r2
 80060a0:	bfc4      	itt	gt
 80060a2:	1a9b      	subgt	r3, r3, r2
 80060a4:	18ed      	addgt	r5, r5, r3
 80060a6:	2600      	movs	r6, #0
 80060a8:	341a      	adds	r4, #26
 80060aa:	42b5      	cmp	r5, r6
 80060ac:	d11a      	bne.n	80060e4 <_printf_common+0xc8>
 80060ae:	2000      	movs	r0, #0
 80060b0:	e008      	b.n	80060c4 <_printf_common+0xa8>
 80060b2:	2301      	movs	r3, #1
 80060b4:	4652      	mov	r2, sl
 80060b6:	4649      	mov	r1, r9
 80060b8:	4638      	mov	r0, r7
 80060ba:	47c0      	blx	r8
 80060bc:	3001      	adds	r0, #1
 80060be:	d103      	bne.n	80060c8 <_printf_common+0xac>
 80060c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c8:	3501      	adds	r5, #1
 80060ca:	e7c6      	b.n	800605a <_printf_common+0x3e>
 80060cc:	18e1      	adds	r1, r4, r3
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	2030      	movs	r0, #48	; 0x30
 80060d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060d6:	4422      	add	r2, r4
 80060d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060e0:	3302      	adds	r3, #2
 80060e2:	e7c7      	b.n	8006074 <_printf_common+0x58>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4622      	mov	r2, r4
 80060e8:	4649      	mov	r1, r9
 80060ea:	4638      	mov	r0, r7
 80060ec:	47c0      	blx	r8
 80060ee:	3001      	adds	r0, #1
 80060f0:	d0e6      	beq.n	80060c0 <_printf_common+0xa4>
 80060f2:	3601      	adds	r6, #1
 80060f4:	e7d9      	b.n	80060aa <_printf_common+0x8e>
	...

080060f8 <_printf_i>:
 80060f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060fc:	7e0f      	ldrb	r7, [r1, #24]
 80060fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006100:	2f78      	cmp	r7, #120	; 0x78
 8006102:	4691      	mov	r9, r2
 8006104:	4680      	mov	r8, r0
 8006106:	460c      	mov	r4, r1
 8006108:	469a      	mov	sl, r3
 800610a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800610e:	d807      	bhi.n	8006120 <_printf_i+0x28>
 8006110:	2f62      	cmp	r7, #98	; 0x62
 8006112:	d80a      	bhi.n	800612a <_printf_i+0x32>
 8006114:	2f00      	cmp	r7, #0
 8006116:	f000 80d8 	beq.w	80062ca <_printf_i+0x1d2>
 800611a:	2f58      	cmp	r7, #88	; 0x58
 800611c:	f000 80a3 	beq.w	8006266 <_printf_i+0x16e>
 8006120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006128:	e03a      	b.n	80061a0 <_printf_i+0xa8>
 800612a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800612e:	2b15      	cmp	r3, #21
 8006130:	d8f6      	bhi.n	8006120 <_printf_i+0x28>
 8006132:	a101      	add	r1, pc, #4	; (adr r1, 8006138 <_printf_i+0x40>)
 8006134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006138:	08006191 	.word	0x08006191
 800613c:	080061a5 	.word	0x080061a5
 8006140:	08006121 	.word	0x08006121
 8006144:	08006121 	.word	0x08006121
 8006148:	08006121 	.word	0x08006121
 800614c:	08006121 	.word	0x08006121
 8006150:	080061a5 	.word	0x080061a5
 8006154:	08006121 	.word	0x08006121
 8006158:	08006121 	.word	0x08006121
 800615c:	08006121 	.word	0x08006121
 8006160:	08006121 	.word	0x08006121
 8006164:	080062b1 	.word	0x080062b1
 8006168:	080061d5 	.word	0x080061d5
 800616c:	08006293 	.word	0x08006293
 8006170:	08006121 	.word	0x08006121
 8006174:	08006121 	.word	0x08006121
 8006178:	080062d3 	.word	0x080062d3
 800617c:	08006121 	.word	0x08006121
 8006180:	080061d5 	.word	0x080061d5
 8006184:	08006121 	.word	0x08006121
 8006188:	08006121 	.word	0x08006121
 800618c:	0800629b 	.word	0x0800629b
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	1d1a      	adds	r2, r3, #4
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	602a      	str	r2, [r5, #0]
 8006198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800619c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0a3      	b.n	80062ec <_printf_i+0x1f4>
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	6829      	ldr	r1, [r5, #0]
 80061a8:	0606      	lsls	r6, r0, #24
 80061aa:	f101 0304 	add.w	r3, r1, #4
 80061ae:	d50a      	bpl.n	80061c6 <_printf_i+0xce>
 80061b0:	680e      	ldr	r6, [r1, #0]
 80061b2:	602b      	str	r3, [r5, #0]
 80061b4:	2e00      	cmp	r6, #0
 80061b6:	da03      	bge.n	80061c0 <_printf_i+0xc8>
 80061b8:	232d      	movs	r3, #45	; 0x2d
 80061ba:	4276      	negs	r6, r6
 80061bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c0:	485e      	ldr	r0, [pc, #376]	; (800633c <_printf_i+0x244>)
 80061c2:	230a      	movs	r3, #10
 80061c4:	e019      	b.n	80061fa <_printf_i+0x102>
 80061c6:	680e      	ldr	r6, [r1, #0]
 80061c8:	602b      	str	r3, [r5, #0]
 80061ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061ce:	bf18      	it	ne
 80061d0:	b236      	sxthne	r6, r6
 80061d2:	e7ef      	b.n	80061b4 <_printf_i+0xbc>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	1d19      	adds	r1, r3, #4
 80061da:	6029      	str	r1, [r5, #0]
 80061dc:	0601      	lsls	r1, r0, #24
 80061de:	d501      	bpl.n	80061e4 <_printf_i+0xec>
 80061e0:	681e      	ldr	r6, [r3, #0]
 80061e2:	e002      	b.n	80061ea <_printf_i+0xf2>
 80061e4:	0646      	lsls	r6, r0, #25
 80061e6:	d5fb      	bpl.n	80061e0 <_printf_i+0xe8>
 80061e8:	881e      	ldrh	r6, [r3, #0]
 80061ea:	4854      	ldr	r0, [pc, #336]	; (800633c <_printf_i+0x244>)
 80061ec:	2f6f      	cmp	r7, #111	; 0x6f
 80061ee:	bf0c      	ite	eq
 80061f0:	2308      	moveq	r3, #8
 80061f2:	230a      	movne	r3, #10
 80061f4:	2100      	movs	r1, #0
 80061f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061fa:	6865      	ldr	r5, [r4, #4]
 80061fc:	60a5      	str	r5, [r4, #8]
 80061fe:	2d00      	cmp	r5, #0
 8006200:	bfa2      	ittt	ge
 8006202:	6821      	ldrge	r1, [r4, #0]
 8006204:	f021 0104 	bicge.w	r1, r1, #4
 8006208:	6021      	strge	r1, [r4, #0]
 800620a:	b90e      	cbnz	r6, 8006210 <_printf_i+0x118>
 800620c:	2d00      	cmp	r5, #0
 800620e:	d04d      	beq.n	80062ac <_printf_i+0x1b4>
 8006210:	4615      	mov	r5, r2
 8006212:	fbb6 f1f3 	udiv	r1, r6, r3
 8006216:	fb03 6711 	mls	r7, r3, r1, r6
 800621a:	5dc7      	ldrb	r7, [r0, r7]
 800621c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006220:	4637      	mov	r7, r6
 8006222:	42bb      	cmp	r3, r7
 8006224:	460e      	mov	r6, r1
 8006226:	d9f4      	bls.n	8006212 <_printf_i+0x11a>
 8006228:	2b08      	cmp	r3, #8
 800622a:	d10b      	bne.n	8006244 <_printf_i+0x14c>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	07de      	lsls	r6, r3, #31
 8006230:	d508      	bpl.n	8006244 <_printf_i+0x14c>
 8006232:	6923      	ldr	r3, [r4, #16]
 8006234:	6861      	ldr	r1, [r4, #4]
 8006236:	4299      	cmp	r1, r3
 8006238:	bfde      	ittt	le
 800623a:	2330      	movle	r3, #48	; 0x30
 800623c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006240:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006244:	1b52      	subs	r2, r2, r5
 8006246:	6122      	str	r2, [r4, #16]
 8006248:	f8cd a000 	str.w	sl, [sp]
 800624c:	464b      	mov	r3, r9
 800624e:	aa03      	add	r2, sp, #12
 8006250:	4621      	mov	r1, r4
 8006252:	4640      	mov	r0, r8
 8006254:	f7ff fee2 	bl	800601c <_printf_common>
 8006258:	3001      	adds	r0, #1
 800625a:	d14c      	bne.n	80062f6 <_printf_i+0x1fe>
 800625c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006260:	b004      	add	sp, #16
 8006262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006266:	4835      	ldr	r0, [pc, #212]	; (800633c <_printf_i+0x244>)
 8006268:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800626c:	6829      	ldr	r1, [r5, #0]
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	f851 6b04 	ldr.w	r6, [r1], #4
 8006274:	6029      	str	r1, [r5, #0]
 8006276:	061d      	lsls	r5, r3, #24
 8006278:	d514      	bpl.n	80062a4 <_printf_i+0x1ac>
 800627a:	07df      	lsls	r7, r3, #31
 800627c:	bf44      	itt	mi
 800627e:	f043 0320 	orrmi.w	r3, r3, #32
 8006282:	6023      	strmi	r3, [r4, #0]
 8006284:	b91e      	cbnz	r6, 800628e <_printf_i+0x196>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	f023 0320 	bic.w	r3, r3, #32
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	2310      	movs	r3, #16
 8006290:	e7b0      	b.n	80061f4 <_printf_i+0xfc>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	f043 0320 	orr.w	r3, r3, #32
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	2378      	movs	r3, #120	; 0x78
 800629c:	4828      	ldr	r0, [pc, #160]	; (8006340 <_printf_i+0x248>)
 800629e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062a2:	e7e3      	b.n	800626c <_printf_i+0x174>
 80062a4:	0659      	lsls	r1, r3, #25
 80062a6:	bf48      	it	mi
 80062a8:	b2b6      	uxthmi	r6, r6
 80062aa:	e7e6      	b.n	800627a <_printf_i+0x182>
 80062ac:	4615      	mov	r5, r2
 80062ae:	e7bb      	b.n	8006228 <_printf_i+0x130>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	6826      	ldr	r6, [r4, #0]
 80062b4:	6961      	ldr	r1, [r4, #20]
 80062b6:	1d18      	adds	r0, r3, #4
 80062b8:	6028      	str	r0, [r5, #0]
 80062ba:	0635      	lsls	r5, r6, #24
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	d501      	bpl.n	80062c4 <_printf_i+0x1cc>
 80062c0:	6019      	str	r1, [r3, #0]
 80062c2:	e002      	b.n	80062ca <_printf_i+0x1d2>
 80062c4:	0670      	lsls	r0, r6, #25
 80062c6:	d5fb      	bpl.n	80062c0 <_printf_i+0x1c8>
 80062c8:	8019      	strh	r1, [r3, #0]
 80062ca:	2300      	movs	r3, #0
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	4615      	mov	r5, r2
 80062d0:	e7ba      	b.n	8006248 <_printf_i+0x150>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	1d1a      	adds	r2, r3, #4
 80062d6:	602a      	str	r2, [r5, #0]
 80062d8:	681d      	ldr	r5, [r3, #0]
 80062da:	6862      	ldr	r2, [r4, #4]
 80062dc:	2100      	movs	r1, #0
 80062de:	4628      	mov	r0, r5
 80062e0:	f7f9 ff9e 	bl	8000220 <memchr>
 80062e4:	b108      	cbz	r0, 80062ea <_printf_i+0x1f2>
 80062e6:	1b40      	subs	r0, r0, r5
 80062e8:	6060      	str	r0, [r4, #4]
 80062ea:	6863      	ldr	r3, [r4, #4]
 80062ec:	6123      	str	r3, [r4, #16]
 80062ee:	2300      	movs	r3, #0
 80062f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f4:	e7a8      	b.n	8006248 <_printf_i+0x150>
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	462a      	mov	r2, r5
 80062fa:	4649      	mov	r1, r9
 80062fc:	4640      	mov	r0, r8
 80062fe:	47d0      	blx	sl
 8006300:	3001      	adds	r0, #1
 8006302:	d0ab      	beq.n	800625c <_printf_i+0x164>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	079b      	lsls	r3, r3, #30
 8006308:	d413      	bmi.n	8006332 <_printf_i+0x23a>
 800630a:	68e0      	ldr	r0, [r4, #12]
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	4298      	cmp	r0, r3
 8006310:	bfb8      	it	lt
 8006312:	4618      	movlt	r0, r3
 8006314:	e7a4      	b.n	8006260 <_printf_i+0x168>
 8006316:	2301      	movs	r3, #1
 8006318:	4632      	mov	r2, r6
 800631a:	4649      	mov	r1, r9
 800631c:	4640      	mov	r0, r8
 800631e:	47d0      	blx	sl
 8006320:	3001      	adds	r0, #1
 8006322:	d09b      	beq.n	800625c <_printf_i+0x164>
 8006324:	3501      	adds	r5, #1
 8006326:	68e3      	ldr	r3, [r4, #12]
 8006328:	9903      	ldr	r1, [sp, #12]
 800632a:	1a5b      	subs	r3, r3, r1
 800632c:	42ab      	cmp	r3, r5
 800632e:	dcf2      	bgt.n	8006316 <_printf_i+0x21e>
 8006330:	e7eb      	b.n	800630a <_printf_i+0x212>
 8006332:	2500      	movs	r5, #0
 8006334:	f104 0619 	add.w	r6, r4, #25
 8006338:	e7f5      	b.n	8006326 <_printf_i+0x22e>
 800633a:	bf00      	nop
 800633c:	0800835a 	.word	0x0800835a
 8006340:	0800836b 	.word	0x0800836b

08006344 <iprintf>:
 8006344:	b40f      	push	{r0, r1, r2, r3}
 8006346:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <iprintf+0x2c>)
 8006348:	b513      	push	{r0, r1, r4, lr}
 800634a:	681c      	ldr	r4, [r3, #0]
 800634c:	b124      	cbz	r4, 8006358 <iprintf+0x14>
 800634e:	69a3      	ldr	r3, [r4, #24]
 8006350:	b913      	cbnz	r3, 8006358 <iprintf+0x14>
 8006352:	4620      	mov	r0, r4
 8006354:	f000 fef2 	bl	800713c <__sinit>
 8006358:	ab05      	add	r3, sp, #20
 800635a:	9a04      	ldr	r2, [sp, #16]
 800635c:	68a1      	ldr	r1, [r4, #8]
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	4620      	mov	r0, r4
 8006362:	f001 fb61 	bl	8007a28 <_vfiprintf_r>
 8006366:	b002      	add	sp, #8
 8006368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800636c:	b004      	add	sp, #16
 800636e:	4770      	bx	lr
 8006370:	2000000c 	.word	0x2000000c

08006374 <_sbrk_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d06      	ldr	r5, [pc, #24]	; (8006390 <_sbrk_r+0x1c>)
 8006378:	2300      	movs	r3, #0
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	602b      	str	r3, [r5, #0]
 8006380:	f7fc fd6a 	bl	8002e58 <_sbrk>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_sbrk_r+0x1a>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_sbrk_r+0x1a>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	20000300 	.word	0x20000300

08006394 <quorem>:
 8006394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	6903      	ldr	r3, [r0, #16]
 800639a:	690c      	ldr	r4, [r1, #16]
 800639c:	42a3      	cmp	r3, r4
 800639e:	4607      	mov	r7, r0
 80063a0:	f2c0 8081 	blt.w	80064a6 <quorem+0x112>
 80063a4:	3c01      	subs	r4, #1
 80063a6:	f101 0814 	add.w	r8, r1, #20
 80063aa:	f100 0514 	add.w	r5, r0, #20
 80063ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063bc:	3301      	adds	r3, #1
 80063be:	429a      	cmp	r2, r3
 80063c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80063cc:	d331      	bcc.n	8006432 <quorem+0x9e>
 80063ce:	f04f 0e00 	mov.w	lr, #0
 80063d2:	4640      	mov	r0, r8
 80063d4:	46ac      	mov	ip, r5
 80063d6:	46f2      	mov	sl, lr
 80063d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80063dc:	b293      	uxth	r3, r2
 80063de:	fb06 e303 	mla	r3, r6, r3, lr
 80063e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	ebaa 0303 	sub.w	r3, sl, r3
 80063ec:	f8dc a000 	ldr.w	sl, [ip]
 80063f0:	0c12      	lsrs	r2, r2, #16
 80063f2:	fa13 f38a 	uxtah	r3, r3, sl
 80063f6:	fb06 e202 	mla	r2, r6, r2, lr
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	9b00      	ldr	r3, [sp, #0]
 80063fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006402:	b292      	uxth	r2, r2
 8006404:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006408:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800640c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006410:	4581      	cmp	r9, r0
 8006412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006416:	f84c 3b04 	str.w	r3, [ip], #4
 800641a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800641e:	d2db      	bcs.n	80063d8 <quorem+0x44>
 8006420:	f855 300b 	ldr.w	r3, [r5, fp]
 8006424:	b92b      	cbnz	r3, 8006432 <quorem+0x9e>
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	3b04      	subs	r3, #4
 800642a:	429d      	cmp	r5, r3
 800642c:	461a      	mov	r2, r3
 800642e:	d32e      	bcc.n	800648e <quorem+0xfa>
 8006430:	613c      	str	r4, [r7, #16]
 8006432:	4638      	mov	r0, r7
 8006434:	f001 f9b6 	bl	80077a4 <__mcmp>
 8006438:	2800      	cmp	r0, #0
 800643a:	db24      	blt.n	8006486 <quorem+0xf2>
 800643c:	3601      	adds	r6, #1
 800643e:	4628      	mov	r0, r5
 8006440:	f04f 0c00 	mov.w	ip, #0
 8006444:	f858 2b04 	ldr.w	r2, [r8], #4
 8006448:	f8d0 e000 	ldr.w	lr, [r0]
 800644c:	b293      	uxth	r3, r2
 800644e:	ebac 0303 	sub.w	r3, ip, r3
 8006452:	0c12      	lsrs	r2, r2, #16
 8006454:	fa13 f38e 	uxtah	r3, r3, lr
 8006458:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800645c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006460:	b29b      	uxth	r3, r3
 8006462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006466:	45c1      	cmp	r9, r8
 8006468:	f840 3b04 	str.w	r3, [r0], #4
 800646c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006470:	d2e8      	bcs.n	8006444 <quorem+0xb0>
 8006472:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800647a:	b922      	cbnz	r2, 8006486 <quorem+0xf2>
 800647c:	3b04      	subs	r3, #4
 800647e:	429d      	cmp	r5, r3
 8006480:	461a      	mov	r2, r3
 8006482:	d30a      	bcc.n	800649a <quorem+0x106>
 8006484:	613c      	str	r4, [r7, #16]
 8006486:	4630      	mov	r0, r6
 8006488:	b003      	add	sp, #12
 800648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	3b04      	subs	r3, #4
 8006492:	2a00      	cmp	r2, #0
 8006494:	d1cc      	bne.n	8006430 <quorem+0x9c>
 8006496:	3c01      	subs	r4, #1
 8006498:	e7c7      	b.n	800642a <quorem+0x96>
 800649a:	6812      	ldr	r2, [r2, #0]
 800649c:	3b04      	subs	r3, #4
 800649e:	2a00      	cmp	r2, #0
 80064a0:	d1f0      	bne.n	8006484 <quorem+0xf0>
 80064a2:	3c01      	subs	r4, #1
 80064a4:	e7eb      	b.n	800647e <quorem+0xea>
 80064a6:	2000      	movs	r0, #0
 80064a8:	e7ee      	b.n	8006488 <quorem+0xf4>
 80064aa:	0000      	movs	r0, r0
 80064ac:	0000      	movs	r0, r0
	...

080064b0 <_dtoa_r>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	ed2d 8b04 	vpush	{d8-d9}
 80064b8:	ec57 6b10 	vmov	r6, r7, d0
 80064bc:	b093      	sub	sp, #76	; 0x4c
 80064be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064c4:	9106      	str	r1, [sp, #24]
 80064c6:	ee10 aa10 	vmov	sl, s0
 80064ca:	4604      	mov	r4, r0
 80064cc:	9209      	str	r2, [sp, #36]	; 0x24
 80064ce:	930c      	str	r3, [sp, #48]	; 0x30
 80064d0:	46bb      	mov	fp, r7
 80064d2:	b975      	cbnz	r5, 80064f2 <_dtoa_r+0x42>
 80064d4:	2010      	movs	r0, #16
 80064d6:	f7ff f9c5 	bl	8005864 <malloc>
 80064da:	4602      	mov	r2, r0
 80064dc:	6260      	str	r0, [r4, #36]	; 0x24
 80064de:	b920      	cbnz	r0, 80064ea <_dtoa_r+0x3a>
 80064e0:	4ba7      	ldr	r3, [pc, #668]	; (8006780 <_dtoa_r+0x2d0>)
 80064e2:	21ea      	movs	r1, #234	; 0xea
 80064e4:	48a7      	ldr	r0, [pc, #668]	; (8006784 <_dtoa_r+0x2d4>)
 80064e6:	f001 fce5 	bl	8007eb4 <__assert_func>
 80064ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064ee:	6005      	str	r5, [r0, #0]
 80064f0:	60c5      	str	r5, [r0, #12]
 80064f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f4:	6819      	ldr	r1, [r3, #0]
 80064f6:	b151      	cbz	r1, 800650e <_dtoa_r+0x5e>
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	604a      	str	r2, [r1, #4]
 80064fc:	2301      	movs	r3, #1
 80064fe:	4093      	lsls	r3, r2
 8006500:	608b      	str	r3, [r1, #8]
 8006502:	4620      	mov	r0, r4
 8006504:	f000 ff0c 	bl	8007320 <_Bfree>
 8006508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	1e3b      	subs	r3, r7, #0
 8006510:	bfaa      	itet	ge
 8006512:	2300      	movge	r3, #0
 8006514:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006518:	f8c8 3000 	strge.w	r3, [r8]
 800651c:	4b9a      	ldr	r3, [pc, #616]	; (8006788 <_dtoa_r+0x2d8>)
 800651e:	bfbc      	itt	lt
 8006520:	2201      	movlt	r2, #1
 8006522:	f8c8 2000 	strlt.w	r2, [r8]
 8006526:	ea33 030b 	bics.w	r3, r3, fp
 800652a:	d11b      	bne.n	8006564 <_dtoa_r+0xb4>
 800652c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800652e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006538:	4333      	orrs	r3, r6
 800653a:	f000 8592 	beq.w	8007062 <_dtoa_r+0xbb2>
 800653e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006540:	b963      	cbnz	r3, 800655c <_dtoa_r+0xac>
 8006542:	4b92      	ldr	r3, [pc, #584]	; (800678c <_dtoa_r+0x2dc>)
 8006544:	e022      	b.n	800658c <_dtoa_r+0xdc>
 8006546:	4b92      	ldr	r3, [pc, #584]	; (8006790 <_dtoa_r+0x2e0>)
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	3308      	adds	r3, #8
 800654c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	9801      	ldr	r0, [sp, #4]
 8006552:	b013      	add	sp, #76	; 0x4c
 8006554:	ecbd 8b04 	vpop	{d8-d9}
 8006558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655c:	4b8b      	ldr	r3, [pc, #556]	; (800678c <_dtoa_r+0x2dc>)
 800655e:	9301      	str	r3, [sp, #4]
 8006560:	3303      	adds	r3, #3
 8006562:	e7f3      	b.n	800654c <_dtoa_r+0x9c>
 8006564:	2200      	movs	r2, #0
 8006566:	2300      	movs	r3, #0
 8006568:	4650      	mov	r0, sl
 800656a:	4659      	mov	r1, fp
 800656c:	f7fa facc 	bl	8000b08 <__aeabi_dcmpeq>
 8006570:	ec4b ab19 	vmov	d9, sl, fp
 8006574:	4680      	mov	r8, r0
 8006576:	b158      	cbz	r0, 8006590 <_dtoa_r+0xe0>
 8006578:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800657a:	2301      	movs	r3, #1
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 856b 	beq.w	800705c <_dtoa_r+0xbac>
 8006586:	4883      	ldr	r0, [pc, #524]	; (8006794 <_dtoa_r+0x2e4>)
 8006588:	6018      	str	r0, [r3, #0]
 800658a:	1e43      	subs	r3, r0, #1
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	e7df      	b.n	8006550 <_dtoa_r+0xa0>
 8006590:	ec4b ab10 	vmov	d0, sl, fp
 8006594:	aa10      	add	r2, sp, #64	; 0x40
 8006596:	a911      	add	r1, sp, #68	; 0x44
 8006598:	4620      	mov	r0, r4
 800659a:	f001 f9a9 	bl	80078f0 <__d2b>
 800659e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80065a2:	ee08 0a10 	vmov	s16, r0
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	f000 8084 	beq.w	80066b4 <_dtoa_r+0x204>
 80065ac:	ee19 3a90 	vmov	r3, s19
 80065b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065b8:	4656      	mov	r6, sl
 80065ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80065c6:	4b74      	ldr	r3, [pc, #464]	; (8006798 <_dtoa_r+0x2e8>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	4630      	mov	r0, r6
 80065cc:	4639      	mov	r1, r7
 80065ce:	f7f9 fe7b 	bl	80002c8 <__aeabi_dsub>
 80065d2:	a365      	add	r3, pc, #404	; (adr r3, 8006768 <_dtoa_r+0x2b8>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f7fa f82e 	bl	8000638 <__aeabi_dmul>
 80065dc:	a364      	add	r3, pc, #400	; (adr r3, 8006770 <_dtoa_r+0x2c0>)
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f7f9 fe73 	bl	80002cc <__adddf3>
 80065e6:	4606      	mov	r6, r0
 80065e8:	4628      	mov	r0, r5
 80065ea:	460f      	mov	r7, r1
 80065ec:	f7f9 ffba 	bl	8000564 <__aeabi_i2d>
 80065f0:	a361      	add	r3, pc, #388	; (adr r3, 8006778 <_dtoa_r+0x2c8>)
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7fa f81f 	bl	8000638 <__aeabi_dmul>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4630      	mov	r0, r6
 8006600:	4639      	mov	r1, r7
 8006602:	f7f9 fe63 	bl	80002cc <__adddf3>
 8006606:	4606      	mov	r6, r0
 8006608:	460f      	mov	r7, r1
 800660a:	f7fa fac5 	bl	8000b98 <__aeabi_d2iz>
 800660e:	2200      	movs	r2, #0
 8006610:	9000      	str	r0, [sp, #0]
 8006612:	2300      	movs	r3, #0
 8006614:	4630      	mov	r0, r6
 8006616:	4639      	mov	r1, r7
 8006618:	f7fa fa80 	bl	8000b1c <__aeabi_dcmplt>
 800661c:	b150      	cbz	r0, 8006634 <_dtoa_r+0x184>
 800661e:	9800      	ldr	r0, [sp, #0]
 8006620:	f7f9 ffa0 	bl	8000564 <__aeabi_i2d>
 8006624:	4632      	mov	r2, r6
 8006626:	463b      	mov	r3, r7
 8006628:	f7fa fa6e 	bl	8000b08 <__aeabi_dcmpeq>
 800662c:	b910      	cbnz	r0, 8006634 <_dtoa_r+0x184>
 800662e:	9b00      	ldr	r3, [sp, #0]
 8006630:	3b01      	subs	r3, #1
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	9b00      	ldr	r3, [sp, #0]
 8006636:	2b16      	cmp	r3, #22
 8006638:	d85a      	bhi.n	80066f0 <_dtoa_r+0x240>
 800663a:	9a00      	ldr	r2, [sp, #0]
 800663c:	4b57      	ldr	r3, [pc, #348]	; (800679c <_dtoa_r+0x2ec>)
 800663e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	ec51 0b19 	vmov	r0, r1, d9
 800664a:	f7fa fa67 	bl	8000b1c <__aeabi_dcmplt>
 800664e:	2800      	cmp	r0, #0
 8006650:	d050      	beq.n	80066f4 <_dtoa_r+0x244>
 8006652:	9b00      	ldr	r3, [sp, #0]
 8006654:	3b01      	subs	r3, #1
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	2300      	movs	r3, #0
 800665a:	930b      	str	r3, [sp, #44]	; 0x2c
 800665c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800665e:	1b5d      	subs	r5, r3, r5
 8006660:	1e6b      	subs	r3, r5, #1
 8006662:	9305      	str	r3, [sp, #20]
 8006664:	bf45      	ittet	mi
 8006666:	f1c5 0301 	rsbmi	r3, r5, #1
 800666a:	9304      	strmi	r3, [sp, #16]
 800666c:	2300      	movpl	r3, #0
 800666e:	2300      	movmi	r3, #0
 8006670:	bf4c      	ite	mi
 8006672:	9305      	strmi	r3, [sp, #20]
 8006674:	9304      	strpl	r3, [sp, #16]
 8006676:	9b00      	ldr	r3, [sp, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	db3d      	blt.n	80066f8 <_dtoa_r+0x248>
 800667c:	9b05      	ldr	r3, [sp, #20]
 800667e:	9a00      	ldr	r2, [sp, #0]
 8006680:	920a      	str	r2, [sp, #40]	; 0x28
 8006682:	4413      	add	r3, r2
 8006684:	9305      	str	r3, [sp, #20]
 8006686:	2300      	movs	r3, #0
 8006688:	9307      	str	r3, [sp, #28]
 800668a:	9b06      	ldr	r3, [sp, #24]
 800668c:	2b09      	cmp	r3, #9
 800668e:	f200 8089 	bhi.w	80067a4 <_dtoa_r+0x2f4>
 8006692:	2b05      	cmp	r3, #5
 8006694:	bfc4      	itt	gt
 8006696:	3b04      	subgt	r3, #4
 8006698:	9306      	strgt	r3, [sp, #24]
 800669a:	9b06      	ldr	r3, [sp, #24]
 800669c:	f1a3 0302 	sub.w	r3, r3, #2
 80066a0:	bfcc      	ite	gt
 80066a2:	2500      	movgt	r5, #0
 80066a4:	2501      	movle	r5, #1
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	f200 8087 	bhi.w	80067ba <_dtoa_r+0x30a>
 80066ac:	e8df f003 	tbb	[pc, r3]
 80066b0:	59383a2d 	.word	0x59383a2d
 80066b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066b8:	441d      	add	r5, r3
 80066ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066be:	2b20      	cmp	r3, #32
 80066c0:	bfc1      	itttt	gt
 80066c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80066ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066d2:	bfda      	itte	le
 80066d4:	f1c3 0320 	rsble	r3, r3, #32
 80066d8:	fa06 f003 	lslle.w	r0, r6, r3
 80066dc:	4318      	orrgt	r0, r3
 80066de:	f7f9 ff31 	bl	8000544 <__aeabi_ui2d>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4606      	mov	r6, r0
 80066e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066ea:	3d01      	subs	r5, #1
 80066ec:	930e      	str	r3, [sp, #56]	; 0x38
 80066ee:	e76a      	b.n	80065c6 <_dtoa_r+0x116>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e7b2      	b.n	800665a <_dtoa_r+0x1aa>
 80066f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80066f6:	e7b1      	b.n	800665c <_dtoa_r+0x1ac>
 80066f8:	9b04      	ldr	r3, [sp, #16]
 80066fa:	9a00      	ldr	r2, [sp, #0]
 80066fc:	1a9b      	subs	r3, r3, r2
 80066fe:	9304      	str	r3, [sp, #16]
 8006700:	4253      	negs	r3, r2
 8006702:	9307      	str	r3, [sp, #28]
 8006704:	2300      	movs	r3, #0
 8006706:	930a      	str	r3, [sp, #40]	; 0x28
 8006708:	e7bf      	b.n	800668a <_dtoa_r+0x1da>
 800670a:	2300      	movs	r3, #0
 800670c:	9308      	str	r3, [sp, #32]
 800670e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	dc55      	bgt.n	80067c0 <_dtoa_r+0x310>
 8006714:	2301      	movs	r3, #1
 8006716:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800671a:	461a      	mov	r2, r3
 800671c:	9209      	str	r2, [sp, #36]	; 0x24
 800671e:	e00c      	b.n	800673a <_dtoa_r+0x28a>
 8006720:	2301      	movs	r3, #1
 8006722:	e7f3      	b.n	800670c <_dtoa_r+0x25c>
 8006724:	2300      	movs	r3, #0
 8006726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006728:	9308      	str	r3, [sp, #32]
 800672a:	9b00      	ldr	r3, [sp, #0]
 800672c:	4413      	add	r3, r2
 800672e:	9302      	str	r3, [sp, #8]
 8006730:	3301      	adds	r3, #1
 8006732:	2b01      	cmp	r3, #1
 8006734:	9303      	str	r3, [sp, #12]
 8006736:	bfb8      	it	lt
 8006738:	2301      	movlt	r3, #1
 800673a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800673c:	2200      	movs	r2, #0
 800673e:	6042      	str	r2, [r0, #4]
 8006740:	2204      	movs	r2, #4
 8006742:	f102 0614 	add.w	r6, r2, #20
 8006746:	429e      	cmp	r6, r3
 8006748:	6841      	ldr	r1, [r0, #4]
 800674a:	d93d      	bls.n	80067c8 <_dtoa_r+0x318>
 800674c:	4620      	mov	r0, r4
 800674e:	f000 fda7 	bl	80072a0 <_Balloc>
 8006752:	9001      	str	r0, [sp, #4]
 8006754:	2800      	cmp	r0, #0
 8006756:	d13b      	bne.n	80067d0 <_dtoa_r+0x320>
 8006758:	4b11      	ldr	r3, [pc, #68]	; (80067a0 <_dtoa_r+0x2f0>)
 800675a:	4602      	mov	r2, r0
 800675c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006760:	e6c0      	b.n	80064e4 <_dtoa_r+0x34>
 8006762:	2301      	movs	r3, #1
 8006764:	e7df      	b.n	8006726 <_dtoa_r+0x276>
 8006766:	bf00      	nop
 8006768:	636f4361 	.word	0x636f4361
 800676c:	3fd287a7 	.word	0x3fd287a7
 8006770:	8b60c8b3 	.word	0x8b60c8b3
 8006774:	3fc68a28 	.word	0x3fc68a28
 8006778:	509f79fb 	.word	0x509f79fb
 800677c:	3fd34413 	.word	0x3fd34413
 8006780:	08008389 	.word	0x08008389
 8006784:	080083a0 	.word	0x080083a0
 8006788:	7ff00000 	.word	0x7ff00000
 800678c:	08008385 	.word	0x08008385
 8006790:	0800837c 	.word	0x0800837c
 8006794:	08008359 	.word	0x08008359
 8006798:	3ff80000 	.word	0x3ff80000
 800679c:	080084f0 	.word	0x080084f0
 80067a0:	080083fb 	.word	0x080083fb
 80067a4:	2501      	movs	r5, #1
 80067a6:	2300      	movs	r3, #0
 80067a8:	9306      	str	r3, [sp, #24]
 80067aa:	9508      	str	r5, [sp, #32]
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067b4:	2200      	movs	r2, #0
 80067b6:	2312      	movs	r3, #18
 80067b8:	e7b0      	b.n	800671c <_dtoa_r+0x26c>
 80067ba:	2301      	movs	r3, #1
 80067bc:	9308      	str	r3, [sp, #32]
 80067be:	e7f5      	b.n	80067ac <_dtoa_r+0x2fc>
 80067c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067c6:	e7b8      	b.n	800673a <_dtoa_r+0x28a>
 80067c8:	3101      	adds	r1, #1
 80067ca:	6041      	str	r1, [r0, #4]
 80067cc:	0052      	lsls	r2, r2, #1
 80067ce:	e7b8      	b.n	8006742 <_dtoa_r+0x292>
 80067d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067d2:	9a01      	ldr	r2, [sp, #4]
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	9b03      	ldr	r3, [sp, #12]
 80067d8:	2b0e      	cmp	r3, #14
 80067da:	f200 809d 	bhi.w	8006918 <_dtoa_r+0x468>
 80067de:	2d00      	cmp	r5, #0
 80067e0:	f000 809a 	beq.w	8006918 <_dtoa_r+0x468>
 80067e4:	9b00      	ldr	r3, [sp, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	dd32      	ble.n	8006850 <_dtoa_r+0x3a0>
 80067ea:	4ab7      	ldr	r2, [pc, #732]	; (8006ac8 <_dtoa_r+0x618>)
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067f8:	9b00      	ldr	r3, [sp, #0]
 80067fa:	05d8      	lsls	r0, r3, #23
 80067fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006800:	d516      	bpl.n	8006830 <_dtoa_r+0x380>
 8006802:	4bb2      	ldr	r3, [pc, #712]	; (8006acc <_dtoa_r+0x61c>)
 8006804:	ec51 0b19 	vmov	r0, r1, d9
 8006808:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800680c:	f7fa f83e 	bl	800088c <__aeabi_ddiv>
 8006810:	f007 070f 	and.w	r7, r7, #15
 8006814:	4682      	mov	sl, r0
 8006816:	468b      	mov	fp, r1
 8006818:	2503      	movs	r5, #3
 800681a:	4eac      	ldr	r6, [pc, #688]	; (8006acc <_dtoa_r+0x61c>)
 800681c:	b957      	cbnz	r7, 8006834 <_dtoa_r+0x384>
 800681e:	4642      	mov	r2, r8
 8006820:	464b      	mov	r3, r9
 8006822:	4650      	mov	r0, sl
 8006824:	4659      	mov	r1, fp
 8006826:	f7fa f831 	bl	800088c <__aeabi_ddiv>
 800682a:	4682      	mov	sl, r0
 800682c:	468b      	mov	fp, r1
 800682e:	e028      	b.n	8006882 <_dtoa_r+0x3d2>
 8006830:	2502      	movs	r5, #2
 8006832:	e7f2      	b.n	800681a <_dtoa_r+0x36a>
 8006834:	07f9      	lsls	r1, r7, #31
 8006836:	d508      	bpl.n	800684a <_dtoa_r+0x39a>
 8006838:	4640      	mov	r0, r8
 800683a:	4649      	mov	r1, r9
 800683c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006840:	f7f9 fefa 	bl	8000638 <__aeabi_dmul>
 8006844:	3501      	adds	r5, #1
 8006846:	4680      	mov	r8, r0
 8006848:	4689      	mov	r9, r1
 800684a:	107f      	asrs	r7, r7, #1
 800684c:	3608      	adds	r6, #8
 800684e:	e7e5      	b.n	800681c <_dtoa_r+0x36c>
 8006850:	f000 809b 	beq.w	800698a <_dtoa_r+0x4da>
 8006854:	9b00      	ldr	r3, [sp, #0]
 8006856:	4f9d      	ldr	r7, [pc, #628]	; (8006acc <_dtoa_r+0x61c>)
 8006858:	425e      	negs	r6, r3
 800685a:	4b9b      	ldr	r3, [pc, #620]	; (8006ac8 <_dtoa_r+0x618>)
 800685c:	f006 020f 	and.w	r2, r6, #15
 8006860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	ec51 0b19 	vmov	r0, r1, d9
 800686c:	f7f9 fee4 	bl	8000638 <__aeabi_dmul>
 8006870:	1136      	asrs	r6, r6, #4
 8006872:	4682      	mov	sl, r0
 8006874:	468b      	mov	fp, r1
 8006876:	2300      	movs	r3, #0
 8006878:	2502      	movs	r5, #2
 800687a:	2e00      	cmp	r6, #0
 800687c:	d17a      	bne.n	8006974 <_dtoa_r+0x4c4>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1d3      	bne.n	800682a <_dtoa_r+0x37a>
 8006882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8082 	beq.w	800698e <_dtoa_r+0x4de>
 800688a:	4b91      	ldr	r3, [pc, #580]	; (8006ad0 <_dtoa_r+0x620>)
 800688c:	2200      	movs	r2, #0
 800688e:	4650      	mov	r0, sl
 8006890:	4659      	mov	r1, fp
 8006892:	f7fa f943 	bl	8000b1c <__aeabi_dcmplt>
 8006896:	2800      	cmp	r0, #0
 8006898:	d079      	beq.n	800698e <_dtoa_r+0x4de>
 800689a:	9b03      	ldr	r3, [sp, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d076      	beq.n	800698e <_dtoa_r+0x4de>
 80068a0:	9b02      	ldr	r3, [sp, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	dd36      	ble.n	8006914 <_dtoa_r+0x464>
 80068a6:	9b00      	ldr	r3, [sp, #0]
 80068a8:	4650      	mov	r0, sl
 80068aa:	4659      	mov	r1, fp
 80068ac:	1e5f      	subs	r7, r3, #1
 80068ae:	2200      	movs	r2, #0
 80068b0:	4b88      	ldr	r3, [pc, #544]	; (8006ad4 <_dtoa_r+0x624>)
 80068b2:	f7f9 fec1 	bl	8000638 <__aeabi_dmul>
 80068b6:	9e02      	ldr	r6, [sp, #8]
 80068b8:	4682      	mov	sl, r0
 80068ba:	468b      	mov	fp, r1
 80068bc:	3501      	adds	r5, #1
 80068be:	4628      	mov	r0, r5
 80068c0:	f7f9 fe50 	bl	8000564 <__aeabi_i2d>
 80068c4:	4652      	mov	r2, sl
 80068c6:	465b      	mov	r3, fp
 80068c8:	f7f9 feb6 	bl	8000638 <__aeabi_dmul>
 80068cc:	4b82      	ldr	r3, [pc, #520]	; (8006ad8 <_dtoa_r+0x628>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	f7f9 fcfc 	bl	80002cc <__adddf3>
 80068d4:	46d0      	mov	r8, sl
 80068d6:	46d9      	mov	r9, fp
 80068d8:	4682      	mov	sl, r0
 80068da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80068de:	2e00      	cmp	r6, #0
 80068e0:	d158      	bne.n	8006994 <_dtoa_r+0x4e4>
 80068e2:	4b7e      	ldr	r3, [pc, #504]	; (8006adc <_dtoa_r+0x62c>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	4640      	mov	r0, r8
 80068e8:	4649      	mov	r1, r9
 80068ea:	f7f9 fced 	bl	80002c8 <__aeabi_dsub>
 80068ee:	4652      	mov	r2, sl
 80068f0:	465b      	mov	r3, fp
 80068f2:	4680      	mov	r8, r0
 80068f4:	4689      	mov	r9, r1
 80068f6:	f7fa f92f 	bl	8000b58 <__aeabi_dcmpgt>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	f040 8295 	bne.w	8006e2a <_dtoa_r+0x97a>
 8006900:	4652      	mov	r2, sl
 8006902:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006906:	4640      	mov	r0, r8
 8006908:	4649      	mov	r1, r9
 800690a:	f7fa f907 	bl	8000b1c <__aeabi_dcmplt>
 800690e:	2800      	cmp	r0, #0
 8006910:	f040 8289 	bne.w	8006e26 <_dtoa_r+0x976>
 8006914:	ec5b ab19 	vmov	sl, fp, d9
 8006918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800691a:	2b00      	cmp	r3, #0
 800691c:	f2c0 8148 	blt.w	8006bb0 <_dtoa_r+0x700>
 8006920:	9a00      	ldr	r2, [sp, #0]
 8006922:	2a0e      	cmp	r2, #14
 8006924:	f300 8144 	bgt.w	8006bb0 <_dtoa_r+0x700>
 8006928:	4b67      	ldr	r3, [pc, #412]	; (8006ac8 <_dtoa_r+0x618>)
 800692a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800692e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	f280 80d5 	bge.w	8006ae4 <_dtoa_r+0x634>
 800693a:	9b03      	ldr	r3, [sp, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f300 80d1 	bgt.w	8006ae4 <_dtoa_r+0x634>
 8006942:	f040 826f 	bne.w	8006e24 <_dtoa_r+0x974>
 8006946:	4b65      	ldr	r3, [pc, #404]	; (8006adc <_dtoa_r+0x62c>)
 8006948:	2200      	movs	r2, #0
 800694a:	4640      	mov	r0, r8
 800694c:	4649      	mov	r1, r9
 800694e:	f7f9 fe73 	bl	8000638 <__aeabi_dmul>
 8006952:	4652      	mov	r2, sl
 8006954:	465b      	mov	r3, fp
 8006956:	f7fa f8f5 	bl	8000b44 <__aeabi_dcmpge>
 800695a:	9e03      	ldr	r6, [sp, #12]
 800695c:	4637      	mov	r7, r6
 800695e:	2800      	cmp	r0, #0
 8006960:	f040 8245 	bne.w	8006dee <_dtoa_r+0x93e>
 8006964:	9d01      	ldr	r5, [sp, #4]
 8006966:	2331      	movs	r3, #49	; 0x31
 8006968:	f805 3b01 	strb.w	r3, [r5], #1
 800696c:	9b00      	ldr	r3, [sp, #0]
 800696e:	3301      	adds	r3, #1
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	e240      	b.n	8006df6 <_dtoa_r+0x946>
 8006974:	07f2      	lsls	r2, r6, #31
 8006976:	d505      	bpl.n	8006984 <_dtoa_r+0x4d4>
 8006978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800697c:	f7f9 fe5c 	bl	8000638 <__aeabi_dmul>
 8006980:	3501      	adds	r5, #1
 8006982:	2301      	movs	r3, #1
 8006984:	1076      	asrs	r6, r6, #1
 8006986:	3708      	adds	r7, #8
 8006988:	e777      	b.n	800687a <_dtoa_r+0x3ca>
 800698a:	2502      	movs	r5, #2
 800698c:	e779      	b.n	8006882 <_dtoa_r+0x3d2>
 800698e:	9f00      	ldr	r7, [sp, #0]
 8006990:	9e03      	ldr	r6, [sp, #12]
 8006992:	e794      	b.n	80068be <_dtoa_r+0x40e>
 8006994:	9901      	ldr	r1, [sp, #4]
 8006996:	4b4c      	ldr	r3, [pc, #304]	; (8006ac8 <_dtoa_r+0x618>)
 8006998:	4431      	add	r1, r6
 800699a:	910d      	str	r1, [sp, #52]	; 0x34
 800699c:	9908      	ldr	r1, [sp, #32]
 800699e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069a6:	2900      	cmp	r1, #0
 80069a8:	d043      	beq.n	8006a32 <_dtoa_r+0x582>
 80069aa:	494d      	ldr	r1, [pc, #308]	; (8006ae0 <_dtoa_r+0x630>)
 80069ac:	2000      	movs	r0, #0
 80069ae:	f7f9 ff6d 	bl	800088c <__aeabi_ddiv>
 80069b2:	4652      	mov	r2, sl
 80069b4:	465b      	mov	r3, fp
 80069b6:	f7f9 fc87 	bl	80002c8 <__aeabi_dsub>
 80069ba:	9d01      	ldr	r5, [sp, #4]
 80069bc:	4682      	mov	sl, r0
 80069be:	468b      	mov	fp, r1
 80069c0:	4649      	mov	r1, r9
 80069c2:	4640      	mov	r0, r8
 80069c4:	f7fa f8e8 	bl	8000b98 <__aeabi_d2iz>
 80069c8:	4606      	mov	r6, r0
 80069ca:	f7f9 fdcb 	bl	8000564 <__aeabi_i2d>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4640      	mov	r0, r8
 80069d4:	4649      	mov	r1, r9
 80069d6:	f7f9 fc77 	bl	80002c8 <__aeabi_dsub>
 80069da:	3630      	adds	r6, #48	; 0x30
 80069dc:	f805 6b01 	strb.w	r6, [r5], #1
 80069e0:	4652      	mov	r2, sl
 80069e2:	465b      	mov	r3, fp
 80069e4:	4680      	mov	r8, r0
 80069e6:	4689      	mov	r9, r1
 80069e8:	f7fa f898 	bl	8000b1c <__aeabi_dcmplt>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d163      	bne.n	8006ab8 <_dtoa_r+0x608>
 80069f0:	4642      	mov	r2, r8
 80069f2:	464b      	mov	r3, r9
 80069f4:	4936      	ldr	r1, [pc, #216]	; (8006ad0 <_dtoa_r+0x620>)
 80069f6:	2000      	movs	r0, #0
 80069f8:	f7f9 fc66 	bl	80002c8 <__aeabi_dsub>
 80069fc:	4652      	mov	r2, sl
 80069fe:	465b      	mov	r3, fp
 8006a00:	f7fa f88c 	bl	8000b1c <__aeabi_dcmplt>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	f040 80b5 	bne.w	8006b74 <_dtoa_r+0x6c4>
 8006a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a0c:	429d      	cmp	r5, r3
 8006a0e:	d081      	beq.n	8006914 <_dtoa_r+0x464>
 8006a10:	4b30      	ldr	r3, [pc, #192]	; (8006ad4 <_dtoa_r+0x624>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	4650      	mov	r0, sl
 8006a16:	4659      	mov	r1, fp
 8006a18:	f7f9 fe0e 	bl	8000638 <__aeabi_dmul>
 8006a1c:	4b2d      	ldr	r3, [pc, #180]	; (8006ad4 <_dtoa_r+0x624>)
 8006a1e:	4682      	mov	sl, r0
 8006a20:	468b      	mov	fp, r1
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	2200      	movs	r2, #0
 8006a28:	f7f9 fe06 	bl	8000638 <__aeabi_dmul>
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	4689      	mov	r9, r1
 8006a30:	e7c6      	b.n	80069c0 <_dtoa_r+0x510>
 8006a32:	4650      	mov	r0, sl
 8006a34:	4659      	mov	r1, fp
 8006a36:	f7f9 fdff 	bl	8000638 <__aeabi_dmul>
 8006a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a3c:	9d01      	ldr	r5, [sp, #4]
 8006a3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a40:	4682      	mov	sl, r0
 8006a42:	468b      	mov	fp, r1
 8006a44:	4649      	mov	r1, r9
 8006a46:	4640      	mov	r0, r8
 8006a48:	f7fa f8a6 	bl	8000b98 <__aeabi_d2iz>
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	f7f9 fd89 	bl	8000564 <__aeabi_i2d>
 8006a52:	3630      	adds	r6, #48	; 0x30
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4640      	mov	r0, r8
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	f7f9 fc34 	bl	80002c8 <__aeabi_dsub>
 8006a60:	f805 6b01 	strb.w	r6, [r5], #1
 8006a64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a66:	429d      	cmp	r5, r3
 8006a68:	4680      	mov	r8, r0
 8006a6a:	4689      	mov	r9, r1
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	d124      	bne.n	8006abc <_dtoa_r+0x60c>
 8006a72:	4b1b      	ldr	r3, [pc, #108]	; (8006ae0 <_dtoa_r+0x630>)
 8006a74:	4650      	mov	r0, sl
 8006a76:	4659      	mov	r1, fp
 8006a78:	f7f9 fc28 	bl	80002cc <__adddf3>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4640      	mov	r0, r8
 8006a82:	4649      	mov	r1, r9
 8006a84:	f7fa f868 	bl	8000b58 <__aeabi_dcmpgt>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d173      	bne.n	8006b74 <_dtoa_r+0x6c4>
 8006a8c:	4652      	mov	r2, sl
 8006a8e:	465b      	mov	r3, fp
 8006a90:	4913      	ldr	r1, [pc, #76]	; (8006ae0 <_dtoa_r+0x630>)
 8006a92:	2000      	movs	r0, #0
 8006a94:	f7f9 fc18 	bl	80002c8 <__aeabi_dsub>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	f7fa f83c 	bl	8000b1c <__aeabi_dcmplt>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	f43f af35 	beq.w	8006914 <_dtoa_r+0x464>
 8006aaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006aac:	1e6b      	subs	r3, r5, #1
 8006aae:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ab0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ab4:	2b30      	cmp	r3, #48	; 0x30
 8006ab6:	d0f8      	beq.n	8006aaa <_dtoa_r+0x5fa>
 8006ab8:	9700      	str	r7, [sp, #0]
 8006aba:	e049      	b.n	8006b50 <_dtoa_r+0x6a0>
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <_dtoa_r+0x624>)
 8006abe:	f7f9 fdbb 	bl	8000638 <__aeabi_dmul>
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	4689      	mov	r9, r1
 8006ac6:	e7bd      	b.n	8006a44 <_dtoa_r+0x594>
 8006ac8:	080084f0 	.word	0x080084f0
 8006acc:	080084c8 	.word	0x080084c8
 8006ad0:	3ff00000 	.word	0x3ff00000
 8006ad4:	40240000 	.word	0x40240000
 8006ad8:	401c0000 	.word	0x401c0000
 8006adc:	40140000 	.word	0x40140000
 8006ae0:	3fe00000 	.word	0x3fe00000
 8006ae4:	9d01      	ldr	r5, [sp, #4]
 8006ae6:	4656      	mov	r6, sl
 8006ae8:	465f      	mov	r7, fp
 8006aea:	4642      	mov	r2, r8
 8006aec:	464b      	mov	r3, r9
 8006aee:	4630      	mov	r0, r6
 8006af0:	4639      	mov	r1, r7
 8006af2:	f7f9 fecb 	bl	800088c <__aeabi_ddiv>
 8006af6:	f7fa f84f 	bl	8000b98 <__aeabi_d2iz>
 8006afa:	4682      	mov	sl, r0
 8006afc:	f7f9 fd32 	bl	8000564 <__aeabi_i2d>
 8006b00:	4642      	mov	r2, r8
 8006b02:	464b      	mov	r3, r9
 8006b04:	f7f9 fd98 	bl	8000638 <__aeabi_dmul>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	4639      	mov	r1, r7
 8006b10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b14:	f7f9 fbd8 	bl	80002c8 <__aeabi_dsub>
 8006b18:	f805 6b01 	strb.w	r6, [r5], #1
 8006b1c:	9e01      	ldr	r6, [sp, #4]
 8006b1e:	9f03      	ldr	r7, [sp, #12]
 8006b20:	1bae      	subs	r6, r5, r6
 8006b22:	42b7      	cmp	r7, r6
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	d135      	bne.n	8006b96 <_dtoa_r+0x6e6>
 8006b2a:	f7f9 fbcf 	bl	80002cc <__adddf3>
 8006b2e:	4642      	mov	r2, r8
 8006b30:	464b      	mov	r3, r9
 8006b32:	4606      	mov	r6, r0
 8006b34:	460f      	mov	r7, r1
 8006b36:	f7fa f80f 	bl	8000b58 <__aeabi_dcmpgt>
 8006b3a:	b9d0      	cbnz	r0, 8006b72 <_dtoa_r+0x6c2>
 8006b3c:	4642      	mov	r2, r8
 8006b3e:	464b      	mov	r3, r9
 8006b40:	4630      	mov	r0, r6
 8006b42:	4639      	mov	r1, r7
 8006b44:	f7f9 ffe0 	bl	8000b08 <__aeabi_dcmpeq>
 8006b48:	b110      	cbz	r0, 8006b50 <_dtoa_r+0x6a0>
 8006b4a:	f01a 0f01 	tst.w	sl, #1
 8006b4e:	d110      	bne.n	8006b72 <_dtoa_r+0x6c2>
 8006b50:	4620      	mov	r0, r4
 8006b52:	ee18 1a10 	vmov	r1, s16
 8006b56:	f000 fbe3 	bl	8007320 <_Bfree>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	9800      	ldr	r0, [sp, #0]
 8006b5e:	702b      	strb	r3, [r5, #0]
 8006b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b62:	3001      	adds	r0, #1
 8006b64:	6018      	str	r0, [r3, #0]
 8006b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f43f acf1 	beq.w	8006550 <_dtoa_r+0xa0>
 8006b6e:	601d      	str	r5, [r3, #0]
 8006b70:	e4ee      	b.n	8006550 <_dtoa_r+0xa0>
 8006b72:	9f00      	ldr	r7, [sp, #0]
 8006b74:	462b      	mov	r3, r5
 8006b76:	461d      	mov	r5, r3
 8006b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b7c:	2a39      	cmp	r2, #57	; 0x39
 8006b7e:	d106      	bne.n	8006b8e <_dtoa_r+0x6de>
 8006b80:	9a01      	ldr	r2, [sp, #4]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d1f7      	bne.n	8006b76 <_dtoa_r+0x6c6>
 8006b86:	9901      	ldr	r1, [sp, #4]
 8006b88:	2230      	movs	r2, #48	; 0x30
 8006b8a:	3701      	adds	r7, #1
 8006b8c:	700a      	strb	r2, [r1, #0]
 8006b8e:	781a      	ldrb	r2, [r3, #0]
 8006b90:	3201      	adds	r2, #1
 8006b92:	701a      	strb	r2, [r3, #0]
 8006b94:	e790      	b.n	8006ab8 <_dtoa_r+0x608>
 8006b96:	4ba6      	ldr	r3, [pc, #664]	; (8006e30 <_dtoa_r+0x980>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f7f9 fd4d 	bl	8000638 <__aeabi_dmul>
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	460f      	mov	r7, r1
 8006ba6:	f7f9 ffaf 	bl	8000b08 <__aeabi_dcmpeq>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d09d      	beq.n	8006aea <_dtoa_r+0x63a>
 8006bae:	e7cf      	b.n	8006b50 <_dtoa_r+0x6a0>
 8006bb0:	9a08      	ldr	r2, [sp, #32]
 8006bb2:	2a00      	cmp	r2, #0
 8006bb4:	f000 80d7 	beq.w	8006d66 <_dtoa_r+0x8b6>
 8006bb8:	9a06      	ldr	r2, [sp, #24]
 8006bba:	2a01      	cmp	r2, #1
 8006bbc:	f300 80ba 	bgt.w	8006d34 <_dtoa_r+0x884>
 8006bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bc2:	2a00      	cmp	r2, #0
 8006bc4:	f000 80b2 	beq.w	8006d2c <_dtoa_r+0x87c>
 8006bc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bcc:	9e07      	ldr	r6, [sp, #28]
 8006bce:	9d04      	ldr	r5, [sp, #16]
 8006bd0:	9a04      	ldr	r2, [sp, #16]
 8006bd2:	441a      	add	r2, r3
 8006bd4:	9204      	str	r2, [sp, #16]
 8006bd6:	9a05      	ldr	r2, [sp, #20]
 8006bd8:	2101      	movs	r1, #1
 8006bda:	441a      	add	r2, r3
 8006bdc:	4620      	mov	r0, r4
 8006bde:	9205      	str	r2, [sp, #20]
 8006be0:	f000 fc56 	bl	8007490 <__i2b>
 8006be4:	4607      	mov	r7, r0
 8006be6:	2d00      	cmp	r5, #0
 8006be8:	dd0c      	ble.n	8006c04 <_dtoa_r+0x754>
 8006bea:	9b05      	ldr	r3, [sp, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dd09      	ble.n	8006c04 <_dtoa_r+0x754>
 8006bf0:	42ab      	cmp	r3, r5
 8006bf2:	9a04      	ldr	r2, [sp, #16]
 8006bf4:	bfa8      	it	ge
 8006bf6:	462b      	movge	r3, r5
 8006bf8:	1ad2      	subs	r2, r2, r3
 8006bfa:	9204      	str	r2, [sp, #16]
 8006bfc:	9a05      	ldr	r2, [sp, #20]
 8006bfe:	1aed      	subs	r5, r5, r3
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	9305      	str	r3, [sp, #20]
 8006c04:	9b07      	ldr	r3, [sp, #28]
 8006c06:	b31b      	cbz	r3, 8006c50 <_dtoa_r+0x7a0>
 8006c08:	9b08      	ldr	r3, [sp, #32]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80af 	beq.w	8006d6e <_dtoa_r+0x8be>
 8006c10:	2e00      	cmp	r6, #0
 8006c12:	dd13      	ble.n	8006c3c <_dtoa_r+0x78c>
 8006c14:	4639      	mov	r1, r7
 8006c16:	4632      	mov	r2, r6
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 fcf9 	bl	8007610 <__pow5mult>
 8006c1e:	ee18 2a10 	vmov	r2, s16
 8006c22:	4601      	mov	r1, r0
 8006c24:	4607      	mov	r7, r0
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 fc48 	bl	80074bc <__multiply>
 8006c2c:	ee18 1a10 	vmov	r1, s16
 8006c30:	4680      	mov	r8, r0
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 fb74 	bl	8007320 <_Bfree>
 8006c38:	ee08 8a10 	vmov	s16, r8
 8006c3c:	9b07      	ldr	r3, [sp, #28]
 8006c3e:	1b9a      	subs	r2, r3, r6
 8006c40:	d006      	beq.n	8006c50 <_dtoa_r+0x7a0>
 8006c42:	ee18 1a10 	vmov	r1, s16
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 fce2 	bl	8007610 <__pow5mult>
 8006c4c:	ee08 0a10 	vmov	s16, r0
 8006c50:	2101      	movs	r1, #1
 8006c52:	4620      	mov	r0, r4
 8006c54:	f000 fc1c 	bl	8007490 <__i2b>
 8006c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	f340 8088 	ble.w	8006d72 <_dtoa_r+0x8c2>
 8006c62:	461a      	mov	r2, r3
 8006c64:	4601      	mov	r1, r0
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 fcd2 	bl	8007610 <__pow5mult>
 8006c6c:	9b06      	ldr	r3, [sp, #24]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	4606      	mov	r6, r0
 8006c72:	f340 8081 	ble.w	8006d78 <_dtoa_r+0x8c8>
 8006c76:	f04f 0800 	mov.w	r8, #0
 8006c7a:	6933      	ldr	r3, [r6, #16]
 8006c7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c80:	6918      	ldr	r0, [r3, #16]
 8006c82:	f000 fbb5 	bl	80073f0 <__hi0bits>
 8006c86:	f1c0 0020 	rsb	r0, r0, #32
 8006c8a:	9b05      	ldr	r3, [sp, #20]
 8006c8c:	4418      	add	r0, r3
 8006c8e:	f010 001f 	ands.w	r0, r0, #31
 8006c92:	f000 8092 	beq.w	8006dba <_dtoa_r+0x90a>
 8006c96:	f1c0 0320 	rsb	r3, r0, #32
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	f340 808a 	ble.w	8006db4 <_dtoa_r+0x904>
 8006ca0:	f1c0 001c 	rsb	r0, r0, #28
 8006ca4:	9b04      	ldr	r3, [sp, #16]
 8006ca6:	4403      	add	r3, r0
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	9b05      	ldr	r3, [sp, #20]
 8006cac:	4403      	add	r3, r0
 8006cae:	4405      	add	r5, r0
 8006cb0:	9305      	str	r3, [sp, #20]
 8006cb2:	9b04      	ldr	r3, [sp, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dd07      	ble.n	8006cc8 <_dtoa_r+0x818>
 8006cb8:	ee18 1a10 	vmov	r1, s16
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f000 fd00 	bl	80076c4 <__lshift>
 8006cc4:	ee08 0a10 	vmov	s16, r0
 8006cc8:	9b05      	ldr	r3, [sp, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dd05      	ble.n	8006cda <_dtoa_r+0x82a>
 8006cce:	4631      	mov	r1, r6
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 fcf6 	bl	80076c4 <__lshift>
 8006cd8:	4606      	mov	r6, r0
 8006cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d06e      	beq.n	8006dbe <_dtoa_r+0x90e>
 8006ce0:	ee18 0a10 	vmov	r0, s16
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	f000 fd5d 	bl	80077a4 <__mcmp>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	da67      	bge.n	8006dbe <_dtoa_r+0x90e>
 8006cee:	9b00      	ldr	r3, [sp, #0]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	ee18 1a10 	vmov	r1, s16
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	220a      	movs	r2, #10
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 fb31 	bl	8007364 <__multadd>
 8006d02:	9b08      	ldr	r3, [sp, #32]
 8006d04:	ee08 0a10 	vmov	s16, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 81b1 	beq.w	8007070 <_dtoa_r+0xbc0>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	4639      	mov	r1, r7
 8006d12:	220a      	movs	r2, #10
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 fb25 	bl	8007364 <__multadd>
 8006d1a:	9b02      	ldr	r3, [sp, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	4607      	mov	r7, r0
 8006d20:	f300 808e 	bgt.w	8006e40 <_dtoa_r+0x990>
 8006d24:	9b06      	ldr	r3, [sp, #24]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	dc51      	bgt.n	8006dce <_dtoa_r+0x91e>
 8006d2a:	e089      	b.n	8006e40 <_dtoa_r+0x990>
 8006d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d32:	e74b      	b.n	8006bcc <_dtoa_r+0x71c>
 8006d34:	9b03      	ldr	r3, [sp, #12]
 8006d36:	1e5e      	subs	r6, r3, #1
 8006d38:	9b07      	ldr	r3, [sp, #28]
 8006d3a:	42b3      	cmp	r3, r6
 8006d3c:	bfbf      	itttt	lt
 8006d3e:	9b07      	ldrlt	r3, [sp, #28]
 8006d40:	9607      	strlt	r6, [sp, #28]
 8006d42:	1af2      	sublt	r2, r6, r3
 8006d44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d46:	bfb6      	itet	lt
 8006d48:	189b      	addlt	r3, r3, r2
 8006d4a:	1b9e      	subge	r6, r3, r6
 8006d4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	bfb8      	it	lt
 8006d52:	2600      	movlt	r6, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	bfb7      	itett	lt
 8006d58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d60:	1a9d      	sublt	r5, r3, r2
 8006d62:	2300      	movlt	r3, #0
 8006d64:	e734      	b.n	8006bd0 <_dtoa_r+0x720>
 8006d66:	9e07      	ldr	r6, [sp, #28]
 8006d68:	9d04      	ldr	r5, [sp, #16]
 8006d6a:	9f08      	ldr	r7, [sp, #32]
 8006d6c:	e73b      	b.n	8006be6 <_dtoa_r+0x736>
 8006d6e:	9a07      	ldr	r2, [sp, #28]
 8006d70:	e767      	b.n	8006c42 <_dtoa_r+0x792>
 8006d72:	9b06      	ldr	r3, [sp, #24]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	dc18      	bgt.n	8006daa <_dtoa_r+0x8fa>
 8006d78:	f1ba 0f00 	cmp.w	sl, #0
 8006d7c:	d115      	bne.n	8006daa <_dtoa_r+0x8fa>
 8006d7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d82:	b993      	cbnz	r3, 8006daa <_dtoa_r+0x8fa>
 8006d84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d88:	0d1b      	lsrs	r3, r3, #20
 8006d8a:	051b      	lsls	r3, r3, #20
 8006d8c:	b183      	cbz	r3, 8006db0 <_dtoa_r+0x900>
 8006d8e:	9b04      	ldr	r3, [sp, #16]
 8006d90:	3301      	adds	r3, #1
 8006d92:	9304      	str	r3, [sp, #16]
 8006d94:	9b05      	ldr	r3, [sp, #20]
 8006d96:	3301      	adds	r3, #1
 8006d98:	9305      	str	r3, [sp, #20]
 8006d9a:	f04f 0801 	mov.w	r8, #1
 8006d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f47f af6a 	bne.w	8006c7a <_dtoa_r+0x7ca>
 8006da6:	2001      	movs	r0, #1
 8006da8:	e76f      	b.n	8006c8a <_dtoa_r+0x7da>
 8006daa:	f04f 0800 	mov.w	r8, #0
 8006dae:	e7f6      	b.n	8006d9e <_dtoa_r+0x8ee>
 8006db0:	4698      	mov	r8, r3
 8006db2:	e7f4      	b.n	8006d9e <_dtoa_r+0x8ee>
 8006db4:	f43f af7d 	beq.w	8006cb2 <_dtoa_r+0x802>
 8006db8:	4618      	mov	r0, r3
 8006dba:	301c      	adds	r0, #28
 8006dbc:	e772      	b.n	8006ca4 <_dtoa_r+0x7f4>
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	dc37      	bgt.n	8006e34 <_dtoa_r+0x984>
 8006dc4:	9b06      	ldr	r3, [sp, #24]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	dd34      	ble.n	8006e34 <_dtoa_r+0x984>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	9302      	str	r3, [sp, #8]
 8006dce:	9b02      	ldr	r3, [sp, #8]
 8006dd0:	b96b      	cbnz	r3, 8006dee <_dtoa_r+0x93e>
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	2205      	movs	r2, #5
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 fac4 	bl	8007364 <__multadd>
 8006ddc:	4601      	mov	r1, r0
 8006dde:	4606      	mov	r6, r0
 8006de0:	ee18 0a10 	vmov	r0, s16
 8006de4:	f000 fcde 	bl	80077a4 <__mcmp>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	f73f adbb 	bgt.w	8006964 <_dtoa_r+0x4b4>
 8006dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df0:	9d01      	ldr	r5, [sp, #4]
 8006df2:	43db      	mvns	r3, r3
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	f04f 0800 	mov.w	r8, #0
 8006dfa:	4631      	mov	r1, r6
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 fa8f 	bl	8007320 <_Bfree>
 8006e02:	2f00      	cmp	r7, #0
 8006e04:	f43f aea4 	beq.w	8006b50 <_dtoa_r+0x6a0>
 8006e08:	f1b8 0f00 	cmp.w	r8, #0
 8006e0c:	d005      	beq.n	8006e1a <_dtoa_r+0x96a>
 8006e0e:	45b8      	cmp	r8, r7
 8006e10:	d003      	beq.n	8006e1a <_dtoa_r+0x96a>
 8006e12:	4641      	mov	r1, r8
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 fa83 	bl	8007320 <_Bfree>
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 fa7f 	bl	8007320 <_Bfree>
 8006e22:	e695      	b.n	8006b50 <_dtoa_r+0x6a0>
 8006e24:	2600      	movs	r6, #0
 8006e26:	4637      	mov	r7, r6
 8006e28:	e7e1      	b.n	8006dee <_dtoa_r+0x93e>
 8006e2a:	9700      	str	r7, [sp, #0]
 8006e2c:	4637      	mov	r7, r6
 8006e2e:	e599      	b.n	8006964 <_dtoa_r+0x4b4>
 8006e30:	40240000 	.word	0x40240000
 8006e34:	9b08      	ldr	r3, [sp, #32]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 80ca 	beq.w	8006fd0 <_dtoa_r+0xb20>
 8006e3c:	9b03      	ldr	r3, [sp, #12]
 8006e3e:	9302      	str	r3, [sp, #8]
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	dd05      	ble.n	8006e50 <_dtoa_r+0x9a0>
 8006e44:	4639      	mov	r1, r7
 8006e46:	462a      	mov	r2, r5
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f000 fc3b 	bl	80076c4 <__lshift>
 8006e4e:	4607      	mov	r7, r0
 8006e50:	f1b8 0f00 	cmp.w	r8, #0
 8006e54:	d05b      	beq.n	8006f0e <_dtoa_r+0xa5e>
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 fa21 	bl	80072a0 <_Balloc>
 8006e5e:	4605      	mov	r5, r0
 8006e60:	b928      	cbnz	r0, 8006e6e <_dtoa_r+0x9be>
 8006e62:	4b87      	ldr	r3, [pc, #540]	; (8007080 <_dtoa_r+0xbd0>)
 8006e64:	4602      	mov	r2, r0
 8006e66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e6a:	f7ff bb3b 	b.w	80064e4 <_dtoa_r+0x34>
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	3202      	adds	r2, #2
 8006e72:	0092      	lsls	r2, r2, #2
 8006e74:	f107 010c 	add.w	r1, r7, #12
 8006e78:	300c      	adds	r0, #12
 8006e7a:	f7fe fd03 	bl	8005884 <memcpy>
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4629      	mov	r1, r5
 8006e82:	4620      	mov	r0, r4
 8006e84:	f000 fc1e 	bl	80076c4 <__lshift>
 8006e88:	9b01      	ldr	r3, [sp, #4]
 8006e8a:	f103 0901 	add.w	r9, r3, #1
 8006e8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e92:	4413      	add	r3, r2
 8006e94:	9305      	str	r3, [sp, #20]
 8006e96:	f00a 0301 	and.w	r3, sl, #1
 8006e9a:	46b8      	mov	r8, r7
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	4607      	mov	r7, r0
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	ee18 0a10 	vmov	r0, s16
 8006ea6:	f7ff fa75 	bl	8006394 <quorem>
 8006eaa:	4641      	mov	r1, r8
 8006eac:	9002      	str	r0, [sp, #8]
 8006eae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006eb2:	ee18 0a10 	vmov	r0, s16
 8006eb6:	f000 fc75 	bl	80077a4 <__mcmp>
 8006eba:	463a      	mov	r2, r7
 8006ebc:	9003      	str	r0, [sp, #12]
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 fc8b 	bl	80077dc <__mdiff>
 8006ec6:	68c2      	ldr	r2, [r0, #12]
 8006ec8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006ecc:	4605      	mov	r5, r0
 8006ece:	bb02      	cbnz	r2, 8006f12 <_dtoa_r+0xa62>
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	ee18 0a10 	vmov	r0, s16
 8006ed6:	f000 fc65 	bl	80077a4 <__mcmp>
 8006eda:	4602      	mov	r2, r0
 8006edc:	4629      	mov	r1, r5
 8006ede:	4620      	mov	r0, r4
 8006ee0:	9207      	str	r2, [sp, #28]
 8006ee2:	f000 fa1d 	bl	8007320 <_Bfree>
 8006ee6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006eea:	ea43 0102 	orr.w	r1, r3, r2
 8006eee:	9b04      	ldr	r3, [sp, #16]
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	464d      	mov	r5, r9
 8006ef4:	d10f      	bne.n	8006f16 <_dtoa_r+0xa66>
 8006ef6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006efa:	d02a      	beq.n	8006f52 <_dtoa_r+0xaa2>
 8006efc:	9b03      	ldr	r3, [sp, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	dd02      	ble.n	8006f08 <_dtoa_r+0xa58>
 8006f02:	9b02      	ldr	r3, [sp, #8]
 8006f04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f08:	f88b a000 	strb.w	sl, [fp]
 8006f0c:	e775      	b.n	8006dfa <_dtoa_r+0x94a>
 8006f0e:	4638      	mov	r0, r7
 8006f10:	e7ba      	b.n	8006e88 <_dtoa_r+0x9d8>
 8006f12:	2201      	movs	r2, #1
 8006f14:	e7e2      	b.n	8006edc <_dtoa_r+0xa2c>
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	db04      	blt.n	8006f26 <_dtoa_r+0xa76>
 8006f1c:	9906      	ldr	r1, [sp, #24]
 8006f1e:	430b      	orrs	r3, r1
 8006f20:	9904      	ldr	r1, [sp, #16]
 8006f22:	430b      	orrs	r3, r1
 8006f24:	d122      	bne.n	8006f6c <_dtoa_r+0xabc>
 8006f26:	2a00      	cmp	r2, #0
 8006f28:	ddee      	ble.n	8006f08 <_dtoa_r+0xa58>
 8006f2a:	ee18 1a10 	vmov	r1, s16
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fbc7 	bl	80076c4 <__lshift>
 8006f36:	4631      	mov	r1, r6
 8006f38:	ee08 0a10 	vmov	s16, r0
 8006f3c:	f000 fc32 	bl	80077a4 <__mcmp>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	dc03      	bgt.n	8006f4c <_dtoa_r+0xa9c>
 8006f44:	d1e0      	bne.n	8006f08 <_dtoa_r+0xa58>
 8006f46:	f01a 0f01 	tst.w	sl, #1
 8006f4a:	d0dd      	beq.n	8006f08 <_dtoa_r+0xa58>
 8006f4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f50:	d1d7      	bne.n	8006f02 <_dtoa_r+0xa52>
 8006f52:	2339      	movs	r3, #57	; 0x39
 8006f54:	f88b 3000 	strb.w	r3, [fp]
 8006f58:	462b      	mov	r3, r5
 8006f5a:	461d      	mov	r5, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f62:	2a39      	cmp	r2, #57	; 0x39
 8006f64:	d071      	beq.n	800704a <_dtoa_r+0xb9a>
 8006f66:	3201      	adds	r2, #1
 8006f68:	701a      	strb	r2, [r3, #0]
 8006f6a:	e746      	b.n	8006dfa <_dtoa_r+0x94a>
 8006f6c:	2a00      	cmp	r2, #0
 8006f6e:	dd07      	ble.n	8006f80 <_dtoa_r+0xad0>
 8006f70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f74:	d0ed      	beq.n	8006f52 <_dtoa_r+0xaa2>
 8006f76:	f10a 0301 	add.w	r3, sl, #1
 8006f7a:	f88b 3000 	strb.w	r3, [fp]
 8006f7e:	e73c      	b.n	8006dfa <_dtoa_r+0x94a>
 8006f80:	9b05      	ldr	r3, [sp, #20]
 8006f82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f86:	4599      	cmp	r9, r3
 8006f88:	d047      	beq.n	800701a <_dtoa_r+0xb6a>
 8006f8a:	ee18 1a10 	vmov	r1, s16
 8006f8e:	2300      	movs	r3, #0
 8006f90:	220a      	movs	r2, #10
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 f9e6 	bl	8007364 <__multadd>
 8006f98:	45b8      	cmp	r8, r7
 8006f9a:	ee08 0a10 	vmov	s16, r0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	f04f 020a 	mov.w	r2, #10
 8006fa6:	4641      	mov	r1, r8
 8006fa8:	4620      	mov	r0, r4
 8006faa:	d106      	bne.n	8006fba <_dtoa_r+0xb0a>
 8006fac:	f000 f9da 	bl	8007364 <__multadd>
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	4607      	mov	r7, r0
 8006fb4:	f109 0901 	add.w	r9, r9, #1
 8006fb8:	e772      	b.n	8006ea0 <_dtoa_r+0x9f0>
 8006fba:	f000 f9d3 	bl	8007364 <__multadd>
 8006fbe:	4639      	mov	r1, r7
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	220a      	movs	r2, #10
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 f9cc 	bl	8007364 <__multadd>
 8006fcc:	4607      	mov	r7, r0
 8006fce:	e7f1      	b.n	8006fb4 <_dtoa_r+0xb04>
 8006fd0:	9b03      	ldr	r3, [sp, #12]
 8006fd2:	9302      	str	r3, [sp, #8]
 8006fd4:	9d01      	ldr	r5, [sp, #4]
 8006fd6:	ee18 0a10 	vmov	r0, s16
 8006fda:	4631      	mov	r1, r6
 8006fdc:	f7ff f9da 	bl	8006394 <quorem>
 8006fe0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fe4:	9b01      	ldr	r3, [sp, #4]
 8006fe6:	f805 ab01 	strb.w	sl, [r5], #1
 8006fea:	1aea      	subs	r2, r5, r3
 8006fec:	9b02      	ldr	r3, [sp, #8]
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	dd09      	ble.n	8007006 <_dtoa_r+0xb56>
 8006ff2:	ee18 1a10 	vmov	r1, s16
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	220a      	movs	r2, #10
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f000 f9b2 	bl	8007364 <__multadd>
 8007000:	ee08 0a10 	vmov	s16, r0
 8007004:	e7e7      	b.n	8006fd6 <_dtoa_r+0xb26>
 8007006:	9b02      	ldr	r3, [sp, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	bfc8      	it	gt
 800700c:	461d      	movgt	r5, r3
 800700e:	9b01      	ldr	r3, [sp, #4]
 8007010:	bfd8      	it	le
 8007012:	2501      	movle	r5, #1
 8007014:	441d      	add	r5, r3
 8007016:	f04f 0800 	mov.w	r8, #0
 800701a:	ee18 1a10 	vmov	r1, s16
 800701e:	2201      	movs	r2, #1
 8007020:	4620      	mov	r0, r4
 8007022:	f000 fb4f 	bl	80076c4 <__lshift>
 8007026:	4631      	mov	r1, r6
 8007028:	ee08 0a10 	vmov	s16, r0
 800702c:	f000 fbba 	bl	80077a4 <__mcmp>
 8007030:	2800      	cmp	r0, #0
 8007032:	dc91      	bgt.n	8006f58 <_dtoa_r+0xaa8>
 8007034:	d102      	bne.n	800703c <_dtoa_r+0xb8c>
 8007036:	f01a 0f01 	tst.w	sl, #1
 800703a:	d18d      	bne.n	8006f58 <_dtoa_r+0xaa8>
 800703c:	462b      	mov	r3, r5
 800703e:	461d      	mov	r5, r3
 8007040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007044:	2a30      	cmp	r2, #48	; 0x30
 8007046:	d0fa      	beq.n	800703e <_dtoa_r+0xb8e>
 8007048:	e6d7      	b.n	8006dfa <_dtoa_r+0x94a>
 800704a:	9a01      	ldr	r2, [sp, #4]
 800704c:	429a      	cmp	r2, r3
 800704e:	d184      	bne.n	8006f5a <_dtoa_r+0xaaa>
 8007050:	9b00      	ldr	r3, [sp, #0]
 8007052:	3301      	adds	r3, #1
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	2331      	movs	r3, #49	; 0x31
 8007058:	7013      	strb	r3, [r2, #0]
 800705a:	e6ce      	b.n	8006dfa <_dtoa_r+0x94a>
 800705c:	4b09      	ldr	r3, [pc, #36]	; (8007084 <_dtoa_r+0xbd4>)
 800705e:	f7ff ba95 	b.w	800658c <_dtoa_r+0xdc>
 8007062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007064:	2b00      	cmp	r3, #0
 8007066:	f47f aa6e 	bne.w	8006546 <_dtoa_r+0x96>
 800706a:	4b07      	ldr	r3, [pc, #28]	; (8007088 <_dtoa_r+0xbd8>)
 800706c:	f7ff ba8e 	b.w	800658c <_dtoa_r+0xdc>
 8007070:	9b02      	ldr	r3, [sp, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	dcae      	bgt.n	8006fd4 <_dtoa_r+0xb24>
 8007076:	9b06      	ldr	r3, [sp, #24]
 8007078:	2b02      	cmp	r3, #2
 800707a:	f73f aea8 	bgt.w	8006dce <_dtoa_r+0x91e>
 800707e:	e7a9      	b.n	8006fd4 <_dtoa_r+0xb24>
 8007080:	080083fb 	.word	0x080083fb
 8007084:	08008358 	.word	0x08008358
 8007088:	0800837c 	.word	0x0800837c

0800708c <std>:
 800708c:	2300      	movs	r3, #0
 800708e:	b510      	push	{r4, lr}
 8007090:	4604      	mov	r4, r0
 8007092:	e9c0 3300 	strd	r3, r3, [r0]
 8007096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800709a:	6083      	str	r3, [r0, #8]
 800709c:	8181      	strh	r1, [r0, #12]
 800709e:	6643      	str	r3, [r0, #100]	; 0x64
 80070a0:	81c2      	strh	r2, [r0, #14]
 80070a2:	6183      	str	r3, [r0, #24]
 80070a4:	4619      	mov	r1, r3
 80070a6:	2208      	movs	r2, #8
 80070a8:	305c      	adds	r0, #92	; 0x5c
 80070aa:	f7fe fbf9 	bl	80058a0 <memset>
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <std+0x38>)
 80070b0:	6263      	str	r3, [r4, #36]	; 0x24
 80070b2:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <std+0x3c>)
 80070b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80070b6:	4b05      	ldr	r3, [pc, #20]	; (80070cc <std+0x40>)
 80070b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070ba:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <std+0x44>)
 80070bc:	6224      	str	r4, [r4, #32]
 80070be:	6323      	str	r3, [r4, #48]	; 0x30
 80070c0:	bd10      	pop	{r4, pc}
 80070c2:	bf00      	nop
 80070c4:	08007c89 	.word	0x08007c89
 80070c8:	08007cab 	.word	0x08007cab
 80070cc:	08007ce3 	.word	0x08007ce3
 80070d0:	08007d07 	.word	0x08007d07

080070d4 <_cleanup_r>:
 80070d4:	4901      	ldr	r1, [pc, #4]	; (80070dc <_cleanup_r+0x8>)
 80070d6:	f000 b8af 	b.w	8007238 <_fwalk_reent>
 80070da:	bf00      	nop
 80070dc:	0800801d 	.word	0x0800801d

080070e0 <__sfmoreglue>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	2268      	movs	r2, #104	; 0x68
 80070e4:	1e4d      	subs	r5, r1, #1
 80070e6:	4355      	muls	r5, r2
 80070e8:	460e      	mov	r6, r1
 80070ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070ee:	f7fe fc4b 	bl	8005988 <_malloc_r>
 80070f2:	4604      	mov	r4, r0
 80070f4:	b140      	cbz	r0, 8007108 <__sfmoreglue+0x28>
 80070f6:	2100      	movs	r1, #0
 80070f8:	e9c0 1600 	strd	r1, r6, [r0]
 80070fc:	300c      	adds	r0, #12
 80070fe:	60a0      	str	r0, [r4, #8]
 8007100:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007104:	f7fe fbcc 	bl	80058a0 <memset>
 8007108:	4620      	mov	r0, r4
 800710a:	bd70      	pop	{r4, r5, r6, pc}

0800710c <__sfp_lock_acquire>:
 800710c:	4801      	ldr	r0, [pc, #4]	; (8007114 <__sfp_lock_acquire+0x8>)
 800710e:	f000 b8b8 	b.w	8007282 <__retarget_lock_acquire_recursive>
 8007112:	bf00      	nop
 8007114:	200002fd 	.word	0x200002fd

08007118 <__sfp_lock_release>:
 8007118:	4801      	ldr	r0, [pc, #4]	; (8007120 <__sfp_lock_release+0x8>)
 800711a:	f000 b8b3 	b.w	8007284 <__retarget_lock_release_recursive>
 800711e:	bf00      	nop
 8007120:	200002fd 	.word	0x200002fd

08007124 <__sinit_lock_acquire>:
 8007124:	4801      	ldr	r0, [pc, #4]	; (800712c <__sinit_lock_acquire+0x8>)
 8007126:	f000 b8ac 	b.w	8007282 <__retarget_lock_acquire_recursive>
 800712a:	bf00      	nop
 800712c:	200002fe 	.word	0x200002fe

08007130 <__sinit_lock_release>:
 8007130:	4801      	ldr	r0, [pc, #4]	; (8007138 <__sinit_lock_release+0x8>)
 8007132:	f000 b8a7 	b.w	8007284 <__retarget_lock_release_recursive>
 8007136:	bf00      	nop
 8007138:	200002fe 	.word	0x200002fe

0800713c <__sinit>:
 800713c:	b510      	push	{r4, lr}
 800713e:	4604      	mov	r4, r0
 8007140:	f7ff fff0 	bl	8007124 <__sinit_lock_acquire>
 8007144:	69a3      	ldr	r3, [r4, #24]
 8007146:	b11b      	cbz	r3, 8007150 <__sinit+0x14>
 8007148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800714c:	f7ff bff0 	b.w	8007130 <__sinit_lock_release>
 8007150:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007154:	6523      	str	r3, [r4, #80]	; 0x50
 8007156:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <__sinit+0x68>)
 8007158:	4a13      	ldr	r2, [pc, #76]	; (80071a8 <__sinit+0x6c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	62a2      	str	r2, [r4, #40]	; 0x28
 800715e:	42a3      	cmp	r3, r4
 8007160:	bf04      	itt	eq
 8007162:	2301      	moveq	r3, #1
 8007164:	61a3      	streq	r3, [r4, #24]
 8007166:	4620      	mov	r0, r4
 8007168:	f000 f820 	bl	80071ac <__sfp>
 800716c:	6060      	str	r0, [r4, #4]
 800716e:	4620      	mov	r0, r4
 8007170:	f000 f81c 	bl	80071ac <__sfp>
 8007174:	60a0      	str	r0, [r4, #8]
 8007176:	4620      	mov	r0, r4
 8007178:	f000 f818 	bl	80071ac <__sfp>
 800717c:	2200      	movs	r2, #0
 800717e:	60e0      	str	r0, [r4, #12]
 8007180:	2104      	movs	r1, #4
 8007182:	6860      	ldr	r0, [r4, #4]
 8007184:	f7ff ff82 	bl	800708c <std>
 8007188:	68a0      	ldr	r0, [r4, #8]
 800718a:	2201      	movs	r2, #1
 800718c:	2109      	movs	r1, #9
 800718e:	f7ff ff7d 	bl	800708c <std>
 8007192:	68e0      	ldr	r0, [r4, #12]
 8007194:	2202      	movs	r2, #2
 8007196:	2112      	movs	r1, #18
 8007198:	f7ff ff78 	bl	800708c <std>
 800719c:	2301      	movs	r3, #1
 800719e:	61a3      	str	r3, [r4, #24]
 80071a0:	e7d2      	b.n	8007148 <__sinit+0xc>
 80071a2:	bf00      	nop
 80071a4:	08008344 	.word	0x08008344
 80071a8:	080070d5 	.word	0x080070d5

080071ac <__sfp>:
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ae:	4607      	mov	r7, r0
 80071b0:	f7ff ffac 	bl	800710c <__sfp_lock_acquire>
 80071b4:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <__sfp+0x84>)
 80071b6:	681e      	ldr	r6, [r3, #0]
 80071b8:	69b3      	ldr	r3, [r6, #24]
 80071ba:	b913      	cbnz	r3, 80071c2 <__sfp+0x16>
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff ffbd 	bl	800713c <__sinit>
 80071c2:	3648      	adds	r6, #72	; 0x48
 80071c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	d503      	bpl.n	80071d4 <__sfp+0x28>
 80071cc:	6833      	ldr	r3, [r6, #0]
 80071ce:	b30b      	cbz	r3, 8007214 <__sfp+0x68>
 80071d0:	6836      	ldr	r6, [r6, #0]
 80071d2:	e7f7      	b.n	80071c4 <__sfp+0x18>
 80071d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071d8:	b9d5      	cbnz	r5, 8007210 <__sfp+0x64>
 80071da:	4b16      	ldr	r3, [pc, #88]	; (8007234 <__sfp+0x88>)
 80071dc:	60e3      	str	r3, [r4, #12]
 80071de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071e2:	6665      	str	r5, [r4, #100]	; 0x64
 80071e4:	f000 f84c 	bl	8007280 <__retarget_lock_init_recursive>
 80071e8:	f7ff ff96 	bl	8007118 <__sfp_lock_release>
 80071ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071f4:	6025      	str	r5, [r4, #0]
 80071f6:	61a5      	str	r5, [r4, #24]
 80071f8:	2208      	movs	r2, #8
 80071fa:	4629      	mov	r1, r5
 80071fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007200:	f7fe fb4e 	bl	80058a0 <memset>
 8007204:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007208:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800720c:	4620      	mov	r0, r4
 800720e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007210:	3468      	adds	r4, #104	; 0x68
 8007212:	e7d9      	b.n	80071c8 <__sfp+0x1c>
 8007214:	2104      	movs	r1, #4
 8007216:	4638      	mov	r0, r7
 8007218:	f7ff ff62 	bl	80070e0 <__sfmoreglue>
 800721c:	4604      	mov	r4, r0
 800721e:	6030      	str	r0, [r6, #0]
 8007220:	2800      	cmp	r0, #0
 8007222:	d1d5      	bne.n	80071d0 <__sfp+0x24>
 8007224:	f7ff ff78 	bl	8007118 <__sfp_lock_release>
 8007228:	230c      	movs	r3, #12
 800722a:	603b      	str	r3, [r7, #0]
 800722c:	e7ee      	b.n	800720c <__sfp+0x60>
 800722e:	bf00      	nop
 8007230:	08008344 	.word	0x08008344
 8007234:	ffff0001 	.word	0xffff0001

08007238 <_fwalk_reent>:
 8007238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800723c:	4606      	mov	r6, r0
 800723e:	4688      	mov	r8, r1
 8007240:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007244:	2700      	movs	r7, #0
 8007246:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800724a:	f1b9 0901 	subs.w	r9, r9, #1
 800724e:	d505      	bpl.n	800725c <_fwalk_reent+0x24>
 8007250:	6824      	ldr	r4, [r4, #0]
 8007252:	2c00      	cmp	r4, #0
 8007254:	d1f7      	bne.n	8007246 <_fwalk_reent+0xe>
 8007256:	4638      	mov	r0, r7
 8007258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800725c:	89ab      	ldrh	r3, [r5, #12]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d907      	bls.n	8007272 <_fwalk_reent+0x3a>
 8007262:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007266:	3301      	adds	r3, #1
 8007268:	d003      	beq.n	8007272 <_fwalk_reent+0x3a>
 800726a:	4629      	mov	r1, r5
 800726c:	4630      	mov	r0, r6
 800726e:	47c0      	blx	r8
 8007270:	4307      	orrs	r7, r0
 8007272:	3568      	adds	r5, #104	; 0x68
 8007274:	e7e9      	b.n	800724a <_fwalk_reent+0x12>
	...

08007278 <_localeconv_r>:
 8007278:	4800      	ldr	r0, [pc, #0]	; (800727c <_localeconv_r+0x4>)
 800727a:	4770      	bx	lr
 800727c:	20000160 	.word	0x20000160

08007280 <__retarget_lock_init_recursive>:
 8007280:	4770      	bx	lr

08007282 <__retarget_lock_acquire_recursive>:
 8007282:	4770      	bx	lr

08007284 <__retarget_lock_release_recursive>:
 8007284:	4770      	bx	lr
	...

08007288 <__malloc_lock>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__malloc_lock+0x8>)
 800728a:	f7ff bffa 	b.w	8007282 <__retarget_lock_acquire_recursive>
 800728e:	bf00      	nop
 8007290:	200002fc 	.word	0x200002fc

08007294 <__malloc_unlock>:
 8007294:	4801      	ldr	r0, [pc, #4]	; (800729c <__malloc_unlock+0x8>)
 8007296:	f7ff bff5 	b.w	8007284 <__retarget_lock_release_recursive>
 800729a:	bf00      	nop
 800729c:	200002fc 	.word	0x200002fc

080072a0 <_Balloc>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072a4:	4604      	mov	r4, r0
 80072a6:	460d      	mov	r5, r1
 80072a8:	b976      	cbnz	r6, 80072c8 <_Balloc+0x28>
 80072aa:	2010      	movs	r0, #16
 80072ac:	f7fe fada 	bl	8005864 <malloc>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6260      	str	r0, [r4, #36]	; 0x24
 80072b4:	b920      	cbnz	r0, 80072c0 <_Balloc+0x20>
 80072b6:	4b18      	ldr	r3, [pc, #96]	; (8007318 <_Balloc+0x78>)
 80072b8:	4818      	ldr	r0, [pc, #96]	; (800731c <_Balloc+0x7c>)
 80072ba:	2166      	movs	r1, #102	; 0x66
 80072bc:	f000 fdfa 	bl	8007eb4 <__assert_func>
 80072c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072c4:	6006      	str	r6, [r0, #0]
 80072c6:	60c6      	str	r6, [r0, #12]
 80072c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072ca:	68f3      	ldr	r3, [r6, #12]
 80072cc:	b183      	cbz	r3, 80072f0 <_Balloc+0x50>
 80072ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072d6:	b9b8      	cbnz	r0, 8007308 <_Balloc+0x68>
 80072d8:	2101      	movs	r1, #1
 80072da:	fa01 f605 	lsl.w	r6, r1, r5
 80072de:	1d72      	adds	r2, r6, #5
 80072e0:	0092      	lsls	r2, r2, #2
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 fb60 	bl	80079a8 <_calloc_r>
 80072e8:	b160      	cbz	r0, 8007304 <_Balloc+0x64>
 80072ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072ee:	e00e      	b.n	800730e <_Balloc+0x6e>
 80072f0:	2221      	movs	r2, #33	; 0x21
 80072f2:	2104      	movs	r1, #4
 80072f4:	4620      	mov	r0, r4
 80072f6:	f000 fb57 	bl	80079a8 <_calloc_r>
 80072fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072fc:	60f0      	str	r0, [r6, #12]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e4      	bne.n	80072ce <_Balloc+0x2e>
 8007304:	2000      	movs	r0, #0
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	6802      	ldr	r2, [r0, #0]
 800730a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800730e:	2300      	movs	r3, #0
 8007310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007314:	e7f7      	b.n	8007306 <_Balloc+0x66>
 8007316:	bf00      	nop
 8007318:	08008389 	.word	0x08008389
 800731c:	0800846c 	.word	0x0800846c

08007320 <_Bfree>:
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007324:	4605      	mov	r5, r0
 8007326:	460c      	mov	r4, r1
 8007328:	b976      	cbnz	r6, 8007348 <_Bfree+0x28>
 800732a:	2010      	movs	r0, #16
 800732c:	f7fe fa9a 	bl	8005864 <malloc>
 8007330:	4602      	mov	r2, r0
 8007332:	6268      	str	r0, [r5, #36]	; 0x24
 8007334:	b920      	cbnz	r0, 8007340 <_Bfree+0x20>
 8007336:	4b09      	ldr	r3, [pc, #36]	; (800735c <_Bfree+0x3c>)
 8007338:	4809      	ldr	r0, [pc, #36]	; (8007360 <_Bfree+0x40>)
 800733a:	218a      	movs	r1, #138	; 0x8a
 800733c:	f000 fdba 	bl	8007eb4 <__assert_func>
 8007340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007344:	6006      	str	r6, [r0, #0]
 8007346:	60c6      	str	r6, [r0, #12]
 8007348:	b13c      	cbz	r4, 800735a <_Bfree+0x3a>
 800734a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800734c:	6862      	ldr	r2, [r4, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007354:	6021      	str	r1, [r4, #0]
 8007356:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800735a:	bd70      	pop	{r4, r5, r6, pc}
 800735c:	08008389 	.word	0x08008389
 8007360:	0800846c 	.word	0x0800846c

08007364 <__multadd>:
 8007364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007368:	690d      	ldr	r5, [r1, #16]
 800736a:	4607      	mov	r7, r0
 800736c:	460c      	mov	r4, r1
 800736e:	461e      	mov	r6, r3
 8007370:	f101 0c14 	add.w	ip, r1, #20
 8007374:	2000      	movs	r0, #0
 8007376:	f8dc 3000 	ldr.w	r3, [ip]
 800737a:	b299      	uxth	r1, r3
 800737c:	fb02 6101 	mla	r1, r2, r1, r6
 8007380:	0c1e      	lsrs	r6, r3, #16
 8007382:	0c0b      	lsrs	r3, r1, #16
 8007384:	fb02 3306 	mla	r3, r2, r6, r3
 8007388:	b289      	uxth	r1, r1
 800738a:	3001      	adds	r0, #1
 800738c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007390:	4285      	cmp	r5, r0
 8007392:	f84c 1b04 	str.w	r1, [ip], #4
 8007396:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800739a:	dcec      	bgt.n	8007376 <__multadd+0x12>
 800739c:	b30e      	cbz	r6, 80073e2 <__multadd+0x7e>
 800739e:	68a3      	ldr	r3, [r4, #8]
 80073a0:	42ab      	cmp	r3, r5
 80073a2:	dc19      	bgt.n	80073d8 <__multadd+0x74>
 80073a4:	6861      	ldr	r1, [r4, #4]
 80073a6:	4638      	mov	r0, r7
 80073a8:	3101      	adds	r1, #1
 80073aa:	f7ff ff79 	bl	80072a0 <_Balloc>
 80073ae:	4680      	mov	r8, r0
 80073b0:	b928      	cbnz	r0, 80073be <__multadd+0x5a>
 80073b2:	4602      	mov	r2, r0
 80073b4:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <__multadd+0x84>)
 80073b6:	480d      	ldr	r0, [pc, #52]	; (80073ec <__multadd+0x88>)
 80073b8:	21b5      	movs	r1, #181	; 0xb5
 80073ba:	f000 fd7b 	bl	8007eb4 <__assert_func>
 80073be:	6922      	ldr	r2, [r4, #16]
 80073c0:	3202      	adds	r2, #2
 80073c2:	f104 010c 	add.w	r1, r4, #12
 80073c6:	0092      	lsls	r2, r2, #2
 80073c8:	300c      	adds	r0, #12
 80073ca:	f7fe fa5b 	bl	8005884 <memcpy>
 80073ce:	4621      	mov	r1, r4
 80073d0:	4638      	mov	r0, r7
 80073d2:	f7ff ffa5 	bl	8007320 <_Bfree>
 80073d6:	4644      	mov	r4, r8
 80073d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073dc:	3501      	adds	r5, #1
 80073de:	615e      	str	r6, [r3, #20]
 80073e0:	6125      	str	r5, [r4, #16]
 80073e2:	4620      	mov	r0, r4
 80073e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e8:	080083fb 	.word	0x080083fb
 80073ec:	0800846c 	.word	0x0800846c

080073f0 <__hi0bits>:
 80073f0:	0c03      	lsrs	r3, r0, #16
 80073f2:	041b      	lsls	r3, r3, #16
 80073f4:	b9d3      	cbnz	r3, 800742c <__hi0bits+0x3c>
 80073f6:	0400      	lsls	r0, r0, #16
 80073f8:	2310      	movs	r3, #16
 80073fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80073fe:	bf04      	itt	eq
 8007400:	0200      	lsleq	r0, r0, #8
 8007402:	3308      	addeq	r3, #8
 8007404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007408:	bf04      	itt	eq
 800740a:	0100      	lsleq	r0, r0, #4
 800740c:	3304      	addeq	r3, #4
 800740e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007412:	bf04      	itt	eq
 8007414:	0080      	lsleq	r0, r0, #2
 8007416:	3302      	addeq	r3, #2
 8007418:	2800      	cmp	r0, #0
 800741a:	db05      	blt.n	8007428 <__hi0bits+0x38>
 800741c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007420:	f103 0301 	add.w	r3, r3, #1
 8007424:	bf08      	it	eq
 8007426:	2320      	moveq	r3, #32
 8007428:	4618      	mov	r0, r3
 800742a:	4770      	bx	lr
 800742c:	2300      	movs	r3, #0
 800742e:	e7e4      	b.n	80073fa <__hi0bits+0xa>

08007430 <__lo0bits>:
 8007430:	6803      	ldr	r3, [r0, #0]
 8007432:	f013 0207 	ands.w	r2, r3, #7
 8007436:	4601      	mov	r1, r0
 8007438:	d00b      	beq.n	8007452 <__lo0bits+0x22>
 800743a:	07da      	lsls	r2, r3, #31
 800743c:	d423      	bmi.n	8007486 <__lo0bits+0x56>
 800743e:	0798      	lsls	r0, r3, #30
 8007440:	bf49      	itett	mi
 8007442:	085b      	lsrmi	r3, r3, #1
 8007444:	089b      	lsrpl	r3, r3, #2
 8007446:	2001      	movmi	r0, #1
 8007448:	600b      	strmi	r3, [r1, #0]
 800744a:	bf5c      	itt	pl
 800744c:	600b      	strpl	r3, [r1, #0]
 800744e:	2002      	movpl	r0, #2
 8007450:	4770      	bx	lr
 8007452:	b298      	uxth	r0, r3
 8007454:	b9a8      	cbnz	r0, 8007482 <__lo0bits+0x52>
 8007456:	0c1b      	lsrs	r3, r3, #16
 8007458:	2010      	movs	r0, #16
 800745a:	b2da      	uxtb	r2, r3
 800745c:	b90a      	cbnz	r2, 8007462 <__lo0bits+0x32>
 800745e:	3008      	adds	r0, #8
 8007460:	0a1b      	lsrs	r3, r3, #8
 8007462:	071a      	lsls	r2, r3, #28
 8007464:	bf04      	itt	eq
 8007466:	091b      	lsreq	r3, r3, #4
 8007468:	3004      	addeq	r0, #4
 800746a:	079a      	lsls	r2, r3, #30
 800746c:	bf04      	itt	eq
 800746e:	089b      	lsreq	r3, r3, #2
 8007470:	3002      	addeq	r0, #2
 8007472:	07da      	lsls	r2, r3, #31
 8007474:	d403      	bmi.n	800747e <__lo0bits+0x4e>
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	f100 0001 	add.w	r0, r0, #1
 800747c:	d005      	beq.n	800748a <__lo0bits+0x5a>
 800747e:	600b      	str	r3, [r1, #0]
 8007480:	4770      	bx	lr
 8007482:	4610      	mov	r0, r2
 8007484:	e7e9      	b.n	800745a <__lo0bits+0x2a>
 8007486:	2000      	movs	r0, #0
 8007488:	4770      	bx	lr
 800748a:	2020      	movs	r0, #32
 800748c:	4770      	bx	lr
	...

08007490 <__i2b>:
 8007490:	b510      	push	{r4, lr}
 8007492:	460c      	mov	r4, r1
 8007494:	2101      	movs	r1, #1
 8007496:	f7ff ff03 	bl	80072a0 <_Balloc>
 800749a:	4602      	mov	r2, r0
 800749c:	b928      	cbnz	r0, 80074aa <__i2b+0x1a>
 800749e:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <__i2b+0x24>)
 80074a0:	4805      	ldr	r0, [pc, #20]	; (80074b8 <__i2b+0x28>)
 80074a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80074a6:	f000 fd05 	bl	8007eb4 <__assert_func>
 80074aa:	2301      	movs	r3, #1
 80074ac:	6144      	str	r4, [r0, #20]
 80074ae:	6103      	str	r3, [r0, #16]
 80074b0:	bd10      	pop	{r4, pc}
 80074b2:	bf00      	nop
 80074b4:	080083fb 	.word	0x080083fb
 80074b8:	0800846c 	.word	0x0800846c

080074bc <__multiply>:
 80074bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c0:	4691      	mov	r9, r2
 80074c2:	690a      	ldr	r2, [r1, #16]
 80074c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	bfb8      	it	lt
 80074cc:	460b      	movlt	r3, r1
 80074ce:	460c      	mov	r4, r1
 80074d0:	bfbc      	itt	lt
 80074d2:	464c      	movlt	r4, r9
 80074d4:	4699      	movlt	r9, r3
 80074d6:	6927      	ldr	r7, [r4, #16]
 80074d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074dc:	68a3      	ldr	r3, [r4, #8]
 80074de:	6861      	ldr	r1, [r4, #4]
 80074e0:	eb07 060a 	add.w	r6, r7, sl
 80074e4:	42b3      	cmp	r3, r6
 80074e6:	b085      	sub	sp, #20
 80074e8:	bfb8      	it	lt
 80074ea:	3101      	addlt	r1, #1
 80074ec:	f7ff fed8 	bl	80072a0 <_Balloc>
 80074f0:	b930      	cbnz	r0, 8007500 <__multiply+0x44>
 80074f2:	4602      	mov	r2, r0
 80074f4:	4b44      	ldr	r3, [pc, #272]	; (8007608 <__multiply+0x14c>)
 80074f6:	4845      	ldr	r0, [pc, #276]	; (800760c <__multiply+0x150>)
 80074f8:	f240 115d 	movw	r1, #349	; 0x15d
 80074fc:	f000 fcda 	bl	8007eb4 <__assert_func>
 8007500:	f100 0514 	add.w	r5, r0, #20
 8007504:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007508:	462b      	mov	r3, r5
 800750a:	2200      	movs	r2, #0
 800750c:	4543      	cmp	r3, r8
 800750e:	d321      	bcc.n	8007554 <__multiply+0x98>
 8007510:	f104 0314 	add.w	r3, r4, #20
 8007514:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007518:	f109 0314 	add.w	r3, r9, #20
 800751c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007520:	9202      	str	r2, [sp, #8]
 8007522:	1b3a      	subs	r2, r7, r4
 8007524:	3a15      	subs	r2, #21
 8007526:	f022 0203 	bic.w	r2, r2, #3
 800752a:	3204      	adds	r2, #4
 800752c:	f104 0115 	add.w	r1, r4, #21
 8007530:	428f      	cmp	r7, r1
 8007532:	bf38      	it	cc
 8007534:	2204      	movcc	r2, #4
 8007536:	9201      	str	r2, [sp, #4]
 8007538:	9a02      	ldr	r2, [sp, #8]
 800753a:	9303      	str	r3, [sp, #12]
 800753c:	429a      	cmp	r2, r3
 800753e:	d80c      	bhi.n	800755a <__multiply+0x9e>
 8007540:	2e00      	cmp	r6, #0
 8007542:	dd03      	ble.n	800754c <__multiply+0x90>
 8007544:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007548:	2b00      	cmp	r3, #0
 800754a:	d05a      	beq.n	8007602 <__multiply+0x146>
 800754c:	6106      	str	r6, [r0, #16]
 800754e:	b005      	add	sp, #20
 8007550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007554:	f843 2b04 	str.w	r2, [r3], #4
 8007558:	e7d8      	b.n	800750c <__multiply+0x50>
 800755a:	f8b3 a000 	ldrh.w	sl, [r3]
 800755e:	f1ba 0f00 	cmp.w	sl, #0
 8007562:	d024      	beq.n	80075ae <__multiply+0xf2>
 8007564:	f104 0e14 	add.w	lr, r4, #20
 8007568:	46a9      	mov	r9, r5
 800756a:	f04f 0c00 	mov.w	ip, #0
 800756e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007572:	f8d9 1000 	ldr.w	r1, [r9]
 8007576:	fa1f fb82 	uxth.w	fp, r2
 800757a:	b289      	uxth	r1, r1
 800757c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007580:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007584:	f8d9 2000 	ldr.w	r2, [r9]
 8007588:	4461      	add	r1, ip
 800758a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800758e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007592:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007596:	b289      	uxth	r1, r1
 8007598:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800759c:	4577      	cmp	r7, lr
 800759e:	f849 1b04 	str.w	r1, [r9], #4
 80075a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075a6:	d8e2      	bhi.n	800756e <__multiply+0xb2>
 80075a8:	9a01      	ldr	r2, [sp, #4]
 80075aa:	f845 c002 	str.w	ip, [r5, r2]
 80075ae:	9a03      	ldr	r2, [sp, #12]
 80075b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075b4:	3304      	adds	r3, #4
 80075b6:	f1b9 0f00 	cmp.w	r9, #0
 80075ba:	d020      	beq.n	80075fe <__multiply+0x142>
 80075bc:	6829      	ldr	r1, [r5, #0]
 80075be:	f104 0c14 	add.w	ip, r4, #20
 80075c2:	46ae      	mov	lr, r5
 80075c4:	f04f 0a00 	mov.w	sl, #0
 80075c8:	f8bc b000 	ldrh.w	fp, [ip]
 80075cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075d0:	fb09 220b 	mla	r2, r9, fp, r2
 80075d4:	4492      	add	sl, r2
 80075d6:	b289      	uxth	r1, r1
 80075d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80075dc:	f84e 1b04 	str.w	r1, [lr], #4
 80075e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80075e4:	f8be 1000 	ldrh.w	r1, [lr]
 80075e8:	0c12      	lsrs	r2, r2, #16
 80075ea:	fb09 1102 	mla	r1, r9, r2, r1
 80075ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80075f2:	4567      	cmp	r7, ip
 80075f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075f8:	d8e6      	bhi.n	80075c8 <__multiply+0x10c>
 80075fa:	9a01      	ldr	r2, [sp, #4]
 80075fc:	50a9      	str	r1, [r5, r2]
 80075fe:	3504      	adds	r5, #4
 8007600:	e79a      	b.n	8007538 <__multiply+0x7c>
 8007602:	3e01      	subs	r6, #1
 8007604:	e79c      	b.n	8007540 <__multiply+0x84>
 8007606:	bf00      	nop
 8007608:	080083fb 	.word	0x080083fb
 800760c:	0800846c 	.word	0x0800846c

08007610 <__pow5mult>:
 8007610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007614:	4615      	mov	r5, r2
 8007616:	f012 0203 	ands.w	r2, r2, #3
 800761a:	4606      	mov	r6, r0
 800761c:	460f      	mov	r7, r1
 800761e:	d007      	beq.n	8007630 <__pow5mult+0x20>
 8007620:	4c25      	ldr	r4, [pc, #148]	; (80076b8 <__pow5mult+0xa8>)
 8007622:	3a01      	subs	r2, #1
 8007624:	2300      	movs	r3, #0
 8007626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800762a:	f7ff fe9b 	bl	8007364 <__multadd>
 800762e:	4607      	mov	r7, r0
 8007630:	10ad      	asrs	r5, r5, #2
 8007632:	d03d      	beq.n	80076b0 <__pow5mult+0xa0>
 8007634:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007636:	b97c      	cbnz	r4, 8007658 <__pow5mult+0x48>
 8007638:	2010      	movs	r0, #16
 800763a:	f7fe f913 	bl	8005864 <malloc>
 800763e:	4602      	mov	r2, r0
 8007640:	6270      	str	r0, [r6, #36]	; 0x24
 8007642:	b928      	cbnz	r0, 8007650 <__pow5mult+0x40>
 8007644:	4b1d      	ldr	r3, [pc, #116]	; (80076bc <__pow5mult+0xac>)
 8007646:	481e      	ldr	r0, [pc, #120]	; (80076c0 <__pow5mult+0xb0>)
 8007648:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800764c:	f000 fc32 	bl	8007eb4 <__assert_func>
 8007650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007654:	6004      	str	r4, [r0, #0]
 8007656:	60c4      	str	r4, [r0, #12]
 8007658:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800765c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007660:	b94c      	cbnz	r4, 8007676 <__pow5mult+0x66>
 8007662:	f240 2171 	movw	r1, #625	; 0x271
 8007666:	4630      	mov	r0, r6
 8007668:	f7ff ff12 	bl	8007490 <__i2b>
 800766c:	2300      	movs	r3, #0
 800766e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007672:	4604      	mov	r4, r0
 8007674:	6003      	str	r3, [r0, #0]
 8007676:	f04f 0900 	mov.w	r9, #0
 800767a:	07eb      	lsls	r3, r5, #31
 800767c:	d50a      	bpl.n	8007694 <__pow5mult+0x84>
 800767e:	4639      	mov	r1, r7
 8007680:	4622      	mov	r2, r4
 8007682:	4630      	mov	r0, r6
 8007684:	f7ff ff1a 	bl	80074bc <__multiply>
 8007688:	4639      	mov	r1, r7
 800768a:	4680      	mov	r8, r0
 800768c:	4630      	mov	r0, r6
 800768e:	f7ff fe47 	bl	8007320 <_Bfree>
 8007692:	4647      	mov	r7, r8
 8007694:	106d      	asrs	r5, r5, #1
 8007696:	d00b      	beq.n	80076b0 <__pow5mult+0xa0>
 8007698:	6820      	ldr	r0, [r4, #0]
 800769a:	b938      	cbnz	r0, 80076ac <__pow5mult+0x9c>
 800769c:	4622      	mov	r2, r4
 800769e:	4621      	mov	r1, r4
 80076a0:	4630      	mov	r0, r6
 80076a2:	f7ff ff0b 	bl	80074bc <__multiply>
 80076a6:	6020      	str	r0, [r4, #0]
 80076a8:	f8c0 9000 	str.w	r9, [r0]
 80076ac:	4604      	mov	r4, r0
 80076ae:	e7e4      	b.n	800767a <__pow5mult+0x6a>
 80076b0:	4638      	mov	r0, r7
 80076b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b6:	bf00      	nop
 80076b8:	080085b8 	.word	0x080085b8
 80076bc:	08008389 	.word	0x08008389
 80076c0:	0800846c 	.word	0x0800846c

080076c4 <__lshift>:
 80076c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c8:	460c      	mov	r4, r1
 80076ca:	6849      	ldr	r1, [r1, #4]
 80076cc:	6923      	ldr	r3, [r4, #16]
 80076ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076d2:	68a3      	ldr	r3, [r4, #8]
 80076d4:	4607      	mov	r7, r0
 80076d6:	4691      	mov	r9, r2
 80076d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076dc:	f108 0601 	add.w	r6, r8, #1
 80076e0:	42b3      	cmp	r3, r6
 80076e2:	db0b      	blt.n	80076fc <__lshift+0x38>
 80076e4:	4638      	mov	r0, r7
 80076e6:	f7ff fddb 	bl	80072a0 <_Balloc>
 80076ea:	4605      	mov	r5, r0
 80076ec:	b948      	cbnz	r0, 8007702 <__lshift+0x3e>
 80076ee:	4602      	mov	r2, r0
 80076f0:	4b2a      	ldr	r3, [pc, #168]	; (800779c <__lshift+0xd8>)
 80076f2:	482b      	ldr	r0, [pc, #172]	; (80077a0 <__lshift+0xdc>)
 80076f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80076f8:	f000 fbdc 	bl	8007eb4 <__assert_func>
 80076fc:	3101      	adds	r1, #1
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	e7ee      	b.n	80076e0 <__lshift+0x1c>
 8007702:	2300      	movs	r3, #0
 8007704:	f100 0114 	add.w	r1, r0, #20
 8007708:	f100 0210 	add.w	r2, r0, #16
 800770c:	4618      	mov	r0, r3
 800770e:	4553      	cmp	r3, sl
 8007710:	db37      	blt.n	8007782 <__lshift+0xbe>
 8007712:	6920      	ldr	r0, [r4, #16]
 8007714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007718:	f104 0314 	add.w	r3, r4, #20
 800771c:	f019 091f 	ands.w	r9, r9, #31
 8007720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007724:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007728:	d02f      	beq.n	800778a <__lshift+0xc6>
 800772a:	f1c9 0e20 	rsb	lr, r9, #32
 800772e:	468a      	mov	sl, r1
 8007730:	f04f 0c00 	mov.w	ip, #0
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	fa02 f209 	lsl.w	r2, r2, r9
 800773a:	ea42 020c 	orr.w	r2, r2, ip
 800773e:	f84a 2b04 	str.w	r2, [sl], #4
 8007742:	f853 2b04 	ldr.w	r2, [r3], #4
 8007746:	4298      	cmp	r0, r3
 8007748:	fa22 fc0e 	lsr.w	ip, r2, lr
 800774c:	d8f2      	bhi.n	8007734 <__lshift+0x70>
 800774e:	1b03      	subs	r3, r0, r4
 8007750:	3b15      	subs	r3, #21
 8007752:	f023 0303 	bic.w	r3, r3, #3
 8007756:	3304      	adds	r3, #4
 8007758:	f104 0215 	add.w	r2, r4, #21
 800775c:	4290      	cmp	r0, r2
 800775e:	bf38      	it	cc
 8007760:	2304      	movcc	r3, #4
 8007762:	f841 c003 	str.w	ip, [r1, r3]
 8007766:	f1bc 0f00 	cmp.w	ip, #0
 800776a:	d001      	beq.n	8007770 <__lshift+0xac>
 800776c:	f108 0602 	add.w	r6, r8, #2
 8007770:	3e01      	subs	r6, #1
 8007772:	4638      	mov	r0, r7
 8007774:	612e      	str	r6, [r5, #16]
 8007776:	4621      	mov	r1, r4
 8007778:	f7ff fdd2 	bl	8007320 <_Bfree>
 800777c:	4628      	mov	r0, r5
 800777e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007782:	f842 0f04 	str.w	r0, [r2, #4]!
 8007786:	3301      	adds	r3, #1
 8007788:	e7c1      	b.n	800770e <__lshift+0x4a>
 800778a:	3904      	subs	r1, #4
 800778c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007790:	f841 2f04 	str.w	r2, [r1, #4]!
 8007794:	4298      	cmp	r0, r3
 8007796:	d8f9      	bhi.n	800778c <__lshift+0xc8>
 8007798:	e7ea      	b.n	8007770 <__lshift+0xac>
 800779a:	bf00      	nop
 800779c:	080083fb 	.word	0x080083fb
 80077a0:	0800846c 	.word	0x0800846c

080077a4 <__mcmp>:
 80077a4:	b530      	push	{r4, r5, lr}
 80077a6:	6902      	ldr	r2, [r0, #16]
 80077a8:	690c      	ldr	r4, [r1, #16]
 80077aa:	1b12      	subs	r2, r2, r4
 80077ac:	d10e      	bne.n	80077cc <__mcmp+0x28>
 80077ae:	f100 0314 	add.w	r3, r0, #20
 80077b2:	3114      	adds	r1, #20
 80077b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80077b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80077bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80077c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077c4:	42a5      	cmp	r5, r4
 80077c6:	d003      	beq.n	80077d0 <__mcmp+0x2c>
 80077c8:	d305      	bcc.n	80077d6 <__mcmp+0x32>
 80077ca:	2201      	movs	r2, #1
 80077cc:	4610      	mov	r0, r2
 80077ce:	bd30      	pop	{r4, r5, pc}
 80077d0:	4283      	cmp	r3, r0
 80077d2:	d3f3      	bcc.n	80077bc <__mcmp+0x18>
 80077d4:	e7fa      	b.n	80077cc <__mcmp+0x28>
 80077d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077da:	e7f7      	b.n	80077cc <__mcmp+0x28>

080077dc <__mdiff>:
 80077dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e0:	460c      	mov	r4, r1
 80077e2:	4606      	mov	r6, r0
 80077e4:	4611      	mov	r1, r2
 80077e6:	4620      	mov	r0, r4
 80077e8:	4690      	mov	r8, r2
 80077ea:	f7ff ffdb 	bl	80077a4 <__mcmp>
 80077ee:	1e05      	subs	r5, r0, #0
 80077f0:	d110      	bne.n	8007814 <__mdiff+0x38>
 80077f2:	4629      	mov	r1, r5
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7ff fd53 	bl	80072a0 <_Balloc>
 80077fa:	b930      	cbnz	r0, 800780a <__mdiff+0x2e>
 80077fc:	4b3a      	ldr	r3, [pc, #232]	; (80078e8 <__mdiff+0x10c>)
 80077fe:	4602      	mov	r2, r0
 8007800:	f240 2132 	movw	r1, #562	; 0x232
 8007804:	4839      	ldr	r0, [pc, #228]	; (80078ec <__mdiff+0x110>)
 8007806:	f000 fb55 	bl	8007eb4 <__assert_func>
 800780a:	2301      	movs	r3, #1
 800780c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007814:	bfa4      	itt	ge
 8007816:	4643      	movge	r3, r8
 8007818:	46a0      	movge	r8, r4
 800781a:	4630      	mov	r0, r6
 800781c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007820:	bfa6      	itte	ge
 8007822:	461c      	movge	r4, r3
 8007824:	2500      	movge	r5, #0
 8007826:	2501      	movlt	r5, #1
 8007828:	f7ff fd3a 	bl	80072a0 <_Balloc>
 800782c:	b920      	cbnz	r0, 8007838 <__mdiff+0x5c>
 800782e:	4b2e      	ldr	r3, [pc, #184]	; (80078e8 <__mdiff+0x10c>)
 8007830:	4602      	mov	r2, r0
 8007832:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007836:	e7e5      	b.n	8007804 <__mdiff+0x28>
 8007838:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800783c:	6926      	ldr	r6, [r4, #16]
 800783e:	60c5      	str	r5, [r0, #12]
 8007840:	f104 0914 	add.w	r9, r4, #20
 8007844:	f108 0514 	add.w	r5, r8, #20
 8007848:	f100 0e14 	add.w	lr, r0, #20
 800784c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007850:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007854:	f108 0210 	add.w	r2, r8, #16
 8007858:	46f2      	mov	sl, lr
 800785a:	2100      	movs	r1, #0
 800785c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007860:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007864:	fa1f f883 	uxth.w	r8, r3
 8007868:	fa11 f18b 	uxtah	r1, r1, fp
 800786c:	0c1b      	lsrs	r3, r3, #16
 800786e:	eba1 0808 	sub.w	r8, r1, r8
 8007872:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007876:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800787a:	fa1f f888 	uxth.w	r8, r8
 800787e:	1419      	asrs	r1, r3, #16
 8007880:	454e      	cmp	r6, r9
 8007882:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007886:	f84a 3b04 	str.w	r3, [sl], #4
 800788a:	d8e7      	bhi.n	800785c <__mdiff+0x80>
 800788c:	1b33      	subs	r3, r6, r4
 800788e:	3b15      	subs	r3, #21
 8007890:	f023 0303 	bic.w	r3, r3, #3
 8007894:	3304      	adds	r3, #4
 8007896:	3415      	adds	r4, #21
 8007898:	42a6      	cmp	r6, r4
 800789a:	bf38      	it	cc
 800789c:	2304      	movcc	r3, #4
 800789e:	441d      	add	r5, r3
 80078a0:	4473      	add	r3, lr
 80078a2:	469e      	mov	lr, r3
 80078a4:	462e      	mov	r6, r5
 80078a6:	4566      	cmp	r6, ip
 80078a8:	d30e      	bcc.n	80078c8 <__mdiff+0xec>
 80078aa:	f10c 0203 	add.w	r2, ip, #3
 80078ae:	1b52      	subs	r2, r2, r5
 80078b0:	f022 0203 	bic.w	r2, r2, #3
 80078b4:	3d03      	subs	r5, #3
 80078b6:	45ac      	cmp	ip, r5
 80078b8:	bf38      	it	cc
 80078ba:	2200      	movcc	r2, #0
 80078bc:	441a      	add	r2, r3
 80078be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80078c2:	b17b      	cbz	r3, 80078e4 <__mdiff+0x108>
 80078c4:	6107      	str	r7, [r0, #16]
 80078c6:	e7a3      	b.n	8007810 <__mdiff+0x34>
 80078c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80078cc:	fa11 f288 	uxtah	r2, r1, r8
 80078d0:	1414      	asrs	r4, r2, #16
 80078d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078d6:	b292      	uxth	r2, r2
 80078d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80078dc:	f84e 2b04 	str.w	r2, [lr], #4
 80078e0:	1421      	asrs	r1, r4, #16
 80078e2:	e7e0      	b.n	80078a6 <__mdiff+0xca>
 80078e4:	3f01      	subs	r7, #1
 80078e6:	e7ea      	b.n	80078be <__mdiff+0xe2>
 80078e8:	080083fb 	.word	0x080083fb
 80078ec:	0800846c 	.word	0x0800846c

080078f0 <__d2b>:
 80078f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078f4:	4689      	mov	r9, r1
 80078f6:	2101      	movs	r1, #1
 80078f8:	ec57 6b10 	vmov	r6, r7, d0
 80078fc:	4690      	mov	r8, r2
 80078fe:	f7ff fccf 	bl	80072a0 <_Balloc>
 8007902:	4604      	mov	r4, r0
 8007904:	b930      	cbnz	r0, 8007914 <__d2b+0x24>
 8007906:	4602      	mov	r2, r0
 8007908:	4b25      	ldr	r3, [pc, #148]	; (80079a0 <__d2b+0xb0>)
 800790a:	4826      	ldr	r0, [pc, #152]	; (80079a4 <__d2b+0xb4>)
 800790c:	f240 310a 	movw	r1, #778	; 0x30a
 8007910:	f000 fad0 	bl	8007eb4 <__assert_func>
 8007914:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007918:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800791c:	bb35      	cbnz	r5, 800796c <__d2b+0x7c>
 800791e:	2e00      	cmp	r6, #0
 8007920:	9301      	str	r3, [sp, #4]
 8007922:	d028      	beq.n	8007976 <__d2b+0x86>
 8007924:	4668      	mov	r0, sp
 8007926:	9600      	str	r6, [sp, #0]
 8007928:	f7ff fd82 	bl	8007430 <__lo0bits>
 800792c:	9900      	ldr	r1, [sp, #0]
 800792e:	b300      	cbz	r0, 8007972 <__d2b+0x82>
 8007930:	9a01      	ldr	r2, [sp, #4]
 8007932:	f1c0 0320 	rsb	r3, r0, #32
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	430b      	orrs	r3, r1
 800793c:	40c2      	lsrs	r2, r0
 800793e:	6163      	str	r3, [r4, #20]
 8007940:	9201      	str	r2, [sp, #4]
 8007942:	9b01      	ldr	r3, [sp, #4]
 8007944:	61a3      	str	r3, [r4, #24]
 8007946:	2b00      	cmp	r3, #0
 8007948:	bf14      	ite	ne
 800794a:	2202      	movne	r2, #2
 800794c:	2201      	moveq	r2, #1
 800794e:	6122      	str	r2, [r4, #16]
 8007950:	b1d5      	cbz	r5, 8007988 <__d2b+0x98>
 8007952:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007956:	4405      	add	r5, r0
 8007958:	f8c9 5000 	str.w	r5, [r9]
 800795c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007960:	f8c8 0000 	str.w	r0, [r8]
 8007964:	4620      	mov	r0, r4
 8007966:	b003      	add	sp, #12
 8007968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800796c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007970:	e7d5      	b.n	800791e <__d2b+0x2e>
 8007972:	6161      	str	r1, [r4, #20]
 8007974:	e7e5      	b.n	8007942 <__d2b+0x52>
 8007976:	a801      	add	r0, sp, #4
 8007978:	f7ff fd5a 	bl	8007430 <__lo0bits>
 800797c:	9b01      	ldr	r3, [sp, #4]
 800797e:	6163      	str	r3, [r4, #20]
 8007980:	2201      	movs	r2, #1
 8007982:	6122      	str	r2, [r4, #16]
 8007984:	3020      	adds	r0, #32
 8007986:	e7e3      	b.n	8007950 <__d2b+0x60>
 8007988:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800798c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007990:	f8c9 0000 	str.w	r0, [r9]
 8007994:	6918      	ldr	r0, [r3, #16]
 8007996:	f7ff fd2b 	bl	80073f0 <__hi0bits>
 800799a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800799e:	e7df      	b.n	8007960 <__d2b+0x70>
 80079a0:	080083fb 	.word	0x080083fb
 80079a4:	0800846c 	.word	0x0800846c

080079a8 <_calloc_r>:
 80079a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079aa:	fba1 2402 	umull	r2, r4, r1, r2
 80079ae:	b94c      	cbnz	r4, 80079c4 <_calloc_r+0x1c>
 80079b0:	4611      	mov	r1, r2
 80079b2:	9201      	str	r2, [sp, #4]
 80079b4:	f7fd ffe8 	bl	8005988 <_malloc_r>
 80079b8:	9a01      	ldr	r2, [sp, #4]
 80079ba:	4605      	mov	r5, r0
 80079bc:	b930      	cbnz	r0, 80079cc <_calloc_r+0x24>
 80079be:	4628      	mov	r0, r5
 80079c0:	b003      	add	sp, #12
 80079c2:	bd30      	pop	{r4, r5, pc}
 80079c4:	220c      	movs	r2, #12
 80079c6:	6002      	str	r2, [r0, #0]
 80079c8:	2500      	movs	r5, #0
 80079ca:	e7f8      	b.n	80079be <_calloc_r+0x16>
 80079cc:	4621      	mov	r1, r4
 80079ce:	f7fd ff67 	bl	80058a0 <memset>
 80079d2:	e7f4      	b.n	80079be <_calloc_r+0x16>

080079d4 <__sfputc_r>:
 80079d4:	6893      	ldr	r3, [r2, #8]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	b410      	push	{r4}
 80079dc:	6093      	str	r3, [r2, #8]
 80079de:	da08      	bge.n	80079f2 <__sfputc_r+0x1e>
 80079e0:	6994      	ldr	r4, [r2, #24]
 80079e2:	42a3      	cmp	r3, r4
 80079e4:	db01      	blt.n	80079ea <__sfputc_r+0x16>
 80079e6:	290a      	cmp	r1, #10
 80079e8:	d103      	bne.n	80079f2 <__sfputc_r+0x1e>
 80079ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ee:	f000 b98f 	b.w	8007d10 <__swbuf_r>
 80079f2:	6813      	ldr	r3, [r2, #0]
 80079f4:	1c58      	adds	r0, r3, #1
 80079f6:	6010      	str	r0, [r2, #0]
 80079f8:	7019      	strb	r1, [r3, #0]
 80079fa:	4608      	mov	r0, r1
 80079fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <__sfputs_r>:
 8007a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a04:	4606      	mov	r6, r0
 8007a06:	460f      	mov	r7, r1
 8007a08:	4614      	mov	r4, r2
 8007a0a:	18d5      	adds	r5, r2, r3
 8007a0c:	42ac      	cmp	r4, r5
 8007a0e:	d101      	bne.n	8007a14 <__sfputs_r+0x12>
 8007a10:	2000      	movs	r0, #0
 8007a12:	e007      	b.n	8007a24 <__sfputs_r+0x22>
 8007a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a18:	463a      	mov	r2, r7
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f7ff ffda 	bl	80079d4 <__sfputc_r>
 8007a20:	1c43      	adds	r3, r0, #1
 8007a22:	d1f3      	bne.n	8007a0c <__sfputs_r+0xa>
 8007a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a28 <_vfiprintf_r>:
 8007a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2c:	460d      	mov	r5, r1
 8007a2e:	b09d      	sub	sp, #116	; 0x74
 8007a30:	4614      	mov	r4, r2
 8007a32:	4698      	mov	r8, r3
 8007a34:	4606      	mov	r6, r0
 8007a36:	b118      	cbz	r0, 8007a40 <_vfiprintf_r+0x18>
 8007a38:	6983      	ldr	r3, [r0, #24]
 8007a3a:	b90b      	cbnz	r3, 8007a40 <_vfiprintf_r+0x18>
 8007a3c:	f7ff fb7e 	bl	800713c <__sinit>
 8007a40:	4b89      	ldr	r3, [pc, #548]	; (8007c68 <_vfiprintf_r+0x240>)
 8007a42:	429d      	cmp	r5, r3
 8007a44:	d11b      	bne.n	8007a7e <_vfiprintf_r+0x56>
 8007a46:	6875      	ldr	r5, [r6, #4]
 8007a48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a4a:	07d9      	lsls	r1, r3, #31
 8007a4c:	d405      	bmi.n	8007a5a <_vfiprintf_r+0x32>
 8007a4e:	89ab      	ldrh	r3, [r5, #12]
 8007a50:	059a      	lsls	r2, r3, #22
 8007a52:	d402      	bmi.n	8007a5a <_vfiprintf_r+0x32>
 8007a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a56:	f7ff fc14 	bl	8007282 <__retarget_lock_acquire_recursive>
 8007a5a:	89ab      	ldrh	r3, [r5, #12]
 8007a5c:	071b      	lsls	r3, r3, #28
 8007a5e:	d501      	bpl.n	8007a64 <_vfiprintf_r+0x3c>
 8007a60:	692b      	ldr	r3, [r5, #16]
 8007a62:	b9eb      	cbnz	r3, 8007aa0 <_vfiprintf_r+0x78>
 8007a64:	4629      	mov	r1, r5
 8007a66:	4630      	mov	r0, r6
 8007a68:	f000 f9b6 	bl	8007dd8 <__swsetup_r>
 8007a6c:	b1c0      	cbz	r0, 8007aa0 <_vfiprintf_r+0x78>
 8007a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a70:	07dc      	lsls	r4, r3, #31
 8007a72:	d50e      	bpl.n	8007a92 <_vfiprintf_r+0x6a>
 8007a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a78:	b01d      	add	sp, #116	; 0x74
 8007a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7e:	4b7b      	ldr	r3, [pc, #492]	; (8007c6c <_vfiprintf_r+0x244>)
 8007a80:	429d      	cmp	r5, r3
 8007a82:	d101      	bne.n	8007a88 <_vfiprintf_r+0x60>
 8007a84:	68b5      	ldr	r5, [r6, #8]
 8007a86:	e7df      	b.n	8007a48 <_vfiprintf_r+0x20>
 8007a88:	4b79      	ldr	r3, [pc, #484]	; (8007c70 <_vfiprintf_r+0x248>)
 8007a8a:	429d      	cmp	r5, r3
 8007a8c:	bf08      	it	eq
 8007a8e:	68f5      	ldreq	r5, [r6, #12]
 8007a90:	e7da      	b.n	8007a48 <_vfiprintf_r+0x20>
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	0598      	lsls	r0, r3, #22
 8007a96:	d4ed      	bmi.n	8007a74 <_vfiprintf_r+0x4c>
 8007a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a9a:	f7ff fbf3 	bl	8007284 <__retarget_lock_release_recursive>
 8007a9e:	e7e9      	b.n	8007a74 <_vfiprintf_r+0x4c>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa4:	2320      	movs	r3, #32
 8007aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aae:	2330      	movs	r3, #48	; 0x30
 8007ab0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c74 <_vfiprintf_r+0x24c>
 8007ab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ab8:	f04f 0901 	mov.w	r9, #1
 8007abc:	4623      	mov	r3, r4
 8007abe:	469a      	mov	sl, r3
 8007ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ac4:	b10a      	cbz	r2, 8007aca <_vfiprintf_r+0xa2>
 8007ac6:	2a25      	cmp	r2, #37	; 0x25
 8007ac8:	d1f9      	bne.n	8007abe <_vfiprintf_r+0x96>
 8007aca:	ebba 0b04 	subs.w	fp, sl, r4
 8007ace:	d00b      	beq.n	8007ae8 <_vfiprintf_r+0xc0>
 8007ad0:	465b      	mov	r3, fp
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f7ff ff93 	bl	8007a02 <__sfputs_r>
 8007adc:	3001      	adds	r0, #1
 8007ade:	f000 80aa 	beq.w	8007c36 <_vfiprintf_r+0x20e>
 8007ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae4:	445a      	add	r2, fp
 8007ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80a2 	beq.w	8007c36 <_vfiprintf_r+0x20e>
 8007af2:	2300      	movs	r3, #0
 8007af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007afc:	f10a 0a01 	add.w	sl, sl, #1
 8007b00:	9304      	str	r3, [sp, #16]
 8007b02:	9307      	str	r3, [sp, #28]
 8007b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b08:	931a      	str	r3, [sp, #104]	; 0x68
 8007b0a:	4654      	mov	r4, sl
 8007b0c:	2205      	movs	r2, #5
 8007b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b12:	4858      	ldr	r0, [pc, #352]	; (8007c74 <_vfiprintf_r+0x24c>)
 8007b14:	f7f8 fb84 	bl	8000220 <memchr>
 8007b18:	9a04      	ldr	r2, [sp, #16]
 8007b1a:	b9d8      	cbnz	r0, 8007b54 <_vfiprintf_r+0x12c>
 8007b1c:	06d1      	lsls	r1, r2, #27
 8007b1e:	bf44      	itt	mi
 8007b20:	2320      	movmi	r3, #32
 8007b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b26:	0713      	lsls	r3, r2, #28
 8007b28:	bf44      	itt	mi
 8007b2a:	232b      	movmi	r3, #43	; 0x2b
 8007b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b30:	f89a 3000 	ldrb.w	r3, [sl]
 8007b34:	2b2a      	cmp	r3, #42	; 0x2a
 8007b36:	d015      	beq.n	8007b64 <_vfiprintf_r+0x13c>
 8007b38:	9a07      	ldr	r2, [sp, #28]
 8007b3a:	4654      	mov	r4, sl
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f04f 0c0a 	mov.w	ip, #10
 8007b42:	4621      	mov	r1, r4
 8007b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b48:	3b30      	subs	r3, #48	; 0x30
 8007b4a:	2b09      	cmp	r3, #9
 8007b4c:	d94e      	bls.n	8007bec <_vfiprintf_r+0x1c4>
 8007b4e:	b1b0      	cbz	r0, 8007b7e <_vfiprintf_r+0x156>
 8007b50:	9207      	str	r2, [sp, #28]
 8007b52:	e014      	b.n	8007b7e <_vfiprintf_r+0x156>
 8007b54:	eba0 0308 	sub.w	r3, r0, r8
 8007b58:	fa09 f303 	lsl.w	r3, r9, r3
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	9304      	str	r3, [sp, #16]
 8007b60:	46a2      	mov	sl, r4
 8007b62:	e7d2      	b.n	8007b0a <_vfiprintf_r+0xe2>
 8007b64:	9b03      	ldr	r3, [sp, #12]
 8007b66:	1d19      	adds	r1, r3, #4
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	9103      	str	r1, [sp, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	bfbb      	ittet	lt
 8007b70:	425b      	neglt	r3, r3
 8007b72:	f042 0202 	orrlt.w	r2, r2, #2
 8007b76:	9307      	strge	r3, [sp, #28]
 8007b78:	9307      	strlt	r3, [sp, #28]
 8007b7a:	bfb8      	it	lt
 8007b7c:	9204      	strlt	r2, [sp, #16]
 8007b7e:	7823      	ldrb	r3, [r4, #0]
 8007b80:	2b2e      	cmp	r3, #46	; 0x2e
 8007b82:	d10c      	bne.n	8007b9e <_vfiprintf_r+0x176>
 8007b84:	7863      	ldrb	r3, [r4, #1]
 8007b86:	2b2a      	cmp	r3, #42	; 0x2a
 8007b88:	d135      	bne.n	8007bf6 <_vfiprintf_r+0x1ce>
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	1d1a      	adds	r2, r3, #4
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	9203      	str	r2, [sp, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	bfb8      	it	lt
 8007b96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b9a:	3402      	adds	r4, #2
 8007b9c:	9305      	str	r3, [sp, #20]
 8007b9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c84 <_vfiprintf_r+0x25c>
 8007ba2:	7821      	ldrb	r1, [r4, #0]
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	4650      	mov	r0, sl
 8007ba8:	f7f8 fb3a 	bl	8000220 <memchr>
 8007bac:	b140      	cbz	r0, 8007bc0 <_vfiprintf_r+0x198>
 8007bae:	2340      	movs	r3, #64	; 0x40
 8007bb0:	eba0 000a 	sub.w	r0, r0, sl
 8007bb4:	fa03 f000 	lsl.w	r0, r3, r0
 8007bb8:	9b04      	ldr	r3, [sp, #16]
 8007bba:	4303      	orrs	r3, r0
 8007bbc:	3401      	adds	r4, #1
 8007bbe:	9304      	str	r3, [sp, #16]
 8007bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc4:	482c      	ldr	r0, [pc, #176]	; (8007c78 <_vfiprintf_r+0x250>)
 8007bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bca:	2206      	movs	r2, #6
 8007bcc:	f7f8 fb28 	bl	8000220 <memchr>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d03f      	beq.n	8007c54 <_vfiprintf_r+0x22c>
 8007bd4:	4b29      	ldr	r3, [pc, #164]	; (8007c7c <_vfiprintf_r+0x254>)
 8007bd6:	bb1b      	cbnz	r3, 8007c20 <_vfiprintf_r+0x1f8>
 8007bd8:	9b03      	ldr	r3, [sp, #12]
 8007bda:	3307      	adds	r3, #7
 8007bdc:	f023 0307 	bic.w	r3, r3, #7
 8007be0:	3308      	adds	r3, #8
 8007be2:	9303      	str	r3, [sp, #12]
 8007be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be6:	443b      	add	r3, r7
 8007be8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bea:	e767      	b.n	8007abc <_vfiprintf_r+0x94>
 8007bec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	2001      	movs	r0, #1
 8007bf4:	e7a5      	b.n	8007b42 <_vfiprintf_r+0x11a>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	3401      	adds	r4, #1
 8007bfa:	9305      	str	r3, [sp, #20]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	f04f 0c0a 	mov.w	ip, #10
 8007c02:	4620      	mov	r0, r4
 8007c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c08:	3a30      	subs	r2, #48	; 0x30
 8007c0a:	2a09      	cmp	r2, #9
 8007c0c:	d903      	bls.n	8007c16 <_vfiprintf_r+0x1ee>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0c5      	beq.n	8007b9e <_vfiprintf_r+0x176>
 8007c12:	9105      	str	r1, [sp, #20]
 8007c14:	e7c3      	b.n	8007b9e <_vfiprintf_r+0x176>
 8007c16:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e7f0      	b.n	8007c02 <_vfiprintf_r+0x1da>
 8007c20:	ab03      	add	r3, sp, #12
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	462a      	mov	r2, r5
 8007c26:	4b16      	ldr	r3, [pc, #88]	; (8007c80 <_vfiprintf_r+0x258>)
 8007c28:	a904      	add	r1, sp, #16
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f7fd ffc0 	bl	8005bb0 <_printf_float>
 8007c30:	4607      	mov	r7, r0
 8007c32:	1c78      	adds	r0, r7, #1
 8007c34:	d1d6      	bne.n	8007be4 <_vfiprintf_r+0x1bc>
 8007c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c38:	07d9      	lsls	r1, r3, #31
 8007c3a:	d405      	bmi.n	8007c48 <_vfiprintf_r+0x220>
 8007c3c:	89ab      	ldrh	r3, [r5, #12]
 8007c3e:	059a      	lsls	r2, r3, #22
 8007c40:	d402      	bmi.n	8007c48 <_vfiprintf_r+0x220>
 8007c42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c44:	f7ff fb1e 	bl	8007284 <__retarget_lock_release_recursive>
 8007c48:	89ab      	ldrh	r3, [r5, #12]
 8007c4a:	065b      	lsls	r3, r3, #25
 8007c4c:	f53f af12 	bmi.w	8007a74 <_vfiprintf_r+0x4c>
 8007c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c52:	e711      	b.n	8007a78 <_vfiprintf_r+0x50>
 8007c54:	ab03      	add	r3, sp, #12
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	462a      	mov	r2, r5
 8007c5a:	4b09      	ldr	r3, [pc, #36]	; (8007c80 <_vfiprintf_r+0x258>)
 8007c5c:	a904      	add	r1, sp, #16
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f7fe fa4a 	bl	80060f8 <_printf_i>
 8007c64:	e7e4      	b.n	8007c30 <_vfiprintf_r+0x208>
 8007c66:	bf00      	nop
 8007c68:	0800842c 	.word	0x0800842c
 8007c6c:	0800844c 	.word	0x0800844c
 8007c70:	0800840c 	.word	0x0800840c
 8007c74:	080085c4 	.word	0x080085c4
 8007c78:	080085ce 	.word	0x080085ce
 8007c7c:	08005bb1 	.word	0x08005bb1
 8007c80:	08007a03 	.word	0x08007a03
 8007c84:	080085ca 	.word	0x080085ca

08007c88 <__sread>:
 8007c88:	b510      	push	{r4, lr}
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c90:	f000 fa9c 	bl	80081cc <_read_r>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	bfab      	itete	ge
 8007c98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c9a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c9c:	181b      	addge	r3, r3, r0
 8007c9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ca2:	bfac      	ite	ge
 8007ca4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ca6:	81a3      	strhlt	r3, [r4, #12]
 8007ca8:	bd10      	pop	{r4, pc}

08007caa <__swrite>:
 8007caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cae:	461f      	mov	r7, r3
 8007cb0:	898b      	ldrh	r3, [r1, #12]
 8007cb2:	05db      	lsls	r3, r3, #23
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	4616      	mov	r6, r2
 8007cba:	d505      	bpl.n	8007cc8 <__swrite+0x1e>
 8007cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f000 f9f8 	bl	80080b8 <_lseek_r>
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cd2:	81a3      	strh	r3, [r4, #12]
 8007cd4:	4632      	mov	r2, r6
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	4628      	mov	r0, r5
 8007cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cde:	f000 b869 	b.w	8007db4 <_write_r>

08007ce2 <__sseek>:
 8007ce2:	b510      	push	{r4, lr}
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cea:	f000 f9e5 	bl	80080b8 <_lseek_r>
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	89a3      	ldrh	r3, [r4, #12]
 8007cf2:	bf15      	itete	ne
 8007cf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cfe:	81a3      	strheq	r3, [r4, #12]
 8007d00:	bf18      	it	ne
 8007d02:	81a3      	strhne	r3, [r4, #12]
 8007d04:	bd10      	pop	{r4, pc}

08007d06 <__sclose>:
 8007d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d0a:	f000 b8f1 	b.w	8007ef0 <_close_r>
	...

08007d10 <__swbuf_r>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	460e      	mov	r6, r1
 8007d14:	4614      	mov	r4, r2
 8007d16:	4605      	mov	r5, r0
 8007d18:	b118      	cbz	r0, 8007d22 <__swbuf_r+0x12>
 8007d1a:	6983      	ldr	r3, [r0, #24]
 8007d1c:	b90b      	cbnz	r3, 8007d22 <__swbuf_r+0x12>
 8007d1e:	f7ff fa0d 	bl	800713c <__sinit>
 8007d22:	4b21      	ldr	r3, [pc, #132]	; (8007da8 <__swbuf_r+0x98>)
 8007d24:	429c      	cmp	r4, r3
 8007d26:	d12b      	bne.n	8007d80 <__swbuf_r+0x70>
 8007d28:	686c      	ldr	r4, [r5, #4]
 8007d2a:	69a3      	ldr	r3, [r4, #24]
 8007d2c:	60a3      	str	r3, [r4, #8]
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	071a      	lsls	r2, r3, #28
 8007d32:	d52f      	bpl.n	8007d94 <__swbuf_r+0x84>
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	b36b      	cbz	r3, 8007d94 <__swbuf_r+0x84>
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	6820      	ldr	r0, [r4, #0]
 8007d3c:	1ac0      	subs	r0, r0, r3
 8007d3e:	6963      	ldr	r3, [r4, #20]
 8007d40:	b2f6      	uxtb	r6, r6
 8007d42:	4283      	cmp	r3, r0
 8007d44:	4637      	mov	r7, r6
 8007d46:	dc04      	bgt.n	8007d52 <__swbuf_r+0x42>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 f966 	bl	800801c <_fflush_r>
 8007d50:	bb30      	cbnz	r0, 8007da0 <__swbuf_r+0x90>
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	60a3      	str	r3, [r4, #8]
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	6022      	str	r2, [r4, #0]
 8007d5e:	701e      	strb	r6, [r3, #0]
 8007d60:	6963      	ldr	r3, [r4, #20]
 8007d62:	3001      	adds	r0, #1
 8007d64:	4283      	cmp	r3, r0
 8007d66:	d004      	beq.n	8007d72 <__swbuf_r+0x62>
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	07db      	lsls	r3, r3, #31
 8007d6c:	d506      	bpl.n	8007d7c <__swbuf_r+0x6c>
 8007d6e:	2e0a      	cmp	r6, #10
 8007d70:	d104      	bne.n	8007d7c <__swbuf_r+0x6c>
 8007d72:	4621      	mov	r1, r4
 8007d74:	4628      	mov	r0, r5
 8007d76:	f000 f951 	bl	800801c <_fflush_r>
 8007d7a:	b988      	cbnz	r0, 8007da0 <__swbuf_r+0x90>
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <__swbuf_r+0x9c>)
 8007d82:	429c      	cmp	r4, r3
 8007d84:	d101      	bne.n	8007d8a <__swbuf_r+0x7a>
 8007d86:	68ac      	ldr	r4, [r5, #8]
 8007d88:	e7cf      	b.n	8007d2a <__swbuf_r+0x1a>
 8007d8a:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <__swbuf_r+0xa0>)
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	bf08      	it	eq
 8007d90:	68ec      	ldreq	r4, [r5, #12]
 8007d92:	e7ca      	b.n	8007d2a <__swbuf_r+0x1a>
 8007d94:	4621      	mov	r1, r4
 8007d96:	4628      	mov	r0, r5
 8007d98:	f000 f81e 	bl	8007dd8 <__swsetup_r>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d0cb      	beq.n	8007d38 <__swbuf_r+0x28>
 8007da0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007da4:	e7ea      	b.n	8007d7c <__swbuf_r+0x6c>
 8007da6:	bf00      	nop
 8007da8:	0800842c 	.word	0x0800842c
 8007dac:	0800844c 	.word	0x0800844c
 8007db0:	0800840c 	.word	0x0800840c

08007db4 <_write_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4d07      	ldr	r5, [pc, #28]	; (8007dd4 <_write_r+0x20>)
 8007db8:	4604      	mov	r4, r0
 8007dba:	4608      	mov	r0, r1
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	602a      	str	r2, [r5, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f7fa fff7 	bl	8002db6 <_write>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_write_r+0x1e>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_write_r+0x1e>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	20000300 	.word	0x20000300

08007dd8 <__swsetup_r>:
 8007dd8:	4b32      	ldr	r3, [pc, #200]	; (8007ea4 <__swsetup_r+0xcc>)
 8007dda:	b570      	push	{r4, r5, r6, lr}
 8007ddc:	681d      	ldr	r5, [r3, #0]
 8007dde:	4606      	mov	r6, r0
 8007de0:	460c      	mov	r4, r1
 8007de2:	b125      	cbz	r5, 8007dee <__swsetup_r+0x16>
 8007de4:	69ab      	ldr	r3, [r5, #24]
 8007de6:	b913      	cbnz	r3, 8007dee <__swsetup_r+0x16>
 8007de8:	4628      	mov	r0, r5
 8007dea:	f7ff f9a7 	bl	800713c <__sinit>
 8007dee:	4b2e      	ldr	r3, [pc, #184]	; (8007ea8 <__swsetup_r+0xd0>)
 8007df0:	429c      	cmp	r4, r3
 8007df2:	d10f      	bne.n	8007e14 <__swsetup_r+0x3c>
 8007df4:	686c      	ldr	r4, [r5, #4]
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dfc:	0719      	lsls	r1, r3, #28
 8007dfe:	d42c      	bmi.n	8007e5a <__swsetup_r+0x82>
 8007e00:	06dd      	lsls	r5, r3, #27
 8007e02:	d411      	bmi.n	8007e28 <__swsetup_r+0x50>
 8007e04:	2309      	movs	r3, #9
 8007e06:	6033      	str	r3, [r6, #0]
 8007e08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e0c:	81a3      	strh	r3, [r4, #12]
 8007e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e12:	e03e      	b.n	8007e92 <__swsetup_r+0xba>
 8007e14:	4b25      	ldr	r3, [pc, #148]	; (8007eac <__swsetup_r+0xd4>)
 8007e16:	429c      	cmp	r4, r3
 8007e18:	d101      	bne.n	8007e1e <__swsetup_r+0x46>
 8007e1a:	68ac      	ldr	r4, [r5, #8]
 8007e1c:	e7eb      	b.n	8007df6 <__swsetup_r+0x1e>
 8007e1e:	4b24      	ldr	r3, [pc, #144]	; (8007eb0 <__swsetup_r+0xd8>)
 8007e20:	429c      	cmp	r4, r3
 8007e22:	bf08      	it	eq
 8007e24:	68ec      	ldreq	r4, [r5, #12]
 8007e26:	e7e6      	b.n	8007df6 <__swsetup_r+0x1e>
 8007e28:	0758      	lsls	r0, r3, #29
 8007e2a:	d512      	bpl.n	8007e52 <__swsetup_r+0x7a>
 8007e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e2e:	b141      	cbz	r1, 8007e42 <__swsetup_r+0x6a>
 8007e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e34:	4299      	cmp	r1, r3
 8007e36:	d002      	beq.n	8007e3e <__swsetup_r+0x66>
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f7fd fd39 	bl	80058b0 <_free_r>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	6363      	str	r3, [r4, #52]	; 0x34
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e48:	81a3      	strh	r3, [r4, #12]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	6063      	str	r3, [r4, #4]
 8007e4e:	6923      	ldr	r3, [r4, #16]
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	f043 0308 	orr.w	r3, r3, #8
 8007e58:	81a3      	strh	r3, [r4, #12]
 8007e5a:	6923      	ldr	r3, [r4, #16]
 8007e5c:	b94b      	cbnz	r3, 8007e72 <__swsetup_r+0x9a>
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e68:	d003      	beq.n	8007e72 <__swsetup_r+0x9a>
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	f000 f95b 	bl	8008128 <__smakebuf_r>
 8007e72:	89a0      	ldrh	r0, [r4, #12]
 8007e74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e78:	f010 0301 	ands.w	r3, r0, #1
 8007e7c:	d00a      	beq.n	8007e94 <__swsetup_r+0xbc>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60a3      	str	r3, [r4, #8]
 8007e82:	6963      	ldr	r3, [r4, #20]
 8007e84:	425b      	negs	r3, r3
 8007e86:	61a3      	str	r3, [r4, #24]
 8007e88:	6923      	ldr	r3, [r4, #16]
 8007e8a:	b943      	cbnz	r3, 8007e9e <__swsetup_r+0xc6>
 8007e8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e90:	d1ba      	bne.n	8007e08 <__swsetup_r+0x30>
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
 8007e94:	0781      	lsls	r1, r0, #30
 8007e96:	bf58      	it	pl
 8007e98:	6963      	ldrpl	r3, [r4, #20]
 8007e9a:	60a3      	str	r3, [r4, #8]
 8007e9c:	e7f4      	b.n	8007e88 <__swsetup_r+0xb0>
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	e7f7      	b.n	8007e92 <__swsetup_r+0xba>
 8007ea2:	bf00      	nop
 8007ea4:	2000000c 	.word	0x2000000c
 8007ea8:	0800842c 	.word	0x0800842c
 8007eac:	0800844c 	.word	0x0800844c
 8007eb0:	0800840c 	.word	0x0800840c

08007eb4 <__assert_func>:
 8007eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eb6:	4614      	mov	r4, r2
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <__assert_func+0x2c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	68d8      	ldr	r0, [r3, #12]
 8007ec2:	b14c      	cbz	r4, 8007ed8 <__assert_func+0x24>
 8007ec4:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <__assert_func+0x30>)
 8007ec6:	9100      	str	r1, [sp, #0]
 8007ec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ecc:	4906      	ldr	r1, [pc, #24]	; (8007ee8 <__assert_func+0x34>)
 8007ece:	462b      	mov	r3, r5
 8007ed0:	f000 f8e0 	bl	8008094 <fiprintf>
 8007ed4:	f000 f999 	bl	800820a <abort>
 8007ed8:	4b04      	ldr	r3, [pc, #16]	; (8007eec <__assert_func+0x38>)
 8007eda:	461c      	mov	r4, r3
 8007edc:	e7f3      	b.n	8007ec6 <__assert_func+0x12>
 8007ede:	bf00      	nop
 8007ee0:	2000000c 	.word	0x2000000c
 8007ee4:	080085d5 	.word	0x080085d5
 8007ee8:	080085e2 	.word	0x080085e2
 8007eec:	08008610 	.word	0x08008610

08007ef0 <_close_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d06      	ldr	r5, [pc, #24]	; (8007f0c <_close_r+0x1c>)
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	4608      	mov	r0, r1
 8007efa:	602b      	str	r3, [r5, #0]
 8007efc:	f7fa ff77 	bl	8002dee <_close>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d102      	bne.n	8007f0a <_close_r+0x1a>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	b103      	cbz	r3, 8007f0a <_close_r+0x1a>
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}
 8007f0c:	20000300 	.word	0x20000300

08007f10 <__sflush_r>:
 8007f10:	898a      	ldrh	r2, [r1, #12]
 8007f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f16:	4605      	mov	r5, r0
 8007f18:	0710      	lsls	r0, r2, #28
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	d458      	bmi.n	8007fd0 <__sflush_r+0xc0>
 8007f1e:	684b      	ldr	r3, [r1, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	dc05      	bgt.n	8007f30 <__sflush_r+0x20>
 8007f24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	dc02      	bgt.n	8007f30 <__sflush_r+0x20>
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f32:	2e00      	cmp	r6, #0
 8007f34:	d0f9      	beq.n	8007f2a <__sflush_r+0x1a>
 8007f36:	2300      	movs	r3, #0
 8007f38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f3c:	682f      	ldr	r7, [r5, #0]
 8007f3e:	602b      	str	r3, [r5, #0]
 8007f40:	d032      	beq.n	8007fa8 <__sflush_r+0x98>
 8007f42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	075a      	lsls	r2, r3, #29
 8007f48:	d505      	bpl.n	8007f56 <__sflush_r+0x46>
 8007f4a:	6863      	ldr	r3, [r4, #4]
 8007f4c:	1ac0      	subs	r0, r0, r3
 8007f4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f50:	b10b      	cbz	r3, 8007f56 <__sflush_r+0x46>
 8007f52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f54:	1ac0      	subs	r0, r0, r3
 8007f56:	2300      	movs	r3, #0
 8007f58:	4602      	mov	r2, r0
 8007f5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f5c:	6a21      	ldr	r1, [r4, #32]
 8007f5e:	4628      	mov	r0, r5
 8007f60:	47b0      	blx	r6
 8007f62:	1c43      	adds	r3, r0, #1
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	d106      	bne.n	8007f76 <__sflush_r+0x66>
 8007f68:	6829      	ldr	r1, [r5, #0]
 8007f6a:	291d      	cmp	r1, #29
 8007f6c:	d82c      	bhi.n	8007fc8 <__sflush_r+0xb8>
 8007f6e:	4a2a      	ldr	r2, [pc, #168]	; (8008018 <__sflush_r+0x108>)
 8007f70:	40ca      	lsrs	r2, r1
 8007f72:	07d6      	lsls	r6, r2, #31
 8007f74:	d528      	bpl.n	8007fc8 <__sflush_r+0xb8>
 8007f76:	2200      	movs	r2, #0
 8007f78:	6062      	str	r2, [r4, #4]
 8007f7a:	04d9      	lsls	r1, r3, #19
 8007f7c:	6922      	ldr	r2, [r4, #16]
 8007f7e:	6022      	str	r2, [r4, #0]
 8007f80:	d504      	bpl.n	8007f8c <__sflush_r+0x7c>
 8007f82:	1c42      	adds	r2, r0, #1
 8007f84:	d101      	bne.n	8007f8a <__sflush_r+0x7a>
 8007f86:	682b      	ldr	r3, [r5, #0]
 8007f88:	b903      	cbnz	r3, 8007f8c <__sflush_r+0x7c>
 8007f8a:	6560      	str	r0, [r4, #84]	; 0x54
 8007f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f8e:	602f      	str	r7, [r5, #0]
 8007f90:	2900      	cmp	r1, #0
 8007f92:	d0ca      	beq.n	8007f2a <__sflush_r+0x1a>
 8007f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f98:	4299      	cmp	r1, r3
 8007f9a:	d002      	beq.n	8007fa2 <__sflush_r+0x92>
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f7fd fc87 	bl	80058b0 <_free_r>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	6360      	str	r0, [r4, #52]	; 0x34
 8007fa6:	e7c1      	b.n	8007f2c <__sflush_r+0x1c>
 8007fa8:	6a21      	ldr	r1, [r4, #32]
 8007faa:	2301      	movs	r3, #1
 8007fac:	4628      	mov	r0, r5
 8007fae:	47b0      	blx	r6
 8007fb0:	1c41      	adds	r1, r0, #1
 8007fb2:	d1c7      	bne.n	8007f44 <__sflush_r+0x34>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0c4      	beq.n	8007f44 <__sflush_r+0x34>
 8007fba:	2b1d      	cmp	r3, #29
 8007fbc:	d001      	beq.n	8007fc2 <__sflush_r+0xb2>
 8007fbe:	2b16      	cmp	r3, #22
 8007fc0:	d101      	bne.n	8007fc6 <__sflush_r+0xb6>
 8007fc2:	602f      	str	r7, [r5, #0]
 8007fc4:	e7b1      	b.n	8007f2a <__sflush_r+0x1a>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fcc:	81a3      	strh	r3, [r4, #12]
 8007fce:	e7ad      	b.n	8007f2c <__sflush_r+0x1c>
 8007fd0:	690f      	ldr	r7, [r1, #16]
 8007fd2:	2f00      	cmp	r7, #0
 8007fd4:	d0a9      	beq.n	8007f2a <__sflush_r+0x1a>
 8007fd6:	0793      	lsls	r3, r2, #30
 8007fd8:	680e      	ldr	r6, [r1, #0]
 8007fda:	bf08      	it	eq
 8007fdc:	694b      	ldreq	r3, [r1, #20]
 8007fde:	600f      	str	r7, [r1, #0]
 8007fe0:	bf18      	it	ne
 8007fe2:	2300      	movne	r3, #0
 8007fe4:	eba6 0807 	sub.w	r8, r6, r7
 8007fe8:	608b      	str	r3, [r1, #8]
 8007fea:	f1b8 0f00 	cmp.w	r8, #0
 8007fee:	dd9c      	ble.n	8007f2a <__sflush_r+0x1a>
 8007ff0:	6a21      	ldr	r1, [r4, #32]
 8007ff2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ff4:	4643      	mov	r3, r8
 8007ff6:	463a      	mov	r2, r7
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	47b0      	blx	r6
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	dc06      	bgt.n	800800e <__sflush_r+0xfe>
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800800c:	e78e      	b.n	8007f2c <__sflush_r+0x1c>
 800800e:	4407      	add	r7, r0
 8008010:	eba8 0800 	sub.w	r8, r8, r0
 8008014:	e7e9      	b.n	8007fea <__sflush_r+0xda>
 8008016:	bf00      	nop
 8008018:	20400001 	.word	0x20400001

0800801c <_fflush_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	690b      	ldr	r3, [r1, #16]
 8008020:	4605      	mov	r5, r0
 8008022:	460c      	mov	r4, r1
 8008024:	b913      	cbnz	r3, 800802c <_fflush_r+0x10>
 8008026:	2500      	movs	r5, #0
 8008028:	4628      	mov	r0, r5
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	b118      	cbz	r0, 8008036 <_fflush_r+0x1a>
 800802e:	6983      	ldr	r3, [r0, #24]
 8008030:	b90b      	cbnz	r3, 8008036 <_fflush_r+0x1a>
 8008032:	f7ff f883 	bl	800713c <__sinit>
 8008036:	4b14      	ldr	r3, [pc, #80]	; (8008088 <_fflush_r+0x6c>)
 8008038:	429c      	cmp	r4, r3
 800803a:	d11b      	bne.n	8008074 <_fflush_r+0x58>
 800803c:	686c      	ldr	r4, [r5, #4]
 800803e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0ef      	beq.n	8008026 <_fflush_r+0xa>
 8008046:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008048:	07d0      	lsls	r0, r2, #31
 800804a:	d404      	bmi.n	8008056 <_fflush_r+0x3a>
 800804c:	0599      	lsls	r1, r3, #22
 800804e:	d402      	bmi.n	8008056 <_fflush_r+0x3a>
 8008050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008052:	f7ff f916 	bl	8007282 <__retarget_lock_acquire_recursive>
 8008056:	4628      	mov	r0, r5
 8008058:	4621      	mov	r1, r4
 800805a:	f7ff ff59 	bl	8007f10 <__sflush_r>
 800805e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008060:	07da      	lsls	r2, r3, #31
 8008062:	4605      	mov	r5, r0
 8008064:	d4e0      	bmi.n	8008028 <_fflush_r+0xc>
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	059b      	lsls	r3, r3, #22
 800806a:	d4dd      	bmi.n	8008028 <_fflush_r+0xc>
 800806c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800806e:	f7ff f909 	bl	8007284 <__retarget_lock_release_recursive>
 8008072:	e7d9      	b.n	8008028 <_fflush_r+0xc>
 8008074:	4b05      	ldr	r3, [pc, #20]	; (800808c <_fflush_r+0x70>)
 8008076:	429c      	cmp	r4, r3
 8008078:	d101      	bne.n	800807e <_fflush_r+0x62>
 800807a:	68ac      	ldr	r4, [r5, #8]
 800807c:	e7df      	b.n	800803e <_fflush_r+0x22>
 800807e:	4b04      	ldr	r3, [pc, #16]	; (8008090 <_fflush_r+0x74>)
 8008080:	429c      	cmp	r4, r3
 8008082:	bf08      	it	eq
 8008084:	68ec      	ldreq	r4, [r5, #12]
 8008086:	e7da      	b.n	800803e <_fflush_r+0x22>
 8008088:	0800842c 	.word	0x0800842c
 800808c:	0800844c 	.word	0x0800844c
 8008090:	0800840c 	.word	0x0800840c

08008094 <fiprintf>:
 8008094:	b40e      	push	{r1, r2, r3}
 8008096:	b503      	push	{r0, r1, lr}
 8008098:	4601      	mov	r1, r0
 800809a:	ab03      	add	r3, sp, #12
 800809c:	4805      	ldr	r0, [pc, #20]	; (80080b4 <fiprintf+0x20>)
 800809e:	f853 2b04 	ldr.w	r2, [r3], #4
 80080a2:	6800      	ldr	r0, [r0, #0]
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	f7ff fcbf 	bl	8007a28 <_vfiprintf_r>
 80080aa:	b002      	add	sp, #8
 80080ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80080b0:	b003      	add	sp, #12
 80080b2:	4770      	bx	lr
 80080b4:	2000000c 	.word	0x2000000c

080080b8 <_lseek_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4d07      	ldr	r5, [pc, #28]	; (80080d8 <_lseek_r+0x20>)
 80080bc:	4604      	mov	r4, r0
 80080be:	4608      	mov	r0, r1
 80080c0:	4611      	mov	r1, r2
 80080c2:	2200      	movs	r2, #0
 80080c4:	602a      	str	r2, [r5, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	f7fa feb8 	bl	8002e3c <_lseek>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_lseek_r+0x1e>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_lseek_r+0x1e>
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	20000300 	.word	0x20000300

080080dc <__swhatbuf_r>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	460e      	mov	r6, r1
 80080e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e4:	2900      	cmp	r1, #0
 80080e6:	b096      	sub	sp, #88	; 0x58
 80080e8:	4614      	mov	r4, r2
 80080ea:	461d      	mov	r5, r3
 80080ec:	da08      	bge.n	8008100 <__swhatbuf_r+0x24>
 80080ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	602a      	str	r2, [r5, #0]
 80080f6:	061a      	lsls	r2, r3, #24
 80080f8:	d410      	bmi.n	800811c <__swhatbuf_r+0x40>
 80080fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080fe:	e00e      	b.n	800811e <__swhatbuf_r+0x42>
 8008100:	466a      	mov	r2, sp
 8008102:	f000 f889 	bl	8008218 <_fstat_r>
 8008106:	2800      	cmp	r0, #0
 8008108:	dbf1      	blt.n	80080ee <__swhatbuf_r+0x12>
 800810a:	9a01      	ldr	r2, [sp, #4]
 800810c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008110:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008114:	425a      	negs	r2, r3
 8008116:	415a      	adcs	r2, r3
 8008118:	602a      	str	r2, [r5, #0]
 800811a:	e7ee      	b.n	80080fa <__swhatbuf_r+0x1e>
 800811c:	2340      	movs	r3, #64	; 0x40
 800811e:	2000      	movs	r0, #0
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	b016      	add	sp, #88	; 0x58
 8008124:	bd70      	pop	{r4, r5, r6, pc}
	...

08008128 <__smakebuf_r>:
 8008128:	898b      	ldrh	r3, [r1, #12]
 800812a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800812c:	079d      	lsls	r5, r3, #30
 800812e:	4606      	mov	r6, r0
 8008130:	460c      	mov	r4, r1
 8008132:	d507      	bpl.n	8008144 <__smakebuf_r+0x1c>
 8008134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	6123      	str	r3, [r4, #16]
 800813c:	2301      	movs	r3, #1
 800813e:	6163      	str	r3, [r4, #20]
 8008140:	b002      	add	sp, #8
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	ab01      	add	r3, sp, #4
 8008146:	466a      	mov	r2, sp
 8008148:	f7ff ffc8 	bl	80080dc <__swhatbuf_r>
 800814c:	9900      	ldr	r1, [sp, #0]
 800814e:	4605      	mov	r5, r0
 8008150:	4630      	mov	r0, r6
 8008152:	f7fd fc19 	bl	8005988 <_malloc_r>
 8008156:	b948      	cbnz	r0, 800816c <__smakebuf_r+0x44>
 8008158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815c:	059a      	lsls	r2, r3, #22
 800815e:	d4ef      	bmi.n	8008140 <__smakebuf_r+0x18>
 8008160:	f023 0303 	bic.w	r3, r3, #3
 8008164:	f043 0302 	orr.w	r3, r3, #2
 8008168:	81a3      	strh	r3, [r4, #12]
 800816a:	e7e3      	b.n	8008134 <__smakebuf_r+0xc>
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <__smakebuf_r+0x7c>)
 800816e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	6020      	str	r0, [r4, #0]
 8008174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008178:	81a3      	strh	r3, [r4, #12]
 800817a:	9b00      	ldr	r3, [sp, #0]
 800817c:	6163      	str	r3, [r4, #20]
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	6120      	str	r0, [r4, #16]
 8008182:	b15b      	cbz	r3, 800819c <__smakebuf_r+0x74>
 8008184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008188:	4630      	mov	r0, r6
 800818a:	f000 f857 	bl	800823c <_isatty_r>
 800818e:	b128      	cbz	r0, 800819c <__smakebuf_r+0x74>
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	f023 0303 	bic.w	r3, r3, #3
 8008196:	f043 0301 	orr.w	r3, r3, #1
 800819a:	81a3      	strh	r3, [r4, #12]
 800819c:	89a0      	ldrh	r0, [r4, #12]
 800819e:	4305      	orrs	r5, r0
 80081a0:	81a5      	strh	r5, [r4, #12]
 80081a2:	e7cd      	b.n	8008140 <__smakebuf_r+0x18>
 80081a4:	080070d5 	.word	0x080070d5

080081a8 <__ascii_mbtowc>:
 80081a8:	b082      	sub	sp, #8
 80081aa:	b901      	cbnz	r1, 80081ae <__ascii_mbtowc+0x6>
 80081ac:	a901      	add	r1, sp, #4
 80081ae:	b142      	cbz	r2, 80081c2 <__ascii_mbtowc+0x1a>
 80081b0:	b14b      	cbz	r3, 80081c6 <__ascii_mbtowc+0x1e>
 80081b2:	7813      	ldrb	r3, [r2, #0]
 80081b4:	600b      	str	r3, [r1, #0]
 80081b6:	7812      	ldrb	r2, [r2, #0]
 80081b8:	1e10      	subs	r0, r2, #0
 80081ba:	bf18      	it	ne
 80081bc:	2001      	movne	r0, #1
 80081be:	b002      	add	sp, #8
 80081c0:	4770      	bx	lr
 80081c2:	4610      	mov	r0, r2
 80081c4:	e7fb      	b.n	80081be <__ascii_mbtowc+0x16>
 80081c6:	f06f 0001 	mvn.w	r0, #1
 80081ca:	e7f8      	b.n	80081be <__ascii_mbtowc+0x16>

080081cc <_read_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d07      	ldr	r5, [pc, #28]	; (80081ec <_read_r+0x20>)
 80081d0:	4604      	mov	r4, r0
 80081d2:	4608      	mov	r0, r1
 80081d4:	4611      	mov	r1, r2
 80081d6:	2200      	movs	r2, #0
 80081d8:	602a      	str	r2, [r5, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	f7fa fdce 	bl	8002d7c <_read>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_read_r+0x1e>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_read_r+0x1e>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	20000300 	.word	0x20000300

080081f0 <__ascii_wctomb>:
 80081f0:	b149      	cbz	r1, 8008206 <__ascii_wctomb+0x16>
 80081f2:	2aff      	cmp	r2, #255	; 0xff
 80081f4:	bf85      	ittet	hi
 80081f6:	238a      	movhi	r3, #138	; 0x8a
 80081f8:	6003      	strhi	r3, [r0, #0]
 80081fa:	700a      	strbls	r2, [r1, #0]
 80081fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008200:	bf98      	it	ls
 8008202:	2001      	movls	r0, #1
 8008204:	4770      	bx	lr
 8008206:	4608      	mov	r0, r1
 8008208:	4770      	bx	lr

0800820a <abort>:
 800820a:	b508      	push	{r3, lr}
 800820c:	2006      	movs	r0, #6
 800820e:	f000 f84d 	bl	80082ac <raise>
 8008212:	2001      	movs	r0, #1
 8008214:	f7fa fda8 	bl	8002d68 <_exit>

08008218 <_fstat_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d07      	ldr	r5, [pc, #28]	; (8008238 <_fstat_r+0x20>)
 800821c:	2300      	movs	r3, #0
 800821e:	4604      	mov	r4, r0
 8008220:	4608      	mov	r0, r1
 8008222:	4611      	mov	r1, r2
 8008224:	602b      	str	r3, [r5, #0]
 8008226:	f7fa fdee 	bl	8002e06 <_fstat>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	d102      	bne.n	8008234 <_fstat_r+0x1c>
 800822e:	682b      	ldr	r3, [r5, #0]
 8008230:	b103      	cbz	r3, 8008234 <_fstat_r+0x1c>
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	bd38      	pop	{r3, r4, r5, pc}
 8008236:	bf00      	nop
 8008238:	20000300 	.word	0x20000300

0800823c <_isatty_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d06      	ldr	r5, [pc, #24]	; (8008258 <_isatty_r+0x1c>)
 8008240:	2300      	movs	r3, #0
 8008242:	4604      	mov	r4, r0
 8008244:	4608      	mov	r0, r1
 8008246:	602b      	str	r3, [r5, #0]
 8008248:	f7fa fded 	bl	8002e26 <_isatty>
 800824c:	1c43      	adds	r3, r0, #1
 800824e:	d102      	bne.n	8008256 <_isatty_r+0x1a>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	b103      	cbz	r3, 8008256 <_isatty_r+0x1a>
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	20000300 	.word	0x20000300

0800825c <_raise_r>:
 800825c:	291f      	cmp	r1, #31
 800825e:	b538      	push	{r3, r4, r5, lr}
 8008260:	4604      	mov	r4, r0
 8008262:	460d      	mov	r5, r1
 8008264:	d904      	bls.n	8008270 <_raise_r+0x14>
 8008266:	2316      	movs	r3, #22
 8008268:	6003      	str	r3, [r0, #0]
 800826a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008272:	b112      	cbz	r2, 800827a <_raise_r+0x1e>
 8008274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008278:	b94b      	cbnz	r3, 800828e <_raise_r+0x32>
 800827a:	4620      	mov	r0, r4
 800827c:	f000 f830 	bl	80082e0 <_getpid_r>
 8008280:	462a      	mov	r2, r5
 8008282:	4601      	mov	r1, r0
 8008284:	4620      	mov	r0, r4
 8008286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800828a:	f000 b817 	b.w	80082bc <_kill_r>
 800828e:	2b01      	cmp	r3, #1
 8008290:	d00a      	beq.n	80082a8 <_raise_r+0x4c>
 8008292:	1c59      	adds	r1, r3, #1
 8008294:	d103      	bne.n	800829e <_raise_r+0x42>
 8008296:	2316      	movs	r3, #22
 8008298:	6003      	str	r3, [r0, #0]
 800829a:	2001      	movs	r0, #1
 800829c:	e7e7      	b.n	800826e <_raise_r+0x12>
 800829e:	2400      	movs	r4, #0
 80082a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082a4:	4628      	mov	r0, r5
 80082a6:	4798      	blx	r3
 80082a8:	2000      	movs	r0, #0
 80082aa:	e7e0      	b.n	800826e <_raise_r+0x12>

080082ac <raise>:
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <raise+0xc>)
 80082ae:	4601      	mov	r1, r0
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	f7ff bfd3 	b.w	800825c <_raise_r>
 80082b6:	bf00      	nop
 80082b8:	2000000c 	.word	0x2000000c

080082bc <_kill_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	; (80082dc <_kill_r+0x20>)
 80082c0:	2300      	movs	r3, #0
 80082c2:	4604      	mov	r4, r0
 80082c4:	4608      	mov	r0, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	f7fa fd3d 	bl	8002d48 <_kill>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	d102      	bne.n	80082d8 <_kill_r+0x1c>
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	b103      	cbz	r3, 80082d8 <_kill_r+0x1c>
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	bd38      	pop	{r3, r4, r5, pc}
 80082da:	bf00      	nop
 80082dc:	20000300 	.word	0x20000300

080082e0 <_getpid_r>:
 80082e0:	f7fa bd2a 	b.w	8002d38 <_getpid>

080082e4 <_init>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	bf00      	nop
 80082e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ea:	bc08      	pop	{r3}
 80082ec:	469e      	mov	lr, r3
 80082ee:	4770      	bx	lr

080082f0 <_fini>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr
