
GPS_Serial_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d5c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002f20  08002f20  00012f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f38  08002f38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f38  08002f38  00012f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f40  08002f40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002f54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002f54  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000941e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001770  00000000  00000000  0002945a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0002abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  0002b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202ee  00000000  00000000  0002b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009825  00000000  00000000  0004bc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c45d4  00000000  00000000  000554ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119a7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c3c  00000000  00000000  00119ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002f08 	.word	0x08002f08

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002f08 	.word	0x08002f08

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Transmit(&huart2, UART1_rxBuffer, BUFFER_LENGTH, 100)) {
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	220c      	movs	r2, #12
 8000514:	490a      	ldr	r1, [pc, #40]	; (8000540 <HAL_UART_RxCpltCallback+0x38>)
 8000516:	480b      	ldr	r0, [pc, #44]	; (8000544 <HAL_UART_RxCpltCallback+0x3c>)
 8000518:	f001 fc9f 	bl	8001e5a <HAL_UART_Transmit>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d005      	beq.n	800052e <HAL_UART_RxCpltCallback+0x26>
		Error_Handler();
 8000522:	f000 f95b 	bl	80007dc <Error_Handler>
		HAL_Delay(500);
 8000526:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800052a:	f000 faeb 	bl	8000b04 <HAL_Delay>
	}
    HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, BUFFER_LENGTH);
 800052e:	220c      	movs	r2, #12
 8000530:	4903      	ldr	r1, [pc, #12]	; (8000540 <HAL_UART_RxCpltCallback+0x38>)
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <HAL_UART_RxCpltCallback+0x40>)
 8000534:	f001 fd23 	bl	8001f7e <HAL_UART_Receive_IT>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000b0 	.word	0x200000b0
 8000544:	2000006c 	.word	0x2000006c
 8000548:	20000028 	.word	0x20000028

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 fa65 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f811 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f000 f8d1 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055e:	f000 f8a5 	bl	80006ac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000562:	f000 f879 	bl	8000658 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t UART1_rxBuffer[1] = {0};
 8000566:	2300      	movs	r3, #0
 8000568:	713b      	strb	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT (&huart1, UART1_rxBuffer, BUFFER_LENGTH);
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	220c      	movs	r2, #12
 800056e:	4619      	mov	r1, r3
 8000570:	4801      	ldr	r0, [pc, #4]	; (8000578 <main+0x2c>)
 8000572:	f001 fd04 	bl	8001f7e <HAL_UART_Receive_IT>
 8000576:	e7f8      	b.n	800056a <main+0x1e>
 8000578:	20000028 	.word	0x20000028

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fcb4 	bl	8002ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <SystemClock_Config+0xd4>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a29      	ldr	r2, [pc, #164]	; (8000650 <SystemClock_Config+0xd4>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <SystemClock_Config+0xd4>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xd8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a22      	ldr	r2, [pc, #136]	; (8000654 <SystemClock_Config+0xd8>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <SystemClock_Config+0xd8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005f0:	2310      	movs	r3, #16
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005fe:	2302      	movs	r3, #2
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000602:	2302      	movs	r3, #2
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4618      	mov	r0, r3
 800060c:	f001 f93a 	bl	8001884 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000616:	f000 f8e1 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2102      	movs	r1, #2
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fdda 	bl	80011f0 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000642:	f000 f8cb 	bl	80007dc <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_USART1_UART_Init+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000664:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000690:	f001 fb96 	bl	8001dc0 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800069a:	f000 f89f 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40011000 	.word	0x40011000

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d4:	220c      	movs	r2, #12
 80006d6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e6:	f001 fb6b 	bl	8001dc0 <HAL_UART_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80006f0:	f000 f874 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000006c 	.word	0x2000006c
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a2c      	ldr	r2, [pc, #176]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2120      	movs	r1, #32
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xd4>)
 800078c:	f000 fd16 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000796:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_GPIO_Init+0xd8>)
 80007a8:	f000 fb74 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ac:	2320      	movs	r3, #32
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0xd4>)
 80007c4:	f000 fb66 	bl	8000e94 <HAL_GPIO_Init>

}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020800 	.word	0x40020800

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <HAL_MspInit+0x4c>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x4c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000826:	2007      	movs	r0, #7
 8000828:	f000 fa60 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	; 0x30
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a36      	ldr	r2, [pc, #216]	; (8000930 <HAL_UART_MspInit+0xf8>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d135      	bne.n	80008c6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	4b35      	ldr	r3, [pc, #212]	; (8000934 <HAL_UART_MspInit+0xfc>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a34      	ldr	r2, [pc, #208]	; (8000934 <HAL_UART_MspInit+0xfc>)
 8000864:	f043 0310 	orr.w	r3, r3, #16
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b32      	ldr	r3, [pc, #200]	; (8000934 <HAL_UART_MspInit+0xfc>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f003 0310 	and.w	r3, r3, #16
 8000872:	61bb      	str	r3, [r7, #24]
 8000874:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <HAL_UART_MspInit+0xfc>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a2d      	ldr	r2, [pc, #180]	; (8000934 <HAL_UART_MspInit+0xfc>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <HAL_UART_MspInit+0xfc>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000892:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008a4:	2307      	movs	r3, #7
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4822      	ldr	r0, [pc, #136]	; (8000938 <HAL_UART_MspInit+0x100>)
 80008b0:	f000 faf0 	bl	8000e94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2025      	movs	r0, #37	; 0x25
 80008ba:	f000 fa22 	bl	8000d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008be:	2025      	movs	r0, #37	; 0x25
 80008c0:	f000 fa3b 	bl	8000d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c4:	e030      	b.n	8000928 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <HAL_UART_MspInit+0x104>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d12b      	bne.n	8000928 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_UART_MspInit+0xfc>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a16      	ldr	r2, [pc, #88]	; (8000934 <HAL_UART_MspInit+0xfc>)
 80008da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_UART_MspInit+0xfc>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_UART_MspInit+0xfc>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <HAL_UART_MspInit+0xfc>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <HAL_UART_MspInit+0xfc>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000908:	230c      	movs	r3, #12
 800090a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000918:	2307      	movs	r3, #7
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_UART_MspInit+0x100>)
 8000924:	f000 fab6 	bl	8000e94 <HAL_GPIO_Init>
}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40011000 	.word	0x40011000
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000
 800093c:	40004400 	.word	0x40004400

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 f89a 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <USART1_IRQHandler+0x10>)
 800099a:	f001 fb21 	bl	8001fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000028 	.word	0x20000028

080009a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d2:	490e      	ldr	r1, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e8:	4c0b      	ldr	r4, [pc, #44]	; (8000a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f6:	f7ff ffd7 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f002 fa59 	bl	8002eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fda5 	bl	800054c <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a10:	08002f48 	.word	0x08002f48
  ldr r2, =_sbss
 8000a14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a18:	200000c0 	.word	0x200000c0

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <HAL_Init+0x40>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <HAL_Init+0x40>)
 8000a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x40>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f94f 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff fec8 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023c00 	.word	0x40023c00

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f967 	bl	8000d56 <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa0:	f000 f92f 	bl	8000d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200000bc 	.word	0x200000bc

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200000bc 	.word	0x200000bc

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff ffee 	bl	8000aec <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffde 	bl	8000aec <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4907      	ldr	r1, [pc, #28]	; (8000be8 <__NVIC_EnableIRQ+0x38>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f7ff ff8e 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff29 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff3e 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff8e 	bl	8000c40 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5d 	bl	8000bec <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff31 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffa2 	bl	8000ca8 <SysTick_Config>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff feb6 	bl	8000aec <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d008      	beq.n	8000da0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e052      	b.n	8000e46 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 0216 	bic.w	r2, r2, #22
 8000dae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	695a      	ldr	r2, [r3, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dbe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d103      	bne.n	8000dd0 <HAL_DMA_Abort+0x62>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d007      	beq.n	8000de0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0208 	bic.w	r2, r2, #8
 8000dde:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0201 	bic.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000df0:	e013      	b.n	8000e1a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000df2:	f7ff fe7b 	bl	8000aec <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b05      	cmp	r3, #5
 8000dfe:	d90c      	bls.n	8000e1a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2220      	movs	r2, #32
 8000e04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e015      	b.n	8000e46 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1e4      	bne.n	8000df2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e2c:	223f      	movs	r2, #63	; 0x3f
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d004      	beq.n	8000e6c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2280      	movs	r2, #128	; 0x80
 8000e66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e00c      	b.n	8000e86 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2205      	movs	r2, #5
 8000e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e165      	b.n	800117c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 8154 	bne.w	8001176 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d005      	beq.n	8000ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d130      	bne.n	8000f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d017      	beq.n	8000f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80ae 	beq.w	8001176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a5c      	ldr	r2, [pc, #368]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <HAL_GPIO_Init+0x300>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001036:	4a58      	ldr	r2, [pc, #352]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4f      	ldr	r2, [pc, #316]	; (800119c <HAL_GPIO_Init+0x308>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d025      	beq.n	80010ae <HAL_GPIO_Init+0x21a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4e      	ldr	r2, [pc, #312]	; (80011a0 <HAL_GPIO_Init+0x30c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01f      	beq.n	80010aa <HAL_GPIO_Init+0x216>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4d      	ldr	r2, [pc, #308]	; (80011a4 <HAL_GPIO_Init+0x310>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x212>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_GPIO_Init+0x314>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x20e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4b      	ldr	r2, [pc, #300]	; (80011ac <HAL_GPIO_Init+0x318>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x20a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4a      	ldr	r2, [pc, #296]	; (80011b0 <HAL_GPIO_Init+0x31c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x206>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a49      	ldr	r2, [pc, #292]	; (80011b4 <HAL_GPIO_Init+0x320>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x202>
 8001092:	2306      	movs	r3, #6
 8001094:	e00c      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 8001096:	2307      	movs	r3, #7
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 800109a:	2305      	movs	r3, #5
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4935      	ldr	r1, [pc, #212]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f2:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800111c:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <HAL_GPIO_Init+0x324>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_GPIO_Init+0x324>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001170:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f ae96 	bls.w	8000eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40013800 	.word	0x40013800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e0cc      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001204:	4b68      	ldr	r3, [pc, #416]	; (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d90c      	bls.n	800122c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001212:	4b65      	ldr	r3, [pc, #404]	; (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800121a:	4b63      	ldr	r3, [pc, #396]	; (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d001      	beq.n	800122c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0b8      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d020      	beq.n	800127a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001244:	4b59      	ldr	r3, [pc, #356]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a58      	ldr	r2, [pc, #352]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800124e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800125c:	4b53      	ldr	r3, [pc, #332]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a52      	ldr	r2, [pc, #328]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001268:	4b50      	ldr	r3, [pc, #320]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	494d      	ldr	r1, [pc, #308]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	4313      	orrs	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d044      	beq.n	8001310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	4b47      	ldr	r3, [pc, #284]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d119      	bne.n	80012ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e07f      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d003      	beq.n	80012ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d107      	bne.n	80012be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ae:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e06f      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012be:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e067      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f023 0203 	bic.w	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4934      	ldr	r1, [pc, #208]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e0:	f7ff fc04 	bl	8000aec <HAL_GetTick>
 80012e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e8:	f7ff fc00 	bl	8000aec <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e04f      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fe:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 020c 	and.w	r2, r3, #12
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	429a      	cmp	r2, r3
 800130e:	d1eb      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 030f 	and.w	r3, r3, #15
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d20c      	bcs.n	8001338 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e032      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4916      	ldr	r1, [pc, #88]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	4313      	orrs	r3, r2
 8001354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	490e      	ldr	r1, [pc, #56]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	4313      	orrs	r3, r2
 8001374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001376:	f000 f855 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 800137a:	4602      	mov	r2, r0
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	490a      	ldr	r1, [pc, #40]	; (80013b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	5ccb      	ldrb	r3, [r1, r3]
 800138a:	fa22 f303 	lsr.w	r3, r2, r3
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fb64 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023c00 	.word	0x40023c00
 80013ac:	40023800 	.word	0x40023800
 80013b0:	08002f20 	.word	0x08002f20
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000004 	.word	0x20000004

080013bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000000 	.word	0x20000000

080013d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013d8:	f7ff fff0 	bl	80013bc <HAL_RCC_GetHCLKFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	0a9b      	lsrs	r3, r3, #10
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	4903      	ldr	r1, [pc, #12]	; (80013f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	08002f30 	.word	0x08002f30

080013fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001400:	f7ff ffdc 	bl	80013bc <HAL_RCC_GetHCLKFreq>
 8001404:	4602      	mov	r2, r0
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	0b5b      	lsrs	r3, r3, #13
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	4903      	ldr	r1, [pc, #12]	; (8001420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001412:	5ccb      	ldrb	r3, [r1, r3]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	08002f30 	.word	0x08002f30

08001424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001428:	b0ae      	sub	sp, #184	; 0xb8
 800142a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800144a:	4bcb      	ldr	r3, [pc, #812]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b0c      	cmp	r3, #12
 8001454:	f200 8206 	bhi.w	8001864 <HAL_RCC_GetSysClockFreq+0x440>
 8001458:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <HAL_RCC_GetSysClockFreq+0x3c>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	08001495 	.word	0x08001495
 8001464:	08001865 	.word	0x08001865
 8001468:	08001865 	.word	0x08001865
 800146c:	08001865 	.word	0x08001865
 8001470:	0800149d 	.word	0x0800149d
 8001474:	08001865 	.word	0x08001865
 8001478:	08001865 	.word	0x08001865
 800147c:	08001865 	.word	0x08001865
 8001480:	080014a5 	.word	0x080014a5
 8001484:	08001865 	.word	0x08001865
 8001488:	08001865 	.word	0x08001865
 800148c:	08001865 	.word	0x08001865
 8001490:	08001695 	.word	0x08001695
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001494:	4bb9      	ldr	r3, [pc, #740]	; (800177c <HAL_RCC_GetSysClockFreq+0x358>)
 8001496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800149a:	e1e7      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800149c:	4bb8      	ldr	r3, [pc, #736]	; (8001780 <HAL_RCC_GetSysClockFreq+0x35c>)
 800149e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014a2:	e1e3      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a4:	4bb4      	ldr	r3, [pc, #720]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b0:	4bb1      	ldr	r3, [pc, #708]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d071      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014bc:	4bae      	ldr	r3, [pc, #696]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	2200      	movs	r2, #0
 80014c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014e2:	4622      	mov	r2, r4
 80014e4:	462b      	mov	r3, r5
 80014e6:	f04f 0000 	mov.w	r0, #0
 80014ea:	f04f 0100 	mov.w	r1, #0
 80014ee:	0159      	lsls	r1, r3, #5
 80014f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f4:	0150      	lsls	r0, r2, #5
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4621      	mov	r1, r4
 80014fc:	1a51      	subs	r1, r2, r1
 80014fe:	6439      	str	r1, [r7, #64]	; 0x40
 8001500:	4629      	mov	r1, r5
 8001502:	eb63 0301 	sbc.w	r3, r3, r1
 8001506:	647b      	str	r3, [r7, #68]	; 0x44
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001514:	4649      	mov	r1, r9
 8001516:	018b      	lsls	r3, r1, #6
 8001518:	4641      	mov	r1, r8
 800151a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800151e:	4641      	mov	r1, r8
 8001520:	018a      	lsls	r2, r1, #6
 8001522:	4641      	mov	r1, r8
 8001524:	1a51      	subs	r1, r2, r1
 8001526:	63b9      	str	r1, [r7, #56]	; 0x38
 8001528:	4649      	mov	r1, r9
 800152a:	eb63 0301 	sbc.w	r3, r3, r1
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800153c:	4649      	mov	r1, r9
 800153e:	00cb      	lsls	r3, r1, #3
 8001540:	4641      	mov	r1, r8
 8001542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001546:	4641      	mov	r1, r8
 8001548:	00ca      	lsls	r2, r1, #3
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	4603      	mov	r3, r0
 8001550:	4622      	mov	r2, r4
 8001552:	189b      	adds	r3, r3, r2
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
 8001556:	462b      	mov	r3, r5
 8001558:	460a      	mov	r2, r1
 800155a:	eb42 0303 	adc.w	r3, r2, r3
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800156c:	4629      	mov	r1, r5
 800156e:	024b      	lsls	r3, r1, #9
 8001570:	4621      	mov	r1, r4
 8001572:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001576:	4621      	mov	r1, r4
 8001578:	024a      	lsls	r2, r1, #9
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001582:	2200      	movs	r2, #0
 8001584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001588:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800158c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001590:	f7fe fe38 	bl	8000204 <__aeabi_uldivmod>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4613      	mov	r3, r2
 800159a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800159e:	e067      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	4b75      	ldr	r3, [pc, #468]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	2200      	movs	r2, #0
 80015a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80015ba:	2300      	movs	r3, #0
 80015bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015c2:	4622      	mov	r2, r4
 80015c4:	462b      	mov	r3, r5
 80015c6:	f04f 0000 	mov.w	r0, #0
 80015ca:	f04f 0100 	mov.w	r1, #0
 80015ce:	0159      	lsls	r1, r3, #5
 80015d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d4:	0150      	lsls	r0, r2, #5
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4621      	mov	r1, r4
 80015dc:	1a51      	subs	r1, r2, r1
 80015de:	62b9      	str	r1, [r7, #40]	; 0x28
 80015e0:	4629      	mov	r1, r5
 80015e2:	eb63 0301 	sbc.w	r3, r3, r1
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80015f4:	4649      	mov	r1, r9
 80015f6:	018b      	lsls	r3, r1, #6
 80015f8:	4641      	mov	r1, r8
 80015fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015fe:	4641      	mov	r1, r8
 8001600:	018a      	lsls	r2, r1, #6
 8001602:	4641      	mov	r1, r8
 8001604:	ebb2 0a01 	subs.w	sl, r2, r1
 8001608:	4649      	mov	r1, r9
 800160a:	eb63 0b01 	sbc.w	fp, r3, r1
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800161a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800161e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001622:	4692      	mov	sl, r2
 8001624:	469b      	mov	fp, r3
 8001626:	4623      	mov	r3, r4
 8001628:	eb1a 0303 	adds.w	r3, sl, r3
 800162c:	623b      	str	r3, [r7, #32]
 800162e:	462b      	mov	r3, r5
 8001630:	eb4b 0303 	adc.w	r3, fp, r3
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001642:	4629      	mov	r1, r5
 8001644:	028b      	lsls	r3, r1, #10
 8001646:	4621      	mov	r1, r4
 8001648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800164c:	4621      	mov	r1, r4
 800164e:	028a      	lsls	r2, r1, #10
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001658:	2200      	movs	r2, #0
 800165a:	673b      	str	r3, [r7, #112]	; 0x70
 800165c:	677a      	str	r2, [r7, #116]	; 0x74
 800165e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001662:	f7fe fdcf 	bl	8000204 <__aeabi_uldivmod>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4613      	mov	r3, r2
 800166c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	0c1b      	lsrs	r3, r3, #16
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	3301      	adds	r3, #1
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001686:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001692:	e0eb      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800169c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016a0:	4b35      	ldr	r3, [pc, #212]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d06b      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ac:	4b32      	ldr	r3, [pc, #200]	; (8001778 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	2200      	movs	r2, #0
 80016b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80016b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016be:	663b      	str	r3, [r7, #96]	; 0x60
 80016c0:	2300      	movs	r3, #0
 80016c2:	667b      	str	r3, [r7, #100]	; 0x64
 80016c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016c8:	4622      	mov	r2, r4
 80016ca:	462b      	mov	r3, r5
 80016cc:	f04f 0000 	mov.w	r0, #0
 80016d0:	f04f 0100 	mov.w	r1, #0
 80016d4:	0159      	lsls	r1, r3, #5
 80016d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016da:	0150      	lsls	r0, r2, #5
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4621      	mov	r1, r4
 80016e2:	1a51      	subs	r1, r2, r1
 80016e4:	61b9      	str	r1, [r7, #24]
 80016e6:	4629      	mov	r1, r5
 80016e8:	eb63 0301 	sbc.w	r3, r3, r1
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016fa:	4659      	mov	r1, fp
 80016fc:	018b      	lsls	r3, r1, #6
 80016fe:	4651      	mov	r1, sl
 8001700:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001704:	4651      	mov	r1, sl
 8001706:	018a      	lsls	r2, r1, #6
 8001708:	4651      	mov	r1, sl
 800170a:	ebb2 0801 	subs.w	r8, r2, r1
 800170e:	4659      	mov	r1, fp
 8001710:	eb63 0901 	sbc.w	r9, r3, r1
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001720:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001724:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001728:	4690      	mov	r8, r2
 800172a:	4699      	mov	r9, r3
 800172c:	4623      	mov	r3, r4
 800172e:	eb18 0303 	adds.w	r3, r8, r3
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	462b      	mov	r3, r5
 8001736:	eb49 0303 	adc.w	r3, r9, r3
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001748:	4629      	mov	r1, r5
 800174a:	024b      	lsls	r3, r1, #9
 800174c:	4621      	mov	r1, r4
 800174e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001752:	4621      	mov	r1, r4
 8001754:	024a      	lsls	r2, r1, #9
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800175e:	2200      	movs	r2, #0
 8001760:	65bb      	str	r3, [r7, #88]	; 0x58
 8001762:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001764:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001768:	f7fe fd4c 	bl	8000204 <__aeabi_uldivmod>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4613      	mov	r3, r2
 8001772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001776:	e065      	b.n	8001844 <HAL_RCC_GetSysClockFreq+0x420>
 8001778:	40023800 	.word	0x40023800
 800177c:	00f42400 	.word	0x00f42400
 8001780:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001784:	4b3d      	ldr	r3, [pc, #244]	; (800187c <HAL_RCC_GetSysClockFreq+0x458>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	2200      	movs	r2, #0
 800178c:	4618      	mov	r0, r3
 800178e:	4611      	mov	r1, r2
 8001790:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001794:	653b      	str	r3, [r7, #80]	; 0x50
 8001796:	2300      	movs	r3, #0
 8001798:	657b      	str	r3, [r7, #84]	; 0x54
 800179a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800179e:	4642      	mov	r2, r8
 80017a0:	464b      	mov	r3, r9
 80017a2:	f04f 0000 	mov.w	r0, #0
 80017a6:	f04f 0100 	mov.w	r1, #0
 80017aa:	0159      	lsls	r1, r3, #5
 80017ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b0:	0150      	lsls	r0, r2, #5
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4641      	mov	r1, r8
 80017b8:	1a51      	subs	r1, r2, r1
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	4649      	mov	r1, r9
 80017be:	eb63 0301 	sbc.w	r3, r3, r1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017d0:	4659      	mov	r1, fp
 80017d2:	018b      	lsls	r3, r1, #6
 80017d4:	4651      	mov	r1, sl
 80017d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017da:	4651      	mov	r1, sl
 80017dc:	018a      	lsls	r2, r1, #6
 80017de:	4651      	mov	r1, sl
 80017e0:	1a54      	subs	r4, r2, r1
 80017e2:	4659      	mov	r1, fp
 80017e4:	eb63 0501 	sbc.w	r5, r3, r1
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	00eb      	lsls	r3, r5, #3
 80017f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017f6:	00e2      	lsls	r2, r4, #3
 80017f8:	4614      	mov	r4, r2
 80017fa:	461d      	mov	r5, r3
 80017fc:	4643      	mov	r3, r8
 80017fe:	18e3      	adds	r3, r4, r3
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	464b      	mov	r3, r9
 8001804:	eb45 0303 	adc.w	r3, r5, r3
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001816:	4629      	mov	r1, r5
 8001818:	028b      	lsls	r3, r1, #10
 800181a:	4621      	mov	r1, r4
 800181c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001820:	4621      	mov	r1, r4
 8001822:	028a      	lsls	r2, r1, #10
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800182c:	2200      	movs	r2, #0
 800182e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001830:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001832:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001836:	f7fe fce5 	bl	8000204 <__aeabi_uldivmod>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4613      	mov	r3, r2
 8001840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_RCC_GetSysClockFreq+0x458>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	0f1b      	lsrs	r3, r3, #28
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001862:	e003      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800186a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800186c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001870:	4618      	mov	r0, r3
 8001872:	37b8      	adds	r7, #184	; 0xb8
 8001874:	46bd      	mov	sp, r7
 8001876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	00f42400 	.word	0x00f42400

08001884 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e28d      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8083 	beq.w	80019aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018a4:	4b94      	ldr	r3, [pc, #592]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d019      	beq.n	80018e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018b0:	4b91      	ldr	r3, [pc, #580]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018bc:	4b8e      	ldr	r3, [pc, #568]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018c8:	d00c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ca:	4b8b      	ldr	r3, [pc, #556]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d112      	bne.n	80018fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e2:	d10b      	bne.n	80018fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	4b84      	ldr	r3, [pc, #528]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d05b      	beq.n	80019a8 <HAL_RCC_OscConfig+0x124>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d157      	bne.n	80019a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e25a      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x90>
 8001906:	4b7c      	ldr	r3, [pc, #496]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7b      	ldr	r2, [pc, #492]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e01d      	b.n	8001950 <HAL_RCC_OscConfig+0xcc>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0xb4>
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a75      	ldr	r2, [pc, #468]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a72      	ldr	r2, [pc, #456]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0xcc>
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a6b      	ldr	r2, [pc, #428]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff f8c8 	bl	8000aec <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff f8c4 	bl	8000aec <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e21f      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0xdc>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff f8b4 	bl	8000aec <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff f8b0 	bl	8000aec <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e20b      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x104>
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d06f      	beq.n	8001a96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019b6:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d017      	beq.n	80019f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019c2:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d105      	bne.n	80019da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d11c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e6:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x186>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e1d3      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4937      	ldr	r1, [pc, #220]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	e03a      	b.n	8001a96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b34      	ldr	r3, [pc, #208]	; (8001afc <HAL_RCC_OscConfig+0x278>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f85d 	bl	8000aec <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff f859 	bl	8000aec <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e1b4      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4925      	ldr	r1, [pc, #148]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e015      	b.n	8001a96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_RCC_OscConfig+0x278>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff f83c 	bl	8000aec <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff f838 	bl	8000aec <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e193      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d036      	beq.n	8001b10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d016      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7ff f81c 	bl	8000aec <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff f818 	bl	8000aec <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e173      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x234>
 8001ad6:	e01b      	b.n	8001b10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff f805 	bl	8000aec <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	e00e      	b.n	8001b04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f801 	bl	8000aec <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d907      	bls.n	8001b04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e15c      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
 8001af8:	40023800 	.word	0x40023800
 8001afc:	42470000 	.word	0x42470000
 8001b00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b8a      	ldr	r3, [pc, #552]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ea      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 8097 	beq.w	8001c4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b83      	ldr	r3, [pc, #524]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b7f      	ldr	r3, [pc, #508]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a7e      	ldr	r2, [pc, #504]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b7c      	ldr	r3, [pc, #496]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b79      	ldr	r3, [pc, #484]	; (8001d34 <HAL_RCC_OscConfig+0x4b0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <HAL_RCC_OscConfig+0x4b0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a75      	ldr	r2, [pc, #468]	; (8001d34 <HAL_RCC_OscConfig+0x4b0>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7fe ffc1 	bl	8000aec <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7fe ffbd 	bl	8000aec <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e118      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	4b6c      	ldr	r3, [pc, #432]	; (8001d34 <HAL_RCC_OscConfig+0x4b0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x31e>
 8001b94:	4b66      	ldr	r3, [pc, #408]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a65      	ldr	r2, [pc, #404]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	e01c      	b.n	8001bdc <HAL_RCC_OscConfig+0x358>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x340>
 8001baa:	4b61      	ldr	r3, [pc, #388]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a60      	ldr	r2, [pc, #384]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb6:	4b5e      	ldr	r3, [pc, #376]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	4a5d      	ldr	r2, [pc, #372]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0x358>
 8001bc4:	4b5a      	ldr	r3, [pc, #360]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a59      	ldr	r2, [pc, #356]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a56      	ldr	r2, [pc, #344]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	f023 0304 	bic.w	r3, r3, #4
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d015      	beq.n	8001c10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7fe ff82 	bl	8000aec <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7fe ff7e 	bl	8000aec <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e0d7      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c02:	4b4b      	ldr	r3, [pc, #300]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0ee      	beq.n	8001bec <HAL_RCC_OscConfig+0x368>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7fe ff6c 	bl	8000aec <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7fe ff68 	bl	8000aec <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0c1      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2e:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ee      	bne.n	8001c18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c40:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a3a      	ldr	r2, [pc, #232]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80ad 	beq.w	8001db0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c56:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d060      	beq.n	8001d24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d145      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <HAL_RCC_OscConfig+0x4b4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7fe ff3c 	bl	8000aec <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c78:	f7fe ff38 	bl	8000aec <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e093      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	085b      	lsrs	r3, r3, #1
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	071b      	lsls	r3, r3, #28
 8001cc2:	491b      	ldr	r1, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_RCC_OscConfig+0x4b4>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7fe ff0d 	bl	8000aec <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7fe ff09 	bl	8000aec <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e064      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x452>
 8001cf4:	e05c      	b.n	8001db0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_RCC_OscConfig+0x4b4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fef6 	bl	8000aec <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d04:	f7fe fef2 	bl	8000aec <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e04d      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x480>
 8001d22:	e045      	b.n	8001db0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e040      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40007000 	.word	0x40007000
 8001d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <HAL_RCC_OscConfig+0x538>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d030      	beq.n	8001dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d129      	bne.n	8001dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d122      	bne.n	8001dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d119      	bne.n	8001dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	3b01      	subs	r3, #1
 8001d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d10f      	bne.n	8001dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e03f      	b.n	8001e52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fd26 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2224      	movs	r2, #36	; 0x24
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fddf 	bl	80029c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b08a      	sub	sp, #40	; 0x28
 8001e5e:	af02      	add	r7, sp, #8
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	4613      	mov	r3, r2
 8001e68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d17c      	bne.n	8001f74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_UART_Transmit+0x2c>
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e075      	b.n	8001f76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_UART_Transmit+0x3e>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e06e      	b.n	8001f76 <HAL_UART_Transmit+0x11c>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2221      	movs	r2, #33	; 0x21
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eae:	f7fe fe1d 	bl	8000aec <HAL_GetTick>
 8001eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	88fa      	ldrh	r2, [r7, #6]
 8001eb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	88fa      	ldrh	r2, [r7, #6]
 8001ebe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec8:	d108      	bne.n	8001edc <HAL_UART_Transmit+0x82>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d104      	bne.n	8001edc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	e003      	b.n	8001ee4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001eec:	e02a      	b.n	8001f44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2180      	movs	r1, #128	; 0x80
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 fb1f 	bl	800253c <UART_WaitOnFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e036      	b.n	8001f76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10b      	bne.n	8001f26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	3302      	adds	r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	e007      	b.n	8001f36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	3301      	adds	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1cf      	bne.n	8001eee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2200      	movs	r2, #0
 8001f56:	2140      	movs	r1, #64	; 0x40
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 faef 	bl	800253c <UART_WaitOnFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e006      	b.n	8001f76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e000      	b.n	8001f76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
  }
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d11d      	bne.n	8001fd4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_UART_Receive_IT+0x26>
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e016      	b.n	8001fd6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_UART_Receive_IT+0x38>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e00f      	b.n	8001fd6 <HAL_UART_Receive_IT+0x58>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fb24 	bl	8002618 <UART_Start_Receive_IT>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	e000      	b.n	8001fd6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
  }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b0ba      	sub	sp, #232	; 0xe8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800201e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10f      	bne.n	8002046 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <HAL_UART_IRQHandler+0x66>
 8002032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fc07 	bl	8002852 <UART_Receive_IT>
      return;
 8002044:	e256      	b.n	80024f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80de 	beq.w	800220c <HAL_UART_IRQHandler+0x22c>
 8002050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d106      	bne.n	800206a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800205c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002060:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80d1 	beq.w	800220c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800206a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_UART_IRQHandler+0xae>
 8002076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800208e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_UART_IRQHandler+0xd2>
 800209a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f043 0202 	orr.w	r2, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_UART_IRQHandler+0xf6>
 80020be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f043 0204 	orr.w	r2, r3, #4
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d011      	beq.n	8002106 <HAL_UART_IRQHandler+0x126>
 80020e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d105      	bne.n	80020fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f043 0208 	orr.w	r2, r3, #8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 81ed 	beq.w	80024ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_UART_IRQHandler+0x14e>
 800211c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fb92 	bl	8002852 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002138:	2b40      	cmp	r3, #64	; 0x40
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <HAL_UART_IRQHandler+0x17a>
 8002152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002156:	2b00      	cmp	r3, #0
 8002158:	d04f      	beq.n	80021fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fa9a 	bl	8002694 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b40      	cmp	r3, #64	; 0x40
 800216c:	d141      	bne.n	80021f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3314      	adds	r3, #20
 8002174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800217c:	e853 3f00 	ldrex	r3, [r3]
 8002180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800218c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3314      	adds	r3, #20
 8002196:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800219a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800219e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80021a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021aa:	e841 2300 	strex	r3, r2, [r1]
 80021ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80021b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1d9      	bne.n	800216e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d013      	beq.n	80021ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	4a7d      	ldr	r2, [pc, #500]	; (80023bc <HAL_UART_IRQHandler+0x3dc>)
 80021c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fe3d 	bl	8000e4e <HAL_DMA_Abort_IT>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d016      	beq.n	8002208 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021e4:	4610      	mov	r0, r2
 80021e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e8:	e00e      	b.n	8002208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f990 	bl	8002510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f0:	e00a      	b.n	8002208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f98c 	bl	8002510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	e006      	b.n	8002208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f988 	bl	8002510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002206:	e170      	b.n	80024ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002208:	bf00      	nop
    return;
 800220a:	e16e      	b.n	80024ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	2b01      	cmp	r3, #1
 8002212:	f040 814a 	bne.w	80024aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8143 	beq.w	80024aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 813c 	beq.w	80024aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002252:	2b40      	cmp	r3, #64	; 0x40
 8002254:	f040 80b4 	bne.w	80023c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002264:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8140 	beq.w	80024ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002276:	429a      	cmp	r2, r3
 8002278:	f080 8139 	bcs.w	80024ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002282:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800228e:	f000 8088 	beq.w	80023a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	330c      	adds	r3, #12
 8002298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022a0:	e853 3f00 	ldrex	r3, [r3]
 80022a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80022a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	330c      	adds	r3, #12
 80022ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80022be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80022ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022ce:	e841 2300 	strex	r3, r2, [r1]
 80022d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80022d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1d9      	bne.n	8002292 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3314      	adds	r3, #20
 80022e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e8:	e853 3f00 	ldrex	r3, [r3]
 80022ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80022ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3314      	adds	r3, #20
 80022fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002302:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002306:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002308:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800230a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800230e:	e841 2300 	strex	r3, r2, [r1]
 8002312:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1e1      	bne.n	80022de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3314      	adds	r3, #20
 8002320:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002324:	e853 3f00 	ldrex	r3, [r3]
 8002328:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800232a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3314      	adds	r3, #20
 800233a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800233e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002340:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002342:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002344:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002346:	e841 2300 	strex	r3, r2, [r1]
 800234a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800234c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1e3      	bne.n	800231a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	330c      	adds	r3, #12
 8002366:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236a:	e853 3f00 	ldrex	r3, [r3]
 800236e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002372:	f023 0310 	bic.w	r3, r3, #16
 8002376:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	330c      	adds	r3, #12
 8002380:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002384:	65ba      	str	r2, [r7, #88]	; 0x58
 8002386:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002388:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800238a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800238c:	e841 2300 	strex	r3, r2, [r1]
 8002390:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e3      	bne.n	8002360 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fce6 	bl	8000d6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	4619      	mov	r1, r3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f8b6 	bl	8002524 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023b8:	e099      	b.n	80024ee <HAL_UART_IRQHandler+0x50e>
 80023ba:	bf00      	nop
 80023bc:	0800275b 	.word	0x0800275b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 808b 	beq.w	80024f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80023dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8086 	beq.w	80024f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	330c      	adds	r3, #12
 80023ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	e853 3f00 	ldrex	r3, [r3]
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	330c      	adds	r3, #12
 8002406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800240a:	647a      	str	r2, [r7, #68]	; 0x44
 800240c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002412:	e841 2300 	strex	r3, r2, [r1]
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1e3      	bne.n	80023e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3314      	adds	r3, #20
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	e853 3f00 	ldrex	r3, [r3]
 800242c:	623b      	str	r3, [r7, #32]
   return(result);
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3314      	adds	r3, #20
 800243e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002442:	633a      	str	r2, [r7, #48]	; 0x30
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800244a:	e841 2300 	strex	r3, r2, [r1]
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1e3      	bne.n	800241e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	330c      	adds	r3, #12
 800246a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	e853 3f00 	ldrex	r3, [r3]
 8002472:	60fb      	str	r3, [r7, #12]
   return(result);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f023 0310 	bic.w	r3, r3, #16
 800247a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	330c      	adds	r3, #12
 8002484:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002488:	61fa      	str	r2, [r7, #28]
 800248a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248c:	69b9      	ldr	r1, [r7, #24]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	e841 2300 	strex	r3, r2, [r1]
 8002494:	617b      	str	r3, [r7, #20]
   return(result);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e3      	bne.n	8002464 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800249c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f83e 	bl	8002524 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024a8:	e023      	b.n	80024f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_UART_IRQHandler+0x4ea>
 80024b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f95d 	bl	8002782 <UART_Transmit_IT>
    return;
 80024c8:	e014      	b.n	80024f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00e      	beq.n	80024f4 <HAL_UART_IRQHandler+0x514>
 80024d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f99d 	bl	8002822 <UART_EndTransmit_IT>
    return;
 80024e8:	e004      	b.n	80024f4 <HAL_UART_IRQHandler+0x514>
    return;
 80024ea:	bf00      	nop
 80024ec:	e002      	b.n	80024f4 <HAL_UART_IRQHandler+0x514>
      return;
 80024ee:	bf00      	nop
 80024f0:	e000      	b.n	80024f4 <HAL_UART_IRQHandler+0x514>
      return;
 80024f2:	bf00      	nop
  }
}
 80024f4:	37e8      	adds	r7, #232	; 0xe8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop

080024fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b090      	sub	sp, #64	; 0x40
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800254c:	e050      	b.n	80025f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002554:	d04c      	beq.n	80025f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <UART_WaitOnFlagUntilTimeout+0x30>
 800255c:	f7fe fac6 	bl	8000aec <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002568:	429a      	cmp	r2, r3
 800256a:	d241      	bcs.n	80025f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	330c      	adds	r3, #12
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	e853 3f00 	ldrex	r3, [r3]
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800258c:	637a      	str	r2, [r7, #52]	; 0x34
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002590:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002594:	e841 2300 	strex	r3, r2, [r1]
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e5      	bne.n	800256c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3314      	adds	r3, #20
 80025a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	e853 3f00 	ldrex	r3, [r3]
 80025ae:	613b      	str	r3, [r7, #16]
   return(result);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3314      	adds	r3, #20
 80025be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025c0:	623a      	str	r2, [r7, #32]
 80025c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c4:	69f9      	ldr	r1, [r7, #28]
 80025c6:	6a3a      	ldr	r2, [r7, #32]
 80025c8:	e841 2300 	strex	r3, r2, [r1]
 80025cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e5      	bne.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e00f      	b.n	8002610 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4013      	ands	r3, r2
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	429a      	cmp	r2, r3
 800260c:	d09f      	beq.n	800254e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3740      	adds	r7, #64	; 0x40
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	88fa      	ldrh	r2, [r7, #6]
 8002630:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	88fa      	ldrh	r2, [r7, #6]
 8002636:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2222      	movs	r2, #34	; 0x22
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002664:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0220 	orr.w	r2, r2, #32
 8002684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002694:	b480      	push	{r7}
 8002696:	b095      	sub	sp, #84	; 0x54
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	330c      	adds	r3, #12
 80026a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	e853 3f00 	ldrex	r3, [r3]
 80026aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	330c      	adds	r3, #12
 80026ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026bc:	643a      	str	r2, [r7, #64]	; 0x40
 80026be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026c4:	e841 2300 	strex	r3, r2, [r1]
 80026c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1e5      	bne.n	800269c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3314      	adds	r3, #20
 80026d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	e853 3f00 	ldrex	r3, [r3]
 80026de:	61fb      	str	r3, [r7, #28]
   return(result);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3314      	adds	r3, #20
 80026ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f8:	e841 2300 	strex	r3, r2, [r1]
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e5      	bne.n	80026d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	2b01      	cmp	r3, #1
 800270a:	d119      	bne.n	8002740 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	e853 3f00 	ldrex	r3, [r3]
 800271a:	60bb      	str	r3, [r7, #8]
   return(result);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f023 0310 	bic.w	r3, r3, #16
 8002722:	647b      	str	r3, [r7, #68]	; 0x44
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	330c      	adds	r3, #12
 800272a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800272c:	61ba      	str	r2, [r7, #24]
 800272e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002730:	6979      	ldr	r1, [r7, #20]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	e841 2300 	strex	r3, r2, [r1]
 8002738:	613b      	str	r3, [r7, #16]
   return(result);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e5      	bne.n	800270c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800274e:	bf00      	nop
 8002750:	3754      	adds	r7, #84	; 0x54
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff fecb 	bl	8002510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002782:	b480      	push	{r7}
 8002784:	b085      	sub	sp, #20
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b21      	cmp	r3, #33	; 0x21
 8002794:	d13e      	bne.n	8002814 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279e:	d114      	bne.n	80027ca <UART_Transmit_IT+0x48>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d110      	bne.n	80027ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	1c9a      	adds	r2, r3, #2
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	621a      	str	r2, [r3, #32]
 80027c8:	e008      	b.n	80027dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	1c59      	adds	r1, r3, #1
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6211      	str	r1, [r2, #32]
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4619      	mov	r1, r3
 80027ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10f      	bne.n	8002810 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800280e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002838:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff fe5a 	bl	80024fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b08c      	sub	sp, #48	; 0x30
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b22      	cmp	r3, #34	; 0x22
 8002864:	f040 80ab 	bne.w	80029be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002870:	d117      	bne.n	80028a2 <UART_Receive_IT+0x50>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d113      	bne.n	80028a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800287a:	2300      	movs	r3, #0
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002890:	b29a      	uxth	r2, r3
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	1c9a      	adds	r2, r3, #2
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
 80028a0:	e026      	b.n	80028f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b4:	d007      	beq.n	80028c6 <UART_Receive_IT+0x74>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10a      	bne.n	80028d4 <UART_Receive_IT+0x82>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e008      	b.n	80028e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4619      	mov	r1, r3
 80028fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002900:	2b00      	cmp	r3, #0
 8002902:	d15a      	bne.n	80029ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0220 	bic.w	r2, r2, #32
 8002912:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002922:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	2b01      	cmp	r3, #1
 8002942:	d135      	bne.n	80029b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	e853 3f00 	ldrex	r3, [r3]
 8002958:	613b      	str	r3, [r7, #16]
   return(result);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f023 0310 	bic.w	r3, r3, #16
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296a:	623a      	str	r2, [r7, #32]
 800296c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296e:	69f9      	ldr	r1, [r7, #28]
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	e841 2300 	strex	r3, r2, [r1]
 8002976:	61bb      	str	r3, [r7, #24]
   return(result);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1e5      	bne.n	800294a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b10      	cmp	r3, #16
 800298a:	d10a      	bne.n	80029a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029a6:	4619      	mov	r1, r3
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff fdbb 	bl	8002524 <HAL_UARTEx_RxEventCallback>
 80029ae:	e002      	b.n	80029b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7fd fda9 	bl	8000508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e002      	b.n	80029c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e000      	b.n	80029c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
  }
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3730      	adds	r7, #48	; 0x30
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029cc:	b0c0      	sub	sp, #256	; 0x100
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e4:	68d9      	ldr	r1, [r3, #12]
 80029e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	ea40 0301 	orr.w	r3, r0, r1
 80029f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a20:	f021 010c 	bic.w	r1, r1, #12
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a42:	6999      	ldr	r1, [r3, #24]
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	ea40 0301 	orr.w	r3, r0, r1
 8002a4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b8f      	ldr	r3, [pc, #572]	; (8002c94 <UART_SetConfig+0x2cc>)
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d005      	beq.n	8002a68 <UART_SetConfig+0xa0>
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b8d      	ldr	r3, [pc, #564]	; (8002c98 <UART_SetConfig+0x2d0>)
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d104      	bne.n	8002a72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a68:	f7fe fcc8 	bl	80013fc <HAL_RCC_GetPCLK2Freq>
 8002a6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a70:	e003      	b.n	8002a7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a72:	f7fe fcaf 	bl	80013d4 <HAL_RCC_GetPCLK1Freq>
 8002a76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a84:	f040 810c 	bne.w	8002ca0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a9a:	4622      	mov	r2, r4
 8002a9c:	462b      	mov	r3, r5
 8002a9e:	1891      	adds	r1, r2, r2
 8002aa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002aa2:	415b      	adcs	r3, r3
 8002aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002aaa:	4621      	mov	r1, r4
 8002aac:	eb12 0801 	adds.w	r8, r2, r1
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	eb43 0901 	adc.w	r9, r3, r1
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aca:	4690      	mov	r8, r2
 8002acc:	4699      	mov	r9, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	eb18 0303 	adds.w	r3, r8, r3
 8002ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ad8:	462b      	mov	r3, r5
 8002ada:	eb49 0303 	adc.w	r3, r9, r3
 8002ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002aee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002af2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002af6:	460b      	mov	r3, r1
 8002af8:	18db      	adds	r3, r3, r3
 8002afa:	653b      	str	r3, [r7, #80]	; 0x50
 8002afc:	4613      	mov	r3, r2
 8002afe:	eb42 0303 	adc.w	r3, r2, r3
 8002b02:	657b      	str	r3, [r7, #84]	; 0x54
 8002b04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b0c:	f7fd fb7a 	bl	8000204 <__aeabi_uldivmod>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4b61      	ldr	r3, [pc, #388]	; (8002c9c <UART_SetConfig+0x2d4>)
 8002b16:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	011c      	lsls	r4, r3, #4
 8002b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b30:	4642      	mov	r2, r8
 8002b32:	464b      	mov	r3, r9
 8002b34:	1891      	adds	r1, r2, r2
 8002b36:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b38:	415b      	adcs	r3, r3
 8002b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b40:	4641      	mov	r1, r8
 8002b42:	eb12 0a01 	adds.w	sl, r2, r1
 8002b46:	4649      	mov	r1, r9
 8002b48:	eb43 0b01 	adc.w	fp, r3, r1
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b60:	4692      	mov	sl, r2
 8002b62:	469b      	mov	fp, r3
 8002b64:	4643      	mov	r3, r8
 8002b66:	eb1a 0303 	adds.w	r3, sl, r3
 8002b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	eb4b 0303 	adc.w	r3, fp, r3
 8002b74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	18db      	adds	r3, r3, r3
 8002b90:	643b      	str	r3, [r7, #64]	; 0x40
 8002b92:	4613      	mov	r3, r2
 8002b94:	eb42 0303 	adc.w	r3, r2, r3
 8002b98:	647b      	str	r3, [r7, #68]	; 0x44
 8002b9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ba2:	f7fd fb2f 	bl	8000204 <__aeabi_uldivmod>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <UART_SetConfig+0x2d4>)
 8002bae:	fba3 2301 	umull	r2, r3, r3, r1
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2264      	movs	r2, #100	; 0x64
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	1acb      	subs	r3, r1, r3
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bc2:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <UART_SetConfig+0x2d4>)
 8002bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bd0:	441c      	add	r4, r3
 8002bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002be0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	1891      	adds	r1, r2, r2
 8002bea:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bec:	415b      	adcs	r3, r3
 8002bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	1851      	adds	r1, r2, r1
 8002bf8:	6339      	str	r1, [r7, #48]	; 0x30
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	414b      	adcs	r3, r1
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	00cb      	lsls	r3, r1, #3
 8002c10:	4651      	mov	r1, sl
 8002c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c16:	4651      	mov	r1, sl
 8002c18:	00ca      	lsls	r2, r1, #3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4642      	mov	r2, r8
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c28:	464b      	mov	r3, r9
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	eb42 0303 	adc.w	r3, r2, r3
 8002c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c48:	460b      	mov	r3, r1
 8002c4a:	18db      	adds	r3, r3, r3
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c4e:	4613      	mov	r3, r2
 8002c50:	eb42 0303 	adc.w	r3, r2, r3
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c5e:	f7fd fad1 	bl	8000204 <__aeabi_uldivmod>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <UART_SetConfig+0x2d4>)
 8002c68:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	2164      	movs	r1, #100	; 0x64
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	3332      	adds	r3, #50	; 0x32
 8002c7a:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <UART_SetConfig+0x2d4>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	f003 0207 	and.w	r2, r3, #7
 8002c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4422      	add	r2, r4
 8002c8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c90:	e105      	b.n	8002e9e <UART_SetConfig+0x4d6>
 8002c92:	bf00      	nop
 8002c94:	40011000 	.word	0x40011000
 8002c98:	40011400 	.word	0x40011400
 8002c9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002caa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cb2:	4642      	mov	r2, r8
 8002cb4:	464b      	mov	r3, r9
 8002cb6:	1891      	adds	r1, r2, r2
 8002cb8:	6239      	str	r1, [r7, #32]
 8002cba:	415b      	adcs	r3, r3
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	1854      	adds	r4, r2, r1
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	eb43 0501 	adc.w	r5, r3, r1
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	00eb      	lsls	r3, r5, #3
 8002cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cda:	00e2      	lsls	r2, r4, #3
 8002cdc:	4614      	mov	r4, r2
 8002cde:	461d      	mov	r5, r3
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	18e3      	adds	r3, r4, r3
 8002ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ce8:	464b      	mov	r3, r9
 8002cea:	eb45 0303 	adc.w	r3, r5, r3
 8002cee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d0e:	4629      	mov	r1, r5
 8002d10:	008b      	lsls	r3, r1, #2
 8002d12:	4621      	mov	r1, r4
 8002d14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d18:	4621      	mov	r1, r4
 8002d1a:	008a      	lsls	r2, r1, #2
 8002d1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d20:	f7fd fa70 	bl	8000204 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4b60      	ldr	r3, [pc, #384]	; (8002eac <UART_SetConfig+0x4e4>)
 8002d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	011c      	lsls	r4, r3, #4
 8002d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d44:	4642      	mov	r2, r8
 8002d46:	464b      	mov	r3, r9
 8002d48:	1891      	adds	r1, r2, r2
 8002d4a:	61b9      	str	r1, [r7, #24]
 8002d4c:	415b      	adcs	r3, r3
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d54:	4641      	mov	r1, r8
 8002d56:	1851      	adds	r1, r2, r1
 8002d58:	6139      	str	r1, [r7, #16]
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	414b      	adcs	r3, r1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	00cb      	lsls	r3, r1, #3
 8002d70:	4651      	mov	r1, sl
 8002d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d76:	4651      	mov	r1, sl
 8002d78:	00ca      	lsls	r2, r1, #3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4642      	mov	r2, r8
 8002d82:	189b      	adds	r3, r3, r2
 8002d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d88:	464b      	mov	r3, r9
 8002d8a:	460a      	mov	r2, r1
 8002d8c:	eb42 0303 	adc.w	r3, r2, r3
 8002d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002dac:	4649      	mov	r1, r9
 8002dae:	008b      	lsls	r3, r1, #2
 8002db0:	4641      	mov	r1, r8
 8002db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002db6:	4641      	mov	r1, r8
 8002db8:	008a      	lsls	r2, r1, #2
 8002dba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dbe:	f7fd fa21 	bl	8000204 <__aeabi_uldivmod>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4b39      	ldr	r3, [pc, #228]	; (8002eac <UART_SetConfig+0x4e4>)
 8002dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	2164      	movs	r1, #100	; 0x64
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	3332      	adds	r3, #50	; 0x32
 8002dda:	4a34      	ldr	r2, [pc, #208]	; (8002eac <UART_SetConfig+0x4e4>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de6:	441c      	add	r4, r3
 8002de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dec:	2200      	movs	r2, #0
 8002dee:	673b      	str	r3, [r7, #112]	; 0x70
 8002df0:	677a      	str	r2, [r7, #116]	; 0x74
 8002df2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002df6:	4642      	mov	r2, r8
 8002df8:	464b      	mov	r3, r9
 8002dfa:	1891      	adds	r1, r2, r2
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	415b      	adcs	r3, r3
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e06:	4641      	mov	r1, r8
 8002e08:	1851      	adds	r1, r2, r1
 8002e0a:	6039      	str	r1, [r7, #0]
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	414b      	adcs	r3, r1
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e1e:	4659      	mov	r1, fp
 8002e20:	00cb      	lsls	r3, r1, #3
 8002e22:	4651      	mov	r1, sl
 8002e24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e28:	4651      	mov	r1, sl
 8002e2a:	00ca      	lsls	r2, r1, #3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4603      	mov	r3, r0
 8002e32:	4642      	mov	r2, r8
 8002e34:	189b      	adds	r3, r3, r2
 8002e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e38:	464b      	mov	r3, r9
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	eb42 0303 	adc.w	r3, r2, r3
 8002e40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e4c:	667a      	str	r2, [r7, #100]	; 0x64
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	008b      	lsls	r3, r1, #2
 8002e5e:	4641      	mov	r1, r8
 8002e60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e64:	4641      	mov	r1, r8
 8002e66:	008a      	lsls	r2, r1, #2
 8002e68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e6c:	f7fd f9ca 	bl	8000204 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <UART_SetConfig+0x4e4>)
 8002e76:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2164      	movs	r1, #100	; 0x64
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	3332      	adds	r3, #50	; 0x32
 8002e88:	4a08      	ldr	r2, [pc, #32]	; (8002eac <UART_SetConfig+0x4e4>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	f003 020f 	and.w	r2, r3, #15
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4422      	add	r2, r4
 8002e9c:	609a      	str	r2, [r3, #8]
}
 8002e9e:	bf00      	nop
 8002ea0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eaa:	bf00      	nop
 8002eac:	51eb851f 	.word	0x51eb851f

08002eb0 <__libc_init_array>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	4d0d      	ldr	r5, [pc, #52]	; (8002ee8 <__libc_init_array+0x38>)
 8002eb4:	4c0d      	ldr	r4, [pc, #52]	; (8002eec <__libc_init_array+0x3c>)
 8002eb6:	1b64      	subs	r4, r4, r5
 8002eb8:	10a4      	asrs	r4, r4, #2
 8002eba:	2600      	movs	r6, #0
 8002ebc:	42a6      	cmp	r6, r4
 8002ebe:	d109      	bne.n	8002ed4 <__libc_init_array+0x24>
 8002ec0:	4d0b      	ldr	r5, [pc, #44]	; (8002ef0 <__libc_init_array+0x40>)
 8002ec2:	4c0c      	ldr	r4, [pc, #48]	; (8002ef4 <__libc_init_array+0x44>)
 8002ec4:	f000 f820 	bl	8002f08 <_init>
 8002ec8:	1b64      	subs	r4, r4, r5
 8002eca:	10a4      	asrs	r4, r4, #2
 8002ecc:	2600      	movs	r6, #0
 8002ece:	42a6      	cmp	r6, r4
 8002ed0:	d105      	bne.n	8002ede <__libc_init_array+0x2e>
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
 8002ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed8:	4798      	blx	r3
 8002eda:	3601      	adds	r6, #1
 8002edc:	e7ee      	b.n	8002ebc <__libc_init_array+0xc>
 8002ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee2:	4798      	blx	r3
 8002ee4:	3601      	adds	r6, #1
 8002ee6:	e7f2      	b.n	8002ece <__libc_init_array+0x1e>
 8002ee8:	08002f40 	.word	0x08002f40
 8002eec:	08002f40 	.word	0x08002f40
 8002ef0:	08002f40 	.word	0x08002f40
 8002ef4:	08002f44 	.word	0x08002f44

08002ef8 <memset>:
 8002ef8:	4402      	add	r2, r0
 8002efa:	4603      	mov	r3, r0
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d100      	bne.n	8002f02 <memset+0xa>
 8002f00:	4770      	bx	lr
 8002f02:	f803 1b01 	strb.w	r1, [r3], #1
 8002f06:	e7f9      	b.n	8002efc <memset+0x4>

08002f08 <_init>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr

08002f14 <_fini>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr
