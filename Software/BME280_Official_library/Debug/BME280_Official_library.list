
BME280_Official_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005528  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005710  08005710  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005710  08005710  00015710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005718  08005718  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800571c  0800571c  0001571c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08005790  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08005790  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c66d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ed  00000000  00000000  0002c70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002eb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214db  00000000  00000000  0002f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8d5  00000000  00000000  00050a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cadd2  00000000  00000000  0005e330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129102  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f90  00000000  00000000  00129154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080056d8 	.word	0x080056d8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	080056d8 	.word	0x080056d8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_ldivmod>:
 8000a44:	b97b      	cbnz	r3, 8000a66 <__aeabi_ldivmod+0x22>
 8000a46:	b972      	cbnz	r2, 8000a66 <__aeabi_ldivmod+0x22>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bfbe      	ittt	lt
 8000a4c:	2000      	movlt	r0, #0
 8000a4e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a52:	e006      	blt.n	8000a62 <__aeabi_ldivmod+0x1e>
 8000a54:	bf08      	it	eq
 8000a56:	2800      	cmpeq	r0, #0
 8000a58:	bf1c      	itt	ne
 8000a5a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a5e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a62:	f000 b9bf 	b.w	8000de4 <__aeabi_idiv0>
 8000a66:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a6a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6e:	2900      	cmp	r1, #0
 8000a70:	db09      	blt.n	8000a86 <__aeabi_ldivmod+0x42>
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	db1a      	blt.n	8000aac <__aeabi_ldivmod+0x68>
 8000a76:	f000 f84d 	bl	8000b14 <__udivmoddi4>
 8000a7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a82:	b004      	add	sp, #16
 8000a84:	4770      	bx	lr
 8000a86:	4240      	negs	r0, r0
 8000a88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db1b      	blt.n	8000ac8 <__aeabi_ldivmod+0x84>
 8000a90:	f000 f840 	bl	8000b14 <__udivmoddi4>
 8000a94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a9c:	b004      	add	sp, #16
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aa4:	4252      	negs	r2, r2
 8000aa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aaa:	4770      	bx	lr
 8000aac:	4252      	negs	r2, r2
 8000aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab2:	f000 f82f 	bl	8000b14 <__udivmoddi4>
 8000ab6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000abe:	b004      	add	sp, #16
 8000ac0:	4240      	negs	r0, r0
 8000ac2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac6:	4770      	bx	lr
 8000ac8:	4252      	negs	r2, r2
 8000aca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ace:	f000 f821 	bl	8000b14 <__udivmoddi4>
 8000ad2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ada:	b004      	add	sp, #16
 8000adc:	4252      	negs	r2, r2
 8000ade:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ae2:	4770      	bx	lr

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af8:	f000 b974 	b.w	8000de4 <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	468e      	mov	lr, r1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d14d      	bne.n	8000bbe <__udivmoddi4+0xaa>
 8000b22:	428a      	cmp	r2, r1
 8000b24:	4694      	mov	ip, r2
 8000b26:	d969      	bls.n	8000bfc <__udivmoddi4+0xe8>
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	b152      	cbz	r2, 8000b44 <__udivmoddi4+0x30>
 8000b2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b32:	f1c2 0120 	rsb	r1, r2, #32
 8000b36:	fa20 f101 	lsr.w	r1, r0, r1
 8000b3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b42:	4094      	lsls	r4, r2
 8000b44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b48:	0c21      	lsrs	r1, r4, #16
 8000b4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b4e:	fa1f f78c 	uxth.w	r7, ip
 8000b52:	fb08 e316 	mls	r3, r8, r6, lr
 8000b56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b5a:	fb06 f107 	mul.w	r1, r6, r7
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	d90a      	bls.n	8000b78 <__udivmoddi4+0x64>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b6a:	f080 811f 	bcs.w	8000dac <__udivmoddi4+0x298>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 811c 	bls.w	8000dac <__udivmoddi4+0x298>
 8000b74:	3e02      	subs	r6, #2
 8000b76:	4463      	add	r3, ip
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b80:	fb08 3310 	mls	r3, r8, r0, r3
 8000b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b88:	fb00 f707 	mul.w	r7, r0, r7
 8000b8c:	42a7      	cmp	r7, r4
 8000b8e:	d90a      	bls.n	8000ba6 <__udivmoddi4+0x92>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b98:	f080 810a 	bcs.w	8000db0 <__udivmoddi4+0x29c>
 8000b9c:	42a7      	cmp	r7, r4
 8000b9e:	f240 8107 	bls.w	8000db0 <__udivmoddi4+0x29c>
 8000ba2:	4464      	add	r4, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000baa:	1be4      	subs	r4, r4, r7
 8000bac:	2600      	movs	r6, #0
 8000bae:	b11d      	cbz	r5, 8000bb8 <__udivmoddi4+0xa4>
 8000bb0:	40d4      	lsrs	r4, r2
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d909      	bls.n	8000bd6 <__udivmoddi4+0xc2>
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	f000 80ef 	beq.w	8000da6 <__udivmoddi4+0x292>
 8000bc8:	2600      	movs	r6, #0
 8000bca:	e9c5 0100 	strd	r0, r1, [r5]
 8000bce:	4630      	mov	r0, r6
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	fab3 f683 	clz	r6, r3
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	d14a      	bne.n	8000c74 <__udivmoddi4+0x160>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xd4>
 8000be2:	4282      	cmp	r2, r0
 8000be4:	f200 80f9 	bhi.w	8000dda <__udivmoddi4+0x2c6>
 8000be8:	1a84      	subs	r4, r0, r2
 8000bea:	eb61 0303 	sbc.w	r3, r1, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	469e      	mov	lr, r3
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	d0e0      	beq.n	8000bb8 <__udivmoddi4+0xa4>
 8000bf6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bfa:	e7dd      	b.n	8000bb8 <__udivmoddi4+0xa4>
 8000bfc:	b902      	cbnz	r2, 8000c00 <__udivmoddi4+0xec>
 8000bfe:	deff      	udf	#255	; 0xff
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	f040 8092 	bne.w	8000d2e <__udivmoddi4+0x21a>
 8000c0a:	eba1 010c 	sub.w	r1, r1, ip
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	2601      	movs	r6, #1
 8000c18:	0c20      	lsrs	r0, r4, #16
 8000c1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c26:	fb0e f003 	mul.w	r0, lr, r3
 8000c2a:	4288      	cmp	r0, r1
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x12c>
 8000c2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c32:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x12a>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f200 80cb 	bhi.w	8000dd4 <__udivmoddi4+0x2c0>
 8000c3e:	4643      	mov	r3, r8
 8000c40:	1a09      	subs	r1, r1, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c48:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c50:	fb0e fe00 	mul.w	lr, lr, r0
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x156>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x154>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80bb 	bhi.w	8000dde <__udivmoddi4+0x2ca>
 8000c68:	4608      	mov	r0, r1
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c72:	e79c      	b.n	8000bae <__udivmoddi4+0x9a>
 8000c74:	f1c6 0720 	rsb	r7, r6, #32
 8000c78:	40b3      	lsls	r3, r6
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa20 f407 	lsr.w	r4, r0, r7
 8000c86:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8a:	431c      	orrs	r4, r3
 8000c8c:	40f9      	lsrs	r1, r7
 8000c8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c92:	fa00 f306 	lsl.w	r3, r0, r6
 8000c96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c9a:	0c20      	lsrs	r0, r4, #16
 8000c9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ca0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ca4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cac:	4288      	cmp	r0, r1
 8000cae:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b8>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2bc>
 8000cc0:	4288      	cmp	r0, r1
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2bc>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4461      	add	r1, ip
 8000ccc:	1a09      	subs	r1, r1, r0
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce0:	458e      	cmp	lr, r1
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1e2>
 8000ce4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2b4>
 8000cee:	458e      	cmp	lr, r1
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2b4>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4461      	add	r1, ip
 8000cf6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cfa:	fba0 9402 	umull	r9, r4, r0, r2
 8000cfe:	eba1 010e 	sub.w	r1, r1, lr
 8000d02:	42a1      	cmp	r1, r4
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46a6      	mov	lr, r4
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x2a4>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x2a0>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x212>
 8000d0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d12:	eb61 010e 	sbc.w	r1, r1, lr
 8000d16:	fa01 f707 	lsl.w	r7, r1, r7
 8000d1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d1e:	40f1      	lsrs	r1, r6
 8000d20:	431f      	orrs	r7, r3
 8000d22:	e9c5 7100 	strd	r7, r1, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	f1c2 0320 	rsb	r3, r2, #32
 8000d32:	40d8      	lsrs	r0, r3
 8000d34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d38:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	4301      	orrs	r1, r0
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d50:	0c0b      	lsrs	r3, r1, #16
 8000d52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d56:	fb00 f60e 	mul.w	r6, r0, lr
 8000d5a:	429e      	cmp	r6, r3
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x260>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b8>
 8000d6c:	429e      	cmp	r6, r3
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b8>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	1b9b      	subs	r3, r3, r6
 8000d76:	b289      	uxth	r1, r1
 8000d78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb06 f30e 	mul.w	r3, r6, lr
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x28a>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2b0>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2b0>
 8000d9a:	3e02      	subs	r6, #2
 8000d9c:	4461      	add	r1, ip
 8000d9e:	1ac9      	subs	r1, r1, r3
 8000da0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0x104>
 8000da6:	462e      	mov	r6, r5
 8000da8:	4628      	mov	r0, r5
 8000daa:	e705      	b.n	8000bb8 <__udivmoddi4+0xa4>
 8000dac:	4606      	mov	r6, r0
 8000dae:	e6e3      	b.n	8000b78 <__udivmoddi4+0x64>
 8000db0:	4618      	mov	r0, r3
 8000db2:	e6f8      	b.n	8000ba6 <__udivmoddi4+0x92>
 8000db4:	454b      	cmp	r3, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f8>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f8>
 8000dc4:	4646      	mov	r6, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x28a>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1e2>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x260>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b8>
 8000dd4:	3b02      	subs	r3, #2
 8000dd6:	4461      	add	r1, ip
 8000dd8:	e732      	b.n	8000c40 <__udivmoddi4+0x12c>
 8000dda:	4630      	mov	r0, r6
 8000ddc:	e709      	b.n	8000bf2 <__udivmoddi4+0xde>
 8000dde:	4464      	add	r4, ip
 8000de0:	3802      	subs	r0, #2
 8000de2:	e742      	b.n	8000c6a <__udivmoddi4+0x156>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000df0:	2305      	movs	r3, #5
 8000df2:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f001 fac9 	bl	8002390 <null_ptr_check>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d133      	bne.n	8000e72 <bme280_init+0x8a>
		while (try_count) {
 8000e0a:	e028      	b.n	8000e5e <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000e0c:	f107 010d 	add.w	r1, r7, #13
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2201      	movs	r2, #1
 8000e14:	20d0      	movs	r0, #208	; 0xd0
 8000e16:	f000 f832 	bl	8000e7e <bme280_get_regs>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d114      	bne.n	8000e50 <bme280_init+0x68>
 8000e26:	7b7b      	ldrb	r3, [r7, #13]
 8000e28:	2b60      	cmp	r3, #96	; 0x60
 8000e2a:	d111      	bne.n	8000e50 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000e2c:	7b7a      	ldrb	r2, [r7, #13]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f978 	bl	8001128 <bme280_soft_reset>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d110      	bne.n	8000e66 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f001 f919 	bl	800207c <get_calib_data>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000e4e:	e00a      	b.n	8000e66 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	2001      	movs	r0, #1
 8000e56:	4798      	blx	r3
			--try_count;
 8000e58:	7bbb      	ldrb	r3, [r7, #14]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1d3      	bne.n	8000e0c <bme280_init+0x24>
 8000e64:	e000      	b.n	8000e68 <bme280_init+0x80>
				break;
 8000e66:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000e68:	7bbb      	ldrb	r3, [r7, #14]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000e6e:	23fe      	movs	r3, #254	; 0xfe
 8000e70:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000e7e:	b590      	push	{r4, r7, lr}
 8000e80:	b087      	sub	sp, #28
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	4603      	mov	r3, r0
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f001 fa7d 	bl	8002390 <null_ptr_check>
 8000e96:	4603      	mov	r3, r0
 8000e98:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000e9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d117      	bne.n	8000ed2 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	789b      	ldrb	r3, [r3, #2]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d003      	beq.n	8000eb2 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eb0:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685c      	ldr	r4, [r3, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7858      	ldrb	r0, [r3, #1]
 8000eba:	89bb      	ldrh	r3, [r7, #12]
 8000ebc:	7bf9      	ldrb	r1, [r7, #15]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	47a0      	blx	r4
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8000ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8000ece:	23fc      	movs	r3, #252	; 0xfc
 8000ed0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd90      	pop	{r4, r7, pc}

08000ede <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8000ede:	b590      	push	{r4, r7, lr}
 8000ee0:	b08d      	sub	sp, #52	; 0x34
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4613      	mov	r3, r2
 8000eec:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b0a      	cmp	r3, #10
 8000ef2:	d901      	bls.n	8000ef8 <bme280_set_regs+0x1a>
		len = 10;
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000ef8:	6838      	ldr	r0, [r7, #0]
 8000efa:	f001 fa49 	bl	8002390 <null_ptr_check>
 8000efe:	4603      	mov	r3, r0
 8000f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8000f04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d156      	bne.n	8000fba <bme280_set_regs+0xdc>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d053      	beq.n	8000fba <bme280_set_regs+0xdc>
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d050      	beq.n	8000fba <bme280_set_regs+0xdc>
		if (len != 0) {
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d049      	beq.n	8000fb2 <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	789b      	ldrb	r3, [r3, #2]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d01a      	beq.n	8000f62 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000f32:	e011      	b.n	8000f58 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000f34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781a      	ldrb	r2, [r3, #0]
 8000f3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f42:	68f9      	ldr	r1, [r7, #12]
 8000f44:	440b      	add	r3, r1
 8000f46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000f4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f52:	3301      	adds	r3, #1
 8000f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000f58:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d3e8      	bcc.n	8000f34 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d90d      	bls.n	8000f84 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f107 0114 	add.w	r1, r7, #20
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f001 f8c8 	bl	8002106 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000f82:	e001      	b.n	8000f88 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689c      	ldr	r4, [r3, #8]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	7858      	ldrb	r0, [r3, #1]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	7819      	ldrb	r1, [r3, #0]
 8000f94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f96:	f107 0214 	add.w	r2, r7, #20
 8000f9a:	47a0      	blx	r4
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8000fa2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00b      	beq.n	8000fc2 <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 8000faa:	23fc      	movs	r3, #252	; 0xfc
 8000fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8000fb0:	e007      	b.n	8000fc2 <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8000fb2:	23fd      	movs	r3, #253	; 0xfd
 8000fb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8000fb8:	e003      	b.n	8000fc2 <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8000fba:	23ff      	movs	r3, #255	; 0xff
 8000fbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000fc0:	e000      	b.n	8000fc4 <bme280_set_regs+0xe6>
		if (len != 0) {
 8000fc2:	bf00      	nop
	}


	return rslt;
 8000fc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3734      	adds	r7, #52	; 0x34
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}

08000fd0 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fdc:	6838      	ldr	r0, [r7, #0]
 8000fde:	f001 f9d7 	bl	8002390 <null_ptr_check>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d13f      	bne.n	800106e <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8000fee:	f107 030e 	add.w	r3, r7, #14
 8000ff2:	6839      	ldr	r1, [r7, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f874 	bl	80010e2 <bme280_get_sensor_mode>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d107      	bne.n	8001016 <bme280_set_sensor_settings+0x46>
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f000 fb36 	bl	800167e <put_device_to_sleep>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d127      	bne.n	800106e <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4619      	mov	r1, r3
 8001022:	2007      	movs	r0, #7
 8001024:	f001 f998 	bl	8002358 <are_settings_changed>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d009      	beq.n	8001042 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f972 	bl	8001322 <set_osr_settings>
 800103e:	4603      	mov	r3, r0
 8001040:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d111      	bne.n	800106e <bme280_set_sensor_settings+0x9e>
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4619      	mov	r1, r3
 800104e:	2018      	movs	r0, #24
 8001050:	f001 f982 	bl	8002358 <are_settings_changed>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d009      	beq.n	800106e <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f9f9 	bl	800145c <set_filter_standby_settings>
 800106a:	4603      	mov	r3, r0
 800106c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	6039      	str	r1, [r7, #0]
 8001084:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001086:	6838      	ldr	r0, [r7, #0]
 8001088:	f001 f982 	bl	8002390 <null_ptr_check>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d11e      	bne.n	80010d6 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001098:	f107 030e 	add.w	r3, r7, #14
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f81f 	bl	80010e2 <bme280_get_sensor_mode>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80010a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d107      	bne.n	80010c0 <bme280_set_sensor_mode+0x46>
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d004      	beq.n	80010c0 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 80010b6:	6838      	ldr	r0, [r7, #0]
 80010b8:	f000 fae1 	bl	800167e <put_device_to_sleep>
 80010bc:	4603      	mov	r3, r0
 80010be:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 80010c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d106      	bne.n	80010d6 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 faa3 	bl	8001618 <write_power_mode>
 80010d2:	4603      	mov	r3, r0
 80010d4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f001 f94f 	bl	8002390 <null_ptr_check>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10e      	bne.n	800111c <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2201      	movs	r2, #1
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	20f4      	movs	r0, #244	; 0xf4
 8001106:	f7ff feba 	bl	8000e7e <bme280_get_regs>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	b2da      	uxtb	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 800111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001130:	23e0      	movs	r3, #224	; 0xe0
 8001132:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001134:	23b6      	movs	r3, #182	; 0xb6
 8001136:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f001 f929 	bl	8002390 <null_ptr_check>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10d      	bne.n	8001166 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800114a:	f107 010d 	add.w	r1, r7, #13
 800114e:	f107 000e 	add.w	r0, r7, #14
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f7ff fec2 	bl	8000ede <bme280_set_regs>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2002      	movs	r0, #2
 8001164:	4798      	blx	r3
	}

	return rslt;
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b08a      	sub	sp, #40	; 0x28
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f001 f8fb 	bl	8002390 <null_ptr_check>
 800119a:	4603      	mov	r3, r0
 800119c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80011a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d124      	bne.n	80011f2 <bme280_get_sensor_data+0x80>
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d021      	beq.n	80011f2 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80011ae:	f107 011c 	add.w	r1, r7, #28
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2208      	movs	r2, #8
 80011b6:	20f7      	movs	r0, #247	; 0xf7
 80011b8:	f7ff fe61 	bl	8000e7e <bme280_get_regs>
 80011bc:	4603      	mov	r3, r0
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 80011c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d116      	bne.n	80011f8 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80011ca:	f107 0210 	add.w	r2, r7, #16
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f815 	bl	8001204 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3310      	adds	r3, #16
 80011de:	f107 0110 	add.w	r1, r7, #16
 80011e2:	7bf8      	ldrb	r0, [r7, #15]
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	f000 f853 	bl	8001290 <bme280_compensate_data>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80011f0:	e002      	b.n	80011f8 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80011f2:	23ff      	movs	r3, #255	; 0xff
 80011f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 80011f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	031b      	lsls	r3, r3, #12
 8001214:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3301      	adds	r3, #1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3302      	adds	r3, #2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	b2db      	uxtb	r3, r3
 800122a:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	431a      	orrs	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	431a      	orrs	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3303      	adds	r3, #3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	031b      	lsls	r3, r3, #12
 8001242:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3304      	adds	r3, #4
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3305      	adds	r3, #5
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	b2db      	uxtb	r3, r3
 8001258:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	431a      	orrs	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	431a      	orrs	r2, r3
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3306      	adds	r3, #6
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3307      	adds	r3, #7
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	431a      	orrs	r2, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	609a      	str	r2, [r3, #8]
}
 8001284:	bf00      	nop
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	4603      	mov	r3, r0
 800129e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d033      	beq.n	8001312 <bme280_compensate_data+0x82>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d030      	beq.n	8001312 <bme280_compensate_data+0x82>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d02d      	beq.n	8001312 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80012d2:	6839      	ldr	r1, [r7, #0]
 80012d4:	68b8      	ldr	r0, [r7, #8]
 80012d6:	f000 fa1f 	bl	8001718 <compensate_temperature>
 80012da:	4602      	mov	r2, r0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d006      	beq.n	80012f8 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80012ea:	6839      	ldr	r1, [r7, #0]
 80012ec:	68b8      	ldr	r0, [r7, #8]
 80012ee:	f000 fa75 	bl	80017dc <compensate_pressure>
 80012f2:	4602      	mov	r2, r0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001302:	6839      	ldr	r1, [r7, #0]
 8001304:	68b8      	ldr	r0, [r7, #8]
 8001306:	f000 fe0d 	bl	8001f24 <compensate_humidity>
 800130a:	4602      	mov	r2, r0
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8001310:	e001      	b.n	8001316 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001312:	23ff      	movs	r3, #255	; 0xff
 8001314:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001316:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001330:	2301      	movs	r3, #1
 8001332:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	68b8      	ldr	r0, [r7, #8]
 8001342:	f000 f815 	bl	8001370 <set_osr_humidity_settings>
 8001346:	4603      	mov	r3, r0
 8001348:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d007      	beq.n	8001364 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f842 	bl	80013e4 <set_osr_press_temp_settings>
 8001360:	4603      	mov	r3, r0
 8001362:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001364:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800137a:	23f2      	movs	r3, #242	; 0xf2
 800137c:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	789b      	ldrb	r3, [r3, #2]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	b2db      	uxtb	r3, r3
 8001388:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800138a:	f107 010e 	add.w	r1, r7, #14
 800138e:	f107 000c 	add.w	r0, r7, #12
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2201      	movs	r2, #1
 8001396:	f7ff fda2 	bl	8000ede <bme280_set_regs>
 800139a:	4603      	mov	r3, r0
 800139c:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d118      	bne.n	80013d8 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80013a6:	23f4      	movs	r3, #244	; 0xf4
 80013a8:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80013aa:	7b38      	ldrb	r0, [r7, #12]
 80013ac:	f107 010d 	add.w	r1, r7, #13
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f7ff fd63 	bl	8000e7e <bme280_get_regs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80013bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80013c4:	f107 010d 	add.w	r1, r7, #13
 80013c8:	f107 000c 	add.w	r0, r7, #12
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f7ff fd85 	bl	8000ede <bme280_set_regs>
 80013d4:	4603      	mov	r3, r0
 80013d6:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80013d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80013f2:	23f4      	movs	r3, #244	; 0xf4
 80013f4:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80013f6:	7db8      	ldrb	r0, [r7, #22]
 80013f8:	f107 0115 	add.w	r1, r7, #21
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f7ff fd3d 	bl	8000e7e <bme280_get_regs>
 8001404:	4603      	mov	r3, r0
 8001406:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d11f      	bne.n	8001450 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800141a:	f107 0315 	add.w	r3, r7, #21
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f88e 	bl	8001542 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8001430:	f107 0315 	add.w	r3, r7, #21
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f8a0 	bl	800157c <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800143c:	f107 0115 	add.w	r1, r7, #21
 8001440:	f107 0016 	add.w	r0, r7, #22
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f7ff fd49 	bl	8000ede <bme280_set_regs>
 800144c:	4603      	mov	r3, r0
 800144e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001450:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800146a:	23f5      	movs	r3, #245	; 0xf5
 800146c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800146e:	7db8      	ldrb	r0, [r7, #22]
 8001470:	f107 0115 	add.w	r1, r7, #21
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f7ff fd01 	bl	8000e7e <bme280_get_regs>
 800147c:	4603      	mov	r3, r0
 800147e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001480:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d11f      	bne.n	80014c8 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8001492:	f107 0315 	add.w	r3, r7, #21
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f81b 	bl	80014d4 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80014a8:	f107 0315 	add.w	r3, r7, #21
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f82d 	bl	800150e <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80014b4:	f107 0115 	add.w	r1, r7, #21
 80014b8:	f107 0016 	add.w	r0, r7, #22
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f7ff fd0d 	bl	8000ede <bme280_set_regs>
 80014c4:	4603      	mov	r3, r0
 80014c6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80014c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	f023 031c 	bic.w	r3, r3, #28
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	78db      	ldrb	r3, [r3, #3]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	f003 031c 	and.w	r3, r3, #28
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	701a      	strb	r2, [r3, #0]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b25b      	sxtb	r3, r3
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	b25a      	sxtb	r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	791b      	ldrb	r3, [r3, #4]
 8001528:	015b      	lsls	r3, r3, #5
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b25b      	sxtb	r3, r3
 8001530:	b2da      	uxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	701a      	strb	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b25b      	sxtb	r3, r3
 8001552:	f023 031c 	bic.w	r3, r3, #28
 8001556:	b25a      	sxtb	r2, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	b25b      	sxtb	r3, r3
 8001560:	f003 031c 	and.w	r3, r3, #28
 8001564:	b25b      	sxtb	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b25b      	sxtb	r3, r3
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	701a      	strb	r2, [r3, #0]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b25b      	sxtb	r3, r3
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	b25a      	sxtb	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	015b      	lsls	r3, r3, #5
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b25b      	sxtb	r3, r3
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	701a      	strb	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3302      	adds	r3, #2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	109b      	asrs	r3, r3, #2
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3302      	adds	r3, #2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3303      	adds	r3, #3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	109b      	asrs	r3, r3, #2
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3303      	adds	r3, #3
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	095b      	lsrs	r3, r3, #5
 8001606:	b2da      	uxtb	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	711a      	strb	r2, [r3, #4]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001624:	23f4      	movs	r3, #244	; 0xf4
 8001626:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001628:	7bb8      	ldrb	r0, [r7, #14]
 800162a:	f107 010d 	add.w	r1, r7, #13
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2201      	movs	r2, #1
 8001632:	f7ff fc24 	bl	8000e7e <bme280_get_regs>
 8001636:	4603      	mov	r3, r0
 8001638:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d117      	bne.n	8001672 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001642:	7b7b      	ldrb	r3, [r7, #13]
 8001644:	b25b      	sxtb	r3, r3
 8001646:	f023 0303 	bic.w	r3, r3, #3
 800164a:	b25a      	sxtb	r2, r3
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	b25b      	sxtb	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800165e:	f107 010d 	add.w	r1, r7, #13
 8001662:	f107 000e 	add.w	r0, r7, #14
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	f7ff fc38 	bl	8000ede <bme280_set_regs>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001686:	f107 0110 	add.w	r1, r7, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2204      	movs	r2, #4
 800168e:	20f2      	movs	r0, #242	; 0xf2
 8001690:	f7ff fbf5 	bl	8000e7e <bme280_get_regs>
 8001694:	4603      	mov	r3, r0
 8001696:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001698:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d118      	bne.n	80016d2 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80016a0:	f107 0208 	add.w	r2, r7, #8
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff80 	bl	80015b0 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fd39 	bl	8001128 <bme280_soft_reset>
 80016b6:	4603      	mov	r3, r0
 80016b8:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80016ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d107      	bne.n	80016d2 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 f808 	bl	80016de <reload_device_settings>
 80016ce:	4603      	mov	r3, r0
 80016d0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80016d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	201f      	movs	r0, #31
 80016ee:	f7ff fe18 	bl	8001322 <set_osr_settings>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d106      	bne.n	800170c <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	201f      	movs	r0, #31
 8001704:	f7ff feaa 	bl	800145c <set_filter_standby_settings>
 8001708:	4603      	mov	r3, r0
 800170a:	73fb      	strb	r3, [r7, #15]

	return rslt;
 800170c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <compensate_temperature+0xc0>)
 8001724:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 8001726:	f242 1334 	movw	r3, #8500	; 0x2134
 800172a:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	08db      	lsrs	r3, r3, #3
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	8812      	ldrh	r2, [r2, #0]
 8001736:	0052      	lsls	r2, r2, #1
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001742:	461a      	mov	r2, r3
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	da01      	bge.n	8001752 <compensate_temperature+0x3a>
 800174e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001752:	12db      	asrs	r3, r3, #11
 8001754:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	8812      	ldrh	r2, [r2, #0]
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	fb03 f303 	mul.w	r3, r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	da01      	bge.n	8001772 <compensate_temperature+0x5a>
 800176e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001772:	131b      	asrs	r3, r3, #12
 8001774:	461a      	mov	r2, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800177c:	fb02 f303 	mul.w	r3, r2, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	da02      	bge.n	800178a <compensate_temperature+0x72>
 8001784:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001788:	333f      	adds	r3, #63	; 0x3f
 800178a:	139b      	asrs	r3, r3, #14
 800178c:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	441a      	add	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3380      	adds	r3, #128	; 0x80
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da00      	bge.n	80017aa <compensate_temperature+0x92>
 80017a8:	33ff      	adds	r3, #255	; 0xff
 80017aa:	121b      	asrs	r3, r3, #8
 80017ac:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	da02      	bge.n	80017bc <compensate_temperature+0xa4>
		temperature = temperature_min;
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e005      	b.n	80017c8 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dd01      	ble.n	80017c8 <compensate_temperature+0xb0>
		temperature = temperature_max;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	61fb      	str	r3, [r7, #28]

	return temperature;
 80017c8:	69fb      	ldr	r3, [r7, #28]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	fffff060 	.word	0xfffff060

080017dc <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80017dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e0:	b0ea      	sub	sp, #424	; 0x1a8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 80017e8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 80017ec:	4bbf      	ldr	r3, [pc, #764]	; (8001aec <compensate_pressure+0x310>)
 80017ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	uint32_t pressure_max = 11000000;
 80017f2:	4bbf      	ldr	r3, [pc, #764]	; (8001af0 <compensate_pressure+0x314>)
 80017f4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 80017f8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	17da      	asrs	r2, r3, #31
 8001800:	4698      	mov	r8, r3
 8001802:	4691      	mov	r9, r2
 8001804:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 8001808:	f149 3bff 	adc.w	fp, r9, #4294967295	; 0xffffffff
 800180c:	e9c7 ab64 	strd	sl, fp, [r7, #400]	; 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001810:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001814:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001818:	fb03 f102 	mul.w	r1, r3, r2
 800181c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001820:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001824:	fb02 f303 	mul.w	r3, r2, r3
 8001828:	18ca      	adds	r2, r1, r3
 800182a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800182e:	fba3 4503 	umull	r4, r5, r3, r3
 8001832:	1953      	adds	r3, r2, r5
 8001834:	461d      	mov	r5, r3
 8001836:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800183a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800183e:	b21b      	sxth	r3, r3
 8001840:	17da      	asrs	r2, r3, #31
 8001842:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001846:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800184a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800184e:	4603      	mov	r3, r0
 8001850:	fb03 f205 	mul.w	r2, r3, r5
 8001854:	460b      	mov	r3, r1
 8001856:	fb04 f303 	mul.w	r3, r4, r3
 800185a:	4413      	add	r3, r2
 800185c:	4602      	mov	r2, r0
 800185e:	fba4 1202 	umull	r1, r2, r4, r2
 8001862:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8001866:	460a      	mov	r2, r1
 8001868:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800186c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001870:	4413      	add	r3, r2
 8001872:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001876:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800187a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800187e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001882:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001886:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800188a:	b21b      	sxth	r3, r3
 800188c:	17da      	asrs	r2, r3, #31
 800188e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001892:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001896:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800189a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800189e:	462a      	mov	r2, r5
 80018a0:	fb02 f203 	mul.w	r2, r2, r3
 80018a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80018a8:	4621      	mov	r1, r4
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	441a      	add	r2, r3
 80018b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80018b4:	4621      	mov	r1, r4
 80018b6:	fba3 1301 	umull	r1, r3, r3, r1
 80018ba:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80018be:	460b      	mov	r3, r1
 80018c0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80018c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80018c8:	18d3      	adds	r3, r2, r3
 80018ca:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80018ce:	f04f 0000 	mov.w	r0, #0
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 80018da:	462b      	mov	r3, r5
 80018dc:	0459      	lsls	r1, r3, #17
 80018de:	4623      	mov	r3, r4
 80018e0:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80018e4:	4623      	mov	r3, r4
 80018e6:	0458      	lsls	r0, r3, #17
 80018e8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80018ec:	1814      	adds	r4, r2, r0
 80018ee:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80018f2:	414b      	adcs	r3, r1
 80018f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80018f8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80018fc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001900:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001904:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001908:	b21b      	sxth	r3, r3
 800190a:	17da      	asrs	r2, r3, #31
 800190c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001910:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8001914:	f04f 0000 	mov.w	r0, #0
 8001918:	f04f 0100 	mov.w	r1, #0
 800191c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001920:	00d9      	lsls	r1, r3, #3
 8001922:	2000      	movs	r0, #0
 8001924:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001928:	1814      	adds	r4, r2, r0
 800192a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800192e:	414b      	adcs	r3, r1
 8001930:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001934:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8001938:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 800193c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001940:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001944:	fb03 f102 	mul.w	r1, r3, r2
 8001948:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800194c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	18ca      	adds	r2, r1, r3
 8001956:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800195a:	fba3 1303 	umull	r1, r3, r3, r3
 800195e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001962:	460b      	mov	r3, r1
 8001964:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001968:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800196c:	18d3      	adds	r3, r2, r3
 800196e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001972:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001976:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800197a:	b21b      	sxth	r3, r3
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001982:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001986:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800198a:	462b      	mov	r3, r5
 800198c:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 8001990:	4642      	mov	r2, r8
 8001992:	fb02 f203 	mul.w	r2, r2, r3
 8001996:	464b      	mov	r3, r9
 8001998:	4621      	mov	r1, r4
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	4622      	mov	r2, r4
 80019a2:	4641      	mov	r1, r8
 80019a4:	fba2 1201 	umull	r1, r2, r2, r1
 80019a8:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 80019ac:	460a      	mov	r2, r1
 80019ae:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 80019b2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80019b6:	4413      	add	r3, r2
 80019b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80019bc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	da09      	bge.n	80019d8 <compensate_pressure+0x1fc>
 80019c4:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 80019c8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80019cc:	f143 0300 	adc.w	r3, r3, #0
 80019d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80019d4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	0a10      	lsrs	r0, r2, #8
 80019e2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019e6:	1219      	asrs	r1, r3, #8
 80019e8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80019ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	17da      	asrs	r2, r3, #31
 80019f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80019f8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80019fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a00:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001a04:	464a      	mov	r2, r9
 8001a06:	fb02 f203 	mul.w	r2, r2, r3
 8001a0a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a0e:	4644      	mov	r4, r8
 8001a10:	fb04 f303 	mul.w	r3, r4, r3
 8001a14:	441a      	add	r2, r3
 8001a16:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a1a:	4644      	mov	r4, r8
 8001a1c:	fba3 4304 	umull	r4, r3, r3, r4
 8001a20:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a24:	4623      	mov	r3, r4
 8001a26:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a2a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001a2e:	18d3      	adds	r3, r2, r3
 8001a30:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8001a40:	464c      	mov	r4, r9
 8001a42:	0323      	lsls	r3, r4, #12
 8001a44:	4644      	mov	r4, r8
 8001a46:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001a4a:	4644      	mov	r4, r8
 8001a4c:	0322      	lsls	r2, r4, #12
 8001a4e:	1884      	adds	r4, r0, r2
 8001a50:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001a54:	eb41 0303 	adc.w	r3, r1, r3
 8001a58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a5c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001a60:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a6c:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001a70:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8001a74:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001a78:	1884      	adds	r4, r0, r2
 8001a7a:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8001a7e:	eb41 0303 	adc.w	r3, r1, r3
 8001a82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a86:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a8a:	88db      	ldrh	r3, [r3, #6]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001a94:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001a98:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001a9c:	462b      	mov	r3, r5
 8001a9e:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001aa2:	4642      	mov	r2, r8
 8001aa4:	fb02 f203 	mul.w	r2, r2, r3
 8001aa8:	464b      	mov	r3, r9
 8001aaa:	4621      	mov	r1, r4
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4622      	mov	r2, r4
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	fba2 1201 	umull	r1, r2, r2, r1
 8001aba:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001abe:	460a      	mov	r2, r1
 8001ac0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ac4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001ac8:	4413      	add	r3, r2
 8001aca:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ace:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da0e      	bge.n	8001af4 <compensate_pressure+0x318>
 8001ad6:	1e51      	subs	r1, r2, #1
 8001ad8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001adc:	f143 0301 	adc.w	r3, r3, #1
 8001ae0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001ae4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ae8:	e004      	b.n	8001af4 <compensate_pressure+0x318>
 8001aea:	bf00      	nop
 8001aec:	002dc6c0 	.word	0x002dc6c0
 8001af0:	00a7d8c0 	.word	0x00a7d8c0
 8001af4:	f04f 0000 	mov.w	r0, #0
 8001af8:	f04f 0100 	mov.w	r1, #0
 8001afc:	1058      	asrs	r0, r3, #1
 8001afe:	17d9      	asrs	r1, r3, #31
 8001b00:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001b04:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	f000 81fc 	beq.w	8001f06 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001b0e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b1e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001b22:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8001b26:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001b2a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001b2e:	f04f 0000 	mov.w	r0, #0
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	07d9      	lsls	r1, r3, #31
 8001b38:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001b3c:	07d0      	lsls	r0, r2, #31
 8001b3e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001b42:	1a84      	subs	r4, r0, r2
 8001b44:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8001b48:	eb61 0303 	sbc.w	r3, r1, r3
 8001b4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001b50:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001b54:	4622      	mov	r2, r4
 8001b56:	462b      	mov	r3, r5
 8001b58:	1891      	adds	r1, r2, r2
 8001b5a:	67b9      	str	r1, [r7, #120]	; 0x78
 8001b5c:	415b      	adcs	r3, r3
 8001b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b60:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001b64:	4621      	mov	r1, r4
 8001b66:	1851      	adds	r1, r2, r1
 8001b68:	6739      	str	r1, [r7, #112]	; 0x70
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	414b      	adcs	r3, r1
 8001b6e:	677b      	str	r3, [r7, #116]	; 0x74
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	018b      	lsls	r3, r1, #6
 8001b80:	4641      	mov	r1, r8
 8001b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b86:	4641      	mov	r1, r8
 8001b88:	018a      	lsls	r2, r1, #6
 8001b8a:	4641      	mov	r1, r8
 8001b8c:	1889      	adds	r1, r1, r2
 8001b8e:	66b9      	str	r1, [r7, #104]	; 0x68
 8001b90:	4649      	mov	r1, r9
 8001b92:	eb43 0101 	adc.w	r1, r3, r1
 8001b96:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8001ba4:	4649      	mov	r1, r9
 8001ba6:	008b      	lsls	r3, r1, #2
 8001ba8:	4641      	mov	r1, r8
 8001baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bae:	4641      	mov	r1, r8
 8001bb0:	008a      	lsls	r2, r1, #2
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4622      	mov	r2, r4
 8001bba:	189b      	adds	r3, r3, r2
 8001bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	462a      	mov	r2, r5
 8001bc2:	eb42 0303 	adc.w	r3, r2, r3
 8001bc6:	667b      	str	r3, [r7, #100]	; 0x64
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001bd4:	4649      	mov	r1, r9
 8001bd6:	008b      	lsls	r3, r1, #2
 8001bd8:	4641      	mov	r1, r8
 8001bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bde:	4641      	mov	r1, r8
 8001be0:	008a      	lsls	r2, r1, #2
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	4603      	mov	r3, r0
 8001be8:	4622      	mov	r2, r4
 8001bea:	189b      	adds	r3, r3, r2
 8001bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	460a      	mov	r2, r1
 8001bf4:	eb42 0303 	adc.w	r3, r2, r3
 8001bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001bfc:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001c00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001c04:	f7fe ff1e 	bl	8000a44 <__aeabi_ldivmod>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001c10:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001c14:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	17da      	asrs	r2, r3, #31
 8001c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c20:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c24:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da08      	bge.n	8001c3e <compensate_pressure+0x462>
 8001c2c:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001c30:	1851      	adds	r1, r2, r1
 8001c32:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c34:	f143 0300 	adc.w	r3, r3, #0
 8001c38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c3e:	f04f 0000 	mov.w	r0, #0
 8001c42:	f04f 0100 	mov.w	r1, #0
 8001c46:	0b50      	lsrs	r0, r2, #13
 8001c48:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c4c:	1359      	asrs	r1, r3, #13
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001c56:	4629      	mov	r1, r5
 8001c58:	fb02 f001 	mul.w	r0, r2, r1
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	fb01 f103 	mul.w	r1, r1, r3
 8001c62:	4401      	add	r1, r0
 8001c64:	4620      	mov	r0, r4
 8001c66:	fba0 2302 	umull	r2, r3, r0, r2
 8001c6a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001c6e:	4613      	mov	r3, r2
 8001c70:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001c74:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001c78:	18cb      	adds	r3, r1, r3
 8001c7a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001c7e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	da08      	bge.n	8001c98 <compensate_pressure+0x4bc>
 8001c86:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001c8a:	1851      	adds	r1, r2, r1
 8001c8c:	6539      	str	r1, [r7, #80]	; 0x50
 8001c8e:	f143 0300 	adc.w	r3, r3, #0
 8001c92:	657b      	str	r3, [r7, #84]	; 0x54
 8001c94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c98:	f04f 0000 	mov.w	r0, #0
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	0b50      	lsrs	r0, r2, #13
 8001ca2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ca6:	1359      	asrs	r1, r3, #13
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	fb02 f001 	mul.w	r0, r2, r1
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	fb01 f103 	mul.w	r1, r1, r3
 8001cbc:	4401      	add	r1, r0
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	fba0 2302 	umull	r2, r3, r0, r2
 8001cc4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001cc8:	4613      	mov	r3, r2
 8001cca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001cce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001cd2:	18cb      	adds	r3, r1, r3
 8001cd4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001cd8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	da08      	bge.n	8001cf2 <compensate_pressure+0x516>
 8001ce0:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001ce4:	1851      	adds	r1, r2, r1
 8001ce6:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ce8:	f143 0300 	adc.w	r3, r3, #0
 8001cec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cf2:	f04f 0000 	mov.w	r0, #0
 8001cf6:	f04f 0100 	mov.w	r1, #0
 8001cfa:	0e50      	lsrs	r0, r2, #25
 8001cfc:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001d00:	1659      	asrs	r1, r3, #25
 8001d02:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001d06:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001d0a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	17da      	asrs	r2, r3, #31
 8001d12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d16:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001d1a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001d1e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001d22:	462a      	mov	r2, r5
 8001d24:	fb02 f203 	mul.w	r2, r2, r3
 8001d28:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	441a      	add	r2, r3
 8001d34:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001d38:	4621      	mov	r1, r4
 8001d3a:	fba3 1301 	umull	r1, r3, r3, r1
 8001d3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001d42:	460b      	mov	r3, r1
 8001d44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001d48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d4c:	18d3      	adds	r3, r2, r3
 8001d4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001d52:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	da07      	bge.n	8001d6a <compensate_pressure+0x58e>
 8001d5a:	4971      	ldr	r1, [pc, #452]	; (8001f20 <compensate_pressure+0x744>)
 8001d5c:	1851      	adds	r1, r2, r1
 8001d5e:	6439      	str	r1, [r7, #64]	; 0x40
 8001d60:	f143 0300 	adc.w	r3, r3, #0
 8001d64:	647b      	str	r3, [r7, #68]	; 0x44
 8001d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d6a:	f04f 0000 	mov.w	r0, #0
 8001d6e:	f04f 0100 	mov.w	r1, #0
 8001d72:	0cd0      	lsrs	r0, r2, #19
 8001d74:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001d78:	14d9      	asrs	r1, r3, #19
 8001d7a:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001d7e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001d82:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001d86:	1884      	adds	r4, r0, r2
 8001d88:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8001d8c:	eb41 0303 	adc.w	r3, r1, r3
 8001d90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d94:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001d98:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	1889      	adds	r1, r1, r2
 8001da0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001da4:	4629      	mov	r1, r5
 8001da6:	eb43 0101 	adc.w	r1, r3, r1
 8001daa:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001dae:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	da07      	bge.n	8001dc6 <compensate_pressure+0x5ea>
 8001db6:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001dba:	63b9      	str	r1, [r7, #56]	; 0x38
 8001dbc:	f143 0300 	adc.w	r3, r3, #0
 8001dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001dc6:	f04f 0000 	mov.w	r0, #0
 8001dca:	f04f 0100 	mov.w	r1, #0
 8001dce:	0a10      	lsrs	r0, r2, #8
 8001dd0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001dd4:	1219      	asrs	r1, r3, #8
 8001dd6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001dda:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	17da      	asrs	r2, r3, #31
 8001de2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001de6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001df6:	464c      	mov	r4, r9
 8001df8:	0123      	lsls	r3, r4, #4
 8001dfa:	4644      	mov	r4, r8
 8001dfc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001e00:	4644      	mov	r4, r8
 8001e02:	0122      	lsls	r2, r4, #4
 8001e04:	1884      	adds	r4, r0, r2
 8001e06:	633c      	str	r4, [r7, #48]	; 0x30
 8001e08:	eb41 0303 	adc.w	r3, r1, r3
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e0e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001e12:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8001e16:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001e1a:	0fd9      	lsrs	r1, r3, #31
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e20:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001e22:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001e26:	4621      	mov	r1, r4
 8001e28:	1889      	adds	r1, r1, r2
 8001e2a:	6239      	str	r1, [r7, #32]
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	eb43 0101 	adc.w	r1, r3, r1
 8001e32:	6279      	str	r1, [r7, #36]	; 0x24
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e40:	4621      	mov	r1, r4
 8001e42:	084a      	lsrs	r2, r1, #1
 8001e44:	4629      	mov	r1, r5
 8001e46:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	104b      	asrs	r3, r1, #1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	1894      	adds	r4, r2, r2
 8001e58:	61bc      	str	r4, [r7, #24]
 8001e5a:	415b      	adcs	r3, r3
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e62:	1814      	adds	r4, r2, r0
 8001e64:	613c      	str	r4, [r7, #16]
 8001e66:	414b      	adcs	r3, r1
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001e76:	464c      	mov	r4, r9
 8001e78:	0163      	lsls	r3, r4, #5
 8001e7a:	4644      	mov	r4, r8
 8001e7c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001e80:	4644      	mov	r4, r8
 8001e82:	0162      	lsls	r2, r4, #5
 8001e84:	4644      	mov	r4, r8
 8001e86:	18a4      	adds	r4, r4, r2
 8001e88:	60bc      	str	r4, [r7, #8]
 8001e8a:	464c      	mov	r4, r9
 8001e8c:	eb43 0404 	adc.w	r4, r3, r4
 8001e90:	60fc      	str	r4, [r7, #12]
 8001e92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e96:	4623      	mov	r3, r4
 8001e98:	181b      	adds	r3, r3, r0
 8001e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e9e:	462b      	mov	r3, r5
 8001ea0:	eb41 0303 	adc.w	r3, r1, r3
 8001ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ea8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	da07      	bge.n	8001ec0 <compensate_pressure+0x6e4>
 8001eb0:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 8001eb4:	6039      	str	r1, [r7, #0]
 8001eb6:	f143 0300 	adc.w	r3, r3, #0
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ec0:	f04f 0000 	mov.w	r0, #0
 8001ec4:	f04f 0100 	mov.w	r1, #0
 8001ec8:	09d0      	lsrs	r0, r2, #7
 8001eca:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001ece:	11d9      	asrs	r1, r3, #7
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

		if (pressure < pressure_min)
 8001eda:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001ede:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d204      	bcs.n	8001ef0 <compensate_pressure+0x714>
			pressure = pressure_min;
 8001ee6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001eea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001eee:	e00e      	b.n	8001f0e <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 8001ef0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001ef4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d908      	bls.n	8001f0e <compensate_pressure+0x732>
			pressure = pressure_max;
 8001efc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001f00:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f04:	e003      	b.n	8001f0e <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 8001f06:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001f0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	}

	return pressure;
 8001f0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f1e:	bf00      	nop
 8001f20:	0007ffff 	.word	0x0007ffff

08001f24 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b08b      	sub	sp, #44	; 0x2c
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 8001f2e:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8001f32:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001f3c:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	039b      	lsls	r3, r3, #14
 8001f44:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f4c:	051b      	lsls	r3, r3, #20
 8001f4e:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f56:	461a      	mov	r2, r3
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	1ad2      	subs	r2, r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da02      	bge.n	8001f78 <compensate_humidity+0x54>
 8001f72:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001f76:	337f      	adds	r3, #127	; 0x7f
 8001f78:	13db      	asrs	r3, r3, #15
 8001f7a:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001f82:	461a      	mov	r2, r3
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	da01      	bge.n	8001f92 <compensate_humidity+0x6e>
 8001f8e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001f92:	129b      	asrs	r3, r3, #10
 8001f94:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	7f1b      	ldrb	r3, [r3, #28]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	da01      	bge.n	8001faa <compensate_humidity+0x86>
 8001fa6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001faa:	12db      	asrs	r3, r3, #11
 8001fac:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	da01      	bge.n	8001fc2 <compensate_humidity+0x9e>
 8001fbe:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001fc2:	129b      	asrs	r3, r3, #10
 8001fc4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001fc8:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	fb02 f303 	mul.w	r3, r2, r3
 8001fd8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	da02      	bge.n	8001fe6 <compensate_humidity+0xc2>
 8001fe0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001fe4:	333f      	adds	r3, #63	; 0x3f
 8001fe6:	139b      	asrs	r3, r3, #14
 8001fe8:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da02      	bge.n	8002000 <compensate_humidity+0xdc>
 8001ffa:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001ffe:	337f      	adds	r3, #127	; 0x7f
 8002000:	13db      	asrs	r3, r3, #15
 8002002:	461a      	mov	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	da02      	bge.n	8002010 <compensate_humidity+0xec>
 800200a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800200e:	337f      	adds	r3, #127	; 0x7f
 8002010:	13db      	asrs	r3, r3, #15
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	da00      	bge.n	800201c <compensate_humidity+0xf8>
 800201a:	337f      	adds	r3, #127	; 0x7f
 800201c:	11db      	asrs	r3, r3, #7
 800201e:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	7e1b      	ldrb	r3, [r3, #24]
 8002024:	461a      	mov	r2, r3
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	da00      	bge.n	8002032 <compensate_humidity+0x10e>
 8002030:	330f      	adds	r3, #15
 8002032:	111b      	asrs	r3, r3, #4
 8002034:	425b      	negs	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002044:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800204c:	bfa8      	it	ge
 800204e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002052:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	da01      	bge.n	800205e <compensate_humidity+0x13a>
 800205a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800205e:	131b      	asrs	r3, r3, #12
 8002060:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 8002062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	429a      	cmp	r2, r3
 8002068:	d901      	bls.n	800206e <compensate_humidity+0x14a>
		humidity = humidity_max;
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002070:	4618      	mov	r0, r3
 8002072:	372c      	adds	r7, #44	; 0x2c
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002084:	2388      	movs	r3, #136	; 0x88
 8002086:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	f107 0310 	add.w	r3, r7, #16
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]
 800209e:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80020a0:	f107 010c 	add.w	r1, r7, #12
 80020a4:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	221a      	movs	r2, #26
 80020ac:	f7fe fee7 	bl	8000e7e <bme280_get_regs>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 80020b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d11d      	bne.n	80020fa <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f84a 	bl	800215e <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80020ca:	23e1      	movs	r3, #225	; 0xe1
 80020cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80020d0:	f107 010c 	add.w	r1, r7, #12
 80020d4:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2207      	movs	r2, #7
 80020dc:	f7fe fecf 	bl	8000e7e <bme280_get_regs>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80020e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d105      	bne.n	80020fa <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f8e1 	bl	80022bc <parse_humidity_calib_data>
		}
	}

	return rslt;
 80020fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3728      	adds	r7, #40	; 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8002106:	b480      	push	{r7}
 8002108:	b087      	sub	sp, #28
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8002114:	2301      	movs	r3, #1
 8002116:	75fb      	strb	r3, [r7, #23]
 8002118:	e016      	b.n	8002148 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800211a:	7dfb      	ldrb	r3, [r7, #23]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	441a      	add	r2, r3
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	3b01      	subs	r3, #1
 8002126:	68b9      	ldr	r1, [r7, #8]
 8002128:	440b      	add	r3, r1
 800212a:	7812      	ldrb	r2, [r2, #0]
 800212c:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 800212e:	7dfb      	ldrb	r3, [r7, #23]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	441a      	add	r2, r3
 8002134:	7dfb      	ldrb	r3, [r7, #23]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4619      	mov	r1, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	440b      	add	r3, r1
 800213e:	7812      	ldrb	r2, [r2, #0]
 8002140:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8002142:	7dfb      	ldrb	r3, [r7, #23]
 8002144:	3301      	adds	r3, #1
 8002146:	75fb      	strb	r3, [r7, #23]
 8002148:	7dfa      	ldrb	r2, [r7, #23]
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	429a      	cmp	r2, r3
 800214e:	d3e4      	bcc.n	800211a <interleave_reg_addr+0x14>
	}
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	371c      	adds	r7, #28
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	3310      	adds	r3, #16
 800216c:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3301      	adds	r3, #1
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	b21a      	sxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b21b      	sxth	r3, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	b21b      	sxth	r3, r3
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3303      	adds	r3, #3
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b21a      	sxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3302      	adds	r3, #2
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b21b      	sxth	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	b21a      	sxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3305      	adds	r3, #5
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3307      	adds	r3, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3306      	adds	r3, #6
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3309      	adds	r3, #9
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3308      	adds	r3, #8
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	330b      	adds	r3, #11
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	330a      	adds	r3, #10
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b21b      	sxth	r3, r3
 8002204:	4313      	orrs	r3, r2
 8002206:	b21a      	sxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	330d      	adds	r3, #13
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	b21a      	sxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	330c      	adds	r3, #12
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b21b      	sxth	r3, r3
 800221e:	4313      	orrs	r3, r2
 8002220:	b21a      	sxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	330f      	adds	r3, #15
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b21a      	sxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	330e      	adds	r3, #14
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b21b      	sxth	r3, r3
 8002238:	4313      	orrs	r3, r2
 800223a:	b21a      	sxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3311      	adds	r3, #17
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b21a      	sxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3310      	adds	r3, #16
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b21b      	sxth	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b21a      	sxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3313      	adds	r3, #19
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b21a      	sxth	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3312      	adds	r3, #18
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b21b      	sxth	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	b21a      	sxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3315      	adds	r3, #21
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	b21a      	sxth	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3314      	adds	r3, #20
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b21b      	sxth	r3, r3
 8002286:	4313      	orrs	r3, r2
 8002288:	b21a      	sxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3317      	adds	r3, #23
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	b21a      	sxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3316      	adds	r3, #22
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b21b      	sxth	r3, r3
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b21a      	sxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7e5a      	ldrb	r2, [r3, #25]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	761a      	strb	r2, [r3, #24]

}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	3310      	adds	r3, #16
 80022ca:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3301      	adds	r3, #1
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	b21b      	sxth	r3, r3
 80022dc:	4313      	orrs	r3, r2
 80022de:	b21a      	sxth	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	789a      	ldrb	r2, [r3, #2]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3303      	adds	r3, #3
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	b21b      	sxth	r3, r3
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800230a:	8a7a      	ldrh	r2, [r7, #18]
 800230c:	8a3b      	ldrh	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	b21a      	sxth	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3305      	adds	r3, #5
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b25b      	sxtb	r3, r3
 800231e:	b29b      	uxth	r3, r3
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	b29b      	uxth	r3, r3
 8002324:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	b2db      	uxtb	r3, r3
 8002330:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002332:	89fa      	ldrh	r2, [r7, #14]
 8002334:	89bb      	ldrh	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	b21a      	sxth	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3306      	adds	r3, #6
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b25a      	sxtb	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800234c:	bf00      	nop
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	460a      	mov	r2, r1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	4613      	mov	r3, r2
 8002366:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 800236c:	79fa      	ldrb	r2, [r7, #7]
 800236e:	79bb      	ldrb	r3, [r7, #6]
 8002370:	4013      	ands	r3, r2
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e001      	b.n	8002382 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <null_ptr_check+0x26>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <null_ptr_check+0x26>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <null_ptr_check+0x26>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80023b6:	23ff      	movs	r3, #255	; 0xff
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	e001      	b.n	80023c0 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80023c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <user_i2c_read>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	603a      	str	r2, [r7, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
 80023de:	460b      	mov	r3, r1
 80023e0:	71bb      	strb	r3, [r7, #6]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	b299      	uxth	r1, r3
 80023ee:	1dba      	adds	r2, r7, #6
 80023f0:	230a      	movs	r3, #10
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2301      	movs	r3, #1
 80023f6:	4811      	ldr	r0, [pc, #68]	; (800243c <user_i2c_read+0x6c>)
 80023f8:	f001 f824 	bl	8003444 <HAL_I2C_Master_Transmit>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <user_i2c_read+0x38>
 8002402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002406:	e014      	b.n	8002432 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	b21b      	sxth	r3, r3
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	b21b      	sxth	r3, r3
 8002414:	b299      	uxth	r1, r3
 8002416:	88bb      	ldrh	r3, [r7, #4]
 8002418:	220a      	movs	r2, #10
 800241a:	9200      	str	r2, [sp, #0]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	4807      	ldr	r0, [pc, #28]	; (800243c <user_i2c_read+0x6c>)
 8002420:	f001 f90e 	bl	8003640 <HAL_I2C_Master_Receive>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <user_i2c_read+0x60>
 800242a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800242e:	e000      	b.n	8002432 <user_i2c_read+0x62>

  return 0;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000008c 	.word	0x2000008c

08002440 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fbff 	bl	8002c4c <HAL_Delay>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af02      	add	r7, sp, #8
 800245e:	603a      	str	r2, [r7, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
 8002466:	460b      	mov	r3, r1
 8002468:	71bb      	strb	r3, [r7, #6]
 800246a:	4613      	mov	r3, r2
 800246c:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 800246e:	88bb      	ldrh	r3, [r7, #4]
 8002470:	3301      	adds	r3, #1
 8002472:	4618      	mov	r0, r3
 8002474:	f003 f80c 	bl	8005490 <malloc>
 8002478:	4603      	mov	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 800247c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3301      	adds	r3, #1
 8002488:	88ba      	ldrh	r2, [r7, #4]
 800248a:	6839      	ldr	r1, [r7, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f003 f80f 	bl	80054b0 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	b29b      	uxth	r3, r3
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	b299      	uxth	r1, r3
 800249a:	88bb      	ldrh	r3, [r7, #4]
 800249c:	3301      	adds	r3, #1
 800249e:	b29b      	uxth	r3, r3
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024a4:	9200      	str	r2, [sp, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4808      	ldr	r0, [pc, #32]	; (80024cc <user_i2c_write+0x74>)
 80024aa:	f000 ffcb 	bl	8003444 <HAL_I2C_Master_Transmit>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <user_i2c_write+0x62>
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024b8:	e003      	b.n	80024c2 <user_i2c_write+0x6a>

  free(buf);
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f002 fff0 	bl	80054a0 <free>
  return 0;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2000008c 	.word	0x2000008c

080024d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d4:	f000 fb48 	bl	8002b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d8:	f000 f8b8 	bl	800264c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024dc:	f000 f97c 	bl	80027d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80024e0:	f000 f950 	bl	8002784 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80024e4:	f000 f920 	bl	8002728 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* BME280 init */
  dev.dev_id = BME280_I2C_ADDR_SEC;
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <main+0x148>)
 80024ea:	2277      	movs	r2, #119	; 0x77
 80024ec:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 80024ee:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <main+0x148>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 80024f4:	4b48      	ldr	r3, [pc, #288]	; (8002618 <main+0x148>)
 80024f6:	4a49      	ldr	r2, [pc, #292]	; (800261c <main+0x14c>)
 80024f8:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <main+0x148>)
 80024fc:	4a48      	ldr	r2, [pc, #288]	; (8002620 <main+0x150>)
 80024fe:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 8002500:	4b45      	ldr	r3, [pc, #276]	; (8002618 <main+0x148>)
 8002502:	4a48      	ldr	r2, [pc, #288]	; (8002624 <main+0x154>)
 8002504:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
 8002506:	4844      	ldr	r0, [pc, #272]	; (8002618 <main+0x148>)
 8002508:	f7fe fc6e 	bl	8000de8 <bme280_init>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	4b45      	ldr	r3, [pc, #276]	; (8002628 <main+0x158>)
 8002512:	701a      	strb	r2, [r3, #0]

  /* BME280 settings */
  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002514:	4b40      	ldr	r3, [pc, #256]	; (8002618 <main+0x148>)
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 800251c:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <main+0x148>)
 800251e:	2205      	movs	r2, #5
 8002520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002524:	4b3c      	ldr	r3, [pc, #240]	; (8002618 <main+0x148>)
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 800252c:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <main+0x148>)
 800252e:	2204      	movs	r2, #4
 8002530:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8002534:	4938      	ldr	r1, [pc, #224]	; (8002618 <main+0x148>)
 8002536:	200f      	movs	r0, #15
 8002538:	f7fe fd4a 	bl	8000fd0 <bme280_set_sensor_settings>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	4b39      	ldr	r3, [pc, #228]	; (8002628 <main+0x158>)
 8002542:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8002544:	4934      	ldr	r1, [pc, #208]	; (8002618 <main+0x148>)
 8002546:	2001      	movs	r0, #1
 8002548:	f7fe fd97 	bl	800107a <bme280_set_sensor_mode>
 800254c:	4603      	mov	r3, r0
 800254e:	461a      	mov	r2, r3
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <main+0x158>)
 8002552:	701a      	strb	r2, [r3, #0]
	  dev.delay_ms(40);
 8002554:	4b30      	ldr	r3, [pc, #192]	; (8002618 <main+0x148>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2028      	movs	r0, #40	; 0x28
 800255a:	4798      	blx	r3
	  /*Get Data */
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 800255c:	4a2e      	ldr	r2, [pc, #184]	; (8002618 <main+0x148>)
 800255e:	4933      	ldr	r1, [pc, #204]	; (800262c <main+0x15c>)
 8002560:	2007      	movs	r0, #7
 8002562:	f7fe fe06 	bl	8001172 <bme280_get_sensor_data>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <main+0x158>)
 800256c:	701a      	strb	r2, [r3, #0]
	  if(rslt == BME280_OK)
 800256e:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <main+0x158>)
 8002570:	f993 3000 	ldrsb.w	r3, [r3]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d139      	bne.n	80025ec <main+0x11c>
	  {
		temperature = comp_data.temperature / 100.0;
 8002578:	4b2c      	ldr	r3, [pc, #176]	; (800262c <main+0x15c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fd ff95 	bl	80004ac <__aeabi_i2d>
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <main+0x160>)
 8002588:	f7fe f924 	bl	80007d4 <__aeabi_ddiv>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	f7fe fa06 	bl	80009a4 <__aeabi_d2f>
 8002598:	4603      	mov	r3, r0
 800259a:	4a26      	ldr	r2, [pc, #152]	; (8002634 <main+0x164>)
 800259c:	6013      	str	r3, [r2, #0]
		humidity = comp_data.humidity / 1024.0;
 800259e:	4b23      	ldr	r3, [pc, #140]	; (800262c <main+0x15c>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ff72 	bl	800048c <__aeabi_ui2d>
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <main+0x168>)
 80025ae:	f7fe f911 	bl	80007d4 <__aeabi_ddiv>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe f9f3 	bl	80009a4 <__aeabi_d2f>
 80025be:	4603      	mov	r3, r0
 80025c0:	4a1e      	ldr	r2, [pc, #120]	; (800263c <main+0x16c>)
 80025c2:	6013      	str	r3, [r2, #0]
		pressure = comp_data.pressure / 10000.0;
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <main+0x15c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd ff5f 	bl	800048c <__aeabi_ui2d>
 80025ce:	a310      	add	r3, pc, #64	; (adr r3, 8002610 <main+0x140>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	f7fe f8fe 	bl	80007d4 <__aeabi_ddiv>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f7fe f9e0 	bl	80009a4 <__aeabi_d2f>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4a16      	ldr	r2, [pc, #88]	; (8002640 <main+0x170>)
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e7ab      	b.n	8002544 <main+0x74>
	  } else {
		  if (HAL_UART_Transmit(&huart2, "Error ", 6, 100)) {
 80025ec:	2364      	movs	r3, #100	; 0x64
 80025ee:	2206      	movs	r2, #6
 80025f0:	4914      	ldr	r1, [pc, #80]	; (8002644 <main+0x174>)
 80025f2:	4815      	ldr	r0, [pc, #84]	; (8002648 <main+0x178>)
 80025f4:	f002 fbad 	bl	8004d52 <HAL_UART_Transmit>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0a2      	beq.n	8002544 <main+0x74>
			  Error_Handler();
 80025fe:	f000 f959 	bl	80028b4 <Error_Handler>
		  	  HAL_Delay(500);
 8002602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002606:	f000 fb21 	bl	8002c4c <HAL_Delay>
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 800260a:	e79b      	b.n	8002544 <main+0x74>
 800260c:	f3af 8000 	nop.w
 8002610:	00000000 	.word	0x00000000
 8002614:	40c38800 	.word	0x40c38800
 8002618:	20000130 	.word	0x20000130
 800261c:	080023d1 	.word	0x080023d1
 8002620:	08002459 	.word	0x08002459
 8002624:	08002441 	.word	0x08002441
 8002628:	2000017c 	.word	0x2000017c
 800262c:	20000170 	.word	0x20000170
 8002630:	40590000 	.word	0x40590000
 8002634:	20000124 	.word	0x20000124
 8002638:	40900000 	.word	0x40900000
 800263c:	20000128 	.word	0x20000128
 8002640:	2000012c 	.word	0x2000012c
 8002644:	080056f0 	.word	0x080056f0
 8002648:	200000e0 	.word	0x200000e0

0800264c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b094      	sub	sp, #80	; 0x50
 8002650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	2234      	movs	r2, #52	; 0x34
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f002 ff36 	bl	80054cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002660:	f107 0308 	add.w	r3, r7, #8
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <SystemClock_Config+0xd4>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	4a29      	ldr	r2, [pc, #164]	; (8002720 <SystemClock_Config+0xd4>)
 800267a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267e:	6413      	str	r3, [r2, #64]	; 0x40
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <SystemClock_Config+0xd4>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800268c:	2300      	movs	r3, #0
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <SystemClock_Config+0xd8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002698:	4a22      	ldr	r2, [pc, #136]	; (8002724 <SystemClock_Config+0xd8>)
 800269a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b20      	ldr	r3, [pc, #128]	; (8002724 <SystemClock_Config+0xd8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026ac:	2302      	movs	r3, #2
 80026ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026b0:	2301      	movs	r3, #1
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026b4:	2310      	movs	r3, #16
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026b8:	2302      	movs	r3, #2
 80026ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026bc:	2300      	movs	r3, #0
 80026be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80026c0:	2310      	movs	r3, #16
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80026c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80026c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80026ca:	2304      	movs	r3, #4
 80026cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80026ce:	2302      	movs	r3, #2
 80026d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026d2:	2302      	movs	r3, #2
 80026d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 f84e 	bl	800477c <HAL_RCC_OscConfig>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80026e6:	f000 f8e5 	bl	80028b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ea:	230f      	movs	r3, #15
 80026ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ee:	2302      	movs	r3, #2
 80026f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002700:	f107 0308 	add.w	r3, r7, #8
 8002704:	2102      	movs	r1, #2
 8002706:	4618      	mov	r0, r3
 8002708:	f001 fcee 	bl	80040e8 <HAL_RCC_ClockConfig>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002712:	f000 f8cf 	bl	80028b4 <Error_Handler>
  }
}
 8002716:	bf00      	nop
 8002718:	3750      	adds	r7, #80	; 0x50
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	40007000 	.word	0x40007000

08002728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <MX_I2C1_Init+0x50>)
 800272e:	4a13      	ldr	r2, [pc, #76]	; (800277c <MX_I2C1_Init+0x54>)
 8002730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_I2C1_Init+0x50>)
 8002734:	4a12      	ldr	r2, [pc, #72]	; (8002780 <MX_I2C1_Init+0x58>)
 8002736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_I2C1_Init+0x50>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_I2C1_Init+0x50>)
 8002740:	2200      	movs	r2, #0
 8002742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_I2C1_Init+0x50>)
 8002746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800274a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <MX_I2C1_Init+0x50>)
 800274e:	2200      	movs	r2, #0
 8002750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_I2C1_Init+0x50>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <MX_I2C1_Init+0x50>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_I2C1_Init+0x50>)
 8002760:	2200      	movs	r2, #0
 8002762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002764:	4804      	ldr	r0, [pc, #16]	; (8002778 <MX_I2C1_Init+0x50>)
 8002766:	f000 fd29 	bl	80031bc <HAL_I2C_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002770:	f000 f8a0 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	2000008c 	.word	0x2000008c
 800277c:	40005400 	.word	0x40005400
 8002780:	000186a0 	.word	0x000186a0

08002784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 800278a:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <MX_USART2_UART_Init+0x50>)
 800278c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 8002790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a8:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027aa:	220c      	movs	r2, #12
 80027ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ba:	4805      	ldr	r0, [pc, #20]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027bc:	f002 fa7c 	bl	8004cb8 <HAL_UART_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027c6:	f000 f875 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200000e0 	.word	0x200000e0
 80027d4:	40004400 	.word	0x40004400

080027d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	60da      	str	r2, [r3, #12]
 80027ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <MX_GPIO_Init+0xd0>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a2c      	ldr	r2, [pc, #176]	; (80028a8 <MX_GPIO_Init+0xd0>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <MX_GPIO_Init+0xd0>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <MX_GPIO_Init+0xd0>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <MX_GPIO_Init+0xd0>)
 8002814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <MX_GPIO_Init+0xd0>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <MX_GPIO_Init+0xd0>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <MX_GPIO_Init+0xd0>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <MX_GPIO_Init+0xd0>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <MX_GPIO_Init+0xd0>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <MX_GPIO_Init+0xd0>)
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <MX_GPIO_Init+0xd0>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800285e:	2200      	movs	r2, #0
 8002860:	2120      	movs	r1, #32
 8002862:	4812      	ldr	r0, [pc, #72]	; (80028ac <MX_GPIO_Init+0xd4>)
 8002864:	f000 fc90 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800286c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800286e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	4619      	mov	r1, r3
 800287e:	480c      	ldr	r0, [pc, #48]	; (80028b0 <MX_GPIO_Init+0xd8>)
 8002880:	f000 faee 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002884:	2320      	movs	r3, #32
 8002886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002888:	2301      	movs	r3, #1
 800288a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	4619      	mov	r1, r3
 800289a:	4804      	ldr	r0, [pc, #16]	; (80028ac <MX_GPIO_Init+0xd4>)
 800289c:	f000 fae0 	bl	8002e60 <HAL_GPIO_Init>

}
 80028a0:	bf00      	nop
 80028a2:	3728      	adds	r7, #40	; 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40020800 	.word	0x40020800

080028b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b8:	b672      	cpsid	i
}
 80028ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028bc:	e7fe      	b.n	80028bc <Error_Handler+0x8>
	...

080028c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_MspInit+0x4c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_MspInit+0x4c>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_MspInit+0x4c>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_MspInit+0x4c>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_MspInit+0x4c>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_MspInit+0x4c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028fe:	2007      	movs	r0, #7
 8002900:	f000 fa7a 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_I2C_MspInit+0x84>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d12c      	bne.n	800298c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	4b18      	ldr	r3, [pc, #96]	; (8002998 <HAL_I2C_MspInit+0x88>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_I2C_MspInit+0x88>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_I2C_MspInit+0x88>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800294e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002954:	2312      	movs	r3, #18
 8002956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295c:	2303      	movs	r3, #3
 800295e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002960:	2304      	movs	r3, #4
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	4619      	mov	r1, r3
 800296a:	480c      	ldr	r0, [pc, #48]	; (800299c <HAL_I2C_MspInit+0x8c>)
 800296c:	f000 fa78 	bl	8002e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_I2C_MspInit+0x88>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4a07      	ldr	r2, [pc, #28]	; (8002998 <HAL_I2C_MspInit+0x88>)
 800297a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800297e:	6413      	str	r3, [r2, #64]	; 0x40
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_I2C_MspInit+0x88>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800298c:	bf00      	nop
 800298e:	3728      	adds	r7, #40	; 0x28
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40005400 	.word	0x40005400
 8002998:	40023800 	.word	0x40023800
 800299c:	40020400 	.word	0x40020400

080029a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <HAL_UART_MspInit+0x84>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d12b      	bne.n	8002a1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <HAL_UART_MspInit+0x88>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_UART_MspInit+0x88>)
 80029cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_UART_MspInit+0x88>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_UART_MspInit+0x88>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <HAL_UART_MspInit+0x88>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <HAL_UART_MspInit+0x88>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029fa:	230c      	movs	r3, #12
 80029fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a06:	2303      	movs	r3, #3
 8002a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	4805      	ldr	r0, [pc, #20]	; (8002a2c <HAL_UART_MspInit+0x8c>)
 8002a16:	f000 fa23 	bl	8002e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a1a:	bf00      	nop
 8002a1c:	3728      	adds	r7, #40	; 0x28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40004400 	.word	0x40004400
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40020000 	.word	0x40020000

08002a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <NMI_Handler+0x4>

08002a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3a:	e7fe      	b.n	8002a3a <HardFault_Handler+0x4>

08002a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a40:	e7fe      	b.n	8002a40 <MemManage_Handler+0x4>

08002a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a46:	e7fe      	b.n	8002a46 <BusFault_Handler+0x4>

08002a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <UsageFault_Handler+0x4>

08002a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a7c:	f000 f8c6 	bl	8002c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <_sbrk+0x5c>)
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <_sbrk+0x60>)
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a98:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <_sbrk+0x64>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <_sbrk+0x64>)
 8002aa2:	4a12      	ldr	r2, [pc, #72]	; (8002aec <_sbrk+0x68>)
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <_sbrk+0x64>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d207      	bcs.n	8002ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ab4:	f002 fcc2 	bl	800543c <__errno>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	220c      	movs	r2, #12
 8002abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ac2:	e009      	b.n	8002ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <_sbrk+0x64>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <_sbrk+0x64>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <_sbrk+0x64>)
 8002ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20020000 	.word	0x20020000
 8002ae4:	00000400 	.word	0x00000400
 8002ae8:	20000180 	.word	0x20000180
 8002aec:	20000198 	.word	0x20000198

08002af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <SystemInit+0x20>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <SystemInit+0x20>)
 8002afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b18:	480d      	ldr	r0, [pc, #52]	; (8002b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b1a:	490e      	ldr	r1, [pc, #56]	; (8002b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b1c:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b20:	e002      	b.n	8002b28 <LoopCopyDataInit>

08002b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b26:	3304      	adds	r3, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b2c:	d3f9      	bcc.n	8002b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b30:	4c0b      	ldr	r4, [pc, #44]	; (8002b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b34:	e001      	b.n	8002b3a <LoopFillZerobss>

08002b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b38:	3204      	adds	r2, #4

08002b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b3c:	d3fb      	bcc.n	8002b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b3e:	f7ff ffd7 	bl	8002af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b42:	f002 fc81 	bl	8005448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b46:	f7ff fcc3 	bl	80024d0 <main>
  bx  lr    
 8002b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002b58:	08005720 	.word	0x08005720
  ldr r2, =_sbss
 8002b5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002b60:	20000198 	.word	0x20000198

08002b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b64:	e7fe      	b.n	8002b64 <ADC_IRQHandler>
	...

08002b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_Init+0x40>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <HAL_Init+0x40>)
 8002b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_Init+0x40>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <HAL_Init+0x40>)
 8002b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a07      	ldr	r2, [pc, #28]	; (8002ba8 <HAL_Init+0x40>)
 8002b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b90:	2003      	movs	r0, #3
 8002b92:	f000 f931 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f000 f808 	bl	8002bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b9c:	f7ff fe90 	bl	80028c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023c00 	.word	0x40023c00

08002bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_InitTick+0x54>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_InitTick+0x58>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f93b 	bl	8002e46 <HAL_SYSTICK_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e00e      	b.n	8002bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b0f      	cmp	r3, #15
 8002bde:	d80a      	bhi.n	8002bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002be0:	2200      	movs	r2, #0
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002be8:	f000 f911 	bl	8002e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bec:	4a06      	ldr	r2, [pc, #24]	; (8002c08 <HAL_InitTick+0x5c>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e000      	b.n	8002bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000000 	.word	0x20000000
 8002c04:	20000008 	.word	0x20000008
 8002c08:	20000004 	.word	0x20000004

08002c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_IncTick+0x20>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_IncTick+0x24>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <HAL_IncTick+0x24>)
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000008 	.word	0x20000008
 8002c30:	20000184 	.word	0x20000184

08002c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return uwTick;
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_GetTick+0x14>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000184 	.word	0x20000184

08002c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c54:	f7ff ffee 	bl	8002c34 <HAL_GetTick>
 8002c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c64:	d005      	beq.n	8002c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_Delay+0x44>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c72:	bf00      	nop
 8002c74:	f7ff ffde 	bl	8002c34 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d8f7      	bhi.n	8002c74 <HAL_Delay+0x28>
  {
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000008 	.word	0x20000008

08002c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc6:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	60d3      	str	r3, [r2, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	f003 0307 	and.w	r3, r3, #7
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	6039      	str	r1, [r7, #0]
 8002d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	db0a      	blt.n	8002d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	490c      	ldr	r1, [pc, #48]	; (8002d44 <__NVIC_SetPriority+0x4c>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d20:	e00a      	b.n	8002d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4908      	ldr	r1, [pc, #32]	; (8002d48 <__NVIC_SetPriority+0x50>)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	3b04      	subs	r3, #4
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	440b      	add	r3, r1
 8002d36:	761a      	strb	r2, [r3, #24]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000e100 	.word	0xe000e100
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	; 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f1c3 0307 	rsb	r3, r3, #7
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	bf28      	it	cs
 8002d6a:	2304      	movcs	r3, #4
 8002d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d902      	bls.n	8002d7c <NVIC_EncodePriority+0x30>
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3b03      	subs	r3, #3
 8002d7a:	e000      	b.n	8002d7e <NVIC_EncodePriority+0x32>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	401a      	ands	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	43d9      	mvns	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	4313      	orrs	r3, r2
         );
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3724      	adds	r7, #36	; 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc4:	d301      	bcc.n	8002dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00f      	b.n	8002dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <SysTick_Config+0x40>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd2:	210f      	movs	r1, #15
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd8:	f7ff ff8e 	bl	8002cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <SysTick_Config+0x40>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <SysTick_Config+0x40>)
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000e010 	.word	0xe000e010

08002df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff ff47 	bl	8002c94 <__NVIC_SetPriorityGrouping>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e20:	f7ff ff5c 	bl	8002cdc <__NVIC_GetPriorityGrouping>
 8002e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff ff8e 	bl	8002d4c <NVIC_EncodePriority>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff5d 	bl	8002cf8 <__NVIC_SetPriority>
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ffb0 	bl	8002db4 <SysTick_Config>
 8002e54:	4603      	mov	r3, r0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	e165      	b.n	8003148 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	f040 8154 	bne.w	8003142 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d005      	beq.n	8002eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d130      	bne.n	8002f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee8:	2201      	movs	r2, #1
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 0201 	and.w	r2, r3, #1
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d017      	beq.n	8002f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d123      	bne.n	8002fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	08da      	lsrs	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3208      	adds	r2, #8
 8002f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	220f      	movs	r2, #15
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	08da      	lsrs	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3208      	adds	r2, #8
 8002f9e:	69b9      	ldr	r1, [r7, #24]
 8002fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	2203      	movs	r2, #3
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0203 	and.w	r2, r3, #3
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80ae 	beq.w	8003142 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	4b5d      	ldr	r3, [pc, #372]	; (8003160 <HAL_GPIO_Init+0x300>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	4a5c      	ldr	r2, [pc, #368]	; (8003160 <HAL_GPIO_Init+0x300>)
 8002ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff6:	4b5a      	ldr	r3, [pc, #360]	; (8003160 <HAL_GPIO_Init+0x300>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003002:	4a58      	ldr	r2, [pc, #352]	; (8003164 <HAL_GPIO_Init+0x304>)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	3302      	adds	r3, #2
 800300a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	220f      	movs	r2, #15
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4f      	ldr	r2, [pc, #316]	; (8003168 <HAL_GPIO_Init+0x308>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d025      	beq.n	800307a <HAL_GPIO_Init+0x21a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a4e      	ldr	r2, [pc, #312]	; (800316c <HAL_GPIO_Init+0x30c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01f      	beq.n	8003076 <HAL_GPIO_Init+0x216>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4d      	ldr	r2, [pc, #308]	; (8003170 <HAL_GPIO_Init+0x310>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d019      	beq.n	8003072 <HAL_GPIO_Init+0x212>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4c      	ldr	r2, [pc, #304]	; (8003174 <HAL_GPIO_Init+0x314>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <HAL_GPIO_Init+0x20e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4b      	ldr	r2, [pc, #300]	; (8003178 <HAL_GPIO_Init+0x318>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00d      	beq.n	800306a <HAL_GPIO_Init+0x20a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4a      	ldr	r2, [pc, #296]	; (800317c <HAL_GPIO_Init+0x31c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d007      	beq.n	8003066 <HAL_GPIO_Init+0x206>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a49      	ldr	r2, [pc, #292]	; (8003180 <HAL_GPIO_Init+0x320>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_GPIO_Init+0x202>
 800305e:	2306      	movs	r3, #6
 8003060:	e00c      	b.n	800307c <HAL_GPIO_Init+0x21c>
 8003062:	2307      	movs	r3, #7
 8003064:	e00a      	b.n	800307c <HAL_GPIO_Init+0x21c>
 8003066:	2305      	movs	r3, #5
 8003068:	e008      	b.n	800307c <HAL_GPIO_Init+0x21c>
 800306a:	2304      	movs	r3, #4
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x21c>
 800306e:	2303      	movs	r3, #3
 8003070:	e004      	b.n	800307c <HAL_GPIO_Init+0x21c>
 8003072:	2302      	movs	r3, #2
 8003074:	e002      	b.n	800307c <HAL_GPIO_Init+0x21c>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_GPIO_Init+0x21c>
 800307a:	2300      	movs	r3, #0
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f002 0203 	and.w	r2, r2, #3
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	4093      	lsls	r3, r2
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800308c:	4935      	ldr	r1, [pc, #212]	; (8003164 <HAL_GPIO_Init+0x304>)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800309a:	4b3a      	ldr	r3, [pc, #232]	; (8003184 <HAL_GPIO_Init+0x324>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030be:	4a31      	ldr	r2, [pc, #196]	; (8003184 <HAL_GPIO_Init+0x324>)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c4:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <HAL_GPIO_Init+0x324>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e8:	4a26      	ldr	r2, [pc, #152]	; (8003184 <HAL_GPIO_Init+0x324>)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ee:	4b25      	ldr	r3, [pc, #148]	; (8003184 <HAL_GPIO_Init+0x324>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003112:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <HAL_GPIO_Init+0x324>)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003118:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <HAL_GPIO_Init+0x324>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800313c:	4a11      	ldr	r2, [pc, #68]	; (8003184 <HAL_GPIO_Init+0x324>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3301      	adds	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b0f      	cmp	r3, #15
 800314c:	f67f ae96 	bls.w	8002e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	40013800 	.word	0x40013800
 8003168:	40020000 	.word	0x40020000
 800316c:	40020400 	.word	0x40020400
 8003170:	40020800 	.word	0x40020800
 8003174:	40020c00 	.word	0x40020c00
 8003178:	40021000 	.word	0x40021000
 800317c:	40021400 	.word	0x40021400
 8003180:	40021800 	.word	0x40021800
 8003184:	40013c00 	.word	0x40013c00

08003188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
 8003194:	4613      	mov	r3, r2
 8003196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003198:	787b      	ldrb	r3, [r7, #1]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031a4:	e003      	b.n	80031ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	041a      	lsls	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	619a      	str	r2, [r3, #24]
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e12b      	b.n	8003426 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff fb94 	bl	8002910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2224      	movs	r2, #36	; 0x24
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800320e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800321e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003220:	f001 f854 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 8003224:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4a81      	ldr	r2, [pc, #516]	; (8003430 <HAL_I2C_Init+0x274>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d807      	bhi.n	8003240 <HAL_I2C_Init+0x84>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4a80      	ldr	r2, [pc, #512]	; (8003434 <HAL_I2C_Init+0x278>)
 8003234:	4293      	cmp	r3, r2
 8003236:	bf94      	ite	ls
 8003238:	2301      	movls	r3, #1
 800323a:	2300      	movhi	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	e006      	b.n	800324e <HAL_I2C_Init+0x92>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4a7d      	ldr	r2, [pc, #500]	; (8003438 <HAL_I2C_Init+0x27c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	bf94      	ite	ls
 8003248:	2301      	movls	r3, #1
 800324a:	2300      	movhi	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0e7      	b.n	8003426 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4a78      	ldr	r2, [pc, #480]	; (800343c <HAL_I2C_Init+0x280>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0c9b      	lsrs	r3, r3, #18
 8003260:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4a6a      	ldr	r2, [pc, #424]	; (8003430 <HAL_I2C_Init+0x274>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d802      	bhi.n	8003290 <HAL_I2C_Init+0xd4>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	3301      	adds	r3, #1
 800328e:	e009      	b.n	80032a4 <HAL_I2C_Init+0xe8>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	4a69      	ldr	r2, [pc, #420]	; (8003440 <HAL_I2C_Init+0x284>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	099b      	lsrs	r3, r3, #6
 80032a2:	3301      	adds	r3, #1
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	495c      	ldr	r1, [pc, #368]	; (8003430 <HAL_I2C_Init+0x274>)
 80032c0:	428b      	cmp	r3, r1
 80032c2:	d819      	bhi.n	80032f8 <HAL_I2C_Init+0x13c>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1e59      	subs	r1, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d2:	1c59      	adds	r1, r3, #1
 80032d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032d8:	400b      	ands	r3, r1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_I2C_Init+0x138>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1e59      	subs	r1, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f2:	e051      	b.n	8003398 <HAL_I2C_Init+0x1dc>
 80032f4:	2304      	movs	r3, #4
 80032f6:	e04f      	b.n	8003398 <HAL_I2C_Init+0x1dc>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d111      	bne.n	8003324 <HAL_I2C_Init+0x168>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1e58      	subs	r0, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6859      	ldr	r1, [r3, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	440b      	add	r3, r1
 800330e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e012      	b.n	800334a <HAL_I2C_Init+0x18e>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1e58      	subs	r0, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	0099      	lsls	r1, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	fbb0 f3f3 	udiv	r3, r0, r3
 800333a:	3301      	adds	r3, #1
 800333c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Init+0x196>
 800334e:	2301      	movs	r3, #1
 8003350:	e022      	b.n	8003398 <HAL_I2C_Init+0x1dc>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10e      	bne.n	8003378 <HAL_I2C_Init+0x1bc>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1e58      	subs	r0, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	440b      	add	r3, r1
 8003368:	fbb0 f3f3 	udiv	r3, r0, r3
 800336c:	3301      	adds	r3, #1
 800336e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003376:	e00f      	b.n	8003398 <HAL_I2C_Init+0x1dc>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1e58      	subs	r0, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6859      	ldr	r1, [r3, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	0099      	lsls	r1, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	fbb0 f3f3 	udiv	r3, r0, r3
 800338e:	3301      	adds	r3, #1
 8003390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	6809      	ldr	r1, [r1, #0]
 800339c:	4313      	orrs	r3, r2
 800339e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6911      	ldr	r1, [r2, #16]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68d2      	ldr	r2, [r2, #12]
 80033d2:	4311      	orrs	r1, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	430b      	orrs	r3, r1
 80033da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	000186a0 	.word	0x000186a0
 8003434:	001e847f 	.word	0x001e847f
 8003438:	003d08ff 	.word	0x003d08ff
 800343c:	431bde83 	.word	0x431bde83
 8003440:	10624dd3 	.word	0x10624dd3

08003444 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	461a      	mov	r2, r3
 8003450:	460b      	mov	r3, r1
 8003452:	817b      	strh	r3, [r7, #10]
 8003454:	4613      	mov	r3, r2
 8003456:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003458:	f7ff fbec 	bl	8002c34 <HAL_GetTick>
 800345c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b20      	cmp	r3, #32
 8003468:	f040 80e0 	bne.w	800362c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2319      	movs	r3, #25
 8003472:	2201      	movs	r2, #1
 8003474:	4970      	ldr	r1, [pc, #448]	; (8003638 <HAL_I2C_Master_Transmit+0x1f4>)
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fc58 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003482:	2302      	movs	r3, #2
 8003484:	e0d3      	b.n	800362e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_I2C_Master_Transmit+0x50>
 8003490:	2302      	movs	r3, #2
 8003492:	e0cc      	b.n	800362e <HAL_I2C_Master_Transmit+0x1ea>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d007      	beq.n	80034ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2221      	movs	r2, #33	; 0x21
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2210      	movs	r2, #16
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	893a      	ldrh	r2, [r7, #8]
 80034ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a50      	ldr	r2, [pc, #320]	; (800363c <HAL_I2C_Master_Transmit+0x1f8>)
 80034fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034fc:	8979      	ldrh	r1, [r7, #10]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	6a3a      	ldr	r2, [r7, #32]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fac2 	bl	8003a8c <I2C_MasterRequestWrite>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e08d      	b.n	800362e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003528:	e066      	b.n	80035f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	6a39      	ldr	r1, [r7, #32]
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fcd2 	bl	8003ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	2b04      	cmp	r3, #4
 8003540:	d107      	bne.n	8003552 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003550:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e06b      	b.n	800362e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b04      	cmp	r3, #4
 8003592:	d11b      	bne.n	80035cc <HAL_I2C_Master_Transmit+0x188>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	d017      	beq.n	80035cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	6a39      	ldr	r1, [r7, #32]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fcc2 	bl	8003f5a <I2C_WaitOnBTFFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00d      	beq.n	80035f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d107      	bne.n	80035f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e01a      	b.n	800362e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d194      	bne.n	800352a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	00100002 	.word	0x00100002
 800363c:	ffff0000 	.word	0xffff0000

08003640 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08c      	sub	sp, #48	; 0x30
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	461a      	mov	r2, r3
 800364c:	460b      	mov	r3, r1
 800364e:	817b      	strh	r3, [r7, #10]
 8003650:	4613      	mov	r3, r2
 8003652:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003654:	f7ff faee 	bl	8002c34 <HAL_GetTick>
 8003658:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b20      	cmp	r3, #32
 8003664:	f040 820b 	bne.w	8003a7e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2319      	movs	r3, #25
 800366e:	2201      	movs	r2, #1
 8003670:	497c      	ldr	r1, [pc, #496]	; (8003864 <HAL_I2C_Master_Receive+0x224>)
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fb5a 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800367e:	2302      	movs	r3, #2
 8003680:	e1fe      	b.n	8003a80 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_I2C_Master_Receive+0x50>
 800368c:	2302      	movs	r3, #2
 800368e:	e1f7      	b.n	8003a80 <HAL_I2C_Master_Receive+0x440>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d007      	beq.n	80036b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2222      	movs	r2, #34	; 0x22
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2210      	movs	r2, #16
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	893a      	ldrh	r2, [r7, #8]
 80036e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4a5c      	ldr	r2, [pc, #368]	; (8003868 <HAL_I2C_Master_Receive+0x228>)
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036f8:	8979      	ldrh	r1, [r7, #10]
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fa46 	bl	8003b90 <I2C_MasterRequestRead>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e1b8      	b.n	8003a80 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	2b00      	cmp	r3, #0
 8003714:	d113      	bne.n	800373e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003716:	2300      	movs	r3, #0
 8003718:	623b      	str	r3, [r7, #32]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	623b      	str	r3, [r7, #32]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	e18c      	b.n	8003a58 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003742:	2b01      	cmp	r3, #1
 8003744:	d11b      	bne.n	800377e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e16c      	b.n	8003a58 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	2b02      	cmp	r3, #2
 8003784:	d11b      	bne.n	80037be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003794:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a6:	2300      	movs	r3, #0
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	e14c      	b.n	8003a58 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037e4:	e138      	b.n	8003a58 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	f200 80f1 	bhi.w	80039d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d123      	bne.n	8003840 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fbed 	bl	8003fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e139      	b.n	8003a80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800383e:	e10b      	b.n	8003a58 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	2b02      	cmp	r3, #2
 8003846:	d14e      	bne.n	80038e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384e:	2200      	movs	r2, #0
 8003850:	4906      	ldr	r1, [pc, #24]	; (800386c <HAL_I2C_Master_Receive+0x22c>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fa6a 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e10e      	b.n	8003a80 <HAL_I2C_Master_Receive+0x440>
 8003862:	bf00      	nop
 8003864:	00100002 	.word	0x00100002
 8003868:	ffff0000 	.word	0xffff0000
 800386c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038e4:	e0b8      	b.n	8003a58 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	2200      	movs	r2, #0
 80038ee:	4966      	ldr	r1, [pc, #408]	; (8003a88 <HAL_I2C_Master_Receive+0x448>)
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fa1b 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0bf      	b.n	8003a80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	2200      	movs	r2, #0
 800394a:	494f      	ldr	r1, [pc, #316]	; (8003a88 <HAL_I2C_Master_Receive+0x448>)
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f9ed 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e091      	b.n	8003a80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039d0:	e042      	b.n	8003a58 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 fb00 	bl	8003fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e04c      	b.n	8003a80 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d118      	bne.n	8003a58 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f47f aec2 	bne.w	80037e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3728      	adds	r7, #40	; 0x28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	00010004 	.word	0x00010004

08003a8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d006      	beq.n	8003ab6 <I2C_MasterRequestWrite+0x2a>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d003      	beq.n	8003ab6 <I2C_MasterRequestWrite+0x2a>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ab4:	d108      	bne.n	8003ac8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e00b      	b.n	8003ae0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	2b12      	cmp	r3, #18
 8003ace:	d107      	bne.n	8003ae0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ade:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f91d 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b06:	d103      	bne.n	8003b10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e035      	b.n	8003b80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b1c:	d108      	bne.n	8003b30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b1e:	897b      	ldrh	r3, [r7, #10]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b2c:	611a      	str	r2, [r3, #16]
 8003b2e:	e01b      	b.n	8003b68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b30:	897b      	ldrh	r3, [r7, #10]
 8003b32:	11db      	asrs	r3, r3, #7
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 0306 	and.w	r3, r3, #6
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f063 030f 	orn	r3, r3, #15
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	490e      	ldr	r1, [pc, #56]	; (8003b88 <I2C_MasterRequestWrite+0xfc>)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f943 	bl	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e010      	b.n	8003b80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b5e:	897b      	ldrh	r3, [r7, #10]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4907      	ldr	r1, [pc, #28]	; (8003b8c <I2C_MasterRequestWrite+0x100>)
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f933 	bl	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	00010008 	.word	0x00010008
 8003b8c:	00010002 	.word	0x00010002

08003b90 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d006      	beq.n	8003bca <I2C_MasterRequestRead+0x3a>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d003      	beq.n	8003bca <I2C_MasterRequestRead+0x3a>
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bc8:	d108      	bne.n	8003bdc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e00b      	b.n	8003bf4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	2b11      	cmp	r3, #17
 8003be2:	d107      	bne.n	8003bf4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f893 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1a:	d103      	bne.n	8003c24 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e079      	b.n	8003d1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c30:	d108      	bne.n	8003c44 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c32:	897b      	ldrh	r3, [r7, #10]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	611a      	str	r2, [r3, #16]
 8003c42:	e05f      	b.n	8003d04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c44:	897b      	ldrh	r3, [r7, #10]
 8003c46:	11db      	asrs	r3, r3, #7
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f003 0306 	and.w	r3, r3, #6
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f063 030f 	orn	r3, r3, #15
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4930      	ldr	r1, [pc, #192]	; (8003d24 <I2C_MasterRequestRead+0x194>)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f8b9 	bl	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e054      	b.n	8003d1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c72:	897b      	ldrh	r3, [r7, #10]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4929      	ldr	r1, [pc, #164]	; (8003d28 <I2C_MasterRequestRead+0x198>)
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f8a9 	bl	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e044      	b.n	8003d1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f831 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cde:	d103      	bne.n	8003ce8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e017      	b.n	8003d1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003cec:	897b      	ldrh	r3, [r7, #10]
 8003cee:	11db      	asrs	r3, r3, #7
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f003 0306 	and.w	r3, r3, #6
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f063 030e 	orn	r3, r3, #14
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4907      	ldr	r1, [pc, #28]	; (8003d28 <I2C_MasterRequestRead+0x198>)
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f865 	bl	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	00010008 	.word	0x00010008
 8003d28:	00010002 	.word	0x00010002

08003d2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d3c:	e025      	b.n	8003d8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d44:	d021      	beq.n	8003d8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d46:	f7fe ff75 	bl	8002c34 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d116      	bne.n	8003d8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f043 0220 	orr.w	r2, r3, #32
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e023      	b.n	8003dd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	0c1b      	lsrs	r3, r3, #16
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d10d      	bne.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	e00c      	b.n	8003dca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	43da      	mvns	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bf0c      	ite	eq
 8003dc2:	2301      	moveq	r3, #1
 8003dc4:	2300      	movne	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d0b6      	beq.n	8003d3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003de8:	e051      	b.n	8003e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d123      	bne.n	8003e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f043 0204 	orr.w	r2, r3, #4
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e046      	b.n	8003ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e48:	d021      	beq.n	8003e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fe fef3 	bl	8002c34 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d116      	bne.n	8003e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f043 0220 	orr.w	r2, r3, #32
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e020      	b.n	8003ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d10c      	bne.n	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf14      	ite	ne
 8003eaa:	2301      	movne	r3, #1
 8003eac:	2300      	moveq	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	e00b      	b.n	8003eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	43da      	mvns	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf14      	ite	ne
 8003ec4:	2301      	movne	r3, #1
 8003ec6:	2300      	moveq	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d18d      	bne.n	8003dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ee4:	e02d      	b.n	8003f42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f8ce 	bl	8004088 <I2C_IsAcknowledgeFailed>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e02d      	b.n	8003f52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003efc:	d021      	beq.n	8003f42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efe:	f7fe fe99 	bl	8002c34 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d302      	bcc.n	8003f14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d116      	bne.n	8003f42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f043 0220 	orr.w	r2, r3, #32
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e007      	b.n	8003f52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	2b80      	cmp	r3, #128	; 0x80
 8003f4e:	d1ca      	bne.n	8003ee6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f66:	e02d      	b.n	8003fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f88d 	bl	8004088 <I2C_IsAcknowledgeFailed>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e02d      	b.n	8003fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f7e:	d021      	beq.n	8003fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f80:	f7fe fe58 	bl	8002c34 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d302      	bcc.n	8003f96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d116      	bne.n	8003fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e007      	b.n	8003fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d1ca      	bne.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fe8:	e042      	b.n	8004070 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d119      	bne.n	800402c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0210 	mvn.w	r2, #16
 8004000:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e029      	b.n	8004080 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402c:	f7fe fe02 	bl	8002c34 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	429a      	cmp	r2, r3
 800403a:	d302      	bcc.n	8004042 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d116      	bne.n	8004070 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	f043 0220 	orr.w	r2, r3, #32
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e007      	b.n	8004080 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d1b5      	bne.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409e:	d11b      	bne.n	80040d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f043 0204 	orr.w	r2, r3, #4
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0cc      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b68      	ldr	r3, [pc, #416]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d90c      	bls.n	8004124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b65      	ldr	r3, [pc, #404]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b63      	ldr	r3, [pc, #396]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0b8      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d020      	beq.n	8004172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800413c:	4b59      	ldr	r3, [pc, #356]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a58      	ldr	r2, [pc, #352]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004154:	4b53      	ldr	r3, [pc, #332]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a52      	ldr	r2, [pc, #328]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800415e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004160:	4b50      	ldr	r3, [pc, #320]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	494d      	ldr	r1, [pc, #308]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d044      	beq.n	8004208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d119      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e07f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d003      	beq.n	80041a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a6:	4b3f      	ldr	r3, [pc, #252]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e06f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b6:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e067      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c6:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 0203 	bic.w	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4934      	ldr	r1, [pc, #208]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d8:	f7fe fd2c 	bl	8002c34 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e0:	f7fe fd28 	bl	8002c34 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e04f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 020c 	and.w	r2, r3, #12
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	429a      	cmp	r2, r3
 8004206:	d1eb      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d20c      	bcs.n	8004230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e032      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4916      	ldr	r1, [pc, #88]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	490e      	ldr	r1, [pc, #56]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800426e:	f000 f855 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8004272:	4602      	mov	r2, r0
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	490a      	ldr	r1, [pc, #40]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004280:	5ccb      	ldrb	r3, [r1, r3]
 8004282:	fa22 f303 	lsr.w	r3, r2, r3
 8004286:	4a09      	ldr	r2, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800428a:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fc8c 	bl	8002bac <HAL_InitTick>

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023c00 	.word	0x40023c00
 80042a4:	40023800 	.word	0x40023800
 80042a8:	080056f8 	.word	0x080056f8
 80042ac:	20000000 	.word	0x20000000
 80042b0:	20000004 	.word	0x20000004

080042b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b8:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000000 	.word	0x20000000

080042cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042d0:	f7ff fff0 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0a9b      	lsrs	r3, r3, #10
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	08005708 	.word	0x08005708

080042f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042f8:	f7ff ffdc 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	0b5b      	lsrs	r3, r3, #13
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4903      	ldr	r1, [pc, #12]	; (8004318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	08005708 	.word	0x08005708

0800431c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800431c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004320:	b0ae      	sub	sp, #184	; 0xb8
 8004322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004342:	4bcb      	ldr	r3, [pc, #812]	; (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b0c      	cmp	r3, #12
 800434c:	f200 8206 	bhi.w	800475c <HAL_RCC_GetSysClockFreq+0x440>
 8004350:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	0800438d 	.word	0x0800438d
 800435c:	0800475d 	.word	0x0800475d
 8004360:	0800475d 	.word	0x0800475d
 8004364:	0800475d 	.word	0x0800475d
 8004368:	08004395 	.word	0x08004395
 800436c:	0800475d 	.word	0x0800475d
 8004370:	0800475d 	.word	0x0800475d
 8004374:	0800475d 	.word	0x0800475d
 8004378:	0800439d 	.word	0x0800439d
 800437c:	0800475d 	.word	0x0800475d
 8004380:	0800475d 	.word	0x0800475d
 8004384:	0800475d 	.word	0x0800475d
 8004388:	0800458d 	.word	0x0800458d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4bb9      	ldr	r3, [pc, #740]	; (8004674 <HAL_RCC_GetSysClockFreq+0x358>)
 800438e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004392:	e1e7      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004394:	4bb8      	ldr	r3, [pc, #736]	; (8004678 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004396:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800439a:	e1e3      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800439c:	4bb4      	ldr	r3, [pc, #720]	; (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043a8:	4bb1      	ldr	r3, [pc, #708]	; (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d071      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b4:	4bae      	ldr	r3, [pc, #696]	; (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	099b      	lsrs	r3, r3, #6
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80043c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043da:	4622      	mov	r2, r4
 80043dc:	462b      	mov	r3, r5
 80043de:	f04f 0000 	mov.w	r0, #0
 80043e2:	f04f 0100 	mov.w	r1, #0
 80043e6:	0159      	lsls	r1, r3, #5
 80043e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ec:	0150      	lsls	r0, r2, #5
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4621      	mov	r1, r4
 80043f4:	1a51      	subs	r1, r2, r1
 80043f6:	6439      	str	r1, [r7, #64]	; 0x40
 80043f8:	4629      	mov	r1, r5
 80043fa:	eb63 0301 	sbc.w	r3, r3, r1
 80043fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800440c:	4649      	mov	r1, r9
 800440e:	018b      	lsls	r3, r1, #6
 8004410:	4641      	mov	r1, r8
 8004412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004416:	4641      	mov	r1, r8
 8004418:	018a      	lsls	r2, r1, #6
 800441a:	4641      	mov	r1, r8
 800441c:	1a51      	subs	r1, r2, r1
 800441e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004420:	4649      	mov	r1, r9
 8004422:	eb63 0301 	sbc.w	r3, r3, r1
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004434:	4649      	mov	r1, r9
 8004436:	00cb      	lsls	r3, r1, #3
 8004438:	4641      	mov	r1, r8
 800443a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443e:	4641      	mov	r1, r8
 8004440:	00ca      	lsls	r2, r1, #3
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	4603      	mov	r3, r0
 8004448:	4622      	mov	r2, r4
 800444a:	189b      	adds	r3, r3, r2
 800444c:	633b      	str	r3, [r7, #48]	; 0x30
 800444e:	462b      	mov	r3, r5
 8004450:	460a      	mov	r2, r1
 8004452:	eb42 0303 	adc.w	r3, r2, r3
 8004456:	637b      	str	r3, [r7, #52]	; 0x34
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004464:	4629      	mov	r1, r5
 8004466:	024b      	lsls	r3, r1, #9
 8004468:	4621      	mov	r1, r4
 800446a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800446e:	4621      	mov	r1, r4
 8004470:	024a      	lsls	r2, r1, #9
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800447a:	2200      	movs	r2, #0
 800447c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004480:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004484:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004488:	f7fc fb2c 	bl	8000ae4 <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4613      	mov	r3, r2
 8004492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004496:	e067      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004498:	4b75      	ldr	r3, [pc, #468]	; (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	099b      	lsrs	r3, r3, #6
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044a4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80044a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80044b2:	2300      	movs	r3, #0
 80044b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80044ba:	4622      	mov	r2, r4
 80044bc:	462b      	mov	r3, r5
 80044be:	f04f 0000 	mov.w	r0, #0
 80044c2:	f04f 0100 	mov.w	r1, #0
 80044c6:	0159      	lsls	r1, r3, #5
 80044c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044cc:	0150      	lsls	r0, r2, #5
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4621      	mov	r1, r4
 80044d4:	1a51      	subs	r1, r2, r1
 80044d6:	62b9      	str	r1, [r7, #40]	; 0x28
 80044d8:	4629      	mov	r1, r5
 80044da:	eb63 0301 	sbc.w	r3, r3, r1
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80044ec:	4649      	mov	r1, r9
 80044ee:	018b      	lsls	r3, r1, #6
 80044f0:	4641      	mov	r1, r8
 80044f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044f6:	4641      	mov	r1, r8
 80044f8:	018a      	lsls	r2, r1, #6
 80044fa:	4641      	mov	r1, r8
 80044fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8004500:	4649      	mov	r1, r9
 8004502:	eb63 0b01 	sbc.w	fp, r3, r1
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004512:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800451a:	4692      	mov	sl, r2
 800451c:	469b      	mov	fp, r3
 800451e:	4623      	mov	r3, r4
 8004520:	eb1a 0303 	adds.w	r3, sl, r3
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	462b      	mov	r3, r5
 8004528:	eb4b 0303 	adc.w	r3, fp, r3
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800453a:	4629      	mov	r1, r5
 800453c:	028b      	lsls	r3, r1, #10
 800453e:	4621      	mov	r1, r4
 8004540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004544:	4621      	mov	r1, r4
 8004546:	028a      	lsls	r2, r1, #10
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004550:	2200      	movs	r2, #0
 8004552:	673b      	str	r3, [r7, #112]	; 0x70
 8004554:	677a      	str	r2, [r7, #116]	; 0x74
 8004556:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800455a:	f7fc fac3 	bl	8000ae4 <__aeabi_uldivmod>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4613      	mov	r3, r2
 8004564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004568:	4b41      	ldr	r3, [pc, #260]	; (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	3301      	adds	r3, #1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800457a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800457e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004582:	fbb2 f3f3 	udiv	r3, r2, r3
 8004586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800458a:	e0eb      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800458c:	4b38      	ldr	r3, [pc, #224]	; (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004594:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004598:	4b35      	ldr	r3, [pc, #212]	; (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d06b      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a4:	4b32      	ldr	r3, [pc, #200]	; (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	099b      	lsrs	r3, r3, #6
 80045aa:	2200      	movs	r2, #0
 80045ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80045ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b6:	663b      	str	r3, [r7, #96]	; 0x60
 80045b8:	2300      	movs	r3, #0
 80045ba:	667b      	str	r3, [r7, #100]	; 0x64
 80045bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80045c0:	4622      	mov	r2, r4
 80045c2:	462b      	mov	r3, r5
 80045c4:	f04f 0000 	mov.w	r0, #0
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	0159      	lsls	r1, r3, #5
 80045ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045d2:	0150      	lsls	r0, r2, #5
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4621      	mov	r1, r4
 80045da:	1a51      	subs	r1, r2, r1
 80045dc:	61b9      	str	r1, [r7, #24]
 80045de:	4629      	mov	r1, r5
 80045e0:	eb63 0301 	sbc.w	r3, r3, r1
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80045f2:	4659      	mov	r1, fp
 80045f4:	018b      	lsls	r3, r1, #6
 80045f6:	4651      	mov	r1, sl
 80045f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045fc:	4651      	mov	r1, sl
 80045fe:	018a      	lsls	r2, r1, #6
 8004600:	4651      	mov	r1, sl
 8004602:	ebb2 0801 	subs.w	r8, r2, r1
 8004606:	4659      	mov	r1, fp
 8004608:	eb63 0901 	sbc.w	r9, r3, r1
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004618:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800461c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004620:	4690      	mov	r8, r2
 8004622:	4699      	mov	r9, r3
 8004624:	4623      	mov	r3, r4
 8004626:	eb18 0303 	adds.w	r3, r8, r3
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	462b      	mov	r3, r5
 800462e:	eb49 0303 	adc.w	r3, r9, r3
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004640:	4629      	mov	r1, r5
 8004642:	024b      	lsls	r3, r1, #9
 8004644:	4621      	mov	r1, r4
 8004646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800464a:	4621      	mov	r1, r4
 800464c:	024a      	lsls	r2, r1, #9
 800464e:	4610      	mov	r0, r2
 8004650:	4619      	mov	r1, r3
 8004652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004656:	2200      	movs	r2, #0
 8004658:	65bb      	str	r3, [r7, #88]	; 0x58
 800465a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800465c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004660:	f7fc fa40 	bl	8000ae4 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4613      	mov	r3, r2
 800466a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800466e:	e065      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x420>
 8004670:	40023800 	.word	0x40023800
 8004674:	00f42400 	.word	0x00f42400
 8004678:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467c:	4b3d      	ldr	r3, [pc, #244]	; (8004774 <HAL_RCC_GetSysClockFreq+0x458>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	099b      	lsrs	r3, r3, #6
 8004682:	2200      	movs	r2, #0
 8004684:	4618      	mov	r0, r3
 8004686:	4611      	mov	r1, r2
 8004688:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800468c:	653b      	str	r3, [r7, #80]	; 0x50
 800468e:	2300      	movs	r3, #0
 8004690:	657b      	str	r3, [r7, #84]	; 0x54
 8004692:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004696:	4642      	mov	r2, r8
 8004698:	464b      	mov	r3, r9
 800469a:	f04f 0000 	mov.w	r0, #0
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	0159      	lsls	r1, r3, #5
 80046a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a8:	0150      	lsls	r0, r2, #5
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4641      	mov	r1, r8
 80046b0:	1a51      	subs	r1, r2, r1
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	4649      	mov	r1, r9
 80046b6:	eb63 0301 	sbc.w	r3, r3, r1
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80046c8:	4659      	mov	r1, fp
 80046ca:	018b      	lsls	r3, r1, #6
 80046cc:	4651      	mov	r1, sl
 80046ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046d2:	4651      	mov	r1, sl
 80046d4:	018a      	lsls	r2, r1, #6
 80046d6:	4651      	mov	r1, sl
 80046d8:	1a54      	subs	r4, r2, r1
 80046da:	4659      	mov	r1, fp
 80046dc:	eb63 0501 	sbc.w	r5, r3, r1
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	00eb      	lsls	r3, r5, #3
 80046ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ee:	00e2      	lsls	r2, r4, #3
 80046f0:	4614      	mov	r4, r2
 80046f2:	461d      	mov	r5, r3
 80046f4:	4643      	mov	r3, r8
 80046f6:	18e3      	adds	r3, r4, r3
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	464b      	mov	r3, r9
 80046fc:	eb45 0303 	adc.w	r3, r5, r3
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800470e:	4629      	mov	r1, r5
 8004710:	028b      	lsls	r3, r1, #10
 8004712:	4621      	mov	r1, r4
 8004714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004718:	4621      	mov	r1, r4
 800471a:	028a      	lsls	r2, r1, #10
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004724:	2200      	movs	r2, #0
 8004726:	64bb      	str	r3, [r7, #72]	; 0x48
 8004728:	64fa      	str	r2, [r7, #76]	; 0x4c
 800472a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800472e:	f7fc f9d9 	bl	8000ae4 <__aeabi_uldivmod>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4613      	mov	r3, r2
 8004738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800473c:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <HAL_RCC_GetSysClockFreq+0x458>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	0f1b      	lsrs	r3, r3, #28
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800474a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800474e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800475a:	e003      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_RCC_GetSysClockFreq+0x45c>)
 800475e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004762:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004764:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004768:	4618      	mov	r0, r3
 800476a:	37b8      	adds	r7, #184	; 0xb8
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800
 8004778:	00f42400 	.word	0x00f42400

0800477c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e28d      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 8083 	beq.w	80048a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800479c:	4b94      	ldr	r3, [pc, #592]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 030c 	and.w	r3, r3, #12
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d019      	beq.n	80047dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047a8:	4b91      	ldr	r3, [pc, #580]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047b4:	4b8e      	ldr	r3, [pc, #568]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c0:	d00c      	beq.n	80047dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c2:	4b8b      	ldr	r3, [pc, #556]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d112      	bne.n	80047f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ce:	4b88      	ldr	r3, [pc, #544]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047da:	d10b      	bne.n	80047f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047dc:	4b84      	ldr	r3, [pc, #528]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d05b      	beq.n	80048a0 <HAL_RCC_OscConfig+0x124>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d157      	bne.n	80048a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e25a      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fc:	d106      	bne.n	800480c <HAL_RCC_OscConfig+0x90>
 80047fe:	4b7c      	ldr	r3, [pc, #496]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a7b      	ldr	r2, [pc, #492]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e01d      	b.n	8004848 <HAL_RCC_OscConfig+0xcc>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004814:	d10c      	bne.n	8004830 <HAL_RCC_OscConfig+0xb4>
 8004816:	4b76      	ldr	r3, [pc, #472]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a75      	ldr	r2, [pc, #468]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 800481c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	4b73      	ldr	r3, [pc, #460]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a72      	ldr	r2, [pc, #456]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e00b      	b.n	8004848 <HAL_RCC_OscConfig+0xcc>
 8004830:	4b6f      	ldr	r3, [pc, #444]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a6e      	ldr	r2, [pc, #440]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	4b6c      	ldr	r3, [pc, #432]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a6b      	ldr	r2, [pc, #428]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d013      	beq.n	8004878 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fe f9f0 	bl	8002c34 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004858:	f7fe f9ec 	bl	8002c34 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	; 0x64
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e21f      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486a:	4b61      	ldr	r3, [pc, #388]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0xdc>
 8004876:	e014      	b.n	80048a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fe f9dc 	bl	8002c34 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004880:	f7fe f9d8 	bl	8002c34 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	; 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e20b      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004892:	4b57      	ldr	r3, [pc, #348]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x104>
 800489e:	e000      	b.n	80048a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d06f      	beq.n	800498e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048ae:	4b50      	ldr	r3, [pc, #320]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d017      	beq.n	80048ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048ba:	4b4d      	ldr	r3, [pc, #308]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d105      	bne.n	80048d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048c6:	4b4a      	ldr	r3, [pc, #296]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d2:	4b47      	ldr	r3, [pc, #284]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d11c      	bne.n	8004918 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048de:	4b44      	ldr	r3, [pc, #272]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d116      	bne.n	8004918 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ea:	4b41      	ldr	r3, [pc, #260]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_RCC_OscConfig+0x186>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d001      	beq.n	8004902 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e1d3      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004902:	4b3b      	ldr	r3, [pc, #236]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4937      	ldr	r1, [pc, #220]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004916:	e03a      	b.n	800498e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004920:	4b34      	ldr	r3, [pc, #208]	; (80049f4 <HAL_RCC_OscConfig+0x278>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004926:	f7fe f985 	bl	8002c34 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800492e:	f7fe f981 	bl	8002c34 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e1b4      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004940:	4b2b      	ldr	r3, [pc, #172]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494c:	4b28      	ldr	r3, [pc, #160]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4925      	ldr	r1, [pc, #148]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]
 8004960:	e015      	b.n	800498e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004962:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <HAL_RCC_OscConfig+0x278>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fe f964 	bl	8002c34 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004970:	f7fe f960 	bl	8002c34 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e193      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004982:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d036      	beq.n	8004a08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d016      	beq.n	80049d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <HAL_RCC_OscConfig+0x27c>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a8:	f7fe f944 	bl	8002c34 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b0:	f7fe f940 	bl	8002c34 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e173      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80049c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x234>
 80049ce:	e01b      	b.n	8004a08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_RCC_OscConfig+0x27c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d6:	f7fe f92d 	bl	8002c34 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049dc:	e00e      	b.n	80049fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049de:	f7fe f929 	bl	8002c34 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d907      	bls.n	80049fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e15c      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
 80049f0:	40023800 	.word	0x40023800
 80049f4:	42470000 	.word	0x42470000
 80049f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049fc:	4b8a      	ldr	r3, [pc, #552]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 80049fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ea      	bne.n	80049de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8097 	beq.w	8004b44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a16:	2300      	movs	r3, #0
 8004a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1a:	4b83      	ldr	r3, [pc, #524]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10f      	bne.n	8004a46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	4b7f      	ldr	r3, [pc, #508]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	4a7e      	ldr	r2, [pc, #504]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a34:	6413      	str	r3, [r2, #64]	; 0x40
 8004a36:	4b7c      	ldr	r3, [pc, #496]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a46:	4b79      	ldr	r3, [pc, #484]	; (8004c2c <HAL_RCC_OscConfig+0x4b0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d118      	bne.n	8004a84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a52:	4b76      	ldr	r3, [pc, #472]	; (8004c2c <HAL_RCC_OscConfig+0x4b0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a75      	ldr	r2, [pc, #468]	; (8004c2c <HAL_RCC_OscConfig+0x4b0>)
 8004a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a5e:	f7fe f8e9 	bl	8002c34 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a66:	f7fe f8e5 	bl	8002c34 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e118      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	4b6c      	ldr	r3, [pc, #432]	; (8004c2c <HAL_RCC_OscConfig+0x4b0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCC_OscConfig+0x31e>
 8004a8c:	4b66      	ldr	r3, [pc, #408]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	4a65      	ldr	r2, [pc, #404]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	; 0x70
 8004a98:	e01c      	b.n	8004ad4 <HAL_RCC_OscConfig+0x358>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x340>
 8004aa2:	4b61      	ldr	r3, [pc, #388]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4a60      	ldr	r2, [pc, #384]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	6713      	str	r3, [r2, #112]	; 0x70
 8004aae:	4b5e      	ldr	r3, [pc, #376]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	4a5d      	ldr	r2, [pc, #372]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x358>
 8004abc:	4b5a      	ldr	r3, [pc, #360]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac0:	4a59      	ldr	r2, [pc, #356]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac8:	4b57      	ldr	r3, [pc, #348]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	4a56      	ldr	r2, [pc, #344]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004ace:	f023 0304 	bic.w	r3, r3, #4
 8004ad2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d015      	beq.n	8004b08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fe f8aa 	bl	8002c34 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f7fe f8a6 	bl	8002c34 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e0d7      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afa:	4b4b      	ldr	r3, [pc, #300]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0ee      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x368>
 8004b06:	e014      	b.n	8004b32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fe f894 	bl	8002c34 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fe f890 	bl	8002c34 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e0c1      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b26:	4b40      	ldr	r3, [pc, #256]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ee      	bne.n	8004b10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d105      	bne.n	8004b44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b38:	4b3b      	ldr	r3, [pc, #236]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	4a3a      	ldr	r2, [pc, #232]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80ad 	beq.w	8004ca8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b4e:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d060      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d145      	bne.n	8004bee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b62:	4b33      	ldr	r3, [pc, #204]	; (8004c30 <HAL_RCC_OscConfig+0x4b4>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fe f864 	bl	8002c34 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fe f860 	bl	8002c34 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e093      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	019b      	lsls	r3, r3, #6
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	061b      	lsls	r3, r3, #24
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	071b      	lsls	r3, r3, #28
 8004bba:	491b      	ldr	r1, [pc, #108]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <HAL_RCC_OscConfig+0x4b4>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fe f835 	bl	8002c34 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bce:	f7fe f831 	bl	8002c34 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e064      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x452>
 8004bec:	e05c      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <HAL_RCC_OscConfig+0x4b4>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fe f81e 	bl	8002c34 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fe f81a 	bl	8002c34 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e04d      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x480>
 8004c1a:	e045      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e040      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40007000 	.word	0x40007000
 8004c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c34:	4b1f      	ldr	r3, [pc, #124]	; (8004cb4 <HAL_RCC_OscConfig+0x538>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d030      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d129      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d122      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d119      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d10f      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800

08004cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e03f      	b.n	8004d4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fd fe5e 	bl	80029a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2224      	movs	r2, #36	; 0x24
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f929 	bl	8004f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b08a      	sub	sp, #40	; 0x28
 8004d56:	af02      	add	r7, sp, #8
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	d17c      	bne.n	8004e6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_UART_Transmit+0x2c>
 8004d78:	88fb      	ldrh	r3, [r7, #6]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e075      	b.n	8004e6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_UART_Transmit+0x3e>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e06e      	b.n	8004e6e <HAL_UART_Transmit+0x11c>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2221      	movs	r2, #33	; 0x21
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004da6:	f7fd ff45 	bl	8002c34 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	88fa      	ldrh	r2, [r7, #6]
 8004db6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc0:	d108      	bne.n	8004dd4 <HAL_UART_Transmit+0x82>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e003      	b.n	8004ddc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004de4:	e02a      	b.n	8004e3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2200      	movs	r2, #0
 8004dee:	2180      	movs	r1, #128	; 0x80
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f840 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e036      	b.n	8004e6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	3302      	adds	r3, #2
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	e007      	b.n	8004e2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	781a      	ldrb	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1cf      	bne.n	8004de6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2140      	movs	r1, #64	; 0x40
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f810 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e006      	b.n	8004e6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
  }
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b090      	sub	sp, #64	; 0x40
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e86:	e050      	b.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e8e:	d04c      	beq.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e96:	f7fd fecd 	bl	8002c34 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d241      	bcs.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ec6:	637a      	str	r2, [r7, #52]	; 0x34
 8004ec8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3314      	adds	r3, #20
 8004ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3314      	adds	r3, #20
 8004ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004efa:	623a      	str	r2, [r7, #32]
 8004efc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	69f9      	ldr	r1, [r7, #28]
 8004f00:	6a3a      	ldr	r2, [r7, #32]
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e00f      	b.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4013      	ands	r3, r2
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	bf0c      	ite	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	2300      	movne	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d09f      	beq.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3740      	adds	r7, #64	; 0x40
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f58:	b0c0      	sub	sp, #256	; 0x100
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	68d9      	ldr	r1, [r3, #12]
 8004f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	ea40 0301 	orr.w	r3, r0, r1
 8004f7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fac:	f021 010c 	bic.w	r1, r1, #12
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fce:	6999      	ldr	r1, [r3, #24]
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	ea40 0301 	orr.w	r3, r0, r1
 8004fda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4b8f      	ldr	r3, [pc, #572]	; (8005220 <UART_SetConfig+0x2cc>)
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d005      	beq.n	8004ff4 <UART_SetConfig+0xa0>
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b8d      	ldr	r3, [pc, #564]	; (8005224 <UART_SetConfig+0x2d0>)
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d104      	bne.n	8004ffe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ff4:	f7ff f97e 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 8004ff8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ffc:	e003      	b.n	8005006 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ffe:	f7ff f965 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 8005002:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005010:	f040 810c 	bne.w	800522c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005018:	2200      	movs	r2, #0
 800501a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800501e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005022:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005026:	4622      	mov	r2, r4
 8005028:	462b      	mov	r3, r5
 800502a:	1891      	adds	r1, r2, r2
 800502c:	65b9      	str	r1, [r7, #88]	; 0x58
 800502e:	415b      	adcs	r3, r3
 8005030:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005032:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005036:	4621      	mov	r1, r4
 8005038:	eb12 0801 	adds.w	r8, r2, r1
 800503c:	4629      	mov	r1, r5
 800503e:	eb43 0901 	adc.w	r9, r3, r1
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800504e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005056:	4690      	mov	r8, r2
 8005058:	4699      	mov	r9, r3
 800505a:	4623      	mov	r3, r4
 800505c:	eb18 0303 	adds.w	r3, r8, r3
 8005060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005064:	462b      	mov	r3, r5
 8005066:	eb49 0303 	adc.w	r3, r9, r3
 800506a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800507a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800507e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005082:	460b      	mov	r3, r1
 8005084:	18db      	adds	r3, r3, r3
 8005086:	653b      	str	r3, [r7, #80]	; 0x50
 8005088:	4613      	mov	r3, r2
 800508a:	eb42 0303 	adc.w	r3, r2, r3
 800508e:	657b      	str	r3, [r7, #84]	; 0x54
 8005090:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005094:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005098:	f7fb fd24 	bl	8000ae4 <__aeabi_uldivmod>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4b61      	ldr	r3, [pc, #388]	; (8005228 <UART_SetConfig+0x2d4>)
 80050a2:	fba3 2302 	umull	r2, r3, r3, r2
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	011c      	lsls	r4, r3, #4
 80050aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050bc:	4642      	mov	r2, r8
 80050be:	464b      	mov	r3, r9
 80050c0:	1891      	adds	r1, r2, r2
 80050c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80050c4:	415b      	adcs	r3, r3
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050cc:	4641      	mov	r1, r8
 80050ce:	eb12 0a01 	adds.w	sl, r2, r1
 80050d2:	4649      	mov	r1, r9
 80050d4:	eb43 0b01 	adc.w	fp, r3, r1
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050ec:	4692      	mov	sl, r2
 80050ee:	469b      	mov	fp, r3
 80050f0:	4643      	mov	r3, r8
 80050f2:	eb1a 0303 	adds.w	r3, sl, r3
 80050f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050fa:	464b      	mov	r3, r9
 80050fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005100:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005110:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005114:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005118:	460b      	mov	r3, r1
 800511a:	18db      	adds	r3, r3, r3
 800511c:	643b      	str	r3, [r7, #64]	; 0x40
 800511e:	4613      	mov	r3, r2
 8005120:	eb42 0303 	adc.w	r3, r2, r3
 8005124:	647b      	str	r3, [r7, #68]	; 0x44
 8005126:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800512a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800512e:	f7fb fcd9 	bl	8000ae4 <__aeabi_uldivmod>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4611      	mov	r1, r2
 8005138:	4b3b      	ldr	r3, [pc, #236]	; (8005228 <UART_SetConfig+0x2d4>)
 800513a:	fba3 2301 	umull	r2, r3, r3, r1
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	2264      	movs	r2, #100	; 0x64
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	1acb      	subs	r3, r1, r3
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800514e:	4b36      	ldr	r3, [pc, #216]	; (8005228 <UART_SetConfig+0x2d4>)
 8005150:	fba3 2302 	umull	r2, r3, r3, r2
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800515c:	441c      	add	r4, r3
 800515e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005162:	2200      	movs	r2, #0
 8005164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005168:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800516c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005170:	4642      	mov	r2, r8
 8005172:	464b      	mov	r3, r9
 8005174:	1891      	adds	r1, r2, r2
 8005176:	63b9      	str	r1, [r7, #56]	; 0x38
 8005178:	415b      	adcs	r3, r3
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800517c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005180:	4641      	mov	r1, r8
 8005182:	1851      	adds	r1, r2, r1
 8005184:	6339      	str	r1, [r7, #48]	; 0x30
 8005186:	4649      	mov	r1, r9
 8005188:	414b      	adcs	r3, r1
 800518a:	637b      	str	r3, [r7, #52]	; 0x34
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005198:	4659      	mov	r1, fp
 800519a:	00cb      	lsls	r3, r1, #3
 800519c:	4651      	mov	r1, sl
 800519e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051a2:	4651      	mov	r1, sl
 80051a4:	00ca      	lsls	r2, r1, #3
 80051a6:	4610      	mov	r0, r2
 80051a8:	4619      	mov	r1, r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	4642      	mov	r2, r8
 80051ae:	189b      	adds	r3, r3, r2
 80051b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051b4:	464b      	mov	r3, r9
 80051b6:	460a      	mov	r2, r1
 80051b8:	eb42 0303 	adc.w	r3, r2, r3
 80051bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051d4:	460b      	mov	r3, r1
 80051d6:	18db      	adds	r3, r3, r3
 80051d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051da:	4613      	mov	r3, r2
 80051dc:	eb42 0303 	adc.w	r3, r2, r3
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051ea:	f7fb fc7b 	bl	8000ae4 <__aeabi_uldivmod>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <UART_SetConfig+0x2d4>)
 80051f4:	fba3 1302 	umull	r1, r3, r3, r2
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	2164      	movs	r1, #100	; 0x64
 80051fc:	fb01 f303 	mul.w	r3, r1, r3
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	3332      	adds	r3, #50	; 0x32
 8005206:	4a08      	ldr	r2, [pc, #32]	; (8005228 <UART_SetConfig+0x2d4>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	f003 0207 	and.w	r2, r3, #7
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4422      	add	r2, r4
 800521a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800521c:	e105      	b.n	800542a <UART_SetConfig+0x4d6>
 800521e:	bf00      	nop
 8005220:	40011000 	.word	0x40011000
 8005224:	40011400 	.word	0x40011400
 8005228:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800522c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005230:	2200      	movs	r2, #0
 8005232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005236:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800523a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800523e:	4642      	mov	r2, r8
 8005240:	464b      	mov	r3, r9
 8005242:	1891      	adds	r1, r2, r2
 8005244:	6239      	str	r1, [r7, #32]
 8005246:	415b      	adcs	r3, r3
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
 800524a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800524e:	4641      	mov	r1, r8
 8005250:	1854      	adds	r4, r2, r1
 8005252:	4649      	mov	r1, r9
 8005254:	eb43 0501 	adc.w	r5, r3, r1
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	00eb      	lsls	r3, r5, #3
 8005262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005266:	00e2      	lsls	r2, r4, #3
 8005268:	4614      	mov	r4, r2
 800526a:	461d      	mov	r5, r3
 800526c:	4643      	mov	r3, r8
 800526e:	18e3      	adds	r3, r4, r3
 8005270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005274:	464b      	mov	r3, r9
 8005276:	eb45 0303 	adc.w	r3, r5, r3
 800527a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800527e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800528a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800529a:	4629      	mov	r1, r5
 800529c:	008b      	lsls	r3, r1, #2
 800529e:	4621      	mov	r1, r4
 80052a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052a4:	4621      	mov	r1, r4
 80052a6:	008a      	lsls	r2, r1, #2
 80052a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052ac:	f7fb fc1a 	bl	8000ae4 <__aeabi_uldivmod>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4b60      	ldr	r3, [pc, #384]	; (8005438 <UART_SetConfig+0x4e4>)
 80052b6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	011c      	lsls	r4, r3, #4
 80052be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052d0:	4642      	mov	r2, r8
 80052d2:	464b      	mov	r3, r9
 80052d4:	1891      	adds	r1, r2, r2
 80052d6:	61b9      	str	r1, [r7, #24]
 80052d8:	415b      	adcs	r3, r3
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052e0:	4641      	mov	r1, r8
 80052e2:	1851      	adds	r1, r2, r1
 80052e4:	6139      	str	r1, [r7, #16]
 80052e6:	4649      	mov	r1, r9
 80052e8:	414b      	adcs	r3, r1
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052f8:	4659      	mov	r1, fp
 80052fa:	00cb      	lsls	r3, r1, #3
 80052fc:	4651      	mov	r1, sl
 80052fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005302:	4651      	mov	r1, sl
 8005304:	00ca      	lsls	r2, r1, #3
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	4603      	mov	r3, r0
 800530c:	4642      	mov	r2, r8
 800530e:	189b      	adds	r3, r3, r2
 8005310:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005314:	464b      	mov	r3, r9
 8005316:	460a      	mov	r2, r1
 8005318:	eb42 0303 	adc.w	r3, r2, r3
 800531c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	67bb      	str	r3, [r7, #120]	; 0x78
 800532a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005338:	4649      	mov	r1, r9
 800533a:	008b      	lsls	r3, r1, #2
 800533c:	4641      	mov	r1, r8
 800533e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005342:	4641      	mov	r1, r8
 8005344:	008a      	lsls	r2, r1, #2
 8005346:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800534a:	f7fb fbcb 	bl	8000ae4 <__aeabi_uldivmod>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4b39      	ldr	r3, [pc, #228]	; (8005438 <UART_SetConfig+0x4e4>)
 8005354:	fba3 1302 	umull	r1, r3, r3, r2
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	2164      	movs	r1, #100	; 0x64
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	3332      	adds	r3, #50	; 0x32
 8005366:	4a34      	ldr	r2, [pc, #208]	; (8005438 <UART_SetConfig+0x4e4>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005372:	441c      	add	r4, r3
 8005374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005378:	2200      	movs	r2, #0
 800537a:	673b      	str	r3, [r7, #112]	; 0x70
 800537c:	677a      	str	r2, [r7, #116]	; 0x74
 800537e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005382:	4642      	mov	r2, r8
 8005384:	464b      	mov	r3, r9
 8005386:	1891      	adds	r1, r2, r2
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	415b      	adcs	r3, r3
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005392:	4641      	mov	r1, r8
 8005394:	1851      	adds	r1, r2, r1
 8005396:	6039      	str	r1, [r7, #0]
 8005398:	4649      	mov	r1, r9
 800539a:	414b      	adcs	r3, r1
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053aa:	4659      	mov	r1, fp
 80053ac:	00cb      	lsls	r3, r1, #3
 80053ae:	4651      	mov	r1, sl
 80053b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b4:	4651      	mov	r1, sl
 80053b6:	00ca      	lsls	r2, r1, #3
 80053b8:	4610      	mov	r0, r2
 80053ba:	4619      	mov	r1, r3
 80053bc:	4603      	mov	r3, r0
 80053be:	4642      	mov	r2, r8
 80053c0:	189b      	adds	r3, r3, r2
 80053c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80053c4:	464b      	mov	r3, r9
 80053c6:	460a      	mov	r2, r1
 80053c8:	eb42 0303 	adc.w	r3, r2, r3
 80053cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	663b      	str	r3, [r7, #96]	; 0x60
 80053d8:	667a      	str	r2, [r7, #100]	; 0x64
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053e6:	4649      	mov	r1, r9
 80053e8:	008b      	lsls	r3, r1, #2
 80053ea:	4641      	mov	r1, r8
 80053ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053f0:	4641      	mov	r1, r8
 80053f2:	008a      	lsls	r2, r1, #2
 80053f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053f8:	f7fb fb74 	bl	8000ae4 <__aeabi_uldivmod>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <UART_SetConfig+0x4e4>)
 8005402:	fba3 1302 	umull	r1, r3, r3, r2
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	2164      	movs	r1, #100	; 0x64
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	3332      	adds	r3, #50	; 0x32
 8005414:	4a08      	ldr	r2, [pc, #32]	; (8005438 <UART_SetConfig+0x4e4>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	f003 020f 	and.w	r2, r3, #15
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4422      	add	r2, r4
 8005428:	609a      	str	r2, [r3, #8]
}
 800542a:	bf00      	nop
 800542c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005430:	46bd      	mov	sp, r7
 8005432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005436:	bf00      	nop
 8005438:	51eb851f 	.word	0x51eb851f

0800543c <__errno>:
 800543c:	4b01      	ldr	r3, [pc, #4]	; (8005444 <__errno+0x8>)
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	2000000c 	.word	0x2000000c

08005448 <__libc_init_array>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4d0d      	ldr	r5, [pc, #52]	; (8005480 <__libc_init_array+0x38>)
 800544c:	4c0d      	ldr	r4, [pc, #52]	; (8005484 <__libc_init_array+0x3c>)
 800544e:	1b64      	subs	r4, r4, r5
 8005450:	10a4      	asrs	r4, r4, #2
 8005452:	2600      	movs	r6, #0
 8005454:	42a6      	cmp	r6, r4
 8005456:	d109      	bne.n	800546c <__libc_init_array+0x24>
 8005458:	4d0b      	ldr	r5, [pc, #44]	; (8005488 <__libc_init_array+0x40>)
 800545a:	4c0c      	ldr	r4, [pc, #48]	; (800548c <__libc_init_array+0x44>)
 800545c:	f000 f93c 	bl	80056d8 <_init>
 8005460:	1b64      	subs	r4, r4, r5
 8005462:	10a4      	asrs	r4, r4, #2
 8005464:	2600      	movs	r6, #0
 8005466:	42a6      	cmp	r6, r4
 8005468:	d105      	bne.n	8005476 <__libc_init_array+0x2e>
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005470:	4798      	blx	r3
 8005472:	3601      	adds	r6, #1
 8005474:	e7ee      	b.n	8005454 <__libc_init_array+0xc>
 8005476:	f855 3b04 	ldr.w	r3, [r5], #4
 800547a:	4798      	blx	r3
 800547c:	3601      	adds	r6, #1
 800547e:	e7f2      	b.n	8005466 <__libc_init_array+0x1e>
 8005480:	08005718 	.word	0x08005718
 8005484:	08005718 	.word	0x08005718
 8005488:	08005718 	.word	0x08005718
 800548c:	0800571c 	.word	0x0800571c

08005490 <malloc>:
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <malloc+0xc>)
 8005492:	4601      	mov	r1, r0
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	f000 b88d 	b.w	80055b4 <_malloc_r>
 800549a:	bf00      	nop
 800549c:	2000000c 	.word	0x2000000c

080054a0 <free>:
 80054a0:	4b02      	ldr	r3, [pc, #8]	; (80054ac <free+0xc>)
 80054a2:	4601      	mov	r1, r0
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	f000 b819 	b.w	80054dc <_free_r>
 80054aa:	bf00      	nop
 80054ac:	2000000c 	.word	0x2000000c

080054b0 <memcpy>:
 80054b0:	440a      	add	r2, r1
 80054b2:	4291      	cmp	r1, r2
 80054b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054b8:	d100      	bne.n	80054bc <memcpy+0xc>
 80054ba:	4770      	bx	lr
 80054bc:	b510      	push	{r4, lr}
 80054be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c6:	4291      	cmp	r1, r2
 80054c8:	d1f9      	bne.n	80054be <memcpy+0xe>
 80054ca:	bd10      	pop	{r4, pc}

080054cc <memset>:
 80054cc:	4402      	add	r2, r0
 80054ce:	4603      	mov	r3, r0
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d100      	bne.n	80054d6 <memset+0xa>
 80054d4:	4770      	bx	lr
 80054d6:	f803 1b01 	strb.w	r1, [r3], #1
 80054da:	e7f9      	b.n	80054d0 <memset+0x4>

080054dc <_free_r>:
 80054dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054de:	2900      	cmp	r1, #0
 80054e0:	d044      	beq.n	800556c <_free_r+0x90>
 80054e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e6:	9001      	str	r0, [sp, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f1a1 0404 	sub.w	r4, r1, #4
 80054ee:	bfb8      	it	lt
 80054f0:	18e4      	addlt	r4, r4, r3
 80054f2:	f000 f8e3 	bl	80056bc <__malloc_lock>
 80054f6:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <_free_r+0x94>)
 80054f8:	9801      	ldr	r0, [sp, #4]
 80054fa:	6813      	ldr	r3, [r2, #0]
 80054fc:	b933      	cbnz	r3, 800550c <_free_r+0x30>
 80054fe:	6063      	str	r3, [r4, #4]
 8005500:	6014      	str	r4, [r2, #0]
 8005502:	b003      	add	sp, #12
 8005504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005508:	f000 b8de 	b.w	80056c8 <__malloc_unlock>
 800550c:	42a3      	cmp	r3, r4
 800550e:	d908      	bls.n	8005522 <_free_r+0x46>
 8005510:	6825      	ldr	r5, [r4, #0]
 8005512:	1961      	adds	r1, r4, r5
 8005514:	428b      	cmp	r3, r1
 8005516:	bf01      	itttt	eq
 8005518:	6819      	ldreq	r1, [r3, #0]
 800551a:	685b      	ldreq	r3, [r3, #4]
 800551c:	1949      	addeq	r1, r1, r5
 800551e:	6021      	streq	r1, [r4, #0]
 8005520:	e7ed      	b.n	80054fe <_free_r+0x22>
 8005522:	461a      	mov	r2, r3
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	b10b      	cbz	r3, 800552c <_free_r+0x50>
 8005528:	42a3      	cmp	r3, r4
 800552a:	d9fa      	bls.n	8005522 <_free_r+0x46>
 800552c:	6811      	ldr	r1, [r2, #0]
 800552e:	1855      	adds	r5, r2, r1
 8005530:	42a5      	cmp	r5, r4
 8005532:	d10b      	bne.n	800554c <_free_r+0x70>
 8005534:	6824      	ldr	r4, [r4, #0]
 8005536:	4421      	add	r1, r4
 8005538:	1854      	adds	r4, r2, r1
 800553a:	42a3      	cmp	r3, r4
 800553c:	6011      	str	r1, [r2, #0]
 800553e:	d1e0      	bne.n	8005502 <_free_r+0x26>
 8005540:	681c      	ldr	r4, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	6053      	str	r3, [r2, #4]
 8005546:	4421      	add	r1, r4
 8005548:	6011      	str	r1, [r2, #0]
 800554a:	e7da      	b.n	8005502 <_free_r+0x26>
 800554c:	d902      	bls.n	8005554 <_free_r+0x78>
 800554e:	230c      	movs	r3, #12
 8005550:	6003      	str	r3, [r0, #0]
 8005552:	e7d6      	b.n	8005502 <_free_r+0x26>
 8005554:	6825      	ldr	r5, [r4, #0]
 8005556:	1961      	adds	r1, r4, r5
 8005558:	428b      	cmp	r3, r1
 800555a:	bf04      	itt	eq
 800555c:	6819      	ldreq	r1, [r3, #0]
 800555e:	685b      	ldreq	r3, [r3, #4]
 8005560:	6063      	str	r3, [r4, #4]
 8005562:	bf04      	itt	eq
 8005564:	1949      	addeq	r1, r1, r5
 8005566:	6021      	streq	r1, [r4, #0]
 8005568:	6054      	str	r4, [r2, #4]
 800556a:	e7ca      	b.n	8005502 <_free_r+0x26>
 800556c:	b003      	add	sp, #12
 800556e:	bd30      	pop	{r4, r5, pc}
 8005570:	20000188 	.word	0x20000188

08005574 <sbrk_aligned>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	4e0e      	ldr	r6, [pc, #56]	; (80055b0 <sbrk_aligned+0x3c>)
 8005578:	460c      	mov	r4, r1
 800557a:	6831      	ldr	r1, [r6, #0]
 800557c:	4605      	mov	r5, r0
 800557e:	b911      	cbnz	r1, 8005586 <sbrk_aligned+0x12>
 8005580:	f000 f88c 	bl	800569c <_sbrk_r>
 8005584:	6030      	str	r0, [r6, #0]
 8005586:	4621      	mov	r1, r4
 8005588:	4628      	mov	r0, r5
 800558a:	f000 f887 	bl	800569c <_sbrk_r>
 800558e:	1c43      	adds	r3, r0, #1
 8005590:	d00a      	beq.n	80055a8 <sbrk_aligned+0x34>
 8005592:	1cc4      	adds	r4, r0, #3
 8005594:	f024 0403 	bic.w	r4, r4, #3
 8005598:	42a0      	cmp	r0, r4
 800559a:	d007      	beq.n	80055ac <sbrk_aligned+0x38>
 800559c:	1a21      	subs	r1, r4, r0
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 f87c 	bl	800569c <_sbrk_r>
 80055a4:	3001      	adds	r0, #1
 80055a6:	d101      	bne.n	80055ac <sbrk_aligned+0x38>
 80055a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055ac:	4620      	mov	r0, r4
 80055ae:	bd70      	pop	{r4, r5, r6, pc}
 80055b0:	2000018c 	.word	0x2000018c

080055b4 <_malloc_r>:
 80055b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b8:	1ccd      	adds	r5, r1, #3
 80055ba:	f025 0503 	bic.w	r5, r5, #3
 80055be:	3508      	adds	r5, #8
 80055c0:	2d0c      	cmp	r5, #12
 80055c2:	bf38      	it	cc
 80055c4:	250c      	movcc	r5, #12
 80055c6:	2d00      	cmp	r5, #0
 80055c8:	4607      	mov	r7, r0
 80055ca:	db01      	blt.n	80055d0 <_malloc_r+0x1c>
 80055cc:	42a9      	cmp	r1, r5
 80055ce:	d905      	bls.n	80055dc <_malloc_r+0x28>
 80055d0:	230c      	movs	r3, #12
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	2600      	movs	r6, #0
 80055d6:	4630      	mov	r0, r6
 80055d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055dc:	4e2e      	ldr	r6, [pc, #184]	; (8005698 <_malloc_r+0xe4>)
 80055de:	f000 f86d 	bl	80056bc <__malloc_lock>
 80055e2:	6833      	ldr	r3, [r6, #0]
 80055e4:	461c      	mov	r4, r3
 80055e6:	bb34      	cbnz	r4, 8005636 <_malloc_r+0x82>
 80055e8:	4629      	mov	r1, r5
 80055ea:	4638      	mov	r0, r7
 80055ec:	f7ff ffc2 	bl	8005574 <sbrk_aligned>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	4604      	mov	r4, r0
 80055f4:	d14d      	bne.n	8005692 <_malloc_r+0xde>
 80055f6:	6834      	ldr	r4, [r6, #0]
 80055f8:	4626      	mov	r6, r4
 80055fa:	2e00      	cmp	r6, #0
 80055fc:	d140      	bne.n	8005680 <_malloc_r+0xcc>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	4631      	mov	r1, r6
 8005602:	4638      	mov	r0, r7
 8005604:	eb04 0803 	add.w	r8, r4, r3
 8005608:	f000 f848 	bl	800569c <_sbrk_r>
 800560c:	4580      	cmp	r8, r0
 800560e:	d13a      	bne.n	8005686 <_malloc_r+0xd2>
 8005610:	6821      	ldr	r1, [r4, #0]
 8005612:	3503      	adds	r5, #3
 8005614:	1a6d      	subs	r5, r5, r1
 8005616:	f025 0503 	bic.w	r5, r5, #3
 800561a:	3508      	adds	r5, #8
 800561c:	2d0c      	cmp	r5, #12
 800561e:	bf38      	it	cc
 8005620:	250c      	movcc	r5, #12
 8005622:	4629      	mov	r1, r5
 8005624:	4638      	mov	r0, r7
 8005626:	f7ff ffa5 	bl	8005574 <sbrk_aligned>
 800562a:	3001      	adds	r0, #1
 800562c:	d02b      	beq.n	8005686 <_malloc_r+0xd2>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	442b      	add	r3, r5
 8005632:	6023      	str	r3, [r4, #0]
 8005634:	e00e      	b.n	8005654 <_malloc_r+0xa0>
 8005636:	6822      	ldr	r2, [r4, #0]
 8005638:	1b52      	subs	r2, r2, r5
 800563a:	d41e      	bmi.n	800567a <_malloc_r+0xc6>
 800563c:	2a0b      	cmp	r2, #11
 800563e:	d916      	bls.n	800566e <_malloc_r+0xba>
 8005640:	1961      	adds	r1, r4, r5
 8005642:	42a3      	cmp	r3, r4
 8005644:	6025      	str	r5, [r4, #0]
 8005646:	bf18      	it	ne
 8005648:	6059      	strne	r1, [r3, #4]
 800564a:	6863      	ldr	r3, [r4, #4]
 800564c:	bf08      	it	eq
 800564e:	6031      	streq	r1, [r6, #0]
 8005650:	5162      	str	r2, [r4, r5]
 8005652:	604b      	str	r3, [r1, #4]
 8005654:	4638      	mov	r0, r7
 8005656:	f104 060b 	add.w	r6, r4, #11
 800565a:	f000 f835 	bl	80056c8 <__malloc_unlock>
 800565e:	f026 0607 	bic.w	r6, r6, #7
 8005662:	1d23      	adds	r3, r4, #4
 8005664:	1af2      	subs	r2, r6, r3
 8005666:	d0b6      	beq.n	80055d6 <_malloc_r+0x22>
 8005668:	1b9b      	subs	r3, r3, r6
 800566a:	50a3      	str	r3, [r4, r2]
 800566c:	e7b3      	b.n	80055d6 <_malloc_r+0x22>
 800566e:	6862      	ldr	r2, [r4, #4]
 8005670:	42a3      	cmp	r3, r4
 8005672:	bf0c      	ite	eq
 8005674:	6032      	streq	r2, [r6, #0]
 8005676:	605a      	strne	r2, [r3, #4]
 8005678:	e7ec      	b.n	8005654 <_malloc_r+0xa0>
 800567a:	4623      	mov	r3, r4
 800567c:	6864      	ldr	r4, [r4, #4]
 800567e:	e7b2      	b.n	80055e6 <_malloc_r+0x32>
 8005680:	4634      	mov	r4, r6
 8005682:	6876      	ldr	r6, [r6, #4]
 8005684:	e7b9      	b.n	80055fa <_malloc_r+0x46>
 8005686:	230c      	movs	r3, #12
 8005688:	603b      	str	r3, [r7, #0]
 800568a:	4638      	mov	r0, r7
 800568c:	f000 f81c 	bl	80056c8 <__malloc_unlock>
 8005690:	e7a1      	b.n	80055d6 <_malloc_r+0x22>
 8005692:	6025      	str	r5, [r4, #0]
 8005694:	e7de      	b.n	8005654 <_malloc_r+0xa0>
 8005696:	bf00      	nop
 8005698:	20000188 	.word	0x20000188

0800569c <_sbrk_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4d06      	ldr	r5, [pc, #24]	; (80056b8 <_sbrk_r+0x1c>)
 80056a0:	2300      	movs	r3, #0
 80056a2:	4604      	mov	r4, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f7fd f9ec 	bl	8002a84 <_sbrk>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_sbrk_r+0x1a>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_sbrk_r+0x1a>
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	20000190 	.word	0x20000190

080056bc <__malloc_lock>:
 80056bc:	4801      	ldr	r0, [pc, #4]	; (80056c4 <__malloc_lock+0x8>)
 80056be:	f000 b809 	b.w	80056d4 <__retarget_lock_acquire_recursive>
 80056c2:	bf00      	nop
 80056c4:	20000194 	.word	0x20000194

080056c8 <__malloc_unlock>:
 80056c8:	4801      	ldr	r0, [pc, #4]	; (80056d0 <__malloc_unlock+0x8>)
 80056ca:	f000 b804 	b.w	80056d6 <__retarget_lock_release_recursive>
 80056ce:	bf00      	nop
 80056d0:	20000194 	.word	0x20000194

080056d4 <__retarget_lock_acquire_recursive>:
 80056d4:	4770      	bx	lr

080056d6 <__retarget_lock_release_recursive>:
 80056d6:	4770      	bx	lr

080056d8 <_init>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	bf00      	nop
 80056dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056de:	bc08      	pop	{r3}
 80056e0:	469e      	mov	lr, r3
 80056e2:	4770      	bx	lr

080056e4 <_fini>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	bf00      	nop
 80056e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ea:	bc08      	pop	{r3}
 80056ec:	469e      	mov	lr, r3
 80056ee:	4770      	bx	lr
