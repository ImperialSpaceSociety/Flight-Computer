
BMI088_24062023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020f8  08009c68  08009c68  00019c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd60  0800bd60  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd60  0800bd60  0001bd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd68  0800bd68  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd68  0800bd68  0001bd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd6c  0800bd6c  0001bd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bd70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001dc  0800bf4c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  0800bf4c  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f62  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280f  00000000  00000000  0003516e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00037980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  00038c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023db3  00000000  00000000  00039e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015742  00000000  00000000  0005dbc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8921  00000000  00000000  00073305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bc26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006410  00000000  00000000  0014bc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009c4c 	.word	0x08009c4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009c4c 	.word	0x08009c4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <bmi08a_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08a_init(struct bmi08_dev *dev)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 fa98 	bl	80014ce <null_ptr_check>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08_OK)
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d12a      	bne.n	8001000 <bmi08a_init+0x74>
    {
        dev->accel_chip_id = 0x1e;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	221e      	movs	r2, #30
 8000fae:	701a      	strb	r2, [r3, #0]

        if (dev->intf == BMI08_SPI_INTF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7b1b      	ldrb	r3, [r3, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d10c      	bne.n	8000fd2 <bmi08a_init+0x46>
        {
            /* Set dummy byte in case of SPI interface */
            dev->dummy_byte = BMI08_ENABLE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	739a      	strb	r2, [r3, #14]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = get_regs(BMI08_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000fbe:	f107 010e 	add.w	r1, r7, #14
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 faa1 	bl	800150e <get_regs>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e002      	b.n	8000fd8 <bmi08a_init+0x4c>
        }
        else
        {
            /* Make dummy byte 0 in case of I2C interface */
            dev->dummy_byte = BMI08_DISABLE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	739a      	strb	r2, [r3, #14]
        }

        if (rslt == BMI08_OK)
 8000fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10f      	bne.n	8001000 <bmi08a_init+0x74>
        {
            rslt = get_regs(BMI08_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000fe0:	f107 010e 	add.w	r1, r7, #14
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f000 fa90 	bl	800150e <get_regs>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <bmi08a_init+0x74>
            {
                /* Store the chip ID in dev structure */
                //dev->accel_chip_id = chip_id;
            	//I HARDCODED THIS PLS REMOVE IF FOUND PROBLEM
                dev->accel_chip_id = 0x1e;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	221e      	movs	r2, #30
 8000ffe:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return rslt;
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <bmi08a_load_config_file>:

/*!
 *  @brief This API uploads the bmi08 config file onto the device.
 */
int8_t bmi08a_load_config_file(struct bmi08_dev *dev)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Config loading disable */
    uint8_t config_load = BMI08_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	72fb      	strb	r3, [r7, #11]

    /* APS disable */
    uint8_t aps_disable = BMI08_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	72bb      	strb	r3, [r7, #10]

    uint16_t index = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	81bb      	strh	r3, [r7, #12]
    uint8_t reg_data = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	727b      	strb	r3, [r7, #9]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 fa52 	bl	80014ce <null_ptr_check>
 800102a:	4603      	mov	r3, r0
 800102c:	73fb      	strb	r3, [r7, #15]

    /* Check if config file pointer is not null */
    if ((rslt == BMI08_OK) && (dev->config_file_ptr != NULL))
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d173      	bne.n	800111e <bmi08a_load_config_file+0x112>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d06f      	beq.n	800111e <bmi08a_load_config_file+0x112>
    {
        /* Check whether the read/write length is valid */
        if (dev->read_write_len > 0)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001044:	2b00      	cmp	r3, #0
 8001046:	d067      	beq.n	8001118 <bmi08a_load_config_file+0x10c>
        {
            /* Disable advanced power save mode */
            rslt = bmi08a_set_regs(BMI08_REG_ACCEL_PWR_CONF, &aps_disable, 1, dev);
 8001048:	f107 010a 	add.w	r1, r7, #10
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	207c      	movs	r0, #124	; 0x7c
 8001052:	f000 f89c 	bl	800118e <bmi08a_set_regs>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d110      	bne.n	8001084 <bmi08a_load_config_file+0x78>
            {
                /* Wait until APS disable is set. Refer the data-sheet for more information */
                dev->delay_us(450, dev->intf_ptr_accel);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6852      	ldr	r2, [r2, #4]
 800106a:	4611      	mov	r1, r2
 800106c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001070:	4798      	blx	r3

                /* Disable config loading */
                rslt = bmi08a_set_regs(BMI08_REG_ACCEL_INIT_CTRL, &config_load, 1, dev);
 8001072:	f107 010b 	add.w	r1, r7, #11
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	2059      	movs	r0, #89	; 0x59
 800107c:	f000 f887 	bl	800118e <bmi08a_set_regs>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BMI08_OK)
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d14b      	bne.n	8001124 <bmi08a_load_config_file+0x118>
            {
                for (index = 0; index < BMI08_CONFIG_STREAM_SIZE;
 800108c:	2300      	movs	r3, #0
 800108e:	81bb      	strh	r3, [r7, #12]
 8001090:	e011      	b.n	80010b6 <bmi08a_load_config_file+0xaa>
                     index += dev->read_write_len)
                {
                    /* Write the config stream */
                    rslt = stream_transfer_write((dev->config_file_ptr + index), index, dev);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1a      	ldr	r2, [r3, #32]
 8001096:	89bb      	ldrh	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	89b9      	ldrh	r1, [r7, #12]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fbfd 	bl	800189e <stream_transfer_write>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]
                     index += dev->read_write_len)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	89bb      	ldrh	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	81bb      	strh	r3, [r7, #12]
                for (index = 0; index < BMI08_CONFIG_STREAM_SIZE;
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80010bc:	d3e9      	bcc.n	8001092 <bmi08a_load_config_file+0x86>
                }

                if (rslt == BMI08_OK)
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d11e      	bne.n	8001104 <bmi08a_load_config_file+0xf8>
                {
                    /* Enable config loading and FIFO mode */
                    config_load = BMI08_ENABLE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	72fb      	strb	r3, [r7, #11]

                    rslt = bmi08a_set_regs(BMI08_REG_ACCEL_INIT_CTRL, &config_load, 1, dev);
 80010ca:	f107 010b 	add.w	r1, r7, #11
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2201      	movs	r2, #1
 80010d2:	2059      	movs	r0, #89	; 0x59
 80010d4:	f000 f85b 	bl	800118e <bmi08a_set_regs>
 80010d8:	4603      	mov	r3, r0
 80010da:	73fb      	strb	r3, [r7, #15]

                    if (rslt == BMI08_OK)
 80010dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10f      	bne.n	8001104 <bmi08a_load_config_file+0xf8>
                    {
                        /* Wait till ASIC is initialized. Refer the data-sheet for more information */
                        dev->delay_us(BMI08_MS_TO_US(BMI08_ASIC_INIT_TIME_MS), dev->intf_ptr_accel);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6852      	ldr	r2, [r2, #4]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <bmi08a_load_config_file+0x128>)
 80010f0:	4798      	blx	r3

                        /* Check for config initialization status (1 = OK) */
                        rslt = bmi08a_get_regs(BMI08_REG_ACCEL_INTERNAL_STAT, &reg_data, 1, dev);
 80010f2:	f107 0109 	add.w	r1, r7, #9
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	202a      	movs	r0, #42	; 0x2a
 80010fc:	f000 f81c 	bl	8001138 <bmi08a_get_regs>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
                    }
                }

                /* Check for initialization status */
                if (rslt == BMI08_OK && reg_data != BMI08_INIT_OK)
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10b      	bne.n	8001124 <bmi08a_load_config_file+0x118>
 800110c:	7a7b      	ldrb	r3, [r7, #9]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d008      	beq.n	8001124 <bmi08a_load_config_file+0x118>
                {
                    rslt = BMI08_E_CONFIG_STREAM_ERROR;
 8001112:	23fa      	movs	r3, #250	; 0xfa
 8001114:	73fb      	strb	r3, [r7, #15]
        if (dev->read_write_len > 0)
 8001116:	e005      	b.n	8001124 <bmi08a_load_config_file+0x118>
                }
            }
        }
        else
        {
            rslt = BMI08_E_RD_WR_LENGTH_INVALID;
 8001118:	23f9      	movs	r3, #249	; 0xf9
 800111a:	73fb      	strb	r3, [r7, #15]
        if (dev->read_write_len > 0)
 800111c:	e002      	b.n	8001124 <bmi08a_load_config_file+0x118>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 800111e:	23ff      	movs	r3, #255	; 0xff
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e000      	b.n	8001126 <bmi08a_load_config_file+0x11a>
        if (dev->read_write_len > 0)
 8001124:	bf00      	nop
    }

    return rslt;
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	000249f0 	.word	0x000249f0

08001138 <bmi08a_get_regs>:

/*!
 *  @brief This API reads the data from the given register address of accel sensor.
 */
int8_t bmi08a_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001148:	6838      	ldr	r0, [r7, #0]
 800114a:	f000 f9c0 	bl	80014ce <null_ptr_check>
 800114e:	4603      	mov	r3, r0
 8001150:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (reg_data != NULL))
 8001152:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d111      	bne.n	800117e <bmi08a_get_regs+0x46>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00e      	beq.n	800117e <bmi08a_get_regs+0x46>
    {
        if (len > 0)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d008      	beq.n	8001178 <bmi08a_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8001166:	7bf8      	ldrb	r0, [r7, #15]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	f000 f9ce 	bl	800150e <get_regs>
 8001172:	4603      	mov	r3, r0
 8001174:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001176:	e004      	b.n	8001182 <bmi08a_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08_E_RD_WR_LENGTH_INVALID;
 8001178:	23f9      	movs	r3, #249	; 0xf9
 800117a:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 800117c:	e001      	b.n	8001182 <bmi08a_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 800117e:	23ff      	movs	r3, #255	; 0xff
 8001180:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <bmi08a_set_regs>:
/*!
 *  @brief This API writes the given data to the register address
 *  of accel sensor.
 */
int8_t bmi08a_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f000 f995 	bl	80014ce <null_ptr_check>
 80011a4:	4603      	mov	r3, r0
 80011a6:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (reg_data != NULL))
 80011a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d12c      	bne.n	800120a <bmi08a_set_regs+0x7c>
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d029      	beq.n	800120a <bmi08a_set_regs+0x7c>
    {
        if (len > 0)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d023      	beq.n	8001204 <bmi08a_set_regs+0x76>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 80011bc:	7bf8      	ldrb	r0, [r7, #15]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	68b9      	ldr	r1, [r7, #8]
 80011c4:	f000 f9f3 	bl	80015ae <set_regs>
 80011c8:	4603      	mov	r3, r0
 80011ca:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->accel_cfg.power == BMI08_ACCEL_PM_SUSPEND)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	7bdb      	ldrb	r3, [r3, #15]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d108      	bne.n	80011e6 <bmi08a_set_regs+0x58>
            {
                dev->delay_us(450, dev->intf_ptr_accel);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	6852      	ldr	r2, [r2, #4]
 80011dc:	4611      	mov	r1, r2
 80011de:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80011e2:	4798      	blx	r3
        if (len > 0)
 80011e4:	e013      	b.n	800120e <bmi08a_set_regs+0x80>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->accel_cfg.power == BMI08_ACCEL_PM_ACTIVE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	7bdb      	ldrb	r3, [r3, #15]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d107      	bne.n	80011fe <bmi08a_set_regs+0x70>
            {
                dev->delay_us(2, dev->intf_ptr_accel);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	6852      	ldr	r2, [r2, #4]
 80011f6:	4611      	mov	r1, r2
 80011f8:	2002      	movs	r0, #2
 80011fa:	4798      	blx	r3
        if (len > 0)
 80011fc:	e007      	b.n	800120e <bmi08a_set_regs+0x80>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08_E_INVALID_INPUT;
 80011fe:	23fb      	movs	r3, #251	; 0xfb
 8001200:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001202:	e004      	b.n	800120e <bmi08a_set_regs+0x80>
            }
        }
        else
        {
            rslt = BMI08_E_RD_WR_LENGTH_INVALID;
 8001204:	23f9      	movs	r3, #249	; 0xf9
 8001206:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001208:	e001      	b.n	800120e <bmi08a_set_regs+0x80>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 800120a:	23ff      	movs	r3, #255	; 0xff
 800120c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800120e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <bmi08a_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08a_set_meas_conf(struct bmi08_dev *dev)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t bw, odr;
    uint8_t is_odr_invalid = FALSE, is_bw_invalid = FALSE;
 8001222:	2300      	movs	r3, #0
 8001224:	73bb      	strb	r3, [r7, #14]
 8001226:	2300      	movs	r3, #0
 8001228:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f94f 	bl	80014ce <null_ptr_check>
 8001230:	4603      	mov	r3, r0
 8001232:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08_OK)
 8001234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d11d      	bne.n	8001278 <bmi08a_set_meas_conf+0x5e>
    {
        odr = dev->accel_cfg.odr;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7c9b      	ldrb	r3, [r3, #18]
 8001240:	733b      	strb	r3, [r7, #12]
        bw = dev->accel_cfg.bw;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7c5b      	ldrb	r3, [r3, #17]
 8001246:	72fb      	strb	r3, [r7, #11]

        /* Check for valid ODR */
        if ((odr < BMI08_ACCEL_ODR_12_5_HZ) || (odr > BMI08_ACCEL_ODR_1600_HZ))
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	2b04      	cmp	r3, #4
 800124c:	d902      	bls.n	8001254 <bmi08a_set_meas_conf+0x3a>
 800124e:	7b3b      	ldrb	r3, [r7, #12]
 8001250:	2b0c      	cmp	r3, #12
 8001252:	d901      	bls.n	8001258 <bmi08a_set_meas_conf+0x3e>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8001254:	2301      	movs	r3, #1
 8001256:	73bb      	strb	r3, [r7, #14]
        }

        /* Check for valid bandwidth */
        if (bw > BMI08_ACCEL_BW_NORMAL)
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	2b0a      	cmp	r3, #10
 800125c:	d901      	bls.n	8001262 <bmi08a_set_meas_conf+0x48>
        {
            /* Updating the status */
            is_bw_invalid = TRUE;
 800125e:	2301      	movs	r3, #1
 8001260:	737b      	strb	r3, [r7, #13]
        }

        /* Invalid configuration present in ODR and BW */
        if ((!is_odr_invalid) && (!is_bw_invalid))
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d105      	bne.n	8001274 <bmi08a_set_meas_conf+0x5a>
 8001268:	7b7b      	ldrb	r3, [r7, #13]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <bmi08a_set_meas_conf+0x5a>
        {
            rslt = BMI08_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e001      	b.n	8001278 <bmi08a_set_meas_conf+0x5e>
        }
        else
        {
            /* Invalid configuration present in ODR and BW */
            rslt = BMI08_E_INVALID_CONFIG;
 8001274:	23f8      	movs	r3, #248	; 0xf8
 8001276:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001278:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <bmi08a_set_power_mode>:

/*!
 * @brief This API sets the power mode of the accel sensor.
 */
int8_t bmi08a_set_power_mode(struct bmi08_dev *dev)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode;
    uint8_t data[2] = { 0 };
 800128c:	2300      	movs	r3, #0
 800128e:	81bb      	strh	r3, [r7, #12]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f91c 	bl	80014ce <null_ptr_check>
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08_OK)
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d143      	bne.n	800132a <bmi08a_set_power_mode+0xa6>
    {
        power_mode = dev->accel_cfg.power;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7bdb      	ldrb	r3, [r3, #15]
 80012a6:	73bb      	strb	r3, [r7, #14]

        /* Configure data array to write to accel power configuration register */
        if (power_mode == BMI08_ACCEL_PM_ACTIVE)
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <bmi08a_set_power_mode+0x34>
        {
            data[0] = BMI08_ACCEL_PM_ACTIVE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08_ACCEL_POWER_ENABLE;
 80012b2:	2304      	movs	r3, #4
 80012b4:	737b      	strb	r3, [r7, #13]
 80012b6:	e009      	b.n	80012cc <bmi08a_set_power_mode+0x48>
        }
        else if (power_mode == BMI08_ACCEL_PM_SUSPEND)
 80012b8:	7bbb      	ldrb	r3, [r7, #14]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d104      	bne.n	80012c8 <bmi08a_set_power_mode+0x44>
        {
            data[0] = BMI08_ACCEL_PM_SUSPEND;
 80012be:	2303      	movs	r3, #3
 80012c0:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08_ACCEL_POWER_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	737b      	strb	r3, [r7, #13]
 80012c6:	e001      	b.n	80012cc <bmi08a_set_power_mode+0x48>
        }
        else
        {
            /* Invalid power input */
            rslt = BMI08_E_INVALID_INPUT;
 80012c8:	23fb      	movs	r3, #251	; 0xfb
 80012ca:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI08_OK)
 80012cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d12a      	bne.n	800132a <bmi08a_set_power_mode+0xa6>
        {
            /*enable accel sensor*/
            rslt = set_regs(BMI08_REG_ACCEL_PWR_CONF, &data[0], 1, dev);
 80012d4:	f107 010c 	add.w	r1, r7, #12
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	207c      	movs	r0, #124	; 0x7c
 80012de:	f000 f966 	bl	80015ae <set_regs>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d11d      	bne.n	800132a <bmi08a_set_power_mode+0xa6>
            {
                /*delay between power ctrl and power config*/
                dev->delay_us(BMI08_MS_TO_US(BMI08_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6852      	ldr	r2, [r2, #4]
 80012f6:	4611      	mov	r1, r2
 80012f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80012fc:	4798      	blx	r3

                /* write to accel power configuration register */
                rslt = set_regs(BMI08_REG_ACCEL_PWR_CTRL, &data[1], 1, dev);
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	1c59      	adds	r1, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	207d      	movs	r0, #125	; 0x7d
 800130a:	f000 f950 	bl	80015ae <set_regs>
 800130e:	4603      	mov	r3, r0
 8001310:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08_OK)
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d107      	bne.n	800132a <bmi08a_set_power_mode+0xa6>
                {
                    /*delay required to switch power modes*/
                    dev->delay_us(BMI08_MS_TO_US(BMI08_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6852      	ldr	r2, [r2, #4]
 8001322:	4611      	mov	r1, r2
 8001324:	f241 3088 	movw	r0, #5000	; 0x1388
 8001328:	4798      	blx	r3
                }
            }
        }
    }

    return rslt;
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <bmi08a_get_data>:
 * @brief This API reads the accel data from the sensor,
 * store it in the bmi08_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08a_get_data(struct bmi08_sensor_data *accel, struct bmi08_dev *dev)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f000 f8c4 	bl	80014ce <null_ptr_check>
 8001346:	4603      	mov	r3, r0
 8001348:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (accel != NULL))
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d140      	bne.n	80013d4 <bmi08a_get_data+0x9e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d03d      	beq.n	80013d4 <bmi08a_get_data+0x9e>
    {
        /* Read accel sensor data */
        rslt = bmi08a_get_regs(BMI08_REG_ACCEL_X_LSB, data, 6, dev);
 8001358:	f107 010c 	add.w	r1, r7, #12
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2206      	movs	r2, #6
 8001360:	2012      	movs	r0, #18
 8001362:	f7ff fee9 	bl	8001138 <bmi08a_get_regs>
 8001366:	4603      	mov	r3, r0
 8001368:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08_OK)
 800136a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d132      	bne.n	80013d8 <bmi08a_get_data+0xa2>
        {
            lsb = data[0];
 8001372:	7b3b      	ldrb	r3, [r7, #12]
 8001374:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8001376:	7b7b      	ldrb	r3, [r7, #13]
 8001378:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 800137a:	7d7b      	ldrb	r3, [r7, #21]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	7dbb      	ldrb	r3, [r7, #22]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	827b      	strh	r3, [r7, #18]
            accel->x = ((int16_t) msblsb); /* Data in X axis */
 800138a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001392:	7bbb      	ldrb	r3, [r7, #14]
 8001394:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 800139a:	7d7b      	ldrb	r3, [r7, #21]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b21a      	sxth	r2, r3
 80013a0:	7dbb      	ldrb	r3, [r7, #22]
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	827b      	strh	r3, [r7, #18]
            accel->y = ((int16_t) msblsb); /* Data in Y axis */
 80013aa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 80013b2:	7c3b      	ldrb	r3, [r7, #16]
 80013b4:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 80013b6:	7c7b      	ldrb	r3, [r7, #17]
 80013b8:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80013ba:	7d7b      	ldrb	r3, [r7, #21]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	7dbb      	ldrb	r3, [r7, #22]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	827b      	strh	r3, [r7, #18]
            accel->z = ((int16_t) msblsb); /* Data in Z axis */
 80013ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08_OK)
 80013d2:	e001      	b.n	80013d8 <bmi08a_get_data+0xa2>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 80013d4:	23ff      	movs	r3, #255	; 0xff
 80013d6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80013d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <bmi08a_set_int_config>:
 * @brief This API configures the necessary accel interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08a_set_int_config(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80013ee:	6838      	ldr	r0, [r7, #0]
 80013f0:	f000 f86d 	bl	80014ce <null_ptr_check>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (int_config != NULL))
 80013f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d13a      	bne.n	8001476 <bmi08a_set_int_config+0x92>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d037      	beq.n	8001476 <bmi08a_set_int_config+0x92>
    {
        switch (int_config->int_type)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	2b04      	cmp	r3, #4
 800140c:	d82f      	bhi.n	800146e <bmi08a_set_int_config+0x8a>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <bmi08a_set_int_config+0x30>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001429 	.word	0x08001429
 8001418:	08001437 	.word	0x08001437
 800141c:	08001445 	.word	0x08001445
 8001420:	08001453 	.word	0x08001453
 8001424:	08001461 	.word	0x08001461
        {
            case BMI08_ACCEL_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_accel_data_ready_int(int_config, dev);
 8001428:	6839      	ldr	r1, [r7, #0]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f97a 	bl	8001724 <set_accel_data_ready_int>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
                break;
 8001434:	e01e      	b.n	8001474 <bmi08a_set_int_config+0x90>
            case BMI08_ACCEL_INT_SYNC_DATA_RDY:

                /* synchronized data ready interrupt */
                rslt = set_accel_sync_data_ready_int(int_config, dev);
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f9d1 	bl	80017e0 <set_accel_sync_data_ready_int>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]
                break;
 8001442:	e017      	b.n	8001474 <bmi08a_set_int_config+0x90>
            case BMI08_ACCEL_SYNC_INPUT:

                /* input for synchronization on accel */
                rslt = set_accel_sync_input(int_config, dev);
 8001444:	6839      	ldr	r1, [r7, #0]
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fa0f 	bl	800186a <set_accel_sync_input>
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
                break;
 8001450:	e010      	b.n	8001474 <bmi08a_set_int_config+0x90>
            case BMI08_ACCEL_INT_FIFO_WM:

                /* FIFO watermark interrupt */
                rslt = set_fifo_wm_int(int_config, dev);
 8001452:	6839      	ldr	r1, [r7, #0]
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fa63 	bl	8001920 <set_fifo_wm_int>
 800145a:	4603      	mov	r3, r0
 800145c:	73fb      	strb	r3, [r7, #15]
                break;
 800145e:	e009      	b.n	8001474 <bmi08a_set_int_config+0x90>
            case BMI08_ACCEL_INT_FIFO_FULL:

                /* FIFO full interrupt */
                rslt = set_fifo_full_int(int_config, dev);
 8001460:	6839      	ldr	r1, [r7, #0]
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 faba 	bl	80019dc <set_fifo_full_int>
 8001468:	4603      	mov	r3, r0
 800146a:	73fb      	strb	r3, [r7, #15]
                break;
 800146c:	e002      	b.n	8001474 <bmi08a_set_int_config+0x90>
            default:
                rslt = BMI08_E_INVALID_CONFIG;
 800146e:	23f8      	movs	r3, #248	; 0xf8
 8001470:	73fb      	strb	r3, [r7, #15]
                break;
 8001472:	bf00      	nop
        switch (int_config->int_type)
 8001474:	e001      	b.n	800147a <bmi08a_set_int_config+0x96>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 8001476:	23ff      	movs	r3, #255	; 0xff
 8001478:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop

08001488 <bmi08a_get_data_int_status>:

/*!
 * @brief This internal API gets accel feature interrupt status
 */
int8_t bmi08a_get_data_int_status(uint8_t *int_status, struct bmi08_dev *dev)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t status = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	73bb      	strb	r3, [r7, #14]

    if (int_status != NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d010      	beq.n	80014be <bmi08a_get_data_int_status+0x36>
    {
        rslt = bmi08a_get_regs(BMI08_REG_ACCEL_INT_STAT_1, &status, 1, dev);
 800149c:	f107 010e 	add.w	r1, r7, #14
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2201      	movs	r2, #1
 80014a4:	201d      	movs	r0, #29
 80014a6:	f7ff fe47 	bl	8001138 <bmi08a_get_regs>
 80014aa:	4603      	mov	r3, r0
 80014ac:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI08_OK)
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d105      	bne.n	80014c2 <bmi08a_get_data_int_status+0x3a>
        {
            (*int_status) = status;
 80014b6:	7bba      	ldrb	r2, [r7, #14]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	e001      	b.n	80014c2 <bmi08a_get_data_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 80014be:	23ff      	movs	r3, #255	; 0xff
 80014c0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08_dev *dev)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00b      	beq.n	80014f4 <null_ptr_check+0x26>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <null_ptr_check+0x26>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <null_ptr_check+0x26>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08_E_NULL_PTR;
 80014f4:	23ff      	movs	r3, #255	; 0xff
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e001      	b.n	80014fe <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <get_regs>:

/*!
 * @brief This API reads the data from the given register address.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 800150e:	b590      	push	{r4, r7, lr}
 8001510:	b0a7      	sub	sp, #156	; 0x9c
 8001512:	af00      	add	r7, sp, #0
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    uint16_t index;
    uint8_t temp_buff[BMI08_MAX_LEN];

    if (dev->intf == BMI08_SPI_INTF)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	7b1b      	ldrb	r3, [r3, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d103      	bne.n	8001534 <get_regs+0x26>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = reg_addr | BMI08_SPI_RD_MASK;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001532:	73fb      	strb	r3, [r7, #15]
    }

    /* Read the data from the register */
    dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr_accel);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	7b9b      	ldrb	r3, [r3, #14]
 800153c:	461a      	mov	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	441a      	add	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f107 0114 	add.w	r1, r7, #20
 800154a:	7bf8      	ldrb	r0, [r7, #15]
 800154c:	47a0      	blx	r4
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if (dev->intf_rslt == BMI08_INTF_RET_SUCCESS)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 800155e:	2b00      	cmp	r3, #0
 8001560:	d11c      	bne.n	800159c <get_regs+0x8e>
    {
        for (index = 0; index < len; index++)
 8001562:	2300      	movs	r3, #0
 8001564:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001568:	e012      	b.n	8001590 <get_regs+0x82>
        {
            /* Updating the data buffer */
            reg_data[index] = temp_buff[index + dev->dummy_byte];
 800156a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	7b92      	ldrb	r2, [r2, #14]
 8001572:	441a      	add	r2, r3
 8001574:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	440b      	add	r3, r1
 800157c:	3298      	adds	r2, #152	; 0x98
 800157e:	443a      	add	r2, r7
 8001580:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8001584:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < len; index++)
 8001586:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800158a:	3301      	adds	r3, #1
 800158c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001590:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	d8e7      	bhi.n	800156a <get_regs+0x5c>
 800159a:	e002      	b.n	80015a2 <get_regs+0x94>
        }
    }
    else
    {
        /* Failure case */
        rslt = BMI08_E_COM_FAIL;
 800159c:	23fe      	movs	r3, #254	; 0xfe
 800159e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    }

    return rslt;
 80015a2:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	379c      	adds	r7, #156	; 0x9c
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd90      	pop	{r4, r7, pc}

080015ae <set_regs>:

/*!
 * @brief This API writes the data to the given register address.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 80015ae:	b590      	push	{r4, r7, lr}
 80015b0:	b087      	sub	sp, #28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08_SPI_INTF)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	7b1b      	ldrb	r3, [r3, #12]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d103      	bne.n	80015d2 <set_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08_SPI_WR_MASK);
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015d0:	73fb      	strb	r3, [r7, #15]
    }

    /* write to an accel register */
    dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_accel);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	7bf8      	ldrb	r0, [r7, #15]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	47a0      	blx	r4
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if (dev->intf_rslt != BMI08_INTF_RET_SUCCESS)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <set_regs+0x4c>
    {
        /* Updating the error status */
        rslt = BMI08_E_COM_FAIL;
 80015f6:	23fe      	movs	r3, #254	; 0xfe
 80015f8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}

08001606 <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = 0, data, is_channel_invalid = FALSE;
 8001610:	2300      	movs	r3, #0
 8001612:	73bb      	strb	r3, [r7, #14]
 8001614:	2300      	movs	r3, #0
 8001616:	737b      	strb	r3, [r7, #13]

    switch (int_config->int_channel)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <set_int_pin_config+0x20>
 8001620:	2b01      	cmp	r3, #1
 8001622:	d003      	beq.n	800162c <set_int_pin_config+0x26>
 8001624:	e005      	b.n	8001632 <set_int_pin_config+0x2c>
    {
        case BMI08_INT_CHANNEL_1:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08_REG_ACCEL_INT1_IO_CONF;
 8001626:	2353      	movs	r3, #83	; 0x53
 8001628:	73bb      	strb	r3, [r7, #14]
            break;
 800162a:	e005      	b.n	8001638 <set_int_pin_config+0x32>

        case BMI08_INT_CHANNEL_2:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08_REG_ACCEL_INT2_IO_CONF;
 800162c:	2354      	movs	r3, #84	; 0x54
 800162e:	73bb      	strb	r3, [r7, #14]
            break;
 8001630:	e002      	b.n	8001638 <set_int_pin_config+0x32>

        default:
            is_channel_invalid = TRUE;
 8001632:	2301      	movs	r3, #1
 8001634:	737b      	strb	r3, [r7, #13]
            break;
 8001636:	bf00      	nop
    }

    if (!is_channel_invalid)
 8001638:	7b7b      	ldrb	r3, [r7, #13]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d16a      	bne.n	8001714 <set_int_pin_config+0x10e>
    {
        /* Read interrupt pin configuration register */
        rslt = get_regs(reg_addr, &data, 1, dev);
 800163e:	f107 010c 	add.w	r1, r7, #12
 8001642:	7bb8      	ldrb	r0, [r7, #14]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	f7ff ff61 	bl	800150e <get_regs>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08_OK)
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d15f      	bne.n	8001718 <set_int_pin_config+0x112>
        {
            /* Update data with user configured bmi08x_int_cfg structure */
            data = BMI08_SET_BITS(data, BMI08_ACCEL_INT_LVL, int_config->int_pin_cfg.lvl);
 8001658:	7b3b      	ldrb	r3, [r7, #12]
 800165a:	b25b      	sxtb	r3, r3
 800165c:	f023 0302 	bic.w	r3, r3, #2
 8001660:	b25a      	sxtb	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	789b      	ldrb	r3, [r3, #2]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	b25b      	sxtb	r3, r3
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	b25b      	sxtb	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b25b      	sxtb	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	733b      	strb	r3, [r7, #12]
            data = BMI08_SET_BITS(data, BMI08_ACCEL_INT_OD, int_config->int_pin_cfg.output_mode);
 8001678:	7b3b      	ldrb	r3, [r7, #12]
 800167a:	b25b      	sxtb	r3, r3
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	b25a      	sxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	78db      	ldrb	r3, [r3, #3]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	b25b      	sxtb	r3, r3
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	b25b      	sxtb	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b25b      	sxtb	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	733b      	strb	r3, [r7, #12]

            if (int_config->int_type == BMI08_ACCEL_SYNC_INPUT)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	785b      	ldrb	r3, [r3, #1]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d11a      	bne.n	80016d6 <set_int_pin_config+0xd0>
            {
                data = BMI08_SET_BITS_POS_0(data, BMI08_ACCEL_INT_EDGE, BMI08_ENABLE);
 80016a0:	7b3b      	ldrb	r3, [r7, #12]
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	733b      	strb	r3, [r7, #12]
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT_IN, int_config->int_pin_cfg.enable_int_pin);
 80016aa:	7b3b      	ldrb	r3, [r7, #12]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	f023 0310 	bic.w	r3, r3, #16
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	791b      	ldrb	r3, [r3, #4]
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	733b      	strb	r3, [r7, #12]
                data = BMI08_SET_BIT_VAL_0(data, BMI08_ACCEL_INT_IO);
 80016ca:	7b3b      	ldrb	r3, [r7, #12]
 80016cc:	f023 0308 	bic.w	r3, r3, #8
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	733b      	strb	r3, [r7, #12]
 80016d4:	e014      	b.n	8001700 <set_int_pin_config+0xfa>
            }
            else
            {
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT_IO, int_config->int_pin_cfg.enable_int_pin);
 80016d6:	7b3b      	ldrb	r3, [r7, #12]
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	f023 0308 	bic.w	r3, r3, #8
 80016de:	b25a      	sxtb	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	733b      	strb	r3, [r7, #12]
                data = BMI08_SET_BIT_VAL_0(data, BMI08_ACCEL_INT_IN);
 80016f6:	7b3b      	ldrb	r3, [r7, #12]
 80016f8:	f023 0310 	bic.w	r3, r3, #16
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	733b      	strb	r3, [r7, #12]
            }

            /* Write to interrupt pin configuration register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 8001700:	f107 010c 	add.w	r1, r7, #12
 8001704:	7bb8      	ldrb	r0, [r7, #14]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	f7ff fd40 	bl	800118e <bmi08a_set_regs>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e001      	b.n	8001718 <set_int_pin_config+0x112>
        }
    }
    else
    {
        rslt = BMI08_E_INVALID_INPUT;
 8001714:	23fb      	movs	r3, #251	; 0xfb
 8001716:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001718:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <set_accel_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for accel sensor.
 */
static int8_t set_accel_data_ready_int(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 800172e:	2300      	movs	r3, #0
 8001730:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001732:	f107 010d 	add.w	r1, r7, #13
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	2058      	movs	r0, #88	; 0x58
 800173c:	f7ff fee7 	bl	800150e <get_regs>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d143      	bne.n	80017d4 <set_accel_data_ready_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	791b      	ldrb	r3, [r3, #4]
 8001750:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <set_accel_data_ready_int+0x3c>
 800175a:	2b01      	cmp	r3, #1
 800175c:	d010      	beq.n	8001780 <set_accel_data_ready_int+0x5c>
 800175e:	e01f      	b.n	80017a0 <set_accel_data_ready_int+0x7c>
        {
            case BMI08_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT1_DRDY, conf);
 8001760:	7b7b      	ldrb	r3, [r7, #13]
 8001762:	b25b      	sxtb	r3, r3
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	b25a      	sxtb	r2, r3
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	b25b      	sxtb	r3, r3
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	b25b      	sxtb	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b25b      	sxtb	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	737b      	strb	r3, [r7, #13]
                break;
 800177e:	e012      	b.n	80017a6 <set_accel_data_ready_int+0x82>

            case BMI08_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT2_DRDY, conf);
 8001780:	7b7b      	ldrb	r3, [r7, #13]
 8001782:	b25b      	sxtb	r3, r3
 8001784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001788:	b25a      	sxtb	r2, r3
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	019b      	lsls	r3, r3, #6
 800178e:	b25b      	sxtb	r3, r3
 8001790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001794:	b25b      	sxtb	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b25b      	sxtb	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	737b      	strb	r3, [r7, #13]
                break;
 800179e:	e002      	b.n	80017a6 <set_accel_data_ready_int+0x82>

            default:
                rslt = BMI08_E_INVALID_INPUT;
 80017a0:	23fb      	movs	r3, #251	; 0xfb
 80017a2:	73fb      	strb	r3, [r7, #15]
                break;
 80017a4:	bf00      	nop
        }

        if (rslt == BMI08_OK)
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d112      	bne.n	80017d4 <set_accel_data_ready_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 80017ae:	6839      	ldr	r1, [r7, #0]
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff28 	bl	8001606 <set_int_pin_config>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d108      	bne.n	80017d4 <set_accel_data_ready_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80017c2:	f107 010d 	add.w	r1, r7, #13
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	2058      	movs	r0, #88	; 0x58
 80017cc:	f7ff fcdf 	bl	800118e <bmi08a_set_regs>
 80017d0:	4603      	mov	r3, r0
 80017d2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80017d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <set_accel_sync_data_ready_int>:

/*!
 * @brief This API sets the synchronized data ready interrupt for accel sensor
 */
static int8_t set_accel_sync_data_ready_int(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data, reg_addr = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80017ee:	6838      	ldr	r0, [r7, #0]
 80017f0:	f7ff fe6d 	bl	80014ce <null_ptr_check>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08_OK)
 80017f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d12e      	bne.n	800185e <set_accel_sync_data_ready_int+0x7e>
    {
        data = BMI08_ACCEL_DATA_SYNC_INT_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	737b      	strb	r3, [r7, #13]

        switch (int_config->int_channel)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <set_accel_sync_data_ready_int+0x32>
 800180c:	2b01      	cmp	r3, #1
 800180e:	d003      	beq.n	8001818 <set_accel_sync_data_ready_int+0x38>
 8001810:	e005      	b.n	800181e <set_accel_sync_data_ready_int+0x3e>
        {
            case BMI08_INT_CHANNEL_1:
                reg_addr = BMI08_REG_ACCEL_INT1_MAP;
 8001812:	2356      	movs	r3, #86	; 0x56
 8001814:	73bb      	strb	r3, [r7, #14]
                break;
 8001816:	e005      	b.n	8001824 <set_accel_sync_data_ready_int+0x44>

            case BMI08_INT_CHANNEL_2:
                reg_addr = BMI08_REG_ACCEL_INT2_MAP;
 8001818:	2357      	movs	r3, #87	; 0x57
 800181a:	73bb      	strb	r3, [r7, #14]
                break;
 800181c:	e002      	b.n	8001824 <set_accel_sync_data_ready_int+0x44>

            default:
                rslt = BMI08_E_INVALID_INPUT;
 800181e:	23fb      	movs	r3, #251	; 0xfb
 8001820:	73fb      	strb	r3, [r7, #15]
                break;
 8001822:	bf00      	nop
        }

        if (rslt == BMI08_OK)
 8001824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d118      	bne.n	800185e <set_accel_sync_data_ready_int+0x7e>
        {
            if (int_config->int_pin_cfg.enable_int_pin == BMI08_ENABLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	791b      	ldrb	r3, [r3, #4]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <set_accel_sync_data_ready_int+0x58>
            {
                /*interrupt A mapped to INT1/INT2 */
                data = BMI08_ACCEL_DATA_SYNC_INT_ENABLE;
 8001834:	2301      	movs	r3, #1
 8001836:	737b      	strb	r3, [r7, #13]
            }

            /* Write to interrupt map register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 8001838:	f107 010d 	add.w	r1, r7, #13
 800183c:	7bb8      	ldrb	r0, [r7, #14]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	f7ff fca4 	bl	800118e <bmi08a_set_regs>
 8001846:	4603      	mov	r3, r0
 8001848:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <set_accel_sync_data_ready_int+0x7e>
            {
                /*set input interrupt configuration*/
                rslt = set_int_pin_config(int_config, dev);
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fed6 	bl	8001606 <set_int_pin_config>
 800185a:	4603      	mov	r3, r0
 800185c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <set_accel_sync_input>:

/*!
 * @brief This API configures the given interrupt channel as input for accel sensor
 */
static int8_t set_accel_sync_input(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001874:	6838      	ldr	r0, [r7, #0]
 8001876:	f7ff fe2a 	bl	80014ce <null_ptr_check>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08_OK)
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d105      	bne.n	8001892 <set_accel_sync_input+0x28>
    {
        /*set input interrupt configuration*/
        rslt = set_int_pin_config(int_config, dev);
 8001886:	6839      	ldr	r1, [r7, #0]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff febc 	bl	8001606 <set_int_pin_config>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <stream_transfer_write>:

/*!
 *  @brief This API writes the config stream data in memory using burst mode.
 */
static int8_t stream_transfer_write(const uint8_t *stream_data, uint16_t index, struct bmi08_dev *dev)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	460b      	mov	r3, r1
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	817b      	strh	r3, [r7, #10]
    int8_t rslt;
    uint8_t asic_msb = (uint8_t)((index / 2) >> 4);
 80018ac:	897b      	ldrh	r3, [r7, #10]
 80018ae:	085b      	lsrs	r3, r3, #1
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	75bb      	strb	r3, [r7, #22]
    uint8_t asic_lsb = ((index / 2) & 0x0F);
 80018ba:	897b      	ldrh	r3, [r7, #10]
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	b29b      	uxth	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	757b      	strb	r3, [r7, #21]

    /* Write to feature config register */
    rslt = bmi08a_set_regs(BMI08_REG_ACCEL_RESERVED_5B, &asic_lsb, 1, dev);
 80018ca:	f107 0115 	add.w	r1, r7, #21
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	205b      	movs	r0, #91	; 0x5b
 80018d4:	f7ff fc5b 	bl	800118e <bmi08a_set_regs>
 80018d8:	4603      	mov	r3, r0
 80018da:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI08_OK)
 80018dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d117      	bne.n	8001914 <stream_transfer_write+0x76>
    {
        /* Write to feature config register */
        rslt = bmi08a_set_regs(BMI08_REG_ACCEL_RESERVED_5C, &asic_msb, 1, dev);
 80018e4:	f107 0116 	add.w	r1, r7, #22
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	205c      	movs	r0, #92	; 0x5c
 80018ee:	f7ff fc4e 	bl	800118e <bmi08a_set_regs>
 80018f2:	4603      	mov	r3, r0
 80018f4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08_OK)
 80018f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <stream_transfer_write+0x76>
        {
            /* Write to feature config registers */
            rslt = bmi08a_set_regs(BMI08_REG_ACCEL_FEATURE_CFG, (uint8_t *)stream_data, dev->read_write_len, dev);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001904:	461a      	mov	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68f9      	ldr	r1, [r7, #12]
 800190a:	205e      	movs	r0, #94	; 0x5e
 800190c:	f7ff fc3f 	bl	800118e <bmi08a_set_regs>
 8001910:	4603      	mov	r3, r0
 8001912:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001914:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <set_fifo_wm_int>:

/*!
 * @brief This API sets the FIFO water mark interrupt for accel sensor.
 */
static int8_t set_fifo_wm_int(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 800192a:	2300      	movs	r3, #0
 800192c:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 800192e:	f107 010d 	add.w	r1, r7, #13
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	2058      	movs	r0, #88	; 0x58
 8001938:	f7ff fde9 	bl	800150e <get_regs>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 8001940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d143      	bne.n	80019d0 <set_fifo_wm_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	791b      	ldrb	r3, [r3, #4]
 800194c:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <set_fifo_wm_int+0x3c>
 8001956:	2b01      	cmp	r3, #1
 8001958:	d010      	beq.n	800197c <set_fifo_wm_int+0x5c>
 800195a:	e01f      	b.n	800199c <set_fifo_wm_int+0x7c>
        {
            case BMI08_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT1_FWM, conf);
 800195c:	7b7b      	ldrb	r3, [r7, #13]
 800195e:	b25b      	sxtb	r3, r3
 8001960:	f023 0302 	bic.w	r3, r3, #2
 8001964:	b25a      	sxtb	r2, r3
 8001966:	7bbb      	ldrb	r3, [r7, #14]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	b25b      	sxtb	r3, r3
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	b25b      	sxtb	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b25b      	sxtb	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	737b      	strb	r3, [r7, #13]
                break;
 800197a:	e012      	b.n	80019a2 <set_fifo_wm_int+0x82>

            case BMI08_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT2_FWM, conf);
 800197c:	7b7b      	ldrb	r3, [r7, #13]
 800197e:	b25b      	sxtb	r3, r3
 8001980:	f023 0320 	bic.w	r3, r3, #32
 8001984:	b25a      	sxtb	r2, r3
 8001986:	7bbb      	ldrb	r3, [r7, #14]
 8001988:	015b      	lsls	r3, r3, #5
 800198a:	b25b      	sxtb	r3, r3
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	b25b      	sxtb	r3, r3
 8001992:	4313      	orrs	r3, r2
 8001994:	b25b      	sxtb	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	737b      	strb	r3, [r7, #13]
                break;
 800199a:	e002      	b.n	80019a2 <set_fifo_wm_int+0x82>

            default:
                rslt = BMI08_E_INVALID_INPUT;
 800199c:	23fb      	movs	r3, #251	; 0xfb
 800199e:	73fb      	strb	r3, [r7, #15]
                break;
 80019a0:	bf00      	nop
        }

        if (rslt == BMI08_OK)
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d112      	bne.n	80019d0 <set_fifo_wm_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 80019aa:	6839      	ldr	r1, [r7, #0]
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fe2a 	bl	8001606 <set_int_pin_config>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d108      	bne.n	80019d0 <set_fifo_wm_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80019be:	f107 010d 	add.w	r1, r7, #13
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	2058      	movs	r0, #88	; 0x58
 80019c8:	f7ff fbe1 	bl	800118e <bmi08a_set_regs>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <set_fifo_full_int>:

/*!
 * @brief This API sets the FIFO full interrupt for accel sensor.
 */
static int8_t set_fifo_full_int(const struct bmi08_accel_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 80019e6:	2300      	movs	r3, #0
 80019e8:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80019ea:	f107 010d 	add.w	r1, r7, #13
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2201      	movs	r2, #1
 80019f2:	2058      	movs	r0, #88	; 0x58
 80019f4:	f7ff fd8b 	bl	800150e <get_regs>
 80019f8:	4603      	mov	r3, r0
 80019fa:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 80019fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d142      	bne.n	8001a8a <set_fifo_full_int+0xae>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	791b      	ldrb	r3, [r3, #4]
 8001a08:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <set_fifo_full_int+0x3c>
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d00f      	beq.n	8001a36 <set_fifo_full_int+0x5a>
 8001a16:	e01e      	b.n	8001a56 <set_fifo_full_int+0x7a>
        {
            case BMI08_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08_SET_BITS_POS_0(data, BMI08_ACCEL_INT1_FFULL, conf);
 8001a18:	7b7b      	ldrb	r3, [r7, #13]
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	b25a      	sxtb	r2, r3
 8001a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b25b      	sxtb	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	737b      	strb	r3, [r7, #13]
                break;
 8001a34:	e012      	b.n	8001a5c <set_fifo_full_int+0x80>

            case BMI08_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08_SET_BITS(data, BMI08_ACCEL_INT2_FFULL, conf);
 8001a36:	7b7b      	ldrb	r3, [r7, #13]
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	f023 0310 	bic.w	r3, r3, #16
 8001a3e:	b25a      	sxtb	r2, r3
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	b25b      	sxtb	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	737b      	strb	r3, [r7, #13]
                break;
 8001a54:	e002      	b.n	8001a5c <set_fifo_full_int+0x80>

            default:
                rslt = BMI08_E_INVALID_INPUT;
 8001a56:	23fb      	movs	r3, #251	; 0xfb
 8001a58:	73fb      	strb	r3, [r7, #15]
                break;
 8001a5a:	bf00      	nop
        }

        if (rslt == BMI08_OK)
 8001a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d112      	bne.n	8001a8a <set_fifo_full_int+0xae>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 8001a64:	6839      	ldr	r1, [r7, #0]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fdcd 	bl	8001606 <set_int_pin_config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 8001a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d108      	bne.n	8001a8a <set_fifo_full_int+0xae>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001a78:	f107 010d 	add.w	r1, r7, #13
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2058      	movs	r0, #88	; 0x58
 8001a82:	f7ff fb84 	bl	800118e <bmi08a_set_regs>
 8001a86:	4603      	mov	r3, r0
 8001a88:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <bmi08g_init>:
 *  @brief This API is the entry point for gyro sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of gyro sensor.
 */
int8_t bmi08g_init(struct bmi08_dev *dev)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fa23 	bl	8001eee <null_ptr_check>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08_OK)
 8001aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d118      	bne.n	8001ae6 <bmi08g_init+0x50>
    {
        dev->gyro_chip_id = 0;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	705a      	strb	r2, [r3, #1]

        /* Read gyro chip id */
        rslt = get_regs(BMI08_REG_GYRO_CHIP_ID, &chip_id, 1, dev);
 8001aba:	f107 010e 	add.w	r1, r7, #14
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 fa33 	bl	8001f2e <get_regs>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08_OK)
 8001acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d108      	bne.n	8001ae6 <bmi08g_init+0x50>
        {
            if (chip_id == BMI08_GYRO_CHIP_ID)
 8001ad4:	7bbb      	ldrb	r3, [r7, #14]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	d103      	bne.n	8001ae2 <bmi08g_init+0x4c>
            {
                /* Store the chip ID in dev structure */
                dev->gyro_chip_id = chip_id;
 8001ada:	7bba      	ldrb	r2, [r7, #14]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	705a      	strb	r2, [r3, #1]
 8001ae0:	e001      	b.n	8001ae6 <bmi08g_init+0x50>
            }
            else
            {
                rslt = BMI08_E_DEV_NOT_FOUND;
 8001ae2:	23fd      	movs	r3, #253	; 0xfd
 8001ae4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <bmi08g_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of gyro sensor.
 */
int8_t bmi08g_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4603      	mov	r3, r0
 8001b00:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001b02:	6838      	ldr	r0, [r7, #0]
 8001b04:	f000 f9f3 	bl	8001eee <null_ptr_check>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (reg_data != NULL))
 8001b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d111      	bne.n	8001b38 <bmi08g_get_regs+0x46>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00e      	beq.n	8001b38 <bmi08g_get_regs+0x46>
    {
        if (len > 0)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <bmi08g_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8001b20:	7bf8      	ldrb	r0, [r7, #15]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	f000 fa01 	bl	8001f2e <get_regs>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001b30:	e004      	b.n	8001b3c <bmi08g_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08_E_RD_WR_LENGTH_INVALID;
 8001b32:	23f9      	movs	r3, #249	; 0xf9
 8001b34:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001b36:	e001      	b.n	8001b3c <bmi08g_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 8001b38:	23ff      	movs	r3, #255	; 0xff
 8001b3a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <bmi08g_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of gyro sensor.
 */
int8_t bmi08g_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	4603      	mov	r3, r0
 8001b56:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f000 f9c8 	bl	8001eee <null_ptr_check>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (reg_data != NULL))
 8001b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d130      	bne.n	8001bcc <bmi08g_set_regs+0x84>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d02d      	beq.n	8001bcc <bmi08g_set_regs+0x84>
    {
        if (len > 0)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d027      	beq.n	8001bc6 <bmi08g_set_regs+0x7e>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8001b76:	7bf8      	ldrb	r0, [r7, #15]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	f000 fa02 	bl	8001f86 <set_regs>
 8001b82:	4603      	mov	r3, r0
 8001b84:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->gyro_cfg.power == BMI08_GYRO_PM_SUSPEND || dev->gyro_cfg.power == BMI08_GYRO_PM_DEEP_SUSPEND)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	7cdb      	ldrb	r3, [r3, #19]
 8001b8a:	2b80      	cmp	r3, #128	; 0x80
 8001b8c:	d003      	beq.n	8001b96 <bmi08g_set_regs+0x4e>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	7cdb      	ldrb	r3, [r3, #19]
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d108      	bne.n	8001ba8 <bmi08g_set_regs+0x60>
            {
                dev->delay_us(450, dev->intf_ptr_gyro);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	6892      	ldr	r2, [r2, #8]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001ba4:	4798      	blx	r3
        if (len > 0)
 8001ba6:	e013      	b.n	8001bd0 <bmi08g_set_regs+0x88>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->gyro_cfg.power == BMI08_GYRO_PM_NORMAL)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	7cdb      	ldrb	r3, [r3, #19]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d107      	bne.n	8001bc0 <bmi08g_set_regs+0x78>
            {
                dev->delay_us(2, dev->intf_ptr_gyro);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	6892      	ldr	r2, [r2, #8]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	2002      	movs	r0, #2
 8001bbc:	4798      	blx	r3
        if (len > 0)
 8001bbe:	e007      	b.n	8001bd0 <bmi08g_set_regs+0x88>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08_E_INVALID_INPUT;
 8001bc0:	23fb      	movs	r3, #251	; 0xfb
 8001bc2:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001bc4:	e004      	b.n	8001bd0 <bmi08g_set_regs+0x88>
            }
        }
        else
        {
            rslt = BMI08_E_RD_WR_LENGTH_INVALID;
 8001bc6:	23f9      	movs	r3, #249	; 0xf9
 8001bc8:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001bca:	e001      	b.n	8001bd0 <bmi08g_set_regs+0x88>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 8001bcc:	23ff      	movs	r3, #255	; 0xff
 8001bce:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001bd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <bmi08g_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of gyro sensor.
 */
int8_t bmi08g_set_meas_conf(struct bmi08_dev *dev)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t odr, range;
    uint8_t is_range_invalid = FALSE, is_odr_invalid = FALSE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73bb      	strb	r3, [r7, #14]
 8001be8:	2300      	movs	r3, #0
 8001bea:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f97e 	bl	8001eee <null_ptr_check>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08_OK)
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d172      	bne.n	8001ce4 <bmi08g_set_meas_conf+0x108>
    {
        odr = dev->gyro_cfg.odr;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7d9b      	ldrb	r3, [r3, #22]
 8001c02:	733b      	strb	r3, [r7, #12]
        range = dev->gyro_cfg.range;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7d1b      	ldrb	r3, [r3, #20]
 8001c08:	72fb      	strb	r3, [r7, #11]

        if (odr > BMI08_GYRO_BW_32_ODR_100_HZ)
 8001c0a:	7b3b      	ldrb	r3, [r7, #12]
 8001c0c:	2b07      	cmp	r3, #7
 8001c0e:	d901      	bls.n	8001c14 <bmi08g_set_meas_conf+0x38>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8001c10:	2301      	movs	r3, #1
 8001c12:	737b      	strb	r3, [r7, #13]
        }

        if (range > BMI08_GYRO_RANGE_125_DPS)
 8001c14:	7afb      	ldrb	r3, [r7, #11]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d901      	bls.n	8001c1e <bmi08g_set_meas_conf+0x42>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73bb      	strb	r3, [r7, #14]
        }

        /* If ODR and Range is valid, write it to gyro config. registers */
        if ((!is_odr_invalid) && (!is_range_invalid))
 8001c1e:	7b7b      	ldrb	r3, [r7, #13]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d15b      	bne.n	8001cdc <bmi08g_set_meas_conf+0x100>
 8001c24:	7bbb      	ldrb	r3, [r7, #14]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d158      	bne.n	8001cdc <bmi08g_set_meas_conf+0x100>
        {
            /* Read range value from the range register */
            rslt = bmi08g_get_regs(BMI08_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001c2a:	f107 010a 	add.w	r1, r7, #10
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	2010      	movs	r0, #16
 8001c34:	f7ff ff5d 	bl	8001af2 <bmi08g_get_regs>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 8001c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d14e      	bne.n	8001ce2 <bmi08g_set_meas_conf+0x106>
            {
                data = BMI08_SET_BITS_POS_0(data, BMI08_GYRO_BW, odr);
 8001c44:	7abb      	ldrb	r3, [r7, #10]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	f023 030f 	bic.w	r3, r3, #15
 8001c4c:	b25a      	sxtb	r2, r3
 8001c4e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	72bb      	strb	r3, [r7, #10]

                /* Write odr value to odr register */
                rslt = bmi08g_set_regs(BMI08_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001c60:	f107 010a 	add.w	r1, r7, #10
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	2010      	movs	r0, #16
 8001c6a:	f7ff ff6d 	bl	8001b48 <bmi08g_set_regs>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08_OK)
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d108      	bne.n	8001c8c <bmi08g_set_meas_conf+0xb0>
                {
                    /* Read range value from the range register */
                    rslt = bmi08g_get_regs(BMI08_REG_GYRO_RANGE, &data, 1, dev);
 8001c7a:	f107 010a 	add.w	r1, r7, #10
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	200f      	movs	r0, #15
 8001c84:	f7ff ff35 	bl	8001af2 <bmi08g_get_regs>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
                }

                if (rslt == BMI08_OK)
 8001c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d116      	bne.n	8001cc2 <bmi08g_set_meas_conf+0xe6>
                {
                    data = BMI08_SET_BITS_POS_0(data, BMI08_GYRO_RANGE, range);
 8001c94:	7abb      	ldrb	r3, [r7, #10]
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	f023 0307 	bic.w	r3, r3, #7
 8001c9c:	b25a      	sxtb	r2, r3
 8001c9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	72bb      	strb	r3, [r7, #10]

                    /* Write range value to range register */
                    rslt = bmi08g_set_regs(BMI08_REG_GYRO_RANGE, &data, 1, dev);
 8001cb0:	f107 010a 	add.w	r1, r7, #10
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	200f      	movs	r0, #15
 8001cba:	f7ff ff45 	bl	8001b48 <bmi08g_set_regs>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
                }

                if (rslt == BMI08_OK)
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10b      	bne.n	8001ce2 <bmi08g_set_meas_conf+0x106>
                {
                    /* Delay required to set configurations */
                    dev->delay_us(BMI08_GYRO_SET_CONFIG_DELAY * 1000, dev->intf_ptr_gyro);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6892      	ldr	r2, [r2, #8]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	f242 7010 	movw	r0, #10000	; 0x2710
 8001cd8:	4798      	blx	r3
            if (rslt == BMI08_OK)
 8001cda:	e002      	b.n	8001ce2 <bmi08g_set_meas_conf+0x106>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, Range */
            rslt = BMI08_E_INVALID_CONFIG;
 8001cdc:	23f8      	movs	r3, #248	; 0xf8
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e000      	b.n	8001ce4 <bmi08g_set_meas_conf+0x108>
            if (rslt == BMI08_OK)
 8001ce2:	bf00      	nop
        }
    }

    return rslt;
 8001ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <bmi08g_set_power_mode>:

/*!
 * @brief This API sets the power mode of the gyro sensor.
 */
int8_t bmi08g_set_power_mode(struct bmi08_dev *dev)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode, data;
    uint8_t is_power_switching_mode_valid = TRUE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8f6 	bl	8001eee <null_ptr_check>
 8001d02:	4603      	mov	r3, r0
 8001d04:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08_OK)
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d13a      	bne.n	8001d84 <bmi08g_set_power_mode+0x94>
    {
        /*read the previous power state*/
        rslt = bmi08g_get_regs(BMI08_REG_GYRO_LPM1, &data, 1, dev);
 8001d0e:	f107 010c 	add.w	r1, r7, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	2011      	movs	r0, #17
 8001d18:	f7ff feeb 	bl	8001af2 <bmi08g_get_regs>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08_OK)
 8001d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d12d      	bne.n	8001d84 <bmi08g_set_power_mode+0x94>
        {
            power_mode = dev->gyro_cfg.power;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7cdb      	ldrb	r3, [r3, #19]
 8001d2c:	737b      	strb	r3, [r7, #13]

            /* Switching between normal mode and the suspend modes is allowed, it is not possible to switch
             * between suspend and deep suspend and vice versa. Check for invalid power switching,
             * (i.e) deep suspend to suspend */
            if ((power_mode == BMI08_GYRO_PM_SUSPEND) && (data == BMI08_GYRO_PM_DEEP_SUSPEND))
 8001d2e:	7b7b      	ldrb	r3, [r7, #13]
 8001d30:	2b80      	cmp	r3, #128	; 0x80
 8001d32:	d104      	bne.n	8001d3e <bmi08g_set_power_mode+0x4e>
 8001d34:	7b3b      	ldrb	r3, [r7, #12]
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d101      	bne.n	8001d3e <bmi08g_set_power_mode+0x4e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73bb      	strb	r3, [r7, #14]
            }

            /* Check for invalid power switching (i.e) from suspend to deep suspend */
            if ((power_mode == BMI08_GYRO_PM_DEEP_SUSPEND) && (data == BMI08_GYRO_PM_SUSPEND))
 8001d3e:	7b7b      	ldrb	r3, [r7, #13]
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d104      	bne.n	8001d4e <bmi08g_set_power_mode+0x5e>
 8001d44:	7b3b      	ldrb	r3, [r7, #12]
 8001d46:	2b80      	cmp	r3, #128	; 0x80
 8001d48:	d101      	bne.n	8001d4e <bmi08g_set_power_mode+0x5e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73bb      	strb	r3, [r7, #14]
            }

            /* Check if power switching mode is valid*/
            if (is_power_switching_mode_valid)
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d015      	beq.n	8001d80 <bmi08g_set_power_mode+0x90>
            {
                /* Write power to power register */
                rslt = bmi08g_set_regs(BMI08_REG_GYRO_LPM1, &power_mode, 1, dev);
 8001d54:	f107 010d 	add.w	r1, r7, #13
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2011      	movs	r0, #17
 8001d5e:	f7ff fef3 	bl	8001b48 <bmi08g_set_regs>
 8001d62:	4603      	mov	r3, r0
 8001d64:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08_OK)
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10a      	bne.n	8001d84 <bmi08g_set_power_mode+0x94>
                {
                    /* Time required to switch the power mode */
                    dev->delay_us(BMI08_MS_TO_US(BMI08_GYRO_POWER_MODE_CONFIG_DELAY), dev->intf_ptr_gyro);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6892      	ldr	r2, [r2, #8]
 8001d76:	4611      	mov	r1, r2
 8001d78:	f247 5030 	movw	r0, #30000	; 0x7530
 8001d7c:	4798      	blx	r3
 8001d7e:	e001      	b.n	8001d84 <bmi08g_set_power_mode+0x94>
                }
            }
            else
            {
                /* Updating the error */
                rslt = BMI08_E_INVALID_INPUT;
 8001d80:	23fb      	movs	r3, #251	; 0xfb
 8001d82:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <bmi08g_get_data>:
 * @brief This API reads the gyro data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08g_get_data(struct bmi08_sensor_data *gyro, struct bmi08_dev *dev)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001d9a:	6838      	ldr	r0, [r7, #0]
 8001d9c:	f000 f8a7 	bl	8001eee <null_ptr_check>
 8001da0:	4603      	mov	r3, r0
 8001da2:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (gyro != NULL))
 8001da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d140      	bne.n	8001e2e <bmi08g_get_data+0x9e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03d      	beq.n	8001e2e <bmi08g_get_data+0x9e>
    {
        /* read gyro sensor data */
        rslt = bmi08g_get_regs(BMI08_REG_GYRO_X_LSB, data, 6, dev);
 8001db2:	f107 010c 	add.w	r1, r7, #12
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2206      	movs	r2, #6
 8001dba:	2002      	movs	r0, #2
 8001dbc:	f7ff fe99 	bl	8001af2 <bmi08g_get_regs>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08_OK)
 8001dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d132      	bne.n	8001e32 <bmi08g_get_data+0xa2>
        {
            lsb = data[0];
 8001dcc:	7b3b      	ldrb	r3, [r7, #12]
 8001dce:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8001dd0:	7b7b      	ldrb	r3, [r7, #13]
 8001dd2:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001dd4:	7d7b      	ldrb	r3, [r7, #21]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	7dbb      	ldrb	r3, [r7, #22]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	827b      	strh	r3, [r7, #18]
            gyro->x = (int16_t)msblsb; /* Data in X axis */
 8001de4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001dec:	7bbb      	ldrb	r3, [r7, #14]
 8001dee:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001df4:	7d7b      	ldrb	r3, [r7, #21]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	7dbb      	ldrb	r3, [r7, #22]
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	827b      	strh	r3, [r7, #18]
            gyro->y = (int16_t)msblsb; /* Data in Y axis */
 8001e04:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8001e0c:	7c3b      	ldrb	r3, [r7, #16]
 8001e0e:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 8001e10:	7c7b      	ldrb	r3, [r7, #17]
 8001e12:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001e14:	7d7b      	ldrb	r3, [r7, #21]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	7dbb      	ldrb	r3, [r7, #22]
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	827b      	strh	r3, [r7, #18]
            gyro->z = (int16_t)msblsb; /* Data in Z axis */
 8001e24:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08_OK)
 8001e2c:	e001      	b.n	8001e32 <bmi08g_get_data+0xa2>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 8001e2e:	23ff      	movs	r3, #255	; 0xff
 8001e30:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <bmi08g_set_int_config>:
 * @brief This API configures the necessary gyro interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08g_set_int_config(const struct bmi08_gyro_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f000 f850 	bl	8001eee <null_ptr_check>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08_OK) && (int_config != NULL))
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d11e      	bne.n	8001e98 <bmi08g_set_int_config+0x5a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01b      	beq.n	8001e98 <bmi08g_set_int_config+0x5a>
    {

        switch (int_config->int_type)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <bmi08g_set_int_config+0x36>
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db11      	blt.n	8001e90 <bmi08g_set_int_config+0x52>
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d80e      	bhi.n	8001e90 <bmi08g_set_int_config+0x52>
 8001e72:	e006      	b.n	8001e82 <bmi08g_set_int_config+0x44>
        {
            case BMI08_GYRO_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_gyro_data_ready_int(int_config, dev);
 8001e74:	6839      	ldr	r1, [r7, #0]
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8dd 	bl	8002036 <set_gyro_data_ready_int>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]
                break;
 8001e80:	e009      	b.n	8001e96 <bmi08g_set_int_config+0x58>
            case BMI08_GYRO_INT_FIFO_WM:
            case BMI08_GYRO_INT_FIFO_FULL:

                /* FIFO interrupt */
                rslt = set_fifo_int(int_config, dev);
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f948 	bl	800211a <set_fifo_int>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
                break;
 8001e8e:	e002      	b.n	8001e96 <bmi08g_set_int_config+0x58>

            default:
                rslt = BMI08_E_INVALID_CONFIG;
 8001e90:	23f8      	movs	r3, #248	; 0xf8
 8001e92:	73fb      	strb	r3, [r7, #15]
                break;
 8001e94:	bf00      	nop
        switch (int_config->int_type)
 8001e96:	e001      	b.n	8001e9c <bmi08g_set_int_config+0x5e>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 8001e98:	23ff      	movs	r3, #255	; 0xff
 8001e9a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <bmi08g_get_data_int_status>:

/*!
 * @brief This internal API gets gyro data ready interrupt status
 */
int8_t bmi08g_get_data_int_status(uint8_t *int_status, struct bmi08_dev *dev)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t status = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73bb      	strb	r3, [r7, #14]

    if (int_status != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d010      	beq.n	8001ede <bmi08g_get_data_int_status+0x36>
    {
        rslt = bmi08g_get_regs(BMI08_REG_GYRO_INT_STAT_1, &status, 1, dev);
 8001ebc:	f107 010e 	add.w	r1, r7, #14
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	200a      	movs	r0, #10
 8001ec6:	f7ff fe14 	bl	8001af2 <bmi08g_get_regs>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI08_OK)
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <bmi08g_get_data_int_status+0x3a>
        {
            (*int_status) = status;
 8001ed6:	7bba      	ldrb	r2, [r7, #14]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e001      	b.n	8001ee2 <bmi08g_get_data_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMI08_E_NULL_PTR;
 8001ede:	23ff      	movs	r3, #255	; 0xff
 8001ee0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08_dev *dev)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00b      	beq.n	8001f14 <null_ptr_check+0x26>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <null_ptr_check+0x26>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <null_ptr_check+0x26>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08_E_NULL_PTR;
 8001f14:	23ff      	movs	r3, #255	; 0xff
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e001      	b.n	8001f1e <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <get_regs>:

/*!
 * @brief This API reads the data from the given register address of gyro sensor.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 8001f2e:	b590      	push	{r4, r7, lr}
 8001f30:	b087      	sub	sp, #28
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08_SPI_INTF)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	7b1b      	ldrb	r3, [r3, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d103      	bne.n	8001f52 <get_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr | BMI08_SPI_RD_MASK);
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f50:	73fb      	strb	r3, [r7, #15]
    }

    /* Read gyro register */
    dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	7bf8      	ldrb	r0, [r7, #15]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	47a0      	blx	r4
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if (dev->intf_rslt != BMI08_INTF_RET_SUCCESS)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <get_regs+0x4c>
    {
        /* Updating the error */
        rslt = BMI08_E_COM_FAIL;
 8001f76:	23fe      	movs	r3, #254	; 0xfe
 8001f78:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}

08001f86 <set_regs>:

/*!
 * @brief This API writes the given data to the register address of gyro sensor.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08_dev *dev)
{
 8001f86:	b590      	push	{r4, r7, lr}
 8001f88:	b087      	sub	sp, #28
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4603      	mov	r3, r0
 8001f94:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	75bb      	strb	r3, [r7, #22]

    if (dev->intf == BMI08_SPI_INTF)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	7b1b      	ldrb	r3, [r3, #12]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d103      	bne.n	8001fae <set_regs+0x28>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08_SPI_WR_MASK);
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fac:	73fb      	strb	r3, [r7, #15]
    }

    /* SPI write requires to set The MSB of reg_addr as 0
     * but in default the MSB is always 0
     */
    if (len == 1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d113      	bne.n	8001fdc <set_regs+0x56>
    {
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	7bf8      	ldrb	r0, [r7, #15]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	47a0      	blx	r4
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if (dev->intf_rslt != BMI08_INTF_RET_SUCCESS)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <set_regs+0x56>
        {
            /* Failure case */
            rslt = BMI08_E_COM_FAIL;
 8001fd8:	23fe      	movs	r3, #254	; 0xfe
 8001fda:	75fb      	strb	r3, [r7, #23]

    /* Burst write is not allowed thus we split burst case write
     * into single byte writes Thus user can write multiple bytes
     * with ease
     */
    if (len > 1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d923      	bls.n	800202a <set_regs+0xa4>
    {
        for (count = 0; count < len; count++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75bb      	strb	r3, [r7, #22]
 8001fe6:	e01c      	b.n	8002022 <set_regs+0x9c>
        {
            dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr_gyro);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001fec:	7dbb      	ldrb	r3, [r7, #22]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	18d1      	adds	r1, r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	7bf8      	ldrb	r0, [r7, #15]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	47a0      	blx	r4
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            reg_addr++;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	3301      	adds	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]

            if (dev->intf_rslt != BMI08_INTF_RET_SUCCESS)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <set_regs+0x96>
            {
                /* Failure case */
                rslt = BMI08_E_COM_FAIL;
 8002016:	23fe      	movs	r3, #254	; 0xfe
 8002018:	75fb      	strb	r3, [r7, #23]
                break;
 800201a:	e006      	b.n	800202a <set_regs+0xa4>
        for (count = 0; count < len; count++)
 800201c:	7dbb      	ldrb	r3, [r7, #22]
 800201e:	3301      	adds	r3, #1
 8002020:	75bb      	strb	r3, [r7, #22]
 8002022:	7dbb      	ldrb	r3, [r7, #22]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d8de      	bhi.n	8001fe8 <set_regs+0x62>
            }
        }
    }

    return rslt;
 800202a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800202e:	4618      	mov	r0, r3
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd90      	pop	{r4, r7, pc}

08002036 <set_gyro_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_gyro_data_ready_int(const struct bmi08_gyro_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8002040:	2300      	movs	r3, #0
 8002042:	81bb      	strh	r3, [r7, #12]

    /* read interrupt map register */
    rslt = get_regs(BMI08_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8002044:	f107 010c 	add.w	r1, r7, #12
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2201      	movs	r2, #1
 800204c:	2018      	movs	r0, #24
 800204e:	f7ff ff6e 	bl	8001f2e <get_regs>
 8002052:	4603      	mov	r3, r0
 8002054:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 8002056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d157      	bne.n	800210e <set_gyro_data_ready_int+0xd8>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	791b      	ldrb	r3, [r3, #4]
 8002062:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <set_gyro_data_ready_int+0x3c>
 800206c:	2b01      	cmp	r3, #1
 800206e:	d00f      	beq.n	8002090 <set_gyro_data_ready_int+0x5a>
 8002070:	e01b      	b.n	80020aa <set_gyro_data_ready_int+0x74>
        {
            case BMI08_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08_SET_BITS_POS_0(data[0], BMI08_GYRO_INT3_MAP, conf);
 8002072:	7b3b      	ldrb	r3, [r7, #12]
 8002074:	b25b      	sxtb	r3, r3
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	b25a      	sxtb	r2, r3
 800207c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	b25b      	sxtb	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	b25b      	sxtb	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	733b      	strb	r3, [r7, #12]
                break;
 800208e:	e00f      	b.n	80020b0 <set_gyro_data_ready_int+0x7a>

            case BMI08_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08_SET_BITS(data[0], BMI08_GYRO_INT4_MAP, conf);
 8002090:	7b3b      	ldrb	r3, [r7, #12]
 8002092:	b25b      	sxtb	r3, r3
 8002094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002098:	b25a      	sxtb	r2, r3
 800209a:	7bbb      	ldrb	r3, [r7, #14]
 800209c:	01db      	lsls	r3, r3, #7
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	733b      	strb	r3, [r7, #12]
                break;
 80020a8:	e002      	b.n	80020b0 <set_gyro_data_ready_int+0x7a>

            default:
                rslt = BMI08_E_INVALID_INPUT;
 80020aa:	23fb      	movs	r3, #251	; 0xfb
 80020ac:	73fb      	strb	r3, [r7, #15]
                break;
 80020ae:	bf00      	nop
        }

        if (rslt == BMI08_OK)
 80020b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d12a      	bne.n	800210e <set_gyro_data_ready_int+0xd8>
        {
            /*condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08_GYRO_MAP_DRDY_TO_BOTH_INT3_INT4)
 80020b8:	7b3b      	ldrb	r3, [r7, #12]
 80020ba:	f003 0381 	and.w	r3, r3, #129	; 0x81
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <set_gyro_data_ready_int+0x92>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08_GYRO_DRDY_INT_ENABLE_VAL;
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	737b      	strb	r3, [r7, #13]
 80020c6:	e001      	b.n	80020cc <set_gyro_data_ready_int+0x96>
            }
            else
            {
                data[1] = BMI08_GYRO_DRDY_INT_DISABLE_VAL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 80020cc:	f107 010c 	add.w	r1, r7, #12
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	2018      	movs	r0, #24
 80020d6:	f7ff fd37 	bl	8001b48 <bmi08g_set_regs>
 80020da:	4603      	mov	r3, r0
 80020dc:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 80020de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d113      	bne.n	800210e <set_gyro_data_ready_int+0xd8>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 80020e6:	6839      	ldr	r1, [r7, #0]
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f88c 	bl	8002206 <set_int_pin_config>
 80020ee:	4603      	mov	r3, r0
 80020f0:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08_OK)
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <set_gyro_data_ready_int+0xd8>
                {
                    /* Write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2201      	movs	r2, #1
 8002104:	2015      	movs	r0, #21
 8002106:	f7ff fd1f 	bl	8001b48 <bmi08g_set_regs>
 800210a:	4603      	mov	r3, r0
 800210c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <set_fifo_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_fifo_int(const struct bmi08_gyro_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8002124:	2300      	movs	r3, #0
 8002126:	81bb      	strh	r3, [r7, #12]

    /* Read interrupt map register */
    rslt = get_regs(BMI08_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8002128:	f107 010c 	add.w	r1, r7, #12
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2201      	movs	r2, #1
 8002130:	2018      	movs	r0, #24
 8002132:	f7ff fefc 	bl	8001f2e <get_regs>
 8002136:	4603      	mov	r3, r0
 8002138:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d15b      	bne.n	80021fa <set_fifo_int+0xe0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	791b      	ldrb	r3, [r3, #4]
 8002146:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <set_fifo_int+0x3c>
 8002150:	2b01      	cmp	r3, #1
 8002152:	d010      	beq.n	8002176 <set_fifo_int+0x5c>
 8002154:	e01f      	b.n	8002196 <set_fifo_int+0x7c>
        {
            case BMI08_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08_SET_BITS(data[0], BMI08_GYRO_FIFO_INT3, conf);
 8002156:	7b3b      	ldrb	r3, [r7, #12]
 8002158:	b25b      	sxtb	r3, r3
 800215a:	f023 0304 	bic.w	r3, r3, #4
 800215e:	b25a      	sxtb	r2, r3
 8002160:	7bbb      	ldrb	r3, [r7, #14]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	b25b      	sxtb	r3, r3
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	b25b      	sxtb	r3, r3
 800216c:	4313      	orrs	r3, r2
 800216e:	b25b      	sxtb	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	733b      	strb	r3, [r7, #12]
                break;
 8002174:	e012      	b.n	800219c <set_fifo_int+0x82>

            case BMI08_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08_SET_BITS(data[0], BMI08_GYRO_FIFO_INT4, conf);
 8002176:	7b3b      	ldrb	r3, [r7, #12]
 8002178:	b25b      	sxtb	r3, r3
 800217a:	f023 0320 	bic.w	r3, r3, #32
 800217e:	b25a      	sxtb	r2, r3
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	015b      	lsls	r3, r3, #5
 8002184:	b25b      	sxtb	r3, r3
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	b25b      	sxtb	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b25b      	sxtb	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	733b      	strb	r3, [r7, #12]
                break;
 8002194:	e002      	b.n	800219c <set_fifo_int+0x82>

            default:
                rslt = BMI08_E_INVALID_INPUT;
 8002196:	23fb      	movs	r3, #251	; 0xfb
 8002198:	73fb      	strb	r3, [r7, #15]
                break;
 800219a:	bf00      	nop
        }

        if (rslt == BMI08_OK)
 800219c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d12a      	bne.n	80021fa <set_fifo_int+0xe0>
        {
            /* Condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08_GYRO_MAP_FIFO_BOTH_INT3_INT4)
 80021a4:	7b3b      	ldrb	r3, [r7, #12]
 80021a6:	f003 0324 	and.w	r3, r3, #36	; 0x24
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <set_fifo_int+0x9a>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08_GYRO_FIFO_INT_ENABLE_VAL;
 80021ae:	2340      	movs	r3, #64	; 0x40
 80021b0:	737b      	strb	r3, [r7, #13]
 80021b2:	e001      	b.n	80021b8 <set_fifo_int+0x9e>
            }
            else
            {
                data[1] = BMI08_GYRO_FIFO_INT_DISABLE_VAL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 80021b8:	f107 010c 	add.w	r1, r7, #12
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2201      	movs	r2, #1
 80021c0:	2018      	movs	r0, #24
 80021c2:	f7ff fcc1 	bl	8001b48 <bmi08g_set_regs>
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08_OK)
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d113      	bne.n	80021fa <set_fifo_int+0xe0>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 80021d2:	6839      	ldr	r1, [r7, #0]
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f816 	bl	8002206 <set_int_pin_config>
 80021da:	4603      	mov	r3, r0
 80021dc:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08_OK)
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <set_fifo_int+0xe0>
                {
                    /* write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	1c59      	adds	r1, r3, #1
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2201      	movs	r2, #1
 80021f0:	2015      	movs	r0, #21
 80021f2:	f7ff fca9 	bl	8001b48 <bmi08g_set_regs>
 80021f6:	4603      	mov	r3, r0
 80021f8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08_gyro_int_channel_cfg *int_config, struct bmi08_dev *dev)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read interrupt configuration register */
    rslt = get_regs(BMI08_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 8002210:	f107 010e 	add.w	r1, r7, #14
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	2016      	movs	r0, #22
 800221a:	f7ff fe88 	bl	8001f2e <get_regs>
 800221e:	4603      	mov	r3, r0
 8002220:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d150      	bne.n	80022cc <set_int_pin_config+0xc6>
    {
        switch (int_config->int_channel)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <set_int_pin_config+0x32>
 8002232:	2b01      	cmp	r3, #1
 8002234:	d020      	beq.n	8002278 <set_int_pin_config+0x72>
                data = BMI08_SET_BITS(data, BMI08_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
                data = BMI08_SET_BITS(data, BMI08_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
                break;

            default:
                break;
 8002236:	e040      	b.n	80022ba <set_int_pin_config+0xb4>
                data = BMI08_SET_BITS_POS_0(data, BMI08_GYRO_INT3_LVL, int_config->int_pin_cfg.lvl);
 8002238:	7bbb      	ldrb	r3, [r7, #14]
 800223a:	b25b      	sxtb	r3, r3
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	b25a      	sxtb	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	789b      	ldrb	r3, [r3, #2]
 8002246:	b25b      	sxtb	r3, r3
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	b25b      	sxtb	r3, r3
 800224e:	4313      	orrs	r3, r2
 8002250:	b25b      	sxtb	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	73bb      	strb	r3, [r7, #14]
                data = BMI08_SET_BITS(data, BMI08_GYRO_INT3_OD, int_config->int_pin_cfg.output_mode);
 8002256:	7bbb      	ldrb	r3, [r7, #14]
 8002258:	b25b      	sxtb	r3, r3
 800225a:	f023 0302 	bic.w	r3, r3, #2
 800225e:	b25a      	sxtb	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	78db      	ldrb	r3, [r3, #3]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	b25b      	sxtb	r3, r3
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	b25b      	sxtb	r3, r3
 800226e:	4313      	orrs	r3, r2
 8002270:	b25b      	sxtb	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	73bb      	strb	r3, [r7, #14]
                break;
 8002276:	e020      	b.n	80022ba <set_int_pin_config+0xb4>
                data = BMI08_SET_BITS(data, BMI08_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
 8002278:	7bbb      	ldrb	r3, [r7, #14]
 800227a:	b25b      	sxtb	r3, r3
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	b25a      	sxtb	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	789b      	ldrb	r3, [r3, #2]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	b25b      	sxtb	r3, r3
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	b25b      	sxtb	r3, r3
 8002290:	4313      	orrs	r3, r2
 8002292:	b25b      	sxtb	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	73bb      	strb	r3, [r7, #14]
                data = BMI08_SET_BITS(data, BMI08_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
 8002298:	7bbb      	ldrb	r3, [r7, #14]
 800229a:	b25b      	sxtb	r3, r3
 800229c:	f023 0308 	bic.w	r3, r3, #8
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	78db      	ldrb	r3, [r3, #3]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	4313      	orrs	r3, r2
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	73bb      	strb	r3, [r7, #14]
                break;
 80022b8:	bf00      	nop
        }

        /* write to interrupt configuration register */
        rslt = bmi08g_set_regs(BMI08_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 80022ba:	f107 010e 	add.w	r1, r7, #14
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	2016      	movs	r0, #22
 80022c4:	f7ff fc40 	bl	8001b48 <bmi08g_set_regs>
 80022c8:	4603      	mov	r3, r0
 80022ca:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80022cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <bmi08xa_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08xa_init(struct bmi08_dev *dev)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bmi08a_init(dev);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7fe fe53 	bl	8000f8c <bmi08a_init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08_OK)
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <bmi08xa_init+0x46>
    {
        /* Check for chip id validity */
        if (((dev->variant == BMI085_VARIANT) && (dev->accel_chip_id == BMI085_ACCEL_CHIP_ID)) ||
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7b5b      	ldrb	r3, [r3, #13]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d103      	bne.n	8002302 <bmi08xa_init+0x2a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b1f      	cmp	r3, #31
 8002300:	d007      	beq.n	8002312 <bmi08xa_init+0x3a>
            ((dev->variant == BMI088_VARIANT) && (dev->accel_chip_id == BMI088_ACCEL_CHIP_ID)))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7b5b      	ldrb	r3, [r3, #13]
        if (((dev->variant == BMI085_VARIANT) && (dev->accel_chip_id == BMI085_ACCEL_CHIP_ID)) ||
 8002306:	2b01      	cmp	r3, #1
 8002308:	d107      	bne.n	800231a <bmi08xa_init+0x42>
            ((dev->variant == BMI088_VARIANT) && (dev->accel_chip_id == BMI088_ACCEL_CHIP_ID)))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b1e      	cmp	r3, #30
 8002310:	d103      	bne.n	800231a <bmi08xa_init+0x42>
        {
            /* Assign stream file */
            dev->config_file_ptr = bmi08x_config_file;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a05      	ldr	r2, [pc, #20]	; (800232c <bmi08xa_init+0x54>)
 8002316:	621a      	str	r2, [r3, #32]
 8002318:	e001      	b.n	800231e <bmi08xa_init+0x46>
        }
        else
        {
            rslt = BMI08_E_DEV_NOT_FOUND;
 800231a:	23fd      	movs	r3, #253	; 0xfd
 800231c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	0800a13c 	.word	0x0800a13c

08002330 <bmi08xa_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08xa_set_meas_conf(struct bmi08_dev *dev)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8002338:	2300      	movs	r3, #0
 800233a:	813b      	strh	r3, [r7, #8]
    uint8_t range, bw, odr;
    uint8_t is_range_invalid = FALSE;
 800233c:	2300      	movs	r3, #0
 800233e:	73bb      	strb	r3, [r7, #14]

    /* Check validity of ODR and BW */
    rslt = bmi08a_set_meas_conf(dev);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe ff6a 	bl	800121a <bmi08a_set_meas_conf>
 8002346:	4603      	mov	r3, r0
 8002348:	73fb      	strb	r3, [r7, #15]

    /* Proceed if ODR and BW are valid */
    if (rslt == BMI08_OK)
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d16a      	bne.n	8002428 <bmi08xa_set_meas_conf+0xf8>
    {
        odr = dev->accel_cfg.odr;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7c9b      	ldrb	r3, [r3, #18]
 8002356:	737b      	strb	r3, [r7, #13]
        bw = dev->accel_cfg.bw;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7c5b      	ldrb	r3, [r3, #17]
 800235c:	733b      	strb	r3, [r7, #12]
        range = dev->accel_cfg.range;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	7c1b      	ldrb	r3, [r3, #16]
 8002362:	72fb      	strb	r3, [r7, #11]

        if (dev->variant == BMI085_VARIANT)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7b5b      	ldrb	r3, [r3, #13]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d104      	bne.n	8002376 <bmi08xa_set_meas_conf+0x46>
        {
            /* Check for valid Range */
            if (range > BMI085_ACCEL_RANGE_16G)
 800236c:	7afb      	ldrb	r3, [r7, #11]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d901      	bls.n	8002376 <bmi08xa_set_meas_conf+0x46>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 8002372:	2301      	movs	r3, #1
 8002374:	73bb      	strb	r3, [r7, #14]
            }
        }

        if (dev->variant == BMI088_VARIANT)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7b5b      	ldrb	r3, [r3, #13]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d104      	bne.n	8002388 <bmi08xa_set_meas_conf+0x58>
        {
            /* Check for valid Range */
            if (range > BMI088_ACCEL_RANGE_24G)
 800237e:	7afb      	ldrb	r3, [r7, #11]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d901      	bls.n	8002388 <bmi08xa_set_meas_conf+0x58>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 8002384:	2301      	movs	r3, #1
 8002386:	73bb      	strb	r3, [r7, #14]
            }
        }

        /* If Range is valid, write it to accel config registers */
        if (!is_range_invalid)
 8002388:	7bbb      	ldrb	r3, [r7, #14]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d14a      	bne.n	8002424 <bmi08xa_set_meas_conf+0xf4>
        {
            /* Read accel config. register */
            rslt = bmi08a_get_regs(BMI08_REG_ACCEL_CONF, data, 2, dev);
 800238e:	f107 0108 	add.w	r1, r7, #8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2202      	movs	r2, #2
 8002396:	2040      	movs	r0, #64	; 0x40
 8002398:	f7fe fece 	bl	8001138 <bmi08a_get_regs>
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI08_OK)
 80023a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d13f      	bne.n	8002428 <bmi08xa_set_meas_conf+0xf8>
            {
                /* Update data with new odr and bw values */
                data[0] = BMI08_SET_BITS_POS_0(data[0], BMI08_ACCEL_ODR, odr);
 80023a8:	7a3b      	ldrb	r3, [r7, #8]
 80023aa:	b25b      	sxtb	r3, r3
 80023ac:	f023 030f 	bic.w	r3, r3, #15
 80023b0:	b25a      	sxtb	r2, r3
 80023b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	b25b      	sxtb	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	723b      	strb	r3, [r7, #8]
                data[0] = BMI08_SET_BITS(data[0], BMI08_ACCEL_BW, bw);
 80023c4:	7a3b      	ldrb	r3, [r7, #8]
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	b25a      	sxtb	r2, r3
 80023ce:	7b3b      	ldrb	r3, [r7, #12]
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	b25b      	sxtb	r3, r3
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b25b      	sxtb	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	723b      	strb	r3, [r7, #8]

                /* Update data with current range values */
                data[1] = BMI08_SET_BITS_POS_0(data[1], BMI08_ACCEL_RANGE, range);
 80023dc:	7a7b      	ldrb	r3, [r7, #9]
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	f023 0303 	bic.w	r3, r3, #3
 80023e4:	b25a      	sxtb	r2, r3
 80023e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	b25b      	sxtb	r3, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	727b      	strb	r3, [r7, #9]

                /* write to range register */
                rslt = bmi08a_set_regs(BMI08_REG_ACCEL_CONF, data, 2, dev);
 80023f8:	f107 0108 	add.w	r1, r7, #8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	2040      	movs	r0, #64	; 0x40
 8002402:	f7fe fec4 	bl	800118e <bmi08a_set_regs>
 8002406:	4603      	mov	r3, r0
 8002408:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08_OK)
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10a      	bne.n	8002428 <bmi08xa_set_meas_conf+0xf8>
                {
                    /* Delay required to set accel configurations */
                    dev->delay_us(BMI08_SET_ACCEL_CONF_DELAY * 1000, dev->intf_ptr_accel);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6852      	ldr	r2, [r2, #4]
 800241a:	4611      	mov	r1, r2
 800241c:	f649 4040 	movw	r0, #40000	; 0x9c40
 8002420:	4798      	blx	r3
 8002422:	e001      	b.n	8002428 <bmi08xa_set_meas_conf+0xf8>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, BW, Range */
            rslt = BMI08_E_INVALID_CONFIG;
 8002424:	23f8      	movs	r3, #248	; 0xf8
 8002426:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002428:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <bmi08_i2c_read>:

/*!
 * I2C read function map to COINES platform
 */
BMI08_INTF_RET_TYPE bmi08_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b08b      	sub	sp, #44	; 0x2c
 8002438:	af04      	add	r7, sp, #16
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	4603      	mov	r3, r0
 8002442:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	75fb      	strb	r3, [r7, #23]

	return HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, len, reg_data, len, HAL_MAX_DELAY);
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	b299      	uxth	r1, r3
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	b298      	uxth	r0, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	b29b      	uxth	r3, r3
 800245a:	f04f 34ff 	mov.w	r4, #4294967295
 800245e:	9402      	str	r4, [sp, #8]
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	4603      	mov	r3, r0
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <bmi08_i2c_read+0x48>)
 800246a:	f001 fe05 	bl	8004078 <HAL_I2C_Mem_Read>
 800246e:	4603      	mov	r3, r0
 8002470:	b25b      	sxtb	r3, r3

    //HAL_I2C_Master_Transmit(&hi2c1, dev_addr, &reg_addr, len, HAL_MAX_DELAY); //Tell BMI088 to read sensor data and store in register
    //HAL_I2C_Master_Receive(&hi2c1, dev_addr, &received_data, len, HAL_MAX_DELAY); //Read from BMI088 registers
   // return 0;
    //return coines_read_i2c(COINES_I2C_BUS_0, dev_addr, reg_addr, reg_data, (uint16_t)len);
}
 8002472:	4618      	mov	r0, r3
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd90      	pop	{r4, r7, pc}
 800247a:	bf00      	nop
 800247c:	200001fc 	.word	0x200001fc

08002480 <bmi08_i2c_write>:

/*!
 * I2C write function map to COINES platform
 */
BMI08_INTF_RET_TYPE bmi08_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b08b      	sub	sp, #44	; 0x2c
 8002484:	af04      	add	r7, sp, #16
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
    uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	75fb      	strb	r3, [r7, #23]
    return HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, len, reg_data, len, HAL_MAX_DELAY);
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	b299      	uxth	r1, r3
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	b298      	uxth	r0, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f04f 34ff 	mov.w	r4, #4294967295
 80024aa:	9402      	str	r4, [sp, #8]
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	4603      	mov	r3, r0
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <bmi08_i2c_write+0x48>)
 80024b6:	f001 fce5 	bl	8003e84 <HAL_I2C_Mem_Write>
 80024ba:	4603      	mov	r3, r0
 80024bc:	b25b      	sxtb	r3, r3
   // return 0;
    //return coines_write_i2c(COINES_I2C_BUS_0, dev_addr, reg_addr, (uint8_t *)reg_data, (uint16_t)len);
}
 80024be:	4618      	mov	r0, r3
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200001fc 	.word	0x200001fc

080024cc <bmi08_delay_us>:

/*!
 * Delay function map to COINES platform
 */
void bmi08_delay_us(uint32_t period, void *intf_ptr)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <bmi08_delay_us+0x2c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1));
 80024de:	bf00      	nop
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <bmi08_delay_us+0x2c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1fa      	bne.n	80024e0 <bmi08_delay_us+0x14>
	(void)intf_ptr;
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	20000250 	.word	0x20000250

080024fc <bmi08_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi08_interface_init(struct bmi08_dev *bmi08, uint8_t intf, uint8_t variant)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]
 8002508:	4613      	mov	r3, r2
 800250a:	70bb      	strb	r3, [r7, #2]
    int8_t rslt = BMI08_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
//                    "This application will not support this sensor \n");
//            }
//        }
//
//        (void)coines_set_shuttleboard_vdd_vddio_config(0, 0);
        HAL_Delay(10);
 8002510:	200a      	movs	r0, #10
 8002512:	f001 f8bb 	bl	800368c <HAL_Delay>

        /* Bus configuration : I2C */
        if (intf == BMI08_I2C_INTF)
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d114      	bne.n	8002546 <bmi08_interface_init+0x4a>
        {
            printf("I2C Interface \n");
 800251c:	4816      	ldr	r0, [pc, #88]	; (8002578 <bmi08_interface_init+0x7c>)
 800251e:	f004 fbc5 	bl	8006cac <puts>

            /* To initialize the user I2C function */
            acc_dev_add = BMI08_ACCEL_I2C_ADDR_PRIMARY;
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <bmi08_interface_init+0x80>)
 8002524:	2218      	movs	r2, #24
 8002526:	701a      	strb	r2, [r3, #0]
            gyro_dev_add = BMI08_GYRO_I2C_ADDR_PRIMARY;
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <bmi08_interface_init+0x84>)
 800252a:	2268      	movs	r2, #104	; 0x68
 800252c:	701a      	strb	r2, [r3, #0]
            bmi08->intf = BMI08_I2C_INTF;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	731a      	strb	r2, [r3, #12]
            bmi08->read = bmi08_i2c_read;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a13      	ldr	r2, [pc, #76]	; (8002584 <bmi08_interface_init+0x88>)
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
            bmi08->write = bmi08_i2c_write;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a12      	ldr	r2, [pc, #72]	; (8002588 <bmi08_interface_init+0x8c>)
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* PS pin is made high for selecting I2C protocol (gyroscope)*/
            //(void)coines_set_pin_config(COINES_SHUTTLE_PIN_9, COINES_PIN_DIRECTION_OUT, COINES_PIN_VALUE_HIGH);

            //(void)coines_config_i2c_bus(COINES_I2C_BUS_0, COINES_I2C_STANDARD_MODE);
            HAL_Delay(10);
 8002540:	200a      	movs	r0, #10
 8002542:	f001 f8a3 	bl	800368c <HAL_Delay>
//            coines_delay_msec(10);
//            (void)coines_config_spi_bus(COINES_SPI_BUS_0, COINES_SPI_SPEED_5_MHZ, COINES_SPI_MODE3);
//        }

        /* Selection of bmi085 or bmi088 sensor variant */
        bmi08->variant = (enum bmi08_variant)variant;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	78ba      	ldrb	r2, [r7, #2]
 800254a:	735a      	strb	r2, [r3, #13]

        /* Assign accel device address to accel interface pointer */
        bmi08->intf_ptr_accel = &acc_dev_add;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a0b      	ldr	r2, [pc, #44]	; (800257c <bmi08_interface_init+0x80>)
 8002550:	605a      	str	r2, [r3, #4]

        /* Assign gyro device address to gyro interface pointer */
        bmi08->intf_ptr_gyro = &gyro_dev_add;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <bmi08_interface_init+0x84>)
 8002556:	609a      	str	r2, [r3, #8]
        //bmi08->accel_chip_id = 0x1E;

        //bmi08->gyro_chip_id = 0x0F;

        /* Configure delay in microseconds */
        bmi08->delay_us = bmi08_delay_us;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a0c      	ldr	r2, [pc, #48]	; (800258c <bmi08_interface_init+0x90>)
 800255c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
        bmi08->read_write_len = BMI08_READ_WRITE_LEN;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	222e      	movs	r2, #46	; 0x2e
 8002562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        HAL_Delay(10);
 8002566:	200a      	movs	r0, #10
 8002568:	f001 f890 	bl	800368c <HAL_Delay>
//    else
//    {
//        rslt = BMI08_E_NULL_PTR;
//    }

    return rslt;
 800256c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	08009c68 	.word	0x08009c68
 800257c:	200001f8 	.word	0x200001f8
 8002580:	200001f9 	.word	0x200001f9
 8002584:	08002435 	.word	0x08002435
 8002588:	08002481 	.word	0x08002481
 800258c:	080024cd 	.word	0x080024cd

08002590 <bmi08_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi08_error_codes_print_result(const char api_name[], int8_t rslt)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMI08_OK)
 800259c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8081 	beq.w	80026a8 <bmi08_error_codes_print_result+0x118>
    {
        printf("%s\t", api_name);
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4841      	ldr	r0, [pc, #260]	; (80026b0 <bmi08_error_codes_print_result+0x120>)
 80025aa:	f004 faf9 	bl	8006ba0 <iprintf>
        if (rslt == BMI08_E_NULL_PTR)
 80025ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b6:	d106      	bne.n	80025c6 <bmi08_error_codes_print_result+0x36>
        {
            printf("Error [%d] : Null pointer\r\n", rslt);
 80025b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025bc:	4619      	mov	r1, r3
 80025be:	483d      	ldr	r0, [pc, #244]	; (80026b4 <bmi08_error_codes_print_result+0x124>)
 80025c0:	f004 faee 	bl	8006ba0 <iprintf>
        else
        {
            printf("Error [%d] : Unknown error code\r\n", rslt);
        }
    }
}
 80025c4:	e070      	b.n	80026a8 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_COM_FAIL)
 80025c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ca:	f113 0f02 	cmn.w	r3, #2
 80025ce:	d106      	bne.n	80025de <bmi08_error_codes_print_result+0x4e>
            printf("Error [%d] : Communication failure\r\n", rslt);
 80025d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d4:	4619      	mov	r1, r3
 80025d6:	4838      	ldr	r0, [pc, #224]	; (80026b8 <bmi08_error_codes_print_result+0x128>)
 80025d8:	f004 fae2 	bl	8006ba0 <iprintf>
}
 80025dc:	e064      	b.n	80026a8 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_DEV_NOT_FOUND)
 80025de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025e2:	f113 0f03 	cmn.w	r3, #3
 80025e6:	d106      	bne.n	80025f6 <bmi08_error_codes_print_result+0x66>
            printf("Error [%d] : Device not found\r\n", rslt);
 80025e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ec:	4619      	mov	r1, r3
 80025ee:	4833      	ldr	r0, [pc, #204]	; (80026bc <bmi08_error_codes_print_result+0x12c>)
 80025f0:	f004 fad6 	bl	8006ba0 <iprintf>
}
 80025f4:	e058      	b.n	80026a8 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_OUT_OF_RANGE)
 80025f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025fa:	f113 0f04 	cmn.w	r3, #4
 80025fe:	d106      	bne.n	800260e <bmi08_error_codes_print_result+0x7e>
            printf("Error [%d] : Out of Range\r\n", rslt);
 8002600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002604:	4619      	mov	r1, r3
 8002606:	482e      	ldr	r0, [pc, #184]	; (80026c0 <bmi08_error_codes_print_result+0x130>)
 8002608:	f004 faca 	bl	8006ba0 <iprintf>
}
 800260c:	e04c      	b.n	80026a8 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_INVALID_INPUT)
 800260e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002612:	f113 0f05 	cmn.w	r3, #5
 8002616:	d106      	bne.n	8002626 <bmi08_error_codes_print_result+0x96>
            printf("Error [%d] : Invalid input\r\n", rslt);
 8002618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800261c:	4619      	mov	r1, r3
 800261e:	4829      	ldr	r0, [pc, #164]	; (80026c4 <bmi08_error_codes_print_result+0x134>)
 8002620:	f004 fabe 	bl	8006ba0 <iprintf>
}
 8002624:	e040      	b.n	80026a8 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_CONFIG_STREAM_ERROR)
 8002626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800262a:	f113 0f06 	cmn.w	r3, #6
 800262e:	d106      	bne.n	800263e <bmi08_error_codes_print_result+0xae>
            printf("Error [%d] : Config stream error\r\n", rslt);
 8002630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002634:	4619      	mov	r1, r3
 8002636:	4824      	ldr	r0, [pc, #144]	; (80026c8 <bmi08_error_codes_print_result+0x138>)
 8002638:	f004 fab2 	bl	8006ba0 <iprintf>
}
 800263c:	e034      	b.n	80026a8 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_RD_WR_LENGTH_INVALID)
 800263e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002642:	f113 0f07 	cmn.w	r3, #7
 8002646:	d106      	bne.n	8002656 <bmi08_error_codes_print_result+0xc6>
            printf("Error [%d] : Invalid Read write length\r\n", rslt);
 8002648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800264c:	4619      	mov	r1, r3
 800264e:	481f      	ldr	r0, [pc, #124]	; (80026cc <bmi08_error_codes_print_result+0x13c>)
 8002650:	f004 faa6 	bl	8006ba0 <iprintf>
}
 8002654:	e028      	b.n	80026a8 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_INVALID_CONFIG)
 8002656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265a:	f113 0f08 	cmn.w	r3, #8
 800265e:	d106      	bne.n	800266e <bmi08_error_codes_print_result+0xde>
            printf("Error [%d] : Invalid config\r\n", rslt);
 8002660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002664:	4619      	mov	r1, r3
 8002666:	481a      	ldr	r0, [pc, #104]	; (80026d0 <bmi08_error_codes_print_result+0x140>)
 8002668:	f004 fa9a 	bl	8006ba0 <iprintf>
}
 800266c:	e01c      	b.n	80026a8 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_E_FEATURE_NOT_SUPPORTED)
 800266e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002672:	f113 0f09 	cmn.w	r3, #9
 8002676:	d106      	bne.n	8002686 <bmi08_error_codes_print_result+0xf6>
            printf("Error [%d] : Feature not supported\r\n", rslt);
 8002678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800267c:	4619      	mov	r1, r3
 800267e:	4815      	ldr	r0, [pc, #84]	; (80026d4 <bmi08_error_codes_print_result+0x144>)
 8002680:	f004 fa8e 	bl	8006ba0 <iprintf>
}
 8002684:	e010      	b.n	80026a8 <bmi08_error_codes_print_result+0x118>
        else if (rslt == BMI08_W_FIFO_EMPTY)
 8002686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d106      	bne.n	800269c <bmi08_error_codes_print_result+0x10c>
            printf("Warning [%d] : FIFO empty\r\n", rslt);
 800268e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002692:	4619      	mov	r1, r3
 8002694:	4810      	ldr	r0, [pc, #64]	; (80026d8 <bmi08_error_codes_print_result+0x148>)
 8002696:	f004 fa83 	bl	8006ba0 <iprintf>
}
 800269a:	e005      	b.n	80026a8 <bmi08_error_codes_print_result+0x118>
            printf("Error [%d] : Unknown error code\r\n", rslt);
 800269c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a0:	4619      	mov	r1, r3
 80026a2:	480e      	ldr	r0, [pc, #56]	; (80026dc <bmi08_error_codes_print_result+0x14c>)
 80026a4:	f004 fa7c 	bl	8006ba0 <iprintf>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	08009c78 	.word	0x08009c78
 80026b4:	08009c7c 	.word	0x08009c7c
 80026b8:	08009c98 	.word	0x08009c98
 80026bc:	08009cc0 	.word	0x08009cc0
 80026c0:	08009ce0 	.word	0x08009ce0
 80026c4:	08009cfc 	.word	0x08009cfc
 80026c8:	08009d1c 	.word	0x08009d1c
 80026cc:	08009d40 	.word	0x08009d40
 80026d0:	08009d6c 	.word	0x08009d6c
 80026d4:	08009d8c 	.word	0x08009d8c
 80026d8:	08009db4 	.word	0x08009db4
 80026dc:	08009dd0 	.word	0x08009dd0

080026e0 <bmi08_coines_deinit>:
 *  @brief Deinitializes coines platform
 *
 *  @return void.
 */
void bmi08_coines_deinit(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
//    /* Coines interface reset */
//    coines_soft_reset();
//    coines_delay_msec(100);
//
//    (void)coines_close_comm_intf(COINES_COMM_INTF_USB, NULL);
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80026f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026fa:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d013      	beq.n	800272e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002706:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800270a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800270e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002716:	e000      	b.n	800271a <ITM_SendChar+0x2c>
    {
      __NOP();
 8002718:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800271a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f9      	beq.n	8002718 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002724:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800272e:	687b      	ldr	r3, [r7, #4]
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <init_bmi08>:
 *
 *  @return void
 *
 */
static int8_t init_bmi08(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
    int8_t rslt;

    rslt = bmi08xa_init(&bmi08dev);
 8002742:	4843      	ldr	r0, [pc, #268]	; (8002850 <init_bmi08+0x114>)
 8002744:	f7ff fdc8 	bl	80022d8 <bmi08xa_init>
 8002748:	4603      	mov	r3, r0
 800274a:	71fb      	strb	r3, [r7, #7]
    bmi08_error_codes_print_result("bmi08xa_init", rslt);
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	4619      	mov	r1, r3
 8002752:	4840      	ldr	r0, [pc, #256]	; (8002854 <init_bmi08+0x118>)
 8002754:	f7ff ff1c 	bl	8002590 <bmi08_error_codes_print_result>

    if (rslt == BMI08_OK)
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <init_bmi08+0x3a>
    {
        rslt = bmi08g_init(&bmi08dev);
 8002760:	483b      	ldr	r0, [pc, #236]	; (8002850 <init_bmi08+0x114>)
 8002762:	f7ff f998 	bl	8001a96 <bmi08g_init>
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08g_init", rslt);
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	4619      	mov	r1, r3
 8002770:	4839      	ldr	r0, [pc, #228]	; (8002858 <init_bmi08+0x11c>)
 8002772:	f7ff ff0d 	bl	8002590 <bmi08_error_codes_print_result>
    }

    if (rslt == BMI08_OK)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <init_bmi08+0x5e>
    {
        printf("Uploading config file !\n");
 800277e:	4837      	ldr	r0, [pc, #220]	; (800285c <init_bmi08+0x120>)
 8002780:	f004 fa94 	bl	8006cac <puts>
        rslt = bmi08a_load_config_file(&bmi08dev);
 8002784:	4832      	ldr	r0, [pc, #200]	; (8002850 <init_bmi08+0x114>)
 8002786:	f7fe fc41 	bl	800100c <bmi08a_load_config_file>
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08a_load_config_file", rslt);
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	4619      	mov	r1, r3
 8002794:	4832      	ldr	r0, [pc, #200]	; (8002860 <init_bmi08+0x124>)
 8002796:	f7ff fefb 	bl	8002590 <bmi08_error_codes_print_result>
    }

    if (rslt == BMI08_OK)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d14f      	bne.n	8002842 <init_bmi08+0x106>
    {
        bmi08dev.accel_cfg.odr = BMI08_ACCEL_ODR_1600_HZ;
 80027a2:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <init_bmi08+0x114>)
 80027a4:	220c      	movs	r2, #12
 80027a6:	749a      	strb	r2, [r3, #18]

        if (bmi08dev.variant == BMI085_VARIANT)
 80027a8:	4b29      	ldr	r3, [pc, #164]	; (8002850 <init_bmi08+0x114>)
 80027aa:	7b5b      	ldrb	r3, [r3, #13]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d103      	bne.n	80027b8 <init_bmi08+0x7c>
        {
            bmi08dev.accel_cfg.range = BMI085_ACCEL_RANGE_16G;
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <init_bmi08+0x114>)
 80027b2:	2203      	movs	r2, #3
 80027b4:	741a      	strb	r2, [r3, #16]
 80027b6:	e006      	b.n	80027c6 <init_bmi08+0x8a>
        }
        else if (bmi08dev.variant == BMI088_VARIANT)
 80027b8:	4b25      	ldr	r3, [pc, #148]	; (8002850 <init_bmi08+0x114>)
 80027ba:	7b5b      	ldrb	r3, [r3, #13]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d102      	bne.n	80027c6 <init_bmi08+0x8a>
        {
            bmi08dev.accel_cfg.range = BMI088_ACCEL_RANGE_24G;
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <init_bmi08+0x114>)
 80027c2:	2203      	movs	r2, #3
 80027c4:	741a      	strb	r2, [r3, #16]
        }

        bmi08dev.accel_cfg.power = BMI08_ACCEL_PM_ACTIVE; /*user_accel_power_modes[user_bmi088_accel_low_power]; */
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <init_bmi08+0x114>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	73da      	strb	r2, [r3, #15]
        bmi08dev.accel_cfg.bw = BMI08_ACCEL_BW_NORMAL; /* Bandwidth and OSR are same */
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <init_bmi08+0x114>)
 80027ce:	220a      	movs	r2, #10
 80027d0:	745a      	strb	r2, [r3, #17]

        rslt = bmi08a_set_power_mode(&bmi08dev);
 80027d2:	481f      	ldr	r0, [pc, #124]	; (8002850 <init_bmi08+0x114>)
 80027d4:	f7fe fd56 	bl	8001284 <bmi08a_set_power_mode>
 80027d8:	4603      	mov	r3, r0
 80027da:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08a_set_power_mode", rslt);
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	4619      	mov	r1, r3
 80027e2:	4820      	ldr	r0, [pc, #128]	; (8002864 <init_bmi08+0x128>)
 80027e4:	f7ff fed4 	bl	8002590 <bmi08_error_codes_print_result>

        rslt = bmi08xa_set_meas_conf(&bmi08dev);
 80027e8:	4819      	ldr	r0, [pc, #100]	; (8002850 <init_bmi08+0x114>)
 80027ea:	f7ff fda1 	bl	8002330 <bmi08xa_set_meas_conf>
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08xa_set_meas_conf", rslt);
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	4619      	mov	r1, r3
 80027f8:	481b      	ldr	r0, [pc, #108]	; (8002868 <init_bmi08+0x12c>)
 80027fa:	f7ff fec9 	bl	8002590 <bmi08_error_codes_print_result>

        bmi08dev.gyro_cfg.odr = BMI08_GYRO_BW_230_ODR_2000_HZ;
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <init_bmi08+0x114>)
 8002800:	2201      	movs	r2, #1
 8002802:	759a      	strb	r2, [r3, #22]
        bmi08dev.gyro_cfg.range = BMI08_GYRO_RANGE_250_DPS;
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <init_bmi08+0x114>)
 8002806:	2203      	movs	r2, #3
 8002808:	751a      	strb	r2, [r3, #20]
        bmi08dev.gyro_cfg.bw = BMI08_GYRO_BW_230_ODR_2000_HZ;
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <init_bmi08+0x114>)
 800280c:	2201      	movs	r2, #1
 800280e:	755a      	strb	r2, [r3, #21]
        bmi08dev.gyro_cfg.power = BMI08_GYRO_PM_NORMAL;
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <init_bmi08+0x114>)
 8002812:	2200      	movs	r2, #0
 8002814:	74da      	strb	r2, [r3, #19]

        rslt = bmi08g_set_power_mode(&bmi08dev);
 8002816:	480e      	ldr	r0, [pc, #56]	; (8002850 <init_bmi08+0x114>)
 8002818:	f7ff fa6a 	bl	8001cf0 <bmi08g_set_power_mode>
 800281c:	4603      	mov	r3, r0
 800281e:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08g_set_power_mode", rslt);
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	4619      	mov	r1, r3
 8002826:	4811      	ldr	r0, [pc, #68]	; (800286c <init_bmi08+0x130>)
 8002828:	f7ff feb2 	bl	8002590 <bmi08_error_codes_print_result>

        rslt = bmi08g_set_meas_conf(&bmi08dev);
 800282c:	4808      	ldr	r0, [pc, #32]	; (8002850 <init_bmi08+0x114>)
 800282e:	f7ff f9d5 	bl	8001bdc <bmi08g_set_meas_conf>
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08g_set_meas_conf", rslt);
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	4619      	mov	r1, r3
 800283c:	480c      	ldr	r0, [pc, #48]	; (8002870 <init_bmi08+0x134>)
 800283e:	f7ff fea7 	bl	8002590 <bmi08_error_codes_print_result>
    }

    return rslt;
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200002dc 	.word	0x200002dc
 8002854:	08009df4 	.word	0x08009df4
 8002858:	08009e04 	.word	0x08009e04
 800285c:	08009e10 	.word	0x08009e10
 8002860:	08009e28 	.word	0x08009e28
 8002864:	08009e40 	.word	0x08009e40
 8002868:	08009e58 	.word	0x08009e58
 800286c:	08009e70 	.word	0x08009e70
 8002870:	08009e88 	.word	0x08009e88

08002874 <enable_bmi08_interrupt>:
 *
 *  @return void
 *
 */
static int8_t enable_bmi08_interrupt()
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
    int8_t rslt;
    uint8_t data = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	71bb      	strb	r3, [r7, #6]

    /* Set accel interrupt pin configuration */
    accel_int_config.int_channel = BMI08_INT_CHANNEL_1;
 800287e:	4b27      	ldr	r3, [pc, #156]	; (800291c <enable_bmi08_interrupt+0xa8>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
    accel_int_config.int_type = BMI08_ACCEL_INT_DATA_RDY;
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <enable_bmi08_interrupt+0xa8>)
 8002886:	2200      	movs	r2, #0
 8002888:	705a      	strb	r2, [r3, #1]
    accel_int_config.int_pin_cfg.output_mode = BMI08_INT_MODE_PUSH_PULL;
 800288a:	4b24      	ldr	r3, [pc, #144]	; (800291c <enable_bmi08_interrupt+0xa8>)
 800288c:	2200      	movs	r2, #0
 800288e:	70da      	strb	r2, [r3, #3]
    accel_int_config.int_pin_cfg.lvl = BMI08_INT_ACTIVE_HIGH;
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <enable_bmi08_interrupt+0xa8>)
 8002892:	2201      	movs	r2, #1
 8002894:	709a      	strb	r2, [r3, #2]
    accel_int_config.int_pin_cfg.enable_int_pin = BMI08_ENABLE;
 8002896:	4b21      	ldr	r3, [pc, #132]	; (800291c <enable_bmi08_interrupt+0xa8>)
 8002898:	2201      	movs	r2, #1
 800289a:	711a      	strb	r2, [r3, #4]

    /* Enable accel data ready interrupt channel */
    rslt = bmi08a_set_int_config((const struct bmi08_accel_int_channel_cfg*)&accel_int_config, &bmi08dev);
 800289c:	4920      	ldr	r1, [pc, #128]	; (8002920 <enable_bmi08_interrupt+0xac>)
 800289e:	481f      	ldr	r0, [pc, #124]	; (800291c <enable_bmi08_interrupt+0xa8>)
 80028a0:	f7fe fda0 	bl	80013e4 <bmi08a_set_int_config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	71fb      	strb	r3, [r7, #7]
    bmi08_error_codes_print_result("bmi08a_set_int_config", rslt);
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	4619      	mov	r1, r3
 80028ae:	481d      	ldr	r0, [pc, #116]	; (8002924 <enable_bmi08_interrupt+0xb0>)
 80028b0:	f7ff fe6e 	bl	8002590 <bmi08_error_codes_print_result>

    if (rslt == BMI08_OK)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d128      	bne.n	800290e <enable_bmi08_interrupt+0x9a>
    {
        /* Set gyro interrupt pin configuration */
        gyro_int_config.int_channel = BMI08_INT_CHANNEL_3;
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <enable_bmi08_interrupt+0xb4>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
        gyro_int_config.int_type = BMI08_GYRO_INT_DATA_RDY;
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <enable_bmi08_interrupt+0xb4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	705a      	strb	r2, [r3, #1]
        gyro_int_config.int_pin_cfg.output_mode = BMI08_INT_MODE_PUSH_PULL;
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <enable_bmi08_interrupt+0xb4>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	70da      	strb	r2, [r3, #3]
        gyro_int_config.int_pin_cfg.lvl = BMI08_INT_ACTIVE_HIGH;
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <enable_bmi08_interrupt+0xb4>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	709a      	strb	r2, [r3, #2]
        gyro_int_config.int_pin_cfg.enable_int_pin = BMI08_ENABLE;
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <enable_bmi08_interrupt+0xb4>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	711a      	strb	r2, [r3, #4]

        /* Enable gyro data ready interrupt channel */
        rslt = bmi08g_set_int_config((const struct bmi08_gyro_int_channel_cfg *)&gyro_int_config, &bmi08dev);
 80028da:	4911      	ldr	r1, [pc, #68]	; (8002920 <enable_bmi08_interrupt+0xac>)
 80028dc:	4812      	ldr	r0, [pc, #72]	; (8002928 <enable_bmi08_interrupt+0xb4>)
 80028de:	f7ff faae 	bl	8001e3e <bmi08g_set_int_config>
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08g_set_int_config", rslt);
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	4619      	mov	r1, r3
 80028ec:	480f      	ldr	r0, [pc, #60]	; (800292c <enable_bmi08_interrupt+0xb8>)
 80028ee:	f7ff fe4f 	bl	8002590 <bmi08_error_codes_print_result>

        rslt = bmi08g_get_regs(BMI08_REG_GYRO_INT3_INT4_IO_MAP, &data, 1, &bmi08dev);
 80028f2:	1db9      	adds	r1, r7, #6
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <enable_bmi08_interrupt+0xac>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	2018      	movs	r0, #24
 80028fa:	f7ff f8fa 	bl	8001af2 <bmi08g_get_regs>
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08g_get_regs", rslt);
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	4619      	mov	r1, r3
 8002908:	4809      	ldr	r0, [pc, #36]	; (8002930 <enable_bmi08_interrupt+0xbc>)
 800290a:	f7ff fe41 	bl	8002590 <bmi08_error_codes_print_result>
    }

    return rslt;
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000324 	.word	0x20000324
 8002920:	200002dc 	.word	0x200002dc
 8002924:	08009ea0 	.word	0x08009ea0
 8002928:	2000032c 	.word	0x2000032c
 800292c:	08009eb8 	.word	0x08009eb8
 8002930:	08009ed0 	.word	0x08009ed0

08002934 <disable_bmi08_interrupt>:
 *
 *  @return void
 *
 */
static int8_t disable_bmi08_interrupt()
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
    int8_t rslt;

    /* Set accel interrupt pin configuration */
    accel_int_config.int_channel = BMI08_INT_CHANNEL_1;
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <disable_bmi08_interrupt+0x88>)
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
    accel_int_config.int_type = BMI08_ACCEL_INT_DATA_RDY;
 8002940:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <disable_bmi08_interrupt+0x88>)
 8002942:	2200      	movs	r2, #0
 8002944:	705a      	strb	r2, [r3, #1]
    accel_int_config.int_pin_cfg.output_mode = BMI08_INT_MODE_PUSH_PULL;
 8002946:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <disable_bmi08_interrupt+0x88>)
 8002948:	2200      	movs	r2, #0
 800294a:	70da      	strb	r2, [r3, #3]
    accel_int_config.int_pin_cfg.lvl = BMI08_INT_ACTIVE_HIGH;
 800294c:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <disable_bmi08_interrupt+0x88>)
 800294e:	2201      	movs	r2, #1
 8002950:	709a      	strb	r2, [r3, #2]
    accel_int_config.int_pin_cfg.enable_int_pin = BMI08_DISABLE;
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <disable_bmi08_interrupt+0x88>)
 8002954:	2200      	movs	r2, #0
 8002956:	711a      	strb	r2, [r3, #4]

    /* Disable accel data ready interrupt channel */
    rslt = bmi08a_set_int_config((const struct bmi08_accel_int_channel_cfg*)&accel_int_config, &bmi08dev);
 8002958:	4919      	ldr	r1, [pc, #100]	; (80029c0 <disable_bmi08_interrupt+0x8c>)
 800295a:	4818      	ldr	r0, [pc, #96]	; (80029bc <disable_bmi08_interrupt+0x88>)
 800295c:	f7fe fd42 	bl	80013e4 <bmi08a_set_int_config>
 8002960:	4603      	mov	r3, r0
 8002962:	71fb      	strb	r3, [r7, #7]
    bmi08_error_codes_print_result("bmi08a_set_int_config", rslt);
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	4619      	mov	r1, r3
 800296a:	4816      	ldr	r0, [pc, #88]	; (80029c4 <disable_bmi08_interrupt+0x90>)
 800296c:	f7ff fe10 	bl	8002590 <bmi08_error_codes_print_result>

    if (rslt == BMI08_OK)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d11a      	bne.n	80029ae <disable_bmi08_interrupt+0x7a>
    {
        /* Set gyro interrupt pin configuration */
        gyro_int_config.int_channel = BMI08_INT_CHANNEL_3;
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <disable_bmi08_interrupt+0x94>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
        gyro_int_config.int_type = BMI08_GYRO_INT_DATA_RDY;
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <disable_bmi08_interrupt+0x94>)
 8002980:	2200      	movs	r2, #0
 8002982:	705a      	strb	r2, [r3, #1]
        gyro_int_config.int_pin_cfg.output_mode = BMI08_INT_MODE_PUSH_PULL;
 8002984:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <disable_bmi08_interrupt+0x94>)
 8002986:	2200      	movs	r2, #0
 8002988:	70da      	strb	r2, [r3, #3]
        gyro_int_config.int_pin_cfg.lvl = BMI08_INT_ACTIVE_HIGH;
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <disable_bmi08_interrupt+0x94>)
 800298c:	2201      	movs	r2, #1
 800298e:	709a      	strb	r2, [r3, #2]
        gyro_int_config.int_pin_cfg.enable_int_pin = BMI08_DISABLE;
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <disable_bmi08_interrupt+0x94>)
 8002992:	2200      	movs	r2, #0
 8002994:	711a      	strb	r2, [r3, #4]

        /* Disable gyro data ready interrupt channel */
        rslt = bmi08g_set_int_config((const struct bmi08_gyro_int_channel_cfg *)&gyro_int_config, &bmi08dev);
 8002996:	490a      	ldr	r1, [pc, #40]	; (80029c0 <disable_bmi08_interrupt+0x8c>)
 8002998:	480b      	ldr	r0, [pc, #44]	; (80029c8 <disable_bmi08_interrupt+0x94>)
 800299a:	f7ff fa50 	bl	8001e3e <bmi08g_set_int_config>
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
        bmi08_error_codes_print_result("bmi08g_set_int_config", rslt);
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	4619      	mov	r1, r3
 80029a8:	4808      	ldr	r0, [pc, #32]	; (80029cc <disable_bmi08_interrupt+0x98>)
 80029aa:	f7ff fdf1 	bl	8002590 <bmi08_error_codes_print_result>
    }

    return rslt;
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000324 	.word	0x20000324
 80029c0:	200002dc 	.word	0x200002dc
 80029c4:	08009ea0 	.word	0x08009ea0
 80029c8:	2000032c 	.word	0x2000032c
 80029cc:	08009eb8 	.word	0x08009eb8

080029d0 <lsb_to_mps2>:
/*!
 * @brief This function converts lsb to meter per second squared for 16 bit accelerometer at
 * range 2G, 4G, 8G or 16G.
 */
static float lsb_to_mps2(int16_t val, int8_t g_range, uint8_t bit_width)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
 80029da:	460b      	mov	r3, r1
 80029dc:	717b      	strb	r3, [r7, #5]
 80029de:	4613      	mov	r3, r2
 80029e0:	713b      	strb	r3, [r7, #4]
    double power = 2;
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029ea:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 80029ee:	793b      	ldrb	r3, [r7, #4]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fda7 	bl	8000544 <__aeabi_ui2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	ec43 2b11 	vmov	d1, r2, r3
 80029fe:	ed97 0b04 	vldr	d0, [r7, #16]
 8002a02:	f006 fa07 	bl	8008e14 <pow>
 8002a06:	ec51 0b10 	vmov	r0, r1, d0
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a12:	f7fd ff3b 	bl	800088c <__aeabi_ddiv>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f7fe f8e3 	bl	8000be8 <__aeabi_d2f>
 8002a22:	4603      	mov	r3, r0
 8002a24:	60fb      	str	r3, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 8002a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a32:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002a60 <lsb_to_mps2+0x90>
 8002a36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a3a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a52:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a56:	eeb0 0a67 	vmov.f32	s0, s15
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	411ce80a 	.word	0x411ce80a

08002a64 <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	ed87 0a00 	vstr	s0, [r7]
 8002a70:	460a      	mov	r2, r1
 8002a72:	80fb      	strh	r3, [r7, #6]
 8002a74:	4613      	mov	r3, r2
 8002a76:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a80:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8002a84:	797b      	ldrb	r3, [r7, #5]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fd5c 	bl	8000544 <__aeabi_ui2d>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	ec43 2b11 	vmov	d1, r2, r3
 8002a94:	ed97 0b04 	vldr	d0, [r7, #16]
 8002a98:	f006 f9bc 	bl	8008e14 <pow>
 8002a9c:	ec51 0b10 	vmov	r0, r1, d0
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aa8:	f7fd fef0 	bl	800088c <__aeabi_ddiv>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f7fe f898 	bl	8000be8 <__aeabi_d2f>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8002abc:	edd7 6a00 	vldr	s13, [r7]
 8002ac0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae8:	b091      	sub	sp, #68	; 0x44
 8002aea:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aec:	f000 fd5c 	bl	80035a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af0:	f000 f9cc 	bl	8002e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002af4:	f000 fade 	bl	80030b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002af8:	f000 fab2 	bl	8003060 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002afc:	f000 fa32 	bl	8002f64 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002b00:	f000 fa5e 	bl	8002fc0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t rval = 1;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73bb      	strb	r3, [r7, #14]
  uint8_t rstatus = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
  rstatus = HAL_I2C_Mem_Read(&hi2c1, 0x68, 0x0, 1, &rval, 1, HAL_MAX_DELAY);
 8002b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	2301      	movs	r3, #1
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	f107 030e 	add.w	r3, r7, #14
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2168      	movs	r1, #104	; 0x68
 8002b22:	48c4      	ldr	r0, [pc, #784]	; (8002e34 <main+0x350>)
 8002b24:	f001 faa8 	bl	8004078 <HAL_I2C_Mem_Read>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	73fb      	strb	r3, [r7, #15]

  rstatus = HAL_I2C_Mem_Read(&hi2c1, 0x18, 0x0, 1, &rval, 1, HAL_MAX_DELAY);
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b30:	9302      	str	r3, [sp, #8]
 8002b32:	2301      	movs	r3, #1
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	f107 030e 	add.w	r3, r7, #14
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2118      	movs	r1, #24
 8002b42:	48bc      	ldr	r0, [pc, #752]	; (8002e34 <main+0x350>)
 8002b44:	f001 fa98 	bl	8004078 <HAL_I2C_Mem_Read>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	73fb      	strb	r3, [r7, #15]


  int8_t rslt;

    uint8_t times_to_read = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	77bb      	strb	r3, [r7, #30]
    float x = 0.0, y = 0.0, z = 0.0;
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
    uint8_t status = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	737b      	strb	r3, [r7, #13]
     *           For SPI : BMI08_SPI_INTF
     * Sensor variant given as parameter
     *          For BMI085 : BMI085_VARIANT
     *          For BMI088 : BMI088_VARIANT
     */
    rslt = bmi08_interface_init(&bmi08dev, BMI08_I2C_INTF, BMI088_VARIANT);
 8002b66:	2201      	movs	r2, #1
 8002b68:	2100      	movs	r1, #0
 8002b6a:	48b3      	ldr	r0, [pc, #716]	; (8002e38 <main+0x354>)
 8002b6c:	f7ff fcc6 	bl	80024fc <bmi08_interface_init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	77fb      	strb	r3, [r7, #31]
    bmi08_error_codes_print_result("bmi08_interface_init", rslt);
 8002b74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	48b0      	ldr	r0, [pc, #704]	; (8002e3c <main+0x358>)
 8002b7c:	f7ff fd08 	bl	8002590 <bmi08_error_codes_print_result>

    if (rslt == BMI08_OK)
 8002b80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 814b 	bne.w	8002e20 <main+0x33c>
    {
        rslt = init_bmi08();
 8002b8a:	f7ff fdd7 	bl	800273c <init_bmi08>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	77fb      	strb	r3, [r7, #31]
        bmi08_error_codes_print_result("init_bmi08", rslt);
 8002b92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b96:	4619      	mov	r1, r3
 8002b98:	48a9      	ldr	r0, [pc, #676]	; (8002e40 <main+0x35c>)
 8002b9a:	f7ff fcf9 	bl	8002590 <bmi08_error_codes_print_result>

        /* Enable data ready interrupts */
        rslt = enable_bmi08_interrupt();
 8002b9e:	f7ff fe69 	bl	8002874 <enable_bmi08_interrupt>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	77fb      	strb	r3, [r7, #31]
        bmi08_error_codes_print_result("enable_bmi08_interrupt", rslt);
 8002ba6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002baa:	4619      	mov	r1, r3
 8002bac:	48a5      	ldr	r0, [pc, #660]	; (8002e44 <main+0x360>)
 8002bae:	f7ff fcef 	bl	8002590 <bmi08_error_codes_print_result>

        if (rslt == BMI08_OK)
 8002bb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 8128 	bne.w	8002e0c <main+0x328>
        {
            if (bmi08dev.accel_cfg.power == BMI08_ACCEL_PM_ACTIVE)
 8002bbc:	4b9e      	ldr	r3, [pc, #632]	; (8002e38 <main+0x354>)
 8002bbe:	7bdb      	ldrb	r3, [r3, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f040 80a1 	bne.w	8002d08 <main+0x224>
            {
                printf("\nACCEL DATA\n");
 8002bc6:	48a0      	ldr	r0, [pc, #640]	; (8002e48 <main+0x364>)
 8002bc8:	f004 f870 	bl	8006cac <puts>
                printf("Accel data in LSB units and Gravity data in m/s^2\n");
 8002bcc:	489f      	ldr	r0, [pc, #636]	; (8002e4c <main+0x368>)
 8002bce:	f004 f86d 	bl	8006cac <puts>
                printf("Accel data range : 16G for BMI085 and 24G for BMI088\n\n");
 8002bd2:	489f      	ldr	r0, [pc, #636]	; (8002e50 <main+0x36c>)
 8002bd4:	f004 f86a 	bl	8006cac <puts>

                printf("Sample_Count, Acc_Raw_X, Acc_Raw_Y, Acc_Raw_Z, Acc_ms2_X, Acc_ms2_Y, Acc_ms2_Z\n");
 8002bd8:	489e      	ldr	r0, [pc, #632]	; (8002e54 <main+0x370>)
 8002bda:	f004 f867 	bl	8006cac <puts>

                while (times_to_read < 10)
 8002bde:	e08f      	b.n	8002d00 <main+0x21c>
                {
                    rslt = bmi08a_get_data_int_status(&status, &bmi08dev);
 8002be0:	f107 030d 	add.w	r3, r7, #13
 8002be4:	4994      	ldr	r1, [pc, #592]	; (8002e38 <main+0x354>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fc4e 	bl	8001488 <bmi08a_get_data_int_status>
 8002bec:	4603      	mov	r3, r0
 8002bee:	77fb      	strb	r3, [r7, #31]
                    bmi08_error_codes_print_result("bmi08a_get_data_int_status", rslt);
 8002bf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4898      	ldr	r0, [pc, #608]	; (8002e58 <main+0x374>)
 8002bf8:	f7ff fcca 	bl	8002590 <bmi08_error_codes_print_result>

                    if (status & BMI08_ACCEL_DATA_READY_INT)
 8002bfc:	7b7b      	ldrb	r3, [r7, #13]
 8002bfe:	b25b      	sxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	da7d      	bge.n	8002d00 <main+0x21c>
                    {
                        rslt = bmi08a_get_data(&bmi08_accel, &bmi08dev);
 8002c04:	498c      	ldr	r1, [pc, #560]	; (8002e38 <main+0x354>)
 8002c06:	4895      	ldr	r0, [pc, #596]	; (8002e5c <main+0x378>)
 8002c08:	f7fe fb95 	bl	8001336 <bmi08a_get_data>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	77fb      	strb	r3, [r7, #31]
                        bmi08_error_codes_print_result("bmi08a_get_data", rslt);
 8002c10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c14:	4619      	mov	r1, r3
 8002c16:	4892      	ldr	r0, [pc, #584]	; (8002e60 <main+0x37c>)
 8002c18:	f7ff fcba 	bl	8002590 <bmi08_error_codes_print_result>

                        if (bmi08dev.variant == BMI085_VARIANT)
 8002c1c:	4b86      	ldr	r3, [pc, #536]	; (8002e38 <main+0x354>)
 8002c1e:	7b5b      	ldrb	r3, [r3, #13]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11e      	bne.n	8002c62 <main+0x17e>
                        {
                            /* Converting lsb to meter per second squared for 16 bit accelerometer at 16G range. */
                            x = lsb_to_mps2(bmi08_accel.x, 16, 16);
 8002c24:	4b8d      	ldr	r3, [pc, #564]	; (8002e5c <main+0x378>)
 8002c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	2110      	movs	r1, #16
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fece 	bl	80029d0 <lsb_to_mps2>
 8002c34:	ed87 0a06 	vstr	s0, [r7, #24]
                            y = lsb_to_mps2(bmi08_accel.y, 16, 16);
 8002c38:	4b88      	ldr	r3, [pc, #544]	; (8002e5c <main+0x378>)
 8002c3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c3e:	2210      	movs	r2, #16
 8002c40:	2110      	movs	r1, #16
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fec4 	bl	80029d0 <lsb_to_mps2>
 8002c48:	ed87 0a05 	vstr	s0, [r7, #20]
                            z = lsb_to_mps2(bmi08_accel.z, 16, 16);
 8002c4c:	4b83      	ldr	r3, [pc, #524]	; (8002e5c <main+0x378>)
 8002c4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c52:	2210      	movs	r2, #16
 8002c54:	2110      	movs	r1, #16
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff feba 	bl	80029d0 <lsb_to_mps2>
 8002c5c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002c60:	e021      	b.n	8002ca6 <main+0x1c2>
                        }
                        else if (bmi08dev.variant == BMI088_VARIANT)
 8002c62:	4b75      	ldr	r3, [pc, #468]	; (8002e38 <main+0x354>)
 8002c64:	7b5b      	ldrb	r3, [r3, #13]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d11d      	bne.n	8002ca6 <main+0x1c2>
                        {
                            /* Converting lsb to meter per second squared for 16 bit accelerometer at 24G range. */
                            x = lsb_to_mps2(bmi08_accel.x, 24, 16);
 8002c6a:	4b7c      	ldr	r3, [pc, #496]	; (8002e5c <main+0x378>)
 8002c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c70:	2210      	movs	r2, #16
 8002c72:	2118      	movs	r1, #24
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff feab 	bl	80029d0 <lsb_to_mps2>
 8002c7a:	ed87 0a06 	vstr	s0, [r7, #24]
                            y = lsb_to_mps2(bmi08_accel.y, 24, 16);
 8002c7e:	4b77      	ldr	r3, [pc, #476]	; (8002e5c <main+0x378>)
 8002c80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c84:	2210      	movs	r2, #16
 8002c86:	2118      	movs	r1, #24
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fea1 	bl	80029d0 <lsb_to_mps2>
 8002c8e:	ed87 0a05 	vstr	s0, [r7, #20]
                            z = lsb_to_mps2(bmi08_accel.z, 24, 16);
 8002c92:	4b72      	ldr	r3, [pc, #456]	; (8002e5c <main+0x378>)
 8002c94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c98:	2210      	movs	r2, #16
 8002c9a:	2118      	movs	r1, #24
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fe97 	bl	80029d0 <lsb_to_mps2>
 8002ca2:	ed87 0a04 	vstr	s0, [r7, #16]
                        }

                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002ca6:	7fbe      	ldrb	r6, [r7, #30]
                               times_to_read,
                               bmi08_accel.x,
 8002ca8:	4b6c      	ldr	r3, [pc, #432]	; (8002e5c <main+0x378>)
 8002caa:	f9b3 3000 	ldrsh.w	r3, [r3]
                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002cae:	469a      	mov	sl, r3
                               bmi08_accel.y,
 8002cb0:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <main+0x378>)
 8002cb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002cb6:	469b      	mov	fp, r3
                               bmi08_accel.z,
 8002cb8:	4b68      	ldr	r3, [pc, #416]	; (8002e5c <main+0x378>)
 8002cba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	69b8      	ldr	r0, [r7, #24]
 8002cc2:	f7fd fc61 	bl	8000588 <__aeabi_f2d>
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	460d      	mov	r5, r1
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	f7fd fc5c 	bl	8000588 <__aeabi_f2d>
 8002cd0:	4680      	mov	r8, r0
 8002cd2:	4689      	mov	r9, r1
 8002cd4:	6938      	ldr	r0, [r7, #16]
 8002cd6:	f7fd fc57 	bl	8000588 <__aeabi_f2d>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002ce2:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002ce6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	465b      	mov	r3, fp
 8002cf0:	4652      	mov	r2, sl
 8002cf2:	4631      	mov	r1, r6
 8002cf4:	485b      	ldr	r0, [pc, #364]	; (8002e64 <main+0x380>)
 8002cf6:	f003 ff53 	bl	8006ba0 <iprintf>
                               x,
                               y,
                               z);

                        times_to_read = times_to_read + 1;
 8002cfa:	7fbb      	ldrb	r3, [r7, #30]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	77bb      	strb	r3, [r7, #30]
                while (times_to_read < 10)
 8002d00:	7fbb      	ldrb	r3, [r7, #30]
 8002d02:	2b09      	cmp	r3, #9
 8002d04:	f67f af6c 	bls.w	8002be0 <main+0xfc>
                    }
                }
            }

            if (bmi08dev.gyro_cfg.power == BMI08_GYRO_PM_NORMAL)
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <main+0x354>)
 8002d0a:	7cdb      	ldrb	r3, [r3, #19]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d17d      	bne.n	8002e0c <main+0x328>
            {
                times_to_read = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	77bb      	strb	r3, [r7, #30]

                printf("\n\nGYRO DATA\n");
 8002d14:	4854      	ldr	r0, [pc, #336]	; (8002e68 <main+0x384>)
 8002d16:	f003 ffc9 	bl	8006cac <puts>
                printf("Gyro data in LSB units and degrees per second\n");
 8002d1a:	4854      	ldr	r0, [pc, #336]	; (8002e6c <main+0x388>)
 8002d1c:	f003 ffc6 	bl	8006cac <puts>
                printf("Gyro data range : 250 dps for BMI085 and BMI088\n\n");
 8002d20:	4853      	ldr	r0, [pc, #332]	; (8002e70 <main+0x38c>)
 8002d22:	f003 ffc3 	bl	8006cac <puts>

                printf("Sample_Count, Gyr_Raw_X, Gyr_Raw_Y, Gyr_Raw_Z, Gyr_DPS_X, Gyr_DPS_Y, Gyr_DPS_Z\n");
 8002d26:	4853      	ldr	r0, [pc, #332]	; (8002e74 <main+0x390>)
 8002d28:	f003 ffc0 	bl	8006cac <puts>

                while (times_to_read < 10)
 8002d2c:	e06b      	b.n	8002e06 <main+0x322>
                {
                    rslt = bmi08g_get_data_int_status(&status, &bmi08dev);
 8002d2e:	f107 030d 	add.w	r3, r7, #13
 8002d32:	4941      	ldr	r1, [pc, #260]	; (8002e38 <main+0x354>)
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff f8b7 	bl	8001ea8 <bmi08g_get_data_int_status>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	77fb      	strb	r3, [r7, #31]
                    bmi08_error_codes_print_result("bmi08g_get_data_int_status", rslt);
 8002d3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d42:	4619      	mov	r1, r3
 8002d44:	484c      	ldr	r0, [pc, #304]	; (8002e78 <main+0x394>)
 8002d46:	f7ff fc23 	bl	8002590 <bmi08_error_codes_print_result>

                    if (status & BMI08_GYRO_DATA_READY_INT)
 8002d4a:	7b7b      	ldrb	r3, [r7, #13]
 8002d4c:	b25b      	sxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	da59      	bge.n	8002e06 <main+0x322>
                    {
                        rslt = bmi08g_get_data(&bmi08_gyro, &bmi08dev);
 8002d52:	4939      	ldr	r1, [pc, #228]	; (8002e38 <main+0x354>)
 8002d54:	4849      	ldr	r0, [pc, #292]	; (8002e7c <main+0x398>)
 8002d56:	f7ff f81b 	bl	8001d90 <bmi08g_get_data>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	77fb      	strb	r3, [r7, #31]
                        bmi08_error_codes_print_result("bmi08g_get_data", rslt);
 8002d5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d62:	4619      	mov	r1, r3
 8002d64:	4846      	ldr	r0, [pc, #280]	; (8002e80 <main+0x39c>)
 8002d66:	f7ff fc13 	bl	8002590 <bmi08_error_codes_print_result>

                        /* Converting lsb to degree per second for 16 bit gyro at 250 dps range. */
                        x = lsb_to_dps(bmi08_gyro.x, (float)250, 16);
 8002d6a:	4b44      	ldr	r3, [pc, #272]	; (8002e7c <main+0x398>)
 8002d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d70:	2110      	movs	r1, #16
 8002d72:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8002e84 <main+0x3a0>
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fe74 	bl	8002a64 <lsb_to_dps>
 8002d7c:	ed87 0a06 	vstr	s0, [r7, #24]
                        y = lsb_to_dps(bmi08_gyro.y, (float)250, 16);
 8002d80:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <main+0x398>)
 8002d82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d86:	2110      	movs	r1, #16
 8002d88:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8002e84 <main+0x3a0>
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fe69 	bl	8002a64 <lsb_to_dps>
 8002d92:	ed87 0a05 	vstr	s0, [r7, #20]
                        z = lsb_to_dps(bmi08_gyro.z, (float)250, 16);
 8002d96:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <main+0x398>)
 8002d98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d9c:	2110      	movs	r1, #16
 8002d9e:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8002e84 <main+0x3a0>
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fe5e 	bl	8002a64 <lsb_to_dps>
 8002da8:	ed87 0a04 	vstr	s0, [r7, #16]

                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002dac:	7fbe      	ldrb	r6, [r7, #30]
                               times_to_read,
                               bmi08_gyro.x,
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <main+0x398>)
 8002db0:	f9b3 3000 	ldrsh.w	r3, [r3]
                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002db4:	469a      	mov	sl, r3
                               bmi08_gyro.y,
 8002db6:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <main+0x398>)
 8002db8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002dbc:	469b      	mov	fp, r3
                               bmi08_gyro.z,
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <main+0x398>)
 8002dc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                        printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n",
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	69b8      	ldr	r0, [r7, #24]
 8002dc8:	f7fd fbde 	bl	8000588 <__aeabi_f2d>
 8002dcc:	4604      	mov	r4, r0
 8002dce:	460d      	mov	r5, r1
 8002dd0:	6978      	ldr	r0, [r7, #20]
 8002dd2:	f7fd fbd9 	bl	8000588 <__aeabi_f2d>
 8002dd6:	4680      	mov	r8, r0
 8002dd8:	4689      	mov	r9, r1
 8002dda:	6938      	ldr	r0, [r7, #16]
 8002ddc:	f7fd fbd4 	bl	8000588 <__aeabi_f2d>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002de8:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002dec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	465b      	mov	r3, fp
 8002df6:	4652      	mov	r2, sl
 8002df8:	4631      	mov	r1, r6
 8002dfa:	481a      	ldr	r0, [pc, #104]	; (8002e64 <main+0x380>)
 8002dfc:	f003 fed0 	bl	8006ba0 <iprintf>
                               x,
                               y,
                               z);

                        times_to_read = times_to_read + 1;
 8002e00:	7fbb      	ldrb	r3, [r7, #30]
 8002e02:	3301      	adds	r3, #1
 8002e04:	77bb      	strb	r3, [r7, #30]
                while (times_to_read < 10)
 8002e06:	7fbb      	ldrb	r3, [r7, #30]
 8002e08:	2b09      	cmp	r3, #9
 8002e0a:	d990      	bls.n	8002d2e <main+0x24a>
                }
            }
        }

        /* Disable data ready interrupts */
        rslt = disable_bmi08_interrupt();
 8002e0c:	f7ff fd92 	bl	8002934 <disable_bmi08_interrupt>
 8002e10:	4603      	mov	r3, r0
 8002e12:	77fb      	strb	r3, [r7, #31]
        bmi08_error_codes_print_result("disable_bmi08_interrupt", rslt);
 8002e14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481b      	ldr	r0, [pc, #108]	; (8002e88 <main+0x3a4>)
 8002e1c:	f7ff fbb8 	bl	8002590 <bmi08_error_codes_print_result>
    }

    bmi08_coines_deinit();
 8002e20:	f7ff fc5e 	bl	80026e0 <bmi08_coines_deinit>

    return rslt;
 8002e24:	f997 301f 	ldrsb.w	r3, [r7, #31]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3724      	adds	r7, #36	; 0x24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e32:	bf00      	nop
 8002e34:	200001fc 	.word	0x200001fc
 8002e38:	200002dc 	.word	0x200002dc
 8002e3c:	08009ee0 	.word	0x08009ee0
 8002e40:	08009ef8 	.word	0x08009ef8
 8002e44:	08009f04 	.word	0x08009f04
 8002e48:	08009f1c 	.word	0x08009f1c
 8002e4c:	08009f28 	.word	0x08009f28
 8002e50:	08009f5c 	.word	0x08009f5c
 8002e54:	08009f94 	.word	0x08009f94
 8002e58:	08009fe4 	.word	0x08009fe4
 8002e5c:	20000314 	.word	0x20000314
 8002e60:	0800a000 	.word	0x0800a000
 8002e64:	0800a010 	.word	0x0800a010
 8002e68:	0800a038 	.word	0x0800a038
 8002e6c:	0800a044 	.word	0x0800a044
 8002e70:	0800a074 	.word	0x0800a074
 8002e74:	0800a0a8 	.word	0x0800a0a8
 8002e78:	0800a0f8 	.word	0x0800a0f8
 8002e7c:	2000031c 	.word	0x2000031c
 8002e80:	0800a114 	.word	0x0800a114
 8002e84:	437a0000 	.word	0x437a0000
 8002e88:	0800a124 	.word	0x0800a124

08002e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b094      	sub	sp, #80	; 0x50
 8002e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	2234      	movs	r2, #52	; 0x34
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 fa0e 	bl	80062bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ea0:	f107 0308 	add.w	r3, r7, #8
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <SystemClock_Config+0xd0>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <SystemClock_Config+0xd0>)
 8002eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec0:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <SystemClock_Config+0xd0>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002ecc:	2300      	movs	r3, #0
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <SystemClock_Config+0xd4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ed8:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <SystemClock_Config+0xd4>)
 8002eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <SystemClock_Config+0xd4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002eec:	2302      	movs	r3, #2
 8002eee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002efc:	2300      	movs	r3, #0
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f00:	2308      	movs	r3, #8
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002f04:	2360      	movs	r3, #96	; 0x60
 8002f06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f10:	2302      	movs	r3, #2
 8002f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f14:	f107 031c 	add.w	r3, r7, #28
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 f979 	bl	8005210 <HAL_RCC_OscConfig>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002f24:	f000 f950 	bl	80031c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f28:	230f      	movs	r3, #15
 8002f2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f3e:	f107 0308 	add.w	r3, r7, #8
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 fe19 	bl	8004b7c <HAL_RCC_ClockConfig>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002f50:	f000 f93a 	bl	80031c8 <Error_Handler>
  }
}
 8002f54:	bf00      	nop
 8002f56:	3750      	adds	r7, #80	; 0x50
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000

08002f64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f6a:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <MX_I2C1_Init+0x54>)
 8002f6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f70:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <MX_I2C1_Init+0x58>)
 8002f72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f94:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fa0:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <MX_I2C1_Init+0x50>)
 8002fa2:	f000 fe2b 	bl	8003bfc <HAL_I2C_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fac:	f000 f90c 	bl	80031c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	200001fc 	.word	0x200001fc
 8002fb8:	40005400 	.word	0x40005400
 8002fbc:	000186a0 	.word	0x000186a0

08002fc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc6:	f107 0308 	add.w	r3, r7, #8
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fdc:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <MX_TIM1_Init+0x98>)
 8002fde:	4a1f      	ldr	r2, [pc, #124]	; (800305c <MX_TIM1_Init+0x9c>)
 8002fe0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <MX_TIM1_Init+0x98>)
 8002fe4:	222f      	movs	r2, #47	; 0x2f
 8002fe6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <MX_TIM1_Init+0x98>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xfffe;
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <MX_TIM1_Init+0x98>)
 8002ff0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ff4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff6:	4b18      	ldr	r3, [pc, #96]	; (8003058 <MX_TIM1_Init+0x98>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <MX_TIM1_Init+0x98>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <MX_TIM1_Init+0x98>)
 8003004:	2200      	movs	r2, #0
 8003006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003008:	4813      	ldr	r0, [pc, #76]	; (8003058 <MX_TIM1_Init+0x98>)
 800300a:	f002 fb9f 	bl	800574c <HAL_TIM_Base_Init>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003014:	f000 f8d8 	bl	80031c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800301e:	f107 0308 	add.w	r3, r7, #8
 8003022:	4619      	mov	r1, r3
 8003024:	480c      	ldr	r0, [pc, #48]	; (8003058 <MX_TIM1_Init+0x98>)
 8003026:	f002 fbe0 	bl	80057ea <HAL_TIM_ConfigClockSource>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003030:	f000 f8ca 	bl	80031c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003034:	2300      	movs	r3, #0
 8003036:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003038:	2300      	movs	r3, #0
 800303a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800303c:	463b      	mov	r3, r7
 800303e:	4619      	mov	r1, r3
 8003040:	4805      	ldr	r0, [pc, #20]	; (8003058 <MX_TIM1_Init+0x98>)
 8003042:	f002 fdd3 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800304c:	f000 f8bc 	bl	80031c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003050:	bf00      	nop
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000250 	.word	0x20000250
 800305c:	40010000 	.word	0x40010000

08003060 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 8003066:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <MX_USART2_UART_Init+0x50>)
 8003068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 800306c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 8003086:	220c      	movs	r2, #12
 8003088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003096:	4805      	ldr	r0, [pc, #20]	; (80030ac <MX_USART2_UART_Init+0x4c>)
 8003098:	f002 fe24 	bl	8005ce4 <HAL_UART_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030a2:	f000 f891 	bl	80031c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000298 	.word	0x20000298
 80030b0:	40004400 	.word	0x40004400

080030b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ba:	f107 0314 	add.w	r3, r7, #20
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	60da      	str	r2, [r3, #12]
 80030c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	4b2d      	ldr	r3, [pc, #180]	; (8003184 <MX_GPIO_Init+0xd0>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <MX_GPIO_Init+0xd0>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <MX_GPIO_Init+0xd0>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	4b26      	ldr	r3, [pc, #152]	; (8003184 <MX_GPIO_Init+0xd0>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a25      	ldr	r2, [pc, #148]	; (8003184 <MX_GPIO_Init+0xd0>)
 80030f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	4b23      	ldr	r3, [pc, #140]	; (8003184 <MX_GPIO_Init+0xd0>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <MX_GPIO_Init+0xd0>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <MX_GPIO_Init+0xd0>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <MX_GPIO_Init+0xd0>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <MX_GPIO_Init+0xd0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a17      	ldr	r2, [pc, #92]	; (8003184 <MX_GPIO_Init+0xd0>)
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <MX_GPIO_Init+0xd0>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800313a:	2200      	movs	r2, #0
 800313c:	2120      	movs	r1, #32
 800313e:	4812      	ldr	r0, [pc, #72]	; (8003188 <MX_GPIO_Init+0xd4>)
 8003140:	f000 fd42 	bl	8003bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800314a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800314e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	480c      	ldr	r0, [pc, #48]	; (800318c <MX_GPIO_Init+0xd8>)
 800315c:	f000 fba0 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003160:	2320      	movs	r3, #32
 8003162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003164:	2301      	movs	r3, #1
 8003166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316c:	2300      	movs	r3, #0
 800316e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	4619      	mov	r1, r3
 8003176:	4804      	ldr	r0, [pc, #16]	; (8003188 <MX_GPIO_Init+0xd4>)
 8003178:	f000 fb92 	bl	80038a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800317c:	bf00      	nop
 800317e:	3728      	adds	r7, #40	; 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40023800 	.word	0x40023800
 8003188:	40020000 	.word	0x40020000
 800318c:	40020800 	.word	0x40020800

08003190 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	e009      	b.n	80031b6 <_write+0x26>
		ITM_SendChar(*ptr++);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	60ba      	str	r2, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fa9f 	bl	80026ee <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	3301      	adds	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	dbf1      	blt.n	80031a2 <_write+0x12>
	}
	return len;
 80031be:	687b      	ldr	r3, [r7, #4]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031cc:	b672      	cpsid	i
}
 80031ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031d0:	e7fe      	b.n	80031d0 <Error_Handler+0x8>
	...

080031d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	4b10      	ldr	r3, [pc, #64]	; (8003220 <HAL_MspInit+0x4c>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a0f      	ldr	r2, [pc, #60]	; (8003220 <HAL_MspInit+0x4c>)
 80031e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_MspInit+0x4c>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f2:	607b      	str	r3, [r7, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_MspInit+0x4c>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <HAL_MspInit+0x4c>)
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_MspInit+0x4c>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800

08003224 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_I2C_MspInit+0x84>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d12b      	bne.n	800329e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	4b18      	ldr	r3, [pc, #96]	; (80032ac <HAL_I2C_MspInit+0x88>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a17      	ldr	r2, [pc, #92]	; (80032ac <HAL_I2C_MspInit+0x88>)
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_I2C_MspInit+0x88>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003262:	23c0      	movs	r3, #192	; 0xc0
 8003264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003266:	2312      	movs	r3, #18
 8003268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326e:	2303      	movs	r3, #3
 8003270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003272:	2304      	movs	r3, #4
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003276:	f107 0314 	add.w	r3, r7, #20
 800327a:	4619      	mov	r1, r3
 800327c:	480c      	ldr	r0, [pc, #48]	; (80032b0 <HAL_I2C_MspInit+0x8c>)
 800327e:	f000 fb0f 	bl	80038a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_I2C_MspInit+0x88>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <HAL_I2C_MspInit+0x88>)
 800328c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_I2C_MspInit+0x88>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800329e:	bf00      	nop
 80032a0:	3728      	adds	r7, #40	; 0x28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40005400 	.word	0x40005400
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40020400 	.word	0x40020400

080032b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0b      	ldr	r2, [pc, #44]	; (80032f0 <HAL_TIM_Base_MspInit+0x3c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10d      	bne.n	80032e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_TIM_Base_MspInit+0x40>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <HAL_TIM_Base_MspInit+0x40>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6453      	str	r3, [r2, #68]	; 0x44
 80032d6:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <HAL_TIM_Base_MspInit+0x40>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40023800 	.word	0x40023800

080032f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a19      	ldr	r2, [pc, #100]	; (800337c <HAL_UART_MspInit+0x84>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d12b      	bne.n	8003372 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_UART_MspInit+0x88>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a17      	ldr	r2, [pc, #92]	; (8003380 <HAL_UART_MspInit+0x88>)
 8003324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_UART_MspInit+0x88>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b11      	ldr	r3, [pc, #68]	; (8003380 <HAL_UART_MspInit+0x88>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a10      	ldr	r2, [pc, #64]	; (8003380 <HAL_UART_MspInit+0x88>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <HAL_UART_MspInit+0x88>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003352:	230c      	movs	r3, #12
 8003354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800335e:	2303      	movs	r3, #3
 8003360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003362:	2307      	movs	r3, #7
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003366:	f107 0314 	add.w	r3, r7, #20
 800336a:	4619      	mov	r1, r3
 800336c:	4805      	ldr	r0, [pc, #20]	; (8003384 <HAL_UART_MspInit+0x8c>)
 800336e:	f000 fa97 	bl	80038a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003372:	bf00      	nop
 8003374:	3728      	adds	r7, #40	; 0x28
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40004400 	.word	0x40004400
 8003380:	40023800 	.word	0x40023800
 8003384:	40020000 	.word	0x40020000

08003388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800338c:	e7fe      	b.n	800338c <NMI_Handler+0x4>

0800338e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003392:	e7fe      	b.n	8003392 <HardFault_Handler+0x4>

08003394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003398:	e7fe      	b.n	8003398 <MemManage_Handler+0x4>

0800339a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <BusFault_Handler+0x4>

080033a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <UsageFault_Handler+0x4>

080033a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033d4:	f000 f93a 	bl	800364c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}

080033dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return 1;
 80033e0:	2301      	movs	r3, #1
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <_kill>:

int _kill(int pid, int sig)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033f6:	f002 ff37 	bl	8006268 <__errno>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2216      	movs	r2, #22
 80033fe:	601a      	str	r2, [r3, #0]
  return -1;
 8003400:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_exit>:

void _exit (int status)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003414:	f04f 31ff 	mov.w	r1, #4294967295
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ffe7 	bl	80033ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800341e:	e7fe      	b.n	800341e <_exit+0x12>

08003420 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	e00a      	b.n	8003448 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003432:	f3af 8000 	nop.w
 8003436:	4601      	mov	r1, r0
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	60ba      	str	r2, [r7, #8]
 800343e:	b2ca      	uxtb	r2, r1
 8003440:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	3301      	adds	r3, #1
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	dbf0      	blt.n	8003432 <_read+0x12>
  }

  return len;
 8003450:	687b      	ldr	r3, [r7, #4]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <_close>:
  }
  return len;
}

int _close(int file)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003482:	605a      	str	r2, [r3, #4]
  return 0;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <_isatty>:

int _isatty(int file)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800349a:	2301      	movs	r3, #1
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034cc:	4a14      	ldr	r2, [pc, #80]	; (8003520 <_sbrk+0x5c>)
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <_sbrk+0x60>)
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034d8:	4b13      	ldr	r3, [pc, #76]	; (8003528 <_sbrk+0x64>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <_sbrk+0x64>)
 80034e2:	4a12      	ldr	r2, [pc, #72]	; (800352c <_sbrk+0x68>)
 80034e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <_sbrk+0x64>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d207      	bcs.n	8003504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034f4:	f002 feb8 	bl	8006268 <__errno>
 80034f8:	4603      	mov	r3, r0
 80034fa:	220c      	movs	r2, #12
 80034fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003502:	e009      	b.n	8003518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <_sbrk+0x64>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <_sbrk+0x64>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <_sbrk+0x64>)
 8003514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003516:	68fb      	ldr	r3, [r7, #12]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20020000 	.word	0x20020000
 8003524:	00000400 	.word	0x00000400
 8003528:	20000334 	.word	0x20000334
 800352c:	20000350 	.word	0x20000350

08003530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <SystemInit+0x20>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	4a05      	ldr	r2, [pc, #20]	; (8003550 <SystemInit+0x20>)
 800353c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800358c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003558:	480d      	ldr	r0, [pc, #52]	; (8003590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800355a:	490e      	ldr	r1, [pc, #56]	; (8003594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800355c:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800355e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003560:	e002      	b.n	8003568 <LoopCopyDataInit>

08003562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003566:	3304      	adds	r3, #4

08003568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800356a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800356c:	d3f9      	bcc.n	8003562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800356e:	4a0b      	ldr	r2, [pc, #44]	; (800359c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003570:	4c0b      	ldr	r4, [pc, #44]	; (80035a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003574:	e001      	b.n	800357a <LoopFillZerobss>

08003576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003578:	3204      	adds	r2, #4

0800357a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800357a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800357c:	d3fb      	bcc.n	8003576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800357e:	f7ff ffd7 	bl	8003530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003582:	f002 fe77 	bl	8006274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003586:	f7ff faad 	bl	8002ae4 <main>
  bx  lr    
 800358a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800358c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003594:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003598:	0800bd70 	.word	0x0800bd70
  ldr r2, =_sbss
 800359c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80035a0:	2000034c 	.word	0x2000034c

080035a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035a4:	e7fe      	b.n	80035a4 <ADC_IRQHandler>
	...

080035a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_Init+0x40>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <HAL_Init+0x40>)
 80035b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_Init+0x40>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <HAL_Init+0x40>)
 80035be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_Init+0x40>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <HAL_Init+0x40>)
 80035ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d0:	2003      	movs	r0, #3
 80035d2:	f000 f931 	bl	8003838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f000 f808 	bl	80035ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035dc:	f7ff fdfa 	bl	80031d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023c00 	.word	0x40023c00

080035ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_InitTick+0x54>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_InitTick+0x58>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003602:	fbb3 f3f1 	udiv	r3, r3, r1
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f93b 	bl	8003886 <HAL_SYSTICK_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e00e      	b.n	8003638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d80a      	bhi.n	8003636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003620:	2200      	movs	r2, #0
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	f000 f911 	bl	800384e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800362c:	4a06      	ldr	r2, [pc, #24]	; (8003648 <HAL_InitTick+0x5c>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000000 	.word	0x20000000
 8003644:	20000008 	.word	0x20000008
 8003648:	20000004 	.word	0x20000004

0800364c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_IncTick+0x20>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_IncTick+0x24>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4413      	add	r3, r2
 800365c:	4a04      	ldr	r2, [pc, #16]	; (8003670 <HAL_IncTick+0x24>)
 800365e:	6013      	str	r3, [r2, #0]
}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000008 	.word	0x20000008
 8003670:	20000338 	.word	0x20000338

08003674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return uwTick;
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_GetTick+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000338 	.word	0x20000338

0800368c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003694:	f7ff ffee 	bl	8003674 <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d005      	beq.n	80036b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <HAL_Delay+0x44>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036b2:	bf00      	nop
 80036b4:	f7ff ffde 	bl	8003674 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d8f7      	bhi.n	80036b4 <HAL_Delay+0x28>
  {
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000008 	.word	0x20000008

080036d4 <__NVIC_SetPriorityGrouping>:
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036f0:	4013      	ands	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003706:	4a04      	ldr	r2, [pc, #16]	; (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	60d3      	str	r3, [r2, #12]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <__NVIC_GetPriorityGrouping>:
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <__NVIC_GetPriorityGrouping+0x18>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	0a1b      	lsrs	r3, r3, #8
 8003726:	f003 0307 	and.w	r3, r3, #7
}
 800372a:	4618      	mov	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_SetPriority>:
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	6039      	str	r1, [r7, #0]
 8003742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003748:	2b00      	cmp	r3, #0
 800374a:	db0a      	blt.n	8003762 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	b2da      	uxtb	r2, r3
 8003750:	490c      	ldr	r1, [pc, #48]	; (8003784 <__NVIC_SetPriority+0x4c>)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	0112      	lsls	r2, r2, #4
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	440b      	add	r3, r1
 800375c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003760:	e00a      	b.n	8003778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4908      	ldr	r1, [pc, #32]	; (8003788 <__NVIC_SetPriority+0x50>)
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	3b04      	subs	r3, #4
 8003770:	0112      	lsls	r2, r2, #4
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	440b      	add	r3, r1
 8003776:	761a      	strb	r2, [r3, #24]
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000e100 	.word	0xe000e100
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <NVIC_EncodePriority>:
{
 800378c:	b480      	push	{r7}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f1c3 0307 	rsb	r3, r3, #7
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	bf28      	it	cs
 80037aa:	2304      	movcs	r3, #4
 80037ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3304      	adds	r3, #4
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	d902      	bls.n	80037bc <NVIC_EncodePriority+0x30>
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3b03      	subs	r3, #3
 80037ba:	e000      	b.n	80037be <NVIC_EncodePriority+0x32>
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c0:	f04f 32ff 	mov.w	r2, #4294967295
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43da      	mvns	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	401a      	ands	r2, r3
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037d4:	f04f 31ff 	mov.w	r1, #4294967295
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	43d9      	mvns	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e4:	4313      	orrs	r3, r2
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3724      	adds	r7, #36	; 0x24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <SysTick_Config>:
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003804:	d301      	bcc.n	800380a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003806:	2301      	movs	r3, #1
 8003808:	e00f      	b.n	800382a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800380a:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <SysTick_Config+0x40>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3b01      	subs	r3, #1
 8003810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003812:	210f      	movs	r1, #15
 8003814:	f04f 30ff 	mov.w	r0, #4294967295
 8003818:	f7ff ff8e 	bl	8003738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <SysTick_Config+0x40>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <SysTick_Config+0x40>)
 8003824:	2207      	movs	r2, #7
 8003826:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	e000e010 	.word	0xe000e010

08003838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ff47 	bl	80036d4 <__NVIC_SetPriorityGrouping>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	4603      	mov	r3, r0
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003860:	f7ff ff5c 	bl	800371c <__NVIC_GetPriorityGrouping>
 8003864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	6978      	ldr	r0, [r7, #20]
 800386c:	f7ff ff8e 	bl	800378c <NVIC_EncodePriority>
 8003870:	4602      	mov	r2, r0
 8003872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff5d 	bl	8003738 <__NVIC_SetPriority>
}
 800387e:	bf00      	nop
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff ffb0 	bl	80037f4 <SysTick_Config>
 8003894:	4603      	mov	r3, r0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e165      	b.n	8003b88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038bc:	2201      	movs	r2, #1
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	f040 8154 	bne.w	8003b82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d005      	beq.n	80038f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d130      	bne.n	8003954 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003928:	2201      	movs	r2, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 0201 	and.w	r2, r3, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	2b03      	cmp	r3, #3
 800395e:	d017      	beq.n	8003990 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	2203      	movs	r2, #3
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d123      	bne.n	80039e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	08da      	lsrs	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3208      	adds	r2, #8
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	220f      	movs	r2, #15
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	08da      	lsrs	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	69b9      	ldr	r1, [r7, #24]
 80039e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0203 	and.w	r2, r3, #3
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80ae 	beq.w	8003b82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4b5d      	ldr	r3, [pc, #372]	; (8003ba0 <HAL_GPIO_Init+0x300>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	4a5c      	ldr	r2, [pc, #368]	; (8003ba0 <HAL_GPIO_Init+0x300>)
 8003a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a34:	6453      	str	r3, [r2, #68]	; 0x44
 8003a36:	4b5a      	ldr	r3, [pc, #360]	; (8003ba0 <HAL_GPIO_Init+0x300>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a42:	4a58      	ldr	r2, [pc, #352]	; (8003ba4 <HAL_GPIO_Init+0x304>)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	3302      	adds	r3, #2
 8003a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	220f      	movs	r2, #15
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a4f      	ldr	r2, [pc, #316]	; (8003ba8 <HAL_GPIO_Init+0x308>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d025      	beq.n	8003aba <HAL_GPIO_Init+0x21a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a4e      	ldr	r2, [pc, #312]	; (8003bac <HAL_GPIO_Init+0x30c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01f      	beq.n	8003ab6 <HAL_GPIO_Init+0x216>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4d      	ldr	r2, [pc, #308]	; (8003bb0 <HAL_GPIO_Init+0x310>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d019      	beq.n	8003ab2 <HAL_GPIO_Init+0x212>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4c      	ldr	r2, [pc, #304]	; (8003bb4 <HAL_GPIO_Init+0x314>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_GPIO_Init+0x20e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4b      	ldr	r2, [pc, #300]	; (8003bb8 <HAL_GPIO_Init+0x318>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00d      	beq.n	8003aaa <HAL_GPIO_Init+0x20a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4a      	ldr	r2, [pc, #296]	; (8003bbc <HAL_GPIO_Init+0x31c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <HAL_GPIO_Init+0x206>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a49      	ldr	r2, [pc, #292]	; (8003bc0 <HAL_GPIO_Init+0x320>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_GPIO_Init+0x202>
 8003a9e:	2306      	movs	r3, #6
 8003aa0:	e00c      	b.n	8003abc <HAL_GPIO_Init+0x21c>
 8003aa2:	2307      	movs	r3, #7
 8003aa4:	e00a      	b.n	8003abc <HAL_GPIO_Init+0x21c>
 8003aa6:	2305      	movs	r3, #5
 8003aa8:	e008      	b.n	8003abc <HAL_GPIO_Init+0x21c>
 8003aaa:	2304      	movs	r3, #4
 8003aac:	e006      	b.n	8003abc <HAL_GPIO_Init+0x21c>
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e004      	b.n	8003abc <HAL_GPIO_Init+0x21c>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e002      	b.n	8003abc <HAL_GPIO_Init+0x21c>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_GPIO_Init+0x21c>
 8003aba:	2300      	movs	r3, #0
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	f002 0203 	and.w	r2, r2, #3
 8003ac2:	0092      	lsls	r2, r2, #2
 8003ac4:	4093      	lsls	r3, r2
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003acc:	4935      	ldr	r1, [pc, #212]	; (8003ba4 <HAL_GPIO_Init+0x304>)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	089b      	lsrs	r3, r3, #2
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ada:	4b3a      	ldr	r3, [pc, #232]	; (8003bc4 <HAL_GPIO_Init+0x324>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003afe:	4a31      	ldr	r2, [pc, #196]	; (8003bc4 <HAL_GPIO_Init+0x324>)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b04:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <HAL_GPIO_Init+0x324>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b28:	4a26      	ldr	r2, [pc, #152]	; (8003bc4 <HAL_GPIO_Init+0x324>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b2e:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <HAL_GPIO_Init+0x324>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b52:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <HAL_GPIO_Init+0x324>)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b58:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <HAL_GPIO_Init+0x324>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b7c:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <HAL_GPIO_Init+0x324>)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3301      	adds	r3, #1
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	f67f ae96 	bls.w	80038bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	3724      	adds	r7, #36	; 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40013800 	.word	0x40013800
 8003ba8:	40020000 	.word	0x40020000
 8003bac:	40020400 	.word	0x40020400
 8003bb0:	40020800 	.word	0x40020800
 8003bb4:	40020c00 	.word	0x40020c00
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40021400 	.word	0x40021400
 8003bc0:	40021800 	.word	0x40021800
 8003bc4:	40013c00 	.word	0x40013c00

08003bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bd8:	787b      	ldrb	r3, [r7, #1]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003be4:	e003      	b.n	8003bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003be6:	887b      	ldrh	r3, [r7, #2]
 8003be8:	041a      	lsls	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	619a      	str	r2, [r3, #24]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e12b      	b.n	8003e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff fafe 	bl	8003224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2224      	movs	r2, #36	; 0x24
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c60:	f001 f87e 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 8003c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4a81      	ldr	r2, [pc, #516]	; (8003e70 <HAL_I2C_Init+0x274>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d807      	bhi.n	8003c80 <HAL_I2C_Init+0x84>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a80      	ldr	r2, [pc, #512]	; (8003e74 <HAL_I2C_Init+0x278>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	bf94      	ite	ls
 8003c78:	2301      	movls	r3, #1
 8003c7a:	2300      	movhi	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e006      	b.n	8003c8e <HAL_I2C_Init+0x92>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4a7d      	ldr	r2, [pc, #500]	; (8003e78 <HAL_I2C_Init+0x27c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	bf94      	ite	ls
 8003c88:	2301      	movls	r3, #1
 8003c8a:	2300      	movhi	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e0e7      	b.n	8003e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4a78      	ldr	r2, [pc, #480]	; (8003e7c <HAL_I2C_Init+0x280>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0c9b      	lsrs	r3, r3, #18
 8003ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4a6a      	ldr	r2, [pc, #424]	; (8003e70 <HAL_I2C_Init+0x274>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d802      	bhi.n	8003cd0 <HAL_I2C_Init+0xd4>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	e009      	b.n	8003ce4 <HAL_I2C_Init+0xe8>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	4a69      	ldr	r2, [pc, #420]	; (8003e80 <HAL_I2C_Init+0x284>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	099b      	lsrs	r3, r3, #6
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	495c      	ldr	r1, [pc, #368]	; (8003e70 <HAL_I2C_Init+0x274>)
 8003d00:	428b      	cmp	r3, r1
 8003d02:	d819      	bhi.n	8003d38 <HAL_I2C_Init+0x13c>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1e59      	subs	r1, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d12:	1c59      	adds	r1, r3, #1
 8003d14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d18:	400b      	ands	r3, r1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_I2C_Init+0x138>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1e59      	subs	r1, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d32:	e051      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003d34:	2304      	movs	r3, #4
 8003d36:	e04f      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d111      	bne.n	8003d64 <HAL_I2C_Init+0x168>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1e58      	subs	r0, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	440b      	add	r3, r1
 8003d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e012      	b.n	8003d8a <HAL_I2C_Init+0x18e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e58      	subs	r0, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	0099      	lsls	r1, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Init+0x196>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e022      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10e      	bne.n	8003db8 <HAL_I2C_Init+0x1bc>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1e58      	subs	r0, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	440b      	add	r3, r1
 8003da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dac:	3301      	adds	r3, #1
 8003dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db6:	e00f      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1e58      	subs	r0, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	0099      	lsls	r1, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dce:	3301      	adds	r3, #1
 8003dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	6809      	ldr	r1, [r1, #0]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6911      	ldr	r1, [r2, #16]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68d2      	ldr	r2, [r2, #12]
 8003e12:	4311      	orrs	r1, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	000186a0 	.word	0x000186a0
 8003e74:	001e847f 	.word	0x001e847f
 8003e78:	003d08ff 	.word	0x003d08ff
 8003e7c:	431bde83 	.word	0x431bde83
 8003e80:	10624dd3 	.word	0x10624dd3

08003e84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	461a      	mov	r2, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	817b      	strh	r3, [r7, #10]
 8003e96:	460b      	mov	r3, r1
 8003e98:	813b      	strh	r3, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e9e:	f7ff fbe9 	bl	8003674 <HAL_GetTick>
 8003ea2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	f040 80d9 	bne.w	8004064 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	2319      	movs	r3, #25
 8003eb8:	2201      	movs	r2, #1
 8003eba:	496d      	ldr	r1, [pc, #436]	; (8004070 <HAL_I2C_Mem_Write+0x1ec>)
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fc7f 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e0cc      	b.n	8004066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_I2C_Mem_Write+0x56>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e0c5      	b.n	8004066 <HAL_I2C_Mem_Write+0x1e2>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d007      	beq.n	8003f00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2221      	movs	r2, #33	; 0x21
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2240      	movs	r2, #64	; 0x40
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a3a      	ldr	r2, [r7, #32]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a4d      	ldr	r2, [pc, #308]	; (8004074 <HAL_I2C_Mem_Write+0x1f0>)
 8003f40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f42:	88f8      	ldrh	r0, [r7, #6]
 8003f44:	893a      	ldrh	r2, [r7, #8]
 8003f46:	8979      	ldrh	r1, [r7, #10]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	4603      	mov	r3, r0
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fab6 	bl	80044c4 <I2C_RequestMemoryWrite>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d052      	beq.n	8004004 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e081      	b.n	8004066 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fd00 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00d      	beq.n	8003f8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d107      	bne.n	8003f8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e06b      	b.n	8004066 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d11b      	bne.n	8004004 <HAL_I2C_Mem_Write+0x180>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d017      	beq.n	8004004 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	781a      	ldrb	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1aa      	bne.n	8003f62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fcec 	bl	80049ee <I2C_WaitOnBTFFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	2b04      	cmp	r3, #4
 8004022:	d107      	bne.n	8004034 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004032:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e016      	b.n	8004066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	e000      	b.n	8004066 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004064:	2302      	movs	r3, #2
  }
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	00100002 	.word	0x00100002
 8004074:	ffff0000 	.word	0xffff0000

08004078 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08c      	sub	sp, #48	; 0x30
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	461a      	mov	r2, r3
 8004086:	4603      	mov	r3, r0
 8004088:	817b      	strh	r3, [r7, #10]
 800408a:	460b      	mov	r3, r1
 800408c:	813b      	strh	r3, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004092:	f7ff faef 	bl	8003674 <HAL_GetTick>
 8004096:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	f040 8208 	bne.w	80044b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2319      	movs	r3, #25
 80040ac:	2201      	movs	r2, #1
 80040ae:	497b      	ldr	r1, [pc, #492]	; (800429c <HAL_I2C_Mem_Read+0x224>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fb85 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
 80040be:	e1fb      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_I2C_Mem_Read+0x56>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e1f4      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d007      	beq.n	80040f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2222      	movs	r2, #34	; 0x22
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2240      	movs	r2, #64	; 0x40
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a5b      	ldr	r2, [pc, #364]	; (80042a0 <HAL_I2C_Mem_Read+0x228>)
 8004134:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004136:	88f8      	ldrh	r0, [r7, #6]
 8004138:	893a      	ldrh	r2, [r7, #8]
 800413a:	8979      	ldrh	r1, [r7, #10]
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	4603      	mov	r3, r0
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fa52 	bl	80045f0 <I2C_RequestMemoryRead>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e1b0      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	2b00      	cmp	r3, #0
 800415c:	d113      	bne.n	8004186 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415e:	2300      	movs	r3, #0
 8004160:	623b      	str	r3, [r7, #32]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	623b      	str	r3, [r7, #32]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	623b      	str	r3, [r7, #32]
 8004172:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e184      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418a:	2b01      	cmp	r3, #1
 800418c:	d11b      	bne.n	80041c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e164      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d11b      	bne.n	8004206 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ee:	2300      	movs	r3, #0
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	e144      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004206:	2300      	movs	r3, #0
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800421c:	e138      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004222:	2b03      	cmp	r3, #3
 8004224:	f200 80f1 	bhi.w	800440a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	2b01      	cmp	r3, #1
 800422e:	d123      	bne.n	8004278 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004232:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fc1b 	bl	8004a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e139      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004276:	e10b      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427c:	2b02      	cmp	r3, #2
 800427e:	d14e      	bne.n	800431e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	2200      	movs	r2, #0
 8004288:	4906      	ldr	r1, [pc, #24]	; (80042a4 <HAL_I2C_Mem_Read+0x22c>)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fa98 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d008      	beq.n	80042a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e10e      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
 800429a:	bf00      	nop
 800429c:	00100002 	.word	0x00100002
 80042a0:	ffff0000 	.word	0xffff0000
 80042a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800431c:	e0b8      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004324:	2200      	movs	r2, #0
 8004326:	4966      	ldr	r1, [pc, #408]	; (80044c0 <HAL_I2C_Mem_Read+0x448>)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fa49 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0bf      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	2200      	movs	r2, #0
 8004382:	494f      	ldr	r1, [pc, #316]	; (80044c0 <HAL_I2C_Mem_Read+0x448>)
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 fa1b 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e091      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004408:	e042      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800440a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fb2e 	bl	8004a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e04c      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b04      	cmp	r3, #4
 800445c:	d118      	bne.n	8004490 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	f47f aec2 	bne.w	800421e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3728      	adds	r7, #40	; 0x28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	00010004 	.word	0x00010004

080044c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	4608      	mov	r0, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	817b      	strh	r3, [r7, #10]
 80044d6:	460b      	mov	r3, r1
 80044d8:	813b      	strh	r3, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f960 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00d      	beq.n	8004522 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004514:	d103      	bne.n	800451e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e05f      	b.n	80045e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004522:	897b      	ldrh	r3, [r7, #10]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004530:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	6a3a      	ldr	r2, [r7, #32]
 8004536:	492d      	ldr	r1, [pc, #180]	; (80045ec <I2C_RequestMemoryWrite+0x128>)
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f998 	bl	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e04c      	b.n	80045e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004560:	6a39      	ldr	r1, [r7, #32]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fa02 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	2b04      	cmp	r3, #4
 8004574:	d107      	bne.n	8004586 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004584:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e02b      	b.n	80045e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004590:	893b      	ldrh	r3, [r7, #8]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	611a      	str	r2, [r3, #16]
 800459a:	e021      	b.n	80045e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800459c:	893b      	ldrh	r3, [r7, #8]
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ac:	6a39      	ldr	r1, [r7, #32]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f9dc 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00d      	beq.n	80045d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d107      	bne.n	80045d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e005      	b.n	80045e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045d6:	893b      	ldrh	r3, [r7, #8]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	00010002 	.word	0x00010002

080045f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	817b      	strh	r3, [r7, #10]
 8004602:	460b      	mov	r3, r1
 8004604:	813b      	strh	r3, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004618:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004628:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	2200      	movs	r2, #0
 8004632:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f8c2 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004650:	d103      	bne.n	800465a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0aa      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800465e:	897b      	ldrh	r3, [r7, #10]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800466c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	6a3a      	ldr	r2, [r7, #32]
 8004672:	4952      	ldr	r1, [pc, #328]	; (80047bc <I2C_RequestMemoryRead+0x1cc>)
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f8fa 	bl	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e097      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800469a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469c:	6a39      	ldr	r1, [r7, #32]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f964 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00d      	beq.n	80046c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d107      	bne.n	80046c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e076      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d105      	bne.n	80046d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046cc:	893b      	ldrh	r3, [r7, #8]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	611a      	str	r2, [r3, #16]
 80046d6:	e021      	b.n	800471c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046d8:	893b      	ldrh	r3, [r7, #8]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	b29b      	uxth	r3, r3
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e8:	6a39      	ldr	r1, [r7, #32]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f93e 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00d      	beq.n	8004712 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d107      	bne.n	800470e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e050      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004712:	893b      	ldrh	r3, [r7, #8]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471e:	6a39      	ldr	r1, [r7, #32]
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f923 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00d      	beq.n	8004748 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	2b04      	cmp	r3, #4
 8004732:	d107      	bne.n	8004744 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004742:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e035      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004756:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	2200      	movs	r2, #0
 8004760:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f82b 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00d      	beq.n	800478c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477e:	d103      	bne.n	8004788 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004786:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e013      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800478c:	897b      	ldrh	r3, [r7, #10]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	6a3a      	ldr	r2, [r7, #32]
 80047a0:	4906      	ldr	r1, [pc, #24]	; (80047bc <I2C_RequestMemoryRead+0x1cc>)
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f863 	bl	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	00010002 	.word	0x00010002

080047c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d0:	e025      	b.n	800481e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d021      	beq.n	800481e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fe ff4b 	bl	8003674 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d116      	bne.n	800481e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e023      	b.n	8004866 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d10d      	bne.n	8004844 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	43da      	mvns	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	e00c      	b.n	800485e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	43da      	mvns	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4013      	ands	r3, r2
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	bf0c      	ite	eq
 8004856:	2301      	moveq	r3, #1
 8004858:	2300      	movne	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	429a      	cmp	r2, r3
 8004862:	d0b6      	beq.n	80047d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800487c:	e051      	b.n	8004922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488c:	d123      	bne.n	80048d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f043 0204 	orr.w	r2, r3, #4
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e046      	b.n	8004964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d021      	beq.n	8004922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048de:	f7fe fec9 	bl	8003674 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d302      	bcc.n	80048f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d116      	bne.n	8004922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e020      	b.n	8004964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d10c      	bne.n	8004946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	43da      	mvns	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4013      	ands	r3, r2
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	bf14      	ite	ne
 800493e:	2301      	movne	r3, #1
 8004940:	2300      	moveq	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	e00b      	b.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	43da      	mvns	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4013      	ands	r3, r2
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf14      	ite	ne
 8004958:	2301      	movne	r3, #1
 800495a:	2300      	moveq	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d18d      	bne.n	800487e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004978:	e02d      	b.n	80049d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f8ce 	bl	8004b1c <I2C_IsAcknowledgeFailed>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e02d      	b.n	80049e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d021      	beq.n	80049d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004992:	f7fe fe6f 	bl	8003674 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d302      	bcc.n	80049a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d116      	bne.n	80049d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f043 0220 	orr.w	r2, r3, #32
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e007      	b.n	80049e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	2b80      	cmp	r3, #128	; 0x80
 80049e2:	d1ca      	bne.n	800497a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049fa:	e02d      	b.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f88d 	bl	8004b1c <I2C_IsAcknowledgeFailed>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e02d      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	d021      	beq.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a14:	f7fe fe2e 	bl	8003674 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d302      	bcc.n	8004a2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d116      	bne.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e007      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d1ca      	bne.n	80049fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a7c:	e042      	b.n	8004b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d119      	bne.n	8004ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0210 	mvn.w	r2, #16
 8004a94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e029      	b.n	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac0:	f7fe fdd8 	bl	8003674 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d302      	bcc.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d116      	bne.n	8004b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e007      	b.n	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d1b5      	bne.n	8004a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b32:	d11b      	bne.n	8004b6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	f043 0204 	orr.w	r2, r3, #4
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0cc      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b90:	4b68      	ldr	r3, [pc, #416]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d90c      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b65      	ldr	r3, [pc, #404]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b63      	ldr	r3, [pc, #396]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0b8      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd0:	4b59      	ldr	r3, [pc, #356]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	4a58      	ldr	r2, [pc, #352]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004be8:	4b53      	ldr	r3, [pc, #332]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a52      	ldr	r2, [pc, #328]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf4:	4b50      	ldr	r3, [pc, #320]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	494d      	ldr	r1, [pc, #308]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d044      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1a:	4b47      	ldr	r3, [pc, #284]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d119      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d107      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3a:	4b3f      	ldr	r3, [pc, #252]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e06f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4a:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e067      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c5a:	4b37      	ldr	r3, [pc, #220]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f023 0203 	bic.w	r2, r3, #3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4934      	ldr	r1, [pc, #208]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c6c:	f7fe fd02 	bl	8003674 <HAL_GetTick>
 8004c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c74:	f7fe fcfe 	bl	8003674 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e04f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	4b2b      	ldr	r3, [pc, #172]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 020c 	and.w	r2, r3, #12
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d1eb      	bne.n	8004c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c9c:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d20c      	bcs.n	8004cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004caa:	4b22      	ldr	r3, [pc, #136]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb2:	4b20      	ldr	r3, [pc, #128]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e032      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd0:	4b19      	ldr	r3, [pc, #100]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4916      	ldr	r1, [pc, #88]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cee:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	490e      	ldr	r1, [pc, #56]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d02:	f000 f855 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8004d06:	4602      	mov	r2, r0
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	490a      	ldr	r1, [pc, #40]	; (8004d3c <HAL_RCC_ClockConfig+0x1c0>)
 8004d14:	5ccb      	ldrb	r3, [r1, r3]
 8004d16:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_RCC_ClockConfig+0x1c8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fe fc62 	bl	80035ec <HAL_InitTick>

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40023c00 	.word	0x40023c00
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	0800b93c 	.word	0x0800b93c
 8004d40:	20000000 	.word	0x20000000
 8004d44:	20000004 	.word	0x20000004

08004d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d4c:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000000 	.word	0x20000000

08004d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d64:	f7ff fff0 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	0a9b      	lsrs	r3, r3, #10
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4903      	ldr	r1, [pc, #12]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40023800 	.word	0x40023800
 8004d84:	0800b94c 	.word	0x0800b94c

08004d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d8c:	f7ff ffdc 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0b5b      	lsrs	r3, r3, #13
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	4903      	ldr	r1, [pc, #12]	; (8004dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d9e:	5ccb      	ldrb	r3, [r1, r3]
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40023800 	.word	0x40023800
 8004dac:	0800b94c 	.word	0x0800b94c

08004db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db4:	b0ae      	sub	sp, #184	; 0xb8
 8004db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dd6:	4bcb      	ldr	r3, [pc, #812]	; (8005104 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	f200 8206 	bhi.w	80051f0 <HAL_RCC_GetSysClockFreq+0x440>
 8004de4:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <HAL_RCC_GetSysClockFreq+0x3c>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004e21 	.word	0x08004e21
 8004df0:	080051f1 	.word	0x080051f1
 8004df4:	080051f1 	.word	0x080051f1
 8004df8:	080051f1 	.word	0x080051f1
 8004dfc:	08004e29 	.word	0x08004e29
 8004e00:	080051f1 	.word	0x080051f1
 8004e04:	080051f1 	.word	0x080051f1
 8004e08:	080051f1 	.word	0x080051f1
 8004e0c:	08004e31 	.word	0x08004e31
 8004e10:	080051f1 	.word	0x080051f1
 8004e14:	080051f1 	.word	0x080051f1
 8004e18:	080051f1 	.word	0x080051f1
 8004e1c:	08005021 	.word	0x08005021
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e20:	4bb9      	ldr	r3, [pc, #740]	; (8005108 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004e26:	e1e7      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e28:	4bb8      	ldr	r3, [pc, #736]	; (800510c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e2e:	e1e3      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e30:	4bb4      	ldr	r3, [pc, #720]	; (8005104 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e3c:	4bb1      	ldr	r3, [pc, #708]	; (8005104 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d071      	beq.n	8004f2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e48:	4bae      	ldr	r3, [pc, #696]	; (8005104 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	099b      	lsrs	r3, r3, #6
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e54:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e64:	2300      	movs	r3, #0
 8004e66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e6e:	4622      	mov	r2, r4
 8004e70:	462b      	mov	r3, r5
 8004e72:	f04f 0000 	mov.w	r0, #0
 8004e76:	f04f 0100 	mov.w	r1, #0
 8004e7a:	0159      	lsls	r1, r3, #5
 8004e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e80:	0150      	lsls	r0, r2, #5
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4621      	mov	r1, r4
 8004e88:	1a51      	subs	r1, r2, r1
 8004e8a:	6439      	str	r1, [r7, #64]	; 0x40
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e92:	647b      	str	r3, [r7, #68]	; 0x44
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	018b      	lsls	r3, r1, #6
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eaa:	4641      	mov	r1, r8
 8004eac:	018a      	lsls	r2, r1, #6
 8004eae:	4641      	mov	r1, r8
 8004eb0:	1a51      	subs	r1, r2, r1
 8004eb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004ec8:	4649      	mov	r1, r9
 8004eca:	00cb      	lsls	r3, r1, #3
 8004ecc:	4641      	mov	r1, r8
 8004ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ed2:	4641      	mov	r1, r8
 8004ed4:	00ca      	lsls	r2, r1, #3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4603      	mov	r3, r0
 8004edc:	4622      	mov	r2, r4
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee2:	462b      	mov	r3, r5
 8004ee4:	460a      	mov	r2, r1
 8004ee6:	eb42 0303 	adc.w	r3, r2, r3
 8004eea:	637b      	str	r3, [r7, #52]	; 0x34
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ef8:	4629      	mov	r1, r5
 8004efa:	024b      	lsls	r3, r1, #9
 8004efc:	4621      	mov	r1, r4
 8004efe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f02:	4621      	mov	r1, r4
 8004f04:	024a      	lsls	r2, r1, #9
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004f1c:	f7fb feb4 	bl	8000c88 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4613      	mov	r3, r2
 8004f26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f2a:	e067      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2c:	4b75      	ldr	r3, [pc, #468]	; (8005104 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	099b      	lsrs	r3, r3, #6
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f38:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004f3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f44:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f46:	2300      	movs	r3, #0
 8004f48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004f4e:	4622      	mov	r2, r4
 8004f50:	462b      	mov	r3, r5
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f04f 0100 	mov.w	r1, #0
 8004f5a:	0159      	lsls	r1, r3, #5
 8004f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f60:	0150      	lsls	r0, r2, #5
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4621      	mov	r1, r4
 8004f68:	1a51      	subs	r1, r2, r1
 8004f6a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004f80:	4649      	mov	r1, r9
 8004f82:	018b      	lsls	r3, r1, #6
 8004f84:	4641      	mov	r1, r8
 8004f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f8a:	4641      	mov	r1, r8
 8004f8c:	018a      	lsls	r2, r1, #6
 8004f8e:	4641      	mov	r1, r8
 8004f90:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f94:	4649      	mov	r1, r9
 8004f96:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fa6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004faa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fae:	4692      	mov	sl, r2
 8004fb0:	469b      	mov	fp, r3
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	eb1a 0303 	adds.w	r3, sl, r3
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	462b      	mov	r3, r5
 8004fbc:	eb4b 0303 	adc.w	r3, fp, r3
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004fce:	4629      	mov	r1, r5
 8004fd0:	028b      	lsls	r3, r1, #10
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fd8:	4621      	mov	r1, r4
 8004fda:	028a      	lsls	r2, r1, #10
 8004fdc:	4610      	mov	r0, r2
 8004fde:	4619      	mov	r1, r3
 8004fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	673b      	str	r3, [r7, #112]	; 0x70
 8004fe8:	677a      	str	r2, [r7, #116]	; 0x74
 8004fea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004fee:	f7fb fe4b 	bl	8000c88 <__aeabi_uldivmod>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ffc:	4b41      	ldr	r3, [pc, #260]	; (8005104 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	3301      	adds	r3, #1
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800500e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005012:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005016:	fbb2 f3f3 	udiv	r3, r2, r3
 800501a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800501e:	e0eb      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005020:	4b38      	ldr	r3, [pc, #224]	; (8005104 <HAL_RCC_GetSysClockFreq+0x354>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800502c:	4b35      	ldr	r3, [pc, #212]	; (8005104 <HAL_RCC_GetSysClockFreq+0x354>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d06b      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005038:	4b32      	ldr	r3, [pc, #200]	; (8005104 <HAL_RCC_GetSysClockFreq+0x354>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	099b      	lsrs	r3, r3, #6
 800503e:	2200      	movs	r2, #0
 8005040:	66bb      	str	r3, [r7, #104]	; 0x68
 8005042:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504a:	663b      	str	r3, [r7, #96]	; 0x60
 800504c:	2300      	movs	r3, #0
 800504e:	667b      	str	r3, [r7, #100]	; 0x64
 8005050:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005054:	4622      	mov	r2, r4
 8005056:	462b      	mov	r3, r5
 8005058:	f04f 0000 	mov.w	r0, #0
 800505c:	f04f 0100 	mov.w	r1, #0
 8005060:	0159      	lsls	r1, r3, #5
 8005062:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005066:	0150      	lsls	r0, r2, #5
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4621      	mov	r1, r4
 800506e:	1a51      	subs	r1, r2, r1
 8005070:	61b9      	str	r1, [r7, #24]
 8005072:	4629      	mov	r1, r5
 8005074:	eb63 0301 	sbc.w	r3, r3, r1
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005086:	4659      	mov	r1, fp
 8005088:	018b      	lsls	r3, r1, #6
 800508a:	4651      	mov	r1, sl
 800508c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005090:	4651      	mov	r1, sl
 8005092:	018a      	lsls	r2, r1, #6
 8005094:	4651      	mov	r1, sl
 8005096:	ebb2 0801 	subs.w	r8, r2, r1
 800509a:	4659      	mov	r1, fp
 800509c:	eb63 0901 	sbc.w	r9, r3, r1
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050b4:	4690      	mov	r8, r2
 80050b6:	4699      	mov	r9, r3
 80050b8:	4623      	mov	r3, r4
 80050ba:	eb18 0303 	adds.w	r3, r8, r3
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	462b      	mov	r3, r5
 80050c2:	eb49 0303 	adc.w	r3, r9, r3
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80050d4:	4629      	mov	r1, r5
 80050d6:	024b      	lsls	r3, r1, #9
 80050d8:	4621      	mov	r1, r4
 80050da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050de:	4621      	mov	r1, r4
 80050e0:	024a      	lsls	r2, r1, #9
 80050e2:	4610      	mov	r0, r2
 80050e4:	4619      	mov	r1, r3
 80050e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ea:	2200      	movs	r2, #0
 80050ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80050ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80050f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050f4:	f7fb fdc8 	bl	8000c88 <__aeabi_uldivmod>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4613      	mov	r3, r2
 80050fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005102:	e065      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0x420>
 8005104:	40023800 	.word	0x40023800
 8005108:	00f42400 	.word	0x00f42400
 800510c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005110:	4b3d      	ldr	r3, [pc, #244]	; (8005208 <HAL_RCC_GetSysClockFreq+0x458>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	099b      	lsrs	r3, r3, #6
 8005116:	2200      	movs	r2, #0
 8005118:	4618      	mov	r0, r3
 800511a:	4611      	mov	r1, r2
 800511c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005120:	653b      	str	r3, [r7, #80]	; 0x50
 8005122:	2300      	movs	r3, #0
 8005124:	657b      	str	r3, [r7, #84]	; 0x54
 8005126:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800512a:	4642      	mov	r2, r8
 800512c:	464b      	mov	r3, r9
 800512e:	f04f 0000 	mov.w	r0, #0
 8005132:	f04f 0100 	mov.w	r1, #0
 8005136:	0159      	lsls	r1, r3, #5
 8005138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800513c:	0150      	lsls	r0, r2, #5
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4641      	mov	r1, r8
 8005144:	1a51      	subs	r1, r2, r1
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	4649      	mov	r1, r9
 800514a:	eb63 0301 	sbc.w	r3, r3, r1
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800515c:	4659      	mov	r1, fp
 800515e:	018b      	lsls	r3, r1, #6
 8005160:	4651      	mov	r1, sl
 8005162:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005166:	4651      	mov	r1, sl
 8005168:	018a      	lsls	r2, r1, #6
 800516a:	4651      	mov	r1, sl
 800516c:	1a54      	subs	r4, r2, r1
 800516e:	4659      	mov	r1, fp
 8005170:	eb63 0501 	sbc.w	r5, r3, r1
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	00eb      	lsls	r3, r5, #3
 800517e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005182:	00e2      	lsls	r2, r4, #3
 8005184:	4614      	mov	r4, r2
 8005186:	461d      	mov	r5, r3
 8005188:	4643      	mov	r3, r8
 800518a:	18e3      	adds	r3, r4, r3
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	464b      	mov	r3, r9
 8005190:	eb45 0303 	adc.w	r3, r5, r3
 8005194:	607b      	str	r3, [r7, #4]
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051a2:	4629      	mov	r1, r5
 80051a4:	028b      	lsls	r3, r1, #10
 80051a6:	4621      	mov	r1, r4
 80051a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051ac:	4621      	mov	r1, r4
 80051ae:	028a      	lsls	r2, r1, #10
 80051b0:	4610      	mov	r0, r2
 80051b2:	4619      	mov	r1, r3
 80051b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051b8:	2200      	movs	r2, #0
 80051ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80051bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80051be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051c2:	f7fb fd61 	bl	8000c88 <__aeabi_uldivmod>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4613      	mov	r3, r2
 80051cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80051d0:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <HAL_RCC_GetSysClockFreq+0x458>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	0f1b      	lsrs	r3, r3, #28
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80051de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80051ee:	e003      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051f0:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_RCC_GetSysClockFreq+0x45c>)
 80051f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80051f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	37b8      	adds	r7, #184	; 0xb8
 8005200:	46bd      	mov	sp, r7
 8005202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005206:	bf00      	nop
 8005208:	40023800 	.word	0x40023800
 800520c:	00f42400 	.word	0x00f42400

08005210 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e28d      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 8083 	beq.w	8005336 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005230:	4b94      	ldr	r3, [pc, #592]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 030c 	and.w	r3, r3, #12
 8005238:	2b04      	cmp	r3, #4
 800523a:	d019      	beq.n	8005270 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800523c:	4b91      	ldr	r3, [pc, #580]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005244:	2b08      	cmp	r3, #8
 8005246:	d106      	bne.n	8005256 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005248:	4b8e      	ldr	r3, [pc, #568]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005254:	d00c      	beq.n	8005270 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005256:	4b8b      	ldr	r3, [pc, #556]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d112      	bne.n	8005288 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005262:	4b88      	ldr	r3, [pc, #544]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526e:	d10b      	bne.n	8005288 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005270:	4b84      	ldr	r3, [pc, #528]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d05b      	beq.n	8005334 <HAL_RCC_OscConfig+0x124>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d157      	bne.n	8005334 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e25a      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005290:	d106      	bne.n	80052a0 <HAL_RCC_OscConfig+0x90>
 8005292:	4b7c      	ldr	r3, [pc, #496]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a7b      	ldr	r2, [pc, #492]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e01d      	b.n	80052dc <HAL_RCC_OscConfig+0xcc>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052a8:	d10c      	bne.n	80052c4 <HAL_RCC_OscConfig+0xb4>
 80052aa:	4b76      	ldr	r3, [pc, #472]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a75      	ldr	r2, [pc, #468]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80052b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	4b73      	ldr	r3, [pc, #460]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a72      	ldr	r2, [pc, #456]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e00b      	b.n	80052dc <HAL_RCC_OscConfig+0xcc>
 80052c4:	4b6f      	ldr	r3, [pc, #444]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a6e      	ldr	r2, [pc, #440]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80052ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	4b6c      	ldr	r3, [pc, #432]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a6b      	ldr	r2, [pc, #428]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80052d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d013      	beq.n	800530c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fe f9c6 	bl	8003674 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ec:	f7fe f9c2 	bl	8003674 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	; 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e21f      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fe:	4b61      	ldr	r3, [pc, #388]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0xdc>
 800530a:	e014      	b.n	8005336 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fe f9b2 	bl	8003674 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005314:	f7fe f9ae 	bl	8003674 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b64      	cmp	r3, #100	; 0x64
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e20b      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005326:	4b57      	ldr	r3, [pc, #348]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x104>
 8005332:	e000      	b.n	8005336 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d06f      	beq.n	8005422 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005342:	4b50      	ldr	r3, [pc, #320]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 030c 	and.w	r3, r3, #12
 800534a:	2b00      	cmp	r3, #0
 800534c:	d017      	beq.n	800537e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800534e:	4b4d      	ldr	r3, [pc, #308]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005356:	2b08      	cmp	r3, #8
 8005358:	d105      	bne.n	8005366 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800535a:	4b4a      	ldr	r3, [pc, #296]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00b      	beq.n	800537e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005366:	4b47      	ldr	r3, [pc, #284]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800536e:	2b0c      	cmp	r3, #12
 8005370:	d11c      	bne.n	80053ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005372:	4b44      	ldr	r3, [pc, #272]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d116      	bne.n	80053ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537e:	4b41      	ldr	r3, [pc, #260]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_RCC_OscConfig+0x186>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d001      	beq.n	8005396 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e1d3      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005396:	4b3b      	ldr	r3, [pc, #236]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4937      	ldr	r1, [pc, #220]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053aa:	e03a      	b.n	8005422 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d020      	beq.n	80053f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053b4:	4b34      	ldr	r3, [pc, #208]	; (8005488 <HAL_RCC_OscConfig+0x278>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ba:	f7fe f95b 	bl	8003674 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c2:	f7fe f957 	bl	8003674 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e1b4      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d4:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e0:	4b28      	ldr	r3, [pc, #160]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	4925      	ldr	r1, [pc, #148]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	600b      	str	r3, [r1, #0]
 80053f4:	e015      	b.n	8005422 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053f6:	4b24      	ldr	r3, [pc, #144]	; (8005488 <HAL_RCC_OscConfig+0x278>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fe f93a 	bl	8003674 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005404:	f7fe f936 	bl	8003674 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e193      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005416:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d036      	beq.n	800549c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d016      	beq.n	8005464 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005436:	4b15      	ldr	r3, [pc, #84]	; (800548c <HAL_RCC_OscConfig+0x27c>)
 8005438:	2201      	movs	r2, #1
 800543a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543c:	f7fe f91a 	bl	8003674 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005444:	f7fe f916 	bl	8003674 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e173      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f0      	beq.n	8005444 <HAL_RCC_OscConfig+0x234>
 8005462:	e01b      	b.n	800549c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_OscConfig+0x27c>)
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546a:	f7fe f903 	bl	8003674 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005470:	e00e      	b.n	8005490 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005472:	f7fe f8ff 	bl	8003674 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d907      	bls.n	8005490 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e15c      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
 8005484:	40023800 	.word	0x40023800
 8005488:	42470000 	.word	0x42470000
 800548c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005490:	4b8a      	ldr	r3, [pc, #552]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1ea      	bne.n	8005472 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8097 	beq.w	80055d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054aa:	2300      	movs	r3, #0
 80054ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ae:	4b83      	ldr	r3, [pc, #524]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10f      	bne.n	80054da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	4b7f      	ldr	r3, [pc, #508]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	4a7e      	ldr	r2, [pc, #504]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 80054c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c8:	6413      	str	r3, [r2, #64]	; 0x40
 80054ca:	4b7c      	ldr	r3, [pc, #496]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d2:	60bb      	str	r3, [r7, #8]
 80054d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054d6:	2301      	movs	r3, #1
 80054d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054da:	4b79      	ldr	r3, [pc, #484]	; (80056c0 <HAL_RCC_OscConfig+0x4b0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d118      	bne.n	8005518 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e6:	4b76      	ldr	r3, [pc, #472]	; (80056c0 <HAL_RCC_OscConfig+0x4b0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a75      	ldr	r2, [pc, #468]	; (80056c0 <HAL_RCC_OscConfig+0x4b0>)
 80054ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f2:	f7fe f8bf 	bl	8003674 <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fa:	f7fe f8bb 	bl	8003674 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e118      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550c:	4b6c      	ldr	r3, [pc, #432]	; (80056c0 <HAL_RCC_OscConfig+0x4b0>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d106      	bne.n	800552e <HAL_RCC_OscConfig+0x31e>
 8005520:	4b66      	ldr	r3, [pc, #408]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	4a65      	ldr	r2, [pc, #404]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	6713      	str	r3, [r2, #112]	; 0x70
 800552c:	e01c      	b.n	8005568 <HAL_RCC_OscConfig+0x358>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b05      	cmp	r3, #5
 8005534:	d10c      	bne.n	8005550 <HAL_RCC_OscConfig+0x340>
 8005536:	4b61      	ldr	r3, [pc, #388]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	4a60      	ldr	r2, [pc, #384]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 800553c:	f043 0304 	orr.w	r3, r3, #4
 8005540:	6713      	str	r3, [r2, #112]	; 0x70
 8005542:	4b5e      	ldr	r3, [pc, #376]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005546:	4a5d      	ldr	r2, [pc, #372]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	6713      	str	r3, [r2, #112]	; 0x70
 800554e:	e00b      	b.n	8005568 <HAL_RCC_OscConfig+0x358>
 8005550:	4b5a      	ldr	r3, [pc, #360]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	4a59      	ldr	r2, [pc, #356]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005556:	f023 0301 	bic.w	r3, r3, #1
 800555a:	6713      	str	r3, [r2, #112]	; 0x70
 800555c:	4b57      	ldr	r3, [pc, #348]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 800555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005560:	4a56      	ldr	r2, [pc, #344]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005562:	f023 0304 	bic.w	r3, r3, #4
 8005566:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d015      	beq.n	800559c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fe f880 	bl	8003674 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005576:	e00a      	b.n	800558e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005578:	f7fe f87c 	bl	8003674 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	; 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0d7      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558e:	4b4b      	ldr	r3, [pc, #300]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0ee      	beq.n	8005578 <HAL_RCC_OscConfig+0x368>
 800559a:	e014      	b.n	80055c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fe f86a 	bl	8003674 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055a2:	e00a      	b.n	80055ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a4:	f7fe f866 	bl	8003674 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0c1      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ba:	4b40      	ldr	r3, [pc, #256]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1ee      	bne.n	80055a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d105      	bne.n	80055d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055cc:	4b3b      	ldr	r3, [pc, #236]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	4a3a      	ldr	r2, [pc, #232]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 80055d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80ad 	beq.w	800573c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055e2:	4b36      	ldr	r3, [pc, #216]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d060      	beq.n	80056b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d145      	bne.n	8005682 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f6:	4b33      	ldr	r3, [pc, #204]	; (80056c4 <HAL_RCC_OscConfig+0x4b4>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fe f83a 	bl	8003674 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005604:	f7fe f836 	bl	8003674 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e093      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005616:	4b29      	ldr	r3, [pc, #164]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f0      	bne.n	8005604 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69da      	ldr	r2, [r3, #28]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	019b      	lsls	r3, r3, #6
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	085b      	lsrs	r3, r3, #1
 800563a:	3b01      	subs	r3, #1
 800563c:	041b      	lsls	r3, r3, #16
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	061b      	lsls	r3, r3, #24
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	071b      	lsls	r3, r3, #28
 800564e:	491b      	ldr	r1, [pc, #108]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005650:	4313      	orrs	r3, r2
 8005652:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005654:	4b1b      	ldr	r3, [pc, #108]	; (80056c4 <HAL_RCC_OscConfig+0x4b4>)
 8005656:	2201      	movs	r2, #1
 8005658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565a:	f7fe f80b 	bl	8003674 <HAL_GetTick>
 800565e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005660:	e008      	b.n	8005674 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005662:	f7fe f807 	bl	8003674 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e064      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005674:	4b11      	ldr	r3, [pc, #68]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0f0      	beq.n	8005662 <HAL_RCC_OscConfig+0x452>
 8005680:	e05c      	b.n	800573c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005682:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <HAL_RCC_OscConfig+0x4b4>)
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fd fff4 	bl	8003674 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005690:	f7fd fff0 	bl	8003674 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e04d      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a2:	4b06      	ldr	r3, [pc, #24]	; (80056bc <HAL_RCC_OscConfig+0x4ac>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x480>
 80056ae:	e045      	b.n	800573c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d107      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e040      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
 80056bc:	40023800 	.word	0x40023800
 80056c0:	40007000 	.word	0x40007000
 80056c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056c8:	4b1f      	ldr	r3, [pc, #124]	; (8005748 <HAL_RCC_OscConfig+0x538>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d030      	beq.n	8005738 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d129      	bne.n	8005738 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d122      	bne.n	8005738 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056f8:	4013      	ands	r3, r2
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005700:	4293      	cmp	r3, r2
 8005702:	d119      	bne.n	8005738 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	3b01      	subs	r3, #1
 8005712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005714:	429a      	cmp	r2, r3
 8005716:	d10f      	bne.n	8005738 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005724:	429a      	cmp	r2, r3
 8005726:	d107      	bne.n	8005738 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	40023800 	.word	0x40023800

0800574c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e041      	b.n	80057e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fd fd9e 	bl	80032b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3304      	adds	r3, #4
 8005788:	4619      	mov	r1, r3
 800578a:	4610      	mov	r0, r2
 800578c:	f000 f8f4 	bl	8005978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_TIM_ConfigClockSource+0x1c>
 8005802:	2302      	movs	r3, #2
 8005804:	e0b4      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x186>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005824:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800582c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583e:	d03e      	beq.n	80058be <HAL_TIM_ConfigClockSource+0xd4>
 8005840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005844:	f200 8087 	bhi.w	8005956 <HAL_TIM_ConfigClockSource+0x16c>
 8005848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584c:	f000 8086 	beq.w	800595c <HAL_TIM_ConfigClockSource+0x172>
 8005850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005854:	d87f      	bhi.n	8005956 <HAL_TIM_ConfigClockSource+0x16c>
 8005856:	2b70      	cmp	r3, #112	; 0x70
 8005858:	d01a      	beq.n	8005890 <HAL_TIM_ConfigClockSource+0xa6>
 800585a:	2b70      	cmp	r3, #112	; 0x70
 800585c:	d87b      	bhi.n	8005956 <HAL_TIM_ConfigClockSource+0x16c>
 800585e:	2b60      	cmp	r3, #96	; 0x60
 8005860:	d050      	beq.n	8005904 <HAL_TIM_ConfigClockSource+0x11a>
 8005862:	2b60      	cmp	r3, #96	; 0x60
 8005864:	d877      	bhi.n	8005956 <HAL_TIM_ConfigClockSource+0x16c>
 8005866:	2b50      	cmp	r3, #80	; 0x50
 8005868:	d03c      	beq.n	80058e4 <HAL_TIM_ConfigClockSource+0xfa>
 800586a:	2b50      	cmp	r3, #80	; 0x50
 800586c:	d873      	bhi.n	8005956 <HAL_TIM_ConfigClockSource+0x16c>
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d058      	beq.n	8005924 <HAL_TIM_ConfigClockSource+0x13a>
 8005872:	2b40      	cmp	r3, #64	; 0x40
 8005874:	d86f      	bhi.n	8005956 <HAL_TIM_ConfigClockSource+0x16c>
 8005876:	2b30      	cmp	r3, #48	; 0x30
 8005878:	d064      	beq.n	8005944 <HAL_TIM_ConfigClockSource+0x15a>
 800587a:	2b30      	cmp	r3, #48	; 0x30
 800587c:	d86b      	bhi.n	8005956 <HAL_TIM_ConfigClockSource+0x16c>
 800587e:	2b20      	cmp	r3, #32
 8005880:	d060      	beq.n	8005944 <HAL_TIM_ConfigClockSource+0x15a>
 8005882:	2b20      	cmp	r3, #32
 8005884:	d867      	bhi.n	8005956 <HAL_TIM_ConfigClockSource+0x16c>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d05c      	beq.n	8005944 <HAL_TIM_ConfigClockSource+0x15a>
 800588a:	2b10      	cmp	r3, #16
 800588c:	d05a      	beq.n	8005944 <HAL_TIM_ConfigClockSource+0x15a>
 800588e:	e062      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	6899      	ldr	r1, [r3, #8]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f000 f984 	bl	8005bac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	609a      	str	r2, [r3, #8]
      break;
 80058bc:	e04f      	b.n	800595e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6899      	ldr	r1, [r3, #8]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f000 f96d 	bl	8005bac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058e0:	609a      	str	r2, [r3, #8]
      break;
 80058e2:	e03c      	b.n	800595e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	6859      	ldr	r1, [r3, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	461a      	mov	r2, r3
 80058f2:	f000 f8e1 	bl	8005ab8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2150      	movs	r1, #80	; 0x50
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 f93a 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 8005902:	e02c      	b.n	800595e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	6859      	ldr	r1, [r3, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	461a      	mov	r2, r3
 8005912:	f000 f900 	bl	8005b16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2160      	movs	r1, #96	; 0x60
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f92a 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 8005922:	e01c      	b.n	800595e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	6859      	ldr	r1, [r3, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	461a      	mov	r2, r3
 8005932:	f000 f8c1 	bl	8005ab8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2140      	movs	r1, #64	; 0x40
 800593c:	4618      	mov	r0, r3
 800593e:	f000 f91a 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 8005942:	e00c      	b.n	800595e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f000 f911 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 8005954:	e003      	b.n	800595e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
      break;
 800595a:	e000      	b.n	800595e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800595c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a40      	ldr	r2, [pc, #256]	; (8005a8c <TIM_Base_SetConfig+0x114>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005996:	d00f      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3d      	ldr	r2, [pc, #244]	; (8005a90 <TIM_Base_SetConfig+0x118>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00b      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3c      	ldr	r2, [pc, #240]	; (8005a94 <TIM_Base_SetConfig+0x11c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a3b      	ldr	r2, [pc, #236]	; (8005a98 <TIM_Base_SetConfig+0x120>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a3a      	ldr	r2, [pc, #232]	; (8005a9c <TIM_Base_SetConfig+0x124>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d108      	bne.n	80059ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2f      	ldr	r2, [pc, #188]	; (8005a8c <TIM_Base_SetConfig+0x114>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d02b      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d8:	d027      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2c      	ldr	r2, [pc, #176]	; (8005a90 <TIM_Base_SetConfig+0x118>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d023      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2b      	ldr	r2, [pc, #172]	; (8005a94 <TIM_Base_SetConfig+0x11c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01f      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2a      	ldr	r2, [pc, #168]	; (8005a98 <TIM_Base_SetConfig+0x120>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d01b      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a29      	ldr	r2, [pc, #164]	; (8005a9c <TIM_Base_SetConfig+0x124>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d017      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a28      	ldr	r2, [pc, #160]	; (8005aa0 <TIM_Base_SetConfig+0x128>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a27      	ldr	r2, [pc, #156]	; (8005aa4 <TIM_Base_SetConfig+0x12c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a26      	ldr	r2, [pc, #152]	; (8005aa8 <TIM_Base_SetConfig+0x130>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a25      	ldr	r2, [pc, #148]	; (8005aac <TIM_Base_SetConfig+0x134>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a24      	ldr	r2, [pc, #144]	; (8005ab0 <TIM_Base_SetConfig+0x138>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a23      	ldr	r2, [pc, #140]	; (8005ab4 <TIM_Base_SetConfig+0x13c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d108      	bne.n	8005a3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <TIM_Base_SetConfig+0x114>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_Base_SetConfig+0xf8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <TIM_Base_SetConfig+0x124>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d103      	bne.n	8005a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	615a      	str	r2, [r3, #20]
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40010400 	.word	0x40010400
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800
 8005aac:	40001800 	.word	0x40001800
 8005ab0:	40001c00 	.word	0x40001c00
 8005ab4:	40002000 	.word	0x40002000

08005ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0201 	bic.w	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f023 030a 	bic.w	r3, r3, #10
 8005af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b087      	sub	sp, #28
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f023 0210 	bic.w	r2, r3, #16
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	031b      	lsls	r3, r3, #12
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	621a      	str	r2, [r3, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f043 0307 	orr.w	r3, r3, #7
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	609a      	str	r2, [r3, #8]
}
 8005ba0:	bf00      	nop
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	021a      	lsls	r2, r3, #8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	609a      	str	r2, [r3, #8]
}
 8005be0:	bf00      	nop
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e05a      	b.n	8005cba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a21      	ldr	r2, [pc, #132]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d022      	beq.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c50:	d01d      	beq.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1d      	ldr	r2, [pc, #116]	; (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d018      	beq.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d013      	beq.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a1a      	ldr	r2, [pc, #104]	; (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d00e      	beq.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a18      	ldr	r2, [pc, #96]	; (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d009      	beq.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d004      	beq.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	40000400 	.word	0x40000400
 8005cd0:	40000800 	.word	0x40000800
 8005cd4:	40000c00 	.word	0x40000c00
 8005cd8:	40010400 	.word	0x40010400
 8005cdc:	40014000 	.word	0x40014000
 8005ce0:	40001800 	.word	0x40001800

08005ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e03f      	b.n	8005d76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fd faf4 	bl	80032f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2224      	movs	r2, #36	; 0x24
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f829 	bl	8005d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d84:	b0c0      	sub	sp, #256	; 0x100
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	68d9      	ldr	r1, [r3, #12]
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	ea40 0301 	orr.w	r3, r0, r1
 8005da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dd8:	f021 010c 	bic.w	r1, r1, #12
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005de6:	430b      	orrs	r3, r1
 8005de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfa:	6999      	ldr	r1, [r3, #24]
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	ea40 0301 	orr.w	r3, r0, r1
 8005e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b8f      	ldr	r3, [pc, #572]	; (800604c <UART_SetConfig+0x2cc>)
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d005      	beq.n	8005e20 <UART_SetConfig+0xa0>
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b8d      	ldr	r3, [pc, #564]	; (8006050 <UART_SetConfig+0x2d0>)
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d104      	bne.n	8005e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e20:	f7fe ffb2 	bl	8004d88 <HAL_RCC_GetPCLK2Freq>
 8005e24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e28:	e003      	b.n	8005e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e2a:	f7fe ff99 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 8005e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3c:	f040 810c 	bne.w	8006058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e52:	4622      	mov	r2, r4
 8005e54:	462b      	mov	r3, r5
 8005e56:	1891      	adds	r1, r2, r2
 8005e58:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e5a:	415b      	adcs	r3, r3
 8005e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e62:	4621      	mov	r1, r4
 8005e64:	eb12 0801 	adds.w	r8, r2, r1
 8005e68:	4629      	mov	r1, r5
 8005e6a:	eb43 0901 	adc.w	r9, r3, r1
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e82:	4690      	mov	r8, r2
 8005e84:	4699      	mov	r9, r3
 8005e86:	4623      	mov	r3, r4
 8005e88:	eb18 0303 	adds.w	r3, r8, r3
 8005e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e90:	462b      	mov	r3, r5
 8005e92:	eb49 0303 	adc.w	r3, r9, r3
 8005e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005eae:	460b      	mov	r3, r1
 8005eb0:	18db      	adds	r3, r3, r3
 8005eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	eb42 0303 	adc.w	r3, r2, r3
 8005eba:	657b      	str	r3, [r7, #84]	; 0x54
 8005ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ec4:	f7fa fee0 	bl	8000c88 <__aeabi_uldivmod>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4b61      	ldr	r3, [pc, #388]	; (8006054 <UART_SetConfig+0x2d4>)
 8005ece:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	011c      	lsls	r4, r3, #4
 8005ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ee8:	4642      	mov	r2, r8
 8005eea:	464b      	mov	r3, r9
 8005eec:	1891      	adds	r1, r2, r2
 8005eee:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ef0:	415b      	adcs	r3, r3
 8005ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ef8:	4641      	mov	r1, r8
 8005efa:	eb12 0a01 	adds.w	sl, r2, r1
 8005efe:	4649      	mov	r1, r9
 8005f00:	eb43 0b01 	adc.w	fp, r3, r1
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f18:	4692      	mov	sl, r2
 8005f1a:	469b      	mov	fp, r3
 8005f1c:	4643      	mov	r3, r8
 8005f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f26:	464b      	mov	r3, r9
 8005f28:	eb4b 0303 	adc.w	r3, fp, r3
 8005f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f44:	460b      	mov	r3, r1
 8005f46:	18db      	adds	r3, r3, r3
 8005f48:	643b      	str	r3, [r7, #64]	; 0x40
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	eb42 0303 	adc.w	r3, r2, r3
 8005f50:	647b      	str	r3, [r7, #68]	; 0x44
 8005f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f5a:	f7fa fe95 	bl	8000c88 <__aeabi_uldivmod>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4611      	mov	r1, r2
 8005f64:	4b3b      	ldr	r3, [pc, #236]	; (8006054 <UART_SetConfig+0x2d4>)
 8005f66:	fba3 2301 	umull	r2, r3, r3, r1
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	2264      	movs	r2, #100	; 0x64
 8005f6e:	fb02 f303 	mul.w	r3, r2, r3
 8005f72:	1acb      	subs	r3, r1, r3
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f7a:	4b36      	ldr	r3, [pc, #216]	; (8006054 <UART_SetConfig+0x2d4>)
 8005f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f88:	441c      	add	r4, r3
 8005f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f9c:	4642      	mov	r2, r8
 8005f9e:	464b      	mov	r3, r9
 8005fa0:	1891      	adds	r1, r2, r2
 8005fa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fa4:	415b      	adcs	r3, r3
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fac:	4641      	mov	r1, r8
 8005fae:	1851      	adds	r1, r2, r1
 8005fb0:	6339      	str	r1, [r7, #48]	; 0x30
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	414b      	adcs	r3, r1
 8005fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fc4:	4659      	mov	r1, fp
 8005fc6:	00cb      	lsls	r3, r1, #3
 8005fc8:	4651      	mov	r1, sl
 8005fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fce:	4651      	mov	r1, sl
 8005fd0:	00ca      	lsls	r2, r1, #3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	4642      	mov	r2, r8
 8005fda:	189b      	adds	r3, r3, r2
 8005fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fe0:	464b      	mov	r3, r9
 8005fe2:	460a      	mov	r2, r1
 8005fe4:	eb42 0303 	adc.w	r3, r2, r3
 8005fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006000:	460b      	mov	r3, r1
 8006002:	18db      	adds	r3, r3, r3
 8006004:	62bb      	str	r3, [r7, #40]	; 0x28
 8006006:	4613      	mov	r3, r2
 8006008:	eb42 0303 	adc.w	r3, r2, r3
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800600e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006016:	f7fa fe37 	bl	8000c88 <__aeabi_uldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <UART_SetConfig+0x2d4>)
 8006020:	fba3 1302 	umull	r1, r3, r3, r2
 8006024:	095b      	lsrs	r3, r3, #5
 8006026:	2164      	movs	r1, #100	; 0x64
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	3332      	adds	r3, #50	; 0x32
 8006032:	4a08      	ldr	r2, [pc, #32]	; (8006054 <UART_SetConfig+0x2d4>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	f003 0207 	and.w	r2, r3, #7
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4422      	add	r2, r4
 8006046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006048:	e105      	b.n	8006256 <UART_SetConfig+0x4d6>
 800604a:	bf00      	nop
 800604c:	40011000 	.word	0x40011000
 8006050:	40011400 	.word	0x40011400
 8006054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800605c:	2200      	movs	r2, #0
 800605e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006062:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800606a:	4642      	mov	r2, r8
 800606c:	464b      	mov	r3, r9
 800606e:	1891      	adds	r1, r2, r2
 8006070:	6239      	str	r1, [r7, #32]
 8006072:	415b      	adcs	r3, r3
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
 8006076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800607a:	4641      	mov	r1, r8
 800607c:	1854      	adds	r4, r2, r1
 800607e:	4649      	mov	r1, r9
 8006080:	eb43 0501 	adc.w	r5, r3, r1
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	00eb      	lsls	r3, r5, #3
 800608e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006092:	00e2      	lsls	r2, r4, #3
 8006094:	4614      	mov	r4, r2
 8006096:	461d      	mov	r5, r3
 8006098:	4643      	mov	r3, r8
 800609a:	18e3      	adds	r3, r4, r3
 800609c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060a0:	464b      	mov	r3, r9
 80060a2:	eb45 0303 	adc.w	r3, r5, r3
 80060a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060c6:	4629      	mov	r1, r5
 80060c8:	008b      	lsls	r3, r1, #2
 80060ca:	4621      	mov	r1, r4
 80060cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060d0:	4621      	mov	r1, r4
 80060d2:	008a      	lsls	r2, r1, #2
 80060d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060d8:	f7fa fdd6 	bl	8000c88 <__aeabi_uldivmod>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4b60      	ldr	r3, [pc, #384]	; (8006264 <UART_SetConfig+0x4e4>)
 80060e2:	fba3 2302 	umull	r2, r3, r3, r2
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	011c      	lsls	r4, r3, #4
 80060ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060fc:	4642      	mov	r2, r8
 80060fe:	464b      	mov	r3, r9
 8006100:	1891      	adds	r1, r2, r2
 8006102:	61b9      	str	r1, [r7, #24]
 8006104:	415b      	adcs	r3, r3
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800610c:	4641      	mov	r1, r8
 800610e:	1851      	adds	r1, r2, r1
 8006110:	6139      	str	r1, [r7, #16]
 8006112:	4649      	mov	r1, r9
 8006114:	414b      	adcs	r3, r1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006124:	4659      	mov	r1, fp
 8006126:	00cb      	lsls	r3, r1, #3
 8006128:	4651      	mov	r1, sl
 800612a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800612e:	4651      	mov	r1, sl
 8006130:	00ca      	lsls	r2, r1, #3
 8006132:	4610      	mov	r0, r2
 8006134:	4619      	mov	r1, r3
 8006136:	4603      	mov	r3, r0
 8006138:	4642      	mov	r2, r8
 800613a:	189b      	adds	r3, r3, r2
 800613c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006140:	464b      	mov	r3, r9
 8006142:	460a      	mov	r2, r1
 8006144:	eb42 0303 	adc.w	r3, r2, r3
 8006148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	67bb      	str	r3, [r7, #120]	; 0x78
 8006156:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006164:	4649      	mov	r1, r9
 8006166:	008b      	lsls	r3, r1, #2
 8006168:	4641      	mov	r1, r8
 800616a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800616e:	4641      	mov	r1, r8
 8006170:	008a      	lsls	r2, r1, #2
 8006172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006176:	f7fa fd87 	bl	8000c88 <__aeabi_uldivmod>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4b39      	ldr	r3, [pc, #228]	; (8006264 <UART_SetConfig+0x4e4>)
 8006180:	fba3 1302 	umull	r1, r3, r3, r2
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	2164      	movs	r1, #100	; 0x64
 8006188:	fb01 f303 	mul.w	r3, r1, r3
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	3332      	adds	r3, #50	; 0x32
 8006192:	4a34      	ldr	r2, [pc, #208]	; (8006264 <UART_SetConfig+0x4e4>)
 8006194:	fba2 2303 	umull	r2, r3, r2, r3
 8006198:	095b      	lsrs	r3, r3, #5
 800619a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800619e:	441c      	add	r4, r3
 80061a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061a4:	2200      	movs	r2, #0
 80061a6:	673b      	str	r3, [r7, #112]	; 0x70
 80061a8:	677a      	str	r2, [r7, #116]	; 0x74
 80061aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061ae:	4642      	mov	r2, r8
 80061b0:	464b      	mov	r3, r9
 80061b2:	1891      	adds	r1, r2, r2
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	415b      	adcs	r3, r3
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061be:	4641      	mov	r1, r8
 80061c0:	1851      	adds	r1, r2, r1
 80061c2:	6039      	str	r1, [r7, #0]
 80061c4:	4649      	mov	r1, r9
 80061c6:	414b      	adcs	r3, r1
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061d6:	4659      	mov	r1, fp
 80061d8:	00cb      	lsls	r3, r1, #3
 80061da:	4651      	mov	r1, sl
 80061dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061e0:	4651      	mov	r1, sl
 80061e2:	00ca      	lsls	r2, r1, #3
 80061e4:	4610      	mov	r0, r2
 80061e6:	4619      	mov	r1, r3
 80061e8:	4603      	mov	r3, r0
 80061ea:	4642      	mov	r2, r8
 80061ec:	189b      	adds	r3, r3, r2
 80061ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80061f0:	464b      	mov	r3, r9
 80061f2:	460a      	mov	r2, r1
 80061f4:	eb42 0303 	adc.w	r3, r2, r3
 80061f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	663b      	str	r3, [r7, #96]	; 0x60
 8006204:	667a      	str	r2, [r7, #100]	; 0x64
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006212:	4649      	mov	r1, r9
 8006214:	008b      	lsls	r3, r1, #2
 8006216:	4641      	mov	r1, r8
 8006218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800621c:	4641      	mov	r1, r8
 800621e:	008a      	lsls	r2, r1, #2
 8006220:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006224:	f7fa fd30 	bl	8000c88 <__aeabi_uldivmod>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <UART_SetConfig+0x4e4>)
 800622e:	fba3 1302 	umull	r1, r3, r3, r2
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	2164      	movs	r1, #100	; 0x64
 8006236:	fb01 f303 	mul.w	r3, r1, r3
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	3332      	adds	r3, #50	; 0x32
 8006240:	4a08      	ldr	r2, [pc, #32]	; (8006264 <UART_SetConfig+0x4e4>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	f003 020f 	and.w	r2, r3, #15
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4422      	add	r2, r4
 8006254:	609a      	str	r2, [r3, #8]
}
 8006256:	bf00      	nop
 8006258:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800625c:	46bd      	mov	sp, r7
 800625e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006262:	bf00      	nop
 8006264:	51eb851f 	.word	0x51eb851f

08006268 <__errno>:
 8006268:	4b01      	ldr	r3, [pc, #4]	; (8006270 <__errno+0x8>)
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	2000000c 	.word	0x2000000c

08006274 <__libc_init_array>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	4d0d      	ldr	r5, [pc, #52]	; (80062ac <__libc_init_array+0x38>)
 8006278:	4c0d      	ldr	r4, [pc, #52]	; (80062b0 <__libc_init_array+0x3c>)
 800627a:	1b64      	subs	r4, r4, r5
 800627c:	10a4      	asrs	r4, r4, #2
 800627e:	2600      	movs	r6, #0
 8006280:	42a6      	cmp	r6, r4
 8006282:	d109      	bne.n	8006298 <__libc_init_array+0x24>
 8006284:	4d0b      	ldr	r5, [pc, #44]	; (80062b4 <__libc_init_array+0x40>)
 8006286:	4c0c      	ldr	r4, [pc, #48]	; (80062b8 <__libc_init_array+0x44>)
 8006288:	f003 fce0 	bl	8009c4c <_init>
 800628c:	1b64      	subs	r4, r4, r5
 800628e:	10a4      	asrs	r4, r4, #2
 8006290:	2600      	movs	r6, #0
 8006292:	42a6      	cmp	r6, r4
 8006294:	d105      	bne.n	80062a2 <__libc_init_array+0x2e>
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	f855 3b04 	ldr.w	r3, [r5], #4
 800629c:	4798      	blx	r3
 800629e:	3601      	adds	r6, #1
 80062a0:	e7ee      	b.n	8006280 <__libc_init_array+0xc>
 80062a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a6:	4798      	blx	r3
 80062a8:	3601      	adds	r6, #1
 80062aa:	e7f2      	b.n	8006292 <__libc_init_array+0x1e>
 80062ac:	0800bd68 	.word	0x0800bd68
 80062b0:	0800bd68 	.word	0x0800bd68
 80062b4:	0800bd68 	.word	0x0800bd68
 80062b8:	0800bd6c 	.word	0x0800bd6c

080062bc <memset>:
 80062bc:	4402      	add	r2, r0
 80062be:	4603      	mov	r3, r0
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d100      	bne.n	80062c6 <memset+0xa>
 80062c4:	4770      	bx	lr
 80062c6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ca:	e7f9      	b.n	80062c0 <memset+0x4>

080062cc <__cvt>:
 80062cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	ec55 4b10 	vmov	r4, r5, d0
 80062d4:	2d00      	cmp	r5, #0
 80062d6:	460e      	mov	r6, r1
 80062d8:	4619      	mov	r1, r3
 80062da:	462b      	mov	r3, r5
 80062dc:	bfbb      	ittet	lt
 80062de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062e2:	461d      	movlt	r5, r3
 80062e4:	2300      	movge	r3, #0
 80062e6:	232d      	movlt	r3, #45	; 0x2d
 80062e8:	700b      	strb	r3, [r1, #0]
 80062ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062f0:	4691      	mov	r9, r2
 80062f2:	f023 0820 	bic.w	r8, r3, #32
 80062f6:	bfbc      	itt	lt
 80062f8:	4622      	movlt	r2, r4
 80062fa:	4614      	movlt	r4, r2
 80062fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006300:	d005      	beq.n	800630e <__cvt+0x42>
 8006302:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006306:	d100      	bne.n	800630a <__cvt+0x3e>
 8006308:	3601      	adds	r6, #1
 800630a:	2102      	movs	r1, #2
 800630c:	e000      	b.n	8006310 <__cvt+0x44>
 800630e:	2103      	movs	r1, #3
 8006310:	ab03      	add	r3, sp, #12
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	ab02      	add	r3, sp, #8
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	ec45 4b10 	vmov	d0, r4, r5
 800631c:	4653      	mov	r3, sl
 800631e:	4632      	mov	r2, r6
 8006320:	f000 fe1a 	bl	8006f58 <_dtoa_r>
 8006324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006328:	4607      	mov	r7, r0
 800632a:	d102      	bne.n	8006332 <__cvt+0x66>
 800632c:	f019 0f01 	tst.w	r9, #1
 8006330:	d022      	beq.n	8006378 <__cvt+0xac>
 8006332:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006336:	eb07 0906 	add.w	r9, r7, r6
 800633a:	d110      	bne.n	800635e <__cvt+0x92>
 800633c:	783b      	ldrb	r3, [r7, #0]
 800633e:	2b30      	cmp	r3, #48	; 0x30
 8006340:	d10a      	bne.n	8006358 <__cvt+0x8c>
 8006342:	2200      	movs	r2, #0
 8006344:	2300      	movs	r3, #0
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	f7fa fbdd 	bl	8000b08 <__aeabi_dcmpeq>
 800634e:	b918      	cbnz	r0, 8006358 <__cvt+0x8c>
 8006350:	f1c6 0601 	rsb	r6, r6, #1
 8006354:	f8ca 6000 	str.w	r6, [sl]
 8006358:	f8da 3000 	ldr.w	r3, [sl]
 800635c:	4499      	add	r9, r3
 800635e:	2200      	movs	r2, #0
 8006360:	2300      	movs	r3, #0
 8006362:	4620      	mov	r0, r4
 8006364:	4629      	mov	r1, r5
 8006366:	f7fa fbcf 	bl	8000b08 <__aeabi_dcmpeq>
 800636a:	b108      	cbz	r0, 8006370 <__cvt+0xa4>
 800636c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006370:	2230      	movs	r2, #48	; 0x30
 8006372:	9b03      	ldr	r3, [sp, #12]
 8006374:	454b      	cmp	r3, r9
 8006376:	d307      	bcc.n	8006388 <__cvt+0xbc>
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800637c:	1bdb      	subs	r3, r3, r7
 800637e:	4638      	mov	r0, r7
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	b004      	add	sp, #16
 8006384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006388:	1c59      	adds	r1, r3, #1
 800638a:	9103      	str	r1, [sp, #12]
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	e7f0      	b.n	8006372 <__cvt+0xa6>

08006390 <__exponent>:
 8006390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006392:	4603      	mov	r3, r0
 8006394:	2900      	cmp	r1, #0
 8006396:	bfb8      	it	lt
 8006398:	4249      	neglt	r1, r1
 800639a:	f803 2b02 	strb.w	r2, [r3], #2
 800639e:	bfb4      	ite	lt
 80063a0:	222d      	movlt	r2, #45	; 0x2d
 80063a2:	222b      	movge	r2, #43	; 0x2b
 80063a4:	2909      	cmp	r1, #9
 80063a6:	7042      	strb	r2, [r0, #1]
 80063a8:	dd2a      	ble.n	8006400 <__exponent+0x70>
 80063aa:	f10d 0407 	add.w	r4, sp, #7
 80063ae:	46a4      	mov	ip, r4
 80063b0:	270a      	movs	r7, #10
 80063b2:	46a6      	mov	lr, r4
 80063b4:	460a      	mov	r2, r1
 80063b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80063ba:	fb07 1516 	mls	r5, r7, r6, r1
 80063be:	3530      	adds	r5, #48	; 0x30
 80063c0:	2a63      	cmp	r2, #99	; 0x63
 80063c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80063c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80063ca:	4631      	mov	r1, r6
 80063cc:	dcf1      	bgt.n	80063b2 <__exponent+0x22>
 80063ce:	3130      	adds	r1, #48	; 0x30
 80063d0:	f1ae 0502 	sub.w	r5, lr, #2
 80063d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063d8:	1c44      	adds	r4, r0, #1
 80063da:	4629      	mov	r1, r5
 80063dc:	4561      	cmp	r1, ip
 80063de:	d30a      	bcc.n	80063f6 <__exponent+0x66>
 80063e0:	f10d 0209 	add.w	r2, sp, #9
 80063e4:	eba2 020e 	sub.w	r2, r2, lr
 80063e8:	4565      	cmp	r5, ip
 80063ea:	bf88      	it	hi
 80063ec:	2200      	movhi	r2, #0
 80063ee:	4413      	add	r3, r2
 80063f0:	1a18      	subs	r0, r3, r0
 80063f2:	b003      	add	sp, #12
 80063f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063fe:	e7ed      	b.n	80063dc <__exponent+0x4c>
 8006400:	2330      	movs	r3, #48	; 0x30
 8006402:	3130      	adds	r1, #48	; 0x30
 8006404:	7083      	strb	r3, [r0, #2]
 8006406:	70c1      	strb	r1, [r0, #3]
 8006408:	1d03      	adds	r3, r0, #4
 800640a:	e7f1      	b.n	80063f0 <__exponent+0x60>

0800640c <_printf_float>:
 800640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006410:	ed2d 8b02 	vpush	{d8}
 8006414:	b08d      	sub	sp, #52	; 0x34
 8006416:	460c      	mov	r4, r1
 8006418:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800641c:	4616      	mov	r6, r2
 800641e:	461f      	mov	r7, r3
 8006420:	4605      	mov	r5, r0
 8006422:	f001 fd3f 	bl	8007ea4 <_localeconv_r>
 8006426:	f8d0 a000 	ldr.w	sl, [r0]
 800642a:	4650      	mov	r0, sl
 800642c:	f7f9 fef0 	bl	8000210 <strlen>
 8006430:	2300      	movs	r3, #0
 8006432:	930a      	str	r3, [sp, #40]	; 0x28
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	9305      	str	r3, [sp, #20]
 8006438:	f8d8 3000 	ldr.w	r3, [r8]
 800643c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006440:	3307      	adds	r3, #7
 8006442:	f023 0307 	bic.w	r3, r3, #7
 8006446:	f103 0208 	add.w	r2, r3, #8
 800644a:	f8c8 2000 	str.w	r2, [r8]
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006456:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800645a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800645e:	9307      	str	r3, [sp, #28]
 8006460:	f8cd 8018 	str.w	r8, [sp, #24]
 8006464:	ee08 0a10 	vmov	s16, r0
 8006468:	4b9f      	ldr	r3, [pc, #636]	; (80066e8 <_printf_float+0x2dc>)
 800646a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800646e:	f04f 32ff 	mov.w	r2, #4294967295
 8006472:	f7fa fb7b 	bl	8000b6c <__aeabi_dcmpun>
 8006476:	bb88      	cbnz	r0, 80064dc <_printf_float+0xd0>
 8006478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800647c:	4b9a      	ldr	r3, [pc, #616]	; (80066e8 <_printf_float+0x2dc>)
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	f7fa fb55 	bl	8000b30 <__aeabi_dcmple>
 8006486:	bb48      	cbnz	r0, 80064dc <_printf_float+0xd0>
 8006488:	2200      	movs	r2, #0
 800648a:	2300      	movs	r3, #0
 800648c:	4640      	mov	r0, r8
 800648e:	4649      	mov	r1, r9
 8006490:	f7fa fb44 	bl	8000b1c <__aeabi_dcmplt>
 8006494:	b110      	cbz	r0, 800649c <_printf_float+0x90>
 8006496:	232d      	movs	r3, #45	; 0x2d
 8006498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800649c:	4b93      	ldr	r3, [pc, #588]	; (80066ec <_printf_float+0x2e0>)
 800649e:	4894      	ldr	r0, [pc, #592]	; (80066f0 <_printf_float+0x2e4>)
 80064a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80064a4:	bf94      	ite	ls
 80064a6:	4698      	movls	r8, r3
 80064a8:	4680      	movhi	r8, r0
 80064aa:	2303      	movs	r3, #3
 80064ac:	6123      	str	r3, [r4, #16]
 80064ae:	9b05      	ldr	r3, [sp, #20]
 80064b0:	f023 0204 	bic.w	r2, r3, #4
 80064b4:	6022      	str	r2, [r4, #0]
 80064b6:	f04f 0900 	mov.w	r9, #0
 80064ba:	9700      	str	r7, [sp, #0]
 80064bc:	4633      	mov	r3, r6
 80064be:	aa0b      	add	r2, sp, #44	; 0x2c
 80064c0:	4621      	mov	r1, r4
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 f9d8 	bl	8006878 <_printf_common>
 80064c8:	3001      	adds	r0, #1
 80064ca:	f040 8090 	bne.w	80065ee <_printf_float+0x1e2>
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295
 80064d2:	b00d      	add	sp, #52	; 0x34
 80064d4:	ecbd 8b02 	vpop	{d8}
 80064d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	4640      	mov	r0, r8
 80064e2:	4649      	mov	r1, r9
 80064e4:	f7fa fb42 	bl	8000b6c <__aeabi_dcmpun>
 80064e8:	b140      	cbz	r0, 80064fc <_printf_float+0xf0>
 80064ea:	464b      	mov	r3, r9
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	bfbc      	itt	lt
 80064f0:	232d      	movlt	r3, #45	; 0x2d
 80064f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064f6:	487f      	ldr	r0, [pc, #508]	; (80066f4 <_printf_float+0x2e8>)
 80064f8:	4b7f      	ldr	r3, [pc, #508]	; (80066f8 <_printf_float+0x2ec>)
 80064fa:	e7d1      	b.n	80064a0 <_printf_float+0x94>
 80064fc:	6863      	ldr	r3, [r4, #4]
 80064fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006502:	9206      	str	r2, [sp, #24]
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	d13f      	bne.n	8006588 <_printf_float+0x17c>
 8006508:	2306      	movs	r3, #6
 800650a:	6063      	str	r3, [r4, #4]
 800650c:	9b05      	ldr	r3, [sp, #20]
 800650e:	6861      	ldr	r1, [r4, #4]
 8006510:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006514:	2300      	movs	r3, #0
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	ab0a      	add	r3, sp, #40	; 0x28
 800651a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800651e:	ab09      	add	r3, sp, #36	; 0x24
 8006520:	ec49 8b10 	vmov	d0, r8, r9
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	6022      	str	r2, [r4, #0]
 8006528:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800652c:	4628      	mov	r0, r5
 800652e:	f7ff fecd 	bl	80062cc <__cvt>
 8006532:	9b06      	ldr	r3, [sp, #24]
 8006534:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006536:	2b47      	cmp	r3, #71	; 0x47
 8006538:	4680      	mov	r8, r0
 800653a:	d108      	bne.n	800654e <_printf_float+0x142>
 800653c:	1cc8      	adds	r0, r1, #3
 800653e:	db02      	blt.n	8006546 <_printf_float+0x13a>
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	4299      	cmp	r1, r3
 8006544:	dd41      	ble.n	80065ca <_printf_float+0x1be>
 8006546:	f1ab 0b02 	sub.w	fp, fp, #2
 800654a:	fa5f fb8b 	uxtb.w	fp, fp
 800654e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006552:	d820      	bhi.n	8006596 <_printf_float+0x18a>
 8006554:	3901      	subs	r1, #1
 8006556:	465a      	mov	r2, fp
 8006558:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800655c:	9109      	str	r1, [sp, #36]	; 0x24
 800655e:	f7ff ff17 	bl	8006390 <__exponent>
 8006562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006564:	1813      	adds	r3, r2, r0
 8006566:	2a01      	cmp	r2, #1
 8006568:	4681      	mov	r9, r0
 800656a:	6123      	str	r3, [r4, #16]
 800656c:	dc02      	bgt.n	8006574 <_printf_float+0x168>
 800656e:	6822      	ldr	r2, [r4, #0]
 8006570:	07d2      	lsls	r2, r2, #31
 8006572:	d501      	bpl.n	8006578 <_printf_float+0x16c>
 8006574:	3301      	adds	r3, #1
 8006576:	6123      	str	r3, [r4, #16]
 8006578:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800657c:	2b00      	cmp	r3, #0
 800657e:	d09c      	beq.n	80064ba <_printf_float+0xae>
 8006580:	232d      	movs	r3, #45	; 0x2d
 8006582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006586:	e798      	b.n	80064ba <_printf_float+0xae>
 8006588:	9a06      	ldr	r2, [sp, #24]
 800658a:	2a47      	cmp	r2, #71	; 0x47
 800658c:	d1be      	bne.n	800650c <_printf_float+0x100>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1bc      	bne.n	800650c <_printf_float+0x100>
 8006592:	2301      	movs	r3, #1
 8006594:	e7b9      	b.n	800650a <_printf_float+0xfe>
 8006596:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800659a:	d118      	bne.n	80065ce <_printf_float+0x1c2>
 800659c:	2900      	cmp	r1, #0
 800659e:	6863      	ldr	r3, [r4, #4]
 80065a0:	dd0b      	ble.n	80065ba <_printf_float+0x1ae>
 80065a2:	6121      	str	r1, [r4, #16]
 80065a4:	b913      	cbnz	r3, 80065ac <_printf_float+0x1a0>
 80065a6:	6822      	ldr	r2, [r4, #0]
 80065a8:	07d0      	lsls	r0, r2, #31
 80065aa:	d502      	bpl.n	80065b2 <_printf_float+0x1a6>
 80065ac:	3301      	adds	r3, #1
 80065ae:	440b      	add	r3, r1
 80065b0:	6123      	str	r3, [r4, #16]
 80065b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80065b4:	f04f 0900 	mov.w	r9, #0
 80065b8:	e7de      	b.n	8006578 <_printf_float+0x16c>
 80065ba:	b913      	cbnz	r3, 80065c2 <_printf_float+0x1b6>
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	07d2      	lsls	r2, r2, #31
 80065c0:	d501      	bpl.n	80065c6 <_printf_float+0x1ba>
 80065c2:	3302      	adds	r3, #2
 80065c4:	e7f4      	b.n	80065b0 <_printf_float+0x1a4>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e7f2      	b.n	80065b0 <_printf_float+0x1a4>
 80065ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d0:	4299      	cmp	r1, r3
 80065d2:	db05      	blt.n	80065e0 <_printf_float+0x1d4>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	6121      	str	r1, [r4, #16]
 80065d8:	07d8      	lsls	r0, r3, #31
 80065da:	d5ea      	bpl.n	80065b2 <_printf_float+0x1a6>
 80065dc:	1c4b      	adds	r3, r1, #1
 80065de:	e7e7      	b.n	80065b0 <_printf_float+0x1a4>
 80065e0:	2900      	cmp	r1, #0
 80065e2:	bfd4      	ite	le
 80065e4:	f1c1 0202 	rsble	r2, r1, #2
 80065e8:	2201      	movgt	r2, #1
 80065ea:	4413      	add	r3, r2
 80065ec:	e7e0      	b.n	80065b0 <_printf_float+0x1a4>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	055a      	lsls	r2, r3, #21
 80065f2:	d407      	bmi.n	8006604 <_printf_float+0x1f8>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	4642      	mov	r2, r8
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	d12c      	bne.n	800665c <_printf_float+0x250>
 8006602:	e764      	b.n	80064ce <_printf_float+0xc2>
 8006604:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006608:	f240 80e0 	bls.w	80067cc <_printf_float+0x3c0>
 800660c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006610:	2200      	movs	r2, #0
 8006612:	2300      	movs	r3, #0
 8006614:	f7fa fa78 	bl	8000b08 <__aeabi_dcmpeq>
 8006618:	2800      	cmp	r0, #0
 800661a:	d034      	beq.n	8006686 <_printf_float+0x27a>
 800661c:	4a37      	ldr	r2, [pc, #220]	; (80066fc <_printf_float+0x2f0>)
 800661e:	2301      	movs	r3, #1
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f af51 	beq.w	80064ce <_printf_float+0xc2>
 800662c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006630:	429a      	cmp	r2, r3
 8006632:	db02      	blt.n	800663a <_printf_float+0x22e>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	07d8      	lsls	r0, r3, #31
 8006638:	d510      	bpl.n	800665c <_printf_float+0x250>
 800663a:	ee18 3a10 	vmov	r3, s16
 800663e:	4652      	mov	r2, sl
 8006640:	4631      	mov	r1, r6
 8006642:	4628      	mov	r0, r5
 8006644:	47b8      	blx	r7
 8006646:	3001      	adds	r0, #1
 8006648:	f43f af41 	beq.w	80064ce <_printf_float+0xc2>
 800664c:	f04f 0800 	mov.w	r8, #0
 8006650:	f104 091a 	add.w	r9, r4, #26
 8006654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006656:	3b01      	subs	r3, #1
 8006658:	4543      	cmp	r3, r8
 800665a:	dc09      	bgt.n	8006670 <_printf_float+0x264>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	079b      	lsls	r3, r3, #30
 8006660:	f100 8105 	bmi.w	800686e <_printf_float+0x462>
 8006664:	68e0      	ldr	r0, [r4, #12]
 8006666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006668:	4298      	cmp	r0, r3
 800666a:	bfb8      	it	lt
 800666c:	4618      	movlt	r0, r3
 800666e:	e730      	b.n	80064d2 <_printf_float+0xc6>
 8006670:	2301      	movs	r3, #1
 8006672:	464a      	mov	r2, r9
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f af27 	beq.w	80064ce <_printf_float+0xc2>
 8006680:	f108 0801 	add.w	r8, r8, #1
 8006684:	e7e6      	b.n	8006654 <_printf_float+0x248>
 8006686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	dc39      	bgt.n	8006700 <_printf_float+0x2f4>
 800668c:	4a1b      	ldr	r2, [pc, #108]	; (80066fc <_printf_float+0x2f0>)
 800668e:	2301      	movs	r3, #1
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	f43f af19 	beq.w	80064ce <_printf_float+0xc2>
 800669c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066a0:	4313      	orrs	r3, r2
 80066a2:	d102      	bne.n	80066aa <_printf_float+0x29e>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	07d9      	lsls	r1, r3, #31
 80066a8:	d5d8      	bpl.n	800665c <_printf_float+0x250>
 80066aa:	ee18 3a10 	vmov	r3, s16
 80066ae:	4652      	mov	r2, sl
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f af09 	beq.w	80064ce <_printf_float+0xc2>
 80066bc:	f04f 0900 	mov.w	r9, #0
 80066c0:	f104 0a1a 	add.w	sl, r4, #26
 80066c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c6:	425b      	negs	r3, r3
 80066c8:	454b      	cmp	r3, r9
 80066ca:	dc01      	bgt.n	80066d0 <_printf_float+0x2c4>
 80066cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ce:	e792      	b.n	80065f6 <_printf_float+0x1ea>
 80066d0:	2301      	movs	r3, #1
 80066d2:	4652      	mov	r2, sl
 80066d4:	4631      	mov	r1, r6
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	f43f aef7 	beq.w	80064ce <_printf_float+0xc2>
 80066e0:	f109 0901 	add.w	r9, r9, #1
 80066e4:	e7ee      	b.n	80066c4 <_printf_float+0x2b8>
 80066e6:	bf00      	nop
 80066e8:	7fefffff 	.word	0x7fefffff
 80066ec:	0800b958 	.word	0x0800b958
 80066f0:	0800b95c 	.word	0x0800b95c
 80066f4:	0800b964 	.word	0x0800b964
 80066f8:	0800b960 	.word	0x0800b960
 80066fc:	0800b968 	.word	0x0800b968
 8006700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006704:	429a      	cmp	r2, r3
 8006706:	bfa8      	it	ge
 8006708:	461a      	movge	r2, r3
 800670a:	2a00      	cmp	r2, #0
 800670c:	4691      	mov	r9, r2
 800670e:	dc37      	bgt.n	8006780 <_printf_float+0x374>
 8006710:	f04f 0b00 	mov.w	fp, #0
 8006714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006718:	f104 021a 	add.w	r2, r4, #26
 800671c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800671e:	9305      	str	r3, [sp, #20]
 8006720:	eba3 0309 	sub.w	r3, r3, r9
 8006724:	455b      	cmp	r3, fp
 8006726:	dc33      	bgt.n	8006790 <_printf_float+0x384>
 8006728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800672c:	429a      	cmp	r2, r3
 800672e:	db3b      	blt.n	80067a8 <_printf_float+0x39c>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07da      	lsls	r2, r3, #31
 8006734:	d438      	bmi.n	80067a8 <_printf_float+0x39c>
 8006736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006738:	9a05      	ldr	r2, [sp, #20]
 800673a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800673c:	1a9a      	subs	r2, r3, r2
 800673e:	eba3 0901 	sub.w	r9, r3, r1
 8006742:	4591      	cmp	r9, r2
 8006744:	bfa8      	it	ge
 8006746:	4691      	movge	r9, r2
 8006748:	f1b9 0f00 	cmp.w	r9, #0
 800674c:	dc35      	bgt.n	80067ba <_printf_float+0x3ae>
 800674e:	f04f 0800 	mov.w	r8, #0
 8006752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006756:	f104 0a1a 	add.w	sl, r4, #26
 800675a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	eba3 0309 	sub.w	r3, r3, r9
 8006764:	4543      	cmp	r3, r8
 8006766:	f77f af79 	ble.w	800665c <_printf_float+0x250>
 800676a:	2301      	movs	r3, #1
 800676c:	4652      	mov	r2, sl
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	f43f aeaa 	beq.w	80064ce <_printf_float+0xc2>
 800677a:	f108 0801 	add.w	r8, r8, #1
 800677e:	e7ec      	b.n	800675a <_printf_float+0x34e>
 8006780:	4613      	mov	r3, r2
 8006782:	4631      	mov	r1, r6
 8006784:	4642      	mov	r2, r8
 8006786:	4628      	mov	r0, r5
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	d1c0      	bne.n	8006710 <_printf_float+0x304>
 800678e:	e69e      	b.n	80064ce <_printf_float+0xc2>
 8006790:	2301      	movs	r3, #1
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	9205      	str	r2, [sp, #20]
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	f43f ae97 	beq.w	80064ce <_printf_float+0xc2>
 80067a0:	9a05      	ldr	r2, [sp, #20]
 80067a2:	f10b 0b01 	add.w	fp, fp, #1
 80067a6:	e7b9      	b.n	800671c <_printf_float+0x310>
 80067a8:	ee18 3a10 	vmov	r3, s16
 80067ac:	4652      	mov	r2, sl
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	d1be      	bne.n	8006736 <_printf_float+0x32a>
 80067b8:	e689      	b.n	80064ce <_printf_float+0xc2>
 80067ba:	9a05      	ldr	r2, [sp, #20]
 80067bc:	464b      	mov	r3, r9
 80067be:	4442      	add	r2, r8
 80067c0:	4631      	mov	r1, r6
 80067c2:	4628      	mov	r0, r5
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	d1c1      	bne.n	800674e <_printf_float+0x342>
 80067ca:	e680      	b.n	80064ce <_printf_float+0xc2>
 80067cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ce:	2a01      	cmp	r2, #1
 80067d0:	dc01      	bgt.n	80067d6 <_printf_float+0x3ca>
 80067d2:	07db      	lsls	r3, r3, #31
 80067d4:	d538      	bpl.n	8006848 <_printf_float+0x43c>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4642      	mov	r2, r8
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f ae74 	beq.w	80064ce <_printf_float+0xc2>
 80067e6:	ee18 3a10 	vmov	r3, s16
 80067ea:	4652      	mov	r2, sl
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f ae6b 	beq.w	80064ce <_printf_float+0xc2>
 80067f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067fc:	2200      	movs	r2, #0
 80067fe:	2300      	movs	r3, #0
 8006800:	f7fa f982 	bl	8000b08 <__aeabi_dcmpeq>
 8006804:	b9d8      	cbnz	r0, 800683e <_printf_float+0x432>
 8006806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006808:	f108 0201 	add.w	r2, r8, #1
 800680c:	3b01      	subs	r3, #1
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	d10e      	bne.n	8006836 <_printf_float+0x42a>
 8006818:	e659      	b.n	80064ce <_printf_float+0xc2>
 800681a:	2301      	movs	r3, #1
 800681c:	4652      	mov	r2, sl
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f ae52 	beq.w	80064ce <_printf_float+0xc2>
 800682a:	f108 0801 	add.w	r8, r8, #1
 800682e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006830:	3b01      	subs	r3, #1
 8006832:	4543      	cmp	r3, r8
 8006834:	dcf1      	bgt.n	800681a <_printf_float+0x40e>
 8006836:	464b      	mov	r3, r9
 8006838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800683c:	e6dc      	b.n	80065f8 <_printf_float+0x1ec>
 800683e:	f04f 0800 	mov.w	r8, #0
 8006842:	f104 0a1a 	add.w	sl, r4, #26
 8006846:	e7f2      	b.n	800682e <_printf_float+0x422>
 8006848:	2301      	movs	r3, #1
 800684a:	4642      	mov	r2, r8
 800684c:	e7df      	b.n	800680e <_printf_float+0x402>
 800684e:	2301      	movs	r3, #1
 8006850:	464a      	mov	r2, r9
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f ae38 	beq.w	80064ce <_printf_float+0xc2>
 800685e:	f108 0801 	add.w	r8, r8, #1
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006866:	1a5b      	subs	r3, r3, r1
 8006868:	4543      	cmp	r3, r8
 800686a:	dcf0      	bgt.n	800684e <_printf_float+0x442>
 800686c:	e6fa      	b.n	8006664 <_printf_float+0x258>
 800686e:	f04f 0800 	mov.w	r8, #0
 8006872:	f104 0919 	add.w	r9, r4, #25
 8006876:	e7f4      	b.n	8006862 <_printf_float+0x456>

08006878 <_printf_common>:
 8006878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687c:	4616      	mov	r6, r2
 800687e:	4699      	mov	r9, r3
 8006880:	688a      	ldr	r2, [r1, #8]
 8006882:	690b      	ldr	r3, [r1, #16]
 8006884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006888:	4293      	cmp	r3, r2
 800688a:	bfb8      	it	lt
 800688c:	4613      	movlt	r3, r2
 800688e:	6033      	str	r3, [r6, #0]
 8006890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006894:	4607      	mov	r7, r0
 8006896:	460c      	mov	r4, r1
 8006898:	b10a      	cbz	r2, 800689e <_printf_common+0x26>
 800689a:	3301      	adds	r3, #1
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	0699      	lsls	r1, r3, #26
 80068a2:	bf42      	ittt	mi
 80068a4:	6833      	ldrmi	r3, [r6, #0]
 80068a6:	3302      	addmi	r3, #2
 80068a8:	6033      	strmi	r3, [r6, #0]
 80068aa:	6825      	ldr	r5, [r4, #0]
 80068ac:	f015 0506 	ands.w	r5, r5, #6
 80068b0:	d106      	bne.n	80068c0 <_printf_common+0x48>
 80068b2:	f104 0a19 	add.w	sl, r4, #25
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	6832      	ldr	r2, [r6, #0]
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	42ab      	cmp	r3, r5
 80068be:	dc26      	bgt.n	800690e <_printf_common+0x96>
 80068c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068c4:	1e13      	subs	r3, r2, #0
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	bf18      	it	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	0692      	lsls	r2, r2, #26
 80068ce:	d42b      	bmi.n	8006928 <_printf_common+0xb0>
 80068d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068d4:	4649      	mov	r1, r9
 80068d6:	4638      	mov	r0, r7
 80068d8:	47c0      	blx	r8
 80068da:	3001      	adds	r0, #1
 80068dc:	d01e      	beq.n	800691c <_printf_common+0xa4>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	68e5      	ldr	r5, [r4, #12]
 80068e2:	6832      	ldr	r2, [r6, #0]
 80068e4:	f003 0306 	and.w	r3, r3, #6
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	bf08      	it	eq
 80068ec:	1aad      	subeq	r5, r5, r2
 80068ee:	68a3      	ldr	r3, [r4, #8]
 80068f0:	6922      	ldr	r2, [r4, #16]
 80068f2:	bf0c      	ite	eq
 80068f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f8:	2500      	movne	r5, #0
 80068fa:	4293      	cmp	r3, r2
 80068fc:	bfc4      	itt	gt
 80068fe:	1a9b      	subgt	r3, r3, r2
 8006900:	18ed      	addgt	r5, r5, r3
 8006902:	2600      	movs	r6, #0
 8006904:	341a      	adds	r4, #26
 8006906:	42b5      	cmp	r5, r6
 8006908:	d11a      	bne.n	8006940 <_printf_common+0xc8>
 800690a:	2000      	movs	r0, #0
 800690c:	e008      	b.n	8006920 <_printf_common+0xa8>
 800690e:	2301      	movs	r3, #1
 8006910:	4652      	mov	r2, sl
 8006912:	4649      	mov	r1, r9
 8006914:	4638      	mov	r0, r7
 8006916:	47c0      	blx	r8
 8006918:	3001      	adds	r0, #1
 800691a:	d103      	bne.n	8006924 <_printf_common+0xac>
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006924:	3501      	adds	r5, #1
 8006926:	e7c6      	b.n	80068b6 <_printf_common+0x3e>
 8006928:	18e1      	adds	r1, r4, r3
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	2030      	movs	r0, #48	; 0x30
 800692e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006932:	4422      	add	r2, r4
 8006934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800693c:	3302      	adds	r3, #2
 800693e:	e7c7      	b.n	80068d0 <_printf_common+0x58>
 8006940:	2301      	movs	r3, #1
 8006942:	4622      	mov	r2, r4
 8006944:	4649      	mov	r1, r9
 8006946:	4638      	mov	r0, r7
 8006948:	47c0      	blx	r8
 800694a:	3001      	adds	r0, #1
 800694c:	d0e6      	beq.n	800691c <_printf_common+0xa4>
 800694e:	3601      	adds	r6, #1
 8006950:	e7d9      	b.n	8006906 <_printf_common+0x8e>
	...

08006954 <_printf_i>:
 8006954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	7e0f      	ldrb	r7, [r1, #24]
 800695a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800695c:	2f78      	cmp	r7, #120	; 0x78
 800695e:	4691      	mov	r9, r2
 8006960:	4680      	mov	r8, r0
 8006962:	460c      	mov	r4, r1
 8006964:	469a      	mov	sl, r3
 8006966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800696a:	d807      	bhi.n	800697c <_printf_i+0x28>
 800696c:	2f62      	cmp	r7, #98	; 0x62
 800696e:	d80a      	bhi.n	8006986 <_printf_i+0x32>
 8006970:	2f00      	cmp	r7, #0
 8006972:	f000 80d8 	beq.w	8006b26 <_printf_i+0x1d2>
 8006976:	2f58      	cmp	r7, #88	; 0x58
 8006978:	f000 80a3 	beq.w	8006ac2 <_printf_i+0x16e>
 800697c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006984:	e03a      	b.n	80069fc <_printf_i+0xa8>
 8006986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800698a:	2b15      	cmp	r3, #21
 800698c:	d8f6      	bhi.n	800697c <_printf_i+0x28>
 800698e:	a101      	add	r1, pc, #4	; (adr r1, 8006994 <_printf_i+0x40>)
 8006990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006994:	080069ed 	.word	0x080069ed
 8006998:	08006a01 	.word	0x08006a01
 800699c:	0800697d 	.word	0x0800697d
 80069a0:	0800697d 	.word	0x0800697d
 80069a4:	0800697d 	.word	0x0800697d
 80069a8:	0800697d 	.word	0x0800697d
 80069ac:	08006a01 	.word	0x08006a01
 80069b0:	0800697d 	.word	0x0800697d
 80069b4:	0800697d 	.word	0x0800697d
 80069b8:	0800697d 	.word	0x0800697d
 80069bc:	0800697d 	.word	0x0800697d
 80069c0:	08006b0d 	.word	0x08006b0d
 80069c4:	08006a31 	.word	0x08006a31
 80069c8:	08006aef 	.word	0x08006aef
 80069cc:	0800697d 	.word	0x0800697d
 80069d0:	0800697d 	.word	0x0800697d
 80069d4:	08006b2f 	.word	0x08006b2f
 80069d8:	0800697d 	.word	0x0800697d
 80069dc:	08006a31 	.word	0x08006a31
 80069e0:	0800697d 	.word	0x0800697d
 80069e4:	0800697d 	.word	0x0800697d
 80069e8:	08006af7 	.word	0x08006af7
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	1d1a      	adds	r2, r3, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	602a      	str	r2, [r5, #0]
 80069f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0a3      	b.n	8006b48 <_printf_i+0x1f4>
 8006a00:	6820      	ldr	r0, [r4, #0]
 8006a02:	6829      	ldr	r1, [r5, #0]
 8006a04:	0606      	lsls	r6, r0, #24
 8006a06:	f101 0304 	add.w	r3, r1, #4
 8006a0a:	d50a      	bpl.n	8006a22 <_printf_i+0xce>
 8006a0c:	680e      	ldr	r6, [r1, #0]
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	2e00      	cmp	r6, #0
 8006a12:	da03      	bge.n	8006a1c <_printf_i+0xc8>
 8006a14:	232d      	movs	r3, #45	; 0x2d
 8006a16:	4276      	negs	r6, r6
 8006a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a1c:	485e      	ldr	r0, [pc, #376]	; (8006b98 <_printf_i+0x244>)
 8006a1e:	230a      	movs	r3, #10
 8006a20:	e019      	b.n	8006a56 <_printf_i+0x102>
 8006a22:	680e      	ldr	r6, [r1, #0]
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a2a:	bf18      	it	ne
 8006a2c:	b236      	sxthne	r6, r6
 8006a2e:	e7ef      	b.n	8006a10 <_printf_i+0xbc>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	6820      	ldr	r0, [r4, #0]
 8006a34:	1d19      	adds	r1, r3, #4
 8006a36:	6029      	str	r1, [r5, #0]
 8006a38:	0601      	lsls	r1, r0, #24
 8006a3a:	d501      	bpl.n	8006a40 <_printf_i+0xec>
 8006a3c:	681e      	ldr	r6, [r3, #0]
 8006a3e:	e002      	b.n	8006a46 <_printf_i+0xf2>
 8006a40:	0646      	lsls	r6, r0, #25
 8006a42:	d5fb      	bpl.n	8006a3c <_printf_i+0xe8>
 8006a44:	881e      	ldrh	r6, [r3, #0]
 8006a46:	4854      	ldr	r0, [pc, #336]	; (8006b98 <_printf_i+0x244>)
 8006a48:	2f6f      	cmp	r7, #111	; 0x6f
 8006a4a:	bf0c      	ite	eq
 8006a4c:	2308      	moveq	r3, #8
 8006a4e:	230a      	movne	r3, #10
 8006a50:	2100      	movs	r1, #0
 8006a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a56:	6865      	ldr	r5, [r4, #4]
 8006a58:	60a5      	str	r5, [r4, #8]
 8006a5a:	2d00      	cmp	r5, #0
 8006a5c:	bfa2      	ittt	ge
 8006a5e:	6821      	ldrge	r1, [r4, #0]
 8006a60:	f021 0104 	bicge.w	r1, r1, #4
 8006a64:	6021      	strge	r1, [r4, #0]
 8006a66:	b90e      	cbnz	r6, 8006a6c <_printf_i+0x118>
 8006a68:	2d00      	cmp	r5, #0
 8006a6a:	d04d      	beq.n	8006b08 <_printf_i+0x1b4>
 8006a6c:	4615      	mov	r5, r2
 8006a6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a72:	fb03 6711 	mls	r7, r3, r1, r6
 8006a76:	5dc7      	ldrb	r7, [r0, r7]
 8006a78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a7c:	4637      	mov	r7, r6
 8006a7e:	42bb      	cmp	r3, r7
 8006a80:	460e      	mov	r6, r1
 8006a82:	d9f4      	bls.n	8006a6e <_printf_i+0x11a>
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d10b      	bne.n	8006aa0 <_printf_i+0x14c>
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	07de      	lsls	r6, r3, #31
 8006a8c:	d508      	bpl.n	8006aa0 <_printf_i+0x14c>
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	6861      	ldr	r1, [r4, #4]
 8006a92:	4299      	cmp	r1, r3
 8006a94:	bfde      	ittt	le
 8006a96:	2330      	movle	r3, #48	; 0x30
 8006a98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006aa0:	1b52      	subs	r2, r2, r5
 8006aa2:	6122      	str	r2, [r4, #16]
 8006aa4:	f8cd a000 	str.w	sl, [sp]
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	aa03      	add	r2, sp, #12
 8006aac:	4621      	mov	r1, r4
 8006aae:	4640      	mov	r0, r8
 8006ab0:	f7ff fee2 	bl	8006878 <_printf_common>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d14c      	bne.n	8006b52 <_printf_i+0x1fe>
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8006abc:	b004      	add	sp, #16
 8006abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac2:	4835      	ldr	r0, [pc, #212]	; (8006b98 <_printf_i+0x244>)
 8006ac4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ac8:	6829      	ldr	r1, [r5, #0]
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ad0:	6029      	str	r1, [r5, #0]
 8006ad2:	061d      	lsls	r5, r3, #24
 8006ad4:	d514      	bpl.n	8006b00 <_printf_i+0x1ac>
 8006ad6:	07df      	lsls	r7, r3, #31
 8006ad8:	bf44      	itt	mi
 8006ada:	f043 0320 	orrmi.w	r3, r3, #32
 8006ade:	6023      	strmi	r3, [r4, #0]
 8006ae0:	b91e      	cbnz	r6, 8006aea <_printf_i+0x196>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	f023 0320 	bic.w	r3, r3, #32
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	2310      	movs	r3, #16
 8006aec:	e7b0      	b.n	8006a50 <_printf_i+0xfc>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	f043 0320 	orr.w	r3, r3, #32
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	2378      	movs	r3, #120	; 0x78
 8006af8:	4828      	ldr	r0, [pc, #160]	; (8006b9c <_printf_i+0x248>)
 8006afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006afe:	e7e3      	b.n	8006ac8 <_printf_i+0x174>
 8006b00:	0659      	lsls	r1, r3, #25
 8006b02:	bf48      	it	mi
 8006b04:	b2b6      	uxthmi	r6, r6
 8006b06:	e7e6      	b.n	8006ad6 <_printf_i+0x182>
 8006b08:	4615      	mov	r5, r2
 8006b0a:	e7bb      	b.n	8006a84 <_printf_i+0x130>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	6826      	ldr	r6, [r4, #0]
 8006b10:	6961      	ldr	r1, [r4, #20]
 8006b12:	1d18      	adds	r0, r3, #4
 8006b14:	6028      	str	r0, [r5, #0]
 8006b16:	0635      	lsls	r5, r6, #24
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	d501      	bpl.n	8006b20 <_printf_i+0x1cc>
 8006b1c:	6019      	str	r1, [r3, #0]
 8006b1e:	e002      	b.n	8006b26 <_printf_i+0x1d2>
 8006b20:	0670      	lsls	r0, r6, #25
 8006b22:	d5fb      	bpl.n	8006b1c <_printf_i+0x1c8>
 8006b24:	8019      	strh	r1, [r3, #0]
 8006b26:	2300      	movs	r3, #0
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	4615      	mov	r5, r2
 8006b2c:	e7ba      	b.n	8006aa4 <_printf_i+0x150>
 8006b2e:	682b      	ldr	r3, [r5, #0]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	602a      	str	r2, [r5, #0]
 8006b34:	681d      	ldr	r5, [r3, #0]
 8006b36:	6862      	ldr	r2, [r4, #4]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f7f9 fb70 	bl	8000220 <memchr>
 8006b40:	b108      	cbz	r0, 8006b46 <_printf_i+0x1f2>
 8006b42:	1b40      	subs	r0, r0, r5
 8006b44:	6060      	str	r0, [r4, #4]
 8006b46:	6863      	ldr	r3, [r4, #4]
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b50:	e7a8      	b.n	8006aa4 <_printf_i+0x150>
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	462a      	mov	r2, r5
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d0ab      	beq.n	8006ab8 <_printf_i+0x164>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	079b      	lsls	r3, r3, #30
 8006b64:	d413      	bmi.n	8006b8e <_printf_i+0x23a>
 8006b66:	68e0      	ldr	r0, [r4, #12]
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	4298      	cmp	r0, r3
 8006b6c:	bfb8      	it	lt
 8006b6e:	4618      	movlt	r0, r3
 8006b70:	e7a4      	b.n	8006abc <_printf_i+0x168>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4632      	mov	r2, r6
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	47d0      	blx	sl
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d09b      	beq.n	8006ab8 <_printf_i+0x164>
 8006b80:	3501      	adds	r5, #1
 8006b82:	68e3      	ldr	r3, [r4, #12]
 8006b84:	9903      	ldr	r1, [sp, #12]
 8006b86:	1a5b      	subs	r3, r3, r1
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	dcf2      	bgt.n	8006b72 <_printf_i+0x21e>
 8006b8c:	e7eb      	b.n	8006b66 <_printf_i+0x212>
 8006b8e:	2500      	movs	r5, #0
 8006b90:	f104 0619 	add.w	r6, r4, #25
 8006b94:	e7f5      	b.n	8006b82 <_printf_i+0x22e>
 8006b96:	bf00      	nop
 8006b98:	0800b96a 	.word	0x0800b96a
 8006b9c:	0800b97b 	.word	0x0800b97b

08006ba0 <iprintf>:
 8006ba0:	b40f      	push	{r0, r1, r2, r3}
 8006ba2:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <iprintf+0x2c>)
 8006ba4:	b513      	push	{r0, r1, r4, lr}
 8006ba6:	681c      	ldr	r4, [r3, #0]
 8006ba8:	b124      	cbz	r4, 8006bb4 <iprintf+0x14>
 8006baa:	69a3      	ldr	r3, [r4, #24]
 8006bac:	b913      	cbnz	r3, 8006bb4 <iprintf+0x14>
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f001 f8da 	bl	8007d68 <__sinit>
 8006bb4:	ab05      	add	r3, sp, #20
 8006bb6:	9a04      	ldr	r2, [sp, #16]
 8006bb8:	68a1      	ldr	r1, [r4, #8]
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f001 fe97 	bl	80088f0 <_vfiprintf_r>
 8006bc2:	b002      	add	sp, #8
 8006bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc8:	b004      	add	sp, #16
 8006bca:	4770      	bx	lr
 8006bcc:	2000000c 	.word	0x2000000c

08006bd0 <_puts_r>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	460e      	mov	r6, r1
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	b118      	cbz	r0, 8006be0 <_puts_r+0x10>
 8006bd8:	6983      	ldr	r3, [r0, #24]
 8006bda:	b90b      	cbnz	r3, 8006be0 <_puts_r+0x10>
 8006bdc:	f001 f8c4 	bl	8007d68 <__sinit>
 8006be0:	69ab      	ldr	r3, [r5, #24]
 8006be2:	68ac      	ldr	r4, [r5, #8]
 8006be4:	b913      	cbnz	r3, 8006bec <_puts_r+0x1c>
 8006be6:	4628      	mov	r0, r5
 8006be8:	f001 f8be 	bl	8007d68 <__sinit>
 8006bec:	4b2c      	ldr	r3, [pc, #176]	; (8006ca0 <_puts_r+0xd0>)
 8006bee:	429c      	cmp	r4, r3
 8006bf0:	d120      	bne.n	8006c34 <_puts_r+0x64>
 8006bf2:	686c      	ldr	r4, [r5, #4]
 8006bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bf6:	07db      	lsls	r3, r3, #31
 8006bf8:	d405      	bmi.n	8006c06 <_puts_r+0x36>
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	0598      	lsls	r0, r3, #22
 8006bfe:	d402      	bmi.n	8006c06 <_puts_r+0x36>
 8006c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c02:	f001 f954 	bl	8007eae <__retarget_lock_acquire_recursive>
 8006c06:	89a3      	ldrh	r3, [r4, #12]
 8006c08:	0719      	lsls	r1, r3, #28
 8006c0a:	d51d      	bpl.n	8006c48 <_puts_r+0x78>
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	b1db      	cbz	r3, 8006c48 <_puts_r+0x78>
 8006c10:	3e01      	subs	r6, #1
 8006c12:	68a3      	ldr	r3, [r4, #8]
 8006c14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	60a3      	str	r3, [r4, #8]
 8006c1c:	bb39      	cbnz	r1, 8006c6e <_puts_r+0x9e>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	da38      	bge.n	8006c94 <_puts_r+0xc4>
 8006c22:	4622      	mov	r2, r4
 8006c24:	210a      	movs	r1, #10
 8006c26:	4628      	mov	r0, r5
 8006c28:	f000 f848 	bl	8006cbc <__swbuf_r>
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d011      	beq.n	8006c54 <_puts_r+0x84>
 8006c30:	250a      	movs	r5, #10
 8006c32:	e011      	b.n	8006c58 <_puts_r+0x88>
 8006c34:	4b1b      	ldr	r3, [pc, #108]	; (8006ca4 <_puts_r+0xd4>)
 8006c36:	429c      	cmp	r4, r3
 8006c38:	d101      	bne.n	8006c3e <_puts_r+0x6e>
 8006c3a:	68ac      	ldr	r4, [r5, #8]
 8006c3c:	e7da      	b.n	8006bf4 <_puts_r+0x24>
 8006c3e:	4b1a      	ldr	r3, [pc, #104]	; (8006ca8 <_puts_r+0xd8>)
 8006c40:	429c      	cmp	r4, r3
 8006c42:	bf08      	it	eq
 8006c44:	68ec      	ldreq	r4, [r5, #12]
 8006c46:	e7d5      	b.n	8006bf4 <_puts_r+0x24>
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f000 f888 	bl	8006d60 <__swsetup_r>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d0dd      	beq.n	8006c10 <_puts_r+0x40>
 8006c54:	f04f 35ff 	mov.w	r5, #4294967295
 8006c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c5a:	07da      	lsls	r2, r3, #31
 8006c5c:	d405      	bmi.n	8006c6a <_puts_r+0x9a>
 8006c5e:	89a3      	ldrh	r3, [r4, #12]
 8006c60:	059b      	lsls	r3, r3, #22
 8006c62:	d402      	bmi.n	8006c6a <_puts_r+0x9a>
 8006c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c66:	f001 f923 	bl	8007eb0 <__retarget_lock_release_recursive>
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	bd70      	pop	{r4, r5, r6, pc}
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da04      	bge.n	8006c7c <_puts_r+0xac>
 8006c72:	69a2      	ldr	r2, [r4, #24]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	dc06      	bgt.n	8006c86 <_puts_r+0xb6>
 8006c78:	290a      	cmp	r1, #10
 8006c7a:	d004      	beq.n	8006c86 <_puts_r+0xb6>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	6022      	str	r2, [r4, #0]
 8006c82:	7019      	strb	r1, [r3, #0]
 8006c84:	e7c5      	b.n	8006c12 <_puts_r+0x42>
 8006c86:	4622      	mov	r2, r4
 8006c88:	4628      	mov	r0, r5
 8006c8a:	f000 f817 	bl	8006cbc <__swbuf_r>
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d1bf      	bne.n	8006c12 <_puts_r+0x42>
 8006c92:	e7df      	b.n	8006c54 <_puts_r+0x84>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	250a      	movs	r5, #10
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	6022      	str	r2, [r4, #0]
 8006c9c:	701d      	strb	r5, [r3, #0]
 8006c9e:	e7db      	b.n	8006c58 <_puts_r+0x88>
 8006ca0:	0800ba3c 	.word	0x0800ba3c
 8006ca4:	0800ba5c 	.word	0x0800ba5c
 8006ca8:	0800ba1c 	.word	0x0800ba1c

08006cac <puts>:
 8006cac:	4b02      	ldr	r3, [pc, #8]	; (8006cb8 <puts+0xc>)
 8006cae:	4601      	mov	r1, r0
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	f7ff bf8d 	b.w	8006bd0 <_puts_r>
 8006cb6:	bf00      	nop
 8006cb8:	2000000c 	.word	0x2000000c

08006cbc <__swbuf_r>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	460e      	mov	r6, r1
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	b118      	cbz	r0, 8006cce <__swbuf_r+0x12>
 8006cc6:	6983      	ldr	r3, [r0, #24]
 8006cc8:	b90b      	cbnz	r3, 8006cce <__swbuf_r+0x12>
 8006cca:	f001 f84d 	bl	8007d68 <__sinit>
 8006cce:	4b21      	ldr	r3, [pc, #132]	; (8006d54 <__swbuf_r+0x98>)
 8006cd0:	429c      	cmp	r4, r3
 8006cd2:	d12b      	bne.n	8006d2c <__swbuf_r+0x70>
 8006cd4:	686c      	ldr	r4, [r5, #4]
 8006cd6:	69a3      	ldr	r3, [r4, #24]
 8006cd8:	60a3      	str	r3, [r4, #8]
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	071a      	lsls	r2, r3, #28
 8006cde:	d52f      	bpl.n	8006d40 <__swbuf_r+0x84>
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	b36b      	cbz	r3, 8006d40 <__swbuf_r+0x84>
 8006ce4:	6923      	ldr	r3, [r4, #16]
 8006ce6:	6820      	ldr	r0, [r4, #0]
 8006ce8:	1ac0      	subs	r0, r0, r3
 8006cea:	6963      	ldr	r3, [r4, #20]
 8006cec:	b2f6      	uxtb	r6, r6
 8006cee:	4283      	cmp	r3, r0
 8006cf0:	4637      	mov	r7, r6
 8006cf2:	dc04      	bgt.n	8006cfe <__swbuf_r+0x42>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f000 ffa2 	bl	8007c40 <_fflush_r>
 8006cfc:	bb30      	cbnz	r0, 8006d4c <__swbuf_r+0x90>
 8006cfe:	68a3      	ldr	r3, [r4, #8]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	60a3      	str	r3, [r4, #8]
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	6022      	str	r2, [r4, #0]
 8006d0a:	701e      	strb	r6, [r3, #0]
 8006d0c:	6963      	ldr	r3, [r4, #20]
 8006d0e:	3001      	adds	r0, #1
 8006d10:	4283      	cmp	r3, r0
 8006d12:	d004      	beq.n	8006d1e <__swbuf_r+0x62>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	07db      	lsls	r3, r3, #31
 8006d18:	d506      	bpl.n	8006d28 <__swbuf_r+0x6c>
 8006d1a:	2e0a      	cmp	r6, #10
 8006d1c:	d104      	bne.n	8006d28 <__swbuf_r+0x6c>
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 ff8d 	bl	8007c40 <_fflush_r>
 8006d26:	b988      	cbnz	r0, 8006d4c <__swbuf_r+0x90>
 8006d28:	4638      	mov	r0, r7
 8006d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <__swbuf_r+0x9c>)
 8006d2e:	429c      	cmp	r4, r3
 8006d30:	d101      	bne.n	8006d36 <__swbuf_r+0x7a>
 8006d32:	68ac      	ldr	r4, [r5, #8]
 8006d34:	e7cf      	b.n	8006cd6 <__swbuf_r+0x1a>
 8006d36:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <__swbuf_r+0xa0>)
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	bf08      	it	eq
 8006d3c:	68ec      	ldreq	r4, [r5, #12]
 8006d3e:	e7ca      	b.n	8006cd6 <__swbuf_r+0x1a>
 8006d40:	4621      	mov	r1, r4
 8006d42:	4628      	mov	r0, r5
 8006d44:	f000 f80c 	bl	8006d60 <__swsetup_r>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d0cb      	beq.n	8006ce4 <__swbuf_r+0x28>
 8006d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d50:	e7ea      	b.n	8006d28 <__swbuf_r+0x6c>
 8006d52:	bf00      	nop
 8006d54:	0800ba3c 	.word	0x0800ba3c
 8006d58:	0800ba5c 	.word	0x0800ba5c
 8006d5c:	0800ba1c 	.word	0x0800ba1c

08006d60 <__swsetup_r>:
 8006d60:	4b32      	ldr	r3, [pc, #200]	; (8006e2c <__swsetup_r+0xcc>)
 8006d62:	b570      	push	{r4, r5, r6, lr}
 8006d64:	681d      	ldr	r5, [r3, #0]
 8006d66:	4606      	mov	r6, r0
 8006d68:	460c      	mov	r4, r1
 8006d6a:	b125      	cbz	r5, 8006d76 <__swsetup_r+0x16>
 8006d6c:	69ab      	ldr	r3, [r5, #24]
 8006d6e:	b913      	cbnz	r3, 8006d76 <__swsetup_r+0x16>
 8006d70:	4628      	mov	r0, r5
 8006d72:	f000 fff9 	bl	8007d68 <__sinit>
 8006d76:	4b2e      	ldr	r3, [pc, #184]	; (8006e30 <__swsetup_r+0xd0>)
 8006d78:	429c      	cmp	r4, r3
 8006d7a:	d10f      	bne.n	8006d9c <__swsetup_r+0x3c>
 8006d7c:	686c      	ldr	r4, [r5, #4]
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d84:	0719      	lsls	r1, r3, #28
 8006d86:	d42c      	bmi.n	8006de2 <__swsetup_r+0x82>
 8006d88:	06dd      	lsls	r5, r3, #27
 8006d8a:	d411      	bmi.n	8006db0 <__swsetup_r+0x50>
 8006d8c:	2309      	movs	r3, #9
 8006d8e:	6033      	str	r3, [r6, #0]
 8006d90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d94:	81a3      	strh	r3, [r4, #12]
 8006d96:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9a:	e03e      	b.n	8006e1a <__swsetup_r+0xba>
 8006d9c:	4b25      	ldr	r3, [pc, #148]	; (8006e34 <__swsetup_r+0xd4>)
 8006d9e:	429c      	cmp	r4, r3
 8006da0:	d101      	bne.n	8006da6 <__swsetup_r+0x46>
 8006da2:	68ac      	ldr	r4, [r5, #8]
 8006da4:	e7eb      	b.n	8006d7e <__swsetup_r+0x1e>
 8006da6:	4b24      	ldr	r3, [pc, #144]	; (8006e38 <__swsetup_r+0xd8>)
 8006da8:	429c      	cmp	r4, r3
 8006daa:	bf08      	it	eq
 8006dac:	68ec      	ldreq	r4, [r5, #12]
 8006dae:	e7e6      	b.n	8006d7e <__swsetup_r+0x1e>
 8006db0:	0758      	lsls	r0, r3, #29
 8006db2:	d512      	bpl.n	8006dda <__swsetup_r+0x7a>
 8006db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006db6:	b141      	cbz	r1, 8006dca <__swsetup_r+0x6a>
 8006db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dbc:	4299      	cmp	r1, r3
 8006dbe:	d002      	beq.n	8006dc6 <__swsetup_r+0x66>
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f001 fc8b 	bl	80086dc <_free_r>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	6363      	str	r3, [r4, #52]	; 0x34
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	6063      	str	r3, [r4, #4]
 8006dd6:	6923      	ldr	r3, [r4, #16]
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	89a3      	ldrh	r3, [r4, #12]
 8006ddc:	f043 0308 	orr.w	r3, r3, #8
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	6923      	ldr	r3, [r4, #16]
 8006de4:	b94b      	cbnz	r3, 8006dfa <__swsetup_r+0x9a>
 8006de6:	89a3      	ldrh	r3, [r4, #12]
 8006de8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df0:	d003      	beq.n	8006dfa <__swsetup_r+0x9a>
 8006df2:	4621      	mov	r1, r4
 8006df4:	4630      	mov	r0, r6
 8006df6:	f001 f881 	bl	8007efc <__smakebuf_r>
 8006dfa:	89a0      	ldrh	r0, [r4, #12]
 8006dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e00:	f010 0301 	ands.w	r3, r0, #1
 8006e04:	d00a      	beq.n	8006e1c <__swsetup_r+0xbc>
 8006e06:	2300      	movs	r3, #0
 8006e08:	60a3      	str	r3, [r4, #8]
 8006e0a:	6963      	ldr	r3, [r4, #20]
 8006e0c:	425b      	negs	r3, r3
 8006e0e:	61a3      	str	r3, [r4, #24]
 8006e10:	6923      	ldr	r3, [r4, #16]
 8006e12:	b943      	cbnz	r3, 8006e26 <__swsetup_r+0xc6>
 8006e14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e18:	d1ba      	bne.n	8006d90 <__swsetup_r+0x30>
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	0781      	lsls	r1, r0, #30
 8006e1e:	bf58      	it	pl
 8006e20:	6963      	ldrpl	r3, [r4, #20]
 8006e22:	60a3      	str	r3, [r4, #8]
 8006e24:	e7f4      	b.n	8006e10 <__swsetup_r+0xb0>
 8006e26:	2000      	movs	r0, #0
 8006e28:	e7f7      	b.n	8006e1a <__swsetup_r+0xba>
 8006e2a:	bf00      	nop
 8006e2c:	2000000c 	.word	0x2000000c
 8006e30:	0800ba3c 	.word	0x0800ba3c
 8006e34:	0800ba5c 	.word	0x0800ba5c
 8006e38:	0800ba1c 	.word	0x0800ba1c

08006e3c <quorem>:
 8006e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	6903      	ldr	r3, [r0, #16]
 8006e42:	690c      	ldr	r4, [r1, #16]
 8006e44:	42a3      	cmp	r3, r4
 8006e46:	4607      	mov	r7, r0
 8006e48:	f2c0 8081 	blt.w	8006f4e <quorem+0x112>
 8006e4c:	3c01      	subs	r4, #1
 8006e4e:	f101 0814 	add.w	r8, r1, #20
 8006e52:	f100 0514 	add.w	r5, r0, #20
 8006e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e64:	3301      	adds	r3, #1
 8006e66:	429a      	cmp	r2, r3
 8006e68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e70:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e74:	d331      	bcc.n	8006eda <quorem+0x9e>
 8006e76:	f04f 0e00 	mov.w	lr, #0
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	46ac      	mov	ip, r5
 8006e7e:	46f2      	mov	sl, lr
 8006e80:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e84:	b293      	uxth	r3, r2
 8006e86:	fb06 e303 	mla	r3, r6, r3, lr
 8006e8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	ebaa 0303 	sub.w	r3, sl, r3
 8006e94:	f8dc a000 	ldr.w	sl, [ip]
 8006e98:	0c12      	lsrs	r2, r2, #16
 8006e9a:	fa13 f38a 	uxtah	r3, r3, sl
 8006e9e:	fb06 e202 	mla	r2, r6, r2, lr
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	9b00      	ldr	r3, [sp, #0]
 8006ea6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006eaa:	b292      	uxth	r2, r2
 8006eac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006eb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8006eb8:	4581      	cmp	r9, r0
 8006eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ebe:	f84c 3b04 	str.w	r3, [ip], #4
 8006ec2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ec6:	d2db      	bcs.n	8006e80 <quorem+0x44>
 8006ec8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ecc:	b92b      	cbnz	r3, 8006eda <quorem+0x9e>
 8006ece:	9b01      	ldr	r3, [sp, #4]
 8006ed0:	3b04      	subs	r3, #4
 8006ed2:	429d      	cmp	r5, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	d32e      	bcc.n	8006f36 <quorem+0xfa>
 8006ed8:	613c      	str	r4, [r7, #16]
 8006eda:	4638      	mov	r0, r7
 8006edc:	f001 fae6 	bl	80084ac <__mcmp>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	db24      	blt.n	8006f2e <quorem+0xf2>
 8006ee4:	3601      	adds	r6, #1
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f04f 0c00 	mov.w	ip, #0
 8006eec:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ef0:	f8d0 e000 	ldr.w	lr, [r0]
 8006ef4:	b293      	uxth	r3, r2
 8006ef6:	ebac 0303 	sub.w	r3, ip, r3
 8006efa:	0c12      	lsrs	r2, r2, #16
 8006efc:	fa13 f38e 	uxtah	r3, r3, lr
 8006f00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f0e:	45c1      	cmp	r9, r8
 8006f10:	f840 3b04 	str.w	r3, [r0], #4
 8006f14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f18:	d2e8      	bcs.n	8006eec <quorem+0xb0>
 8006f1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f22:	b922      	cbnz	r2, 8006f2e <quorem+0xf2>
 8006f24:	3b04      	subs	r3, #4
 8006f26:	429d      	cmp	r5, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	d30a      	bcc.n	8006f42 <quorem+0x106>
 8006f2c:	613c      	str	r4, [r7, #16]
 8006f2e:	4630      	mov	r0, r6
 8006f30:	b003      	add	sp, #12
 8006f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	3b04      	subs	r3, #4
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	d1cc      	bne.n	8006ed8 <quorem+0x9c>
 8006f3e:	3c01      	subs	r4, #1
 8006f40:	e7c7      	b.n	8006ed2 <quorem+0x96>
 8006f42:	6812      	ldr	r2, [r2, #0]
 8006f44:	3b04      	subs	r3, #4
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	d1f0      	bne.n	8006f2c <quorem+0xf0>
 8006f4a:	3c01      	subs	r4, #1
 8006f4c:	e7eb      	b.n	8006f26 <quorem+0xea>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	e7ee      	b.n	8006f30 <quorem+0xf4>
 8006f52:	0000      	movs	r0, r0
 8006f54:	0000      	movs	r0, r0
	...

08006f58 <_dtoa_r>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	ed2d 8b04 	vpush	{d8-d9}
 8006f60:	ec57 6b10 	vmov	r6, r7, d0
 8006f64:	b093      	sub	sp, #76	; 0x4c
 8006f66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f6c:	9106      	str	r1, [sp, #24]
 8006f6e:	ee10 aa10 	vmov	sl, s0
 8006f72:	4604      	mov	r4, r0
 8006f74:	9209      	str	r2, [sp, #36]	; 0x24
 8006f76:	930c      	str	r3, [sp, #48]	; 0x30
 8006f78:	46bb      	mov	fp, r7
 8006f7a:	b975      	cbnz	r5, 8006f9a <_dtoa_r+0x42>
 8006f7c:	2010      	movs	r0, #16
 8006f7e:	f000 fffd 	bl	8007f7c <malloc>
 8006f82:	4602      	mov	r2, r0
 8006f84:	6260      	str	r0, [r4, #36]	; 0x24
 8006f86:	b920      	cbnz	r0, 8006f92 <_dtoa_r+0x3a>
 8006f88:	4ba7      	ldr	r3, [pc, #668]	; (8007228 <_dtoa_r+0x2d0>)
 8006f8a:	21ea      	movs	r1, #234	; 0xea
 8006f8c:	48a7      	ldr	r0, [pc, #668]	; (800722c <_dtoa_r+0x2d4>)
 8006f8e:	f001 fe45 	bl	8008c1c <__assert_func>
 8006f92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f96:	6005      	str	r5, [r0, #0]
 8006f98:	60c5      	str	r5, [r0, #12]
 8006f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f9c:	6819      	ldr	r1, [r3, #0]
 8006f9e:	b151      	cbz	r1, 8006fb6 <_dtoa_r+0x5e>
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	604a      	str	r2, [r1, #4]
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	4093      	lsls	r3, r2
 8006fa8:	608b      	str	r3, [r1, #8]
 8006faa:	4620      	mov	r0, r4
 8006fac:	f001 f83c 	bl	8008028 <_Bfree>
 8006fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	1e3b      	subs	r3, r7, #0
 8006fb8:	bfaa      	itet	ge
 8006fba:	2300      	movge	r3, #0
 8006fbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006fc0:	f8c8 3000 	strge.w	r3, [r8]
 8006fc4:	4b9a      	ldr	r3, [pc, #616]	; (8007230 <_dtoa_r+0x2d8>)
 8006fc6:	bfbc      	itt	lt
 8006fc8:	2201      	movlt	r2, #1
 8006fca:	f8c8 2000 	strlt.w	r2, [r8]
 8006fce:	ea33 030b 	bics.w	r3, r3, fp
 8006fd2:	d11b      	bne.n	800700c <_dtoa_r+0xb4>
 8006fd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fd6:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fe0:	4333      	orrs	r3, r6
 8006fe2:	f000 8592 	beq.w	8007b0a <_dtoa_r+0xbb2>
 8006fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fe8:	b963      	cbnz	r3, 8007004 <_dtoa_r+0xac>
 8006fea:	4b92      	ldr	r3, [pc, #584]	; (8007234 <_dtoa_r+0x2dc>)
 8006fec:	e022      	b.n	8007034 <_dtoa_r+0xdc>
 8006fee:	4b92      	ldr	r3, [pc, #584]	; (8007238 <_dtoa_r+0x2e0>)
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	9801      	ldr	r0, [sp, #4]
 8006ffa:	b013      	add	sp, #76	; 0x4c
 8006ffc:	ecbd 8b04 	vpop	{d8-d9}
 8007000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007004:	4b8b      	ldr	r3, [pc, #556]	; (8007234 <_dtoa_r+0x2dc>)
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	3303      	adds	r3, #3
 800700a:	e7f3      	b.n	8006ff4 <_dtoa_r+0x9c>
 800700c:	2200      	movs	r2, #0
 800700e:	2300      	movs	r3, #0
 8007010:	4650      	mov	r0, sl
 8007012:	4659      	mov	r1, fp
 8007014:	f7f9 fd78 	bl	8000b08 <__aeabi_dcmpeq>
 8007018:	ec4b ab19 	vmov	d9, sl, fp
 800701c:	4680      	mov	r8, r0
 800701e:	b158      	cbz	r0, 8007038 <_dtoa_r+0xe0>
 8007020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007022:	2301      	movs	r3, #1
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 856b 	beq.w	8007b04 <_dtoa_r+0xbac>
 800702e:	4883      	ldr	r0, [pc, #524]	; (800723c <_dtoa_r+0x2e4>)
 8007030:	6018      	str	r0, [r3, #0]
 8007032:	1e43      	subs	r3, r0, #1
 8007034:	9301      	str	r3, [sp, #4]
 8007036:	e7df      	b.n	8006ff8 <_dtoa_r+0xa0>
 8007038:	ec4b ab10 	vmov	d0, sl, fp
 800703c:	aa10      	add	r2, sp, #64	; 0x40
 800703e:	a911      	add	r1, sp, #68	; 0x44
 8007040:	4620      	mov	r0, r4
 8007042:	f001 fad9 	bl	80085f8 <__d2b>
 8007046:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800704a:	ee08 0a10 	vmov	s16, r0
 800704e:	2d00      	cmp	r5, #0
 8007050:	f000 8084 	beq.w	800715c <_dtoa_r+0x204>
 8007054:	ee19 3a90 	vmov	r3, s19
 8007058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800705c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007060:	4656      	mov	r6, sl
 8007062:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800706a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800706e:	4b74      	ldr	r3, [pc, #464]	; (8007240 <_dtoa_r+0x2e8>)
 8007070:	2200      	movs	r2, #0
 8007072:	4630      	mov	r0, r6
 8007074:	4639      	mov	r1, r7
 8007076:	f7f9 f927 	bl	80002c8 <__aeabi_dsub>
 800707a:	a365      	add	r3, pc, #404	; (adr r3, 8007210 <_dtoa_r+0x2b8>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f7f9 fada 	bl	8000638 <__aeabi_dmul>
 8007084:	a364      	add	r3, pc, #400	; (adr r3, 8007218 <_dtoa_r+0x2c0>)
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f7f9 f91f 	bl	80002cc <__adddf3>
 800708e:	4606      	mov	r6, r0
 8007090:	4628      	mov	r0, r5
 8007092:	460f      	mov	r7, r1
 8007094:	f7f9 fa66 	bl	8000564 <__aeabi_i2d>
 8007098:	a361      	add	r3, pc, #388	; (adr r3, 8007220 <_dtoa_r+0x2c8>)
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	f7f9 facb 	bl	8000638 <__aeabi_dmul>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4630      	mov	r0, r6
 80070a8:	4639      	mov	r1, r7
 80070aa:	f7f9 f90f 	bl	80002cc <__adddf3>
 80070ae:	4606      	mov	r6, r0
 80070b0:	460f      	mov	r7, r1
 80070b2:	f7f9 fd71 	bl	8000b98 <__aeabi_d2iz>
 80070b6:	2200      	movs	r2, #0
 80070b8:	9000      	str	r0, [sp, #0]
 80070ba:	2300      	movs	r3, #0
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	f7f9 fd2c 	bl	8000b1c <__aeabi_dcmplt>
 80070c4:	b150      	cbz	r0, 80070dc <_dtoa_r+0x184>
 80070c6:	9800      	ldr	r0, [sp, #0]
 80070c8:	f7f9 fa4c 	bl	8000564 <__aeabi_i2d>
 80070cc:	4632      	mov	r2, r6
 80070ce:	463b      	mov	r3, r7
 80070d0:	f7f9 fd1a 	bl	8000b08 <__aeabi_dcmpeq>
 80070d4:	b910      	cbnz	r0, 80070dc <_dtoa_r+0x184>
 80070d6:	9b00      	ldr	r3, [sp, #0]
 80070d8:	3b01      	subs	r3, #1
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	9b00      	ldr	r3, [sp, #0]
 80070de:	2b16      	cmp	r3, #22
 80070e0:	d85a      	bhi.n	8007198 <_dtoa_r+0x240>
 80070e2:	9a00      	ldr	r2, [sp, #0]
 80070e4:	4b57      	ldr	r3, [pc, #348]	; (8007244 <_dtoa_r+0x2ec>)
 80070e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	ec51 0b19 	vmov	r0, r1, d9
 80070f2:	f7f9 fd13 	bl	8000b1c <__aeabi_dcmplt>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d050      	beq.n	800719c <_dtoa_r+0x244>
 80070fa:	9b00      	ldr	r3, [sp, #0]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	2300      	movs	r3, #0
 8007102:	930b      	str	r3, [sp, #44]	; 0x2c
 8007104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007106:	1b5d      	subs	r5, r3, r5
 8007108:	1e6b      	subs	r3, r5, #1
 800710a:	9305      	str	r3, [sp, #20]
 800710c:	bf45      	ittet	mi
 800710e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007112:	9304      	strmi	r3, [sp, #16]
 8007114:	2300      	movpl	r3, #0
 8007116:	2300      	movmi	r3, #0
 8007118:	bf4c      	ite	mi
 800711a:	9305      	strmi	r3, [sp, #20]
 800711c:	9304      	strpl	r3, [sp, #16]
 800711e:	9b00      	ldr	r3, [sp, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	db3d      	blt.n	80071a0 <_dtoa_r+0x248>
 8007124:	9b05      	ldr	r3, [sp, #20]
 8007126:	9a00      	ldr	r2, [sp, #0]
 8007128:	920a      	str	r2, [sp, #40]	; 0x28
 800712a:	4413      	add	r3, r2
 800712c:	9305      	str	r3, [sp, #20]
 800712e:	2300      	movs	r3, #0
 8007130:	9307      	str	r3, [sp, #28]
 8007132:	9b06      	ldr	r3, [sp, #24]
 8007134:	2b09      	cmp	r3, #9
 8007136:	f200 8089 	bhi.w	800724c <_dtoa_r+0x2f4>
 800713a:	2b05      	cmp	r3, #5
 800713c:	bfc4      	itt	gt
 800713e:	3b04      	subgt	r3, #4
 8007140:	9306      	strgt	r3, [sp, #24]
 8007142:	9b06      	ldr	r3, [sp, #24]
 8007144:	f1a3 0302 	sub.w	r3, r3, #2
 8007148:	bfcc      	ite	gt
 800714a:	2500      	movgt	r5, #0
 800714c:	2501      	movle	r5, #1
 800714e:	2b03      	cmp	r3, #3
 8007150:	f200 8087 	bhi.w	8007262 <_dtoa_r+0x30a>
 8007154:	e8df f003 	tbb	[pc, r3]
 8007158:	59383a2d 	.word	0x59383a2d
 800715c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007160:	441d      	add	r5, r3
 8007162:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007166:	2b20      	cmp	r3, #32
 8007168:	bfc1      	itttt	gt
 800716a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800716e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007172:	fa0b f303 	lslgt.w	r3, fp, r3
 8007176:	fa26 f000 	lsrgt.w	r0, r6, r0
 800717a:	bfda      	itte	le
 800717c:	f1c3 0320 	rsble	r3, r3, #32
 8007180:	fa06 f003 	lslle.w	r0, r6, r3
 8007184:	4318      	orrgt	r0, r3
 8007186:	f7f9 f9dd 	bl	8000544 <__aeabi_ui2d>
 800718a:	2301      	movs	r3, #1
 800718c:	4606      	mov	r6, r0
 800718e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007192:	3d01      	subs	r5, #1
 8007194:	930e      	str	r3, [sp, #56]	; 0x38
 8007196:	e76a      	b.n	800706e <_dtoa_r+0x116>
 8007198:	2301      	movs	r3, #1
 800719a:	e7b2      	b.n	8007102 <_dtoa_r+0x1aa>
 800719c:	900b      	str	r0, [sp, #44]	; 0x2c
 800719e:	e7b1      	b.n	8007104 <_dtoa_r+0x1ac>
 80071a0:	9b04      	ldr	r3, [sp, #16]
 80071a2:	9a00      	ldr	r2, [sp, #0]
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	9304      	str	r3, [sp, #16]
 80071a8:	4253      	negs	r3, r2
 80071aa:	9307      	str	r3, [sp, #28]
 80071ac:	2300      	movs	r3, #0
 80071ae:	930a      	str	r3, [sp, #40]	; 0x28
 80071b0:	e7bf      	b.n	8007132 <_dtoa_r+0x1da>
 80071b2:	2300      	movs	r3, #0
 80071b4:	9308      	str	r3, [sp, #32]
 80071b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	dc55      	bgt.n	8007268 <_dtoa_r+0x310>
 80071bc:	2301      	movs	r3, #1
 80071be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80071c2:	461a      	mov	r2, r3
 80071c4:	9209      	str	r2, [sp, #36]	; 0x24
 80071c6:	e00c      	b.n	80071e2 <_dtoa_r+0x28a>
 80071c8:	2301      	movs	r3, #1
 80071ca:	e7f3      	b.n	80071b4 <_dtoa_r+0x25c>
 80071cc:	2300      	movs	r3, #0
 80071ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071d0:	9308      	str	r3, [sp, #32]
 80071d2:	9b00      	ldr	r3, [sp, #0]
 80071d4:	4413      	add	r3, r2
 80071d6:	9302      	str	r3, [sp, #8]
 80071d8:	3301      	adds	r3, #1
 80071da:	2b01      	cmp	r3, #1
 80071dc:	9303      	str	r3, [sp, #12]
 80071de:	bfb8      	it	lt
 80071e0:	2301      	movlt	r3, #1
 80071e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80071e4:	2200      	movs	r2, #0
 80071e6:	6042      	str	r2, [r0, #4]
 80071e8:	2204      	movs	r2, #4
 80071ea:	f102 0614 	add.w	r6, r2, #20
 80071ee:	429e      	cmp	r6, r3
 80071f0:	6841      	ldr	r1, [r0, #4]
 80071f2:	d93d      	bls.n	8007270 <_dtoa_r+0x318>
 80071f4:	4620      	mov	r0, r4
 80071f6:	f000 fed7 	bl	8007fa8 <_Balloc>
 80071fa:	9001      	str	r0, [sp, #4]
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d13b      	bne.n	8007278 <_dtoa_r+0x320>
 8007200:	4b11      	ldr	r3, [pc, #68]	; (8007248 <_dtoa_r+0x2f0>)
 8007202:	4602      	mov	r2, r0
 8007204:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007208:	e6c0      	b.n	8006f8c <_dtoa_r+0x34>
 800720a:	2301      	movs	r3, #1
 800720c:	e7df      	b.n	80071ce <_dtoa_r+0x276>
 800720e:	bf00      	nop
 8007210:	636f4361 	.word	0x636f4361
 8007214:	3fd287a7 	.word	0x3fd287a7
 8007218:	8b60c8b3 	.word	0x8b60c8b3
 800721c:	3fc68a28 	.word	0x3fc68a28
 8007220:	509f79fb 	.word	0x509f79fb
 8007224:	3fd34413 	.word	0x3fd34413
 8007228:	0800b999 	.word	0x0800b999
 800722c:	0800b9b0 	.word	0x0800b9b0
 8007230:	7ff00000 	.word	0x7ff00000
 8007234:	0800b995 	.word	0x0800b995
 8007238:	0800b98c 	.word	0x0800b98c
 800723c:	0800b969 	.word	0x0800b969
 8007240:	3ff80000 	.word	0x3ff80000
 8007244:	0800bb00 	.word	0x0800bb00
 8007248:	0800ba0b 	.word	0x0800ba0b
 800724c:	2501      	movs	r5, #1
 800724e:	2300      	movs	r3, #0
 8007250:	9306      	str	r3, [sp, #24]
 8007252:	9508      	str	r5, [sp, #32]
 8007254:	f04f 33ff 	mov.w	r3, #4294967295
 8007258:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800725c:	2200      	movs	r2, #0
 800725e:	2312      	movs	r3, #18
 8007260:	e7b0      	b.n	80071c4 <_dtoa_r+0x26c>
 8007262:	2301      	movs	r3, #1
 8007264:	9308      	str	r3, [sp, #32]
 8007266:	e7f5      	b.n	8007254 <_dtoa_r+0x2fc>
 8007268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800726e:	e7b8      	b.n	80071e2 <_dtoa_r+0x28a>
 8007270:	3101      	adds	r1, #1
 8007272:	6041      	str	r1, [r0, #4]
 8007274:	0052      	lsls	r2, r2, #1
 8007276:	e7b8      	b.n	80071ea <_dtoa_r+0x292>
 8007278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800727a:	9a01      	ldr	r2, [sp, #4]
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	9b03      	ldr	r3, [sp, #12]
 8007280:	2b0e      	cmp	r3, #14
 8007282:	f200 809d 	bhi.w	80073c0 <_dtoa_r+0x468>
 8007286:	2d00      	cmp	r5, #0
 8007288:	f000 809a 	beq.w	80073c0 <_dtoa_r+0x468>
 800728c:	9b00      	ldr	r3, [sp, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	dd32      	ble.n	80072f8 <_dtoa_r+0x3a0>
 8007292:	4ab7      	ldr	r2, [pc, #732]	; (8007570 <_dtoa_r+0x618>)
 8007294:	f003 030f 	and.w	r3, r3, #15
 8007298:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800729c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072a0:	9b00      	ldr	r3, [sp, #0]
 80072a2:	05d8      	lsls	r0, r3, #23
 80072a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80072a8:	d516      	bpl.n	80072d8 <_dtoa_r+0x380>
 80072aa:	4bb2      	ldr	r3, [pc, #712]	; (8007574 <_dtoa_r+0x61c>)
 80072ac:	ec51 0b19 	vmov	r0, r1, d9
 80072b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072b4:	f7f9 faea 	bl	800088c <__aeabi_ddiv>
 80072b8:	f007 070f 	and.w	r7, r7, #15
 80072bc:	4682      	mov	sl, r0
 80072be:	468b      	mov	fp, r1
 80072c0:	2503      	movs	r5, #3
 80072c2:	4eac      	ldr	r6, [pc, #688]	; (8007574 <_dtoa_r+0x61c>)
 80072c4:	b957      	cbnz	r7, 80072dc <_dtoa_r+0x384>
 80072c6:	4642      	mov	r2, r8
 80072c8:	464b      	mov	r3, r9
 80072ca:	4650      	mov	r0, sl
 80072cc:	4659      	mov	r1, fp
 80072ce:	f7f9 fadd 	bl	800088c <__aeabi_ddiv>
 80072d2:	4682      	mov	sl, r0
 80072d4:	468b      	mov	fp, r1
 80072d6:	e028      	b.n	800732a <_dtoa_r+0x3d2>
 80072d8:	2502      	movs	r5, #2
 80072da:	e7f2      	b.n	80072c2 <_dtoa_r+0x36a>
 80072dc:	07f9      	lsls	r1, r7, #31
 80072de:	d508      	bpl.n	80072f2 <_dtoa_r+0x39a>
 80072e0:	4640      	mov	r0, r8
 80072e2:	4649      	mov	r1, r9
 80072e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072e8:	f7f9 f9a6 	bl	8000638 <__aeabi_dmul>
 80072ec:	3501      	adds	r5, #1
 80072ee:	4680      	mov	r8, r0
 80072f0:	4689      	mov	r9, r1
 80072f2:	107f      	asrs	r7, r7, #1
 80072f4:	3608      	adds	r6, #8
 80072f6:	e7e5      	b.n	80072c4 <_dtoa_r+0x36c>
 80072f8:	f000 809b 	beq.w	8007432 <_dtoa_r+0x4da>
 80072fc:	9b00      	ldr	r3, [sp, #0]
 80072fe:	4f9d      	ldr	r7, [pc, #628]	; (8007574 <_dtoa_r+0x61c>)
 8007300:	425e      	negs	r6, r3
 8007302:	4b9b      	ldr	r3, [pc, #620]	; (8007570 <_dtoa_r+0x618>)
 8007304:	f006 020f 	and.w	r2, r6, #15
 8007308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	ec51 0b19 	vmov	r0, r1, d9
 8007314:	f7f9 f990 	bl	8000638 <__aeabi_dmul>
 8007318:	1136      	asrs	r6, r6, #4
 800731a:	4682      	mov	sl, r0
 800731c:	468b      	mov	fp, r1
 800731e:	2300      	movs	r3, #0
 8007320:	2502      	movs	r5, #2
 8007322:	2e00      	cmp	r6, #0
 8007324:	d17a      	bne.n	800741c <_dtoa_r+0x4c4>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1d3      	bne.n	80072d2 <_dtoa_r+0x37a>
 800732a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8082 	beq.w	8007436 <_dtoa_r+0x4de>
 8007332:	4b91      	ldr	r3, [pc, #580]	; (8007578 <_dtoa_r+0x620>)
 8007334:	2200      	movs	r2, #0
 8007336:	4650      	mov	r0, sl
 8007338:	4659      	mov	r1, fp
 800733a:	f7f9 fbef 	bl	8000b1c <__aeabi_dcmplt>
 800733e:	2800      	cmp	r0, #0
 8007340:	d079      	beq.n	8007436 <_dtoa_r+0x4de>
 8007342:	9b03      	ldr	r3, [sp, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d076      	beq.n	8007436 <_dtoa_r+0x4de>
 8007348:	9b02      	ldr	r3, [sp, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	dd36      	ble.n	80073bc <_dtoa_r+0x464>
 800734e:	9b00      	ldr	r3, [sp, #0]
 8007350:	4650      	mov	r0, sl
 8007352:	4659      	mov	r1, fp
 8007354:	1e5f      	subs	r7, r3, #1
 8007356:	2200      	movs	r2, #0
 8007358:	4b88      	ldr	r3, [pc, #544]	; (800757c <_dtoa_r+0x624>)
 800735a:	f7f9 f96d 	bl	8000638 <__aeabi_dmul>
 800735e:	9e02      	ldr	r6, [sp, #8]
 8007360:	4682      	mov	sl, r0
 8007362:	468b      	mov	fp, r1
 8007364:	3501      	adds	r5, #1
 8007366:	4628      	mov	r0, r5
 8007368:	f7f9 f8fc 	bl	8000564 <__aeabi_i2d>
 800736c:	4652      	mov	r2, sl
 800736e:	465b      	mov	r3, fp
 8007370:	f7f9 f962 	bl	8000638 <__aeabi_dmul>
 8007374:	4b82      	ldr	r3, [pc, #520]	; (8007580 <_dtoa_r+0x628>)
 8007376:	2200      	movs	r2, #0
 8007378:	f7f8 ffa8 	bl	80002cc <__adddf3>
 800737c:	46d0      	mov	r8, sl
 800737e:	46d9      	mov	r9, fp
 8007380:	4682      	mov	sl, r0
 8007382:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007386:	2e00      	cmp	r6, #0
 8007388:	d158      	bne.n	800743c <_dtoa_r+0x4e4>
 800738a:	4b7e      	ldr	r3, [pc, #504]	; (8007584 <_dtoa_r+0x62c>)
 800738c:	2200      	movs	r2, #0
 800738e:	4640      	mov	r0, r8
 8007390:	4649      	mov	r1, r9
 8007392:	f7f8 ff99 	bl	80002c8 <__aeabi_dsub>
 8007396:	4652      	mov	r2, sl
 8007398:	465b      	mov	r3, fp
 800739a:	4680      	mov	r8, r0
 800739c:	4689      	mov	r9, r1
 800739e:	f7f9 fbdb 	bl	8000b58 <__aeabi_dcmpgt>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f040 8295 	bne.w	80078d2 <_dtoa_r+0x97a>
 80073a8:	4652      	mov	r2, sl
 80073aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80073ae:	4640      	mov	r0, r8
 80073b0:	4649      	mov	r1, r9
 80073b2:	f7f9 fbb3 	bl	8000b1c <__aeabi_dcmplt>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	f040 8289 	bne.w	80078ce <_dtoa_r+0x976>
 80073bc:	ec5b ab19 	vmov	sl, fp, d9
 80073c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f2c0 8148 	blt.w	8007658 <_dtoa_r+0x700>
 80073c8:	9a00      	ldr	r2, [sp, #0]
 80073ca:	2a0e      	cmp	r2, #14
 80073cc:	f300 8144 	bgt.w	8007658 <_dtoa_r+0x700>
 80073d0:	4b67      	ldr	r3, [pc, #412]	; (8007570 <_dtoa_r+0x618>)
 80073d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f280 80d5 	bge.w	800758c <_dtoa_r+0x634>
 80073e2:	9b03      	ldr	r3, [sp, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f300 80d1 	bgt.w	800758c <_dtoa_r+0x634>
 80073ea:	f040 826f 	bne.w	80078cc <_dtoa_r+0x974>
 80073ee:	4b65      	ldr	r3, [pc, #404]	; (8007584 <_dtoa_r+0x62c>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	4640      	mov	r0, r8
 80073f4:	4649      	mov	r1, r9
 80073f6:	f7f9 f91f 	bl	8000638 <__aeabi_dmul>
 80073fa:	4652      	mov	r2, sl
 80073fc:	465b      	mov	r3, fp
 80073fe:	f7f9 fba1 	bl	8000b44 <__aeabi_dcmpge>
 8007402:	9e03      	ldr	r6, [sp, #12]
 8007404:	4637      	mov	r7, r6
 8007406:	2800      	cmp	r0, #0
 8007408:	f040 8245 	bne.w	8007896 <_dtoa_r+0x93e>
 800740c:	9d01      	ldr	r5, [sp, #4]
 800740e:	2331      	movs	r3, #49	; 0x31
 8007410:	f805 3b01 	strb.w	r3, [r5], #1
 8007414:	9b00      	ldr	r3, [sp, #0]
 8007416:	3301      	adds	r3, #1
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	e240      	b.n	800789e <_dtoa_r+0x946>
 800741c:	07f2      	lsls	r2, r6, #31
 800741e:	d505      	bpl.n	800742c <_dtoa_r+0x4d4>
 8007420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007424:	f7f9 f908 	bl	8000638 <__aeabi_dmul>
 8007428:	3501      	adds	r5, #1
 800742a:	2301      	movs	r3, #1
 800742c:	1076      	asrs	r6, r6, #1
 800742e:	3708      	adds	r7, #8
 8007430:	e777      	b.n	8007322 <_dtoa_r+0x3ca>
 8007432:	2502      	movs	r5, #2
 8007434:	e779      	b.n	800732a <_dtoa_r+0x3d2>
 8007436:	9f00      	ldr	r7, [sp, #0]
 8007438:	9e03      	ldr	r6, [sp, #12]
 800743a:	e794      	b.n	8007366 <_dtoa_r+0x40e>
 800743c:	9901      	ldr	r1, [sp, #4]
 800743e:	4b4c      	ldr	r3, [pc, #304]	; (8007570 <_dtoa_r+0x618>)
 8007440:	4431      	add	r1, r6
 8007442:	910d      	str	r1, [sp, #52]	; 0x34
 8007444:	9908      	ldr	r1, [sp, #32]
 8007446:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800744a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800744e:	2900      	cmp	r1, #0
 8007450:	d043      	beq.n	80074da <_dtoa_r+0x582>
 8007452:	494d      	ldr	r1, [pc, #308]	; (8007588 <_dtoa_r+0x630>)
 8007454:	2000      	movs	r0, #0
 8007456:	f7f9 fa19 	bl	800088c <__aeabi_ddiv>
 800745a:	4652      	mov	r2, sl
 800745c:	465b      	mov	r3, fp
 800745e:	f7f8 ff33 	bl	80002c8 <__aeabi_dsub>
 8007462:	9d01      	ldr	r5, [sp, #4]
 8007464:	4682      	mov	sl, r0
 8007466:	468b      	mov	fp, r1
 8007468:	4649      	mov	r1, r9
 800746a:	4640      	mov	r0, r8
 800746c:	f7f9 fb94 	bl	8000b98 <__aeabi_d2iz>
 8007470:	4606      	mov	r6, r0
 8007472:	f7f9 f877 	bl	8000564 <__aeabi_i2d>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4640      	mov	r0, r8
 800747c:	4649      	mov	r1, r9
 800747e:	f7f8 ff23 	bl	80002c8 <__aeabi_dsub>
 8007482:	3630      	adds	r6, #48	; 0x30
 8007484:	f805 6b01 	strb.w	r6, [r5], #1
 8007488:	4652      	mov	r2, sl
 800748a:	465b      	mov	r3, fp
 800748c:	4680      	mov	r8, r0
 800748e:	4689      	mov	r9, r1
 8007490:	f7f9 fb44 	bl	8000b1c <__aeabi_dcmplt>
 8007494:	2800      	cmp	r0, #0
 8007496:	d163      	bne.n	8007560 <_dtoa_r+0x608>
 8007498:	4642      	mov	r2, r8
 800749a:	464b      	mov	r3, r9
 800749c:	4936      	ldr	r1, [pc, #216]	; (8007578 <_dtoa_r+0x620>)
 800749e:	2000      	movs	r0, #0
 80074a0:	f7f8 ff12 	bl	80002c8 <__aeabi_dsub>
 80074a4:	4652      	mov	r2, sl
 80074a6:	465b      	mov	r3, fp
 80074a8:	f7f9 fb38 	bl	8000b1c <__aeabi_dcmplt>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	f040 80b5 	bne.w	800761c <_dtoa_r+0x6c4>
 80074b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074b4:	429d      	cmp	r5, r3
 80074b6:	d081      	beq.n	80073bc <_dtoa_r+0x464>
 80074b8:	4b30      	ldr	r3, [pc, #192]	; (800757c <_dtoa_r+0x624>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	4650      	mov	r0, sl
 80074be:	4659      	mov	r1, fp
 80074c0:	f7f9 f8ba 	bl	8000638 <__aeabi_dmul>
 80074c4:	4b2d      	ldr	r3, [pc, #180]	; (800757c <_dtoa_r+0x624>)
 80074c6:	4682      	mov	sl, r0
 80074c8:	468b      	mov	fp, r1
 80074ca:	4640      	mov	r0, r8
 80074cc:	4649      	mov	r1, r9
 80074ce:	2200      	movs	r2, #0
 80074d0:	f7f9 f8b2 	bl	8000638 <__aeabi_dmul>
 80074d4:	4680      	mov	r8, r0
 80074d6:	4689      	mov	r9, r1
 80074d8:	e7c6      	b.n	8007468 <_dtoa_r+0x510>
 80074da:	4650      	mov	r0, sl
 80074dc:	4659      	mov	r1, fp
 80074de:	f7f9 f8ab 	bl	8000638 <__aeabi_dmul>
 80074e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074e4:	9d01      	ldr	r5, [sp, #4]
 80074e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80074e8:	4682      	mov	sl, r0
 80074ea:	468b      	mov	fp, r1
 80074ec:	4649      	mov	r1, r9
 80074ee:	4640      	mov	r0, r8
 80074f0:	f7f9 fb52 	bl	8000b98 <__aeabi_d2iz>
 80074f4:	4606      	mov	r6, r0
 80074f6:	f7f9 f835 	bl	8000564 <__aeabi_i2d>
 80074fa:	3630      	adds	r6, #48	; 0x30
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4640      	mov	r0, r8
 8007502:	4649      	mov	r1, r9
 8007504:	f7f8 fee0 	bl	80002c8 <__aeabi_dsub>
 8007508:	f805 6b01 	strb.w	r6, [r5], #1
 800750c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800750e:	429d      	cmp	r5, r3
 8007510:	4680      	mov	r8, r0
 8007512:	4689      	mov	r9, r1
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	d124      	bne.n	8007564 <_dtoa_r+0x60c>
 800751a:	4b1b      	ldr	r3, [pc, #108]	; (8007588 <_dtoa_r+0x630>)
 800751c:	4650      	mov	r0, sl
 800751e:	4659      	mov	r1, fp
 8007520:	f7f8 fed4 	bl	80002cc <__adddf3>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f9 fb14 	bl	8000b58 <__aeabi_dcmpgt>
 8007530:	2800      	cmp	r0, #0
 8007532:	d173      	bne.n	800761c <_dtoa_r+0x6c4>
 8007534:	4652      	mov	r2, sl
 8007536:	465b      	mov	r3, fp
 8007538:	4913      	ldr	r1, [pc, #76]	; (8007588 <_dtoa_r+0x630>)
 800753a:	2000      	movs	r0, #0
 800753c:	f7f8 fec4 	bl	80002c8 <__aeabi_dsub>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4640      	mov	r0, r8
 8007546:	4649      	mov	r1, r9
 8007548:	f7f9 fae8 	bl	8000b1c <__aeabi_dcmplt>
 800754c:	2800      	cmp	r0, #0
 800754e:	f43f af35 	beq.w	80073bc <_dtoa_r+0x464>
 8007552:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007554:	1e6b      	subs	r3, r5, #1
 8007556:	930f      	str	r3, [sp, #60]	; 0x3c
 8007558:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800755c:	2b30      	cmp	r3, #48	; 0x30
 800755e:	d0f8      	beq.n	8007552 <_dtoa_r+0x5fa>
 8007560:	9700      	str	r7, [sp, #0]
 8007562:	e049      	b.n	80075f8 <_dtoa_r+0x6a0>
 8007564:	4b05      	ldr	r3, [pc, #20]	; (800757c <_dtoa_r+0x624>)
 8007566:	f7f9 f867 	bl	8000638 <__aeabi_dmul>
 800756a:	4680      	mov	r8, r0
 800756c:	4689      	mov	r9, r1
 800756e:	e7bd      	b.n	80074ec <_dtoa_r+0x594>
 8007570:	0800bb00 	.word	0x0800bb00
 8007574:	0800bad8 	.word	0x0800bad8
 8007578:	3ff00000 	.word	0x3ff00000
 800757c:	40240000 	.word	0x40240000
 8007580:	401c0000 	.word	0x401c0000
 8007584:	40140000 	.word	0x40140000
 8007588:	3fe00000 	.word	0x3fe00000
 800758c:	9d01      	ldr	r5, [sp, #4]
 800758e:	4656      	mov	r6, sl
 8007590:	465f      	mov	r7, fp
 8007592:	4642      	mov	r2, r8
 8007594:	464b      	mov	r3, r9
 8007596:	4630      	mov	r0, r6
 8007598:	4639      	mov	r1, r7
 800759a:	f7f9 f977 	bl	800088c <__aeabi_ddiv>
 800759e:	f7f9 fafb 	bl	8000b98 <__aeabi_d2iz>
 80075a2:	4682      	mov	sl, r0
 80075a4:	f7f8 ffde 	bl	8000564 <__aeabi_i2d>
 80075a8:	4642      	mov	r2, r8
 80075aa:	464b      	mov	r3, r9
 80075ac:	f7f9 f844 	bl	8000638 <__aeabi_dmul>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4630      	mov	r0, r6
 80075b6:	4639      	mov	r1, r7
 80075b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80075bc:	f7f8 fe84 	bl	80002c8 <__aeabi_dsub>
 80075c0:	f805 6b01 	strb.w	r6, [r5], #1
 80075c4:	9e01      	ldr	r6, [sp, #4]
 80075c6:	9f03      	ldr	r7, [sp, #12]
 80075c8:	1bae      	subs	r6, r5, r6
 80075ca:	42b7      	cmp	r7, r6
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	d135      	bne.n	800763e <_dtoa_r+0x6e6>
 80075d2:	f7f8 fe7b 	bl	80002cc <__adddf3>
 80075d6:	4642      	mov	r2, r8
 80075d8:	464b      	mov	r3, r9
 80075da:	4606      	mov	r6, r0
 80075dc:	460f      	mov	r7, r1
 80075de:	f7f9 fabb 	bl	8000b58 <__aeabi_dcmpgt>
 80075e2:	b9d0      	cbnz	r0, 800761a <_dtoa_r+0x6c2>
 80075e4:	4642      	mov	r2, r8
 80075e6:	464b      	mov	r3, r9
 80075e8:	4630      	mov	r0, r6
 80075ea:	4639      	mov	r1, r7
 80075ec:	f7f9 fa8c 	bl	8000b08 <__aeabi_dcmpeq>
 80075f0:	b110      	cbz	r0, 80075f8 <_dtoa_r+0x6a0>
 80075f2:	f01a 0f01 	tst.w	sl, #1
 80075f6:	d110      	bne.n	800761a <_dtoa_r+0x6c2>
 80075f8:	4620      	mov	r0, r4
 80075fa:	ee18 1a10 	vmov	r1, s16
 80075fe:	f000 fd13 	bl	8008028 <_Bfree>
 8007602:	2300      	movs	r3, #0
 8007604:	9800      	ldr	r0, [sp, #0]
 8007606:	702b      	strb	r3, [r5, #0]
 8007608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800760a:	3001      	adds	r0, #1
 800760c:	6018      	str	r0, [r3, #0]
 800760e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007610:	2b00      	cmp	r3, #0
 8007612:	f43f acf1 	beq.w	8006ff8 <_dtoa_r+0xa0>
 8007616:	601d      	str	r5, [r3, #0]
 8007618:	e4ee      	b.n	8006ff8 <_dtoa_r+0xa0>
 800761a:	9f00      	ldr	r7, [sp, #0]
 800761c:	462b      	mov	r3, r5
 800761e:	461d      	mov	r5, r3
 8007620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007624:	2a39      	cmp	r2, #57	; 0x39
 8007626:	d106      	bne.n	8007636 <_dtoa_r+0x6de>
 8007628:	9a01      	ldr	r2, [sp, #4]
 800762a:	429a      	cmp	r2, r3
 800762c:	d1f7      	bne.n	800761e <_dtoa_r+0x6c6>
 800762e:	9901      	ldr	r1, [sp, #4]
 8007630:	2230      	movs	r2, #48	; 0x30
 8007632:	3701      	adds	r7, #1
 8007634:	700a      	strb	r2, [r1, #0]
 8007636:	781a      	ldrb	r2, [r3, #0]
 8007638:	3201      	adds	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]
 800763c:	e790      	b.n	8007560 <_dtoa_r+0x608>
 800763e:	4ba6      	ldr	r3, [pc, #664]	; (80078d8 <_dtoa_r+0x980>)
 8007640:	2200      	movs	r2, #0
 8007642:	f7f8 fff9 	bl	8000638 <__aeabi_dmul>
 8007646:	2200      	movs	r2, #0
 8007648:	2300      	movs	r3, #0
 800764a:	4606      	mov	r6, r0
 800764c:	460f      	mov	r7, r1
 800764e:	f7f9 fa5b 	bl	8000b08 <__aeabi_dcmpeq>
 8007652:	2800      	cmp	r0, #0
 8007654:	d09d      	beq.n	8007592 <_dtoa_r+0x63a>
 8007656:	e7cf      	b.n	80075f8 <_dtoa_r+0x6a0>
 8007658:	9a08      	ldr	r2, [sp, #32]
 800765a:	2a00      	cmp	r2, #0
 800765c:	f000 80d7 	beq.w	800780e <_dtoa_r+0x8b6>
 8007660:	9a06      	ldr	r2, [sp, #24]
 8007662:	2a01      	cmp	r2, #1
 8007664:	f300 80ba 	bgt.w	80077dc <_dtoa_r+0x884>
 8007668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800766a:	2a00      	cmp	r2, #0
 800766c:	f000 80b2 	beq.w	80077d4 <_dtoa_r+0x87c>
 8007670:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007674:	9e07      	ldr	r6, [sp, #28]
 8007676:	9d04      	ldr	r5, [sp, #16]
 8007678:	9a04      	ldr	r2, [sp, #16]
 800767a:	441a      	add	r2, r3
 800767c:	9204      	str	r2, [sp, #16]
 800767e:	9a05      	ldr	r2, [sp, #20]
 8007680:	2101      	movs	r1, #1
 8007682:	441a      	add	r2, r3
 8007684:	4620      	mov	r0, r4
 8007686:	9205      	str	r2, [sp, #20]
 8007688:	f000 fd86 	bl	8008198 <__i2b>
 800768c:	4607      	mov	r7, r0
 800768e:	2d00      	cmp	r5, #0
 8007690:	dd0c      	ble.n	80076ac <_dtoa_r+0x754>
 8007692:	9b05      	ldr	r3, [sp, #20]
 8007694:	2b00      	cmp	r3, #0
 8007696:	dd09      	ble.n	80076ac <_dtoa_r+0x754>
 8007698:	42ab      	cmp	r3, r5
 800769a:	9a04      	ldr	r2, [sp, #16]
 800769c:	bfa8      	it	ge
 800769e:	462b      	movge	r3, r5
 80076a0:	1ad2      	subs	r2, r2, r3
 80076a2:	9204      	str	r2, [sp, #16]
 80076a4:	9a05      	ldr	r2, [sp, #20]
 80076a6:	1aed      	subs	r5, r5, r3
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	9305      	str	r3, [sp, #20]
 80076ac:	9b07      	ldr	r3, [sp, #28]
 80076ae:	b31b      	cbz	r3, 80076f8 <_dtoa_r+0x7a0>
 80076b0:	9b08      	ldr	r3, [sp, #32]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 80af 	beq.w	8007816 <_dtoa_r+0x8be>
 80076b8:	2e00      	cmp	r6, #0
 80076ba:	dd13      	ble.n	80076e4 <_dtoa_r+0x78c>
 80076bc:	4639      	mov	r1, r7
 80076be:	4632      	mov	r2, r6
 80076c0:	4620      	mov	r0, r4
 80076c2:	f000 fe29 	bl	8008318 <__pow5mult>
 80076c6:	ee18 2a10 	vmov	r2, s16
 80076ca:	4601      	mov	r1, r0
 80076cc:	4607      	mov	r7, r0
 80076ce:	4620      	mov	r0, r4
 80076d0:	f000 fd78 	bl	80081c4 <__multiply>
 80076d4:	ee18 1a10 	vmov	r1, s16
 80076d8:	4680      	mov	r8, r0
 80076da:	4620      	mov	r0, r4
 80076dc:	f000 fca4 	bl	8008028 <_Bfree>
 80076e0:	ee08 8a10 	vmov	s16, r8
 80076e4:	9b07      	ldr	r3, [sp, #28]
 80076e6:	1b9a      	subs	r2, r3, r6
 80076e8:	d006      	beq.n	80076f8 <_dtoa_r+0x7a0>
 80076ea:	ee18 1a10 	vmov	r1, s16
 80076ee:	4620      	mov	r0, r4
 80076f0:	f000 fe12 	bl	8008318 <__pow5mult>
 80076f4:	ee08 0a10 	vmov	s16, r0
 80076f8:	2101      	movs	r1, #1
 80076fa:	4620      	mov	r0, r4
 80076fc:	f000 fd4c 	bl	8008198 <__i2b>
 8007700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	4606      	mov	r6, r0
 8007706:	f340 8088 	ble.w	800781a <_dtoa_r+0x8c2>
 800770a:	461a      	mov	r2, r3
 800770c:	4601      	mov	r1, r0
 800770e:	4620      	mov	r0, r4
 8007710:	f000 fe02 	bl	8008318 <__pow5mult>
 8007714:	9b06      	ldr	r3, [sp, #24]
 8007716:	2b01      	cmp	r3, #1
 8007718:	4606      	mov	r6, r0
 800771a:	f340 8081 	ble.w	8007820 <_dtoa_r+0x8c8>
 800771e:	f04f 0800 	mov.w	r8, #0
 8007722:	6933      	ldr	r3, [r6, #16]
 8007724:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007728:	6918      	ldr	r0, [r3, #16]
 800772a:	f000 fce5 	bl	80080f8 <__hi0bits>
 800772e:	f1c0 0020 	rsb	r0, r0, #32
 8007732:	9b05      	ldr	r3, [sp, #20]
 8007734:	4418      	add	r0, r3
 8007736:	f010 001f 	ands.w	r0, r0, #31
 800773a:	f000 8092 	beq.w	8007862 <_dtoa_r+0x90a>
 800773e:	f1c0 0320 	rsb	r3, r0, #32
 8007742:	2b04      	cmp	r3, #4
 8007744:	f340 808a 	ble.w	800785c <_dtoa_r+0x904>
 8007748:	f1c0 001c 	rsb	r0, r0, #28
 800774c:	9b04      	ldr	r3, [sp, #16]
 800774e:	4403      	add	r3, r0
 8007750:	9304      	str	r3, [sp, #16]
 8007752:	9b05      	ldr	r3, [sp, #20]
 8007754:	4403      	add	r3, r0
 8007756:	4405      	add	r5, r0
 8007758:	9305      	str	r3, [sp, #20]
 800775a:	9b04      	ldr	r3, [sp, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	dd07      	ble.n	8007770 <_dtoa_r+0x818>
 8007760:	ee18 1a10 	vmov	r1, s16
 8007764:	461a      	mov	r2, r3
 8007766:	4620      	mov	r0, r4
 8007768:	f000 fe30 	bl	80083cc <__lshift>
 800776c:	ee08 0a10 	vmov	s16, r0
 8007770:	9b05      	ldr	r3, [sp, #20]
 8007772:	2b00      	cmp	r3, #0
 8007774:	dd05      	ble.n	8007782 <_dtoa_r+0x82a>
 8007776:	4631      	mov	r1, r6
 8007778:	461a      	mov	r2, r3
 800777a:	4620      	mov	r0, r4
 800777c:	f000 fe26 	bl	80083cc <__lshift>
 8007780:	4606      	mov	r6, r0
 8007782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007784:	2b00      	cmp	r3, #0
 8007786:	d06e      	beq.n	8007866 <_dtoa_r+0x90e>
 8007788:	ee18 0a10 	vmov	r0, s16
 800778c:	4631      	mov	r1, r6
 800778e:	f000 fe8d 	bl	80084ac <__mcmp>
 8007792:	2800      	cmp	r0, #0
 8007794:	da67      	bge.n	8007866 <_dtoa_r+0x90e>
 8007796:	9b00      	ldr	r3, [sp, #0]
 8007798:	3b01      	subs	r3, #1
 800779a:	ee18 1a10 	vmov	r1, s16
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	220a      	movs	r2, #10
 80077a2:	2300      	movs	r3, #0
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fc61 	bl	800806c <__multadd>
 80077aa:	9b08      	ldr	r3, [sp, #32]
 80077ac:	ee08 0a10 	vmov	s16, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 81b1 	beq.w	8007b18 <_dtoa_r+0xbc0>
 80077b6:	2300      	movs	r3, #0
 80077b8:	4639      	mov	r1, r7
 80077ba:	220a      	movs	r2, #10
 80077bc:	4620      	mov	r0, r4
 80077be:	f000 fc55 	bl	800806c <__multadd>
 80077c2:	9b02      	ldr	r3, [sp, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	4607      	mov	r7, r0
 80077c8:	f300 808e 	bgt.w	80078e8 <_dtoa_r+0x990>
 80077cc:	9b06      	ldr	r3, [sp, #24]
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	dc51      	bgt.n	8007876 <_dtoa_r+0x91e>
 80077d2:	e089      	b.n	80078e8 <_dtoa_r+0x990>
 80077d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80077da:	e74b      	b.n	8007674 <_dtoa_r+0x71c>
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	1e5e      	subs	r6, r3, #1
 80077e0:	9b07      	ldr	r3, [sp, #28]
 80077e2:	42b3      	cmp	r3, r6
 80077e4:	bfbf      	itttt	lt
 80077e6:	9b07      	ldrlt	r3, [sp, #28]
 80077e8:	9607      	strlt	r6, [sp, #28]
 80077ea:	1af2      	sublt	r2, r6, r3
 80077ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80077ee:	bfb6      	itet	lt
 80077f0:	189b      	addlt	r3, r3, r2
 80077f2:	1b9e      	subge	r6, r3, r6
 80077f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	bfb8      	it	lt
 80077fa:	2600      	movlt	r6, #0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	bfb7      	itett	lt
 8007800:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007804:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007808:	1a9d      	sublt	r5, r3, r2
 800780a:	2300      	movlt	r3, #0
 800780c:	e734      	b.n	8007678 <_dtoa_r+0x720>
 800780e:	9e07      	ldr	r6, [sp, #28]
 8007810:	9d04      	ldr	r5, [sp, #16]
 8007812:	9f08      	ldr	r7, [sp, #32]
 8007814:	e73b      	b.n	800768e <_dtoa_r+0x736>
 8007816:	9a07      	ldr	r2, [sp, #28]
 8007818:	e767      	b.n	80076ea <_dtoa_r+0x792>
 800781a:	9b06      	ldr	r3, [sp, #24]
 800781c:	2b01      	cmp	r3, #1
 800781e:	dc18      	bgt.n	8007852 <_dtoa_r+0x8fa>
 8007820:	f1ba 0f00 	cmp.w	sl, #0
 8007824:	d115      	bne.n	8007852 <_dtoa_r+0x8fa>
 8007826:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800782a:	b993      	cbnz	r3, 8007852 <_dtoa_r+0x8fa>
 800782c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007830:	0d1b      	lsrs	r3, r3, #20
 8007832:	051b      	lsls	r3, r3, #20
 8007834:	b183      	cbz	r3, 8007858 <_dtoa_r+0x900>
 8007836:	9b04      	ldr	r3, [sp, #16]
 8007838:	3301      	adds	r3, #1
 800783a:	9304      	str	r3, [sp, #16]
 800783c:	9b05      	ldr	r3, [sp, #20]
 800783e:	3301      	adds	r3, #1
 8007840:	9305      	str	r3, [sp, #20]
 8007842:	f04f 0801 	mov.w	r8, #1
 8007846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007848:	2b00      	cmp	r3, #0
 800784a:	f47f af6a 	bne.w	8007722 <_dtoa_r+0x7ca>
 800784e:	2001      	movs	r0, #1
 8007850:	e76f      	b.n	8007732 <_dtoa_r+0x7da>
 8007852:	f04f 0800 	mov.w	r8, #0
 8007856:	e7f6      	b.n	8007846 <_dtoa_r+0x8ee>
 8007858:	4698      	mov	r8, r3
 800785a:	e7f4      	b.n	8007846 <_dtoa_r+0x8ee>
 800785c:	f43f af7d 	beq.w	800775a <_dtoa_r+0x802>
 8007860:	4618      	mov	r0, r3
 8007862:	301c      	adds	r0, #28
 8007864:	e772      	b.n	800774c <_dtoa_r+0x7f4>
 8007866:	9b03      	ldr	r3, [sp, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	dc37      	bgt.n	80078dc <_dtoa_r+0x984>
 800786c:	9b06      	ldr	r3, [sp, #24]
 800786e:	2b02      	cmp	r3, #2
 8007870:	dd34      	ble.n	80078dc <_dtoa_r+0x984>
 8007872:	9b03      	ldr	r3, [sp, #12]
 8007874:	9302      	str	r3, [sp, #8]
 8007876:	9b02      	ldr	r3, [sp, #8]
 8007878:	b96b      	cbnz	r3, 8007896 <_dtoa_r+0x93e>
 800787a:	4631      	mov	r1, r6
 800787c:	2205      	movs	r2, #5
 800787e:	4620      	mov	r0, r4
 8007880:	f000 fbf4 	bl	800806c <__multadd>
 8007884:	4601      	mov	r1, r0
 8007886:	4606      	mov	r6, r0
 8007888:	ee18 0a10 	vmov	r0, s16
 800788c:	f000 fe0e 	bl	80084ac <__mcmp>
 8007890:	2800      	cmp	r0, #0
 8007892:	f73f adbb 	bgt.w	800740c <_dtoa_r+0x4b4>
 8007896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007898:	9d01      	ldr	r5, [sp, #4]
 800789a:	43db      	mvns	r3, r3
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	f04f 0800 	mov.w	r8, #0
 80078a2:	4631      	mov	r1, r6
 80078a4:	4620      	mov	r0, r4
 80078a6:	f000 fbbf 	bl	8008028 <_Bfree>
 80078aa:	2f00      	cmp	r7, #0
 80078ac:	f43f aea4 	beq.w	80075f8 <_dtoa_r+0x6a0>
 80078b0:	f1b8 0f00 	cmp.w	r8, #0
 80078b4:	d005      	beq.n	80078c2 <_dtoa_r+0x96a>
 80078b6:	45b8      	cmp	r8, r7
 80078b8:	d003      	beq.n	80078c2 <_dtoa_r+0x96a>
 80078ba:	4641      	mov	r1, r8
 80078bc:	4620      	mov	r0, r4
 80078be:	f000 fbb3 	bl	8008028 <_Bfree>
 80078c2:	4639      	mov	r1, r7
 80078c4:	4620      	mov	r0, r4
 80078c6:	f000 fbaf 	bl	8008028 <_Bfree>
 80078ca:	e695      	b.n	80075f8 <_dtoa_r+0x6a0>
 80078cc:	2600      	movs	r6, #0
 80078ce:	4637      	mov	r7, r6
 80078d0:	e7e1      	b.n	8007896 <_dtoa_r+0x93e>
 80078d2:	9700      	str	r7, [sp, #0]
 80078d4:	4637      	mov	r7, r6
 80078d6:	e599      	b.n	800740c <_dtoa_r+0x4b4>
 80078d8:	40240000 	.word	0x40240000
 80078dc:	9b08      	ldr	r3, [sp, #32]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 80ca 	beq.w	8007a78 <_dtoa_r+0xb20>
 80078e4:	9b03      	ldr	r3, [sp, #12]
 80078e6:	9302      	str	r3, [sp, #8]
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	dd05      	ble.n	80078f8 <_dtoa_r+0x9a0>
 80078ec:	4639      	mov	r1, r7
 80078ee:	462a      	mov	r2, r5
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fd6b 	bl	80083cc <__lshift>
 80078f6:	4607      	mov	r7, r0
 80078f8:	f1b8 0f00 	cmp.w	r8, #0
 80078fc:	d05b      	beq.n	80079b6 <_dtoa_r+0xa5e>
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	4620      	mov	r0, r4
 8007902:	f000 fb51 	bl	8007fa8 <_Balloc>
 8007906:	4605      	mov	r5, r0
 8007908:	b928      	cbnz	r0, 8007916 <_dtoa_r+0x9be>
 800790a:	4b87      	ldr	r3, [pc, #540]	; (8007b28 <_dtoa_r+0xbd0>)
 800790c:	4602      	mov	r2, r0
 800790e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007912:	f7ff bb3b 	b.w	8006f8c <_dtoa_r+0x34>
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	3202      	adds	r2, #2
 800791a:	0092      	lsls	r2, r2, #2
 800791c:	f107 010c 	add.w	r1, r7, #12
 8007920:	300c      	adds	r0, #12
 8007922:	f000 fb33 	bl	8007f8c <memcpy>
 8007926:	2201      	movs	r2, #1
 8007928:	4629      	mov	r1, r5
 800792a:	4620      	mov	r0, r4
 800792c:	f000 fd4e 	bl	80083cc <__lshift>
 8007930:	9b01      	ldr	r3, [sp, #4]
 8007932:	f103 0901 	add.w	r9, r3, #1
 8007936:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800793a:	4413      	add	r3, r2
 800793c:	9305      	str	r3, [sp, #20]
 800793e:	f00a 0301 	and.w	r3, sl, #1
 8007942:	46b8      	mov	r8, r7
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	4607      	mov	r7, r0
 8007948:	4631      	mov	r1, r6
 800794a:	ee18 0a10 	vmov	r0, s16
 800794e:	f7ff fa75 	bl	8006e3c <quorem>
 8007952:	4641      	mov	r1, r8
 8007954:	9002      	str	r0, [sp, #8]
 8007956:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800795a:	ee18 0a10 	vmov	r0, s16
 800795e:	f000 fda5 	bl	80084ac <__mcmp>
 8007962:	463a      	mov	r2, r7
 8007964:	9003      	str	r0, [sp, #12]
 8007966:	4631      	mov	r1, r6
 8007968:	4620      	mov	r0, r4
 800796a:	f000 fdbb 	bl	80084e4 <__mdiff>
 800796e:	68c2      	ldr	r2, [r0, #12]
 8007970:	f109 3bff 	add.w	fp, r9, #4294967295
 8007974:	4605      	mov	r5, r0
 8007976:	bb02      	cbnz	r2, 80079ba <_dtoa_r+0xa62>
 8007978:	4601      	mov	r1, r0
 800797a:	ee18 0a10 	vmov	r0, s16
 800797e:	f000 fd95 	bl	80084ac <__mcmp>
 8007982:	4602      	mov	r2, r0
 8007984:	4629      	mov	r1, r5
 8007986:	4620      	mov	r0, r4
 8007988:	9207      	str	r2, [sp, #28]
 800798a:	f000 fb4d 	bl	8008028 <_Bfree>
 800798e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007992:	ea43 0102 	orr.w	r1, r3, r2
 8007996:	9b04      	ldr	r3, [sp, #16]
 8007998:	430b      	orrs	r3, r1
 800799a:	464d      	mov	r5, r9
 800799c:	d10f      	bne.n	80079be <_dtoa_r+0xa66>
 800799e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079a2:	d02a      	beq.n	80079fa <_dtoa_r+0xaa2>
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	dd02      	ble.n	80079b0 <_dtoa_r+0xa58>
 80079aa:	9b02      	ldr	r3, [sp, #8]
 80079ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80079b0:	f88b a000 	strb.w	sl, [fp]
 80079b4:	e775      	b.n	80078a2 <_dtoa_r+0x94a>
 80079b6:	4638      	mov	r0, r7
 80079b8:	e7ba      	b.n	8007930 <_dtoa_r+0x9d8>
 80079ba:	2201      	movs	r2, #1
 80079bc:	e7e2      	b.n	8007984 <_dtoa_r+0xa2c>
 80079be:	9b03      	ldr	r3, [sp, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	db04      	blt.n	80079ce <_dtoa_r+0xa76>
 80079c4:	9906      	ldr	r1, [sp, #24]
 80079c6:	430b      	orrs	r3, r1
 80079c8:	9904      	ldr	r1, [sp, #16]
 80079ca:	430b      	orrs	r3, r1
 80079cc:	d122      	bne.n	8007a14 <_dtoa_r+0xabc>
 80079ce:	2a00      	cmp	r2, #0
 80079d0:	ddee      	ble.n	80079b0 <_dtoa_r+0xa58>
 80079d2:	ee18 1a10 	vmov	r1, s16
 80079d6:	2201      	movs	r2, #1
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 fcf7 	bl	80083cc <__lshift>
 80079de:	4631      	mov	r1, r6
 80079e0:	ee08 0a10 	vmov	s16, r0
 80079e4:	f000 fd62 	bl	80084ac <__mcmp>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	dc03      	bgt.n	80079f4 <_dtoa_r+0xa9c>
 80079ec:	d1e0      	bne.n	80079b0 <_dtoa_r+0xa58>
 80079ee:	f01a 0f01 	tst.w	sl, #1
 80079f2:	d0dd      	beq.n	80079b0 <_dtoa_r+0xa58>
 80079f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079f8:	d1d7      	bne.n	80079aa <_dtoa_r+0xa52>
 80079fa:	2339      	movs	r3, #57	; 0x39
 80079fc:	f88b 3000 	strb.w	r3, [fp]
 8007a00:	462b      	mov	r3, r5
 8007a02:	461d      	mov	r5, r3
 8007a04:	3b01      	subs	r3, #1
 8007a06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a0a:	2a39      	cmp	r2, #57	; 0x39
 8007a0c:	d071      	beq.n	8007af2 <_dtoa_r+0xb9a>
 8007a0e:	3201      	adds	r2, #1
 8007a10:	701a      	strb	r2, [r3, #0]
 8007a12:	e746      	b.n	80078a2 <_dtoa_r+0x94a>
 8007a14:	2a00      	cmp	r2, #0
 8007a16:	dd07      	ble.n	8007a28 <_dtoa_r+0xad0>
 8007a18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a1c:	d0ed      	beq.n	80079fa <_dtoa_r+0xaa2>
 8007a1e:	f10a 0301 	add.w	r3, sl, #1
 8007a22:	f88b 3000 	strb.w	r3, [fp]
 8007a26:	e73c      	b.n	80078a2 <_dtoa_r+0x94a>
 8007a28:	9b05      	ldr	r3, [sp, #20]
 8007a2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007a2e:	4599      	cmp	r9, r3
 8007a30:	d047      	beq.n	8007ac2 <_dtoa_r+0xb6a>
 8007a32:	ee18 1a10 	vmov	r1, s16
 8007a36:	2300      	movs	r3, #0
 8007a38:	220a      	movs	r2, #10
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 fb16 	bl	800806c <__multadd>
 8007a40:	45b8      	cmp	r8, r7
 8007a42:	ee08 0a10 	vmov	s16, r0
 8007a46:	f04f 0300 	mov.w	r3, #0
 8007a4a:	f04f 020a 	mov.w	r2, #10
 8007a4e:	4641      	mov	r1, r8
 8007a50:	4620      	mov	r0, r4
 8007a52:	d106      	bne.n	8007a62 <_dtoa_r+0xb0a>
 8007a54:	f000 fb0a 	bl	800806c <__multadd>
 8007a58:	4680      	mov	r8, r0
 8007a5a:	4607      	mov	r7, r0
 8007a5c:	f109 0901 	add.w	r9, r9, #1
 8007a60:	e772      	b.n	8007948 <_dtoa_r+0x9f0>
 8007a62:	f000 fb03 	bl	800806c <__multadd>
 8007a66:	4639      	mov	r1, r7
 8007a68:	4680      	mov	r8, r0
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	220a      	movs	r2, #10
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f000 fafc 	bl	800806c <__multadd>
 8007a74:	4607      	mov	r7, r0
 8007a76:	e7f1      	b.n	8007a5c <_dtoa_r+0xb04>
 8007a78:	9b03      	ldr	r3, [sp, #12]
 8007a7a:	9302      	str	r3, [sp, #8]
 8007a7c:	9d01      	ldr	r5, [sp, #4]
 8007a7e:	ee18 0a10 	vmov	r0, s16
 8007a82:	4631      	mov	r1, r6
 8007a84:	f7ff f9da 	bl	8006e3c <quorem>
 8007a88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a8c:	9b01      	ldr	r3, [sp, #4]
 8007a8e:	f805 ab01 	strb.w	sl, [r5], #1
 8007a92:	1aea      	subs	r2, r5, r3
 8007a94:	9b02      	ldr	r3, [sp, #8]
 8007a96:	4293      	cmp	r3, r2
 8007a98:	dd09      	ble.n	8007aae <_dtoa_r+0xb56>
 8007a9a:	ee18 1a10 	vmov	r1, s16
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	220a      	movs	r2, #10
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 fae2 	bl	800806c <__multadd>
 8007aa8:	ee08 0a10 	vmov	s16, r0
 8007aac:	e7e7      	b.n	8007a7e <_dtoa_r+0xb26>
 8007aae:	9b02      	ldr	r3, [sp, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bfc8      	it	gt
 8007ab4:	461d      	movgt	r5, r3
 8007ab6:	9b01      	ldr	r3, [sp, #4]
 8007ab8:	bfd8      	it	le
 8007aba:	2501      	movle	r5, #1
 8007abc:	441d      	add	r5, r3
 8007abe:	f04f 0800 	mov.w	r8, #0
 8007ac2:	ee18 1a10 	vmov	r1, s16
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f000 fc7f 	bl	80083cc <__lshift>
 8007ace:	4631      	mov	r1, r6
 8007ad0:	ee08 0a10 	vmov	s16, r0
 8007ad4:	f000 fcea 	bl	80084ac <__mcmp>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	dc91      	bgt.n	8007a00 <_dtoa_r+0xaa8>
 8007adc:	d102      	bne.n	8007ae4 <_dtoa_r+0xb8c>
 8007ade:	f01a 0f01 	tst.w	sl, #1
 8007ae2:	d18d      	bne.n	8007a00 <_dtoa_r+0xaa8>
 8007ae4:	462b      	mov	r3, r5
 8007ae6:	461d      	mov	r5, r3
 8007ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007aec:	2a30      	cmp	r2, #48	; 0x30
 8007aee:	d0fa      	beq.n	8007ae6 <_dtoa_r+0xb8e>
 8007af0:	e6d7      	b.n	80078a2 <_dtoa_r+0x94a>
 8007af2:	9a01      	ldr	r2, [sp, #4]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d184      	bne.n	8007a02 <_dtoa_r+0xaaa>
 8007af8:	9b00      	ldr	r3, [sp, #0]
 8007afa:	3301      	adds	r3, #1
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	2331      	movs	r3, #49	; 0x31
 8007b00:	7013      	strb	r3, [r2, #0]
 8007b02:	e6ce      	b.n	80078a2 <_dtoa_r+0x94a>
 8007b04:	4b09      	ldr	r3, [pc, #36]	; (8007b2c <_dtoa_r+0xbd4>)
 8007b06:	f7ff ba95 	b.w	8007034 <_dtoa_r+0xdc>
 8007b0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f47f aa6e 	bne.w	8006fee <_dtoa_r+0x96>
 8007b12:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <_dtoa_r+0xbd8>)
 8007b14:	f7ff ba8e 	b.w	8007034 <_dtoa_r+0xdc>
 8007b18:	9b02      	ldr	r3, [sp, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	dcae      	bgt.n	8007a7c <_dtoa_r+0xb24>
 8007b1e:	9b06      	ldr	r3, [sp, #24]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	f73f aea8 	bgt.w	8007876 <_dtoa_r+0x91e>
 8007b26:	e7a9      	b.n	8007a7c <_dtoa_r+0xb24>
 8007b28:	0800ba0b 	.word	0x0800ba0b
 8007b2c:	0800b968 	.word	0x0800b968
 8007b30:	0800b98c 	.word	0x0800b98c

08007b34 <__sflush_r>:
 8007b34:	898a      	ldrh	r2, [r1, #12]
 8007b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	0710      	lsls	r0, r2, #28
 8007b3e:	460c      	mov	r4, r1
 8007b40:	d458      	bmi.n	8007bf4 <__sflush_r+0xc0>
 8007b42:	684b      	ldr	r3, [r1, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	dc05      	bgt.n	8007b54 <__sflush_r+0x20>
 8007b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	dc02      	bgt.n	8007b54 <__sflush_r+0x20>
 8007b4e:	2000      	movs	r0, #0
 8007b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b56:	2e00      	cmp	r6, #0
 8007b58:	d0f9      	beq.n	8007b4e <__sflush_r+0x1a>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b60:	682f      	ldr	r7, [r5, #0]
 8007b62:	602b      	str	r3, [r5, #0]
 8007b64:	d032      	beq.n	8007bcc <__sflush_r+0x98>
 8007b66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	075a      	lsls	r2, r3, #29
 8007b6c:	d505      	bpl.n	8007b7a <__sflush_r+0x46>
 8007b6e:	6863      	ldr	r3, [r4, #4]
 8007b70:	1ac0      	subs	r0, r0, r3
 8007b72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b74:	b10b      	cbz	r3, 8007b7a <__sflush_r+0x46>
 8007b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b78:	1ac0      	subs	r0, r0, r3
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b80:	6a21      	ldr	r1, [r4, #32]
 8007b82:	4628      	mov	r0, r5
 8007b84:	47b0      	blx	r6
 8007b86:	1c43      	adds	r3, r0, #1
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	d106      	bne.n	8007b9a <__sflush_r+0x66>
 8007b8c:	6829      	ldr	r1, [r5, #0]
 8007b8e:	291d      	cmp	r1, #29
 8007b90:	d82c      	bhi.n	8007bec <__sflush_r+0xb8>
 8007b92:	4a2a      	ldr	r2, [pc, #168]	; (8007c3c <__sflush_r+0x108>)
 8007b94:	40ca      	lsrs	r2, r1
 8007b96:	07d6      	lsls	r6, r2, #31
 8007b98:	d528      	bpl.n	8007bec <__sflush_r+0xb8>
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	6062      	str	r2, [r4, #4]
 8007b9e:	04d9      	lsls	r1, r3, #19
 8007ba0:	6922      	ldr	r2, [r4, #16]
 8007ba2:	6022      	str	r2, [r4, #0]
 8007ba4:	d504      	bpl.n	8007bb0 <__sflush_r+0x7c>
 8007ba6:	1c42      	adds	r2, r0, #1
 8007ba8:	d101      	bne.n	8007bae <__sflush_r+0x7a>
 8007baa:	682b      	ldr	r3, [r5, #0]
 8007bac:	b903      	cbnz	r3, 8007bb0 <__sflush_r+0x7c>
 8007bae:	6560      	str	r0, [r4, #84]	; 0x54
 8007bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bb2:	602f      	str	r7, [r5, #0]
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d0ca      	beq.n	8007b4e <__sflush_r+0x1a>
 8007bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bbc:	4299      	cmp	r1, r3
 8007bbe:	d002      	beq.n	8007bc6 <__sflush_r+0x92>
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f000 fd8b 	bl	80086dc <_free_r>
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	6360      	str	r0, [r4, #52]	; 0x34
 8007bca:	e7c1      	b.n	8007b50 <__sflush_r+0x1c>
 8007bcc:	6a21      	ldr	r1, [r4, #32]
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	47b0      	blx	r6
 8007bd4:	1c41      	adds	r1, r0, #1
 8007bd6:	d1c7      	bne.n	8007b68 <__sflush_r+0x34>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0c4      	beq.n	8007b68 <__sflush_r+0x34>
 8007bde:	2b1d      	cmp	r3, #29
 8007be0:	d001      	beq.n	8007be6 <__sflush_r+0xb2>
 8007be2:	2b16      	cmp	r3, #22
 8007be4:	d101      	bne.n	8007bea <__sflush_r+0xb6>
 8007be6:	602f      	str	r7, [r5, #0]
 8007be8:	e7b1      	b.n	8007b4e <__sflush_r+0x1a>
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf0:	81a3      	strh	r3, [r4, #12]
 8007bf2:	e7ad      	b.n	8007b50 <__sflush_r+0x1c>
 8007bf4:	690f      	ldr	r7, [r1, #16]
 8007bf6:	2f00      	cmp	r7, #0
 8007bf8:	d0a9      	beq.n	8007b4e <__sflush_r+0x1a>
 8007bfa:	0793      	lsls	r3, r2, #30
 8007bfc:	680e      	ldr	r6, [r1, #0]
 8007bfe:	bf08      	it	eq
 8007c00:	694b      	ldreq	r3, [r1, #20]
 8007c02:	600f      	str	r7, [r1, #0]
 8007c04:	bf18      	it	ne
 8007c06:	2300      	movne	r3, #0
 8007c08:	eba6 0807 	sub.w	r8, r6, r7
 8007c0c:	608b      	str	r3, [r1, #8]
 8007c0e:	f1b8 0f00 	cmp.w	r8, #0
 8007c12:	dd9c      	ble.n	8007b4e <__sflush_r+0x1a>
 8007c14:	6a21      	ldr	r1, [r4, #32]
 8007c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c18:	4643      	mov	r3, r8
 8007c1a:	463a      	mov	r2, r7
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b0      	blx	r6
 8007c20:	2800      	cmp	r0, #0
 8007c22:	dc06      	bgt.n	8007c32 <__sflush_r+0xfe>
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c2a:	81a3      	strh	r3, [r4, #12]
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c30:	e78e      	b.n	8007b50 <__sflush_r+0x1c>
 8007c32:	4407      	add	r7, r0
 8007c34:	eba8 0800 	sub.w	r8, r8, r0
 8007c38:	e7e9      	b.n	8007c0e <__sflush_r+0xda>
 8007c3a:	bf00      	nop
 8007c3c:	20400001 	.word	0x20400001

08007c40 <_fflush_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	690b      	ldr	r3, [r1, #16]
 8007c44:	4605      	mov	r5, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	b913      	cbnz	r3, 8007c50 <_fflush_r+0x10>
 8007c4a:	2500      	movs	r5, #0
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	b118      	cbz	r0, 8007c5a <_fflush_r+0x1a>
 8007c52:	6983      	ldr	r3, [r0, #24]
 8007c54:	b90b      	cbnz	r3, 8007c5a <_fflush_r+0x1a>
 8007c56:	f000 f887 	bl	8007d68 <__sinit>
 8007c5a:	4b14      	ldr	r3, [pc, #80]	; (8007cac <_fflush_r+0x6c>)
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	d11b      	bne.n	8007c98 <_fflush_r+0x58>
 8007c60:	686c      	ldr	r4, [r5, #4]
 8007c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d0ef      	beq.n	8007c4a <_fflush_r+0xa>
 8007c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c6c:	07d0      	lsls	r0, r2, #31
 8007c6e:	d404      	bmi.n	8007c7a <_fflush_r+0x3a>
 8007c70:	0599      	lsls	r1, r3, #22
 8007c72:	d402      	bmi.n	8007c7a <_fflush_r+0x3a>
 8007c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c76:	f000 f91a 	bl	8007eae <__retarget_lock_acquire_recursive>
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	f7ff ff59 	bl	8007b34 <__sflush_r>
 8007c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c84:	07da      	lsls	r2, r3, #31
 8007c86:	4605      	mov	r5, r0
 8007c88:	d4e0      	bmi.n	8007c4c <_fflush_r+0xc>
 8007c8a:	89a3      	ldrh	r3, [r4, #12]
 8007c8c:	059b      	lsls	r3, r3, #22
 8007c8e:	d4dd      	bmi.n	8007c4c <_fflush_r+0xc>
 8007c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c92:	f000 f90d 	bl	8007eb0 <__retarget_lock_release_recursive>
 8007c96:	e7d9      	b.n	8007c4c <_fflush_r+0xc>
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <_fflush_r+0x70>)
 8007c9a:	429c      	cmp	r4, r3
 8007c9c:	d101      	bne.n	8007ca2 <_fflush_r+0x62>
 8007c9e:	68ac      	ldr	r4, [r5, #8]
 8007ca0:	e7df      	b.n	8007c62 <_fflush_r+0x22>
 8007ca2:	4b04      	ldr	r3, [pc, #16]	; (8007cb4 <_fflush_r+0x74>)
 8007ca4:	429c      	cmp	r4, r3
 8007ca6:	bf08      	it	eq
 8007ca8:	68ec      	ldreq	r4, [r5, #12]
 8007caa:	e7da      	b.n	8007c62 <_fflush_r+0x22>
 8007cac:	0800ba3c 	.word	0x0800ba3c
 8007cb0:	0800ba5c 	.word	0x0800ba5c
 8007cb4:	0800ba1c 	.word	0x0800ba1c

08007cb8 <std>:
 8007cb8:	2300      	movs	r3, #0
 8007cba:	b510      	push	{r4, lr}
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cc6:	6083      	str	r3, [r0, #8]
 8007cc8:	8181      	strh	r1, [r0, #12]
 8007cca:	6643      	str	r3, [r0, #100]	; 0x64
 8007ccc:	81c2      	strh	r2, [r0, #14]
 8007cce:	6183      	str	r3, [r0, #24]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	2208      	movs	r2, #8
 8007cd4:	305c      	adds	r0, #92	; 0x5c
 8007cd6:	f7fe faf1 	bl	80062bc <memset>
 8007cda:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <std+0x38>)
 8007cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8007cde:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <std+0x3c>)
 8007ce0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ce2:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <std+0x40>)
 8007ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ce6:	4b05      	ldr	r3, [pc, #20]	; (8007cfc <std+0x44>)
 8007ce8:	6224      	str	r4, [r4, #32]
 8007cea:	6323      	str	r3, [r4, #48]	; 0x30
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	bf00      	nop
 8007cf0:	08008b71 	.word	0x08008b71
 8007cf4:	08008b93 	.word	0x08008b93
 8007cf8:	08008bcb 	.word	0x08008bcb
 8007cfc:	08008bef 	.word	0x08008bef

08007d00 <_cleanup_r>:
 8007d00:	4901      	ldr	r1, [pc, #4]	; (8007d08 <_cleanup_r+0x8>)
 8007d02:	f000 b8af 	b.w	8007e64 <_fwalk_reent>
 8007d06:	bf00      	nop
 8007d08:	08007c41 	.word	0x08007c41

08007d0c <__sfmoreglue>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	2268      	movs	r2, #104	; 0x68
 8007d10:	1e4d      	subs	r5, r1, #1
 8007d12:	4355      	muls	r5, r2
 8007d14:	460e      	mov	r6, r1
 8007d16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d1a:	f000 fd4b 	bl	80087b4 <_malloc_r>
 8007d1e:	4604      	mov	r4, r0
 8007d20:	b140      	cbz	r0, 8007d34 <__sfmoreglue+0x28>
 8007d22:	2100      	movs	r1, #0
 8007d24:	e9c0 1600 	strd	r1, r6, [r0]
 8007d28:	300c      	adds	r0, #12
 8007d2a:	60a0      	str	r0, [r4, #8]
 8007d2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d30:	f7fe fac4 	bl	80062bc <memset>
 8007d34:	4620      	mov	r0, r4
 8007d36:	bd70      	pop	{r4, r5, r6, pc}

08007d38 <__sfp_lock_acquire>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__sfp_lock_acquire+0x8>)
 8007d3a:	f000 b8b8 	b.w	8007eae <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	2000033d 	.word	0x2000033d

08007d44 <__sfp_lock_release>:
 8007d44:	4801      	ldr	r0, [pc, #4]	; (8007d4c <__sfp_lock_release+0x8>)
 8007d46:	f000 b8b3 	b.w	8007eb0 <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	2000033d 	.word	0x2000033d

08007d50 <__sinit_lock_acquire>:
 8007d50:	4801      	ldr	r0, [pc, #4]	; (8007d58 <__sinit_lock_acquire+0x8>)
 8007d52:	f000 b8ac 	b.w	8007eae <__retarget_lock_acquire_recursive>
 8007d56:	bf00      	nop
 8007d58:	2000033e 	.word	0x2000033e

08007d5c <__sinit_lock_release>:
 8007d5c:	4801      	ldr	r0, [pc, #4]	; (8007d64 <__sinit_lock_release+0x8>)
 8007d5e:	f000 b8a7 	b.w	8007eb0 <__retarget_lock_release_recursive>
 8007d62:	bf00      	nop
 8007d64:	2000033e 	.word	0x2000033e

08007d68 <__sinit>:
 8007d68:	b510      	push	{r4, lr}
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	f7ff fff0 	bl	8007d50 <__sinit_lock_acquire>
 8007d70:	69a3      	ldr	r3, [r4, #24]
 8007d72:	b11b      	cbz	r3, 8007d7c <__sinit+0x14>
 8007d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d78:	f7ff bff0 	b.w	8007d5c <__sinit_lock_release>
 8007d7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d80:	6523      	str	r3, [r4, #80]	; 0x50
 8007d82:	4b13      	ldr	r3, [pc, #76]	; (8007dd0 <__sinit+0x68>)
 8007d84:	4a13      	ldr	r2, [pc, #76]	; (8007dd4 <__sinit+0x6c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d8a:	42a3      	cmp	r3, r4
 8007d8c:	bf04      	itt	eq
 8007d8e:	2301      	moveq	r3, #1
 8007d90:	61a3      	streq	r3, [r4, #24]
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 f820 	bl	8007dd8 <__sfp>
 8007d98:	6060      	str	r0, [r4, #4]
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 f81c 	bl	8007dd8 <__sfp>
 8007da0:	60a0      	str	r0, [r4, #8]
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 f818 	bl	8007dd8 <__sfp>
 8007da8:	2200      	movs	r2, #0
 8007daa:	60e0      	str	r0, [r4, #12]
 8007dac:	2104      	movs	r1, #4
 8007dae:	6860      	ldr	r0, [r4, #4]
 8007db0:	f7ff ff82 	bl	8007cb8 <std>
 8007db4:	68a0      	ldr	r0, [r4, #8]
 8007db6:	2201      	movs	r2, #1
 8007db8:	2109      	movs	r1, #9
 8007dba:	f7ff ff7d 	bl	8007cb8 <std>
 8007dbe:	68e0      	ldr	r0, [r4, #12]
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	2112      	movs	r1, #18
 8007dc4:	f7ff ff78 	bl	8007cb8 <std>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	61a3      	str	r3, [r4, #24]
 8007dcc:	e7d2      	b.n	8007d74 <__sinit+0xc>
 8007dce:	bf00      	nop
 8007dd0:	0800b954 	.word	0x0800b954
 8007dd4:	08007d01 	.word	0x08007d01

08007dd8 <__sfp>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	4607      	mov	r7, r0
 8007ddc:	f7ff ffac 	bl	8007d38 <__sfp_lock_acquire>
 8007de0:	4b1e      	ldr	r3, [pc, #120]	; (8007e5c <__sfp+0x84>)
 8007de2:	681e      	ldr	r6, [r3, #0]
 8007de4:	69b3      	ldr	r3, [r6, #24]
 8007de6:	b913      	cbnz	r3, 8007dee <__sfp+0x16>
 8007de8:	4630      	mov	r0, r6
 8007dea:	f7ff ffbd 	bl	8007d68 <__sinit>
 8007dee:	3648      	adds	r6, #72	; 0x48
 8007df0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	d503      	bpl.n	8007e00 <__sfp+0x28>
 8007df8:	6833      	ldr	r3, [r6, #0]
 8007dfa:	b30b      	cbz	r3, 8007e40 <__sfp+0x68>
 8007dfc:	6836      	ldr	r6, [r6, #0]
 8007dfe:	e7f7      	b.n	8007df0 <__sfp+0x18>
 8007e00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e04:	b9d5      	cbnz	r5, 8007e3c <__sfp+0x64>
 8007e06:	4b16      	ldr	r3, [pc, #88]	; (8007e60 <__sfp+0x88>)
 8007e08:	60e3      	str	r3, [r4, #12]
 8007e0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e0e:	6665      	str	r5, [r4, #100]	; 0x64
 8007e10:	f000 f84c 	bl	8007eac <__retarget_lock_init_recursive>
 8007e14:	f7ff ff96 	bl	8007d44 <__sfp_lock_release>
 8007e18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e20:	6025      	str	r5, [r4, #0]
 8007e22:	61a5      	str	r5, [r4, #24]
 8007e24:	2208      	movs	r2, #8
 8007e26:	4629      	mov	r1, r5
 8007e28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e2c:	f7fe fa46 	bl	80062bc <memset>
 8007e30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e38:	4620      	mov	r0, r4
 8007e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e3c:	3468      	adds	r4, #104	; 0x68
 8007e3e:	e7d9      	b.n	8007df4 <__sfp+0x1c>
 8007e40:	2104      	movs	r1, #4
 8007e42:	4638      	mov	r0, r7
 8007e44:	f7ff ff62 	bl	8007d0c <__sfmoreglue>
 8007e48:	4604      	mov	r4, r0
 8007e4a:	6030      	str	r0, [r6, #0]
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d1d5      	bne.n	8007dfc <__sfp+0x24>
 8007e50:	f7ff ff78 	bl	8007d44 <__sfp_lock_release>
 8007e54:	230c      	movs	r3, #12
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	e7ee      	b.n	8007e38 <__sfp+0x60>
 8007e5a:	bf00      	nop
 8007e5c:	0800b954 	.word	0x0800b954
 8007e60:	ffff0001 	.word	0xffff0001

08007e64 <_fwalk_reent>:
 8007e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e68:	4606      	mov	r6, r0
 8007e6a:	4688      	mov	r8, r1
 8007e6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e70:	2700      	movs	r7, #0
 8007e72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e76:	f1b9 0901 	subs.w	r9, r9, #1
 8007e7a:	d505      	bpl.n	8007e88 <_fwalk_reent+0x24>
 8007e7c:	6824      	ldr	r4, [r4, #0]
 8007e7e:	2c00      	cmp	r4, #0
 8007e80:	d1f7      	bne.n	8007e72 <_fwalk_reent+0xe>
 8007e82:	4638      	mov	r0, r7
 8007e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e88:	89ab      	ldrh	r3, [r5, #12]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d907      	bls.n	8007e9e <_fwalk_reent+0x3a>
 8007e8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e92:	3301      	adds	r3, #1
 8007e94:	d003      	beq.n	8007e9e <_fwalk_reent+0x3a>
 8007e96:	4629      	mov	r1, r5
 8007e98:	4630      	mov	r0, r6
 8007e9a:	47c0      	blx	r8
 8007e9c:	4307      	orrs	r7, r0
 8007e9e:	3568      	adds	r5, #104	; 0x68
 8007ea0:	e7e9      	b.n	8007e76 <_fwalk_reent+0x12>
	...

08007ea4 <_localeconv_r>:
 8007ea4:	4800      	ldr	r0, [pc, #0]	; (8007ea8 <_localeconv_r+0x4>)
 8007ea6:	4770      	bx	lr
 8007ea8:	20000160 	.word	0x20000160

08007eac <__retarget_lock_init_recursive>:
 8007eac:	4770      	bx	lr

08007eae <__retarget_lock_acquire_recursive>:
 8007eae:	4770      	bx	lr

08007eb0 <__retarget_lock_release_recursive>:
 8007eb0:	4770      	bx	lr

08007eb2 <__swhatbuf_r>:
 8007eb2:	b570      	push	{r4, r5, r6, lr}
 8007eb4:	460e      	mov	r6, r1
 8007eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eba:	2900      	cmp	r1, #0
 8007ebc:	b096      	sub	sp, #88	; 0x58
 8007ebe:	4614      	mov	r4, r2
 8007ec0:	461d      	mov	r5, r3
 8007ec2:	da08      	bge.n	8007ed6 <__swhatbuf_r+0x24>
 8007ec4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	602a      	str	r2, [r5, #0]
 8007ecc:	061a      	lsls	r2, r3, #24
 8007ece:	d410      	bmi.n	8007ef2 <__swhatbuf_r+0x40>
 8007ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ed4:	e00e      	b.n	8007ef4 <__swhatbuf_r+0x42>
 8007ed6:	466a      	mov	r2, sp
 8007ed8:	f000 fee0 	bl	8008c9c <_fstat_r>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	dbf1      	blt.n	8007ec4 <__swhatbuf_r+0x12>
 8007ee0:	9a01      	ldr	r2, [sp, #4]
 8007ee2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ee6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007eea:	425a      	negs	r2, r3
 8007eec:	415a      	adcs	r2, r3
 8007eee:	602a      	str	r2, [r5, #0]
 8007ef0:	e7ee      	b.n	8007ed0 <__swhatbuf_r+0x1e>
 8007ef2:	2340      	movs	r3, #64	; 0x40
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	b016      	add	sp, #88	; 0x58
 8007efa:	bd70      	pop	{r4, r5, r6, pc}

08007efc <__smakebuf_r>:
 8007efc:	898b      	ldrh	r3, [r1, #12]
 8007efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f00:	079d      	lsls	r5, r3, #30
 8007f02:	4606      	mov	r6, r0
 8007f04:	460c      	mov	r4, r1
 8007f06:	d507      	bpl.n	8007f18 <__smakebuf_r+0x1c>
 8007f08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	6123      	str	r3, [r4, #16]
 8007f10:	2301      	movs	r3, #1
 8007f12:	6163      	str	r3, [r4, #20]
 8007f14:	b002      	add	sp, #8
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
 8007f18:	ab01      	add	r3, sp, #4
 8007f1a:	466a      	mov	r2, sp
 8007f1c:	f7ff ffc9 	bl	8007eb2 <__swhatbuf_r>
 8007f20:	9900      	ldr	r1, [sp, #0]
 8007f22:	4605      	mov	r5, r0
 8007f24:	4630      	mov	r0, r6
 8007f26:	f000 fc45 	bl	80087b4 <_malloc_r>
 8007f2a:	b948      	cbnz	r0, 8007f40 <__smakebuf_r+0x44>
 8007f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f30:	059a      	lsls	r2, r3, #22
 8007f32:	d4ef      	bmi.n	8007f14 <__smakebuf_r+0x18>
 8007f34:	f023 0303 	bic.w	r3, r3, #3
 8007f38:	f043 0302 	orr.w	r3, r3, #2
 8007f3c:	81a3      	strh	r3, [r4, #12]
 8007f3e:	e7e3      	b.n	8007f08 <__smakebuf_r+0xc>
 8007f40:	4b0d      	ldr	r3, [pc, #52]	; (8007f78 <__smakebuf_r+0x7c>)
 8007f42:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	6020      	str	r0, [r4, #0]
 8007f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	9b00      	ldr	r3, [sp, #0]
 8007f50:	6163      	str	r3, [r4, #20]
 8007f52:	9b01      	ldr	r3, [sp, #4]
 8007f54:	6120      	str	r0, [r4, #16]
 8007f56:	b15b      	cbz	r3, 8007f70 <__smakebuf_r+0x74>
 8007f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f000 feaf 	bl	8008cc0 <_isatty_r>
 8007f62:	b128      	cbz	r0, 8007f70 <__smakebuf_r+0x74>
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	f023 0303 	bic.w	r3, r3, #3
 8007f6a:	f043 0301 	orr.w	r3, r3, #1
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	89a0      	ldrh	r0, [r4, #12]
 8007f72:	4305      	orrs	r5, r0
 8007f74:	81a5      	strh	r5, [r4, #12]
 8007f76:	e7cd      	b.n	8007f14 <__smakebuf_r+0x18>
 8007f78:	08007d01 	.word	0x08007d01

08007f7c <malloc>:
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <malloc+0xc>)
 8007f7e:	4601      	mov	r1, r0
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	f000 bc17 	b.w	80087b4 <_malloc_r>
 8007f86:	bf00      	nop
 8007f88:	2000000c 	.word	0x2000000c

08007f8c <memcpy>:
 8007f8c:	440a      	add	r2, r1
 8007f8e:	4291      	cmp	r1, r2
 8007f90:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f94:	d100      	bne.n	8007f98 <memcpy+0xc>
 8007f96:	4770      	bx	lr
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fa2:	4291      	cmp	r1, r2
 8007fa4:	d1f9      	bne.n	8007f9a <memcpy+0xe>
 8007fa6:	bd10      	pop	{r4, pc}

08007fa8 <_Balloc>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fac:	4604      	mov	r4, r0
 8007fae:	460d      	mov	r5, r1
 8007fb0:	b976      	cbnz	r6, 8007fd0 <_Balloc+0x28>
 8007fb2:	2010      	movs	r0, #16
 8007fb4:	f7ff ffe2 	bl	8007f7c <malloc>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	6260      	str	r0, [r4, #36]	; 0x24
 8007fbc:	b920      	cbnz	r0, 8007fc8 <_Balloc+0x20>
 8007fbe:	4b18      	ldr	r3, [pc, #96]	; (8008020 <_Balloc+0x78>)
 8007fc0:	4818      	ldr	r0, [pc, #96]	; (8008024 <_Balloc+0x7c>)
 8007fc2:	2166      	movs	r1, #102	; 0x66
 8007fc4:	f000 fe2a 	bl	8008c1c <__assert_func>
 8007fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fcc:	6006      	str	r6, [r0, #0]
 8007fce:	60c6      	str	r6, [r0, #12]
 8007fd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007fd2:	68f3      	ldr	r3, [r6, #12]
 8007fd4:	b183      	cbz	r3, 8007ff8 <_Balloc+0x50>
 8007fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fde:	b9b8      	cbnz	r0, 8008010 <_Balloc+0x68>
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	fa01 f605 	lsl.w	r6, r1, r5
 8007fe6:	1d72      	adds	r2, r6, #5
 8007fe8:	0092      	lsls	r2, r2, #2
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 fb60 	bl	80086b0 <_calloc_r>
 8007ff0:	b160      	cbz	r0, 800800c <_Balloc+0x64>
 8007ff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ff6:	e00e      	b.n	8008016 <_Balloc+0x6e>
 8007ff8:	2221      	movs	r2, #33	; 0x21
 8007ffa:	2104      	movs	r1, #4
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 fb57 	bl	80086b0 <_calloc_r>
 8008002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008004:	60f0      	str	r0, [r6, #12]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e4      	bne.n	8007fd6 <_Balloc+0x2e>
 800800c:	2000      	movs	r0, #0
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	6802      	ldr	r2, [r0, #0]
 8008012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008016:	2300      	movs	r3, #0
 8008018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800801c:	e7f7      	b.n	800800e <_Balloc+0x66>
 800801e:	bf00      	nop
 8008020:	0800b999 	.word	0x0800b999
 8008024:	0800ba7c 	.word	0x0800ba7c

08008028 <_Bfree>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800802c:	4605      	mov	r5, r0
 800802e:	460c      	mov	r4, r1
 8008030:	b976      	cbnz	r6, 8008050 <_Bfree+0x28>
 8008032:	2010      	movs	r0, #16
 8008034:	f7ff ffa2 	bl	8007f7c <malloc>
 8008038:	4602      	mov	r2, r0
 800803a:	6268      	str	r0, [r5, #36]	; 0x24
 800803c:	b920      	cbnz	r0, 8008048 <_Bfree+0x20>
 800803e:	4b09      	ldr	r3, [pc, #36]	; (8008064 <_Bfree+0x3c>)
 8008040:	4809      	ldr	r0, [pc, #36]	; (8008068 <_Bfree+0x40>)
 8008042:	218a      	movs	r1, #138	; 0x8a
 8008044:	f000 fdea 	bl	8008c1c <__assert_func>
 8008048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800804c:	6006      	str	r6, [r0, #0]
 800804e:	60c6      	str	r6, [r0, #12]
 8008050:	b13c      	cbz	r4, 8008062 <_Bfree+0x3a>
 8008052:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008054:	6862      	ldr	r2, [r4, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800805c:	6021      	str	r1, [r4, #0]
 800805e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008062:	bd70      	pop	{r4, r5, r6, pc}
 8008064:	0800b999 	.word	0x0800b999
 8008068:	0800ba7c 	.word	0x0800ba7c

0800806c <__multadd>:
 800806c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008070:	690d      	ldr	r5, [r1, #16]
 8008072:	4607      	mov	r7, r0
 8008074:	460c      	mov	r4, r1
 8008076:	461e      	mov	r6, r3
 8008078:	f101 0c14 	add.w	ip, r1, #20
 800807c:	2000      	movs	r0, #0
 800807e:	f8dc 3000 	ldr.w	r3, [ip]
 8008082:	b299      	uxth	r1, r3
 8008084:	fb02 6101 	mla	r1, r2, r1, r6
 8008088:	0c1e      	lsrs	r6, r3, #16
 800808a:	0c0b      	lsrs	r3, r1, #16
 800808c:	fb02 3306 	mla	r3, r2, r6, r3
 8008090:	b289      	uxth	r1, r1
 8008092:	3001      	adds	r0, #1
 8008094:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008098:	4285      	cmp	r5, r0
 800809a:	f84c 1b04 	str.w	r1, [ip], #4
 800809e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080a2:	dcec      	bgt.n	800807e <__multadd+0x12>
 80080a4:	b30e      	cbz	r6, 80080ea <__multadd+0x7e>
 80080a6:	68a3      	ldr	r3, [r4, #8]
 80080a8:	42ab      	cmp	r3, r5
 80080aa:	dc19      	bgt.n	80080e0 <__multadd+0x74>
 80080ac:	6861      	ldr	r1, [r4, #4]
 80080ae:	4638      	mov	r0, r7
 80080b0:	3101      	adds	r1, #1
 80080b2:	f7ff ff79 	bl	8007fa8 <_Balloc>
 80080b6:	4680      	mov	r8, r0
 80080b8:	b928      	cbnz	r0, 80080c6 <__multadd+0x5a>
 80080ba:	4602      	mov	r2, r0
 80080bc:	4b0c      	ldr	r3, [pc, #48]	; (80080f0 <__multadd+0x84>)
 80080be:	480d      	ldr	r0, [pc, #52]	; (80080f4 <__multadd+0x88>)
 80080c0:	21b5      	movs	r1, #181	; 0xb5
 80080c2:	f000 fdab 	bl	8008c1c <__assert_func>
 80080c6:	6922      	ldr	r2, [r4, #16]
 80080c8:	3202      	adds	r2, #2
 80080ca:	f104 010c 	add.w	r1, r4, #12
 80080ce:	0092      	lsls	r2, r2, #2
 80080d0:	300c      	adds	r0, #12
 80080d2:	f7ff ff5b 	bl	8007f8c <memcpy>
 80080d6:	4621      	mov	r1, r4
 80080d8:	4638      	mov	r0, r7
 80080da:	f7ff ffa5 	bl	8008028 <_Bfree>
 80080de:	4644      	mov	r4, r8
 80080e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080e4:	3501      	adds	r5, #1
 80080e6:	615e      	str	r6, [r3, #20]
 80080e8:	6125      	str	r5, [r4, #16]
 80080ea:	4620      	mov	r0, r4
 80080ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080f0:	0800ba0b 	.word	0x0800ba0b
 80080f4:	0800ba7c 	.word	0x0800ba7c

080080f8 <__hi0bits>:
 80080f8:	0c03      	lsrs	r3, r0, #16
 80080fa:	041b      	lsls	r3, r3, #16
 80080fc:	b9d3      	cbnz	r3, 8008134 <__hi0bits+0x3c>
 80080fe:	0400      	lsls	r0, r0, #16
 8008100:	2310      	movs	r3, #16
 8008102:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008106:	bf04      	itt	eq
 8008108:	0200      	lsleq	r0, r0, #8
 800810a:	3308      	addeq	r3, #8
 800810c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008110:	bf04      	itt	eq
 8008112:	0100      	lsleq	r0, r0, #4
 8008114:	3304      	addeq	r3, #4
 8008116:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800811a:	bf04      	itt	eq
 800811c:	0080      	lsleq	r0, r0, #2
 800811e:	3302      	addeq	r3, #2
 8008120:	2800      	cmp	r0, #0
 8008122:	db05      	blt.n	8008130 <__hi0bits+0x38>
 8008124:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008128:	f103 0301 	add.w	r3, r3, #1
 800812c:	bf08      	it	eq
 800812e:	2320      	moveq	r3, #32
 8008130:	4618      	mov	r0, r3
 8008132:	4770      	bx	lr
 8008134:	2300      	movs	r3, #0
 8008136:	e7e4      	b.n	8008102 <__hi0bits+0xa>

08008138 <__lo0bits>:
 8008138:	6803      	ldr	r3, [r0, #0]
 800813a:	f013 0207 	ands.w	r2, r3, #7
 800813e:	4601      	mov	r1, r0
 8008140:	d00b      	beq.n	800815a <__lo0bits+0x22>
 8008142:	07da      	lsls	r2, r3, #31
 8008144:	d423      	bmi.n	800818e <__lo0bits+0x56>
 8008146:	0798      	lsls	r0, r3, #30
 8008148:	bf49      	itett	mi
 800814a:	085b      	lsrmi	r3, r3, #1
 800814c:	089b      	lsrpl	r3, r3, #2
 800814e:	2001      	movmi	r0, #1
 8008150:	600b      	strmi	r3, [r1, #0]
 8008152:	bf5c      	itt	pl
 8008154:	600b      	strpl	r3, [r1, #0]
 8008156:	2002      	movpl	r0, #2
 8008158:	4770      	bx	lr
 800815a:	b298      	uxth	r0, r3
 800815c:	b9a8      	cbnz	r0, 800818a <__lo0bits+0x52>
 800815e:	0c1b      	lsrs	r3, r3, #16
 8008160:	2010      	movs	r0, #16
 8008162:	b2da      	uxtb	r2, r3
 8008164:	b90a      	cbnz	r2, 800816a <__lo0bits+0x32>
 8008166:	3008      	adds	r0, #8
 8008168:	0a1b      	lsrs	r3, r3, #8
 800816a:	071a      	lsls	r2, r3, #28
 800816c:	bf04      	itt	eq
 800816e:	091b      	lsreq	r3, r3, #4
 8008170:	3004      	addeq	r0, #4
 8008172:	079a      	lsls	r2, r3, #30
 8008174:	bf04      	itt	eq
 8008176:	089b      	lsreq	r3, r3, #2
 8008178:	3002      	addeq	r0, #2
 800817a:	07da      	lsls	r2, r3, #31
 800817c:	d403      	bmi.n	8008186 <__lo0bits+0x4e>
 800817e:	085b      	lsrs	r3, r3, #1
 8008180:	f100 0001 	add.w	r0, r0, #1
 8008184:	d005      	beq.n	8008192 <__lo0bits+0x5a>
 8008186:	600b      	str	r3, [r1, #0]
 8008188:	4770      	bx	lr
 800818a:	4610      	mov	r0, r2
 800818c:	e7e9      	b.n	8008162 <__lo0bits+0x2a>
 800818e:	2000      	movs	r0, #0
 8008190:	4770      	bx	lr
 8008192:	2020      	movs	r0, #32
 8008194:	4770      	bx	lr
	...

08008198 <__i2b>:
 8008198:	b510      	push	{r4, lr}
 800819a:	460c      	mov	r4, r1
 800819c:	2101      	movs	r1, #1
 800819e:	f7ff ff03 	bl	8007fa8 <_Balloc>
 80081a2:	4602      	mov	r2, r0
 80081a4:	b928      	cbnz	r0, 80081b2 <__i2b+0x1a>
 80081a6:	4b05      	ldr	r3, [pc, #20]	; (80081bc <__i2b+0x24>)
 80081a8:	4805      	ldr	r0, [pc, #20]	; (80081c0 <__i2b+0x28>)
 80081aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80081ae:	f000 fd35 	bl	8008c1c <__assert_func>
 80081b2:	2301      	movs	r3, #1
 80081b4:	6144      	str	r4, [r0, #20]
 80081b6:	6103      	str	r3, [r0, #16]
 80081b8:	bd10      	pop	{r4, pc}
 80081ba:	bf00      	nop
 80081bc:	0800ba0b 	.word	0x0800ba0b
 80081c0:	0800ba7c 	.word	0x0800ba7c

080081c4 <__multiply>:
 80081c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c8:	4691      	mov	r9, r2
 80081ca:	690a      	ldr	r2, [r1, #16]
 80081cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	bfb8      	it	lt
 80081d4:	460b      	movlt	r3, r1
 80081d6:	460c      	mov	r4, r1
 80081d8:	bfbc      	itt	lt
 80081da:	464c      	movlt	r4, r9
 80081dc:	4699      	movlt	r9, r3
 80081de:	6927      	ldr	r7, [r4, #16]
 80081e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081e4:	68a3      	ldr	r3, [r4, #8]
 80081e6:	6861      	ldr	r1, [r4, #4]
 80081e8:	eb07 060a 	add.w	r6, r7, sl
 80081ec:	42b3      	cmp	r3, r6
 80081ee:	b085      	sub	sp, #20
 80081f0:	bfb8      	it	lt
 80081f2:	3101      	addlt	r1, #1
 80081f4:	f7ff fed8 	bl	8007fa8 <_Balloc>
 80081f8:	b930      	cbnz	r0, 8008208 <__multiply+0x44>
 80081fa:	4602      	mov	r2, r0
 80081fc:	4b44      	ldr	r3, [pc, #272]	; (8008310 <__multiply+0x14c>)
 80081fe:	4845      	ldr	r0, [pc, #276]	; (8008314 <__multiply+0x150>)
 8008200:	f240 115d 	movw	r1, #349	; 0x15d
 8008204:	f000 fd0a 	bl	8008c1c <__assert_func>
 8008208:	f100 0514 	add.w	r5, r0, #20
 800820c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008210:	462b      	mov	r3, r5
 8008212:	2200      	movs	r2, #0
 8008214:	4543      	cmp	r3, r8
 8008216:	d321      	bcc.n	800825c <__multiply+0x98>
 8008218:	f104 0314 	add.w	r3, r4, #20
 800821c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008220:	f109 0314 	add.w	r3, r9, #20
 8008224:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008228:	9202      	str	r2, [sp, #8]
 800822a:	1b3a      	subs	r2, r7, r4
 800822c:	3a15      	subs	r2, #21
 800822e:	f022 0203 	bic.w	r2, r2, #3
 8008232:	3204      	adds	r2, #4
 8008234:	f104 0115 	add.w	r1, r4, #21
 8008238:	428f      	cmp	r7, r1
 800823a:	bf38      	it	cc
 800823c:	2204      	movcc	r2, #4
 800823e:	9201      	str	r2, [sp, #4]
 8008240:	9a02      	ldr	r2, [sp, #8]
 8008242:	9303      	str	r3, [sp, #12]
 8008244:	429a      	cmp	r2, r3
 8008246:	d80c      	bhi.n	8008262 <__multiply+0x9e>
 8008248:	2e00      	cmp	r6, #0
 800824a:	dd03      	ble.n	8008254 <__multiply+0x90>
 800824c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008250:	2b00      	cmp	r3, #0
 8008252:	d05a      	beq.n	800830a <__multiply+0x146>
 8008254:	6106      	str	r6, [r0, #16]
 8008256:	b005      	add	sp, #20
 8008258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825c:	f843 2b04 	str.w	r2, [r3], #4
 8008260:	e7d8      	b.n	8008214 <__multiply+0x50>
 8008262:	f8b3 a000 	ldrh.w	sl, [r3]
 8008266:	f1ba 0f00 	cmp.w	sl, #0
 800826a:	d024      	beq.n	80082b6 <__multiply+0xf2>
 800826c:	f104 0e14 	add.w	lr, r4, #20
 8008270:	46a9      	mov	r9, r5
 8008272:	f04f 0c00 	mov.w	ip, #0
 8008276:	f85e 2b04 	ldr.w	r2, [lr], #4
 800827a:	f8d9 1000 	ldr.w	r1, [r9]
 800827e:	fa1f fb82 	uxth.w	fp, r2
 8008282:	b289      	uxth	r1, r1
 8008284:	fb0a 110b 	mla	r1, sl, fp, r1
 8008288:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800828c:	f8d9 2000 	ldr.w	r2, [r9]
 8008290:	4461      	add	r1, ip
 8008292:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008296:	fb0a c20b 	mla	r2, sl, fp, ip
 800829a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800829e:	b289      	uxth	r1, r1
 80082a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082a4:	4577      	cmp	r7, lr
 80082a6:	f849 1b04 	str.w	r1, [r9], #4
 80082aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082ae:	d8e2      	bhi.n	8008276 <__multiply+0xb2>
 80082b0:	9a01      	ldr	r2, [sp, #4]
 80082b2:	f845 c002 	str.w	ip, [r5, r2]
 80082b6:	9a03      	ldr	r2, [sp, #12]
 80082b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082bc:	3304      	adds	r3, #4
 80082be:	f1b9 0f00 	cmp.w	r9, #0
 80082c2:	d020      	beq.n	8008306 <__multiply+0x142>
 80082c4:	6829      	ldr	r1, [r5, #0]
 80082c6:	f104 0c14 	add.w	ip, r4, #20
 80082ca:	46ae      	mov	lr, r5
 80082cc:	f04f 0a00 	mov.w	sl, #0
 80082d0:	f8bc b000 	ldrh.w	fp, [ip]
 80082d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082d8:	fb09 220b 	mla	r2, r9, fp, r2
 80082dc:	4492      	add	sl, r2
 80082de:	b289      	uxth	r1, r1
 80082e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80082e4:	f84e 1b04 	str.w	r1, [lr], #4
 80082e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80082ec:	f8be 1000 	ldrh.w	r1, [lr]
 80082f0:	0c12      	lsrs	r2, r2, #16
 80082f2:	fb09 1102 	mla	r1, r9, r2, r1
 80082f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80082fa:	4567      	cmp	r7, ip
 80082fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008300:	d8e6      	bhi.n	80082d0 <__multiply+0x10c>
 8008302:	9a01      	ldr	r2, [sp, #4]
 8008304:	50a9      	str	r1, [r5, r2]
 8008306:	3504      	adds	r5, #4
 8008308:	e79a      	b.n	8008240 <__multiply+0x7c>
 800830a:	3e01      	subs	r6, #1
 800830c:	e79c      	b.n	8008248 <__multiply+0x84>
 800830e:	bf00      	nop
 8008310:	0800ba0b 	.word	0x0800ba0b
 8008314:	0800ba7c 	.word	0x0800ba7c

08008318 <__pow5mult>:
 8008318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800831c:	4615      	mov	r5, r2
 800831e:	f012 0203 	ands.w	r2, r2, #3
 8008322:	4606      	mov	r6, r0
 8008324:	460f      	mov	r7, r1
 8008326:	d007      	beq.n	8008338 <__pow5mult+0x20>
 8008328:	4c25      	ldr	r4, [pc, #148]	; (80083c0 <__pow5mult+0xa8>)
 800832a:	3a01      	subs	r2, #1
 800832c:	2300      	movs	r3, #0
 800832e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008332:	f7ff fe9b 	bl	800806c <__multadd>
 8008336:	4607      	mov	r7, r0
 8008338:	10ad      	asrs	r5, r5, #2
 800833a:	d03d      	beq.n	80083b8 <__pow5mult+0xa0>
 800833c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800833e:	b97c      	cbnz	r4, 8008360 <__pow5mult+0x48>
 8008340:	2010      	movs	r0, #16
 8008342:	f7ff fe1b 	bl	8007f7c <malloc>
 8008346:	4602      	mov	r2, r0
 8008348:	6270      	str	r0, [r6, #36]	; 0x24
 800834a:	b928      	cbnz	r0, 8008358 <__pow5mult+0x40>
 800834c:	4b1d      	ldr	r3, [pc, #116]	; (80083c4 <__pow5mult+0xac>)
 800834e:	481e      	ldr	r0, [pc, #120]	; (80083c8 <__pow5mult+0xb0>)
 8008350:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008354:	f000 fc62 	bl	8008c1c <__assert_func>
 8008358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800835c:	6004      	str	r4, [r0, #0]
 800835e:	60c4      	str	r4, [r0, #12]
 8008360:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008368:	b94c      	cbnz	r4, 800837e <__pow5mult+0x66>
 800836a:	f240 2171 	movw	r1, #625	; 0x271
 800836e:	4630      	mov	r0, r6
 8008370:	f7ff ff12 	bl	8008198 <__i2b>
 8008374:	2300      	movs	r3, #0
 8008376:	f8c8 0008 	str.w	r0, [r8, #8]
 800837a:	4604      	mov	r4, r0
 800837c:	6003      	str	r3, [r0, #0]
 800837e:	f04f 0900 	mov.w	r9, #0
 8008382:	07eb      	lsls	r3, r5, #31
 8008384:	d50a      	bpl.n	800839c <__pow5mult+0x84>
 8008386:	4639      	mov	r1, r7
 8008388:	4622      	mov	r2, r4
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ff1a 	bl	80081c4 <__multiply>
 8008390:	4639      	mov	r1, r7
 8008392:	4680      	mov	r8, r0
 8008394:	4630      	mov	r0, r6
 8008396:	f7ff fe47 	bl	8008028 <_Bfree>
 800839a:	4647      	mov	r7, r8
 800839c:	106d      	asrs	r5, r5, #1
 800839e:	d00b      	beq.n	80083b8 <__pow5mult+0xa0>
 80083a0:	6820      	ldr	r0, [r4, #0]
 80083a2:	b938      	cbnz	r0, 80083b4 <__pow5mult+0x9c>
 80083a4:	4622      	mov	r2, r4
 80083a6:	4621      	mov	r1, r4
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7ff ff0b 	bl	80081c4 <__multiply>
 80083ae:	6020      	str	r0, [r4, #0]
 80083b0:	f8c0 9000 	str.w	r9, [r0]
 80083b4:	4604      	mov	r4, r0
 80083b6:	e7e4      	b.n	8008382 <__pow5mult+0x6a>
 80083b8:	4638      	mov	r0, r7
 80083ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083be:	bf00      	nop
 80083c0:	0800bbc8 	.word	0x0800bbc8
 80083c4:	0800b999 	.word	0x0800b999
 80083c8:	0800ba7c 	.word	0x0800ba7c

080083cc <__lshift>:
 80083cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d0:	460c      	mov	r4, r1
 80083d2:	6849      	ldr	r1, [r1, #4]
 80083d4:	6923      	ldr	r3, [r4, #16]
 80083d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083da:	68a3      	ldr	r3, [r4, #8]
 80083dc:	4607      	mov	r7, r0
 80083de:	4691      	mov	r9, r2
 80083e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083e4:	f108 0601 	add.w	r6, r8, #1
 80083e8:	42b3      	cmp	r3, r6
 80083ea:	db0b      	blt.n	8008404 <__lshift+0x38>
 80083ec:	4638      	mov	r0, r7
 80083ee:	f7ff fddb 	bl	8007fa8 <_Balloc>
 80083f2:	4605      	mov	r5, r0
 80083f4:	b948      	cbnz	r0, 800840a <__lshift+0x3e>
 80083f6:	4602      	mov	r2, r0
 80083f8:	4b2a      	ldr	r3, [pc, #168]	; (80084a4 <__lshift+0xd8>)
 80083fa:	482b      	ldr	r0, [pc, #172]	; (80084a8 <__lshift+0xdc>)
 80083fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008400:	f000 fc0c 	bl	8008c1c <__assert_func>
 8008404:	3101      	adds	r1, #1
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	e7ee      	b.n	80083e8 <__lshift+0x1c>
 800840a:	2300      	movs	r3, #0
 800840c:	f100 0114 	add.w	r1, r0, #20
 8008410:	f100 0210 	add.w	r2, r0, #16
 8008414:	4618      	mov	r0, r3
 8008416:	4553      	cmp	r3, sl
 8008418:	db37      	blt.n	800848a <__lshift+0xbe>
 800841a:	6920      	ldr	r0, [r4, #16]
 800841c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008420:	f104 0314 	add.w	r3, r4, #20
 8008424:	f019 091f 	ands.w	r9, r9, #31
 8008428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800842c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008430:	d02f      	beq.n	8008492 <__lshift+0xc6>
 8008432:	f1c9 0e20 	rsb	lr, r9, #32
 8008436:	468a      	mov	sl, r1
 8008438:	f04f 0c00 	mov.w	ip, #0
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	fa02 f209 	lsl.w	r2, r2, r9
 8008442:	ea42 020c 	orr.w	r2, r2, ip
 8008446:	f84a 2b04 	str.w	r2, [sl], #4
 800844a:	f853 2b04 	ldr.w	r2, [r3], #4
 800844e:	4298      	cmp	r0, r3
 8008450:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008454:	d8f2      	bhi.n	800843c <__lshift+0x70>
 8008456:	1b03      	subs	r3, r0, r4
 8008458:	3b15      	subs	r3, #21
 800845a:	f023 0303 	bic.w	r3, r3, #3
 800845e:	3304      	adds	r3, #4
 8008460:	f104 0215 	add.w	r2, r4, #21
 8008464:	4290      	cmp	r0, r2
 8008466:	bf38      	it	cc
 8008468:	2304      	movcc	r3, #4
 800846a:	f841 c003 	str.w	ip, [r1, r3]
 800846e:	f1bc 0f00 	cmp.w	ip, #0
 8008472:	d001      	beq.n	8008478 <__lshift+0xac>
 8008474:	f108 0602 	add.w	r6, r8, #2
 8008478:	3e01      	subs	r6, #1
 800847a:	4638      	mov	r0, r7
 800847c:	612e      	str	r6, [r5, #16]
 800847e:	4621      	mov	r1, r4
 8008480:	f7ff fdd2 	bl	8008028 <_Bfree>
 8008484:	4628      	mov	r0, r5
 8008486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848a:	f842 0f04 	str.w	r0, [r2, #4]!
 800848e:	3301      	adds	r3, #1
 8008490:	e7c1      	b.n	8008416 <__lshift+0x4a>
 8008492:	3904      	subs	r1, #4
 8008494:	f853 2b04 	ldr.w	r2, [r3], #4
 8008498:	f841 2f04 	str.w	r2, [r1, #4]!
 800849c:	4298      	cmp	r0, r3
 800849e:	d8f9      	bhi.n	8008494 <__lshift+0xc8>
 80084a0:	e7ea      	b.n	8008478 <__lshift+0xac>
 80084a2:	bf00      	nop
 80084a4:	0800ba0b 	.word	0x0800ba0b
 80084a8:	0800ba7c 	.word	0x0800ba7c

080084ac <__mcmp>:
 80084ac:	b530      	push	{r4, r5, lr}
 80084ae:	6902      	ldr	r2, [r0, #16]
 80084b0:	690c      	ldr	r4, [r1, #16]
 80084b2:	1b12      	subs	r2, r2, r4
 80084b4:	d10e      	bne.n	80084d4 <__mcmp+0x28>
 80084b6:	f100 0314 	add.w	r3, r0, #20
 80084ba:	3114      	adds	r1, #20
 80084bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084cc:	42a5      	cmp	r5, r4
 80084ce:	d003      	beq.n	80084d8 <__mcmp+0x2c>
 80084d0:	d305      	bcc.n	80084de <__mcmp+0x32>
 80084d2:	2201      	movs	r2, #1
 80084d4:	4610      	mov	r0, r2
 80084d6:	bd30      	pop	{r4, r5, pc}
 80084d8:	4283      	cmp	r3, r0
 80084da:	d3f3      	bcc.n	80084c4 <__mcmp+0x18>
 80084dc:	e7fa      	b.n	80084d4 <__mcmp+0x28>
 80084de:	f04f 32ff 	mov.w	r2, #4294967295
 80084e2:	e7f7      	b.n	80084d4 <__mcmp+0x28>

080084e4 <__mdiff>:
 80084e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e8:	460c      	mov	r4, r1
 80084ea:	4606      	mov	r6, r0
 80084ec:	4611      	mov	r1, r2
 80084ee:	4620      	mov	r0, r4
 80084f0:	4690      	mov	r8, r2
 80084f2:	f7ff ffdb 	bl	80084ac <__mcmp>
 80084f6:	1e05      	subs	r5, r0, #0
 80084f8:	d110      	bne.n	800851c <__mdiff+0x38>
 80084fa:	4629      	mov	r1, r5
 80084fc:	4630      	mov	r0, r6
 80084fe:	f7ff fd53 	bl	8007fa8 <_Balloc>
 8008502:	b930      	cbnz	r0, 8008512 <__mdiff+0x2e>
 8008504:	4b3a      	ldr	r3, [pc, #232]	; (80085f0 <__mdiff+0x10c>)
 8008506:	4602      	mov	r2, r0
 8008508:	f240 2132 	movw	r1, #562	; 0x232
 800850c:	4839      	ldr	r0, [pc, #228]	; (80085f4 <__mdiff+0x110>)
 800850e:	f000 fb85 	bl	8008c1c <__assert_func>
 8008512:	2301      	movs	r3, #1
 8008514:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851c:	bfa4      	itt	ge
 800851e:	4643      	movge	r3, r8
 8008520:	46a0      	movge	r8, r4
 8008522:	4630      	mov	r0, r6
 8008524:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008528:	bfa6      	itte	ge
 800852a:	461c      	movge	r4, r3
 800852c:	2500      	movge	r5, #0
 800852e:	2501      	movlt	r5, #1
 8008530:	f7ff fd3a 	bl	8007fa8 <_Balloc>
 8008534:	b920      	cbnz	r0, 8008540 <__mdiff+0x5c>
 8008536:	4b2e      	ldr	r3, [pc, #184]	; (80085f0 <__mdiff+0x10c>)
 8008538:	4602      	mov	r2, r0
 800853a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800853e:	e7e5      	b.n	800850c <__mdiff+0x28>
 8008540:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008544:	6926      	ldr	r6, [r4, #16]
 8008546:	60c5      	str	r5, [r0, #12]
 8008548:	f104 0914 	add.w	r9, r4, #20
 800854c:	f108 0514 	add.w	r5, r8, #20
 8008550:	f100 0e14 	add.w	lr, r0, #20
 8008554:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008558:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800855c:	f108 0210 	add.w	r2, r8, #16
 8008560:	46f2      	mov	sl, lr
 8008562:	2100      	movs	r1, #0
 8008564:	f859 3b04 	ldr.w	r3, [r9], #4
 8008568:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800856c:	fa1f f883 	uxth.w	r8, r3
 8008570:	fa11 f18b 	uxtah	r1, r1, fp
 8008574:	0c1b      	lsrs	r3, r3, #16
 8008576:	eba1 0808 	sub.w	r8, r1, r8
 800857a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800857e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008582:	fa1f f888 	uxth.w	r8, r8
 8008586:	1419      	asrs	r1, r3, #16
 8008588:	454e      	cmp	r6, r9
 800858a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800858e:	f84a 3b04 	str.w	r3, [sl], #4
 8008592:	d8e7      	bhi.n	8008564 <__mdiff+0x80>
 8008594:	1b33      	subs	r3, r6, r4
 8008596:	3b15      	subs	r3, #21
 8008598:	f023 0303 	bic.w	r3, r3, #3
 800859c:	3304      	adds	r3, #4
 800859e:	3415      	adds	r4, #21
 80085a0:	42a6      	cmp	r6, r4
 80085a2:	bf38      	it	cc
 80085a4:	2304      	movcc	r3, #4
 80085a6:	441d      	add	r5, r3
 80085a8:	4473      	add	r3, lr
 80085aa:	469e      	mov	lr, r3
 80085ac:	462e      	mov	r6, r5
 80085ae:	4566      	cmp	r6, ip
 80085b0:	d30e      	bcc.n	80085d0 <__mdiff+0xec>
 80085b2:	f10c 0203 	add.w	r2, ip, #3
 80085b6:	1b52      	subs	r2, r2, r5
 80085b8:	f022 0203 	bic.w	r2, r2, #3
 80085bc:	3d03      	subs	r5, #3
 80085be:	45ac      	cmp	ip, r5
 80085c0:	bf38      	it	cc
 80085c2:	2200      	movcc	r2, #0
 80085c4:	441a      	add	r2, r3
 80085c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80085ca:	b17b      	cbz	r3, 80085ec <__mdiff+0x108>
 80085cc:	6107      	str	r7, [r0, #16]
 80085ce:	e7a3      	b.n	8008518 <__mdiff+0x34>
 80085d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80085d4:	fa11 f288 	uxtah	r2, r1, r8
 80085d8:	1414      	asrs	r4, r2, #16
 80085da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80085de:	b292      	uxth	r2, r2
 80085e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80085e4:	f84e 2b04 	str.w	r2, [lr], #4
 80085e8:	1421      	asrs	r1, r4, #16
 80085ea:	e7e0      	b.n	80085ae <__mdiff+0xca>
 80085ec:	3f01      	subs	r7, #1
 80085ee:	e7ea      	b.n	80085c6 <__mdiff+0xe2>
 80085f0:	0800ba0b 	.word	0x0800ba0b
 80085f4:	0800ba7c 	.word	0x0800ba7c

080085f8 <__d2b>:
 80085f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085fc:	4689      	mov	r9, r1
 80085fe:	2101      	movs	r1, #1
 8008600:	ec57 6b10 	vmov	r6, r7, d0
 8008604:	4690      	mov	r8, r2
 8008606:	f7ff fccf 	bl	8007fa8 <_Balloc>
 800860a:	4604      	mov	r4, r0
 800860c:	b930      	cbnz	r0, 800861c <__d2b+0x24>
 800860e:	4602      	mov	r2, r0
 8008610:	4b25      	ldr	r3, [pc, #148]	; (80086a8 <__d2b+0xb0>)
 8008612:	4826      	ldr	r0, [pc, #152]	; (80086ac <__d2b+0xb4>)
 8008614:	f240 310a 	movw	r1, #778	; 0x30a
 8008618:	f000 fb00 	bl	8008c1c <__assert_func>
 800861c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008624:	bb35      	cbnz	r5, 8008674 <__d2b+0x7c>
 8008626:	2e00      	cmp	r6, #0
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	d028      	beq.n	800867e <__d2b+0x86>
 800862c:	4668      	mov	r0, sp
 800862e:	9600      	str	r6, [sp, #0]
 8008630:	f7ff fd82 	bl	8008138 <__lo0bits>
 8008634:	9900      	ldr	r1, [sp, #0]
 8008636:	b300      	cbz	r0, 800867a <__d2b+0x82>
 8008638:	9a01      	ldr	r2, [sp, #4]
 800863a:	f1c0 0320 	rsb	r3, r0, #32
 800863e:	fa02 f303 	lsl.w	r3, r2, r3
 8008642:	430b      	orrs	r3, r1
 8008644:	40c2      	lsrs	r2, r0
 8008646:	6163      	str	r3, [r4, #20]
 8008648:	9201      	str	r2, [sp, #4]
 800864a:	9b01      	ldr	r3, [sp, #4]
 800864c:	61a3      	str	r3, [r4, #24]
 800864e:	2b00      	cmp	r3, #0
 8008650:	bf14      	ite	ne
 8008652:	2202      	movne	r2, #2
 8008654:	2201      	moveq	r2, #1
 8008656:	6122      	str	r2, [r4, #16]
 8008658:	b1d5      	cbz	r5, 8008690 <__d2b+0x98>
 800865a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800865e:	4405      	add	r5, r0
 8008660:	f8c9 5000 	str.w	r5, [r9]
 8008664:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008668:	f8c8 0000 	str.w	r0, [r8]
 800866c:	4620      	mov	r0, r4
 800866e:	b003      	add	sp, #12
 8008670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008678:	e7d5      	b.n	8008626 <__d2b+0x2e>
 800867a:	6161      	str	r1, [r4, #20]
 800867c:	e7e5      	b.n	800864a <__d2b+0x52>
 800867e:	a801      	add	r0, sp, #4
 8008680:	f7ff fd5a 	bl	8008138 <__lo0bits>
 8008684:	9b01      	ldr	r3, [sp, #4]
 8008686:	6163      	str	r3, [r4, #20]
 8008688:	2201      	movs	r2, #1
 800868a:	6122      	str	r2, [r4, #16]
 800868c:	3020      	adds	r0, #32
 800868e:	e7e3      	b.n	8008658 <__d2b+0x60>
 8008690:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008694:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008698:	f8c9 0000 	str.w	r0, [r9]
 800869c:	6918      	ldr	r0, [r3, #16]
 800869e:	f7ff fd2b 	bl	80080f8 <__hi0bits>
 80086a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086a6:	e7df      	b.n	8008668 <__d2b+0x70>
 80086a8:	0800ba0b 	.word	0x0800ba0b
 80086ac:	0800ba7c 	.word	0x0800ba7c

080086b0 <_calloc_r>:
 80086b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086b2:	fba1 2402 	umull	r2, r4, r1, r2
 80086b6:	b94c      	cbnz	r4, 80086cc <_calloc_r+0x1c>
 80086b8:	4611      	mov	r1, r2
 80086ba:	9201      	str	r2, [sp, #4]
 80086bc:	f000 f87a 	bl	80087b4 <_malloc_r>
 80086c0:	9a01      	ldr	r2, [sp, #4]
 80086c2:	4605      	mov	r5, r0
 80086c4:	b930      	cbnz	r0, 80086d4 <_calloc_r+0x24>
 80086c6:	4628      	mov	r0, r5
 80086c8:	b003      	add	sp, #12
 80086ca:	bd30      	pop	{r4, r5, pc}
 80086cc:	220c      	movs	r2, #12
 80086ce:	6002      	str	r2, [r0, #0]
 80086d0:	2500      	movs	r5, #0
 80086d2:	e7f8      	b.n	80086c6 <_calloc_r+0x16>
 80086d4:	4621      	mov	r1, r4
 80086d6:	f7fd fdf1 	bl	80062bc <memset>
 80086da:	e7f4      	b.n	80086c6 <_calloc_r+0x16>

080086dc <_free_r>:
 80086dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086de:	2900      	cmp	r1, #0
 80086e0:	d044      	beq.n	800876c <_free_r+0x90>
 80086e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e6:	9001      	str	r0, [sp, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f1a1 0404 	sub.w	r4, r1, #4
 80086ee:	bfb8      	it	lt
 80086f0:	18e4      	addlt	r4, r4, r3
 80086f2:	f000 fb19 	bl	8008d28 <__malloc_lock>
 80086f6:	4a1e      	ldr	r2, [pc, #120]	; (8008770 <_free_r+0x94>)
 80086f8:	9801      	ldr	r0, [sp, #4]
 80086fa:	6813      	ldr	r3, [r2, #0]
 80086fc:	b933      	cbnz	r3, 800870c <_free_r+0x30>
 80086fe:	6063      	str	r3, [r4, #4]
 8008700:	6014      	str	r4, [r2, #0]
 8008702:	b003      	add	sp, #12
 8008704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008708:	f000 bb14 	b.w	8008d34 <__malloc_unlock>
 800870c:	42a3      	cmp	r3, r4
 800870e:	d908      	bls.n	8008722 <_free_r+0x46>
 8008710:	6825      	ldr	r5, [r4, #0]
 8008712:	1961      	adds	r1, r4, r5
 8008714:	428b      	cmp	r3, r1
 8008716:	bf01      	itttt	eq
 8008718:	6819      	ldreq	r1, [r3, #0]
 800871a:	685b      	ldreq	r3, [r3, #4]
 800871c:	1949      	addeq	r1, r1, r5
 800871e:	6021      	streq	r1, [r4, #0]
 8008720:	e7ed      	b.n	80086fe <_free_r+0x22>
 8008722:	461a      	mov	r2, r3
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	b10b      	cbz	r3, 800872c <_free_r+0x50>
 8008728:	42a3      	cmp	r3, r4
 800872a:	d9fa      	bls.n	8008722 <_free_r+0x46>
 800872c:	6811      	ldr	r1, [r2, #0]
 800872e:	1855      	adds	r5, r2, r1
 8008730:	42a5      	cmp	r5, r4
 8008732:	d10b      	bne.n	800874c <_free_r+0x70>
 8008734:	6824      	ldr	r4, [r4, #0]
 8008736:	4421      	add	r1, r4
 8008738:	1854      	adds	r4, r2, r1
 800873a:	42a3      	cmp	r3, r4
 800873c:	6011      	str	r1, [r2, #0]
 800873e:	d1e0      	bne.n	8008702 <_free_r+0x26>
 8008740:	681c      	ldr	r4, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	6053      	str	r3, [r2, #4]
 8008746:	4421      	add	r1, r4
 8008748:	6011      	str	r1, [r2, #0]
 800874a:	e7da      	b.n	8008702 <_free_r+0x26>
 800874c:	d902      	bls.n	8008754 <_free_r+0x78>
 800874e:	230c      	movs	r3, #12
 8008750:	6003      	str	r3, [r0, #0]
 8008752:	e7d6      	b.n	8008702 <_free_r+0x26>
 8008754:	6825      	ldr	r5, [r4, #0]
 8008756:	1961      	adds	r1, r4, r5
 8008758:	428b      	cmp	r3, r1
 800875a:	bf04      	itt	eq
 800875c:	6819      	ldreq	r1, [r3, #0]
 800875e:	685b      	ldreq	r3, [r3, #4]
 8008760:	6063      	str	r3, [r4, #4]
 8008762:	bf04      	itt	eq
 8008764:	1949      	addeq	r1, r1, r5
 8008766:	6021      	streq	r1, [r4, #0]
 8008768:	6054      	str	r4, [r2, #4]
 800876a:	e7ca      	b.n	8008702 <_free_r+0x26>
 800876c:	b003      	add	sp, #12
 800876e:	bd30      	pop	{r4, r5, pc}
 8008770:	20000340 	.word	0x20000340

08008774 <sbrk_aligned>:
 8008774:	b570      	push	{r4, r5, r6, lr}
 8008776:	4e0e      	ldr	r6, [pc, #56]	; (80087b0 <sbrk_aligned+0x3c>)
 8008778:	460c      	mov	r4, r1
 800877a:	6831      	ldr	r1, [r6, #0]
 800877c:	4605      	mov	r5, r0
 800877e:	b911      	cbnz	r1, 8008786 <sbrk_aligned+0x12>
 8008780:	f000 f9e6 	bl	8008b50 <_sbrk_r>
 8008784:	6030      	str	r0, [r6, #0]
 8008786:	4621      	mov	r1, r4
 8008788:	4628      	mov	r0, r5
 800878a:	f000 f9e1 	bl	8008b50 <_sbrk_r>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	d00a      	beq.n	80087a8 <sbrk_aligned+0x34>
 8008792:	1cc4      	adds	r4, r0, #3
 8008794:	f024 0403 	bic.w	r4, r4, #3
 8008798:	42a0      	cmp	r0, r4
 800879a:	d007      	beq.n	80087ac <sbrk_aligned+0x38>
 800879c:	1a21      	subs	r1, r4, r0
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 f9d6 	bl	8008b50 <_sbrk_r>
 80087a4:	3001      	adds	r0, #1
 80087a6:	d101      	bne.n	80087ac <sbrk_aligned+0x38>
 80087a8:	f04f 34ff 	mov.w	r4, #4294967295
 80087ac:	4620      	mov	r0, r4
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	20000344 	.word	0x20000344

080087b4 <_malloc_r>:
 80087b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b8:	1ccd      	adds	r5, r1, #3
 80087ba:	f025 0503 	bic.w	r5, r5, #3
 80087be:	3508      	adds	r5, #8
 80087c0:	2d0c      	cmp	r5, #12
 80087c2:	bf38      	it	cc
 80087c4:	250c      	movcc	r5, #12
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	4607      	mov	r7, r0
 80087ca:	db01      	blt.n	80087d0 <_malloc_r+0x1c>
 80087cc:	42a9      	cmp	r1, r5
 80087ce:	d905      	bls.n	80087dc <_malloc_r+0x28>
 80087d0:	230c      	movs	r3, #12
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	2600      	movs	r6, #0
 80087d6:	4630      	mov	r0, r6
 80087d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087dc:	4e2e      	ldr	r6, [pc, #184]	; (8008898 <_malloc_r+0xe4>)
 80087de:	f000 faa3 	bl	8008d28 <__malloc_lock>
 80087e2:	6833      	ldr	r3, [r6, #0]
 80087e4:	461c      	mov	r4, r3
 80087e6:	bb34      	cbnz	r4, 8008836 <_malloc_r+0x82>
 80087e8:	4629      	mov	r1, r5
 80087ea:	4638      	mov	r0, r7
 80087ec:	f7ff ffc2 	bl	8008774 <sbrk_aligned>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	4604      	mov	r4, r0
 80087f4:	d14d      	bne.n	8008892 <_malloc_r+0xde>
 80087f6:	6834      	ldr	r4, [r6, #0]
 80087f8:	4626      	mov	r6, r4
 80087fa:	2e00      	cmp	r6, #0
 80087fc:	d140      	bne.n	8008880 <_malloc_r+0xcc>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	4631      	mov	r1, r6
 8008802:	4638      	mov	r0, r7
 8008804:	eb04 0803 	add.w	r8, r4, r3
 8008808:	f000 f9a2 	bl	8008b50 <_sbrk_r>
 800880c:	4580      	cmp	r8, r0
 800880e:	d13a      	bne.n	8008886 <_malloc_r+0xd2>
 8008810:	6821      	ldr	r1, [r4, #0]
 8008812:	3503      	adds	r5, #3
 8008814:	1a6d      	subs	r5, r5, r1
 8008816:	f025 0503 	bic.w	r5, r5, #3
 800881a:	3508      	adds	r5, #8
 800881c:	2d0c      	cmp	r5, #12
 800881e:	bf38      	it	cc
 8008820:	250c      	movcc	r5, #12
 8008822:	4629      	mov	r1, r5
 8008824:	4638      	mov	r0, r7
 8008826:	f7ff ffa5 	bl	8008774 <sbrk_aligned>
 800882a:	3001      	adds	r0, #1
 800882c:	d02b      	beq.n	8008886 <_malloc_r+0xd2>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	442b      	add	r3, r5
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	e00e      	b.n	8008854 <_malloc_r+0xa0>
 8008836:	6822      	ldr	r2, [r4, #0]
 8008838:	1b52      	subs	r2, r2, r5
 800883a:	d41e      	bmi.n	800887a <_malloc_r+0xc6>
 800883c:	2a0b      	cmp	r2, #11
 800883e:	d916      	bls.n	800886e <_malloc_r+0xba>
 8008840:	1961      	adds	r1, r4, r5
 8008842:	42a3      	cmp	r3, r4
 8008844:	6025      	str	r5, [r4, #0]
 8008846:	bf18      	it	ne
 8008848:	6059      	strne	r1, [r3, #4]
 800884a:	6863      	ldr	r3, [r4, #4]
 800884c:	bf08      	it	eq
 800884e:	6031      	streq	r1, [r6, #0]
 8008850:	5162      	str	r2, [r4, r5]
 8008852:	604b      	str	r3, [r1, #4]
 8008854:	4638      	mov	r0, r7
 8008856:	f104 060b 	add.w	r6, r4, #11
 800885a:	f000 fa6b 	bl	8008d34 <__malloc_unlock>
 800885e:	f026 0607 	bic.w	r6, r6, #7
 8008862:	1d23      	adds	r3, r4, #4
 8008864:	1af2      	subs	r2, r6, r3
 8008866:	d0b6      	beq.n	80087d6 <_malloc_r+0x22>
 8008868:	1b9b      	subs	r3, r3, r6
 800886a:	50a3      	str	r3, [r4, r2]
 800886c:	e7b3      	b.n	80087d6 <_malloc_r+0x22>
 800886e:	6862      	ldr	r2, [r4, #4]
 8008870:	42a3      	cmp	r3, r4
 8008872:	bf0c      	ite	eq
 8008874:	6032      	streq	r2, [r6, #0]
 8008876:	605a      	strne	r2, [r3, #4]
 8008878:	e7ec      	b.n	8008854 <_malloc_r+0xa0>
 800887a:	4623      	mov	r3, r4
 800887c:	6864      	ldr	r4, [r4, #4]
 800887e:	e7b2      	b.n	80087e6 <_malloc_r+0x32>
 8008880:	4634      	mov	r4, r6
 8008882:	6876      	ldr	r6, [r6, #4]
 8008884:	e7b9      	b.n	80087fa <_malloc_r+0x46>
 8008886:	230c      	movs	r3, #12
 8008888:	603b      	str	r3, [r7, #0]
 800888a:	4638      	mov	r0, r7
 800888c:	f000 fa52 	bl	8008d34 <__malloc_unlock>
 8008890:	e7a1      	b.n	80087d6 <_malloc_r+0x22>
 8008892:	6025      	str	r5, [r4, #0]
 8008894:	e7de      	b.n	8008854 <_malloc_r+0xa0>
 8008896:	bf00      	nop
 8008898:	20000340 	.word	0x20000340

0800889c <__sfputc_r>:
 800889c:	6893      	ldr	r3, [r2, #8]
 800889e:	3b01      	subs	r3, #1
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	b410      	push	{r4}
 80088a4:	6093      	str	r3, [r2, #8]
 80088a6:	da08      	bge.n	80088ba <__sfputc_r+0x1e>
 80088a8:	6994      	ldr	r4, [r2, #24]
 80088aa:	42a3      	cmp	r3, r4
 80088ac:	db01      	blt.n	80088b2 <__sfputc_r+0x16>
 80088ae:	290a      	cmp	r1, #10
 80088b0:	d103      	bne.n	80088ba <__sfputc_r+0x1e>
 80088b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088b6:	f7fe ba01 	b.w	8006cbc <__swbuf_r>
 80088ba:	6813      	ldr	r3, [r2, #0]
 80088bc:	1c58      	adds	r0, r3, #1
 80088be:	6010      	str	r0, [r2, #0]
 80088c0:	7019      	strb	r1, [r3, #0]
 80088c2:	4608      	mov	r0, r1
 80088c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <__sfputs_r>:
 80088ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088cc:	4606      	mov	r6, r0
 80088ce:	460f      	mov	r7, r1
 80088d0:	4614      	mov	r4, r2
 80088d2:	18d5      	adds	r5, r2, r3
 80088d4:	42ac      	cmp	r4, r5
 80088d6:	d101      	bne.n	80088dc <__sfputs_r+0x12>
 80088d8:	2000      	movs	r0, #0
 80088da:	e007      	b.n	80088ec <__sfputs_r+0x22>
 80088dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e0:	463a      	mov	r2, r7
 80088e2:	4630      	mov	r0, r6
 80088e4:	f7ff ffda 	bl	800889c <__sfputc_r>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d1f3      	bne.n	80088d4 <__sfputs_r+0xa>
 80088ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088f0 <_vfiprintf_r>:
 80088f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	460d      	mov	r5, r1
 80088f6:	b09d      	sub	sp, #116	; 0x74
 80088f8:	4614      	mov	r4, r2
 80088fa:	4698      	mov	r8, r3
 80088fc:	4606      	mov	r6, r0
 80088fe:	b118      	cbz	r0, 8008908 <_vfiprintf_r+0x18>
 8008900:	6983      	ldr	r3, [r0, #24]
 8008902:	b90b      	cbnz	r3, 8008908 <_vfiprintf_r+0x18>
 8008904:	f7ff fa30 	bl	8007d68 <__sinit>
 8008908:	4b89      	ldr	r3, [pc, #548]	; (8008b30 <_vfiprintf_r+0x240>)
 800890a:	429d      	cmp	r5, r3
 800890c:	d11b      	bne.n	8008946 <_vfiprintf_r+0x56>
 800890e:	6875      	ldr	r5, [r6, #4]
 8008910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008912:	07d9      	lsls	r1, r3, #31
 8008914:	d405      	bmi.n	8008922 <_vfiprintf_r+0x32>
 8008916:	89ab      	ldrh	r3, [r5, #12]
 8008918:	059a      	lsls	r2, r3, #22
 800891a:	d402      	bmi.n	8008922 <_vfiprintf_r+0x32>
 800891c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800891e:	f7ff fac6 	bl	8007eae <__retarget_lock_acquire_recursive>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	071b      	lsls	r3, r3, #28
 8008926:	d501      	bpl.n	800892c <_vfiprintf_r+0x3c>
 8008928:	692b      	ldr	r3, [r5, #16]
 800892a:	b9eb      	cbnz	r3, 8008968 <_vfiprintf_r+0x78>
 800892c:	4629      	mov	r1, r5
 800892e:	4630      	mov	r0, r6
 8008930:	f7fe fa16 	bl	8006d60 <__swsetup_r>
 8008934:	b1c0      	cbz	r0, 8008968 <_vfiprintf_r+0x78>
 8008936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008938:	07dc      	lsls	r4, r3, #31
 800893a:	d50e      	bpl.n	800895a <_vfiprintf_r+0x6a>
 800893c:	f04f 30ff 	mov.w	r0, #4294967295
 8008940:	b01d      	add	sp, #116	; 0x74
 8008942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008946:	4b7b      	ldr	r3, [pc, #492]	; (8008b34 <_vfiprintf_r+0x244>)
 8008948:	429d      	cmp	r5, r3
 800894a:	d101      	bne.n	8008950 <_vfiprintf_r+0x60>
 800894c:	68b5      	ldr	r5, [r6, #8]
 800894e:	e7df      	b.n	8008910 <_vfiprintf_r+0x20>
 8008950:	4b79      	ldr	r3, [pc, #484]	; (8008b38 <_vfiprintf_r+0x248>)
 8008952:	429d      	cmp	r5, r3
 8008954:	bf08      	it	eq
 8008956:	68f5      	ldreq	r5, [r6, #12]
 8008958:	e7da      	b.n	8008910 <_vfiprintf_r+0x20>
 800895a:	89ab      	ldrh	r3, [r5, #12]
 800895c:	0598      	lsls	r0, r3, #22
 800895e:	d4ed      	bmi.n	800893c <_vfiprintf_r+0x4c>
 8008960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008962:	f7ff faa5 	bl	8007eb0 <__retarget_lock_release_recursive>
 8008966:	e7e9      	b.n	800893c <_vfiprintf_r+0x4c>
 8008968:	2300      	movs	r3, #0
 800896a:	9309      	str	r3, [sp, #36]	; 0x24
 800896c:	2320      	movs	r3, #32
 800896e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008972:	f8cd 800c 	str.w	r8, [sp, #12]
 8008976:	2330      	movs	r3, #48	; 0x30
 8008978:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b3c <_vfiprintf_r+0x24c>
 800897c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008980:	f04f 0901 	mov.w	r9, #1
 8008984:	4623      	mov	r3, r4
 8008986:	469a      	mov	sl, r3
 8008988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800898c:	b10a      	cbz	r2, 8008992 <_vfiprintf_r+0xa2>
 800898e:	2a25      	cmp	r2, #37	; 0x25
 8008990:	d1f9      	bne.n	8008986 <_vfiprintf_r+0x96>
 8008992:	ebba 0b04 	subs.w	fp, sl, r4
 8008996:	d00b      	beq.n	80089b0 <_vfiprintf_r+0xc0>
 8008998:	465b      	mov	r3, fp
 800899a:	4622      	mov	r2, r4
 800899c:	4629      	mov	r1, r5
 800899e:	4630      	mov	r0, r6
 80089a0:	f7ff ff93 	bl	80088ca <__sfputs_r>
 80089a4:	3001      	adds	r0, #1
 80089a6:	f000 80aa 	beq.w	8008afe <_vfiprintf_r+0x20e>
 80089aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ac:	445a      	add	r2, fp
 80089ae:	9209      	str	r2, [sp, #36]	; 0x24
 80089b0:	f89a 3000 	ldrb.w	r3, [sl]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 80a2 	beq.w	8008afe <_vfiprintf_r+0x20e>
 80089ba:	2300      	movs	r3, #0
 80089bc:	f04f 32ff 	mov.w	r2, #4294967295
 80089c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089c4:	f10a 0a01 	add.w	sl, sl, #1
 80089c8:	9304      	str	r3, [sp, #16]
 80089ca:	9307      	str	r3, [sp, #28]
 80089cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089d0:	931a      	str	r3, [sp, #104]	; 0x68
 80089d2:	4654      	mov	r4, sl
 80089d4:	2205      	movs	r2, #5
 80089d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089da:	4858      	ldr	r0, [pc, #352]	; (8008b3c <_vfiprintf_r+0x24c>)
 80089dc:	f7f7 fc20 	bl	8000220 <memchr>
 80089e0:	9a04      	ldr	r2, [sp, #16]
 80089e2:	b9d8      	cbnz	r0, 8008a1c <_vfiprintf_r+0x12c>
 80089e4:	06d1      	lsls	r1, r2, #27
 80089e6:	bf44      	itt	mi
 80089e8:	2320      	movmi	r3, #32
 80089ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ee:	0713      	lsls	r3, r2, #28
 80089f0:	bf44      	itt	mi
 80089f2:	232b      	movmi	r3, #43	; 0x2b
 80089f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089f8:	f89a 3000 	ldrb.w	r3, [sl]
 80089fc:	2b2a      	cmp	r3, #42	; 0x2a
 80089fe:	d015      	beq.n	8008a2c <_vfiprintf_r+0x13c>
 8008a00:	9a07      	ldr	r2, [sp, #28]
 8008a02:	4654      	mov	r4, sl
 8008a04:	2000      	movs	r0, #0
 8008a06:	f04f 0c0a 	mov.w	ip, #10
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a10:	3b30      	subs	r3, #48	; 0x30
 8008a12:	2b09      	cmp	r3, #9
 8008a14:	d94e      	bls.n	8008ab4 <_vfiprintf_r+0x1c4>
 8008a16:	b1b0      	cbz	r0, 8008a46 <_vfiprintf_r+0x156>
 8008a18:	9207      	str	r2, [sp, #28]
 8008a1a:	e014      	b.n	8008a46 <_vfiprintf_r+0x156>
 8008a1c:	eba0 0308 	sub.w	r3, r0, r8
 8008a20:	fa09 f303 	lsl.w	r3, r9, r3
 8008a24:	4313      	orrs	r3, r2
 8008a26:	9304      	str	r3, [sp, #16]
 8008a28:	46a2      	mov	sl, r4
 8008a2a:	e7d2      	b.n	80089d2 <_vfiprintf_r+0xe2>
 8008a2c:	9b03      	ldr	r3, [sp, #12]
 8008a2e:	1d19      	adds	r1, r3, #4
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	9103      	str	r1, [sp, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bfbb      	ittet	lt
 8008a38:	425b      	neglt	r3, r3
 8008a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8008a3e:	9307      	strge	r3, [sp, #28]
 8008a40:	9307      	strlt	r3, [sp, #28]
 8008a42:	bfb8      	it	lt
 8008a44:	9204      	strlt	r2, [sp, #16]
 8008a46:	7823      	ldrb	r3, [r4, #0]
 8008a48:	2b2e      	cmp	r3, #46	; 0x2e
 8008a4a:	d10c      	bne.n	8008a66 <_vfiprintf_r+0x176>
 8008a4c:	7863      	ldrb	r3, [r4, #1]
 8008a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a50:	d135      	bne.n	8008abe <_vfiprintf_r+0x1ce>
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	1d1a      	adds	r2, r3, #4
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	9203      	str	r2, [sp, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bfb8      	it	lt
 8008a5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a62:	3402      	adds	r4, #2
 8008a64:	9305      	str	r3, [sp, #20]
 8008a66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b4c <_vfiprintf_r+0x25c>
 8008a6a:	7821      	ldrb	r1, [r4, #0]
 8008a6c:	2203      	movs	r2, #3
 8008a6e:	4650      	mov	r0, sl
 8008a70:	f7f7 fbd6 	bl	8000220 <memchr>
 8008a74:	b140      	cbz	r0, 8008a88 <_vfiprintf_r+0x198>
 8008a76:	2340      	movs	r3, #64	; 0x40
 8008a78:	eba0 000a 	sub.w	r0, r0, sl
 8008a7c:	fa03 f000 	lsl.w	r0, r3, r0
 8008a80:	9b04      	ldr	r3, [sp, #16]
 8008a82:	4303      	orrs	r3, r0
 8008a84:	3401      	adds	r4, #1
 8008a86:	9304      	str	r3, [sp, #16]
 8008a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a8c:	482c      	ldr	r0, [pc, #176]	; (8008b40 <_vfiprintf_r+0x250>)
 8008a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a92:	2206      	movs	r2, #6
 8008a94:	f7f7 fbc4 	bl	8000220 <memchr>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d03f      	beq.n	8008b1c <_vfiprintf_r+0x22c>
 8008a9c:	4b29      	ldr	r3, [pc, #164]	; (8008b44 <_vfiprintf_r+0x254>)
 8008a9e:	bb1b      	cbnz	r3, 8008ae8 <_vfiprintf_r+0x1f8>
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	3307      	adds	r3, #7
 8008aa4:	f023 0307 	bic.w	r3, r3, #7
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	9303      	str	r3, [sp, #12]
 8008aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aae:	443b      	add	r3, r7
 8008ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab2:	e767      	b.n	8008984 <_vfiprintf_r+0x94>
 8008ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ab8:	460c      	mov	r4, r1
 8008aba:	2001      	movs	r0, #1
 8008abc:	e7a5      	b.n	8008a0a <_vfiprintf_r+0x11a>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	3401      	adds	r4, #1
 8008ac2:	9305      	str	r3, [sp, #20]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	f04f 0c0a 	mov.w	ip, #10
 8008aca:	4620      	mov	r0, r4
 8008acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ad0:	3a30      	subs	r2, #48	; 0x30
 8008ad2:	2a09      	cmp	r2, #9
 8008ad4:	d903      	bls.n	8008ade <_vfiprintf_r+0x1ee>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0c5      	beq.n	8008a66 <_vfiprintf_r+0x176>
 8008ada:	9105      	str	r1, [sp, #20]
 8008adc:	e7c3      	b.n	8008a66 <_vfiprintf_r+0x176>
 8008ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e7f0      	b.n	8008aca <_vfiprintf_r+0x1da>
 8008ae8:	ab03      	add	r3, sp, #12
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	462a      	mov	r2, r5
 8008aee:	4b16      	ldr	r3, [pc, #88]	; (8008b48 <_vfiprintf_r+0x258>)
 8008af0:	a904      	add	r1, sp, #16
 8008af2:	4630      	mov	r0, r6
 8008af4:	f7fd fc8a 	bl	800640c <_printf_float>
 8008af8:	4607      	mov	r7, r0
 8008afa:	1c78      	adds	r0, r7, #1
 8008afc:	d1d6      	bne.n	8008aac <_vfiprintf_r+0x1bc>
 8008afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b00:	07d9      	lsls	r1, r3, #31
 8008b02:	d405      	bmi.n	8008b10 <_vfiprintf_r+0x220>
 8008b04:	89ab      	ldrh	r3, [r5, #12]
 8008b06:	059a      	lsls	r2, r3, #22
 8008b08:	d402      	bmi.n	8008b10 <_vfiprintf_r+0x220>
 8008b0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b0c:	f7ff f9d0 	bl	8007eb0 <__retarget_lock_release_recursive>
 8008b10:	89ab      	ldrh	r3, [r5, #12]
 8008b12:	065b      	lsls	r3, r3, #25
 8008b14:	f53f af12 	bmi.w	800893c <_vfiprintf_r+0x4c>
 8008b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b1a:	e711      	b.n	8008940 <_vfiprintf_r+0x50>
 8008b1c:	ab03      	add	r3, sp, #12
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	462a      	mov	r2, r5
 8008b22:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <_vfiprintf_r+0x258>)
 8008b24:	a904      	add	r1, sp, #16
 8008b26:	4630      	mov	r0, r6
 8008b28:	f7fd ff14 	bl	8006954 <_printf_i>
 8008b2c:	e7e4      	b.n	8008af8 <_vfiprintf_r+0x208>
 8008b2e:	bf00      	nop
 8008b30:	0800ba3c 	.word	0x0800ba3c
 8008b34:	0800ba5c 	.word	0x0800ba5c
 8008b38:	0800ba1c 	.word	0x0800ba1c
 8008b3c:	0800bbd4 	.word	0x0800bbd4
 8008b40:	0800bbde 	.word	0x0800bbde
 8008b44:	0800640d 	.word	0x0800640d
 8008b48:	080088cb 	.word	0x080088cb
 8008b4c:	0800bbda 	.word	0x0800bbda

08008b50 <_sbrk_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4d06      	ldr	r5, [pc, #24]	; (8008b6c <_sbrk_r+0x1c>)
 8008b54:	2300      	movs	r3, #0
 8008b56:	4604      	mov	r4, r0
 8008b58:	4608      	mov	r0, r1
 8008b5a:	602b      	str	r3, [r5, #0]
 8008b5c:	f7fa fcb2 	bl	80034c4 <_sbrk>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d102      	bne.n	8008b6a <_sbrk_r+0x1a>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	b103      	cbz	r3, 8008b6a <_sbrk_r+0x1a>
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	20000348 	.word	0x20000348

08008b70 <__sread>:
 8008b70:	b510      	push	{r4, lr}
 8008b72:	460c      	mov	r4, r1
 8008b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b78:	f000 f8e2 	bl	8008d40 <_read_r>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	bfab      	itete	ge
 8008b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b82:	89a3      	ldrhlt	r3, [r4, #12]
 8008b84:	181b      	addge	r3, r3, r0
 8008b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b8a:	bfac      	ite	ge
 8008b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b8e:	81a3      	strhlt	r3, [r4, #12]
 8008b90:	bd10      	pop	{r4, pc}

08008b92 <__swrite>:
 8008b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b96:	461f      	mov	r7, r3
 8008b98:	898b      	ldrh	r3, [r1, #12]
 8008b9a:	05db      	lsls	r3, r3, #23
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	4616      	mov	r6, r2
 8008ba2:	d505      	bpl.n	8008bb0 <__swrite+0x1e>
 8008ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba8:	2302      	movs	r3, #2
 8008baa:	2200      	movs	r2, #0
 8008bac:	f000 f898 	bl	8008ce0 <_lseek_r>
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bba:	81a3      	strh	r3, [r4, #12]
 8008bbc:	4632      	mov	r2, r6
 8008bbe:	463b      	mov	r3, r7
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc6:	f000 b817 	b.w	8008bf8 <_write_r>

08008bca <__sseek>:
 8008bca:	b510      	push	{r4, lr}
 8008bcc:	460c      	mov	r4, r1
 8008bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd2:	f000 f885 	bl	8008ce0 <_lseek_r>
 8008bd6:	1c43      	adds	r3, r0, #1
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	bf15      	itete	ne
 8008bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008be6:	81a3      	strheq	r3, [r4, #12]
 8008be8:	bf18      	it	ne
 8008bea:	81a3      	strhne	r3, [r4, #12]
 8008bec:	bd10      	pop	{r4, pc}

08008bee <__sclose>:
 8008bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf2:	f000 b831 	b.w	8008c58 <_close_r>
	...

08008bf8 <_write_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d07      	ldr	r5, [pc, #28]	; (8008c18 <_write_r+0x20>)
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	4608      	mov	r0, r1
 8008c00:	4611      	mov	r1, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	602a      	str	r2, [r5, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f7fa fac2 	bl	8003190 <_write>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d102      	bne.n	8008c16 <_write_r+0x1e>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	b103      	cbz	r3, 8008c16 <_write_r+0x1e>
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	20000348 	.word	0x20000348

08008c1c <__assert_func>:
 8008c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c1e:	4614      	mov	r4, r2
 8008c20:	461a      	mov	r2, r3
 8008c22:	4b09      	ldr	r3, [pc, #36]	; (8008c48 <__assert_func+0x2c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4605      	mov	r5, r0
 8008c28:	68d8      	ldr	r0, [r3, #12]
 8008c2a:	b14c      	cbz	r4, 8008c40 <__assert_func+0x24>
 8008c2c:	4b07      	ldr	r3, [pc, #28]	; (8008c4c <__assert_func+0x30>)
 8008c2e:	9100      	str	r1, [sp, #0]
 8008c30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c34:	4906      	ldr	r1, [pc, #24]	; (8008c50 <__assert_func+0x34>)
 8008c36:	462b      	mov	r3, r5
 8008c38:	f000 f81e 	bl	8008c78 <fiprintf>
 8008c3c:	f000 f89f 	bl	8008d7e <abort>
 8008c40:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <__assert_func+0x38>)
 8008c42:	461c      	mov	r4, r3
 8008c44:	e7f3      	b.n	8008c2e <__assert_func+0x12>
 8008c46:	bf00      	nop
 8008c48:	2000000c 	.word	0x2000000c
 8008c4c:	0800bbe5 	.word	0x0800bbe5
 8008c50:	0800bbf2 	.word	0x0800bbf2
 8008c54:	0800bc20 	.word	0x0800bc20

08008c58 <_close_r>:
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	4d06      	ldr	r5, [pc, #24]	; (8008c74 <_close_r+0x1c>)
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	4604      	mov	r4, r0
 8008c60:	4608      	mov	r0, r1
 8008c62:	602b      	str	r3, [r5, #0]
 8008c64:	f7fa fbf9 	bl	800345a <_close>
 8008c68:	1c43      	adds	r3, r0, #1
 8008c6a:	d102      	bne.n	8008c72 <_close_r+0x1a>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	b103      	cbz	r3, 8008c72 <_close_r+0x1a>
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	20000348 	.word	0x20000348

08008c78 <fiprintf>:
 8008c78:	b40e      	push	{r1, r2, r3}
 8008c7a:	b503      	push	{r0, r1, lr}
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	ab03      	add	r3, sp, #12
 8008c80:	4805      	ldr	r0, [pc, #20]	; (8008c98 <fiprintf+0x20>)
 8008c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c86:	6800      	ldr	r0, [r0, #0]
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	f7ff fe31 	bl	80088f0 <_vfiprintf_r>
 8008c8e:	b002      	add	sp, #8
 8008c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c94:	b003      	add	sp, #12
 8008c96:	4770      	bx	lr
 8008c98:	2000000c 	.word	0x2000000c

08008c9c <_fstat_r>:
 8008c9c:	b538      	push	{r3, r4, r5, lr}
 8008c9e:	4d07      	ldr	r5, [pc, #28]	; (8008cbc <_fstat_r+0x20>)
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	602b      	str	r3, [r5, #0]
 8008caa:	f7fa fbe2 	bl	8003472 <_fstat>
 8008cae:	1c43      	adds	r3, r0, #1
 8008cb0:	d102      	bne.n	8008cb8 <_fstat_r+0x1c>
 8008cb2:	682b      	ldr	r3, [r5, #0]
 8008cb4:	b103      	cbz	r3, 8008cb8 <_fstat_r+0x1c>
 8008cb6:	6023      	str	r3, [r4, #0]
 8008cb8:	bd38      	pop	{r3, r4, r5, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000348 	.word	0x20000348

08008cc0 <_isatty_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4d06      	ldr	r5, [pc, #24]	; (8008cdc <_isatty_r+0x1c>)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	4608      	mov	r0, r1
 8008cca:	602b      	str	r3, [r5, #0]
 8008ccc:	f7fa fbe1 	bl	8003492 <_isatty>
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d102      	bne.n	8008cda <_isatty_r+0x1a>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	b103      	cbz	r3, 8008cda <_isatty_r+0x1a>
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	20000348 	.word	0x20000348

08008ce0 <_lseek_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4d07      	ldr	r5, [pc, #28]	; (8008d00 <_lseek_r+0x20>)
 8008ce4:	4604      	mov	r4, r0
 8008ce6:	4608      	mov	r0, r1
 8008ce8:	4611      	mov	r1, r2
 8008cea:	2200      	movs	r2, #0
 8008cec:	602a      	str	r2, [r5, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f7fa fbda 	bl	80034a8 <_lseek>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d102      	bne.n	8008cfe <_lseek_r+0x1e>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	b103      	cbz	r3, 8008cfe <_lseek_r+0x1e>
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}
 8008d00:	20000348 	.word	0x20000348

08008d04 <__ascii_mbtowc>:
 8008d04:	b082      	sub	sp, #8
 8008d06:	b901      	cbnz	r1, 8008d0a <__ascii_mbtowc+0x6>
 8008d08:	a901      	add	r1, sp, #4
 8008d0a:	b142      	cbz	r2, 8008d1e <__ascii_mbtowc+0x1a>
 8008d0c:	b14b      	cbz	r3, 8008d22 <__ascii_mbtowc+0x1e>
 8008d0e:	7813      	ldrb	r3, [r2, #0]
 8008d10:	600b      	str	r3, [r1, #0]
 8008d12:	7812      	ldrb	r2, [r2, #0]
 8008d14:	1e10      	subs	r0, r2, #0
 8008d16:	bf18      	it	ne
 8008d18:	2001      	movne	r0, #1
 8008d1a:	b002      	add	sp, #8
 8008d1c:	4770      	bx	lr
 8008d1e:	4610      	mov	r0, r2
 8008d20:	e7fb      	b.n	8008d1a <__ascii_mbtowc+0x16>
 8008d22:	f06f 0001 	mvn.w	r0, #1
 8008d26:	e7f8      	b.n	8008d1a <__ascii_mbtowc+0x16>

08008d28 <__malloc_lock>:
 8008d28:	4801      	ldr	r0, [pc, #4]	; (8008d30 <__malloc_lock+0x8>)
 8008d2a:	f7ff b8c0 	b.w	8007eae <__retarget_lock_acquire_recursive>
 8008d2e:	bf00      	nop
 8008d30:	2000033c 	.word	0x2000033c

08008d34 <__malloc_unlock>:
 8008d34:	4801      	ldr	r0, [pc, #4]	; (8008d3c <__malloc_unlock+0x8>)
 8008d36:	f7ff b8bb 	b.w	8007eb0 <__retarget_lock_release_recursive>
 8008d3a:	bf00      	nop
 8008d3c:	2000033c 	.word	0x2000033c

08008d40 <_read_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4d07      	ldr	r5, [pc, #28]	; (8008d60 <_read_r+0x20>)
 8008d44:	4604      	mov	r4, r0
 8008d46:	4608      	mov	r0, r1
 8008d48:	4611      	mov	r1, r2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	602a      	str	r2, [r5, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f7fa fb66 	bl	8003420 <_read>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_read_r+0x1e>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_read_r+0x1e>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	20000348 	.word	0x20000348

08008d64 <__ascii_wctomb>:
 8008d64:	b149      	cbz	r1, 8008d7a <__ascii_wctomb+0x16>
 8008d66:	2aff      	cmp	r2, #255	; 0xff
 8008d68:	bf85      	ittet	hi
 8008d6a:	238a      	movhi	r3, #138	; 0x8a
 8008d6c:	6003      	strhi	r3, [r0, #0]
 8008d6e:	700a      	strbls	r2, [r1, #0]
 8008d70:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d74:	bf98      	it	ls
 8008d76:	2001      	movls	r0, #1
 8008d78:	4770      	bx	lr
 8008d7a:	4608      	mov	r0, r1
 8008d7c:	4770      	bx	lr

08008d7e <abort>:
 8008d7e:	b508      	push	{r3, lr}
 8008d80:	2006      	movs	r0, #6
 8008d82:	f000 f82b 	bl	8008ddc <raise>
 8008d86:	2001      	movs	r0, #1
 8008d88:	f7fa fb40 	bl	800340c <_exit>

08008d8c <_raise_r>:
 8008d8c:	291f      	cmp	r1, #31
 8008d8e:	b538      	push	{r3, r4, r5, lr}
 8008d90:	4604      	mov	r4, r0
 8008d92:	460d      	mov	r5, r1
 8008d94:	d904      	bls.n	8008da0 <_raise_r+0x14>
 8008d96:	2316      	movs	r3, #22
 8008d98:	6003      	str	r3, [r0, #0]
 8008d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008da2:	b112      	cbz	r2, 8008daa <_raise_r+0x1e>
 8008da4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008da8:	b94b      	cbnz	r3, 8008dbe <_raise_r+0x32>
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 f830 	bl	8008e10 <_getpid_r>
 8008db0:	462a      	mov	r2, r5
 8008db2:	4601      	mov	r1, r0
 8008db4:	4620      	mov	r0, r4
 8008db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dba:	f000 b817 	b.w	8008dec <_kill_r>
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d00a      	beq.n	8008dd8 <_raise_r+0x4c>
 8008dc2:	1c59      	adds	r1, r3, #1
 8008dc4:	d103      	bne.n	8008dce <_raise_r+0x42>
 8008dc6:	2316      	movs	r3, #22
 8008dc8:	6003      	str	r3, [r0, #0]
 8008dca:	2001      	movs	r0, #1
 8008dcc:	e7e7      	b.n	8008d9e <_raise_r+0x12>
 8008dce:	2400      	movs	r4, #0
 8008dd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	4798      	blx	r3
 8008dd8:	2000      	movs	r0, #0
 8008dda:	e7e0      	b.n	8008d9e <_raise_r+0x12>

08008ddc <raise>:
 8008ddc:	4b02      	ldr	r3, [pc, #8]	; (8008de8 <raise+0xc>)
 8008dde:	4601      	mov	r1, r0
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	f7ff bfd3 	b.w	8008d8c <_raise_r>
 8008de6:	bf00      	nop
 8008de8:	2000000c 	.word	0x2000000c

08008dec <_kill_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	4d07      	ldr	r5, [pc, #28]	; (8008e0c <_kill_r+0x20>)
 8008df0:	2300      	movs	r3, #0
 8008df2:	4604      	mov	r4, r0
 8008df4:	4608      	mov	r0, r1
 8008df6:	4611      	mov	r1, r2
 8008df8:	602b      	str	r3, [r5, #0]
 8008dfa:	f7fa faf7 	bl	80033ec <_kill>
 8008dfe:	1c43      	adds	r3, r0, #1
 8008e00:	d102      	bne.n	8008e08 <_kill_r+0x1c>
 8008e02:	682b      	ldr	r3, [r5, #0]
 8008e04:	b103      	cbz	r3, 8008e08 <_kill_r+0x1c>
 8008e06:	6023      	str	r3, [r4, #0]
 8008e08:	bd38      	pop	{r3, r4, r5, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20000348 	.word	0x20000348

08008e10 <_getpid_r>:
 8008e10:	f7fa bae4 	b.w	80033dc <_getpid>

08008e14 <pow>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	ed2d 8b02 	vpush	{d8}
 8008e1a:	eeb0 8a40 	vmov.f32	s16, s0
 8008e1e:	eef0 8a60 	vmov.f32	s17, s1
 8008e22:	ec55 4b11 	vmov	r4, r5, d1
 8008e26:	f000 f867 	bl	8008ef8 <__ieee754_pow>
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	462b      	mov	r3, r5
 8008e2e:	4620      	mov	r0, r4
 8008e30:	4629      	mov	r1, r5
 8008e32:	ec57 6b10 	vmov	r6, r7, d0
 8008e36:	f7f7 fe99 	bl	8000b6c <__aeabi_dcmpun>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	d13b      	bne.n	8008eb6 <pow+0xa2>
 8008e3e:	ec51 0b18 	vmov	r0, r1, d8
 8008e42:	2200      	movs	r2, #0
 8008e44:	2300      	movs	r3, #0
 8008e46:	f7f7 fe5f 	bl	8000b08 <__aeabi_dcmpeq>
 8008e4a:	b1b8      	cbz	r0, 8008e7c <pow+0x68>
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2300      	movs	r3, #0
 8008e50:	4620      	mov	r0, r4
 8008e52:	4629      	mov	r1, r5
 8008e54:	f7f7 fe58 	bl	8000b08 <__aeabi_dcmpeq>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d146      	bne.n	8008eea <pow+0xd6>
 8008e5c:	ec45 4b10 	vmov	d0, r4, r5
 8008e60:	f000 fe63 	bl	8009b2a <finite>
 8008e64:	b338      	cbz	r0, 8008eb6 <pow+0xa2>
 8008e66:	2200      	movs	r2, #0
 8008e68:	2300      	movs	r3, #0
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	f7f7 fe55 	bl	8000b1c <__aeabi_dcmplt>
 8008e72:	b300      	cbz	r0, 8008eb6 <pow+0xa2>
 8008e74:	f7fd f9f8 	bl	8006268 <__errno>
 8008e78:	2322      	movs	r3, #34	; 0x22
 8008e7a:	e01b      	b.n	8008eb4 <pow+0xa0>
 8008e7c:	ec47 6b10 	vmov	d0, r6, r7
 8008e80:	f000 fe53 	bl	8009b2a <finite>
 8008e84:	b9e0      	cbnz	r0, 8008ec0 <pow+0xac>
 8008e86:	eeb0 0a48 	vmov.f32	s0, s16
 8008e8a:	eef0 0a68 	vmov.f32	s1, s17
 8008e8e:	f000 fe4c 	bl	8009b2a <finite>
 8008e92:	b1a8      	cbz	r0, 8008ec0 <pow+0xac>
 8008e94:	ec45 4b10 	vmov	d0, r4, r5
 8008e98:	f000 fe47 	bl	8009b2a <finite>
 8008e9c:	b180      	cbz	r0, 8008ec0 <pow+0xac>
 8008e9e:	4632      	mov	r2, r6
 8008ea0:	463b      	mov	r3, r7
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	4639      	mov	r1, r7
 8008ea6:	f7f7 fe61 	bl	8000b6c <__aeabi_dcmpun>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d0e2      	beq.n	8008e74 <pow+0x60>
 8008eae:	f7fd f9db 	bl	8006268 <__errno>
 8008eb2:	2321      	movs	r3, #33	; 0x21
 8008eb4:	6003      	str	r3, [r0, #0]
 8008eb6:	ecbd 8b02 	vpop	{d8}
 8008eba:	ec47 6b10 	vmov	d0, r6, r7
 8008ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	f7f7 fe1e 	bl	8000b08 <__aeabi_dcmpeq>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d0f2      	beq.n	8008eb6 <pow+0xa2>
 8008ed0:	eeb0 0a48 	vmov.f32	s0, s16
 8008ed4:	eef0 0a68 	vmov.f32	s1, s17
 8008ed8:	f000 fe27 	bl	8009b2a <finite>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d0ea      	beq.n	8008eb6 <pow+0xa2>
 8008ee0:	ec45 4b10 	vmov	d0, r4, r5
 8008ee4:	f000 fe21 	bl	8009b2a <finite>
 8008ee8:	e7c3      	b.n	8008e72 <pow+0x5e>
 8008eea:	4f01      	ldr	r7, [pc, #4]	; (8008ef0 <pow+0xdc>)
 8008eec:	2600      	movs	r6, #0
 8008eee:	e7e2      	b.n	8008eb6 <pow+0xa2>
 8008ef0:	3ff00000 	.word	0x3ff00000
 8008ef4:	00000000 	.word	0x00000000

08008ef8 <__ieee754_pow>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	ed2d 8b06 	vpush	{d8-d10}
 8008f00:	b089      	sub	sp, #36	; 0x24
 8008f02:	ed8d 1b00 	vstr	d1, [sp]
 8008f06:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008f0a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008f0e:	ea58 0102 	orrs.w	r1, r8, r2
 8008f12:	ec57 6b10 	vmov	r6, r7, d0
 8008f16:	d115      	bne.n	8008f44 <__ieee754_pow+0x4c>
 8008f18:	19b3      	adds	r3, r6, r6
 8008f1a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008f1e:	4152      	adcs	r2, r2
 8008f20:	4299      	cmp	r1, r3
 8008f22:	4b89      	ldr	r3, [pc, #548]	; (8009148 <__ieee754_pow+0x250>)
 8008f24:	4193      	sbcs	r3, r2
 8008f26:	f080 84d2 	bcs.w	80098ce <__ieee754_pow+0x9d6>
 8008f2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f2e:	4630      	mov	r0, r6
 8008f30:	4639      	mov	r1, r7
 8008f32:	f7f7 f9cb 	bl	80002cc <__adddf3>
 8008f36:	ec41 0b10 	vmov	d0, r0, r1
 8008f3a:	b009      	add	sp, #36	; 0x24
 8008f3c:	ecbd 8b06 	vpop	{d8-d10}
 8008f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f44:	4b81      	ldr	r3, [pc, #516]	; (800914c <__ieee754_pow+0x254>)
 8008f46:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008f4a:	429c      	cmp	r4, r3
 8008f4c:	ee10 aa10 	vmov	sl, s0
 8008f50:	463d      	mov	r5, r7
 8008f52:	dc06      	bgt.n	8008f62 <__ieee754_pow+0x6a>
 8008f54:	d101      	bne.n	8008f5a <__ieee754_pow+0x62>
 8008f56:	2e00      	cmp	r6, #0
 8008f58:	d1e7      	bne.n	8008f2a <__ieee754_pow+0x32>
 8008f5a:	4598      	cmp	r8, r3
 8008f5c:	dc01      	bgt.n	8008f62 <__ieee754_pow+0x6a>
 8008f5e:	d10f      	bne.n	8008f80 <__ieee754_pow+0x88>
 8008f60:	b172      	cbz	r2, 8008f80 <__ieee754_pow+0x88>
 8008f62:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008f66:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008f6a:	ea55 050a 	orrs.w	r5, r5, sl
 8008f6e:	d1dc      	bne.n	8008f2a <__ieee754_pow+0x32>
 8008f70:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f74:	18db      	adds	r3, r3, r3
 8008f76:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008f7a:	4152      	adcs	r2, r2
 8008f7c:	429d      	cmp	r5, r3
 8008f7e:	e7d0      	b.n	8008f22 <__ieee754_pow+0x2a>
 8008f80:	2d00      	cmp	r5, #0
 8008f82:	da3b      	bge.n	8008ffc <__ieee754_pow+0x104>
 8008f84:	4b72      	ldr	r3, [pc, #456]	; (8009150 <__ieee754_pow+0x258>)
 8008f86:	4598      	cmp	r8, r3
 8008f88:	dc51      	bgt.n	800902e <__ieee754_pow+0x136>
 8008f8a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008f8e:	4598      	cmp	r8, r3
 8008f90:	f340 84ac 	ble.w	80098ec <__ieee754_pow+0x9f4>
 8008f94:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008f98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f9c:	2b14      	cmp	r3, #20
 8008f9e:	dd0f      	ble.n	8008fc0 <__ieee754_pow+0xc8>
 8008fa0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008fa4:	fa22 f103 	lsr.w	r1, r2, r3
 8008fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fac:	4293      	cmp	r3, r2
 8008fae:	f040 849d 	bne.w	80098ec <__ieee754_pow+0x9f4>
 8008fb2:	f001 0101 	and.w	r1, r1, #1
 8008fb6:	f1c1 0302 	rsb	r3, r1, #2
 8008fba:	9304      	str	r3, [sp, #16]
 8008fbc:	b182      	cbz	r2, 8008fe0 <__ieee754_pow+0xe8>
 8008fbe:	e05f      	b.n	8009080 <__ieee754_pow+0x188>
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	d15b      	bne.n	800907c <__ieee754_pow+0x184>
 8008fc4:	f1c3 0314 	rsb	r3, r3, #20
 8008fc8:	fa48 f103 	asr.w	r1, r8, r3
 8008fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd0:	4543      	cmp	r3, r8
 8008fd2:	f040 8488 	bne.w	80098e6 <__ieee754_pow+0x9ee>
 8008fd6:	f001 0101 	and.w	r1, r1, #1
 8008fda:	f1c1 0302 	rsb	r3, r1, #2
 8008fde:	9304      	str	r3, [sp, #16]
 8008fe0:	4b5c      	ldr	r3, [pc, #368]	; (8009154 <__ieee754_pow+0x25c>)
 8008fe2:	4598      	cmp	r8, r3
 8008fe4:	d132      	bne.n	800904c <__ieee754_pow+0x154>
 8008fe6:	f1b9 0f00 	cmp.w	r9, #0
 8008fea:	f280 8478 	bge.w	80098de <__ieee754_pow+0x9e6>
 8008fee:	4959      	ldr	r1, [pc, #356]	; (8009154 <__ieee754_pow+0x25c>)
 8008ff0:	4632      	mov	r2, r6
 8008ff2:	463b      	mov	r3, r7
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	f7f7 fc49 	bl	800088c <__aeabi_ddiv>
 8008ffa:	e79c      	b.n	8008f36 <__ieee754_pow+0x3e>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	9304      	str	r3, [sp, #16]
 8009000:	2a00      	cmp	r2, #0
 8009002:	d13d      	bne.n	8009080 <__ieee754_pow+0x188>
 8009004:	4b51      	ldr	r3, [pc, #324]	; (800914c <__ieee754_pow+0x254>)
 8009006:	4598      	cmp	r8, r3
 8009008:	d1ea      	bne.n	8008fe0 <__ieee754_pow+0xe8>
 800900a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800900e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009012:	ea53 030a 	orrs.w	r3, r3, sl
 8009016:	f000 845a 	beq.w	80098ce <__ieee754_pow+0x9d6>
 800901a:	4b4f      	ldr	r3, [pc, #316]	; (8009158 <__ieee754_pow+0x260>)
 800901c:	429c      	cmp	r4, r3
 800901e:	dd08      	ble.n	8009032 <__ieee754_pow+0x13a>
 8009020:	f1b9 0f00 	cmp.w	r9, #0
 8009024:	f2c0 8457 	blt.w	80098d6 <__ieee754_pow+0x9de>
 8009028:	e9dd 0100 	ldrd	r0, r1, [sp]
 800902c:	e783      	b.n	8008f36 <__ieee754_pow+0x3e>
 800902e:	2302      	movs	r3, #2
 8009030:	e7e5      	b.n	8008ffe <__ieee754_pow+0x106>
 8009032:	f1b9 0f00 	cmp.w	r9, #0
 8009036:	f04f 0000 	mov.w	r0, #0
 800903a:	f04f 0100 	mov.w	r1, #0
 800903e:	f6bf af7a 	bge.w	8008f36 <__ieee754_pow+0x3e>
 8009042:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009046:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800904a:	e774      	b.n	8008f36 <__ieee754_pow+0x3e>
 800904c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009050:	d106      	bne.n	8009060 <__ieee754_pow+0x168>
 8009052:	4632      	mov	r2, r6
 8009054:	463b      	mov	r3, r7
 8009056:	4630      	mov	r0, r6
 8009058:	4639      	mov	r1, r7
 800905a:	f7f7 faed 	bl	8000638 <__aeabi_dmul>
 800905e:	e76a      	b.n	8008f36 <__ieee754_pow+0x3e>
 8009060:	4b3e      	ldr	r3, [pc, #248]	; (800915c <__ieee754_pow+0x264>)
 8009062:	4599      	cmp	r9, r3
 8009064:	d10c      	bne.n	8009080 <__ieee754_pow+0x188>
 8009066:	2d00      	cmp	r5, #0
 8009068:	db0a      	blt.n	8009080 <__ieee754_pow+0x188>
 800906a:	ec47 6b10 	vmov	d0, r6, r7
 800906e:	b009      	add	sp, #36	; 0x24
 8009070:	ecbd 8b06 	vpop	{d8-d10}
 8009074:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	f000 bc6c 	b.w	8009954 <__ieee754_sqrt>
 800907c:	2300      	movs	r3, #0
 800907e:	9304      	str	r3, [sp, #16]
 8009080:	ec47 6b10 	vmov	d0, r6, r7
 8009084:	f000 fd48 	bl	8009b18 <fabs>
 8009088:	ec51 0b10 	vmov	r0, r1, d0
 800908c:	f1ba 0f00 	cmp.w	sl, #0
 8009090:	d129      	bne.n	80090e6 <__ieee754_pow+0x1ee>
 8009092:	b124      	cbz	r4, 800909e <__ieee754_pow+0x1a6>
 8009094:	4b2f      	ldr	r3, [pc, #188]	; (8009154 <__ieee754_pow+0x25c>)
 8009096:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800909a:	429a      	cmp	r2, r3
 800909c:	d123      	bne.n	80090e6 <__ieee754_pow+0x1ee>
 800909e:	f1b9 0f00 	cmp.w	r9, #0
 80090a2:	da05      	bge.n	80090b0 <__ieee754_pow+0x1b8>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	2000      	movs	r0, #0
 80090aa:	492a      	ldr	r1, [pc, #168]	; (8009154 <__ieee754_pow+0x25c>)
 80090ac:	f7f7 fbee 	bl	800088c <__aeabi_ddiv>
 80090b0:	2d00      	cmp	r5, #0
 80090b2:	f6bf af40 	bge.w	8008f36 <__ieee754_pow+0x3e>
 80090b6:	9b04      	ldr	r3, [sp, #16]
 80090b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80090bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80090c0:	4323      	orrs	r3, r4
 80090c2:	d108      	bne.n	80090d6 <__ieee754_pow+0x1de>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4610      	mov	r0, r2
 80090ca:	4619      	mov	r1, r3
 80090cc:	f7f7 f8fc 	bl	80002c8 <__aeabi_dsub>
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	e78f      	b.n	8008ff6 <__ieee754_pow+0xfe>
 80090d6:	9b04      	ldr	r3, [sp, #16]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	f47f af2c 	bne.w	8008f36 <__ieee754_pow+0x3e>
 80090de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090e2:	4619      	mov	r1, r3
 80090e4:	e727      	b.n	8008f36 <__ieee754_pow+0x3e>
 80090e6:	0feb      	lsrs	r3, r5, #31
 80090e8:	3b01      	subs	r3, #1
 80090ea:	9306      	str	r3, [sp, #24]
 80090ec:	9a06      	ldr	r2, [sp, #24]
 80090ee:	9b04      	ldr	r3, [sp, #16]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	d102      	bne.n	80090fa <__ieee754_pow+0x202>
 80090f4:	4632      	mov	r2, r6
 80090f6:	463b      	mov	r3, r7
 80090f8:	e7e6      	b.n	80090c8 <__ieee754_pow+0x1d0>
 80090fa:	4b19      	ldr	r3, [pc, #100]	; (8009160 <__ieee754_pow+0x268>)
 80090fc:	4598      	cmp	r8, r3
 80090fe:	f340 80fb 	ble.w	80092f8 <__ieee754_pow+0x400>
 8009102:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009106:	4598      	cmp	r8, r3
 8009108:	4b13      	ldr	r3, [pc, #76]	; (8009158 <__ieee754_pow+0x260>)
 800910a:	dd0c      	ble.n	8009126 <__ieee754_pow+0x22e>
 800910c:	429c      	cmp	r4, r3
 800910e:	dc0f      	bgt.n	8009130 <__ieee754_pow+0x238>
 8009110:	f1b9 0f00 	cmp.w	r9, #0
 8009114:	da0f      	bge.n	8009136 <__ieee754_pow+0x23e>
 8009116:	2000      	movs	r0, #0
 8009118:	b009      	add	sp, #36	; 0x24
 800911a:	ecbd 8b06 	vpop	{d8-d10}
 800911e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009122:	f000 bcf0 	b.w	8009b06 <__math_oflow>
 8009126:	429c      	cmp	r4, r3
 8009128:	dbf2      	blt.n	8009110 <__ieee754_pow+0x218>
 800912a:	4b0a      	ldr	r3, [pc, #40]	; (8009154 <__ieee754_pow+0x25c>)
 800912c:	429c      	cmp	r4, r3
 800912e:	dd19      	ble.n	8009164 <__ieee754_pow+0x26c>
 8009130:	f1b9 0f00 	cmp.w	r9, #0
 8009134:	dcef      	bgt.n	8009116 <__ieee754_pow+0x21e>
 8009136:	2000      	movs	r0, #0
 8009138:	b009      	add	sp, #36	; 0x24
 800913a:	ecbd 8b06 	vpop	{d8-d10}
 800913e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009142:	f000 bcd7 	b.w	8009af4 <__math_uflow>
 8009146:	bf00      	nop
 8009148:	fff00000 	.word	0xfff00000
 800914c:	7ff00000 	.word	0x7ff00000
 8009150:	433fffff 	.word	0x433fffff
 8009154:	3ff00000 	.word	0x3ff00000
 8009158:	3fefffff 	.word	0x3fefffff
 800915c:	3fe00000 	.word	0x3fe00000
 8009160:	41e00000 	.word	0x41e00000
 8009164:	4b60      	ldr	r3, [pc, #384]	; (80092e8 <__ieee754_pow+0x3f0>)
 8009166:	2200      	movs	r2, #0
 8009168:	f7f7 f8ae 	bl	80002c8 <__aeabi_dsub>
 800916c:	a354      	add	r3, pc, #336	; (adr r3, 80092c0 <__ieee754_pow+0x3c8>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	4604      	mov	r4, r0
 8009174:	460d      	mov	r5, r1
 8009176:	f7f7 fa5f 	bl	8000638 <__aeabi_dmul>
 800917a:	a353      	add	r3, pc, #332	; (adr r3, 80092c8 <__ieee754_pow+0x3d0>)
 800917c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009180:	4606      	mov	r6, r0
 8009182:	460f      	mov	r7, r1
 8009184:	4620      	mov	r0, r4
 8009186:	4629      	mov	r1, r5
 8009188:	f7f7 fa56 	bl	8000638 <__aeabi_dmul>
 800918c:	4b57      	ldr	r3, [pc, #348]	; (80092ec <__ieee754_pow+0x3f4>)
 800918e:	4682      	mov	sl, r0
 8009190:	468b      	mov	fp, r1
 8009192:	2200      	movs	r2, #0
 8009194:	4620      	mov	r0, r4
 8009196:	4629      	mov	r1, r5
 8009198:	f7f7 fa4e 	bl	8000638 <__aeabi_dmul>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	a14b      	add	r1, pc, #300	; (adr r1, 80092d0 <__ieee754_pow+0x3d8>)
 80091a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091a6:	f7f7 f88f 	bl	80002c8 <__aeabi_dsub>
 80091aa:	4622      	mov	r2, r4
 80091ac:	462b      	mov	r3, r5
 80091ae:	f7f7 fa43 	bl	8000638 <__aeabi_dmul>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	2000      	movs	r0, #0
 80091b8:	494d      	ldr	r1, [pc, #308]	; (80092f0 <__ieee754_pow+0x3f8>)
 80091ba:	f7f7 f885 	bl	80002c8 <__aeabi_dsub>
 80091be:	4622      	mov	r2, r4
 80091c0:	4680      	mov	r8, r0
 80091c2:	4689      	mov	r9, r1
 80091c4:	462b      	mov	r3, r5
 80091c6:	4620      	mov	r0, r4
 80091c8:	4629      	mov	r1, r5
 80091ca:	f7f7 fa35 	bl	8000638 <__aeabi_dmul>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4640      	mov	r0, r8
 80091d4:	4649      	mov	r1, r9
 80091d6:	f7f7 fa2f 	bl	8000638 <__aeabi_dmul>
 80091da:	a33f      	add	r3, pc, #252	; (adr r3, 80092d8 <__ieee754_pow+0x3e0>)
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	f7f7 fa2a 	bl	8000638 <__aeabi_dmul>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4650      	mov	r0, sl
 80091ea:	4659      	mov	r1, fp
 80091ec:	f7f7 f86c 	bl	80002c8 <__aeabi_dsub>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4680      	mov	r8, r0
 80091f6:	4689      	mov	r9, r1
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f7 f866 	bl	80002cc <__adddf3>
 8009200:	2000      	movs	r0, #0
 8009202:	4632      	mov	r2, r6
 8009204:	463b      	mov	r3, r7
 8009206:	4604      	mov	r4, r0
 8009208:	460d      	mov	r5, r1
 800920a:	f7f7 f85d 	bl	80002c8 <__aeabi_dsub>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4640      	mov	r0, r8
 8009214:	4649      	mov	r1, r9
 8009216:	f7f7 f857 	bl	80002c8 <__aeabi_dsub>
 800921a:	9b04      	ldr	r3, [sp, #16]
 800921c:	9a06      	ldr	r2, [sp, #24]
 800921e:	3b01      	subs	r3, #1
 8009220:	4313      	orrs	r3, r2
 8009222:	4682      	mov	sl, r0
 8009224:	468b      	mov	fp, r1
 8009226:	f040 81e7 	bne.w	80095f8 <__ieee754_pow+0x700>
 800922a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80092e0 <__ieee754_pow+0x3e8>
 800922e:	eeb0 8a47 	vmov.f32	s16, s14
 8009232:	eef0 8a67 	vmov.f32	s17, s15
 8009236:	e9dd 6700 	ldrd	r6, r7, [sp]
 800923a:	2600      	movs	r6, #0
 800923c:	4632      	mov	r2, r6
 800923e:	463b      	mov	r3, r7
 8009240:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009244:	f7f7 f840 	bl	80002c8 <__aeabi_dsub>
 8009248:	4622      	mov	r2, r4
 800924a:	462b      	mov	r3, r5
 800924c:	f7f7 f9f4 	bl	8000638 <__aeabi_dmul>
 8009250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009254:	4680      	mov	r8, r0
 8009256:	4689      	mov	r9, r1
 8009258:	4650      	mov	r0, sl
 800925a:	4659      	mov	r1, fp
 800925c:	f7f7 f9ec 	bl	8000638 <__aeabi_dmul>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4640      	mov	r0, r8
 8009266:	4649      	mov	r1, r9
 8009268:	f7f7 f830 	bl	80002cc <__adddf3>
 800926c:	4632      	mov	r2, r6
 800926e:	463b      	mov	r3, r7
 8009270:	4680      	mov	r8, r0
 8009272:	4689      	mov	r9, r1
 8009274:	4620      	mov	r0, r4
 8009276:	4629      	mov	r1, r5
 8009278:	f7f7 f9de 	bl	8000638 <__aeabi_dmul>
 800927c:	460b      	mov	r3, r1
 800927e:	4604      	mov	r4, r0
 8009280:	460d      	mov	r5, r1
 8009282:	4602      	mov	r2, r0
 8009284:	4649      	mov	r1, r9
 8009286:	4640      	mov	r0, r8
 8009288:	f7f7 f820 	bl	80002cc <__adddf3>
 800928c:	4b19      	ldr	r3, [pc, #100]	; (80092f4 <__ieee754_pow+0x3fc>)
 800928e:	4299      	cmp	r1, r3
 8009290:	ec45 4b19 	vmov	d9, r4, r5
 8009294:	4606      	mov	r6, r0
 8009296:	460f      	mov	r7, r1
 8009298:	468b      	mov	fp, r1
 800929a:	f340 82f1 	ble.w	8009880 <__ieee754_pow+0x988>
 800929e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80092a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80092a6:	4303      	orrs	r3, r0
 80092a8:	f000 81e4 	beq.w	8009674 <__ieee754_pow+0x77c>
 80092ac:	ec51 0b18 	vmov	r0, r1, d8
 80092b0:	2200      	movs	r2, #0
 80092b2:	2300      	movs	r3, #0
 80092b4:	f7f7 fc32 	bl	8000b1c <__aeabi_dcmplt>
 80092b8:	3800      	subs	r0, #0
 80092ba:	bf18      	it	ne
 80092bc:	2001      	movne	r0, #1
 80092be:	e72b      	b.n	8009118 <__ieee754_pow+0x220>
 80092c0:	60000000 	.word	0x60000000
 80092c4:	3ff71547 	.word	0x3ff71547
 80092c8:	f85ddf44 	.word	0xf85ddf44
 80092cc:	3e54ae0b 	.word	0x3e54ae0b
 80092d0:	55555555 	.word	0x55555555
 80092d4:	3fd55555 	.word	0x3fd55555
 80092d8:	652b82fe 	.word	0x652b82fe
 80092dc:	3ff71547 	.word	0x3ff71547
 80092e0:	00000000 	.word	0x00000000
 80092e4:	bff00000 	.word	0xbff00000
 80092e8:	3ff00000 	.word	0x3ff00000
 80092ec:	3fd00000 	.word	0x3fd00000
 80092f0:	3fe00000 	.word	0x3fe00000
 80092f4:	408fffff 	.word	0x408fffff
 80092f8:	4bd5      	ldr	r3, [pc, #852]	; (8009650 <__ieee754_pow+0x758>)
 80092fa:	402b      	ands	r3, r5
 80092fc:	2200      	movs	r2, #0
 80092fe:	b92b      	cbnz	r3, 800930c <__ieee754_pow+0x414>
 8009300:	4bd4      	ldr	r3, [pc, #848]	; (8009654 <__ieee754_pow+0x75c>)
 8009302:	f7f7 f999 	bl	8000638 <__aeabi_dmul>
 8009306:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800930a:	460c      	mov	r4, r1
 800930c:	1523      	asrs	r3, r4, #20
 800930e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009312:	4413      	add	r3, r2
 8009314:	9305      	str	r3, [sp, #20]
 8009316:	4bd0      	ldr	r3, [pc, #832]	; (8009658 <__ieee754_pow+0x760>)
 8009318:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800931c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009320:	429c      	cmp	r4, r3
 8009322:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009326:	dd08      	ble.n	800933a <__ieee754_pow+0x442>
 8009328:	4bcc      	ldr	r3, [pc, #816]	; (800965c <__ieee754_pow+0x764>)
 800932a:	429c      	cmp	r4, r3
 800932c:	f340 8162 	ble.w	80095f4 <__ieee754_pow+0x6fc>
 8009330:	9b05      	ldr	r3, [sp, #20]
 8009332:	3301      	adds	r3, #1
 8009334:	9305      	str	r3, [sp, #20]
 8009336:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800933a:	2400      	movs	r4, #0
 800933c:	00e3      	lsls	r3, r4, #3
 800933e:	9307      	str	r3, [sp, #28]
 8009340:	4bc7      	ldr	r3, [pc, #796]	; (8009660 <__ieee754_pow+0x768>)
 8009342:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009346:	ed93 7b00 	vldr	d7, [r3]
 800934a:	4629      	mov	r1, r5
 800934c:	ec53 2b17 	vmov	r2, r3, d7
 8009350:	eeb0 9a47 	vmov.f32	s18, s14
 8009354:	eef0 9a67 	vmov.f32	s19, s15
 8009358:	4682      	mov	sl, r0
 800935a:	f7f6 ffb5 	bl	80002c8 <__aeabi_dsub>
 800935e:	4652      	mov	r2, sl
 8009360:	4606      	mov	r6, r0
 8009362:	460f      	mov	r7, r1
 8009364:	462b      	mov	r3, r5
 8009366:	ec51 0b19 	vmov	r0, r1, d9
 800936a:	f7f6 ffaf 	bl	80002cc <__adddf3>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	2000      	movs	r0, #0
 8009374:	49bb      	ldr	r1, [pc, #748]	; (8009664 <__ieee754_pow+0x76c>)
 8009376:	f7f7 fa89 	bl	800088c <__aeabi_ddiv>
 800937a:	ec41 0b1a 	vmov	d10, r0, r1
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	4630      	mov	r0, r6
 8009384:	4639      	mov	r1, r7
 8009386:	f7f7 f957 	bl	8000638 <__aeabi_dmul>
 800938a:	2300      	movs	r3, #0
 800938c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009390:	9302      	str	r3, [sp, #8]
 8009392:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009396:	46ab      	mov	fp, r5
 8009398:	106d      	asrs	r5, r5, #1
 800939a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800939e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80093a2:	ec41 0b18 	vmov	d8, r0, r1
 80093a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80093aa:	2200      	movs	r2, #0
 80093ac:	4640      	mov	r0, r8
 80093ae:	4649      	mov	r1, r9
 80093b0:	4614      	mov	r4, r2
 80093b2:	461d      	mov	r5, r3
 80093b4:	f7f7 f940 	bl	8000638 <__aeabi_dmul>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f6 ff82 	bl	80002c8 <__aeabi_dsub>
 80093c4:	ec53 2b19 	vmov	r2, r3, d9
 80093c8:	4606      	mov	r6, r0
 80093ca:	460f      	mov	r7, r1
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	f7f6 ff7a 	bl	80002c8 <__aeabi_dsub>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4650      	mov	r0, sl
 80093da:	4659      	mov	r1, fp
 80093dc:	f7f6 ff74 	bl	80002c8 <__aeabi_dsub>
 80093e0:	4642      	mov	r2, r8
 80093e2:	464b      	mov	r3, r9
 80093e4:	f7f7 f928 	bl	8000638 <__aeabi_dmul>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4630      	mov	r0, r6
 80093ee:	4639      	mov	r1, r7
 80093f0:	f7f6 ff6a 	bl	80002c8 <__aeabi_dsub>
 80093f4:	ec53 2b1a 	vmov	r2, r3, d10
 80093f8:	f7f7 f91e 	bl	8000638 <__aeabi_dmul>
 80093fc:	ec53 2b18 	vmov	r2, r3, d8
 8009400:	ec41 0b19 	vmov	d9, r0, r1
 8009404:	ec51 0b18 	vmov	r0, r1, d8
 8009408:	f7f7 f916 	bl	8000638 <__aeabi_dmul>
 800940c:	a37c      	add	r3, pc, #496	; (adr r3, 8009600 <__ieee754_pow+0x708>)
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	4604      	mov	r4, r0
 8009414:	460d      	mov	r5, r1
 8009416:	f7f7 f90f 	bl	8000638 <__aeabi_dmul>
 800941a:	a37b      	add	r3, pc, #492	; (adr r3, 8009608 <__ieee754_pow+0x710>)
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7f6 ff54 	bl	80002cc <__adddf3>
 8009424:	4622      	mov	r2, r4
 8009426:	462b      	mov	r3, r5
 8009428:	f7f7 f906 	bl	8000638 <__aeabi_dmul>
 800942c:	a378      	add	r3, pc, #480	; (adr r3, 8009610 <__ieee754_pow+0x718>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f7f6 ff4b 	bl	80002cc <__adddf3>
 8009436:	4622      	mov	r2, r4
 8009438:	462b      	mov	r3, r5
 800943a:	f7f7 f8fd 	bl	8000638 <__aeabi_dmul>
 800943e:	a376      	add	r3, pc, #472	; (adr r3, 8009618 <__ieee754_pow+0x720>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	f7f6 ff42 	bl	80002cc <__adddf3>
 8009448:	4622      	mov	r2, r4
 800944a:	462b      	mov	r3, r5
 800944c:	f7f7 f8f4 	bl	8000638 <__aeabi_dmul>
 8009450:	a373      	add	r3, pc, #460	; (adr r3, 8009620 <__ieee754_pow+0x728>)
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	f7f6 ff39 	bl	80002cc <__adddf3>
 800945a:	4622      	mov	r2, r4
 800945c:	462b      	mov	r3, r5
 800945e:	f7f7 f8eb 	bl	8000638 <__aeabi_dmul>
 8009462:	a371      	add	r3, pc, #452	; (adr r3, 8009628 <__ieee754_pow+0x730>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	f7f6 ff30 	bl	80002cc <__adddf3>
 800946c:	4622      	mov	r2, r4
 800946e:	4606      	mov	r6, r0
 8009470:	460f      	mov	r7, r1
 8009472:	462b      	mov	r3, r5
 8009474:	4620      	mov	r0, r4
 8009476:	4629      	mov	r1, r5
 8009478:	f7f7 f8de 	bl	8000638 <__aeabi_dmul>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4630      	mov	r0, r6
 8009482:	4639      	mov	r1, r7
 8009484:	f7f7 f8d8 	bl	8000638 <__aeabi_dmul>
 8009488:	4642      	mov	r2, r8
 800948a:	4604      	mov	r4, r0
 800948c:	460d      	mov	r5, r1
 800948e:	464b      	mov	r3, r9
 8009490:	ec51 0b18 	vmov	r0, r1, d8
 8009494:	f7f6 ff1a 	bl	80002cc <__adddf3>
 8009498:	ec53 2b19 	vmov	r2, r3, d9
 800949c:	f7f7 f8cc 	bl	8000638 <__aeabi_dmul>
 80094a0:	4622      	mov	r2, r4
 80094a2:	462b      	mov	r3, r5
 80094a4:	f7f6 ff12 	bl	80002cc <__adddf3>
 80094a8:	4642      	mov	r2, r8
 80094aa:	4682      	mov	sl, r0
 80094ac:	468b      	mov	fp, r1
 80094ae:	464b      	mov	r3, r9
 80094b0:	4640      	mov	r0, r8
 80094b2:	4649      	mov	r1, r9
 80094b4:	f7f7 f8c0 	bl	8000638 <__aeabi_dmul>
 80094b8:	4b6b      	ldr	r3, [pc, #428]	; (8009668 <__ieee754_pow+0x770>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	4606      	mov	r6, r0
 80094be:	460f      	mov	r7, r1
 80094c0:	f7f6 ff04 	bl	80002cc <__adddf3>
 80094c4:	4652      	mov	r2, sl
 80094c6:	465b      	mov	r3, fp
 80094c8:	f7f6 ff00 	bl	80002cc <__adddf3>
 80094cc:	2000      	movs	r0, #0
 80094ce:	4604      	mov	r4, r0
 80094d0:	460d      	mov	r5, r1
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4640      	mov	r0, r8
 80094d8:	4649      	mov	r1, r9
 80094da:	f7f7 f8ad 	bl	8000638 <__aeabi_dmul>
 80094de:	4b62      	ldr	r3, [pc, #392]	; (8009668 <__ieee754_pow+0x770>)
 80094e0:	4680      	mov	r8, r0
 80094e2:	4689      	mov	r9, r1
 80094e4:	2200      	movs	r2, #0
 80094e6:	4620      	mov	r0, r4
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7f6 feed 	bl	80002c8 <__aeabi_dsub>
 80094ee:	4632      	mov	r2, r6
 80094f0:	463b      	mov	r3, r7
 80094f2:	f7f6 fee9 	bl	80002c8 <__aeabi_dsub>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4650      	mov	r0, sl
 80094fc:	4659      	mov	r1, fp
 80094fe:	f7f6 fee3 	bl	80002c8 <__aeabi_dsub>
 8009502:	ec53 2b18 	vmov	r2, r3, d8
 8009506:	f7f7 f897 	bl	8000638 <__aeabi_dmul>
 800950a:	4622      	mov	r2, r4
 800950c:	4606      	mov	r6, r0
 800950e:	460f      	mov	r7, r1
 8009510:	462b      	mov	r3, r5
 8009512:	ec51 0b19 	vmov	r0, r1, d9
 8009516:	f7f7 f88f 	bl	8000638 <__aeabi_dmul>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	4630      	mov	r0, r6
 8009520:	4639      	mov	r1, r7
 8009522:	f7f6 fed3 	bl	80002cc <__adddf3>
 8009526:	4606      	mov	r6, r0
 8009528:	460f      	mov	r7, r1
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4640      	mov	r0, r8
 8009530:	4649      	mov	r1, r9
 8009532:	f7f6 fecb 	bl	80002cc <__adddf3>
 8009536:	a33e      	add	r3, pc, #248	; (adr r3, 8009630 <__ieee754_pow+0x738>)
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	2000      	movs	r0, #0
 800953e:	4604      	mov	r4, r0
 8009540:	460d      	mov	r5, r1
 8009542:	f7f7 f879 	bl	8000638 <__aeabi_dmul>
 8009546:	4642      	mov	r2, r8
 8009548:	ec41 0b18 	vmov	d8, r0, r1
 800954c:	464b      	mov	r3, r9
 800954e:	4620      	mov	r0, r4
 8009550:	4629      	mov	r1, r5
 8009552:	f7f6 feb9 	bl	80002c8 <__aeabi_dsub>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4630      	mov	r0, r6
 800955c:	4639      	mov	r1, r7
 800955e:	f7f6 feb3 	bl	80002c8 <__aeabi_dsub>
 8009562:	a335      	add	r3, pc, #212	; (adr r3, 8009638 <__ieee754_pow+0x740>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f7f7 f866 	bl	8000638 <__aeabi_dmul>
 800956c:	a334      	add	r3, pc, #208	; (adr r3, 8009640 <__ieee754_pow+0x748>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	4606      	mov	r6, r0
 8009574:	460f      	mov	r7, r1
 8009576:	4620      	mov	r0, r4
 8009578:	4629      	mov	r1, r5
 800957a:	f7f7 f85d 	bl	8000638 <__aeabi_dmul>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4630      	mov	r0, r6
 8009584:	4639      	mov	r1, r7
 8009586:	f7f6 fea1 	bl	80002cc <__adddf3>
 800958a:	9a07      	ldr	r2, [sp, #28]
 800958c:	4b37      	ldr	r3, [pc, #220]	; (800966c <__ieee754_pow+0x774>)
 800958e:	4413      	add	r3, r2
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f7f6 fe9a 	bl	80002cc <__adddf3>
 8009598:	4682      	mov	sl, r0
 800959a:	9805      	ldr	r0, [sp, #20]
 800959c:	468b      	mov	fp, r1
 800959e:	f7f6 ffe1 	bl	8000564 <__aeabi_i2d>
 80095a2:	9a07      	ldr	r2, [sp, #28]
 80095a4:	4b32      	ldr	r3, [pc, #200]	; (8009670 <__ieee754_pow+0x778>)
 80095a6:	4413      	add	r3, r2
 80095a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095ac:	4606      	mov	r6, r0
 80095ae:	460f      	mov	r7, r1
 80095b0:	4652      	mov	r2, sl
 80095b2:	465b      	mov	r3, fp
 80095b4:	ec51 0b18 	vmov	r0, r1, d8
 80095b8:	f7f6 fe88 	bl	80002cc <__adddf3>
 80095bc:	4642      	mov	r2, r8
 80095be:	464b      	mov	r3, r9
 80095c0:	f7f6 fe84 	bl	80002cc <__adddf3>
 80095c4:	4632      	mov	r2, r6
 80095c6:	463b      	mov	r3, r7
 80095c8:	f7f6 fe80 	bl	80002cc <__adddf3>
 80095cc:	2000      	movs	r0, #0
 80095ce:	4632      	mov	r2, r6
 80095d0:	463b      	mov	r3, r7
 80095d2:	4604      	mov	r4, r0
 80095d4:	460d      	mov	r5, r1
 80095d6:	f7f6 fe77 	bl	80002c8 <__aeabi_dsub>
 80095da:	4642      	mov	r2, r8
 80095dc:	464b      	mov	r3, r9
 80095de:	f7f6 fe73 	bl	80002c8 <__aeabi_dsub>
 80095e2:	ec53 2b18 	vmov	r2, r3, d8
 80095e6:	f7f6 fe6f 	bl	80002c8 <__aeabi_dsub>
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4650      	mov	r0, sl
 80095f0:	4659      	mov	r1, fp
 80095f2:	e610      	b.n	8009216 <__ieee754_pow+0x31e>
 80095f4:	2401      	movs	r4, #1
 80095f6:	e6a1      	b.n	800933c <__ieee754_pow+0x444>
 80095f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009648 <__ieee754_pow+0x750>
 80095fc:	e617      	b.n	800922e <__ieee754_pow+0x336>
 80095fe:	bf00      	nop
 8009600:	4a454eef 	.word	0x4a454eef
 8009604:	3fca7e28 	.word	0x3fca7e28
 8009608:	93c9db65 	.word	0x93c9db65
 800960c:	3fcd864a 	.word	0x3fcd864a
 8009610:	a91d4101 	.word	0xa91d4101
 8009614:	3fd17460 	.word	0x3fd17460
 8009618:	518f264d 	.word	0x518f264d
 800961c:	3fd55555 	.word	0x3fd55555
 8009620:	db6fabff 	.word	0xdb6fabff
 8009624:	3fdb6db6 	.word	0x3fdb6db6
 8009628:	33333303 	.word	0x33333303
 800962c:	3fe33333 	.word	0x3fe33333
 8009630:	e0000000 	.word	0xe0000000
 8009634:	3feec709 	.word	0x3feec709
 8009638:	dc3a03fd 	.word	0xdc3a03fd
 800963c:	3feec709 	.word	0x3feec709
 8009640:	145b01f5 	.word	0x145b01f5
 8009644:	be3e2fe0 	.word	0xbe3e2fe0
 8009648:	00000000 	.word	0x00000000
 800964c:	3ff00000 	.word	0x3ff00000
 8009650:	7ff00000 	.word	0x7ff00000
 8009654:	43400000 	.word	0x43400000
 8009658:	0003988e 	.word	0x0003988e
 800965c:	000bb679 	.word	0x000bb679
 8009660:	0800bd30 	.word	0x0800bd30
 8009664:	3ff00000 	.word	0x3ff00000
 8009668:	40080000 	.word	0x40080000
 800966c:	0800bd50 	.word	0x0800bd50
 8009670:	0800bd40 	.word	0x0800bd40
 8009674:	a3b5      	add	r3, pc, #724	; (adr r3, 800994c <__ieee754_pow+0xa54>)
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	4640      	mov	r0, r8
 800967c:	4649      	mov	r1, r9
 800967e:	f7f6 fe25 	bl	80002cc <__adddf3>
 8009682:	4622      	mov	r2, r4
 8009684:	ec41 0b1a 	vmov	d10, r0, r1
 8009688:	462b      	mov	r3, r5
 800968a:	4630      	mov	r0, r6
 800968c:	4639      	mov	r1, r7
 800968e:	f7f6 fe1b 	bl	80002c8 <__aeabi_dsub>
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	ec51 0b1a 	vmov	r0, r1, d10
 800969a:	f7f7 fa5d 	bl	8000b58 <__aeabi_dcmpgt>
 800969e:	2800      	cmp	r0, #0
 80096a0:	f47f ae04 	bne.w	80092ac <__ieee754_pow+0x3b4>
 80096a4:	4aa4      	ldr	r2, [pc, #656]	; (8009938 <__ieee754_pow+0xa40>)
 80096a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096aa:	4293      	cmp	r3, r2
 80096ac:	f340 8108 	ble.w	80098c0 <__ieee754_pow+0x9c8>
 80096b0:	151b      	asrs	r3, r3, #20
 80096b2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80096b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80096ba:	fa4a f303 	asr.w	r3, sl, r3
 80096be:	445b      	add	r3, fp
 80096c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80096c4:	4e9d      	ldr	r6, [pc, #628]	; (800993c <__ieee754_pow+0xa44>)
 80096c6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80096ca:	4116      	asrs	r6, r2
 80096cc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80096d0:	2000      	movs	r0, #0
 80096d2:	ea23 0106 	bic.w	r1, r3, r6
 80096d6:	f1c2 0214 	rsb	r2, r2, #20
 80096da:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80096de:	fa4a fa02 	asr.w	sl, sl, r2
 80096e2:	f1bb 0f00 	cmp.w	fp, #0
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4620      	mov	r0, r4
 80096ec:	4629      	mov	r1, r5
 80096ee:	bfb8      	it	lt
 80096f0:	f1ca 0a00 	rsblt	sl, sl, #0
 80096f4:	f7f6 fde8 	bl	80002c8 <__aeabi_dsub>
 80096f8:	ec41 0b19 	vmov	d9, r0, r1
 80096fc:	4642      	mov	r2, r8
 80096fe:	464b      	mov	r3, r9
 8009700:	ec51 0b19 	vmov	r0, r1, d9
 8009704:	f7f6 fde2 	bl	80002cc <__adddf3>
 8009708:	a37b      	add	r3, pc, #492	; (adr r3, 80098f8 <__ieee754_pow+0xa00>)
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	2000      	movs	r0, #0
 8009710:	4604      	mov	r4, r0
 8009712:	460d      	mov	r5, r1
 8009714:	f7f6 ff90 	bl	8000638 <__aeabi_dmul>
 8009718:	ec53 2b19 	vmov	r2, r3, d9
 800971c:	4606      	mov	r6, r0
 800971e:	460f      	mov	r7, r1
 8009720:	4620      	mov	r0, r4
 8009722:	4629      	mov	r1, r5
 8009724:	f7f6 fdd0 	bl	80002c8 <__aeabi_dsub>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4640      	mov	r0, r8
 800972e:	4649      	mov	r1, r9
 8009730:	f7f6 fdca 	bl	80002c8 <__aeabi_dsub>
 8009734:	a372      	add	r3, pc, #456	; (adr r3, 8009900 <__ieee754_pow+0xa08>)
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	f7f6 ff7d 	bl	8000638 <__aeabi_dmul>
 800973e:	a372      	add	r3, pc, #456	; (adr r3, 8009908 <__ieee754_pow+0xa10>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	4680      	mov	r8, r0
 8009746:	4689      	mov	r9, r1
 8009748:	4620      	mov	r0, r4
 800974a:	4629      	mov	r1, r5
 800974c:	f7f6 ff74 	bl	8000638 <__aeabi_dmul>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4640      	mov	r0, r8
 8009756:	4649      	mov	r1, r9
 8009758:	f7f6 fdb8 	bl	80002cc <__adddf3>
 800975c:	4604      	mov	r4, r0
 800975e:	460d      	mov	r5, r1
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4630      	mov	r0, r6
 8009766:	4639      	mov	r1, r7
 8009768:	f7f6 fdb0 	bl	80002cc <__adddf3>
 800976c:	4632      	mov	r2, r6
 800976e:	463b      	mov	r3, r7
 8009770:	4680      	mov	r8, r0
 8009772:	4689      	mov	r9, r1
 8009774:	f7f6 fda8 	bl	80002c8 <__aeabi_dsub>
 8009778:	4602      	mov	r2, r0
 800977a:	460b      	mov	r3, r1
 800977c:	4620      	mov	r0, r4
 800977e:	4629      	mov	r1, r5
 8009780:	f7f6 fda2 	bl	80002c8 <__aeabi_dsub>
 8009784:	4642      	mov	r2, r8
 8009786:	4606      	mov	r6, r0
 8009788:	460f      	mov	r7, r1
 800978a:	464b      	mov	r3, r9
 800978c:	4640      	mov	r0, r8
 800978e:	4649      	mov	r1, r9
 8009790:	f7f6 ff52 	bl	8000638 <__aeabi_dmul>
 8009794:	a35e      	add	r3, pc, #376	; (adr r3, 8009910 <__ieee754_pow+0xa18>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	4604      	mov	r4, r0
 800979c:	460d      	mov	r5, r1
 800979e:	f7f6 ff4b 	bl	8000638 <__aeabi_dmul>
 80097a2:	a35d      	add	r3, pc, #372	; (adr r3, 8009918 <__ieee754_pow+0xa20>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 fd8e 	bl	80002c8 <__aeabi_dsub>
 80097ac:	4622      	mov	r2, r4
 80097ae:	462b      	mov	r3, r5
 80097b0:	f7f6 ff42 	bl	8000638 <__aeabi_dmul>
 80097b4:	a35a      	add	r3, pc, #360	; (adr r3, 8009920 <__ieee754_pow+0xa28>)
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	f7f6 fd87 	bl	80002cc <__adddf3>
 80097be:	4622      	mov	r2, r4
 80097c0:	462b      	mov	r3, r5
 80097c2:	f7f6 ff39 	bl	8000638 <__aeabi_dmul>
 80097c6:	a358      	add	r3, pc, #352	; (adr r3, 8009928 <__ieee754_pow+0xa30>)
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	f7f6 fd7c 	bl	80002c8 <__aeabi_dsub>
 80097d0:	4622      	mov	r2, r4
 80097d2:	462b      	mov	r3, r5
 80097d4:	f7f6 ff30 	bl	8000638 <__aeabi_dmul>
 80097d8:	a355      	add	r3, pc, #340	; (adr r3, 8009930 <__ieee754_pow+0xa38>)
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	f7f6 fd75 	bl	80002cc <__adddf3>
 80097e2:	4622      	mov	r2, r4
 80097e4:	462b      	mov	r3, r5
 80097e6:	f7f6 ff27 	bl	8000638 <__aeabi_dmul>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4640      	mov	r0, r8
 80097f0:	4649      	mov	r1, r9
 80097f2:	f7f6 fd69 	bl	80002c8 <__aeabi_dsub>
 80097f6:	4604      	mov	r4, r0
 80097f8:	460d      	mov	r5, r1
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	4640      	mov	r0, r8
 8009800:	4649      	mov	r1, r9
 8009802:	f7f6 ff19 	bl	8000638 <__aeabi_dmul>
 8009806:	2200      	movs	r2, #0
 8009808:	ec41 0b19 	vmov	d9, r0, r1
 800980c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009810:	4620      	mov	r0, r4
 8009812:	4629      	mov	r1, r5
 8009814:	f7f6 fd58 	bl	80002c8 <__aeabi_dsub>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	ec51 0b19 	vmov	r0, r1, d9
 8009820:	f7f7 f834 	bl	800088c <__aeabi_ddiv>
 8009824:	4632      	mov	r2, r6
 8009826:	4604      	mov	r4, r0
 8009828:	460d      	mov	r5, r1
 800982a:	463b      	mov	r3, r7
 800982c:	4640      	mov	r0, r8
 800982e:	4649      	mov	r1, r9
 8009830:	f7f6 ff02 	bl	8000638 <__aeabi_dmul>
 8009834:	4632      	mov	r2, r6
 8009836:	463b      	mov	r3, r7
 8009838:	f7f6 fd48 	bl	80002cc <__adddf3>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4620      	mov	r0, r4
 8009842:	4629      	mov	r1, r5
 8009844:	f7f6 fd40 	bl	80002c8 <__aeabi_dsub>
 8009848:	4642      	mov	r2, r8
 800984a:	464b      	mov	r3, r9
 800984c:	f7f6 fd3c 	bl	80002c8 <__aeabi_dsub>
 8009850:	460b      	mov	r3, r1
 8009852:	4602      	mov	r2, r0
 8009854:	493a      	ldr	r1, [pc, #232]	; (8009940 <__ieee754_pow+0xa48>)
 8009856:	2000      	movs	r0, #0
 8009858:	f7f6 fd36 	bl	80002c8 <__aeabi_dsub>
 800985c:	ec41 0b10 	vmov	d0, r0, r1
 8009860:	ee10 3a90 	vmov	r3, s1
 8009864:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800986c:	da2b      	bge.n	80098c6 <__ieee754_pow+0x9ce>
 800986e:	4650      	mov	r0, sl
 8009870:	f000 f966 	bl	8009b40 <scalbn>
 8009874:	ec51 0b10 	vmov	r0, r1, d0
 8009878:	ec53 2b18 	vmov	r2, r3, d8
 800987c:	f7ff bbed 	b.w	800905a <__ieee754_pow+0x162>
 8009880:	4b30      	ldr	r3, [pc, #192]	; (8009944 <__ieee754_pow+0xa4c>)
 8009882:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009886:	429e      	cmp	r6, r3
 8009888:	f77f af0c 	ble.w	80096a4 <__ieee754_pow+0x7ac>
 800988c:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <__ieee754_pow+0xa50>)
 800988e:	440b      	add	r3, r1
 8009890:	4303      	orrs	r3, r0
 8009892:	d009      	beq.n	80098a8 <__ieee754_pow+0x9b0>
 8009894:	ec51 0b18 	vmov	r0, r1, d8
 8009898:	2200      	movs	r2, #0
 800989a:	2300      	movs	r3, #0
 800989c:	f7f7 f93e 	bl	8000b1c <__aeabi_dcmplt>
 80098a0:	3800      	subs	r0, #0
 80098a2:	bf18      	it	ne
 80098a4:	2001      	movne	r0, #1
 80098a6:	e447      	b.n	8009138 <__ieee754_pow+0x240>
 80098a8:	4622      	mov	r2, r4
 80098aa:	462b      	mov	r3, r5
 80098ac:	f7f6 fd0c 	bl	80002c8 <__aeabi_dsub>
 80098b0:	4642      	mov	r2, r8
 80098b2:	464b      	mov	r3, r9
 80098b4:	f7f7 f946 	bl	8000b44 <__aeabi_dcmpge>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	f43f aef3 	beq.w	80096a4 <__ieee754_pow+0x7ac>
 80098be:	e7e9      	b.n	8009894 <__ieee754_pow+0x99c>
 80098c0:	f04f 0a00 	mov.w	sl, #0
 80098c4:	e71a      	b.n	80096fc <__ieee754_pow+0x804>
 80098c6:	ec51 0b10 	vmov	r0, r1, d0
 80098ca:	4619      	mov	r1, r3
 80098cc:	e7d4      	b.n	8009878 <__ieee754_pow+0x980>
 80098ce:	491c      	ldr	r1, [pc, #112]	; (8009940 <__ieee754_pow+0xa48>)
 80098d0:	2000      	movs	r0, #0
 80098d2:	f7ff bb30 	b.w	8008f36 <__ieee754_pow+0x3e>
 80098d6:	2000      	movs	r0, #0
 80098d8:	2100      	movs	r1, #0
 80098da:	f7ff bb2c 	b.w	8008f36 <__ieee754_pow+0x3e>
 80098de:	4630      	mov	r0, r6
 80098e0:	4639      	mov	r1, r7
 80098e2:	f7ff bb28 	b.w	8008f36 <__ieee754_pow+0x3e>
 80098e6:	9204      	str	r2, [sp, #16]
 80098e8:	f7ff bb7a 	b.w	8008fe0 <__ieee754_pow+0xe8>
 80098ec:	2300      	movs	r3, #0
 80098ee:	f7ff bb64 	b.w	8008fba <__ieee754_pow+0xc2>
 80098f2:	bf00      	nop
 80098f4:	f3af 8000 	nop.w
 80098f8:	00000000 	.word	0x00000000
 80098fc:	3fe62e43 	.word	0x3fe62e43
 8009900:	fefa39ef 	.word	0xfefa39ef
 8009904:	3fe62e42 	.word	0x3fe62e42
 8009908:	0ca86c39 	.word	0x0ca86c39
 800990c:	be205c61 	.word	0xbe205c61
 8009910:	72bea4d0 	.word	0x72bea4d0
 8009914:	3e663769 	.word	0x3e663769
 8009918:	c5d26bf1 	.word	0xc5d26bf1
 800991c:	3ebbbd41 	.word	0x3ebbbd41
 8009920:	af25de2c 	.word	0xaf25de2c
 8009924:	3f11566a 	.word	0x3f11566a
 8009928:	16bebd93 	.word	0x16bebd93
 800992c:	3f66c16c 	.word	0x3f66c16c
 8009930:	5555553e 	.word	0x5555553e
 8009934:	3fc55555 	.word	0x3fc55555
 8009938:	3fe00000 	.word	0x3fe00000
 800993c:	000fffff 	.word	0x000fffff
 8009940:	3ff00000 	.word	0x3ff00000
 8009944:	4090cbff 	.word	0x4090cbff
 8009948:	3f6f3400 	.word	0x3f6f3400
 800994c:	652b82fe 	.word	0x652b82fe
 8009950:	3c971547 	.word	0x3c971547

08009954 <__ieee754_sqrt>:
 8009954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009958:	ec55 4b10 	vmov	r4, r5, d0
 800995c:	4e55      	ldr	r6, [pc, #340]	; (8009ab4 <__ieee754_sqrt+0x160>)
 800995e:	43ae      	bics	r6, r5
 8009960:	ee10 0a10 	vmov	r0, s0
 8009964:	ee10 3a10 	vmov	r3, s0
 8009968:	462a      	mov	r2, r5
 800996a:	4629      	mov	r1, r5
 800996c:	d110      	bne.n	8009990 <__ieee754_sqrt+0x3c>
 800996e:	ee10 2a10 	vmov	r2, s0
 8009972:	462b      	mov	r3, r5
 8009974:	f7f6 fe60 	bl	8000638 <__aeabi_dmul>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4620      	mov	r0, r4
 800997e:	4629      	mov	r1, r5
 8009980:	f7f6 fca4 	bl	80002cc <__adddf3>
 8009984:	4604      	mov	r4, r0
 8009986:	460d      	mov	r5, r1
 8009988:	ec45 4b10 	vmov	d0, r4, r5
 800998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009990:	2d00      	cmp	r5, #0
 8009992:	dc10      	bgt.n	80099b6 <__ieee754_sqrt+0x62>
 8009994:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009998:	4330      	orrs	r0, r6
 800999a:	d0f5      	beq.n	8009988 <__ieee754_sqrt+0x34>
 800999c:	b15d      	cbz	r5, 80099b6 <__ieee754_sqrt+0x62>
 800999e:	ee10 2a10 	vmov	r2, s0
 80099a2:	462b      	mov	r3, r5
 80099a4:	ee10 0a10 	vmov	r0, s0
 80099a8:	f7f6 fc8e 	bl	80002c8 <__aeabi_dsub>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	f7f6 ff6c 	bl	800088c <__aeabi_ddiv>
 80099b4:	e7e6      	b.n	8009984 <__ieee754_sqrt+0x30>
 80099b6:	1512      	asrs	r2, r2, #20
 80099b8:	d074      	beq.n	8009aa4 <__ieee754_sqrt+0x150>
 80099ba:	07d4      	lsls	r4, r2, #31
 80099bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80099c0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80099c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80099c8:	bf5e      	ittt	pl
 80099ca:	0fda      	lsrpl	r2, r3, #31
 80099cc:	005b      	lslpl	r3, r3, #1
 80099ce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80099d2:	2400      	movs	r4, #0
 80099d4:	0fda      	lsrs	r2, r3, #31
 80099d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80099da:	107f      	asrs	r7, r7, #1
 80099dc:	005b      	lsls	r3, r3, #1
 80099de:	2516      	movs	r5, #22
 80099e0:	4620      	mov	r0, r4
 80099e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80099e6:	1886      	adds	r6, r0, r2
 80099e8:	428e      	cmp	r6, r1
 80099ea:	bfde      	ittt	le
 80099ec:	1b89      	suble	r1, r1, r6
 80099ee:	18b0      	addle	r0, r6, r2
 80099f0:	18a4      	addle	r4, r4, r2
 80099f2:	0049      	lsls	r1, r1, #1
 80099f4:	3d01      	subs	r5, #1
 80099f6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80099fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80099fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a02:	d1f0      	bne.n	80099e6 <__ieee754_sqrt+0x92>
 8009a04:	462a      	mov	r2, r5
 8009a06:	f04f 0e20 	mov.w	lr, #32
 8009a0a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009a0e:	4281      	cmp	r1, r0
 8009a10:	eb06 0c05 	add.w	ip, r6, r5
 8009a14:	dc02      	bgt.n	8009a1c <__ieee754_sqrt+0xc8>
 8009a16:	d113      	bne.n	8009a40 <__ieee754_sqrt+0xec>
 8009a18:	459c      	cmp	ip, r3
 8009a1a:	d811      	bhi.n	8009a40 <__ieee754_sqrt+0xec>
 8009a1c:	f1bc 0f00 	cmp.w	ip, #0
 8009a20:	eb0c 0506 	add.w	r5, ip, r6
 8009a24:	da43      	bge.n	8009aae <__ieee754_sqrt+0x15a>
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	db41      	blt.n	8009aae <__ieee754_sqrt+0x15a>
 8009a2a:	f100 0801 	add.w	r8, r0, #1
 8009a2e:	1a09      	subs	r1, r1, r0
 8009a30:	459c      	cmp	ip, r3
 8009a32:	bf88      	it	hi
 8009a34:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009a38:	eba3 030c 	sub.w	r3, r3, ip
 8009a3c:	4432      	add	r2, r6
 8009a3e:	4640      	mov	r0, r8
 8009a40:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009a44:	f1be 0e01 	subs.w	lr, lr, #1
 8009a48:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009a4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a50:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a54:	d1db      	bne.n	8009a0e <__ieee754_sqrt+0xba>
 8009a56:	430b      	orrs	r3, r1
 8009a58:	d006      	beq.n	8009a68 <__ieee754_sqrt+0x114>
 8009a5a:	1c50      	adds	r0, r2, #1
 8009a5c:	bf13      	iteet	ne
 8009a5e:	3201      	addne	r2, #1
 8009a60:	3401      	addeq	r4, #1
 8009a62:	4672      	moveq	r2, lr
 8009a64:	f022 0201 	bicne.w	r2, r2, #1
 8009a68:	1063      	asrs	r3, r4, #1
 8009a6a:	0852      	lsrs	r2, r2, #1
 8009a6c:	07e1      	lsls	r1, r4, #31
 8009a6e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009a72:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009a76:	bf48      	it	mi
 8009a78:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009a7c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009a80:	4614      	mov	r4, r2
 8009a82:	e781      	b.n	8009988 <__ieee754_sqrt+0x34>
 8009a84:	0ad9      	lsrs	r1, r3, #11
 8009a86:	3815      	subs	r0, #21
 8009a88:	055b      	lsls	r3, r3, #21
 8009a8a:	2900      	cmp	r1, #0
 8009a8c:	d0fa      	beq.n	8009a84 <__ieee754_sqrt+0x130>
 8009a8e:	02cd      	lsls	r5, r1, #11
 8009a90:	d50a      	bpl.n	8009aa8 <__ieee754_sqrt+0x154>
 8009a92:	f1c2 0420 	rsb	r4, r2, #32
 8009a96:	fa23 f404 	lsr.w	r4, r3, r4
 8009a9a:	1e55      	subs	r5, r2, #1
 8009a9c:	4093      	lsls	r3, r2
 8009a9e:	4321      	orrs	r1, r4
 8009aa0:	1b42      	subs	r2, r0, r5
 8009aa2:	e78a      	b.n	80099ba <__ieee754_sqrt+0x66>
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	e7f0      	b.n	8009a8a <__ieee754_sqrt+0x136>
 8009aa8:	0049      	lsls	r1, r1, #1
 8009aaa:	3201      	adds	r2, #1
 8009aac:	e7ef      	b.n	8009a8e <__ieee754_sqrt+0x13a>
 8009aae:	4680      	mov	r8, r0
 8009ab0:	e7bd      	b.n	8009a2e <__ieee754_sqrt+0xda>
 8009ab2:	bf00      	nop
 8009ab4:	7ff00000 	.word	0x7ff00000

08009ab8 <with_errno>:
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	4604      	mov	r4, r0
 8009abc:	460d      	mov	r5, r1
 8009abe:	4616      	mov	r6, r2
 8009ac0:	f7fc fbd2 	bl	8006268 <__errno>
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	6006      	str	r6, [r0, #0]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	bd70      	pop	{r4, r5, r6, pc}

08009acc <xflow>:
 8009acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ace:	4614      	mov	r4, r2
 8009ad0:	461d      	mov	r5, r3
 8009ad2:	b108      	cbz	r0, 8009ad8 <xflow+0xc>
 8009ad4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ad8:	e9cd 2300 	strd	r2, r3, [sp]
 8009adc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	4629      	mov	r1, r5
 8009ae4:	f7f6 fda8 	bl	8000638 <__aeabi_dmul>
 8009ae8:	2222      	movs	r2, #34	; 0x22
 8009aea:	b003      	add	sp, #12
 8009aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009af0:	f7ff bfe2 	b.w	8009ab8 <with_errno>

08009af4 <__math_uflow>:
 8009af4:	b508      	push	{r3, lr}
 8009af6:	2200      	movs	r2, #0
 8009af8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009afc:	f7ff ffe6 	bl	8009acc <xflow>
 8009b00:	ec41 0b10 	vmov	d0, r0, r1
 8009b04:	bd08      	pop	{r3, pc}

08009b06 <__math_oflow>:
 8009b06:	b508      	push	{r3, lr}
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009b0e:	f7ff ffdd 	bl	8009acc <xflow>
 8009b12:	ec41 0b10 	vmov	d0, r0, r1
 8009b16:	bd08      	pop	{r3, pc}

08009b18 <fabs>:
 8009b18:	ec51 0b10 	vmov	r0, r1, d0
 8009b1c:	ee10 2a10 	vmov	r2, s0
 8009b20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b24:	ec43 2b10 	vmov	d0, r2, r3
 8009b28:	4770      	bx	lr

08009b2a <finite>:
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	ed8d 0b00 	vstr	d0, [sp]
 8009b30:	9801      	ldr	r0, [sp, #4]
 8009b32:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009b36:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009b3a:	0fc0      	lsrs	r0, r0, #31
 8009b3c:	b002      	add	sp, #8
 8009b3e:	4770      	bx	lr

08009b40 <scalbn>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	ec55 4b10 	vmov	r4, r5, d0
 8009b46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	462b      	mov	r3, r5
 8009b4e:	b99a      	cbnz	r2, 8009b78 <scalbn+0x38>
 8009b50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009b54:	4323      	orrs	r3, r4
 8009b56:	d036      	beq.n	8009bc6 <scalbn+0x86>
 8009b58:	4b39      	ldr	r3, [pc, #228]	; (8009c40 <scalbn+0x100>)
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	ee10 0a10 	vmov	r0, s0
 8009b60:	2200      	movs	r2, #0
 8009b62:	f7f6 fd69 	bl	8000638 <__aeabi_dmul>
 8009b66:	4b37      	ldr	r3, [pc, #220]	; (8009c44 <scalbn+0x104>)
 8009b68:	429e      	cmp	r6, r3
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	460d      	mov	r5, r1
 8009b6e:	da10      	bge.n	8009b92 <scalbn+0x52>
 8009b70:	a32b      	add	r3, pc, #172	; (adr r3, 8009c20 <scalbn+0xe0>)
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	e03a      	b.n	8009bee <scalbn+0xae>
 8009b78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009b7c:	428a      	cmp	r2, r1
 8009b7e:	d10c      	bne.n	8009b9a <scalbn+0x5a>
 8009b80:	ee10 2a10 	vmov	r2, s0
 8009b84:	4620      	mov	r0, r4
 8009b86:	4629      	mov	r1, r5
 8009b88:	f7f6 fba0 	bl	80002cc <__adddf3>
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	460d      	mov	r5, r1
 8009b90:	e019      	b.n	8009bc6 <scalbn+0x86>
 8009b92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009b96:	460b      	mov	r3, r1
 8009b98:	3a36      	subs	r2, #54	; 0x36
 8009b9a:	4432      	add	r2, r6
 8009b9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009ba0:	428a      	cmp	r2, r1
 8009ba2:	dd08      	ble.n	8009bb6 <scalbn+0x76>
 8009ba4:	2d00      	cmp	r5, #0
 8009ba6:	a120      	add	r1, pc, #128	; (adr r1, 8009c28 <scalbn+0xe8>)
 8009ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bac:	da1c      	bge.n	8009be8 <scalbn+0xa8>
 8009bae:	a120      	add	r1, pc, #128	; (adr r1, 8009c30 <scalbn+0xf0>)
 8009bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb4:	e018      	b.n	8009be8 <scalbn+0xa8>
 8009bb6:	2a00      	cmp	r2, #0
 8009bb8:	dd08      	ble.n	8009bcc <scalbn+0x8c>
 8009bba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009bbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009bc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009bc6:	ec45 4b10 	vmov	d0, r4, r5
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009bd0:	da19      	bge.n	8009c06 <scalbn+0xc6>
 8009bd2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009bd6:	429e      	cmp	r6, r3
 8009bd8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009bdc:	dd0a      	ble.n	8009bf4 <scalbn+0xb4>
 8009bde:	a112      	add	r1, pc, #72	; (adr r1, 8009c28 <scalbn+0xe8>)
 8009be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e2      	bne.n	8009bae <scalbn+0x6e>
 8009be8:	a30f      	add	r3, pc, #60	; (adr r3, 8009c28 <scalbn+0xe8>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f7f6 fd23 	bl	8000638 <__aeabi_dmul>
 8009bf2:	e7cb      	b.n	8009b8c <scalbn+0x4c>
 8009bf4:	a10a      	add	r1, pc, #40	; (adr r1, 8009c20 <scalbn+0xe0>)
 8009bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d0b8      	beq.n	8009b70 <scalbn+0x30>
 8009bfe:	a10e      	add	r1, pc, #56	; (adr r1, 8009c38 <scalbn+0xf8>)
 8009c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c04:	e7b4      	b.n	8009b70 <scalbn+0x30>
 8009c06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c0a:	3236      	adds	r2, #54	; 0x36
 8009c0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009c14:	4620      	mov	r0, r4
 8009c16:	4b0c      	ldr	r3, [pc, #48]	; (8009c48 <scalbn+0x108>)
 8009c18:	2200      	movs	r2, #0
 8009c1a:	e7e8      	b.n	8009bee <scalbn+0xae>
 8009c1c:	f3af 8000 	nop.w
 8009c20:	c2f8f359 	.word	0xc2f8f359
 8009c24:	01a56e1f 	.word	0x01a56e1f
 8009c28:	8800759c 	.word	0x8800759c
 8009c2c:	7e37e43c 	.word	0x7e37e43c
 8009c30:	8800759c 	.word	0x8800759c
 8009c34:	fe37e43c 	.word	0xfe37e43c
 8009c38:	c2f8f359 	.word	0xc2f8f359
 8009c3c:	81a56e1f 	.word	0x81a56e1f
 8009c40:	43500000 	.word	0x43500000
 8009c44:	ffff3cb0 	.word	0xffff3cb0
 8009c48:	3c900000 	.word	0x3c900000

08009c4c <_init>:
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	bf00      	nop
 8009c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c52:	bc08      	pop	{r3}
 8009c54:	469e      	mov	lr, r3
 8009c56:	4770      	bx	lr

08009c58 <_fini>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	bf00      	nop
 8009c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5e:	bc08      	pop	{r3}
 8009c60:	469e      	mov	lr, r3
 8009c62:	4770      	bx	lr
